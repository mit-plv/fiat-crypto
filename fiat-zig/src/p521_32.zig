// Autogenerated: 'src/ExtractionOCaml/unsaturated_solinas' --lang Zig --internal-static --public-function-case camelCase --private-function-case camelCase --public-type-case UpperCamelCase --private-type-case UpperCamelCase --no-prefix-fiat --package-name p521 '' 32 '(auto)' '2^521 - 1' carry_mul carry_square carry add sub opp selectznz to_bytes from_bytes relax
// curve description (via package name): p521
// machine_wordsize = 32 (from "32")
// requested operations: carry_mul, carry_square, carry, add, sub, opp, selectznz, to_bytes, from_bytes, relax
// n = 19 (from "(auto)")
// s-c = 2^521 - [(1, 1)] (from "2^521 - 1")
// tight_bounds_multiplier = 1 (from "")
//
// Computed values:
//   carry_chain = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1]
//   eval z = z[0] + (z[1] << 28) + (z[2] << 55) + (z[3] << 83) + (z[4] << 110) + (z[5] << 138) + (z[6] << 165) + (z[7] << 192) + (z[8] << 220) + (z[9] << 247) + (z[10] << 0x113) + (z[11] << 0x12e) + (z[12] << 0x14a) + (z[13] << 0x165) + (z[14] << 0x180) + (z[15] << 0x19c) + (z[16] << 0x1b7) + (z[17] << 0x1d3) + (z[18] << 0x1ee)
//   bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17] << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168) + (z[22] << 176) + (z[23] << 184) + (z[24] << 192) + (z[25] << 200) + (z[26] << 208) + (z[27] << 216) + (z[28] << 224) + (z[29] << 232) + (z[30] << 240) + (z[31] << 248) + (z[32] << 256) + (z[33] << 0x108) + (z[34] << 0x110) + (z[35] << 0x118) + (z[36] << 0x120) + (z[37] << 0x128) + (z[38] << 0x130) + (z[39] << 0x138) + (z[40] << 0x140) + (z[41] << 0x148) + (z[42] << 0x150) + (z[43] << 0x158) + (z[44] << 0x160) + (z[45] << 0x168) + (z[46] << 0x170) + (z[47] << 0x178) + (z[48] << 0x180) + (z[49] << 0x188) + (z[50] << 0x190) + (z[51] << 0x198) + (z[52] << 0x1a0) + (z[53] << 0x1a8) + (z[54] << 0x1b0) + (z[55] << 0x1b8) + (z[56] << 0x1c0) + (z[57] << 0x1c8) + (z[58] << 0x1d0) + (z[59] << 0x1d8) + (z[60] << 0x1e0) + (z[61] << 0x1e8) + (z[62] << 0x1f0) + (z[63] << 0x1f8) + (z[64] << 2^9) + (z[65] << 0x208)
//   balance = [0x1ffffffe, 0xffffffe, 0x1ffffffe, 0xffffffe, 0x1ffffffe, 0xffffffe, 0xffffffe, 0x1ffffffe, 0xffffffe, 0x1ffffffe, 0xffffffe, 0x1ffffffe, 0xffffffe, 0xffffffe, 0x1ffffffe, 0xffffffe, 0x1ffffffe, 0xffffffe, 0xffffffe]

const std = @import("std");
const mode = @import("builtin").mode; // Checked arithmetic is disabled in non-debug modes to avoid side channels

inline fn cast(comptime DestType: type, target: anytype) DestType {
    @setEvalBranchQuota(10000);
    if (@typeInfo(@TypeOf(target)) == .Int) {
        const dest = @typeInfo(DestType).Int;
        const source = @typeInfo(@TypeOf(target)).Int;
        if (dest.bits < source.bits) {
            const T = std.meta.Int(source.signedness, dest.bits);
            return @bitCast(@as(T, @truncate(target)));
        }
    }
    return target;
}

// The type LooseFieldElement is a field element with loose bounds.
// Bounds: [[0x0 ~> 0x30000000], [0x0 ~> 0x18000000], [0x0 ~> 0x30000000], [0x0 ~> 0x18000000], [0x0 ~> 0x30000000], [0x0 ~> 0x18000000], [0x0 ~> 0x18000000], [0x0 ~> 0x30000000], [0x0 ~> 0x18000000], [0x0 ~> 0x30000000], [0x0 ~> 0x18000000], [0x0 ~> 0x30000000], [0x0 ~> 0x18000000], [0x0 ~> 0x18000000], [0x0 ~> 0x30000000], [0x0 ~> 0x18000000], [0x0 ~> 0x30000000], [0x0 ~> 0x18000000], [0x0 ~> 0x18000000]]
pub const LooseFieldElement = [19]u32;

// The type TightFieldElement is a field element with tight bounds.
// Bounds: [[0x0 ~> 0x10000000], [0x0 ~> 0x8000000], [0x0 ~> 0x10000000], [0x0 ~> 0x8000000], [0x0 ~> 0x10000000], [0x0 ~> 0x8000000], [0x0 ~> 0x8000000], [0x0 ~> 0x10000000], [0x0 ~> 0x8000000], [0x0 ~> 0x10000000], [0x0 ~> 0x8000000], [0x0 ~> 0x10000000], [0x0 ~> 0x8000000], [0x0 ~> 0x8000000], [0x0 ~> 0x10000000], [0x0 ~> 0x8000000], [0x0 ~> 0x10000000], [0x0 ~> 0x8000000], [0x0 ~> 0x8000000]]
pub const TightFieldElement = [19]u32;

/// The function addcarryxU28 is an addition with carry.
///
/// Postconditions:
///   out1 = (arg1 + arg2 + arg3) mod 2^28
///   out2 = ⌊(arg1 + arg2 + arg3) / 2^28⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xfffffff]
///   arg3: [0x0 ~> 0xfffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xfffffff]
///   out2: [0x0 ~> 0x1]
inline fn addcarryxU28(out1: *u32, out2: *u1, arg1: u1, arg2: u32, arg3: u32) void {
    @setRuntimeSafety(mode == .Debug);

    const x1 = ((cast(u32, arg1) + arg2) + arg3);
    const x2 = (x1 & 0xfffffff);
    const x3 = cast(u1, (x1 >> 28));
    out1.* = x2;
    out2.* = x3;
}

/// The function subborrowxU28 is a subtraction with borrow.
///
/// Postconditions:
///   out1 = (-arg1 + arg2 + -arg3) mod 2^28
///   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^28⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xfffffff]
///   arg3: [0x0 ~> 0xfffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xfffffff]
///   out2: [0x0 ~> 0x1]
inline fn subborrowxU28(out1: *u32, out2: *u1, arg1: u1, arg2: u32, arg3: u32) void {
    @setRuntimeSafety(mode == .Debug);

    const x1 = cast(i32, (cast(i64, cast(i32, (cast(i64, arg2) - cast(i64, arg1)))) - cast(i64, arg3)));
    const x2 = cast(i1, (x1 >> 28));
    const x3 = cast(u32, (cast(i64, x1) & cast(i64, 0xfffffff)));
    out1.* = x3;
    out2.* = cast(u1, (cast(i2, 0x0) - cast(i2, x2)));
}

/// The function addcarryxU27 is an addition with carry.
///
/// Postconditions:
///   out1 = (arg1 + arg2 + arg3) mod 2^27
///   out2 = ⌊(arg1 + arg2 + arg3) / 2^27⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0x7ffffff]
///   arg3: [0x0 ~> 0x7ffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0x7ffffff]
///   out2: [0x0 ~> 0x1]
inline fn addcarryxU27(out1: *u32, out2: *u1, arg1: u1, arg2: u32, arg3: u32) void {
    @setRuntimeSafety(mode == .Debug);

    const x1 = ((cast(u32, arg1) + arg2) + arg3);
    const x2 = (x1 & 0x7ffffff);
    const x3 = cast(u1, (x1 >> 27));
    out1.* = x2;
    out2.* = x3;
}

/// The function subborrowxU27 is a subtraction with borrow.
///
/// Postconditions:
///   out1 = (-arg1 + arg2 + -arg3) mod 2^27
///   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^27⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0x7ffffff]
///   arg3: [0x0 ~> 0x7ffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0x7ffffff]
///   out2: [0x0 ~> 0x1]
inline fn subborrowxU27(out1: *u32, out2: *u1, arg1: u1, arg2: u32, arg3: u32) void {
    @setRuntimeSafety(mode == .Debug);

    const x1 = cast(i32, (cast(i64, cast(i32, (cast(i64, arg2) - cast(i64, arg1)))) - cast(i64, arg3)));
    const x2 = cast(i1, (x1 >> 27));
    const x3 = cast(u32, (cast(i64, x1) & cast(i64, 0x7ffffff)));
    out1.* = x3;
    out2.* = cast(u1, (cast(i2, 0x0) - cast(i2, x2)));
}

/// The function cmovznzU32 is a single-word conditional move.
///
/// Postconditions:
///   out1 = (if arg1 = 0 then arg2 else arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
inline fn cmovznzU32(out1: *u32, arg1: u1, arg2: u32, arg3: u32) void {
    @setRuntimeSafety(mode == .Debug);

    const x1 = (~(~arg1));
    const x2 = cast(u32, (cast(i64, cast(i1, (cast(i2, 0x0) - cast(i2, x1)))) & cast(i64, 0xffffffff)));
    const x3 = ((x2 & arg3) | ((~x2) & arg2));
    out1.* = x3;
}

/// The function carryMul multiplies two field elements and reduces the result.
///
/// Postconditions:
///   eval out1 mod m = (eval arg1 * eval arg2) mod m
///
pub fn carryMul(out1: *TightFieldElement, arg1: LooseFieldElement, arg2: LooseFieldElement) void {
    @setRuntimeSafety(mode == .Debug);

    const x1 = (cast(u64, (arg1[18])) * cast(u64, (arg2[18])));
    const x2 = (cast(u64, (arg1[18])) * cast(u64, ((arg2[17]) * 0x2)));
    const x3 = (cast(u64, (arg1[18])) * cast(u64, (arg2[16])));
    const x4 = (cast(u64, (arg1[18])) * cast(u64, ((arg2[15]) * 0x2)));
    const x5 = (cast(u64, (arg1[18])) * cast(u64, (arg2[14])));
    const x6 = (cast(u64, (arg1[18])) * cast(u64, (arg2[13])));
    const x7 = (cast(u64, (arg1[18])) * cast(u64, ((arg2[12]) * 0x2)));
    const x8 = (cast(u64, (arg1[18])) * cast(u64, (arg2[11])));
    const x9 = (cast(u64, (arg1[18])) * cast(u64, ((arg2[10]) * 0x2)));
    const x10 = (cast(u64, (arg1[18])) * cast(u64, (arg2[9])));
    const x11 = (cast(u64, (arg1[18])) * cast(u64, ((arg2[8]) * 0x2)));
    const x12 = (cast(u64, (arg1[18])) * cast(u64, (arg2[7])));
    const x13 = (cast(u64, (arg1[18])) * cast(u64, (arg2[6])));
    const x14 = (cast(u64, (arg1[18])) * cast(u64, ((arg2[5]) * 0x2)));
    const x15 = (cast(u64, (arg1[18])) * cast(u64, (arg2[4])));
    const x16 = (cast(u64, (arg1[18])) * cast(u64, ((arg2[3]) * 0x2)));
    const x17 = (cast(u64, (arg1[18])) * cast(u64, (arg2[2])));
    const x18 = (cast(u64, (arg1[18])) * cast(u64, ((arg2[1]) * 0x2)));
    const x19 = (cast(u64, (arg1[17])) * cast(u64, ((arg2[18]) * 0x2)));
    const x20 = (cast(u64, (arg1[17])) * cast(u64, ((arg2[17]) * 0x2)));
    const x21 = (cast(u64, (arg1[17])) * cast(u64, ((arg2[16]) * 0x2)));
    const x22 = (cast(u64, (arg1[17])) * cast(u64, ((arg2[15]) * 0x2)));
    const x23 = (cast(u64, (arg1[17])) * cast(u64, (arg2[14])));
    const x24 = (cast(u64, (arg1[17])) * cast(u64, ((arg2[13]) * 0x2)));
    const x25 = (cast(u64, (arg1[17])) * cast(u64, ((arg2[12]) * 0x2)));
    const x26 = (cast(u64, (arg1[17])) * cast(u64, ((arg2[11]) * 0x2)));
    const x27 = (cast(u64, (arg1[17])) * cast(u64, ((arg2[10]) * 0x2)));
    const x28 = (cast(u64, (arg1[17])) * cast(u64, ((arg2[9]) * 0x2)));
    const x29 = (cast(u64, (arg1[17])) * cast(u64, ((arg2[8]) * 0x2)));
    const x30 = (cast(u64, (arg1[17])) * cast(u64, (arg2[7])));
    const x31 = (cast(u64, (arg1[17])) * cast(u64, ((arg2[6]) * 0x2)));
    const x32 = (cast(u64, (arg1[17])) * cast(u64, ((arg2[5]) * 0x2)));
    const x33 = (cast(u64, (arg1[17])) * cast(u64, ((arg2[4]) * 0x2)));
    const x34 = (cast(u64, (arg1[17])) * cast(u64, ((arg2[3]) * 0x2)));
    const x35 = (cast(u64, (arg1[17])) * cast(u64, ((arg2[2]) * 0x2)));
    const x36 = (cast(u64, (arg1[16])) * cast(u64, (arg2[18])));
    const x37 = (cast(u64, (arg1[16])) * cast(u64, ((arg2[17]) * 0x2)));
    const x38 = (cast(u64, (arg1[16])) * cast(u64, (arg2[16])));
    const x39 = (cast(u64, (arg1[16])) * cast(u64, (arg2[15])));
    const x40 = (cast(u64, (arg1[16])) * cast(u64, (arg2[14])));
    const x41 = (cast(u64, (arg1[16])) * cast(u64, (arg2[13])));
    const x42 = (cast(u64, (arg1[16])) * cast(u64, ((arg2[12]) * 0x2)));
    const x43 = (cast(u64, (arg1[16])) * cast(u64, (arg2[11])));
    const x44 = (cast(u64, (arg1[16])) * cast(u64, ((arg2[10]) * 0x2)));
    const x45 = (cast(u64, (arg1[16])) * cast(u64, (arg2[9])));
    const x46 = (cast(u64, (arg1[16])) * cast(u64, (arg2[8])));
    const x47 = (cast(u64, (arg1[16])) * cast(u64, (arg2[7])));
    const x48 = (cast(u64, (arg1[16])) * cast(u64, (arg2[6])));
    const x49 = (cast(u64, (arg1[16])) * cast(u64, ((arg2[5]) * 0x2)));
    const x50 = (cast(u64, (arg1[16])) * cast(u64, (arg2[4])));
    const x51 = (cast(u64, (arg1[16])) * cast(u64, ((arg2[3]) * 0x2)));
    const x52 = (cast(u64, (arg1[15])) * cast(u64, ((arg2[18]) * 0x2)));
    const x53 = (cast(u64, (arg1[15])) * cast(u64, ((arg2[17]) * 0x2)));
    const x54 = (cast(u64, (arg1[15])) * cast(u64, (arg2[16])));
    const x55 = (cast(u64, (arg1[15])) * cast(u64, ((arg2[15]) * 0x2)));
    const x56 = (cast(u64, (arg1[15])) * cast(u64, (arg2[14])));
    const x57 = (cast(u64, (arg1[15])) * cast(u64, ((arg2[13]) * 0x2)));
    const x58 = (cast(u64, (arg1[15])) * cast(u64, ((arg2[12]) * 0x2)));
    const x59 = (cast(u64, (arg1[15])) * cast(u64, ((arg2[11]) * 0x2)));
    const x60 = (cast(u64, (arg1[15])) * cast(u64, ((arg2[10]) * 0x2)));
    const x61 = (cast(u64, (arg1[15])) * cast(u64, (arg2[9])));
    const x62 = (cast(u64, (arg1[15])) * cast(u64, ((arg2[8]) * 0x2)));
    const x63 = (cast(u64, (arg1[15])) * cast(u64, (arg2[7])));
    const x64 = (cast(u64, (arg1[15])) * cast(u64, ((arg2[6]) * 0x2)));
    const x65 = (cast(u64, (arg1[15])) * cast(u64, ((arg2[5]) * 0x2)));
    const x66 = (cast(u64, (arg1[15])) * cast(u64, ((arg2[4]) * 0x2)));
    const x67 = (cast(u64, (arg1[14])) * cast(u64, (arg2[18])));
    const x68 = (cast(u64, (arg1[14])) * cast(u64, (arg2[17])));
    const x69 = (cast(u64, (arg1[14])) * cast(u64, (arg2[16])));
    const x70 = (cast(u64, (arg1[14])) * cast(u64, (arg2[15])));
    const x71 = (cast(u64, (arg1[14])) * cast(u64, (arg2[14])));
    const x72 = (cast(u64, (arg1[14])) * cast(u64, (arg2[13])));
    const x73 = (cast(u64, (arg1[14])) * cast(u64, ((arg2[12]) * 0x2)));
    const x74 = (cast(u64, (arg1[14])) * cast(u64, (arg2[11])));
    const x75 = (cast(u64, (arg1[14])) * cast(u64, (arg2[10])));
    const x76 = (cast(u64, (arg1[14])) * cast(u64, (arg2[9])));
    const x77 = (cast(u64, (arg1[14])) * cast(u64, (arg2[8])));
    const x78 = (cast(u64, (arg1[14])) * cast(u64, (arg2[7])));
    const x79 = (cast(u64, (arg1[14])) * cast(u64, (arg2[6])));
    const x80 = (cast(u64, (arg1[14])) * cast(u64, ((arg2[5]) * 0x2)));
    const x81 = (cast(u64, (arg1[13])) * cast(u64, (arg2[18])));
    const x82 = (cast(u64, (arg1[13])) * cast(u64, ((arg2[17]) * 0x2)));
    const x83 = (cast(u64, (arg1[13])) * cast(u64, (arg2[16])));
    const x84 = (cast(u64, (arg1[13])) * cast(u64, ((arg2[15]) * 0x2)));
    const x85 = (cast(u64, (arg1[13])) * cast(u64, (arg2[14])));
    const x86 = (cast(u64, (arg1[13])) * cast(u64, ((arg2[13]) * 0x2)));
    const x87 = (cast(u64, (arg1[13])) * cast(u64, ((arg2[12]) * 0x2)));
    const x88 = (cast(u64, (arg1[13])) * cast(u64, (arg2[11])));
    const x89 = (cast(u64, (arg1[13])) * cast(u64, ((arg2[10]) * 0x2)));
    const x90 = (cast(u64, (arg1[13])) * cast(u64, (arg2[9])));
    const x91 = (cast(u64, (arg1[13])) * cast(u64, ((arg2[8]) * 0x2)));
    const x92 = (cast(u64, (arg1[13])) * cast(u64, (arg2[7])));
    const x93 = (cast(u64, (arg1[13])) * cast(u64, ((arg2[6]) * 0x2)));
    const x94 = (cast(u64, (arg1[12])) * cast(u64, ((arg2[18]) * 0x2)));
    const x95 = (cast(u64, (arg1[12])) * cast(u64, ((arg2[17]) * 0x2)));
    const x96 = (cast(u64, (arg1[12])) * cast(u64, ((arg2[16]) * 0x2)));
    const x97 = (cast(u64, (arg1[12])) * cast(u64, ((arg2[15]) * 0x2)));
    const x98 = (cast(u64, (arg1[12])) * cast(u64, ((arg2[14]) * 0x2)));
    const x99 = (cast(u64, (arg1[12])) * cast(u64, ((arg2[13]) * 0x2)));
    const x100 = (cast(u64, (arg1[12])) * cast(u64, ((arg2[12]) * 0x2)));
    const x101 = (cast(u64, (arg1[12])) * cast(u64, ((arg2[11]) * 0x2)));
    const x102 = (cast(u64, (arg1[12])) * cast(u64, ((arg2[10]) * 0x2)));
    const x103 = (cast(u64, (arg1[12])) * cast(u64, ((arg2[9]) * 0x2)));
    const x104 = (cast(u64, (arg1[12])) * cast(u64, ((arg2[8]) * 0x2)));
    const x105 = (cast(u64, (arg1[12])) * cast(u64, ((arg2[7]) * 0x2)));
    const x106 = (cast(u64, (arg1[11])) * cast(u64, (arg2[18])));
    const x107 = (cast(u64, (arg1[11])) * cast(u64, ((arg2[17]) * 0x2)));
    const x108 = (cast(u64, (arg1[11])) * cast(u64, (arg2[16])));
    const x109 = (cast(u64, (arg1[11])) * cast(u64, ((arg2[15]) * 0x2)));
    const x110 = (cast(u64, (arg1[11])) * cast(u64, (arg2[14])));
    const x111 = (cast(u64, (arg1[11])) * cast(u64, (arg2[13])));
    const x112 = (cast(u64, (arg1[11])) * cast(u64, ((arg2[12]) * 0x2)));
    const x113 = (cast(u64, (arg1[11])) * cast(u64, (arg2[11])));
    const x114 = (cast(u64, (arg1[11])) * cast(u64, ((arg2[10]) * 0x2)));
    const x115 = (cast(u64, (arg1[11])) * cast(u64, (arg2[9])));
    const x116 = (cast(u64, (arg1[11])) * cast(u64, ((arg2[8]) * 0x2)));
    const x117 = (cast(u64, (arg1[10])) * cast(u64, ((arg2[18]) * 0x2)));
    const x118 = (cast(u64, (arg1[10])) * cast(u64, ((arg2[17]) * 0x2)));
    const x119 = (cast(u64, (arg1[10])) * cast(u64, ((arg2[16]) * 0x2)));
    const x120 = (cast(u64, (arg1[10])) * cast(u64, ((arg2[15]) * 0x2)));
    const x121 = (cast(u64, (arg1[10])) * cast(u64, (arg2[14])));
    const x122 = (cast(u64, (arg1[10])) * cast(u64, ((arg2[13]) * 0x2)));
    const x123 = (cast(u64, (arg1[10])) * cast(u64, ((arg2[12]) * 0x2)));
    const x124 = (cast(u64, (arg1[10])) * cast(u64, ((arg2[11]) * 0x2)));
    const x125 = (cast(u64, (arg1[10])) * cast(u64, ((arg2[10]) * 0x2)));
    const x126 = (cast(u64, (arg1[10])) * cast(u64, ((arg2[9]) * 0x2)));
    const x127 = (cast(u64, (arg1[9])) * cast(u64, (arg2[18])));
    const x128 = (cast(u64, (arg1[9])) * cast(u64, ((arg2[17]) * 0x2)));
    const x129 = (cast(u64, (arg1[9])) * cast(u64, (arg2[16])));
    const x130 = (cast(u64, (arg1[9])) * cast(u64, (arg2[15])));
    const x131 = (cast(u64, (arg1[9])) * cast(u64, (arg2[14])));
    const x132 = (cast(u64, (arg1[9])) * cast(u64, (arg2[13])));
    const x133 = (cast(u64, (arg1[9])) * cast(u64, ((arg2[12]) * 0x2)));
    const x134 = (cast(u64, (arg1[9])) * cast(u64, (arg2[11])));
    const x135 = (cast(u64, (arg1[9])) * cast(u64, ((arg2[10]) * 0x2)));
    const x136 = (cast(u64, (arg1[8])) * cast(u64, ((arg2[18]) * 0x2)));
    const x137 = (cast(u64, (arg1[8])) * cast(u64, ((arg2[17]) * 0x2)));
    const x138 = (cast(u64, (arg1[8])) * cast(u64, (arg2[16])));
    const x139 = (cast(u64, (arg1[8])) * cast(u64, ((arg2[15]) * 0x2)));
    const x140 = (cast(u64, (arg1[8])) * cast(u64, (arg2[14])));
    const x141 = (cast(u64, (arg1[8])) * cast(u64, ((arg2[13]) * 0x2)));
    const x142 = (cast(u64, (arg1[8])) * cast(u64, ((arg2[12]) * 0x2)));
    const x143 = (cast(u64, (arg1[8])) * cast(u64, ((arg2[11]) * 0x2)));
    const x144 = (cast(u64, (arg1[7])) * cast(u64, (arg2[18])));
    const x145 = (cast(u64, (arg1[7])) * cast(u64, (arg2[17])));
    const x146 = (cast(u64, (arg1[7])) * cast(u64, (arg2[16])));
    const x147 = (cast(u64, (arg1[7])) * cast(u64, (arg2[15])));
    const x148 = (cast(u64, (arg1[7])) * cast(u64, (arg2[14])));
    const x149 = (cast(u64, (arg1[7])) * cast(u64, (arg2[13])));
    const x150 = (cast(u64, (arg1[7])) * cast(u64, ((arg2[12]) * 0x2)));
    const x151 = (cast(u64, (arg1[6])) * cast(u64, (arg2[18])));
    const x152 = (cast(u64, (arg1[6])) * cast(u64, ((arg2[17]) * 0x2)));
    const x153 = (cast(u64, (arg1[6])) * cast(u64, (arg2[16])));
    const x154 = (cast(u64, (arg1[6])) * cast(u64, ((arg2[15]) * 0x2)));
    const x155 = (cast(u64, (arg1[6])) * cast(u64, (arg2[14])));
    const x156 = (cast(u64, (arg1[6])) * cast(u64, ((arg2[13]) * 0x2)));
    const x157 = (cast(u64, (arg1[5])) * cast(u64, ((arg2[18]) * 0x2)));
    const x158 = (cast(u64, (arg1[5])) * cast(u64, ((arg2[17]) * 0x2)));
    const x159 = (cast(u64, (arg1[5])) * cast(u64, ((arg2[16]) * 0x2)));
    const x160 = (cast(u64, (arg1[5])) * cast(u64, ((arg2[15]) * 0x2)));
    const x161 = (cast(u64, (arg1[5])) * cast(u64, ((arg2[14]) * 0x2)));
    const x162 = (cast(u64, (arg1[4])) * cast(u64, (arg2[18])));
    const x163 = (cast(u64, (arg1[4])) * cast(u64, ((arg2[17]) * 0x2)));
    const x164 = (cast(u64, (arg1[4])) * cast(u64, (arg2[16])));
    const x165 = (cast(u64, (arg1[4])) * cast(u64, ((arg2[15]) * 0x2)));
    const x166 = (cast(u64, (arg1[3])) * cast(u64, ((arg2[18]) * 0x2)));
    const x167 = (cast(u64, (arg1[3])) * cast(u64, ((arg2[17]) * 0x2)));
    const x168 = (cast(u64, (arg1[3])) * cast(u64, ((arg2[16]) * 0x2)));
    const x169 = (cast(u64, (arg1[2])) * cast(u64, (arg2[18])));
    const x170 = (cast(u64, (arg1[2])) * cast(u64, ((arg2[17]) * 0x2)));
    const x171 = (cast(u64, (arg1[1])) * cast(u64, ((arg2[18]) * 0x2)));
    const x172 = (cast(u64, (arg1[18])) * cast(u64, (arg2[0])));
    const x173 = (cast(u64, (arg1[17])) * cast(u64, ((arg2[1]) * 0x2)));
    const x174 = (cast(u64, (arg1[17])) * cast(u64, (arg2[0])));
    const x175 = (cast(u64, (arg1[16])) * cast(u64, (arg2[2])));
    const x176 = (cast(u64, (arg1[16])) * cast(u64, (arg2[1])));
    const x177 = (cast(u64, (arg1[16])) * cast(u64, (arg2[0])));
    const x178 = (cast(u64, (arg1[15])) * cast(u64, ((arg2[3]) * 0x2)));
    const x179 = (cast(u64, (arg1[15])) * cast(u64, (arg2[2])));
    const x180 = (cast(u64, (arg1[15])) * cast(u64, ((arg2[1]) * 0x2)));
    const x181 = (cast(u64, (arg1[15])) * cast(u64, (arg2[0])));
    const x182 = (cast(u64, (arg1[14])) * cast(u64, (arg2[4])));
    const x183 = (cast(u64, (arg1[14])) * cast(u64, (arg2[3])));
    const x184 = (cast(u64, (arg1[14])) * cast(u64, (arg2[2])));
    const x185 = (cast(u64, (arg1[14])) * cast(u64, (arg2[1])));
    const x186 = (cast(u64, (arg1[14])) * cast(u64, (arg2[0])));
    const x187 = (cast(u64, (arg1[13])) * cast(u64, ((arg2[5]) * 0x2)));
    const x188 = (cast(u64, (arg1[13])) * cast(u64, (arg2[4])));
    const x189 = (cast(u64, (arg1[13])) * cast(u64, ((arg2[3]) * 0x2)));
    const x190 = (cast(u64, (arg1[13])) * cast(u64, (arg2[2])));
    const x191 = (cast(u64, (arg1[13])) * cast(u64, ((arg2[1]) * 0x2)));
    const x192 = (cast(u64, (arg1[13])) * cast(u64, (arg2[0])));
    const x193 = (cast(u64, (arg1[12])) * cast(u64, ((arg2[6]) * 0x2)));
    const x194 = (cast(u64, (arg1[12])) * cast(u64, ((arg2[5]) * 0x2)));
    const x195 = (cast(u64, (arg1[12])) * cast(u64, ((arg2[4]) * 0x2)));
    const x196 = (cast(u64, (arg1[12])) * cast(u64, ((arg2[3]) * 0x2)));
    const x197 = (cast(u64, (arg1[12])) * cast(u64, ((arg2[2]) * 0x2)));
    const x198 = (cast(u64, (arg1[12])) * cast(u64, ((arg2[1]) * 0x2)));
    const x199 = (cast(u64, (arg1[12])) * cast(u64, (arg2[0])));
    const x200 = (cast(u64, (arg1[11])) * cast(u64, (arg2[7])));
    const x201 = (cast(u64, (arg1[11])) * cast(u64, (arg2[6])));
    const x202 = (cast(u64, (arg1[11])) * cast(u64, ((arg2[5]) * 0x2)));
    const x203 = (cast(u64, (arg1[11])) * cast(u64, (arg2[4])));
    const x204 = (cast(u64, (arg1[11])) * cast(u64, ((arg2[3]) * 0x2)));
    const x205 = (cast(u64, (arg1[11])) * cast(u64, (arg2[2])));
    const x206 = (cast(u64, (arg1[11])) * cast(u64, (arg2[1])));
    const x207 = (cast(u64, (arg1[11])) * cast(u64, (arg2[0])));
    const x208 = (cast(u64, (arg1[10])) * cast(u64, ((arg2[8]) * 0x2)));
    const x209 = (cast(u64, (arg1[10])) * cast(u64, (arg2[7])));
    const x210 = (cast(u64, (arg1[10])) * cast(u64, ((arg2[6]) * 0x2)));
    const x211 = (cast(u64, (arg1[10])) * cast(u64, ((arg2[5]) * 0x2)));
    const x212 = (cast(u64, (arg1[10])) * cast(u64, ((arg2[4]) * 0x2)));
    const x213 = (cast(u64, (arg1[10])) * cast(u64, ((arg2[3]) * 0x2)));
    const x214 = (cast(u64, (arg1[10])) * cast(u64, (arg2[2])));
    const x215 = (cast(u64, (arg1[10])) * cast(u64, ((arg2[1]) * 0x2)));
    const x216 = (cast(u64, (arg1[10])) * cast(u64, (arg2[0])));
    const x217 = (cast(u64, (arg1[9])) * cast(u64, (arg2[9])));
    const x218 = (cast(u64, (arg1[9])) * cast(u64, (arg2[8])));
    const x219 = (cast(u64, (arg1[9])) * cast(u64, (arg2[7])));
    const x220 = (cast(u64, (arg1[9])) * cast(u64, (arg2[6])));
    const x221 = (cast(u64, (arg1[9])) * cast(u64, ((arg2[5]) * 0x2)));
    const x222 = (cast(u64, (arg1[9])) * cast(u64, (arg2[4])));
    const x223 = (cast(u64, (arg1[9])) * cast(u64, (arg2[3])));
    const x224 = (cast(u64, (arg1[9])) * cast(u64, (arg2[2])));
    const x225 = (cast(u64, (arg1[9])) * cast(u64, (arg2[1])));
    const x226 = (cast(u64, (arg1[9])) * cast(u64, (arg2[0])));
    const x227 = (cast(u64, (arg1[8])) * cast(u64, ((arg2[10]) * 0x2)));
    const x228 = (cast(u64, (arg1[8])) * cast(u64, (arg2[9])));
    const x229 = (cast(u64, (arg1[8])) * cast(u64, ((arg2[8]) * 0x2)));
    const x230 = (cast(u64, (arg1[8])) * cast(u64, (arg2[7])));
    const x231 = (cast(u64, (arg1[8])) * cast(u64, ((arg2[6]) * 0x2)));
    const x232 = (cast(u64, (arg1[8])) * cast(u64, ((arg2[5]) * 0x2)));
    const x233 = (cast(u64, (arg1[8])) * cast(u64, (arg2[4])));
    const x234 = (cast(u64, (arg1[8])) * cast(u64, ((arg2[3]) * 0x2)));
    const x235 = (cast(u64, (arg1[8])) * cast(u64, (arg2[2])));
    const x236 = (cast(u64, (arg1[8])) * cast(u64, ((arg2[1]) * 0x2)));
    const x237 = (cast(u64, (arg1[8])) * cast(u64, (arg2[0])));
    const x238 = (cast(u64, (arg1[7])) * cast(u64, (arg2[11])));
    const x239 = (cast(u64, (arg1[7])) * cast(u64, (arg2[10])));
    const x240 = (cast(u64, (arg1[7])) * cast(u64, (arg2[9])));
    const x241 = (cast(u64, (arg1[7])) * cast(u64, (arg2[8])));
    const x242 = (cast(u64, (arg1[7])) * cast(u64, (arg2[7])));
    const x243 = (cast(u64, (arg1[7])) * cast(u64, (arg2[6])));
    const x244 = (cast(u64, (arg1[7])) * cast(u64, (arg2[5])));
    const x245 = (cast(u64, (arg1[7])) * cast(u64, (arg2[4])));
    const x246 = (cast(u64, (arg1[7])) * cast(u64, (arg2[3])));
    const x247 = (cast(u64, (arg1[7])) * cast(u64, (arg2[2])));
    const x248 = (cast(u64, (arg1[7])) * cast(u64, (arg2[1])));
    const x249 = (cast(u64, (arg1[7])) * cast(u64, (arg2[0])));
    const x250 = (cast(u64, (arg1[6])) * cast(u64, ((arg2[12]) * 0x2)));
    const x251 = (cast(u64, (arg1[6])) * cast(u64, (arg2[11])));
    const x252 = (cast(u64, (arg1[6])) * cast(u64, ((arg2[10]) * 0x2)));
    const x253 = (cast(u64, (arg1[6])) * cast(u64, (arg2[9])));
    const x254 = (cast(u64, (arg1[6])) * cast(u64, ((arg2[8]) * 0x2)));
    const x255 = (cast(u64, (arg1[6])) * cast(u64, (arg2[7])));
    const x256 = (cast(u64, (arg1[6])) * cast(u64, (arg2[6])));
    const x257 = (cast(u64, (arg1[6])) * cast(u64, ((arg2[5]) * 0x2)));
    const x258 = (cast(u64, (arg1[6])) * cast(u64, (arg2[4])));
    const x259 = (cast(u64, (arg1[6])) * cast(u64, ((arg2[3]) * 0x2)));
    const x260 = (cast(u64, (arg1[6])) * cast(u64, (arg2[2])));
    const x261 = (cast(u64, (arg1[6])) * cast(u64, ((arg2[1]) * 0x2)));
    const x262 = (cast(u64, (arg1[6])) * cast(u64, (arg2[0])));
    const x263 = (cast(u64, (arg1[5])) * cast(u64, ((arg2[13]) * 0x2)));
    const x264 = (cast(u64, (arg1[5])) * cast(u64, ((arg2[12]) * 0x2)));
    const x265 = (cast(u64, (arg1[5])) * cast(u64, ((arg2[11]) * 0x2)));
    const x266 = (cast(u64, (arg1[5])) * cast(u64, ((arg2[10]) * 0x2)));
    const x267 = (cast(u64, (arg1[5])) * cast(u64, ((arg2[9]) * 0x2)));
    const x268 = (cast(u64, (arg1[5])) * cast(u64, ((arg2[8]) * 0x2)));
    const x269 = (cast(u64, (arg1[5])) * cast(u64, (arg2[7])));
    const x270 = (cast(u64, (arg1[5])) * cast(u64, ((arg2[6]) * 0x2)));
    const x271 = (cast(u64, (arg1[5])) * cast(u64, ((arg2[5]) * 0x2)));
    const x272 = (cast(u64, (arg1[5])) * cast(u64, ((arg2[4]) * 0x2)));
    const x273 = (cast(u64, (arg1[5])) * cast(u64, ((arg2[3]) * 0x2)));
    const x274 = (cast(u64, (arg1[5])) * cast(u64, ((arg2[2]) * 0x2)));
    const x275 = (cast(u64, (arg1[5])) * cast(u64, ((arg2[1]) * 0x2)));
    const x276 = (cast(u64, (arg1[5])) * cast(u64, (arg2[0])));
    const x277 = (cast(u64, (arg1[4])) * cast(u64, (arg2[14])));
    const x278 = (cast(u64, (arg1[4])) * cast(u64, (arg2[13])));
    const x279 = (cast(u64, (arg1[4])) * cast(u64, ((arg2[12]) * 0x2)));
    const x280 = (cast(u64, (arg1[4])) * cast(u64, (arg2[11])));
    const x281 = (cast(u64, (arg1[4])) * cast(u64, ((arg2[10]) * 0x2)));
    const x282 = (cast(u64, (arg1[4])) * cast(u64, (arg2[9])));
    const x283 = (cast(u64, (arg1[4])) * cast(u64, (arg2[8])));
    const x284 = (cast(u64, (arg1[4])) * cast(u64, (arg2[7])));
    const x285 = (cast(u64, (arg1[4])) * cast(u64, (arg2[6])));
    const x286 = (cast(u64, (arg1[4])) * cast(u64, ((arg2[5]) * 0x2)));
    const x287 = (cast(u64, (arg1[4])) * cast(u64, (arg2[4])));
    const x288 = (cast(u64, (arg1[4])) * cast(u64, ((arg2[3]) * 0x2)));
    const x289 = (cast(u64, (arg1[4])) * cast(u64, (arg2[2])));
    const x290 = (cast(u64, (arg1[4])) * cast(u64, (arg2[1])));
    const x291 = (cast(u64, (arg1[4])) * cast(u64, (arg2[0])));
    const x292 = (cast(u64, (arg1[3])) * cast(u64, ((arg2[15]) * 0x2)));
    const x293 = (cast(u64, (arg1[3])) * cast(u64, (arg2[14])));
    const x294 = (cast(u64, (arg1[3])) * cast(u64, ((arg2[13]) * 0x2)));
    const x295 = (cast(u64, (arg1[3])) * cast(u64, ((arg2[12]) * 0x2)));
    const x296 = (cast(u64, (arg1[3])) * cast(u64, ((arg2[11]) * 0x2)));
    const x297 = (cast(u64, (arg1[3])) * cast(u64, ((arg2[10]) * 0x2)));
    const x298 = (cast(u64, (arg1[3])) * cast(u64, (arg2[9])));
    const x299 = (cast(u64, (arg1[3])) * cast(u64, ((arg2[8]) * 0x2)));
    const x300 = (cast(u64, (arg1[3])) * cast(u64, (arg2[7])));
    const x301 = (cast(u64, (arg1[3])) * cast(u64, ((arg2[6]) * 0x2)));
    const x302 = (cast(u64, (arg1[3])) * cast(u64, ((arg2[5]) * 0x2)));
    const x303 = (cast(u64, (arg1[3])) * cast(u64, ((arg2[4]) * 0x2)));
    const x304 = (cast(u64, (arg1[3])) * cast(u64, ((arg2[3]) * 0x2)));
    const x305 = (cast(u64, (arg1[3])) * cast(u64, (arg2[2])));
    const x306 = (cast(u64, (arg1[3])) * cast(u64, ((arg2[1]) * 0x2)));
    const x307 = (cast(u64, (arg1[3])) * cast(u64, (arg2[0])));
    const x308 = (cast(u64, (arg1[2])) * cast(u64, (arg2[16])));
    const x309 = (cast(u64, (arg1[2])) * cast(u64, (arg2[15])));
    const x310 = (cast(u64, (arg1[2])) * cast(u64, (arg2[14])));
    const x311 = (cast(u64, (arg1[2])) * cast(u64, (arg2[13])));
    const x312 = (cast(u64, (arg1[2])) * cast(u64, ((arg2[12]) * 0x2)));
    const x313 = (cast(u64, (arg1[2])) * cast(u64, (arg2[11])));
    const x314 = (cast(u64, (arg1[2])) * cast(u64, (arg2[10])));
    const x315 = (cast(u64, (arg1[2])) * cast(u64, (arg2[9])));
    const x316 = (cast(u64, (arg1[2])) * cast(u64, (arg2[8])));
    const x317 = (cast(u64, (arg1[2])) * cast(u64, (arg2[7])));
    const x318 = (cast(u64, (arg1[2])) * cast(u64, (arg2[6])));
    const x319 = (cast(u64, (arg1[2])) * cast(u64, ((arg2[5]) * 0x2)));
    const x320 = (cast(u64, (arg1[2])) * cast(u64, (arg2[4])));
    const x321 = (cast(u64, (arg1[2])) * cast(u64, (arg2[3])));
    const x322 = (cast(u64, (arg1[2])) * cast(u64, (arg2[2])));
    const x323 = (cast(u64, (arg1[2])) * cast(u64, (arg2[1])));
    const x324 = (cast(u64, (arg1[2])) * cast(u64, (arg2[0])));
    const x325 = (cast(u64, (arg1[1])) * cast(u64, ((arg2[17]) * 0x2)));
    const x326 = (cast(u64, (arg1[1])) * cast(u64, (arg2[16])));
    const x327 = (cast(u64, (arg1[1])) * cast(u64, ((arg2[15]) * 0x2)));
    const x328 = (cast(u64, (arg1[1])) * cast(u64, (arg2[14])));
    const x329 = (cast(u64, (arg1[1])) * cast(u64, ((arg2[13]) * 0x2)));
    const x330 = (cast(u64, (arg1[1])) * cast(u64, ((arg2[12]) * 0x2)));
    const x331 = (cast(u64, (arg1[1])) * cast(u64, (arg2[11])));
    const x332 = (cast(u64, (arg1[1])) * cast(u64, ((arg2[10]) * 0x2)));
    const x333 = (cast(u64, (arg1[1])) * cast(u64, (arg2[9])));
    const x334 = (cast(u64, (arg1[1])) * cast(u64, ((arg2[8]) * 0x2)));
    const x335 = (cast(u64, (arg1[1])) * cast(u64, (arg2[7])));
    const x336 = (cast(u64, (arg1[1])) * cast(u64, ((arg2[6]) * 0x2)));
    const x337 = (cast(u64, (arg1[1])) * cast(u64, ((arg2[5]) * 0x2)));
    const x338 = (cast(u64, (arg1[1])) * cast(u64, (arg2[4])));
    const x339 = (cast(u64, (arg1[1])) * cast(u64, ((arg2[3]) * 0x2)));
    const x340 = (cast(u64, (arg1[1])) * cast(u64, (arg2[2])));
    const x341 = (cast(u64, (arg1[1])) * cast(u64, ((arg2[1]) * 0x2)));
    const x342 = (cast(u64, (arg1[1])) * cast(u64, (arg2[0])));
    const x343 = (cast(u64, (arg1[0])) * cast(u64, (arg2[18])));
    const x344 = (cast(u64, (arg1[0])) * cast(u64, (arg2[17])));
    const x345 = (cast(u64, (arg1[0])) * cast(u64, (arg2[16])));
    const x346 = (cast(u64, (arg1[0])) * cast(u64, (arg2[15])));
    const x347 = (cast(u64, (arg1[0])) * cast(u64, (arg2[14])));
    const x348 = (cast(u64, (arg1[0])) * cast(u64, (arg2[13])));
    const x349 = (cast(u64, (arg1[0])) * cast(u64, (arg2[12])));
    const x350 = (cast(u64, (arg1[0])) * cast(u64, (arg2[11])));
    const x351 = (cast(u64, (arg1[0])) * cast(u64, (arg2[10])));
    const x352 = (cast(u64, (arg1[0])) * cast(u64, (arg2[9])));
    const x353 = (cast(u64, (arg1[0])) * cast(u64, (arg2[8])));
    const x354 = (cast(u64, (arg1[0])) * cast(u64, (arg2[7])));
    const x355 = (cast(u64, (arg1[0])) * cast(u64, (arg2[6])));
    const x356 = (cast(u64, (arg1[0])) * cast(u64, (arg2[5])));
    const x357 = (cast(u64, (arg1[0])) * cast(u64, (arg2[4])));
    const x358 = (cast(u64, (arg1[0])) * cast(u64, (arg2[3])));
    const x359 = (cast(u64, (arg1[0])) * cast(u64, (arg2[2])));
    const x360 = (cast(u64, (arg1[0])) * cast(u64, (arg2[1])));
    const x361 = (cast(u64, (arg1[0])) * cast(u64, (arg2[0])));
    const x362 = (x361 + (x171 + (x170 + (x168 + (x165 + (x161 + (x156 + (x150 + (x143 + (x135 + (x126 + (x116 + (x105 + (x93 + (x80 + (x66 + (x51 + (x35 + x18))))))))))))))))));
    const x363 = (x362 >> 28);
    const x364 = cast(u32, (x362 & cast(u64, 0xfffffff)));
    const x365 = (x343 + (x325 + (x308 + (x292 + (x277 + (x263 + (x250 + (x238 + (x227 + (x217 + (x208 + (x200 + (x193 + (x187 + (x182 + (x178 + (x175 + (x173 + x172))))))))))))))))));
    const x366 = (x344 + (x326 + (x309 + (x293 + (x278 + (x264 + (x251 + (x239 + (x228 + (x218 + (x209 + (x201 + (x194 + (x188 + (x183 + (x179 + (x176 + (x174 + x1))))))))))))))))));
    const x367 = (x345 + (x327 + (x310 + (x294 + (x279 + (x265 + (x252 + (x240 + (x229 + (x219 + (x210 + (x202 + (x195 + (x189 + (x184 + (x180 + (x177 + (x19 + x2))))))))))))))))));
    const x368 = (x346 + (x328 + (x311 + (x295 + (x280 + (x266 + (x253 + (x241 + (x230 + (x220 + (x211 + (x203 + (x196 + (x190 + (x185 + (x181 + (x36 + (x20 + x3))))))))))))))))));
    const x369 = (x347 + (x329 + (x312 + (x296 + (x281 + (x267 + (x254 + (x242 + (x231 + (x221 + (x212 + (x204 + (x197 + (x191 + (x186 + (x52 + (x37 + (x21 + x4))))))))))))))))));
    const x370 = (x348 + (x330 + (x313 + (x297 + (x282 + (x268 + (x255 + (x243 + (x232 + (x222 + (x213 + (x205 + (x198 + (x192 + (x67 + (x53 + (x38 + (x22 + x5))))))))))))))))));
    const x371 = (x349 + (x331 + (x314 + (x298 + (x283 + (x269 + (x256 + (x244 + (x233 + (x223 + (x214 + (x206 + (x199 + (x81 + (x68 + (x54 + (x39 + (x23 + x6))))))))))))))))));
    const x372 = (x350 + (x332 + (x315 + (x299 + (x284 + (x270 + (x257 + (x245 + (x234 + (x224 + (x215 + (x207 + (x94 + (x82 + (x69 + (x55 + (x40 + (x24 + x7))))))))))))))))));
    const x373 = (x351 + (x333 + (x316 + (x300 + (x285 + (x271 + (x258 + (x246 + (x235 + (x225 + (x216 + (x106 + (x95 + (x83 + (x70 + (x56 + (x41 + (x25 + x8))))))))))))))))));
    const x374 = (x352 + (x334 + (x317 + (x301 + (x286 + (x272 + (x259 + (x247 + (x236 + (x226 + (x117 + (x107 + (x96 + (x84 + (x71 + (x57 + (x42 + (x26 + x9))))))))))))))))));
    const x375 = (x353 + (x335 + (x318 + (x302 + (x287 + (x273 + (x260 + (x248 + (x237 + (x127 + (x118 + (x108 + (x97 + (x85 + (x72 + (x58 + (x43 + (x27 + x10))))))))))))))))));
    const x376 = (x354 + (x336 + (x319 + (x303 + (x288 + (x274 + (x261 + (x249 + (x136 + (x128 + (x119 + (x109 + (x98 + (x86 + (x73 + (x59 + (x44 + (x28 + x11))))))))))))))))));
    const x377 = (x355 + (x337 + (x320 + (x304 + (x289 + (x275 + (x262 + (x144 + (x137 + (x129 + (x120 + (x110 + (x99 + (x87 + (x74 + (x60 + (x45 + (x29 + x12))))))))))))))))));
    const x378 = (x356 + (x338 + (x321 + (x305 + (x290 + (x276 + (x151 + (x145 + (x138 + (x130 + (x121 + (x111 + (x100 + (x88 + (x75 + (x61 + (x46 + (x30 + x13))))))))))))))))));
    const x379 = (x357 + (x339 + (x322 + (x306 + (x291 + (x157 + (x152 + (x146 + (x139 + (x131 + (x122 + (x112 + (x101 + (x89 + (x76 + (x62 + (x47 + (x31 + x14))))))))))))))))));
    const x380 = (x358 + (x340 + (x323 + (x307 + (x162 + (x158 + (x153 + (x147 + (x140 + (x132 + (x123 + (x113 + (x102 + (x90 + (x77 + (x63 + (x48 + (x32 + x15))))))))))))))))));
    const x381 = (x359 + (x341 + (x324 + (x166 + (x163 + (x159 + (x154 + (x148 + (x141 + (x133 + (x124 + (x114 + (x103 + (x91 + (x78 + (x64 + (x49 + (x33 + x16))))))))))))))))));
    const x382 = (x360 + (x342 + (x169 + (x167 + (x164 + (x160 + (x155 + (x149 + (x142 + (x134 + (x125 + (x115 + (x104 + (x92 + (x79 + (x65 + (x50 + (x34 + x17))))))))))))))))));
    const x383 = (x363 + x382);
    const x384 = (x383 >> 27);
    const x385 = cast(u32, (x383 & cast(u64, 0x7ffffff)));
    const x386 = (x384 + x381);
    const x387 = (x386 >> 28);
    const x388 = cast(u32, (x386 & cast(u64, 0xfffffff)));
    const x389 = (x387 + x380);
    const x390 = (x389 >> 27);
    const x391 = cast(u32, (x389 & cast(u64, 0x7ffffff)));
    const x392 = (x390 + x379);
    const x393 = (x392 >> 28);
    const x394 = cast(u32, (x392 & cast(u64, 0xfffffff)));
    const x395 = (x393 + x378);
    const x396 = (x395 >> 27);
    const x397 = cast(u32, (x395 & cast(u64, 0x7ffffff)));
    const x398 = (x396 + x377);
    const x399 = (x398 >> 27);
    const x400 = cast(u32, (x398 & cast(u64, 0x7ffffff)));
    const x401 = (x399 + x376);
    const x402 = (x401 >> 28);
    const x403 = cast(u32, (x401 & cast(u64, 0xfffffff)));
    const x404 = (x402 + x375);
    const x405 = (x404 >> 27);
    const x406 = cast(u32, (x404 & cast(u64, 0x7ffffff)));
    const x407 = (x405 + x374);
    const x408 = (x407 >> 28);
    const x409 = cast(u32, (x407 & cast(u64, 0xfffffff)));
    const x410 = (x408 + x373);
    const x411 = (x410 >> 27);
    const x412 = cast(u32, (x410 & cast(u64, 0x7ffffff)));
    const x413 = (x411 + x372);
    const x414 = (x413 >> 28);
    const x415 = cast(u32, (x413 & cast(u64, 0xfffffff)));
    const x416 = (x414 + x371);
    const x417 = (x416 >> 27);
    const x418 = cast(u32, (x416 & cast(u64, 0x7ffffff)));
    const x419 = (x417 + x370);
    const x420 = (x419 >> 27);
    const x421 = cast(u32, (x419 & cast(u64, 0x7ffffff)));
    const x422 = (x420 + x369);
    const x423 = (x422 >> 28);
    const x424 = cast(u32, (x422 & cast(u64, 0xfffffff)));
    const x425 = (x423 + x368);
    const x426 = (x425 >> 27);
    const x427 = cast(u32, (x425 & cast(u64, 0x7ffffff)));
    const x428 = (x426 + x367);
    const x429 = (x428 >> 28);
    const x430 = cast(u32, (x428 & cast(u64, 0xfffffff)));
    const x431 = (x429 + x366);
    const x432 = (x431 >> 27);
    const x433 = cast(u32, (x431 & cast(u64, 0x7ffffff)));
    const x434 = (x432 + x365);
    const x435 = (x434 >> 27);
    const x436 = cast(u32, (x434 & cast(u64, 0x7ffffff)));
    const x437 = (cast(u64, x364) + x435);
    const x438 = cast(u32, (x437 >> 28));
    const x439 = cast(u32, (x437 & cast(u64, 0xfffffff)));
    const x440 = (x438 + x385);
    const x441 = cast(u1, (x440 >> 27));
    const x442 = (x440 & 0x7ffffff);
    const x443 = (cast(u32, x441) + x388);
    out1[0] = x439;
    out1[1] = x442;
    out1[2] = x443;
    out1[3] = x391;
    out1[4] = x394;
    out1[5] = x397;
    out1[6] = x400;
    out1[7] = x403;
    out1[8] = x406;
    out1[9] = x409;
    out1[10] = x412;
    out1[11] = x415;
    out1[12] = x418;
    out1[13] = x421;
    out1[14] = x424;
    out1[15] = x427;
    out1[16] = x430;
    out1[17] = x433;
    out1[18] = x436;
}

/// The function carrySquare squares a field element and reduces the result.
///
/// Postconditions:
///   eval out1 mod m = (eval arg1 * eval arg1) mod m
///
pub fn carrySquare(out1: *TightFieldElement, arg1: LooseFieldElement) void {
    @setRuntimeSafety(mode == .Debug);

    const x1 = (arg1[18]);
    const x2 = (x1 * 0x2);
    const x3 = ((arg1[18]) * 0x2);
    const x4 = (arg1[17]);
    const x5 = (x4 * 0x2);
    const x6 = ((arg1[17]) * 0x2);
    const x7 = (arg1[16]);
    const x8 = (x7 * 0x2);
    const x9 = ((arg1[16]) * 0x2);
    const x10 = (arg1[15]);
    const x11 = (x10 * 0x2);
    const x12 = ((arg1[15]) * 0x2);
    const x13 = (arg1[14]);
    const x14 = (x13 * 0x2);
    const x15 = ((arg1[14]) * 0x2);
    const x16 = (arg1[13]);
    const x17 = (x16 * 0x2);
    const x18 = ((arg1[13]) * 0x2);
    const x19 = (arg1[12]);
    const x20 = (x19 * 0x2);
    const x21 = ((arg1[12]) * 0x2);
    const x22 = (arg1[11]);
    const x23 = (x22 * 0x2);
    const x24 = ((arg1[11]) * 0x2);
    const x25 = (arg1[10]);
    const x26 = (x25 * 0x2);
    const x27 = ((arg1[10]) * 0x2);
    const x28 = ((arg1[9]) * 0x2);
    const x29 = ((arg1[8]) * 0x2);
    const x30 = ((arg1[7]) * 0x2);
    const x31 = ((arg1[6]) * 0x2);
    const x32 = ((arg1[5]) * 0x2);
    const x33 = ((arg1[4]) * 0x2);
    const x34 = ((arg1[3]) * 0x2);
    const x35 = ((arg1[2]) * 0x2);
    const x36 = ((arg1[1]) * 0x2);
    const x37 = (cast(u64, (arg1[18])) * cast(u64, x1));
    const x38 = (cast(u64, (arg1[17])) * cast(u64, (x2 * 0x2)));
    const x39 = (cast(u64, (arg1[17])) * cast(u64, (x4 * 0x2)));
    const x40 = (cast(u64, (arg1[16])) * cast(u64, x2));
    const x41 = (cast(u64, (arg1[16])) * cast(u64, (x5 * 0x2)));
    const x42 = (cast(u64, (arg1[16])) * cast(u64, x7));
    const x43 = (cast(u64, (arg1[15])) * cast(u64, (x2 * 0x2)));
    const x44 = (cast(u64, (arg1[15])) * cast(u64, (x5 * 0x2)));
    const x45 = (cast(u64, (arg1[15])) * cast(u64, x8));
    const x46 = (cast(u64, (arg1[15])) * cast(u64, (x10 * 0x2)));
    const x47 = (cast(u64, (arg1[14])) * cast(u64, x2));
    const x48 = (cast(u64, (arg1[14])) * cast(u64, x5));
    const x49 = (cast(u64, (arg1[14])) * cast(u64, x8));
    const x50 = (cast(u64, (arg1[14])) * cast(u64, x11));
    const x51 = (cast(u64, (arg1[14])) * cast(u64, x13));
    const x52 = (cast(u64, (arg1[13])) * cast(u64, x2));
    const x53 = (cast(u64, (arg1[13])) * cast(u64, (x5 * 0x2)));
    const x54 = (cast(u64, (arg1[13])) * cast(u64, x8));
    const x55 = (cast(u64, (arg1[13])) * cast(u64, (x11 * 0x2)));
    const x56 = (cast(u64, (arg1[13])) * cast(u64, x14));
    const x57 = (cast(u64, (arg1[13])) * cast(u64, (x16 * 0x2)));
    const x58 = (cast(u64, (arg1[12])) * cast(u64, (x2 * 0x2)));
    const x59 = (cast(u64, (arg1[12])) * cast(u64, (x5 * 0x2)));
    const x60 = (cast(u64, (arg1[12])) * cast(u64, (x8 * 0x2)));
    const x61 = (cast(u64, (arg1[12])) * cast(u64, (x11 * 0x2)));
    const x62 = (cast(u64, (arg1[12])) * cast(u64, (x14 * 0x2)));
    const x63 = (cast(u64, (arg1[12])) * cast(u64, (x17 * 0x2)));
    const x64 = (cast(u64, (arg1[12])) * cast(u64, (x19 * 0x2)));
    const x65 = (cast(u64, (arg1[11])) * cast(u64, x2));
    const x66 = (cast(u64, (arg1[11])) * cast(u64, (x5 * 0x2)));
    const x67 = (cast(u64, (arg1[11])) * cast(u64, x8));
    const x68 = (cast(u64, (arg1[11])) * cast(u64, (x11 * 0x2)));
    const x69 = (cast(u64, (arg1[11])) * cast(u64, x14));
    const x70 = (cast(u64, (arg1[11])) * cast(u64, x17));
    const x71 = (cast(u64, (arg1[11])) * cast(u64, (x20 * 0x2)));
    const x72 = (cast(u64, (arg1[11])) * cast(u64, x22));
    const x73 = (cast(u64, (arg1[10])) * cast(u64, (x2 * 0x2)));
    const x74 = (cast(u64, (arg1[10])) * cast(u64, (x5 * 0x2)));
    const x75 = (cast(u64, (arg1[10])) * cast(u64, (x8 * 0x2)));
    const x76 = (cast(u64, (arg1[10])) * cast(u64, (x11 * 0x2)));
    const x77 = (cast(u64, (arg1[10])) * cast(u64, x14));
    const x78 = (cast(u64, (arg1[10])) * cast(u64, (x17 * 0x2)));
    const x79 = (cast(u64, (arg1[10])) * cast(u64, (x20 * 0x2)));
    const x80 = (cast(u64, (arg1[10])) * cast(u64, (x23 * 0x2)));
    const x81 = (cast(u64, (arg1[10])) * cast(u64, (x25 * 0x2)));
    const x82 = (cast(u64, (arg1[9])) * cast(u64, x2));
    const x83 = (cast(u64, (arg1[9])) * cast(u64, (x5 * 0x2)));
    const x84 = (cast(u64, (arg1[9])) * cast(u64, x8));
    const x85 = (cast(u64, (arg1[9])) * cast(u64, x11));
    const x86 = (cast(u64, (arg1[9])) * cast(u64, x14));
    const x87 = (cast(u64, (arg1[9])) * cast(u64, x17));
    const x88 = (cast(u64, (arg1[9])) * cast(u64, (x20 * 0x2)));
    const x89 = (cast(u64, (arg1[9])) * cast(u64, x23));
    const x90 = (cast(u64, (arg1[9])) * cast(u64, (x26 * 0x2)));
    const x91 = (cast(u64, (arg1[9])) * cast(u64, (arg1[9])));
    const x92 = (cast(u64, (arg1[8])) * cast(u64, (x2 * 0x2)));
    const x93 = (cast(u64, (arg1[8])) * cast(u64, (x5 * 0x2)));
    const x94 = (cast(u64, (arg1[8])) * cast(u64, x8));
    const x95 = (cast(u64, (arg1[8])) * cast(u64, (x11 * 0x2)));
    const x96 = (cast(u64, (arg1[8])) * cast(u64, x14));
    const x97 = (cast(u64, (arg1[8])) * cast(u64, (x17 * 0x2)));
    const x98 = (cast(u64, (arg1[8])) * cast(u64, (x20 * 0x2)));
    const x99 = (cast(u64, (arg1[8])) * cast(u64, (x23 * 0x2)));
    const x100 = (cast(u64, (arg1[8])) * cast(u64, (x27 * 0x2)));
    const x101 = (cast(u64, (arg1[8])) * cast(u64, x28));
    const x102 = (cast(u64, (arg1[8])) * cast(u64, ((arg1[8]) * 0x2)));
    const x103 = (cast(u64, (arg1[7])) * cast(u64, x2));
    const x104 = (cast(u64, (arg1[7])) * cast(u64, x5));
    const x105 = (cast(u64, (arg1[7])) * cast(u64, x8));
    const x106 = (cast(u64, (arg1[7])) * cast(u64, x11));
    const x107 = (cast(u64, (arg1[7])) * cast(u64, x14));
    const x108 = (cast(u64, (arg1[7])) * cast(u64, x17));
    const x109 = (cast(u64, (arg1[7])) * cast(u64, (x20 * 0x2)));
    const x110 = (cast(u64, (arg1[7])) * cast(u64, x24));
    const x111 = (cast(u64, (arg1[7])) * cast(u64, x27));
    const x112 = (cast(u64, (arg1[7])) * cast(u64, x28));
    const x113 = (cast(u64, (arg1[7])) * cast(u64, x29));
    const x114 = (cast(u64, (arg1[7])) * cast(u64, (arg1[7])));
    const x115 = (cast(u64, (arg1[6])) * cast(u64, x2));
    const x116 = (cast(u64, (arg1[6])) * cast(u64, (x5 * 0x2)));
    const x117 = (cast(u64, (arg1[6])) * cast(u64, x8));
    const x118 = (cast(u64, (arg1[6])) * cast(u64, (x11 * 0x2)));
    const x119 = (cast(u64, (arg1[6])) * cast(u64, x14));
    const x120 = (cast(u64, (arg1[6])) * cast(u64, (x17 * 0x2)));
    const x121 = (cast(u64, (arg1[6])) * cast(u64, (x21 * 0x2)));
    const x122 = (cast(u64, (arg1[6])) * cast(u64, x24));
    const x123 = (cast(u64, (arg1[6])) * cast(u64, (x27 * 0x2)));
    const x124 = (cast(u64, (arg1[6])) * cast(u64, x28));
    const x125 = (cast(u64, (arg1[6])) * cast(u64, (x29 * 0x2)));
    const x126 = (cast(u64, (arg1[6])) * cast(u64, x30));
    const x127 = (cast(u64, (arg1[6])) * cast(u64, (arg1[6])));
    const x128 = (cast(u64, (arg1[5])) * cast(u64, (x2 * 0x2)));
    const x129 = (cast(u64, (arg1[5])) * cast(u64, (x5 * 0x2)));
    const x130 = (cast(u64, (arg1[5])) * cast(u64, (x8 * 0x2)));
    const x131 = (cast(u64, (arg1[5])) * cast(u64, (x11 * 0x2)));
    const x132 = (cast(u64, (arg1[5])) * cast(u64, (x14 * 0x2)));
    const x133 = (cast(u64, (arg1[5])) * cast(u64, (x18 * 0x2)));
    const x134 = (cast(u64, (arg1[5])) * cast(u64, (x21 * 0x2)));
    const x135 = (cast(u64, (arg1[5])) * cast(u64, (x24 * 0x2)));
    const x136 = (cast(u64, (arg1[5])) * cast(u64, (x27 * 0x2)));
    const x137 = (cast(u64, (arg1[5])) * cast(u64, (x28 * 0x2)));
    const x138 = (cast(u64, (arg1[5])) * cast(u64, (x29 * 0x2)));
    const x139 = (cast(u64, (arg1[5])) * cast(u64, x30));
    const x140 = (cast(u64, (arg1[5])) * cast(u64, (x31 * 0x2)));
    const x141 = (cast(u64, (arg1[5])) * cast(u64, ((arg1[5]) * 0x2)));
    const x142 = (cast(u64, (arg1[4])) * cast(u64, x2));
    const x143 = (cast(u64, (arg1[4])) * cast(u64, (x5 * 0x2)));
    const x144 = (cast(u64, (arg1[4])) * cast(u64, x8));
    const x145 = (cast(u64, (arg1[4])) * cast(u64, (x11 * 0x2)));
    const x146 = (cast(u64, (arg1[4])) * cast(u64, x15));
    const x147 = (cast(u64, (arg1[4])) * cast(u64, x18));
    const x148 = (cast(u64, (arg1[4])) * cast(u64, (x21 * 0x2)));
    const x149 = (cast(u64, (arg1[4])) * cast(u64, x24));
    const x150 = (cast(u64, (arg1[4])) * cast(u64, (x27 * 0x2)));
    const x151 = (cast(u64, (arg1[4])) * cast(u64, x28));
    const x152 = (cast(u64, (arg1[4])) * cast(u64, x29));
    const x153 = (cast(u64, (arg1[4])) * cast(u64, x30));
    const x154 = (cast(u64, (arg1[4])) * cast(u64, x31));
    const x155 = (cast(u64, (arg1[4])) * cast(u64, (x32 * 0x2)));
    const x156 = (cast(u64, (arg1[4])) * cast(u64, (arg1[4])));
    const x157 = (cast(u64, (arg1[3])) * cast(u64, (x2 * 0x2)));
    const x158 = (cast(u64, (arg1[3])) * cast(u64, (x5 * 0x2)));
    const x159 = (cast(u64, (arg1[3])) * cast(u64, (x8 * 0x2)));
    const x160 = (cast(u64, (arg1[3])) * cast(u64, (x12 * 0x2)));
    const x161 = (cast(u64, (arg1[3])) * cast(u64, x15));
    const x162 = (cast(u64, (arg1[3])) * cast(u64, (x18 * 0x2)));
    const x163 = (cast(u64, (arg1[3])) * cast(u64, (x21 * 0x2)));
    const x164 = (cast(u64, (arg1[3])) * cast(u64, (x24 * 0x2)));
    const x165 = (cast(u64, (arg1[3])) * cast(u64, (x27 * 0x2)));
    const x166 = (cast(u64, (arg1[3])) * cast(u64, x28));
    const x167 = (cast(u64, (arg1[3])) * cast(u64, (x29 * 0x2)));
    const x168 = (cast(u64, (arg1[3])) * cast(u64, x30));
    const x169 = (cast(u64, (arg1[3])) * cast(u64, (x31 * 0x2)));
    const x170 = (cast(u64, (arg1[3])) * cast(u64, (x32 * 0x2)));
    const x171 = (cast(u64, (arg1[3])) * cast(u64, (x33 * 0x2)));
    const x172 = (cast(u64, (arg1[3])) * cast(u64, ((arg1[3]) * 0x2)));
    const x173 = (cast(u64, (arg1[2])) * cast(u64, x2));
    const x174 = (cast(u64, (arg1[2])) * cast(u64, (x5 * 0x2)));
    const x175 = (cast(u64, (arg1[2])) * cast(u64, x9));
    const x176 = (cast(u64, (arg1[2])) * cast(u64, x12));
    const x177 = (cast(u64, (arg1[2])) * cast(u64, x15));
    const x178 = (cast(u64, (arg1[2])) * cast(u64, x18));
    const x179 = (cast(u64, (arg1[2])) * cast(u64, (x21 * 0x2)));
    const x180 = (cast(u64, (arg1[2])) * cast(u64, x24));
    const x181 = (cast(u64, (arg1[2])) * cast(u64, x27));
    const x182 = (cast(u64, (arg1[2])) * cast(u64, x28));
    const x183 = (cast(u64, (arg1[2])) * cast(u64, x29));
    const x184 = (cast(u64, (arg1[2])) * cast(u64, x30));
    const x185 = (cast(u64, (arg1[2])) * cast(u64, x31));
    const x186 = (cast(u64, (arg1[2])) * cast(u64, (x32 * 0x2)));
    const x187 = (cast(u64, (arg1[2])) * cast(u64, x33));
    const x188 = (cast(u64, (arg1[2])) * cast(u64, x34));
    const x189 = (cast(u64, (arg1[2])) * cast(u64, (arg1[2])));
    const x190 = (cast(u64, (arg1[1])) * cast(u64, (x2 * 0x2)));
    const x191 = (cast(u64, (arg1[1])) * cast(u64, (x6 * 0x2)));
    const x192 = (cast(u64, (arg1[1])) * cast(u64, x9));
    const x193 = (cast(u64, (arg1[1])) * cast(u64, (x12 * 0x2)));
    const x194 = (cast(u64, (arg1[1])) * cast(u64, x15));
    const x195 = (cast(u64, (arg1[1])) * cast(u64, (x18 * 0x2)));
    const x196 = (cast(u64, (arg1[1])) * cast(u64, (x21 * 0x2)));
    const x197 = (cast(u64, (arg1[1])) * cast(u64, x24));
    const x198 = (cast(u64, (arg1[1])) * cast(u64, (x27 * 0x2)));
    const x199 = (cast(u64, (arg1[1])) * cast(u64, x28));
    const x200 = (cast(u64, (arg1[1])) * cast(u64, (x29 * 0x2)));
    const x201 = (cast(u64, (arg1[1])) * cast(u64, x30));
    const x202 = (cast(u64, (arg1[1])) * cast(u64, (x31 * 0x2)));
    const x203 = (cast(u64, (arg1[1])) * cast(u64, (x32 * 0x2)));
    const x204 = (cast(u64, (arg1[1])) * cast(u64, x33));
    const x205 = (cast(u64, (arg1[1])) * cast(u64, (x34 * 0x2)));
    const x206 = (cast(u64, (arg1[1])) * cast(u64, x35));
    const x207 = (cast(u64, (arg1[1])) * cast(u64, ((arg1[1]) * 0x2)));
    const x208 = (cast(u64, (arg1[0])) * cast(u64, x3));
    const x209 = (cast(u64, (arg1[0])) * cast(u64, x6));
    const x210 = (cast(u64, (arg1[0])) * cast(u64, x9));
    const x211 = (cast(u64, (arg1[0])) * cast(u64, x12));
    const x212 = (cast(u64, (arg1[0])) * cast(u64, x15));
    const x213 = (cast(u64, (arg1[0])) * cast(u64, x18));
    const x214 = (cast(u64, (arg1[0])) * cast(u64, x21));
    const x215 = (cast(u64, (arg1[0])) * cast(u64, x24));
    const x216 = (cast(u64, (arg1[0])) * cast(u64, x27));
    const x217 = (cast(u64, (arg1[0])) * cast(u64, x28));
    const x218 = (cast(u64, (arg1[0])) * cast(u64, x29));
    const x219 = (cast(u64, (arg1[0])) * cast(u64, x30));
    const x220 = (cast(u64, (arg1[0])) * cast(u64, x31));
    const x221 = (cast(u64, (arg1[0])) * cast(u64, x32));
    const x222 = (cast(u64, (arg1[0])) * cast(u64, x33));
    const x223 = (cast(u64, (arg1[0])) * cast(u64, x34));
    const x224 = (cast(u64, (arg1[0])) * cast(u64, x35));
    const x225 = (cast(u64, (arg1[0])) * cast(u64, x36));
    const x226 = (cast(u64, (arg1[0])) * cast(u64, (arg1[0])));
    const x227 = (x226 + (x190 + (x174 + (x159 + (x145 + (x132 + (x120 + (x109 + (x99 + x90)))))))));
    const x228 = (x227 >> 28);
    const x229 = cast(u32, (x227 & cast(u64, 0xfffffff)));
    const x230 = (x208 + (x191 + (x175 + (x160 + (x146 + (x133 + (x121 + (x110 + (x100 + x91)))))))));
    const x231 = (x209 + (x192 + (x176 + (x161 + (x147 + (x134 + (x122 + (x111 + (x101 + x37)))))))));
    const x232 = (x210 + (x193 + (x177 + (x162 + (x148 + (x135 + (x123 + (x112 + (x102 + x38)))))))));
    const x233 = (x211 + (x194 + (x178 + (x163 + (x149 + (x136 + (x124 + (x113 + (x40 + x39)))))))));
    const x234 = (x212 + (x195 + (x179 + (x164 + (x150 + (x137 + (x125 + (x114 + (x43 + x41)))))))));
    const x235 = (x213 + (x196 + (x180 + (x165 + (x151 + (x138 + (x126 + (x47 + (x44 + x42)))))))));
    const x236 = (x214 + (x197 + (x181 + (x166 + (x152 + (x139 + (x127 + (x52 + (x48 + x45)))))))));
    const x237 = (x215 + (x198 + (x182 + (x167 + (x153 + (x140 + (x58 + (x53 + (x49 + x46)))))))));
    const x238 = (x216 + (x199 + (x183 + (x168 + (x154 + (x141 + (x65 + (x59 + (x54 + x50)))))))));
    const x239 = (x217 + (x200 + (x184 + (x169 + (x155 + (x73 + (x66 + (x60 + (x55 + x51)))))))));
    const x240 = (x218 + (x201 + (x185 + (x170 + (x156 + (x82 + (x74 + (x67 + (x61 + x56)))))))));
    const x241 = (x219 + (x202 + (x186 + (x171 + (x92 + (x83 + (x75 + (x68 + (x62 + x57)))))))));
    const x242 = (x220 + (x203 + (x187 + (x172 + (x103 + (x93 + (x84 + (x76 + (x69 + x63)))))))));
    const x243 = (x221 + (x204 + (x188 + (x115 + (x104 + (x94 + (x85 + (x77 + (x70 + x64)))))))));
    const x244 = (x222 + (x205 + (x189 + (x128 + (x116 + (x105 + (x95 + (x86 + (x78 + x71)))))))));
    const x245 = (x223 + (x206 + (x142 + (x129 + (x117 + (x106 + (x96 + (x87 + (x79 + x72)))))))));
    const x246 = (x224 + (x207 + (x157 + (x143 + (x130 + (x118 + (x107 + (x97 + (x88 + x80)))))))));
    const x247 = (x225 + (x173 + (x158 + (x144 + (x131 + (x119 + (x108 + (x98 + (x89 + x81)))))))));
    const x248 = (x228 + x247);
    const x249 = (x248 >> 27);
    const x250 = cast(u32, (x248 & cast(u64, 0x7ffffff)));
    const x251 = (x249 + x246);
    const x252 = (x251 >> 28);
    const x253 = cast(u32, (x251 & cast(u64, 0xfffffff)));
    const x254 = (x252 + x245);
    const x255 = (x254 >> 27);
    const x256 = cast(u32, (x254 & cast(u64, 0x7ffffff)));
    const x257 = (x255 + x244);
    const x258 = (x257 >> 28);
    const x259 = cast(u32, (x257 & cast(u64, 0xfffffff)));
    const x260 = (x258 + x243);
    const x261 = (x260 >> 27);
    const x262 = cast(u32, (x260 & cast(u64, 0x7ffffff)));
    const x263 = (x261 + x242);
    const x264 = (x263 >> 27);
    const x265 = cast(u32, (x263 & cast(u64, 0x7ffffff)));
    const x266 = (x264 + x241);
    const x267 = (x266 >> 28);
    const x268 = cast(u32, (x266 & cast(u64, 0xfffffff)));
    const x269 = (x267 + x240);
    const x270 = (x269 >> 27);
    const x271 = cast(u32, (x269 & cast(u64, 0x7ffffff)));
    const x272 = (x270 + x239);
    const x273 = (x272 >> 28);
    const x274 = cast(u32, (x272 & cast(u64, 0xfffffff)));
    const x275 = (x273 + x238);
    const x276 = (x275 >> 27);
    const x277 = cast(u32, (x275 & cast(u64, 0x7ffffff)));
    const x278 = (x276 + x237);
    const x279 = (x278 >> 28);
    const x280 = cast(u32, (x278 & cast(u64, 0xfffffff)));
    const x281 = (x279 + x236);
    const x282 = (x281 >> 27);
    const x283 = cast(u32, (x281 & cast(u64, 0x7ffffff)));
    const x284 = (x282 + x235);
    const x285 = (x284 >> 27);
    const x286 = cast(u32, (x284 & cast(u64, 0x7ffffff)));
    const x287 = (x285 + x234);
    const x288 = (x287 >> 28);
    const x289 = cast(u32, (x287 & cast(u64, 0xfffffff)));
    const x290 = (x288 + x233);
    const x291 = (x290 >> 27);
    const x292 = cast(u32, (x290 & cast(u64, 0x7ffffff)));
    const x293 = (x291 + x232);
    const x294 = (x293 >> 28);
    const x295 = cast(u32, (x293 & cast(u64, 0xfffffff)));
    const x296 = (x294 + x231);
    const x297 = (x296 >> 27);
    const x298 = cast(u32, (x296 & cast(u64, 0x7ffffff)));
    const x299 = (x297 + x230);
    const x300 = (x299 >> 27);
    const x301 = cast(u32, (x299 & cast(u64, 0x7ffffff)));
    const x302 = (cast(u64, x229) + x300);
    const x303 = cast(u32, (x302 >> 28));
    const x304 = cast(u32, (x302 & cast(u64, 0xfffffff)));
    const x305 = (x303 + x250);
    const x306 = cast(u1, (x305 >> 27));
    const x307 = (x305 & 0x7ffffff);
    const x308 = (cast(u32, x306) + x253);
    out1[0] = x304;
    out1[1] = x307;
    out1[2] = x308;
    out1[3] = x256;
    out1[4] = x259;
    out1[5] = x262;
    out1[6] = x265;
    out1[7] = x268;
    out1[8] = x271;
    out1[9] = x274;
    out1[10] = x277;
    out1[11] = x280;
    out1[12] = x283;
    out1[13] = x286;
    out1[14] = x289;
    out1[15] = x292;
    out1[16] = x295;
    out1[17] = x298;
    out1[18] = x301;
}

/// The function carry reduces a field element.
///
/// Postconditions:
///   eval out1 mod m = eval arg1 mod m
///
pub fn carry(out1: *TightFieldElement, arg1: LooseFieldElement) void {
    @setRuntimeSafety(mode == .Debug);

    const x1 = (arg1[0]);
    const x2 = ((x1 >> 28) + (arg1[1]));
    const x3 = ((x2 >> 27) + (arg1[2]));
    const x4 = ((x3 >> 28) + (arg1[3]));
    const x5 = ((x4 >> 27) + (arg1[4]));
    const x6 = ((x5 >> 28) + (arg1[5]));
    const x7 = ((x6 >> 27) + (arg1[6]));
    const x8 = ((x7 >> 27) + (arg1[7]));
    const x9 = ((x8 >> 28) + (arg1[8]));
    const x10 = ((x9 >> 27) + (arg1[9]));
    const x11 = ((x10 >> 28) + (arg1[10]));
    const x12 = ((x11 >> 27) + (arg1[11]));
    const x13 = ((x12 >> 28) + (arg1[12]));
    const x14 = ((x13 >> 27) + (arg1[13]));
    const x15 = ((x14 >> 27) + (arg1[14]));
    const x16 = ((x15 >> 28) + (arg1[15]));
    const x17 = ((x16 >> 27) + (arg1[16]));
    const x18 = ((x17 >> 28) + (arg1[17]));
    const x19 = ((x18 >> 27) + (arg1[18]));
    const x20 = ((x1 & 0xfffffff) + (x19 >> 27));
    const x21 = (cast(u32, cast(u1, (x20 >> 28))) + (x2 & 0x7ffffff));
    const x22 = (x20 & 0xfffffff);
    const x23 = (x21 & 0x7ffffff);
    const x24 = (cast(u32, cast(u1, (x21 >> 27))) + (x3 & 0xfffffff));
    const x25 = (x4 & 0x7ffffff);
    const x26 = (x5 & 0xfffffff);
    const x27 = (x6 & 0x7ffffff);
    const x28 = (x7 & 0x7ffffff);
    const x29 = (x8 & 0xfffffff);
    const x30 = (x9 & 0x7ffffff);
    const x31 = (x10 & 0xfffffff);
    const x32 = (x11 & 0x7ffffff);
    const x33 = (x12 & 0xfffffff);
    const x34 = (x13 & 0x7ffffff);
    const x35 = (x14 & 0x7ffffff);
    const x36 = (x15 & 0xfffffff);
    const x37 = (x16 & 0x7ffffff);
    const x38 = (x17 & 0xfffffff);
    const x39 = (x18 & 0x7ffffff);
    const x40 = (x19 & 0x7ffffff);
    out1[0] = x22;
    out1[1] = x23;
    out1[2] = x24;
    out1[3] = x25;
    out1[4] = x26;
    out1[5] = x27;
    out1[6] = x28;
    out1[7] = x29;
    out1[8] = x30;
    out1[9] = x31;
    out1[10] = x32;
    out1[11] = x33;
    out1[12] = x34;
    out1[13] = x35;
    out1[14] = x36;
    out1[15] = x37;
    out1[16] = x38;
    out1[17] = x39;
    out1[18] = x40;
}

/// The function add adds two field elements.
///
/// Postconditions:
///   eval out1 mod m = (eval arg1 + eval arg2) mod m
///
pub fn add(out1: *LooseFieldElement, arg1: TightFieldElement, arg2: TightFieldElement) void {
    @setRuntimeSafety(mode == .Debug);

    const x1 = ((arg1[0]) + (arg2[0]));
    const x2 = ((arg1[1]) + (arg2[1]));
    const x3 = ((arg1[2]) + (arg2[2]));
    const x4 = ((arg1[3]) + (arg2[3]));
    const x5 = ((arg1[4]) + (arg2[4]));
    const x6 = ((arg1[5]) + (arg2[5]));
    const x7 = ((arg1[6]) + (arg2[6]));
    const x8 = ((arg1[7]) + (arg2[7]));
    const x9 = ((arg1[8]) + (arg2[8]));
    const x10 = ((arg1[9]) + (arg2[9]));
    const x11 = ((arg1[10]) + (arg2[10]));
    const x12 = ((arg1[11]) + (arg2[11]));
    const x13 = ((arg1[12]) + (arg2[12]));
    const x14 = ((arg1[13]) + (arg2[13]));
    const x15 = ((arg1[14]) + (arg2[14]));
    const x16 = ((arg1[15]) + (arg2[15]));
    const x17 = ((arg1[16]) + (arg2[16]));
    const x18 = ((arg1[17]) + (arg2[17]));
    const x19 = ((arg1[18]) + (arg2[18]));
    out1[0] = x1;
    out1[1] = x2;
    out1[2] = x3;
    out1[3] = x4;
    out1[4] = x5;
    out1[5] = x6;
    out1[6] = x7;
    out1[7] = x8;
    out1[8] = x9;
    out1[9] = x10;
    out1[10] = x11;
    out1[11] = x12;
    out1[12] = x13;
    out1[13] = x14;
    out1[14] = x15;
    out1[15] = x16;
    out1[16] = x17;
    out1[17] = x18;
    out1[18] = x19;
}

/// The function sub subtracts two field elements.
///
/// Postconditions:
///   eval out1 mod m = (eval arg1 - eval arg2) mod m
///
pub fn sub(out1: *LooseFieldElement, arg1: TightFieldElement, arg2: TightFieldElement) void {
    @setRuntimeSafety(mode == .Debug);

    const x1 = ((0x1ffffffe + (arg1[0])) - (arg2[0]));
    const x2 = ((0xffffffe + (arg1[1])) - (arg2[1]));
    const x3 = ((0x1ffffffe + (arg1[2])) - (arg2[2]));
    const x4 = ((0xffffffe + (arg1[3])) - (arg2[3]));
    const x5 = ((0x1ffffffe + (arg1[4])) - (arg2[4]));
    const x6 = ((0xffffffe + (arg1[5])) - (arg2[5]));
    const x7 = ((0xffffffe + (arg1[6])) - (arg2[6]));
    const x8 = ((0x1ffffffe + (arg1[7])) - (arg2[7]));
    const x9 = ((0xffffffe + (arg1[8])) - (arg2[8]));
    const x10 = ((0x1ffffffe + (arg1[9])) - (arg2[9]));
    const x11 = ((0xffffffe + (arg1[10])) - (arg2[10]));
    const x12 = ((0x1ffffffe + (arg1[11])) - (arg2[11]));
    const x13 = ((0xffffffe + (arg1[12])) - (arg2[12]));
    const x14 = ((0xffffffe + (arg1[13])) - (arg2[13]));
    const x15 = ((0x1ffffffe + (arg1[14])) - (arg2[14]));
    const x16 = ((0xffffffe + (arg1[15])) - (arg2[15]));
    const x17 = ((0x1ffffffe + (arg1[16])) - (arg2[16]));
    const x18 = ((0xffffffe + (arg1[17])) - (arg2[17]));
    const x19 = ((0xffffffe + (arg1[18])) - (arg2[18]));
    out1[0] = x1;
    out1[1] = x2;
    out1[2] = x3;
    out1[3] = x4;
    out1[4] = x5;
    out1[5] = x6;
    out1[6] = x7;
    out1[7] = x8;
    out1[8] = x9;
    out1[9] = x10;
    out1[10] = x11;
    out1[11] = x12;
    out1[12] = x13;
    out1[13] = x14;
    out1[14] = x15;
    out1[15] = x16;
    out1[16] = x17;
    out1[17] = x18;
    out1[18] = x19;
}

/// The function opp negates a field element.
///
/// Postconditions:
///   eval out1 mod m = -eval arg1 mod m
///
pub fn opp(out1: *LooseFieldElement, arg1: TightFieldElement) void {
    @setRuntimeSafety(mode == .Debug);

    const x1 = (0x1ffffffe - (arg1[0]));
    const x2 = (0xffffffe - (arg1[1]));
    const x3 = (0x1ffffffe - (arg1[2]));
    const x4 = (0xffffffe - (arg1[3]));
    const x5 = (0x1ffffffe - (arg1[4]));
    const x6 = (0xffffffe - (arg1[5]));
    const x7 = (0xffffffe - (arg1[6]));
    const x8 = (0x1ffffffe - (arg1[7]));
    const x9 = (0xffffffe - (arg1[8]));
    const x10 = (0x1ffffffe - (arg1[9]));
    const x11 = (0xffffffe - (arg1[10]));
    const x12 = (0x1ffffffe - (arg1[11]));
    const x13 = (0xffffffe - (arg1[12]));
    const x14 = (0xffffffe - (arg1[13]));
    const x15 = (0x1ffffffe - (arg1[14]));
    const x16 = (0xffffffe - (arg1[15]));
    const x17 = (0x1ffffffe - (arg1[16]));
    const x18 = (0xffffffe - (arg1[17]));
    const x19 = (0xffffffe - (arg1[18]));
    out1[0] = x1;
    out1[1] = x2;
    out1[2] = x3;
    out1[3] = x4;
    out1[4] = x5;
    out1[5] = x6;
    out1[6] = x7;
    out1[7] = x8;
    out1[8] = x9;
    out1[9] = x10;
    out1[10] = x11;
    out1[11] = x12;
    out1[12] = x13;
    out1[13] = x14;
    out1[14] = x15;
    out1[15] = x16;
    out1[16] = x17;
    out1[17] = x18;
    out1[18] = x19;
}

/// The function selectznz is a multi-limb conditional select.
///
/// Postconditions:
///   out1 = (if arg1 = 0 then arg2 else arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
pub fn selectznz(out1: *[19]u32, arg1: u1, arg2: [19]u32, arg3: [19]u32) void {
    @setRuntimeSafety(mode == .Debug);

    var x1: u32 = undefined;
    cmovznzU32(&x1, arg1, (arg2[0]), (arg3[0]));
    var x2: u32 = undefined;
    cmovznzU32(&x2, arg1, (arg2[1]), (arg3[1]));
    var x3: u32 = undefined;
    cmovznzU32(&x3, arg1, (arg2[2]), (arg3[2]));
    var x4: u32 = undefined;
    cmovznzU32(&x4, arg1, (arg2[3]), (arg3[3]));
    var x5: u32 = undefined;
    cmovznzU32(&x5, arg1, (arg2[4]), (arg3[4]));
    var x6: u32 = undefined;
    cmovznzU32(&x6, arg1, (arg2[5]), (arg3[5]));
    var x7: u32 = undefined;
    cmovznzU32(&x7, arg1, (arg2[6]), (arg3[6]));
    var x8: u32 = undefined;
    cmovznzU32(&x8, arg1, (arg2[7]), (arg3[7]));
    var x9: u32 = undefined;
    cmovznzU32(&x9, arg1, (arg2[8]), (arg3[8]));
    var x10: u32 = undefined;
    cmovznzU32(&x10, arg1, (arg2[9]), (arg3[9]));
    var x11: u32 = undefined;
    cmovznzU32(&x11, arg1, (arg2[10]), (arg3[10]));
    var x12: u32 = undefined;
    cmovznzU32(&x12, arg1, (arg2[11]), (arg3[11]));
    var x13: u32 = undefined;
    cmovznzU32(&x13, arg1, (arg2[12]), (arg3[12]));
    var x14: u32 = undefined;
    cmovznzU32(&x14, arg1, (arg2[13]), (arg3[13]));
    var x15: u32 = undefined;
    cmovznzU32(&x15, arg1, (arg2[14]), (arg3[14]));
    var x16: u32 = undefined;
    cmovznzU32(&x16, arg1, (arg2[15]), (arg3[15]));
    var x17: u32 = undefined;
    cmovznzU32(&x17, arg1, (arg2[16]), (arg3[16]));
    var x18: u32 = undefined;
    cmovznzU32(&x18, arg1, (arg2[17]), (arg3[17]));
    var x19: u32 = undefined;
    cmovznzU32(&x19, arg1, (arg2[18]), (arg3[18]));
    out1[0] = x1;
    out1[1] = x2;
    out1[2] = x3;
    out1[3] = x4;
    out1[4] = x5;
    out1[5] = x6;
    out1[6] = x7;
    out1[7] = x8;
    out1[8] = x9;
    out1[9] = x10;
    out1[10] = x11;
    out1[11] = x12;
    out1[12] = x13;
    out1[13] = x14;
    out1[14] = x15;
    out1[15] = x16;
    out1[16] = x17;
    out1[17] = x18;
    out1[18] = x19;
}

/// The function toBytes serializes a field element to bytes in little-endian order.
///
/// Postconditions:
///   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..65]
///
/// Output Bounds:
///   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0x1]]
pub fn toBytes(out1: *[66]u8, arg1: TightFieldElement) void {
    @setRuntimeSafety(mode == .Debug);

    var x1: u32 = undefined;
    var x2: u1 = undefined;
    subborrowxU28(&x1, &x2, 0x0, (arg1[0]), 0xfffffff);
    var x3: u32 = undefined;
    var x4: u1 = undefined;
    subborrowxU27(&x3, &x4, x2, (arg1[1]), 0x7ffffff);
    var x5: u32 = undefined;
    var x6: u1 = undefined;
    subborrowxU28(&x5, &x6, x4, (arg1[2]), 0xfffffff);
    var x7: u32 = undefined;
    var x8: u1 = undefined;
    subborrowxU27(&x7, &x8, x6, (arg1[3]), 0x7ffffff);
    var x9: u32 = undefined;
    var x10: u1 = undefined;
    subborrowxU28(&x9, &x10, x8, (arg1[4]), 0xfffffff);
    var x11: u32 = undefined;
    var x12: u1 = undefined;
    subborrowxU27(&x11, &x12, x10, (arg1[5]), 0x7ffffff);
    var x13: u32 = undefined;
    var x14: u1 = undefined;
    subborrowxU27(&x13, &x14, x12, (arg1[6]), 0x7ffffff);
    var x15: u32 = undefined;
    var x16: u1 = undefined;
    subborrowxU28(&x15, &x16, x14, (arg1[7]), 0xfffffff);
    var x17: u32 = undefined;
    var x18: u1 = undefined;
    subborrowxU27(&x17, &x18, x16, (arg1[8]), 0x7ffffff);
    var x19: u32 = undefined;
    var x20: u1 = undefined;
    subborrowxU28(&x19, &x20, x18, (arg1[9]), 0xfffffff);
    var x21: u32 = undefined;
    var x22: u1 = undefined;
    subborrowxU27(&x21, &x22, x20, (arg1[10]), 0x7ffffff);
    var x23: u32 = undefined;
    var x24: u1 = undefined;
    subborrowxU28(&x23, &x24, x22, (arg1[11]), 0xfffffff);
    var x25: u32 = undefined;
    var x26: u1 = undefined;
    subborrowxU27(&x25, &x26, x24, (arg1[12]), 0x7ffffff);
    var x27: u32 = undefined;
    var x28: u1 = undefined;
    subborrowxU27(&x27, &x28, x26, (arg1[13]), 0x7ffffff);
    var x29: u32 = undefined;
    var x30: u1 = undefined;
    subborrowxU28(&x29, &x30, x28, (arg1[14]), 0xfffffff);
    var x31: u32 = undefined;
    var x32: u1 = undefined;
    subborrowxU27(&x31, &x32, x30, (arg1[15]), 0x7ffffff);
    var x33: u32 = undefined;
    var x34: u1 = undefined;
    subborrowxU28(&x33, &x34, x32, (arg1[16]), 0xfffffff);
    var x35: u32 = undefined;
    var x36: u1 = undefined;
    subborrowxU27(&x35, &x36, x34, (arg1[17]), 0x7ffffff);
    var x37: u32 = undefined;
    var x38: u1 = undefined;
    subborrowxU27(&x37, &x38, x36, (arg1[18]), 0x7ffffff);
    var x39: u32 = undefined;
    cmovznzU32(&x39, x38, cast(u32, 0x0), 0xffffffff);
    var x40: u32 = undefined;
    var x41: u1 = undefined;
    addcarryxU28(&x40, &x41, 0x0, x1, (x39 & 0xfffffff));
    var x42: u32 = undefined;
    var x43: u1 = undefined;
    addcarryxU27(&x42, &x43, x41, x3, (x39 & 0x7ffffff));
    var x44: u32 = undefined;
    var x45: u1 = undefined;
    addcarryxU28(&x44, &x45, x43, x5, (x39 & 0xfffffff));
    var x46: u32 = undefined;
    var x47: u1 = undefined;
    addcarryxU27(&x46, &x47, x45, x7, (x39 & 0x7ffffff));
    var x48: u32 = undefined;
    var x49: u1 = undefined;
    addcarryxU28(&x48, &x49, x47, x9, (x39 & 0xfffffff));
    var x50: u32 = undefined;
    var x51: u1 = undefined;
    addcarryxU27(&x50, &x51, x49, x11, (x39 & 0x7ffffff));
    var x52: u32 = undefined;
    var x53: u1 = undefined;
    addcarryxU27(&x52, &x53, x51, x13, (x39 & 0x7ffffff));
    var x54: u32 = undefined;
    var x55: u1 = undefined;
    addcarryxU28(&x54, &x55, x53, x15, (x39 & 0xfffffff));
    var x56: u32 = undefined;
    var x57: u1 = undefined;
    addcarryxU27(&x56, &x57, x55, x17, (x39 & 0x7ffffff));
    var x58: u32 = undefined;
    var x59: u1 = undefined;
    addcarryxU28(&x58, &x59, x57, x19, (x39 & 0xfffffff));
    var x60: u32 = undefined;
    var x61: u1 = undefined;
    addcarryxU27(&x60, &x61, x59, x21, (x39 & 0x7ffffff));
    var x62: u32 = undefined;
    var x63: u1 = undefined;
    addcarryxU28(&x62, &x63, x61, x23, (x39 & 0xfffffff));
    var x64: u32 = undefined;
    var x65: u1 = undefined;
    addcarryxU27(&x64, &x65, x63, x25, (x39 & 0x7ffffff));
    var x66: u32 = undefined;
    var x67: u1 = undefined;
    addcarryxU27(&x66, &x67, x65, x27, (x39 & 0x7ffffff));
    var x68: u32 = undefined;
    var x69: u1 = undefined;
    addcarryxU28(&x68, &x69, x67, x29, (x39 & 0xfffffff));
    var x70: u32 = undefined;
    var x71: u1 = undefined;
    addcarryxU27(&x70, &x71, x69, x31, (x39 & 0x7ffffff));
    var x72: u32 = undefined;
    var x73: u1 = undefined;
    addcarryxU28(&x72, &x73, x71, x33, (x39 & 0xfffffff));
    var x74: u32 = undefined;
    var x75: u1 = undefined;
    addcarryxU27(&x74, &x75, x73, x35, (x39 & 0x7ffffff));
    var x76: u32 = undefined;
    var x77: u1 = undefined;
    addcarryxU27(&x76, &x77, x75, x37, (x39 & 0x7ffffff));
    const x78 = (cast(u64, x76) << 6);
    const x79 = (x74 << 3);
    const x80 = (cast(u64, x72) << 7);
    const x81 = (x70 << 4);
    const x82 = (x66 << 5);
    const x83 = (x64 << 2);
    const x84 = (cast(u64, x62) << 6);
    const x85 = (x60 << 3);
    const x86 = (cast(u64, x58) << 7);
    const x87 = (x56 << 4);
    const x88 = (x52 << 5);
    const x89 = (x50 << 2);
    const x90 = (cast(u64, x48) << 6);
    const x91 = (x46 << 3);
    const x92 = (cast(u64, x44) << 7);
    const x93 = (x42 << 4);
    const x94 = cast(u8, (x40 & cast(u32, 0xff)));
    const x95 = (x40 >> 8);
    const x96 = cast(u8, (x95 & cast(u32, 0xff)));
    const x97 = (x95 >> 8);
    const x98 = cast(u8, (x97 & cast(u32, 0xff)));
    const x99 = cast(u8, (x97 >> 8));
    const x100 = (x93 + cast(u32, x99));
    const x101 = cast(u8, (x100 & cast(u32, 0xff)));
    const x102 = (x100 >> 8);
    const x103 = cast(u8, (x102 & cast(u32, 0xff)));
    const x104 = (x102 >> 8);
    const x105 = cast(u8, (x104 & cast(u32, 0xff)));
    const x106 = cast(u8, (x104 >> 8));
    const x107 = (x92 + cast(u64, x106));
    const x108 = cast(u8, (x107 & cast(u64, 0xff)));
    const x109 = cast(u32, (x107 >> 8));
    const x110 = cast(u8, (x109 & cast(u32, 0xff)));
    const x111 = (x109 >> 8);
    const x112 = cast(u8, (x111 & cast(u32, 0xff)));
    const x113 = (x111 >> 8);
    const x114 = cast(u8, (x113 & cast(u32, 0xff)));
    const x115 = cast(u8, (x113 >> 8));
    const x116 = (x91 + cast(u32, x115));
    const x117 = cast(u8, (x116 & cast(u32, 0xff)));
    const x118 = (x116 >> 8);
    const x119 = cast(u8, (x118 & cast(u32, 0xff)));
    const x120 = (x118 >> 8);
    const x121 = cast(u8, (x120 & cast(u32, 0xff)));
    const x122 = cast(u8, (x120 >> 8));
    const x123 = (x90 + cast(u64, x122));
    const x124 = cast(u8, (x123 & cast(u64, 0xff)));
    const x125 = cast(u32, (x123 >> 8));
    const x126 = cast(u8, (x125 & cast(u32, 0xff)));
    const x127 = (x125 >> 8);
    const x128 = cast(u8, (x127 & cast(u32, 0xff)));
    const x129 = (x127 >> 8);
    const x130 = cast(u8, (x129 & cast(u32, 0xff)));
    const x131 = cast(u8, (x129 >> 8));
    const x132 = (x89 + cast(u32, x131));
    const x133 = cast(u8, (x132 & cast(u32, 0xff)));
    const x134 = (x132 >> 8);
    const x135 = cast(u8, (x134 & cast(u32, 0xff)));
    const x136 = (x134 >> 8);
    const x137 = cast(u8, (x136 & cast(u32, 0xff)));
    const x138 = cast(u8, (x136 >> 8));
    const x139 = (x88 + cast(u32, x138));
    const x140 = cast(u8, (x139 & cast(u32, 0xff)));
    const x141 = (x139 >> 8);
    const x142 = cast(u8, (x141 & cast(u32, 0xff)));
    const x143 = (x141 >> 8);
    const x144 = cast(u8, (x143 & cast(u32, 0xff)));
    const x145 = cast(u8, (x143 >> 8));
    const x146 = cast(u8, (x54 & cast(u32, 0xff)));
    const x147 = (x54 >> 8);
    const x148 = cast(u8, (x147 & cast(u32, 0xff)));
    const x149 = (x147 >> 8);
    const x150 = cast(u8, (x149 & cast(u32, 0xff)));
    const x151 = cast(u8, (x149 >> 8));
    const x152 = (x87 + cast(u32, x151));
    const x153 = cast(u8, (x152 & cast(u32, 0xff)));
    const x154 = (x152 >> 8);
    const x155 = cast(u8, (x154 & cast(u32, 0xff)));
    const x156 = (x154 >> 8);
    const x157 = cast(u8, (x156 & cast(u32, 0xff)));
    const x158 = cast(u8, (x156 >> 8));
    const x159 = (x86 + cast(u64, x158));
    const x160 = cast(u8, (x159 & cast(u64, 0xff)));
    const x161 = cast(u32, (x159 >> 8));
    const x162 = cast(u8, (x161 & cast(u32, 0xff)));
    const x163 = (x161 >> 8);
    const x164 = cast(u8, (x163 & cast(u32, 0xff)));
    const x165 = (x163 >> 8);
    const x166 = cast(u8, (x165 & cast(u32, 0xff)));
    const x167 = cast(u8, (x165 >> 8));
    const x168 = (x85 + cast(u32, x167));
    const x169 = cast(u8, (x168 & cast(u32, 0xff)));
    const x170 = (x168 >> 8);
    const x171 = cast(u8, (x170 & cast(u32, 0xff)));
    const x172 = (x170 >> 8);
    const x173 = cast(u8, (x172 & cast(u32, 0xff)));
    const x174 = cast(u8, (x172 >> 8));
    const x175 = (x84 + cast(u64, x174));
    const x176 = cast(u8, (x175 & cast(u64, 0xff)));
    const x177 = cast(u32, (x175 >> 8));
    const x178 = cast(u8, (x177 & cast(u32, 0xff)));
    const x179 = (x177 >> 8);
    const x180 = cast(u8, (x179 & cast(u32, 0xff)));
    const x181 = (x179 >> 8);
    const x182 = cast(u8, (x181 & cast(u32, 0xff)));
    const x183 = cast(u8, (x181 >> 8));
    const x184 = (x83 + cast(u32, x183));
    const x185 = cast(u8, (x184 & cast(u32, 0xff)));
    const x186 = (x184 >> 8);
    const x187 = cast(u8, (x186 & cast(u32, 0xff)));
    const x188 = (x186 >> 8);
    const x189 = cast(u8, (x188 & cast(u32, 0xff)));
    const x190 = cast(u8, (x188 >> 8));
    const x191 = (x82 + cast(u32, x190));
    const x192 = cast(u8, (x191 & cast(u32, 0xff)));
    const x193 = (x191 >> 8);
    const x194 = cast(u8, (x193 & cast(u32, 0xff)));
    const x195 = (x193 >> 8);
    const x196 = cast(u8, (x195 & cast(u32, 0xff)));
    const x197 = cast(u8, (x195 >> 8));
    const x198 = cast(u8, (x68 & cast(u32, 0xff)));
    const x199 = (x68 >> 8);
    const x200 = cast(u8, (x199 & cast(u32, 0xff)));
    const x201 = (x199 >> 8);
    const x202 = cast(u8, (x201 & cast(u32, 0xff)));
    const x203 = cast(u8, (x201 >> 8));
    const x204 = (x81 + cast(u32, x203));
    const x205 = cast(u8, (x204 & cast(u32, 0xff)));
    const x206 = (x204 >> 8);
    const x207 = cast(u8, (x206 & cast(u32, 0xff)));
    const x208 = (x206 >> 8);
    const x209 = cast(u8, (x208 & cast(u32, 0xff)));
    const x210 = cast(u8, (x208 >> 8));
    const x211 = (x80 + cast(u64, x210));
    const x212 = cast(u8, (x211 & cast(u64, 0xff)));
    const x213 = cast(u32, (x211 >> 8));
    const x214 = cast(u8, (x213 & cast(u32, 0xff)));
    const x215 = (x213 >> 8);
    const x216 = cast(u8, (x215 & cast(u32, 0xff)));
    const x217 = (x215 >> 8);
    const x218 = cast(u8, (x217 & cast(u32, 0xff)));
    const x219 = cast(u8, (x217 >> 8));
    const x220 = (x79 + cast(u32, x219));
    const x221 = cast(u8, (x220 & cast(u32, 0xff)));
    const x222 = (x220 >> 8);
    const x223 = cast(u8, (x222 & cast(u32, 0xff)));
    const x224 = (x222 >> 8);
    const x225 = cast(u8, (x224 & cast(u32, 0xff)));
    const x226 = cast(u8, (x224 >> 8));
    const x227 = (x78 + cast(u64, x226));
    const x228 = cast(u8, (x227 & cast(u64, 0xff)));
    const x229 = cast(u32, (x227 >> 8));
    const x230 = cast(u8, (x229 & cast(u32, 0xff)));
    const x231 = (x229 >> 8);
    const x232 = cast(u8, (x231 & cast(u32, 0xff)));
    const x233 = (x231 >> 8);
    const x234 = cast(u8, (x233 & cast(u32, 0xff)));
    const x235 = cast(u1, (x233 >> 8));
    out1[0] = x94;
    out1[1] = x96;
    out1[2] = x98;
    out1[3] = x101;
    out1[4] = x103;
    out1[5] = x105;
    out1[6] = x108;
    out1[7] = x110;
    out1[8] = x112;
    out1[9] = x114;
    out1[10] = x117;
    out1[11] = x119;
    out1[12] = x121;
    out1[13] = x124;
    out1[14] = x126;
    out1[15] = x128;
    out1[16] = x130;
    out1[17] = x133;
    out1[18] = x135;
    out1[19] = x137;
    out1[20] = x140;
    out1[21] = x142;
    out1[22] = x144;
    out1[23] = x145;
    out1[24] = x146;
    out1[25] = x148;
    out1[26] = x150;
    out1[27] = x153;
    out1[28] = x155;
    out1[29] = x157;
    out1[30] = x160;
    out1[31] = x162;
    out1[32] = x164;
    out1[33] = x166;
    out1[34] = x169;
    out1[35] = x171;
    out1[36] = x173;
    out1[37] = x176;
    out1[38] = x178;
    out1[39] = x180;
    out1[40] = x182;
    out1[41] = x185;
    out1[42] = x187;
    out1[43] = x189;
    out1[44] = x192;
    out1[45] = x194;
    out1[46] = x196;
    out1[47] = x197;
    out1[48] = x198;
    out1[49] = x200;
    out1[50] = x202;
    out1[51] = x205;
    out1[52] = x207;
    out1[53] = x209;
    out1[54] = x212;
    out1[55] = x214;
    out1[56] = x216;
    out1[57] = x218;
    out1[58] = x221;
    out1[59] = x223;
    out1[60] = x225;
    out1[61] = x228;
    out1[62] = x230;
    out1[63] = x232;
    out1[64] = x234;
    out1[65] = cast(u8, x235);
}

/// The function fromBytes deserializes a field element from bytes in little-endian order.
///
/// Postconditions:
///   eval out1 mod m = bytes_eval arg1 mod m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0x1]]
pub fn fromBytes(out1: *TightFieldElement, arg1: [66]u8) void {
    @setRuntimeSafety(mode == .Debug);

    const x1 = (cast(u32, cast(u1, (arg1[65]))) << 26);
    const x2 = (cast(u32, (arg1[64])) << 18);
    const x3 = (cast(u32, (arg1[63])) << 10);
    const x4 = (cast(u32, (arg1[62])) << 2);
    const x5 = (cast(u32, (arg1[61])) << 21);
    const x6 = (cast(u32, (arg1[60])) << 13);
    const x7 = (cast(u32, (arg1[59])) << 5);
    const x8 = (cast(u64, (arg1[58])) << 25);
    const x9 = (cast(u32, (arg1[57])) << 17);
    const x10 = (cast(u32, (arg1[56])) << 9);
    const x11 = (cast(u32, (arg1[55])) * cast(u32, 0x2));
    const x12 = (cast(u32, (arg1[54])) << 20);
    const x13 = (cast(u32, (arg1[53])) << 12);
    const x14 = (cast(u32, (arg1[52])) << 4);
    const x15 = (cast(u32, (arg1[51])) << 24);
    const x16 = (cast(u32, (arg1[50])) << 16);
    const x17 = (cast(u32, (arg1[49])) << 8);
    const x18 = (arg1[48]);
    const x19 = (cast(u32, (arg1[47])) << 19);
    const x20 = (cast(u32, (arg1[46])) << 11);
    const x21 = (cast(u32, (arg1[45])) << 3);
    const x22 = (cast(u32, (arg1[44])) << 22);
    const x23 = (cast(u32, (arg1[43])) << 14);
    const x24 = (cast(u32, (arg1[42])) << 6);
    const x25 = (cast(u64, (arg1[41])) << 26);
    const x26 = (cast(u32, (arg1[40])) << 18);
    const x27 = (cast(u32, (arg1[39])) << 10);
    const x28 = (cast(u32, (arg1[38])) << 2);
    const x29 = (cast(u32, (arg1[37])) << 21);
    const x30 = (cast(u32, (arg1[36])) << 13);
    const x31 = (cast(u32, (arg1[35])) << 5);
    const x32 = (cast(u64, (arg1[34])) << 25);
    const x33 = (cast(u32, (arg1[33])) << 17);
    const x34 = (cast(u32, (arg1[32])) << 9);
    const x35 = (cast(u32, (arg1[31])) * cast(u32, 0x2));
    const x36 = (cast(u32, (arg1[30])) << 20);
    const x37 = (cast(u32, (arg1[29])) << 12);
    const x38 = (cast(u32, (arg1[28])) << 4);
    const x39 = (cast(u32, (arg1[27])) << 24);
    const x40 = (cast(u32, (arg1[26])) << 16);
    const x41 = (cast(u32, (arg1[25])) << 8);
    const x42 = (arg1[24]);
    const x43 = (cast(u32, (arg1[23])) << 19);
    const x44 = (cast(u32, (arg1[22])) << 11);
    const x45 = (cast(u32, (arg1[21])) << 3);
    const x46 = (cast(u32, (arg1[20])) << 22);
    const x47 = (cast(u32, (arg1[19])) << 14);
    const x48 = (cast(u32, (arg1[18])) << 6);
    const x49 = (cast(u64, (arg1[17])) << 26);
    const x50 = (cast(u32, (arg1[16])) << 18);
    const x51 = (cast(u32, (arg1[15])) << 10);
    const x52 = (cast(u32, (arg1[14])) << 2);
    const x53 = (cast(u32, (arg1[13])) << 21);
    const x54 = (cast(u32, (arg1[12])) << 13);
    const x55 = (cast(u32, (arg1[11])) << 5);
    const x56 = (cast(u64, (arg1[10])) << 25);
    const x57 = (cast(u32, (arg1[9])) << 17);
    const x58 = (cast(u32, (arg1[8])) << 9);
    const x59 = (cast(u32, (arg1[7])) * cast(u32, 0x2));
    const x60 = (cast(u32, (arg1[6])) << 20);
    const x61 = (cast(u32, (arg1[5])) << 12);
    const x62 = (cast(u32, (arg1[4])) << 4);
    const x63 = (cast(u32, (arg1[3])) << 24);
    const x64 = (cast(u32, (arg1[2])) << 16);
    const x65 = (cast(u32, (arg1[1])) << 8);
    const x66 = (arg1[0]);
    const x67 = (x65 + cast(u32, x66));
    const x68 = (x64 + x67);
    const x69 = (x63 + x68);
    const x70 = (x69 & 0xfffffff);
    const x71 = cast(u8, (x69 >> 28));
    const x72 = (x62 + cast(u32, x71));
    const x73 = (x61 + x72);
    const x74 = (x60 + x73);
    const x75 = (x74 & 0x7ffffff);
    const x76 = cast(u1, (x74 >> 27));
    const x77 = (x59 + cast(u32, x76));
    const x78 = (x58 + x77);
    const x79 = (x57 + x78);
    const x80 = (x56 + cast(u64, x79));
    const x81 = cast(u32, (x80 & cast(u64, 0xfffffff)));
    const x82 = cast(u8, (x80 >> 28));
    const x83 = (x55 + cast(u32, x82));
    const x84 = (x54 + x83);
    const x85 = (x53 + x84);
    const x86 = (x85 & 0x7ffffff);
    const x87 = cast(u8, (x85 >> 27));
    const x88 = (x52 + cast(u32, x87));
    const x89 = (x51 + x88);
    const x90 = (x50 + x89);
    const x91 = (x49 + cast(u64, x90));
    const x92 = cast(u32, (x91 & cast(u64, 0xfffffff)));
    const x93 = cast(u8, (x91 >> 28));
    const x94 = (x48 + cast(u32, x93));
    const x95 = (x47 + x94);
    const x96 = (x46 + x95);
    const x97 = (x96 & 0x7ffffff);
    const x98 = cast(u8, (x96 >> 27));
    const x99 = (x45 + cast(u32, x98));
    const x100 = (x44 + x99);
    const x101 = (x43 + x100);
    const x102 = (x41 + cast(u32, x42));
    const x103 = (x40 + x102);
    const x104 = (x39 + x103);
    const x105 = (x104 & 0xfffffff);
    const x106 = cast(u8, (x104 >> 28));
    const x107 = (x38 + cast(u32, x106));
    const x108 = (x37 + x107);
    const x109 = (x36 + x108);
    const x110 = (x109 & 0x7ffffff);
    const x111 = cast(u1, (x109 >> 27));
    const x112 = (x35 + cast(u32, x111));
    const x113 = (x34 + x112);
    const x114 = (x33 + x113);
    const x115 = (x32 + cast(u64, x114));
    const x116 = cast(u32, (x115 & cast(u64, 0xfffffff)));
    const x117 = cast(u8, (x115 >> 28));
    const x118 = (x31 + cast(u32, x117));
    const x119 = (x30 + x118);
    const x120 = (x29 + x119);
    const x121 = (x120 & 0x7ffffff);
    const x122 = cast(u8, (x120 >> 27));
    const x123 = (x28 + cast(u32, x122));
    const x124 = (x27 + x123);
    const x125 = (x26 + x124);
    const x126 = (x25 + cast(u64, x125));
    const x127 = cast(u32, (x126 & cast(u64, 0xfffffff)));
    const x128 = cast(u8, (x126 >> 28));
    const x129 = (x24 + cast(u32, x128));
    const x130 = (x23 + x129);
    const x131 = (x22 + x130);
    const x132 = (x131 & 0x7ffffff);
    const x133 = cast(u8, (x131 >> 27));
    const x134 = (x21 + cast(u32, x133));
    const x135 = (x20 + x134);
    const x136 = (x19 + x135);
    const x137 = (x17 + cast(u32, x18));
    const x138 = (x16 + x137);
    const x139 = (x15 + x138);
    const x140 = (x139 & 0xfffffff);
    const x141 = cast(u8, (x139 >> 28));
    const x142 = (x14 + cast(u32, x141));
    const x143 = (x13 + x142);
    const x144 = (x12 + x143);
    const x145 = (x144 & 0x7ffffff);
    const x146 = cast(u1, (x144 >> 27));
    const x147 = (x11 + cast(u32, x146));
    const x148 = (x10 + x147);
    const x149 = (x9 + x148);
    const x150 = (x8 + cast(u64, x149));
    const x151 = cast(u32, (x150 & cast(u64, 0xfffffff)));
    const x152 = cast(u8, (x150 >> 28));
    const x153 = (x7 + cast(u32, x152));
    const x154 = (x6 + x153);
    const x155 = (x5 + x154);
    const x156 = (x155 & 0x7ffffff);
    const x157 = cast(u8, (x155 >> 27));
    const x158 = (x4 + cast(u32, x157));
    const x159 = (x3 + x158);
    const x160 = (x2 + x159);
    const x161 = (x1 + x160);
    out1[0] = x70;
    out1[1] = x75;
    out1[2] = x81;
    out1[3] = x86;
    out1[4] = x92;
    out1[5] = x97;
    out1[6] = x101;
    out1[7] = x105;
    out1[8] = x110;
    out1[9] = x116;
    out1[10] = x121;
    out1[11] = x127;
    out1[12] = x132;
    out1[13] = x136;
    out1[14] = x140;
    out1[15] = x145;
    out1[16] = x151;
    out1[17] = x156;
    out1[18] = x161;
}

/// The function relax is the identity function converting from tight field elements to loose field elements.
///
/// Postconditions:
///   out1 = arg1
///
pub fn relax(out1: *LooseFieldElement, arg1: TightFieldElement) void {
    @setRuntimeSafety(mode == .Debug);

    const x1 = (arg1[0]);
    const x2 = (arg1[1]);
    const x3 = (arg1[2]);
    const x4 = (arg1[3]);
    const x5 = (arg1[4]);
    const x6 = (arg1[5]);
    const x7 = (arg1[6]);
    const x8 = (arg1[7]);
    const x9 = (arg1[8]);
    const x10 = (arg1[9]);
    const x11 = (arg1[10]);
    const x12 = (arg1[11]);
    const x13 = (arg1[12]);
    const x14 = (arg1[13]);
    const x15 = (arg1[14]);
    const x16 = (arg1[15]);
    const x17 = (arg1[16]);
    const x18 = (arg1[17]);
    const x19 = (arg1[18]);
    out1[0] = x1;
    out1[1] = x2;
    out1[2] = x3;
    out1[3] = x4;
    out1[4] = x5;
    out1[5] = x6;
    out1[6] = x7;
    out1[7] = x8;
    out1[8] = x9;
    out1[9] = x10;
    out1[10] = x11;
    out1[11] = x12;
    out1[12] = x13;
    out1[13] = x14;
    out1[14] = x15;
    out1[15] = x16;
    out1[16] = x17;
    out1[17] = x18;
    out1[18] = x19;
}
