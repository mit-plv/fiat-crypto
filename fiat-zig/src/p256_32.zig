// Autogenerated: 'src/ExtractionOCaml/word_by_word_montgomery' --lang Zig --internal-static --public-function-case camelCase --private-function-case camelCase --public-type-case UpperCamelCase --private-type-case UpperCamelCase --no-prefix-fiat --package-name p256 '' 32 '2^256 - 2^224 + 2^192 + 2^96 - 1' mul square add sub opp from_montgomery to_montgomery nonzero selectznz to_bytes from_bytes one msat divstep divstep_precomp
// curve description (via package name): p256
// machine_wordsize = 32 (from "32")
// requested operations: mul, square, add, sub, opp, from_montgomery, to_montgomery, nonzero, selectznz, to_bytes, from_bytes, one, msat, divstep, divstep_precomp
// m = 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff (from "2^256 - 2^224 + 2^192 + 2^96 - 1")
//
// NOTE: In addition to the bounds specified above each function, all
//   functions synthesized for this Montgomery arithmetic require the
//   input to be strictly less than the prime modulus (m), and also
//   require the input to be in the unique saturated representation.
//   All functions also ensure that these two properties are true of
//   return values.
//
// Computed values:
//   eval z = z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192) + (z[7] << 224)
//   bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17] << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168) + (z[22] << 176) + (z[23] << 184) + (z[24] << 192) + (z[25] << 200) + (z[26] << 208) + (z[27] << 216) + (z[28] << 224) + (z[29] << 232) + (z[30] << 240) + (z[31] << 248)
//   twos_complement_eval z = let x1 := z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192) + (z[7] << 224) in
//                            if x1 & (2^256-1) < 2^255 then x1 & (2^256-1) else (x1 & (2^256-1)) - 2^256

const std = @import("std");
const mode = @import("builtin").mode; // Checked arithmetic is disabled in non-debug modes to avoid side channels

inline fn cast(comptime DestType: type, target: anytype) DestType {
    @setEvalBranchQuota(10000);
    if (@typeInfo(@TypeOf(target)) == .Int) {
        const dest = @typeInfo(DestType).Int;
        const source = @typeInfo(@TypeOf(target)).Int;
        if (dest.bits < source.bits) {
            return @bitCast(DestType, @truncate(std.meta.Int(source.signedness, dest.bits), target));
        } else {
            return @bitCast(DestType, @as(std.meta.Int(source.signedness, dest.bits), target));
        }
    }
    return @as(DestType, target);
}

// The type MontgomeryDomainFieldElement is a field element in the Montgomery domain.
// Bounds: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
pub const MontgomeryDomainFieldElement = [8]u32;

// The type NonMontgomeryDomainFieldElement is a field element NOT in the Montgomery domain.
// Bounds: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
pub const NonMontgomeryDomainFieldElement = [8]u32;

/// The function addcarryxU32 is an addition with carry.
///
/// Postconditions:
///   out1 = (arg1 + arg2 + arg3) mod 2^32
///   out2 = ⌊(arg1 + arg2 + arg3) / 2^32⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0x1]
inline fn addcarryxU32(out1: *u32, out2: *u1, arg1: u1, arg2: u32, arg3: u32) void {
    @setRuntimeSafety(mode == .Debug);

    const x1 = ((cast(u64, arg1) + cast(u64, arg2)) + cast(u64, arg3));
    const x2 = cast(u32, (x1 & cast(u64, 0xffffffff)));
    const x3 = cast(u1, (x1 >> 32));
    out1.* = x2;
    out2.* = x3;
}

/// The function subborrowxU32 is a subtraction with borrow.
///
/// Postconditions:
///   out1 = (-arg1 + arg2 + -arg3) mod 2^32
///   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^32⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0x1]
inline fn subborrowxU32(out1: *u32, out2: *u1, arg1: u1, arg2: u32, arg3: u32) void {
    @setRuntimeSafety(mode == .Debug);

    const x1 = ((cast(i64, arg2) - cast(i64, arg1)) - cast(i64, arg3));
    const x2 = cast(i1, (x1 >> 32));
    const x3 = cast(u32, (x1 & cast(i64, 0xffffffff)));
    out1.* = x3;
    out2.* = cast(u1, (cast(i2, 0x0) - cast(i2, x2)));
}

/// The function mulxU32 is a multiplication, returning the full double-width result.
///
/// Postconditions:
///   out1 = (arg1 * arg2) mod 2^32
///   out2 = ⌊arg1 * arg2 / 2^32⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffff]
///   arg2: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0xffffffff]
inline fn mulxU32(out1: *u32, out2: *u32, arg1: u32, arg2: u32) void {
    @setRuntimeSafety(mode == .Debug);

    const x1 = (cast(u64, arg1) * cast(u64, arg2));
    const x2 = cast(u32, (x1 & cast(u64, 0xffffffff)));
    const x3 = cast(u32, (x1 >> 32));
    out1.* = x2;
    out2.* = x3;
}

/// The function cmovznzU32 is a single-word conditional move.
///
/// Postconditions:
///   out1 = (if arg1 = 0 then arg2 else arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
inline fn cmovznzU32(out1: *u32, arg1: u1, arg2: u32, arg3: u32) void {
    @setRuntimeSafety(mode == .Debug);

    const x1 = (~(~arg1));
    const x2 = cast(u32, (cast(i64, cast(i1, (cast(i2, 0x0) - cast(i2, x1)))) & cast(i64, 0xffffffff)));
    const x3 = ((x2 & arg3) | ((~x2) & arg2));
    out1.* = x3;
}

/// The function mul multiplies two field elements in the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
///   0 ≤ eval arg2 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
///   0 ≤ eval out1 < m
///
pub fn mul(out1: *MontgomeryDomainFieldElement, arg1: MontgomeryDomainFieldElement, arg2: MontgomeryDomainFieldElement) void {
    @setRuntimeSafety(mode == .Debug);

    const x1 = (arg1[1]);
    const x2 = (arg1[2]);
    const x3 = (arg1[3]);
    const x4 = (arg1[4]);
    const x5 = (arg1[5]);
    const x6 = (arg1[6]);
    const x7 = (arg1[7]);
    const x8 = (arg1[0]);
    var x9: u32 = undefined;
    var x10: u32 = undefined;
    mulxU32(&x9, &x10, x8, (arg2[7]));
    var x11: u32 = undefined;
    var x12: u32 = undefined;
    mulxU32(&x11, &x12, x8, (arg2[6]));
    var x13: u32 = undefined;
    var x14: u32 = undefined;
    mulxU32(&x13, &x14, x8, (arg2[5]));
    var x15: u32 = undefined;
    var x16: u32 = undefined;
    mulxU32(&x15, &x16, x8, (arg2[4]));
    var x17: u32 = undefined;
    var x18: u32 = undefined;
    mulxU32(&x17, &x18, x8, (arg2[3]));
    var x19: u32 = undefined;
    var x20: u32 = undefined;
    mulxU32(&x19, &x20, x8, (arg2[2]));
    var x21: u32 = undefined;
    var x22: u32 = undefined;
    mulxU32(&x21, &x22, x8, (arg2[1]));
    var x23: u32 = undefined;
    var x24: u32 = undefined;
    mulxU32(&x23, &x24, x8, (arg2[0]));
    var x25: u32 = undefined;
    var x26: u1 = undefined;
    addcarryxU32(&x25, &x26, 0x0, x24, x21);
    var x27: u32 = undefined;
    var x28: u1 = undefined;
    addcarryxU32(&x27, &x28, x26, x22, x19);
    var x29: u32 = undefined;
    var x30: u1 = undefined;
    addcarryxU32(&x29, &x30, x28, x20, x17);
    var x31: u32 = undefined;
    var x32: u1 = undefined;
    addcarryxU32(&x31, &x32, x30, x18, x15);
    var x33: u32 = undefined;
    var x34: u1 = undefined;
    addcarryxU32(&x33, &x34, x32, x16, x13);
    var x35: u32 = undefined;
    var x36: u1 = undefined;
    addcarryxU32(&x35, &x36, x34, x14, x11);
    var x37: u32 = undefined;
    var x38: u1 = undefined;
    addcarryxU32(&x37, &x38, x36, x12, x9);
    const x39 = (cast(u32, x38) + x10);
    var x40: u32 = undefined;
    var x41: u32 = undefined;
    mulxU32(&x40, &x41, x23, 0xffffffff);
    var x42: u32 = undefined;
    var x43: u32 = undefined;
    mulxU32(&x42, &x43, x23, 0xffffffff);
    var x44: u32 = undefined;
    var x45: u32 = undefined;
    mulxU32(&x44, &x45, x23, 0xffffffff);
    var x46: u32 = undefined;
    var x47: u32 = undefined;
    mulxU32(&x46, &x47, x23, 0xffffffff);
    var x48: u32 = undefined;
    var x49: u1 = undefined;
    addcarryxU32(&x48, &x49, 0x0, x47, x44);
    var x50: u32 = undefined;
    var x51: u1 = undefined;
    addcarryxU32(&x50, &x51, x49, x45, x42);
    const x52 = (cast(u32, x51) + x43);
    var x53: u32 = undefined;
    var x54: u1 = undefined;
    addcarryxU32(&x53, &x54, 0x0, x23, x46);
    var x55: u32 = undefined;
    var x56: u1 = undefined;
    addcarryxU32(&x55, &x56, x54, x25, x48);
    var x57: u32 = undefined;
    var x58: u1 = undefined;
    addcarryxU32(&x57, &x58, x56, x27, x50);
    var x59: u32 = undefined;
    var x60: u1 = undefined;
    addcarryxU32(&x59, &x60, x58, x29, x52);
    var x61: u32 = undefined;
    var x62: u1 = undefined;
    addcarryxU32(&x61, &x62, x60, x31, cast(u32, 0x0));
    var x63: u32 = undefined;
    var x64: u1 = undefined;
    addcarryxU32(&x63, &x64, x62, x33, cast(u32, 0x0));
    var x65: u32 = undefined;
    var x66: u1 = undefined;
    addcarryxU32(&x65, &x66, x64, x35, x23);
    var x67: u32 = undefined;
    var x68: u1 = undefined;
    addcarryxU32(&x67, &x68, x66, x37, x40);
    var x69: u32 = undefined;
    var x70: u1 = undefined;
    addcarryxU32(&x69, &x70, x68, x39, x41);
    var x71: u32 = undefined;
    var x72: u32 = undefined;
    mulxU32(&x71, &x72, x1, (arg2[7]));
    var x73: u32 = undefined;
    var x74: u32 = undefined;
    mulxU32(&x73, &x74, x1, (arg2[6]));
    var x75: u32 = undefined;
    var x76: u32 = undefined;
    mulxU32(&x75, &x76, x1, (arg2[5]));
    var x77: u32 = undefined;
    var x78: u32 = undefined;
    mulxU32(&x77, &x78, x1, (arg2[4]));
    var x79: u32 = undefined;
    var x80: u32 = undefined;
    mulxU32(&x79, &x80, x1, (arg2[3]));
    var x81: u32 = undefined;
    var x82: u32 = undefined;
    mulxU32(&x81, &x82, x1, (arg2[2]));
    var x83: u32 = undefined;
    var x84: u32 = undefined;
    mulxU32(&x83, &x84, x1, (arg2[1]));
    var x85: u32 = undefined;
    var x86: u32 = undefined;
    mulxU32(&x85, &x86, x1, (arg2[0]));
    var x87: u32 = undefined;
    var x88: u1 = undefined;
    addcarryxU32(&x87, &x88, 0x0, x86, x83);
    var x89: u32 = undefined;
    var x90: u1 = undefined;
    addcarryxU32(&x89, &x90, x88, x84, x81);
    var x91: u32 = undefined;
    var x92: u1 = undefined;
    addcarryxU32(&x91, &x92, x90, x82, x79);
    var x93: u32 = undefined;
    var x94: u1 = undefined;
    addcarryxU32(&x93, &x94, x92, x80, x77);
    var x95: u32 = undefined;
    var x96: u1 = undefined;
    addcarryxU32(&x95, &x96, x94, x78, x75);
    var x97: u32 = undefined;
    var x98: u1 = undefined;
    addcarryxU32(&x97, &x98, x96, x76, x73);
    var x99: u32 = undefined;
    var x100: u1 = undefined;
    addcarryxU32(&x99, &x100, x98, x74, x71);
    const x101 = (cast(u32, x100) + x72);
    var x102: u32 = undefined;
    var x103: u1 = undefined;
    addcarryxU32(&x102, &x103, 0x0, x55, x85);
    var x104: u32 = undefined;
    var x105: u1 = undefined;
    addcarryxU32(&x104, &x105, x103, x57, x87);
    var x106: u32 = undefined;
    var x107: u1 = undefined;
    addcarryxU32(&x106, &x107, x105, x59, x89);
    var x108: u32 = undefined;
    var x109: u1 = undefined;
    addcarryxU32(&x108, &x109, x107, x61, x91);
    var x110: u32 = undefined;
    var x111: u1 = undefined;
    addcarryxU32(&x110, &x111, x109, x63, x93);
    var x112: u32 = undefined;
    var x113: u1 = undefined;
    addcarryxU32(&x112, &x113, x111, x65, x95);
    var x114: u32 = undefined;
    var x115: u1 = undefined;
    addcarryxU32(&x114, &x115, x113, x67, x97);
    var x116: u32 = undefined;
    var x117: u1 = undefined;
    addcarryxU32(&x116, &x117, x115, x69, x99);
    var x118: u32 = undefined;
    var x119: u1 = undefined;
    addcarryxU32(&x118, &x119, x117, cast(u32, x70), x101);
    var x120: u32 = undefined;
    var x121: u32 = undefined;
    mulxU32(&x120, &x121, x102, 0xffffffff);
    var x122: u32 = undefined;
    var x123: u32 = undefined;
    mulxU32(&x122, &x123, x102, 0xffffffff);
    var x124: u32 = undefined;
    var x125: u32 = undefined;
    mulxU32(&x124, &x125, x102, 0xffffffff);
    var x126: u32 = undefined;
    var x127: u32 = undefined;
    mulxU32(&x126, &x127, x102, 0xffffffff);
    var x128: u32 = undefined;
    var x129: u1 = undefined;
    addcarryxU32(&x128, &x129, 0x0, x127, x124);
    var x130: u32 = undefined;
    var x131: u1 = undefined;
    addcarryxU32(&x130, &x131, x129, x125, x122);
    const x132 = (cast(u32, x131) + x123);
    var x133: u32 = undefined;
    var x134: u1 = undefined;
    addcarryxU32(&x133, &x134, 0x0, x102, x126);
    var x135: u32 = undefined;
    var x136: u1 = undefined;
    addcarryxU32(&x135, &x136, x134, x104, x128);
    var x137: u32 = undefined;
    var x138: u1 = undefined;
    addcarryxU32(&x137, &x138, x136, x106, x130);
    var x139: u32 = undefined;
    var x140: u1 = undefined;
    addcarryxU32(&x139, &x140, x138, x108, x132);
    var x141: u32 = undefined;
    var x142: u1 = undefined;
    addcarryxU32(&x141, &x142, x140, x110, cast(u32, 0x0));
    var x143: u32 = undefined;
    var x144: u1 = undefined;
    addcarryxU32(&x143, &x144, x142, x112, cast(u32, 0x0));
    var x145: u32 = undefined;
    var x146: u1 = undefined;
    addcarryxU32(&x145, &x146, x144, x114, x102);
    var x147: u32 = undefined;
    var x148: u1 = undefined;
    addcarryxU32(&x147, &x148, x146, x116, x120);
    var x149: u32 = undefined;
    var x150: u1 = undefined;
    addcarryxU32(&x149, &x150, x148, x118, x121);
    const x151 = (cast(u32, x150) + cast(u32, x119));
    var x152: u32 = undefined;
    var x153: u32 = undefined;
    mulxU32(&x152, &x153, x2, (arg2[7]));
    var x154: u32 = undefined;
    var x155: u32 = undefined;
    mulxU32(&x154, &x155, x2, (arg2[6]));
    var x156: u32 = undefined;
    var x157: u32 = undefined;
    mulxU32(&x156, &x157, x2, (arg2[5]));
    var x158: u32 = undefined;
    var x159: u32 = undefined;
    mulxU32(&x158, &x159, x2, (arg2[4]));
    var x160: u32 = undefined;
    var x161: u32 = undefined;
    mulxU32(&x160, &x161, x2, (arg2[3]));
    var x162: u32 = undefined;
    var x163: u32 = undefined;
    mulxU32(&x162, &x163, x2, (arg2[2]));
    var x164: u32 = undefined;
    var x165: u32 = undefined;
    mulxU32(&x164, &x165, x2, (arg2[1]));
    var x166: u32 = undefined;
    var x167: u32 = undefined;
    mulxU32(&x166, &x167, x2, (arg2[0]));
    var x168: u32 = undefined;
    var x169: u1 = undefined;
    addcarryxU32(&x168, &x169, 0x0, x167, x164);
    var x170: u32 = undefined;
    var x171: u1 = undefined;
    addcarryxU32(&x170, &x171, x169, x165, x162);
    var x172: u32 = undefined;
    var x173: u1 = undefined;
    addcarryxU32(&x172, &x173, x171, x163, x160);
    var x174: u32 = undefined;
    var x175: u1 = undefined;
    addcarryxU32(&x174, &x175, x173, x161, x158);
    var x176: u32 = undefined;
    var x177: u1 = undefined;
    addcarryxU32(&x176, &x177, x175, x159, x156);
    var x178: u32 = undefined;
    var x179: u1 = undefined;
    addcarryxU32(&x178, &x179, x177, x157, x154);
    var x180: u32 = undefined;
    var x181: u1 = undefined;
    addcarryxU32(&x180, &x181, x179, x155, x152);
    const x182 = (cast(u32, x181) + x153);
    var x183: u32 = undefined;
    var x184: u1 = undefined;
    addcarryxU32(&x183, &x184, 0x0, x135, x166);
    var x185: u32 = undefined;
    var x186: u1 = undefined;
    addcarryxU32(&x185, &x186, x184, x137, x168);
    var x187: u32 = undefined;
    var x188: u1 = undefined;
    addcarryxU32(&x187, &x188, x186, x139, x170);
    var x189: u32 = undefined;
    var x190: u1 = undefined;
    addcarryxU32(&x189, &x190, x188, x141, x172);
    var x191: u32 = undefined;
    var x192: u1 = undefined;
    addcarryxU32(&x191, &x192, x190, x143, x174);
    var x193: u32 = undefined;
    var x194: u1 = undefined;
    addcarryxU32(&x193, &x194, x192, x145, x176);
    var x195: u32 = undefined;
    var x196: u1 = undefined;
    addcarryxU32(&x195, &x196, x194, x147, x178);
    var x197: u32 = undefined;
    var x198: u1 = undefined;
    addcarryxU32(&x197, &x198, x196, x149, x180);
    var x199: u32 = undefined;
    var x200: u1 = undefined;
    addcarryxU32(&x199, &x200, x198, x151, x182);
    var x201: u32 = undefined;
    var x202: u32 = undefined;
    mulxU32(&x201, &x202, x183, 0xffffffff);
    var x203: u32 = undefined;
    var x204: u32 = undefined;
    mulxU32(&x203, &x204, x183, 0xffffffff);
    var x205: u32 = undefined;
    var x206: u32 = undefined;
    mulxU32(&x205, &x206, x183, 0xffffffff);
    var x207: u32 = undefined;
    var x208: u32 = undefined;
    mulxU32(&x207, &x208, x183, 0xffffffff);
    var x209: u32 = undefined;
    var x210: u1 = undefined;
    addcarryxU32(&x209, &x210, 0x0, x208, x205);
    var x211: u32 = undefined;
    var x212: u1 = undefined;
    addcarryxU32(&x211, &x212, x210, x206, x203);
    const x213 = (cast(u32, x212) + x204);
    var x214: u32 = undefined;
    var x215: u1 = undefined;
    addcarryxU32(&x214, &x215, 0x0, x183, x207);
    var x216: u32 = undefined;
    var x217: u1 = undefined;
    addcarryxU32(&x216, &x217, x215, x185, x209);
    var x218: u32 = undefined;
    var x219: u1 = undefined;
    addcarryxU32(&x218, &x219, x217, x187, x211);
    var x220: u32 = undefined;
    var x221: u1 = undefined;
    addcarryxU32(&x220, &x221, x219, x189, x213);
    var x222: u32 = undefined;
    var x223: u1 = undefined;
    addcarryxU32(&x222, &x223, x221, x191, cast(u32, 0x0));
    var x224: u32 = undefined;
    var x225: u1 = undefined;
    addcarryxU32(&x224, &x225, x223, x193, cast(u32, 0x0));
    var x226: u32 = undefined;
    var x227: u1 = undefined;
    addcarryxU32(&x226, &x227, x225, x195, x183);
    var x228: u32 = undefined;
    var x229: u1 = undefined;
    addcarryxU32(&x228, &x229, x227, x197, x201);
    var x230: u32 = undefined;
    var x231: u1 = undefined;
    addcarryxU32(&x230, &x231, x229, x199, x202);
    const x232 = (cast(u32, x231) + cast(u32, x200));
    var x233: u32 = undefined;
    var x234: u32 = undefined;
    mulxU32(&x233, &x234, x3, (arg2[7]));
    var x235: u32 = undefined;
    var x236: u32 = undefined;
    mulxU32(&x235, &x236, x3, (arg2[6]));
    var x237: u32 = undefined;
    var x238: u32 = undefined;
    mulxU32(&x237, &x238, x3, (arg2[5]));
    var x239: u32 = undefined;
    var x240: u32 = undefined;
    mulxU32(&x239, &x240, x3, (arg2[4]));
    var x241: u32 = undefined;
    var x242: u32 = undefined;
    mulxU32(&x241, &x242, x3, (arg2[3]));
    var x243: u32 = undefined;
    var x244: u32 = undefined;
    mulxU32(&x243, &x244, x3, (arg2[2]));
    var x245: u32 = undefined;
    var x246: u32 = undefined;
    mulxU32(&x245, &x246, x3, (arg2[1]));
    var x247: u32 = undefined;
    var x248: u32 = undefined;
    mulxU32(&x247, &x248, x3, (arg2[0]));
    var x249: u32 = undefined;
    var x250: u1 = undefined;
    addcarryxU32(&x249, &x250, 0x0, x248, x245);
    var x251: u32 = undefined;
    var x252: u1 = undefined;
    addcarryxU32(&x251, &x252, x250, x246, x243);
    var x253: u32 = undefined;
    var x254: u1 = undefined;
    addcarryxU32(&x253, &x254, x252, x244, x241);
    var x255: u32 = undefined;
    var x256: u1 = undefined;
    addcarryxU32(&x255, &x256, x254, x242, x239);
    var x257: u32 = undefined;
    var x258: u1 = undefined;
    addcarryxU32(&x257, &x258, x256, x240, x237);
    var x259: u32 = undefined;
    var x260: u1 = undefined;
    addcarryxU32(&x259, &x260, x258, x238, x235);
    var x261: u32 = undefined;
    var x262: u1 = undefined;
    addcarryxU32(&x261, &x262, x260, x236, x233);
    const x263 = (cast(u32, x262) + x234);
    var x264: u32 = undefined;
    var x265: u1 = undefined;
    addcarryxU32(&x264, &x265, 0x0, x216, x247);
    var x266: u32 = undefined;
    var x267: u1 = undefined;
    addcarryxU32(&x266, &x267, x265, x218, x249);
    var x268: u32 = undefined;
    var x269: u1 = undefined;
    addcarryxU32(&x268, &x269, x267, x220, x251);
    var x270: u32 = undefined;
    var x271: u1 = undefined;
    addcarryxU32(&x270, &x271, x269, x222, x253);
    var x272: u32 = undefined;
    var x273: u1 = undefined;
    addcarryxU32(&x272, &x273, x271, x224, x255);
    var x274: u32 = undefined;
    var x275: u1 = undefined;
    addcarryxU32(&x274, &x275, x273, x226, x257);
    var x276: u32 = undefined;
    var x277: u1 = undefined;
    addcarryxU32(&x276, &x277, x275, x228, x259);
    var x278: u32 = undefined;
    var x279: u1 = undefined;
    addcarryxU32(&x278, &x279, x277, x230, x261);
    var x280: u32 = undefined;
    var x281: u1 = undefined;
    addcarryxU32(&x280, &x281, x279, x232, x263);
    var x282: u32 = undefined;
    var x283: u32 = undefined;
    mulxU32(&x282, &x283, x264, 0xffffffff);
    var x284: u32 = undefined;
    var x285: u32 = undefined;
    mulxU32(&x284, &x285, x264, 0xffffffff);
    var x286: u32 = undefined;
    var x287: u32 = undefined;
    mulxU32(&x286, &x287, x264, 0xffffffff);
    var x288: u32 = undefined;
    var x289: u32 = undefined;
    mulxU32(&x288, &x289, x264, 0xffffffff);
    var x290: u32 = undefined;
    var x291: u1 = undefined;
    addcarryxU32(&x290, &x291, 0x0, x289, x286);
    var x292: u32 = undefined;
    var x293: u1 = undefined;
    addcarryxU32(&x292, &x293, x291, x287, x284);
    const x294 = (cast(u32, x293) + x285);
    var x295: u32 = undefined;
    var x296: u1 = undefined;
    addcarryxU32(&x295, &x296, 0x0, x264, x288);
    var x297: u32 = undefined;
    var x298: u1 = undefined;
    addcarryxU32(&x297, &x298, x296, x266, x290);
    var x299: u32 = undefined;
    var x300: u1 = undefined;
    addcarryxU32(&x299, &x300, x298, x268, x292);
    var x301: u32 = undefined;
    var x302: u1 = undefined;
    addcarryxU32(&x301, &x302, x300, x270, x294);
    var x303: u32 = undefined;
    var x304: u1 = undefined;
    addcarryxU32(&x303, &x304, x302, x272, cast(u32, 0x0));
    var x305: u32 = undefined;
    var x306: u1 = undefined;
    addcarryxU32(&x305, &x306, x304, x274, cast(u32, 0x0));
    var x307: u32 = undefined;
    var x308: u1 = undefined;
    addcarryxU32(&x307, &x308, x306, x276, x264);
    var x309: u32 = undefined;
    var x310: u1 = undefined;
    addcarryxU32(&x309, &x310, x308, x278, x282);
    var x311: u32 = undefined;
    var x312: u1 = undefined;
    addcarryxU32(&x311, &x312, x310, x280, x283);
    const x313 = (cast(u32, x312) + cast(u32, x281));
    var x314: u32 = undefined;
    var x315: u32 = undefined;
    mulxU32(&x314, &x315, x4, (arg2[7]));
    var x316: u32 = undefined;
    var x317: u32 = undefined;
    mulxU32(&x316, &x317, x4, (arg2[6]));
    var x318: u32 = undefined;
    var x319: u32 = undefined;
    mulxU32(&x318, &x319, x4, (arg2[5]));
    var x320: u32 = undefined;
    var x321: u32 = undefined;
    mulxU32(&x320, &x321, x4, (arg2[4]));
    var x322: u32 = undefined;
    var x323: u32 = undefined;
    mulxU32(&x322, &x323, x4, (arg2[3]));
    var x324: u32 = undefined;
    var x325: u32 = undefined;
    mulxU32(&x324, &x325, x4, (arg2[2]));
    var x326: u32 = undefined;
    var x327: u32 = undefined;
    mulxU32(&x326, &x327, x4, (arg2[1]));
    var x328: u32 = undefined;
    var x329: u32 = undefined;
    mulxU32(&x328, &x329, x4, (arg2[0]));
    var x330: u32 = undefined;
    var x331: u1 = undefined;
    addcarryxU32(&x330, &x331, 0x0, x329, x326);
    var x332: u32 = undefined;
    var x333: u1 = undefined;
    addcarryxU32(&x332, &x333, x331, x327, x324);
    var x334: u32 = undefined;
    var x335: u1 = undefined;
    addcarryxU32(&x334, &x335, x333, x325, x322);
    var x336: u32 = undefined;
    var x337: u1 = undefined;
    addcarryxU32(&x336, &x337, x335, x323, x320);
    var x338: u32 = undefined;
    var x339: u1 = undefined;
    addcarryxU32(&x338, &x339, x337, x321, x318);
    var x340: u32 = undefined;
    var x341: u1 = undefined;
    addcarryxU32(&x340, &x341, x339, x319, x316);
    var x342: u32 = undefined;
    var x343: u1 = undefined;
    addcarryxU32(&x342, &x343, x341, x317, x314);
    const x344 = (cast(u32, x343) + x315);
    var x345: u32 = undefined;
    var x346: u1 = undefined;
    addcarryxU32(&x345, &x346, 0x0, x297, x328);
    var x347: u32 = undefined;
    var x348: u1 = undefined;
    addcarryxU32(&x347, &x348, x346, x299, x330);
    var x349: u32 = undefined;
    var x350: u1 = undefined;
    addcarryxU32(&x349, &x350, x348, x301, x332);
    var x351: u32 = undefined;
    var x352: u1 = undefined;
    addcarryxU32(&x351, &x352, x350, x303, x334);
    var x353: u32 = undefined;
    var x354: u1 = undefined;
    addcarryxU32(&x353, &x354, x352, x305, x336);
    var x355: u32 = undefined;
    var x356: u1 = undefined;
    addcarryxU32(&x355, &x356, x354, x307, x338);
    var x357: u32 = undefined;
    var x358: u1 = undefined;
    addcarryxU32(&x357, &x358, x356, x309, x340);
    var x359: u32 = undefined;
    var x360: u1 = undefined;
    addcarryxU32(&x359, &x360, x358, x311, x342);
    var x361: u32 = undefined;
    var x362: u1 = undefined;
    addcarryxU32(&x361, &x362, x360, x313, x344);
    var x363: u32 = undefined;
    var x364: u32 = undefined;
    mulxU32(&x363, &x364, x345, 0xffffffff);
    var x365: u32 = undefined;
    var x366: u32 = undefined;
    mulxU32(&x365, &x366, x345, 0xffffffff);
    var x367: u32 = undefined;
    var x368: u32 = undefined;
    mulxU32(&x367, &x368, x345, 0xffffffff);
    var x369: u32 = undefined;
    var x370: u32 = undefined;
    mulxU32(&x369, &x370, x345, 0xffffffff);
    var x371: u32 = undefined;
    var x372: u1 = undefined;
    addcarryxU32(&x371, &x372, 0x0, x370, x367);
    var x373: u32 = undefined;
    var x374: u1 = undefined;
    addcarryxU32(&x373, &x374, x372, x368, x365);
    const x375 = (cast(u32, x374) + x366);
    var x376: u32 = undefined;
    var x377: u1 = undefined;
    addcarryxU32(&x376, &x377, 0x0, x345, x369);
    var x378: u32 = undefined;
    var x379: u1 = undefined;
    addcarryxU32(&x378, &x379, x377, x347, x371);
    var x380: u32 = undefined;
    var x381: u1 = undefined;
    addcarryxU32(&x380, &x381, x379, x349, x373);
    var x382: u32 = undefined;
    var x383: u1 = undefined;
    addcarryxU32(&x382, &x383, x381, x351, x375);
    var x384: u32 = undefined;
    var x385: u1 = undefined;
    addcarryxU32(&x384, &x385, x383, x353, cast(u32, 0x0));
    var x386: u32 = undefined;
    var x387: u1 = undefined;
    addcarryxU32(&x386, &x387, x385, x355, cast(u32, 0x0));
    var x388: u32 = undefined;
    var x389: u1 = undefined;
    addcarryxU32(&x388, &x389, x387, x357, x345);
    var x390: u32 = undefined;
    var x391: u1 = undefined;
    addcarryxU32(&x390, &x391, x389, x359, x363);
    var x392: u32 = undefined;
    var x393: u1 = undefined;
    addcarryxU32(&x392, &x393, x391, x361, x364);
    const x394 = (cast(u32, x393) + cast(u32, x362));
    var x395: u32 = undefined;
    var x396: u32 = undefined;
    mulxU32(&x395, &x396, x5, (arg2[7]));
    var x397: u32 = undefined;
    var x398: u32 = undefined;
    mulxU32(&x397, &x398, x5, (arg2[6]));
    var x399: u32 = undefined;
    var x400: u32 = undefined;
    mulxU32(&x399, &x400, x5, (arg2[5]));
    var x401: u32 = undefined;
    var x402: u32 = undefined;
    mulxU32(&x401, &x402, x5, (arg2[4]));
    var x403: u32 = undefined;
    var x404: u32 = undefined;
    mulxU32(&x403, &x404, x5, (arg2[3]));
    var x405: u32 = undefined;
    var x406: u32 = undefined;
    mulxU32(&x405, &x406, x5, (arg2[2]));
    var x407: u32 = undefined;
    var x408: u32 = undefined;
    mulxU32(&x407, &x408, x5, (arg2[1]));
    var x409: u32 = undefined;
    var x410: u32 = undefined;
    mulxU32(&x409, &x410, x5, (arg2[0]));
    var x411: u32 = undefined;
    var x412: u1 = undefined;
    addcarryxU32(&x411, &x412, 0x0, x410, x407);
    var x413: u32 = undefined;
    var x414: u1 = undefined;
    addcarryxU32(&x413, &x414, x412, x408, x405);
    var x415: u32 = undefined;
    var x416: u1 = undefined;
    addcarryxU32(&x415, &x416, x414, x406, x403);
    var x417: u32 = undefined;
    var x418: u1 = undefined;
    addcarryxU32(&x417, &x418, x416, x404, x401);
    var x419: u32 = undefined;
    var x420: u1 = undefined;
    addcarryxU32(&x419, &x420, x418, x402, x399);
    var x421: u32 = undefined;
    var x422: u1 = undefined;
    addcarryxU32(&x421, &x422, x420, x400, x397);
    var x423: u32 = undefined;
    var x424: u1 = undefined;
    addcarryxU32(&x423, &x424, x422, x398, x395);
    const x425 = (cast(u32, x424) + x396);
    var x426: u32 = undefined;
    var x427: u1 = undefined;
    addcarryxU32(&x426, &x427, 0x0, x378, x409);
    var x428: u32 = undefined;
    var x429: u1 = undefined;
    addcarryxU32(&x428, &x429, x427, x380, x411);
    var x430: u32 = undefined;
    var x431: u1 = undefined;
    addcarryxU32(&x430, &x431, x429, x382, x413);
    var x432: u32 = undefined;
    var x433: u1 = undefined;
    addcarryxU32(&x432, &x433, x431, x384, x415);
    var x434: u32 = undefined;
    var x435: u1 = undefined;
    addcarryxU32(&x434, &x435, x433, x386, x417);
    var x436: u32 = undefined;
    var x437: u1 = undefined;
    addcarryxU32(&x436, &x437, x435, x388, x419);
    var x438: u32 = undefined;
    var x439: u1 = undefined;
    addcarryxU32(&x438, &x439, x437, x390, x421);
    var x440: u32 = undefined;
    var x441: u1 = undefined;
    addcarryxU32(&x440, &x441, x439, x392, x423);
    var x442: u32 = undefined;
    var x443: u1 = undefined;
    addcarryxU32(&x442, &x443, x441, x394, x425);
    var x444: u32 = undefined;
    var x445: u32 = undefined;
    mulxU32(&x444, &x445, x426, 0xffffffff);
    var x446: u32 = undefined;
    var x447: u32 = undefined;
    mulxU32(&x446, &x447, x426, 0xffffffff);
    var x448: u32 = undefined;
    var x449: u32 = undefined;
    mulxU32(&x448, &x449, x426, 0xffffffff);
    var x450: u32 = undefined;
    var x451: u32 = undefined;
    mulxU32(&x450, &x451, x426, 0xffffffff);
    var x452: u32 = undefined;
    var x453: u1 = undefined;
    addcarryxU32(&x452, &x453, 0x0, x451, x448);
    var x454: u32 = undefined;
    var x455: u1 = undefined;
    addcarryxU32(&x454, &x455, x453, x449, x446);
    const x456 = (cast(u32, x455) + x447);
    var x457: u32 = undefined;
    var x458: u1 = undefined;
    addcarryxU32(&x457, &x458, 0x0, x426, x450);
    var x459: u32 = undefined;
    var x460: u1 = undefined;
    addcarryxU32(&x459, &x460, x458, x428, x452);
    var x461: u32 = undefined;
    var x462: u1 = undefined;
    addcarryxU32(&x461, &x462, x460, x430, x454);
    var x463: u32 = undefined;
    var x464: u1 = undefined;
    addcarryxU32(&x463, &x464, x462, x432, x456);
    var x465: u32 = undefined;
    var x466: u1 = undefined;
    addcarryxU32(&x465, &x466, x464, x434, cast(u32, 0x0));
    var x467: u32 = undefined;
    var x468: u1 = undefined;
    addcarryxU32(&x467, &x468, x466, x436, cast(u32, 0x0));
    var x469: u32 = undefined;
    var x470: u1 = undefined;
    addcarryxU32(&x469, &x470, x468, x438, x426);
    var x471: u32 = undefined;
    var x472: u1 = undefined;
    addcarryxU32(&x471, &x472, x470, x440, x444);
    var x473: u32 = undefined;
    var x474: u1 = undefined;
    addcarryxU32(&x473, &x474, x472, x442, x445);
    const x475 = (cast(u32, x474) + cast(u32, x443));
    var x476: u32 = undefined;
    var x477: u32 = undefined;
    mulxU32(&x476, &x477, x6, (arg2[7]));
    var x478: u32 = undefined;
    var x479: u32 = undefined;
    mulxU32(&x478, &x479, x6, (arg2[6]));
    var x480: u32 = undefined;
    var x481: u32 = undefined;
    mulxU32(&x480, &x481, x6, (arg2[5]));
    var x482: u32 = undefined;
    var x483: u32 = undefined;
    mulxU32(&x482, &x483, x6, (arg2[4]));
    var x484: u32 = undefined;
    var x485: u32 = undefined;
    mulxU32(&x484, &x485, x6, (arg2[3]));
    var x486: u32 = undefined;
    var x487: u32 = undefined;
    mulxU32(&x486, &x487, x6, (arg2[2]));
    var x488: u32 = undefined;
    var x489: u32 = undefined;
    mulxU32(&x488, &x489, x6, (arg2[1]));
    var x490: u32 = undefined;
    var x491: u32 = undefined;
    mulxU32(&x490, &x491, x6, (arg2[0]));
    var x492: u32 = undefined;
    var x493: u1 = undefined;
    addcarryxU32(&x492, &x493, 0x0, x491, x488);
    var x494: u32 = undefined;
    var x495: u1 = undefined;
    addcarryxU32(&x494, &x495, x493, x489, x486);
    var x496: u32 = undefined;
    var x497: u1 = undefined;
    addcarryxU32(&x496, &x497, x495, x487, x484);
    var x498: u32 = undefined;
    var x499: u1 = undefined;
    addcarryxU32(&x498, &x499, x497, x485, x482);
    var x500: u32 = undefined;
    var x501: u1 = undefined;
    addcarryxU32(&x500, &x501, x499, x483, x480);
    var x502: u32 = undefined;
    var x503: u1 = undefined;
    addcarryxU32(&x502, &x503, x501, x481, x478);
    var x504: u32 = undefined;
    var x505: u1 = undefined;
    addcarryxU32(&x504, &x505, x503, x479, x476);
    const x506 = (cast(u32, x505) + x477);
    var x507: u32 = undefined;
    var x508: u1 = undefined;
    addcarryxU32(&x507, &x508, 0x0, x459, x490);
    var x509: u32 = undefined;
    var x510: u1 = undefined;
    addcarryxU32(&x509, &x510, x508, x461, x492);
    var x511: u32 = undefined;
    var x512: u1 = undefined;
    addcarryxU32(&x511, &x512, x510, x463, x494);
    var x513: u32 = undefined;
    var x514: u1 = undefined;
    addcarryxU32(&x513, &x514, x512, x465, x496);
    var x515: u32 = undefined;
    var x516: u1 = undefined;
    addcarryxU32(&x515, &x516, x514, x467, x498);
    var x517: u32 = undefined;
    var x518: u1 = undefined;
    addcarryxU32(&x517, &x518, x516, x469, x500);
    var x519: u32 = undefined;
    var x520: u1 = undefined;
    addcarryxU32(&x519, &x520, x518, x471, x502);
    var x521: u32 = undefined;
    var x522: u1 = undefined;
    addcarryxU32(&x521, &x522, x520, x473, x504);
    var x523: u32 = undefined;
    var x524: u1 = undefined;
    addcarryxU32(&x523, &x524, x522, x475, x506);
    var x525: u32 = undefined;
    var x526: u32 = undefined;
    mulxU32(&x525, &x526, x507, 0xffffffff);
    var x527: u32 = undefined;
    var x528: u32 = undefined;
    mulxU32(&x527, &x528, x507, 0xffffffff);
    var x529: u32 = undefined;
    var x530: u32 = undefined;
    mulxU32(&x529, &x530, x507, 0xffffffff);
    var x531: u32 = undefined;
    var x532: u32 = undefined;
    mulxU32(&x531, &x532, x507, 0xffffffff);
    var x533: u32 = undefined;
    var x534: u1 = undefined;
    addcarryxU32(&x533, &x534, 0x0, x532, x529);
    var x535: u32 = undefined;
    var x536: u1 = undefined;
    addcarryxU32(&x535, &x536, x534, x530, x527);
    const x537 = (cast(u32, x536) + x528);
    var x538: u32 = undefined;
    var x539: u1 = undefined;
    addcarryxU32(&x538, &x539, 0x0, x507, x531);
    var x540: u32 = undefined;
    var x541: u1 = undefined;
    addcarryxU32(&x540, &x541, x539, x509, x533);
    var x542: u32 = undefined;
    var x543: u1 = undefined;
    addcarryxU32(&x542, &x543, x541, x511, x535);
    var x544: u32 = undefined;
    var x545: u1 = undefined;
    addcarryxU32(&x544, &x545, x543, x513, x537);
    var x546: u32 = undefined;
    var x547: u1 = undefined;
    addcarryxU32(&x546, &x547, x545, x515, cast(u32, 0x0));
    var x548: u32 = undefined;
    var x549: u1 = undefined;
    addcarryxU32(&x548, &x549, x547, x517, cast(u32, 0x0));
    var x550: u32 = undefined;
    var x551: u1 = undefined;
    addcarryxU32(&x550, &x551, x549, x519, x507);
    var x552: u32 = undefined;
    var x553: u1 = undefined;
    addcarryxU32(&x552, &x553, x551, x521, x525);
    var x554: u32 = undefined;
    var x555: u1 = undefined;
    addcarryxU32(&x554, &x555, x553, x523, x526);
    const x556 = (cast(u32, x555) + cast(u32, x524));
    var x557: u32 = undefined;
    var x558: u32 = undefined;
    mulxU32(&x557, &x558, x7, (arg2[7]));
    var x559: u32 = undefined;
    var x560: u32 = undefined;
    mulxU32(&x559, &x560, x7, (arg2[6]));
    var x561: u32 = undefined;
    var x562: u32 = undefined;
    mulxU32(&x561, &x562, x7, (arg2[5]));
    var x563: u32 = undefined;
    var x564: u32 = undefined;
    mulxU32(&x563, &x564, x7, (arg2[4]));
    var x565: u32 = undefined;
    var x566: u32 = undefined;
    mulxU32(&x565, &x566, x7, (arg2[3]));
    var x567: u32 = undefined;
    var x568: u32 = undefined;
    mulxU32(&x567, &x568, x7, (arg2[2]));
    var x569: u32 = undefined;
    var x570: u32 = undefined;
    mulxU32(&x569, &x570, x7, (arg2[1]));
    var x571: u32 = undefined;
    var x572: u32 = undefined;
    mulxU32(&x571, &x572, x7, (arg2[0]));
    var x573: u32 = undefined;
    var x574: u1 = undefined;
    addcarryxU32(&x573, &x574, 0x0, x572, x569);
    var x575: u32 = undefined;
    var x576: u1 = undefined;
    addcarryxU32(&x575, &x576, x574, x570, x567);
    var x577: u32 = undefined;
    var x578: u1 = undefined;
    addcarryxU32(&x577, &x578, x576, x568, x565);
    var x579: u32 = undefined;
    var x580: u1 = undefined;
    addcarryxU32(&x579, &x580, x578, x566, x563);
    var x581: u32 = undefined;
    var x582: u1 = undefined;
    addcarryxU32(&x581, &x582, x580, x564, x561);
    var x583: u32 = undefined;
    var x584: u1 = undefined;
    addcarryxU32(&x583, &x584, x582, x562, x559);
    var x585: u32 = undefined;
    var x586: u1 = undefined;
    addcarryxU32(&x585, &x586, x584, x560, x557);
    const x587 = (cast(u32, x586) + x558);
    var x588: u32 = undefined;
    var x589: u1 = undefined;
    addcarryxU32(&x588, &x589, 0x0, x540, x571);
    var x590: u32 = undefined;
    var x591: u1 = undefined;
    addcarryxU32(&x590, &x591, x589, x542, x573);
    var x592: u32 = undefined;
    var x593: u1 = undefined;
    addcarryxU32(&x592, &x593, x591, x544, x575);
    var x594: u32 = undefined;
    var x595: u1 = undefined;
    addcarryxU32(&x594, &x595, x593, x546, x577);
    var x596: u32 = undefined;
    var x597: u1 = undefined;
    addcarryxU32(&x596, &x597, x595, x548, x579);
    var x598: u32 = undefined;
    var x599: u1 = undefined;
    addcarryxU32(&x598, &x599, x597, x550, x581);
    var x600: u32 = undefined;
    var x601: u1 = undefined;
    addcarryxU32(&x600, &x601, x599, x552, x583);
    var x602: u32 = undefined;
    var x603: u1 = undefined;
    addcarryxU32(&x602, &x603, x601, x554, x585);
    var x604: u32 = undefined;
    var x605: u1 = undefined;
    addcarryxU32(&x604, &x605, x603, x556, x587);
    var x606: u32 = undefined;
    var x607: u32 = undefined;
    mulxU32(&x606, &x607, x588, 0xffffffff);
    var x608: u32 = undefined;
    var x609: u32 = undefined;
    mulxU32(&x608, &x609, x588, 0xffffffff);
    var x610: u32 = undefined;
    var x611: u32 = undefined;
    mulxU32(&x610, &x611, x588, 0xffffffff);
    var x612: u32 = undefined;
    var x613: u32 = undefined;
    mulxU32(&x612, &x613, x588, 0xffffffff);
    var x614: u32 = undefined;
    var x615: u1 = undefined;
    addcarryxU32(&x614, &x615, 0x0, x613, x610);
    var x616: u32 = undefined;
    var x617: u1 = undefined;
    addcarryxU32(&x616, &x617, x615, x611, x608);
    const x618 = (cast(u32, x617) + x609);
    var x619: u32 = undefined;
    var x620: u1 = undefined;
    addcarryxU32(&x619, &x620, 0x0, x588, x612);
    var x621: u32 = undefined;
    var x622: u1 = undefined;
    addcarryxU32(&x621, &x622, x620, x590, x614);
    var x623: u32 = undefined;
    var x624: u1 = undefined;
    addcarryxU32(&x623, &x624, x622, x592, x616);
    var x625: u32 = undefined;
    var x626: u1 = undefined;
    addcarryxU32(&x625, &x626, x624, x594, x618);
    var x627: u32 = undefined;
    var x628: u1 = undefined;
    addcarryxU32(&x627, &x628, x626, x596, cast(u32, 0x0));
    var x629: u32 = undefined;
    var x630: u1 = undefined;
    addcarryxU32(&x629, &x630, x628, x598, cast(u32, 0x0));
    var x631: u32 = undefined;
    var x632: u1 = undefined;
    addcarryxU32(&x631, &x632, x630, x600, x588);
    var x633: u32 = undefined;
    var x634: u1 = undefined;
    addcarryxU32(&x633, &x634, x632, x602, x606);
    var x635: u32 = undefined;
    var x636: u1 = undefined;
    addcarryxU32(&x635, &x636, x634, x604, x607);
    const x637 = (cast(u32, x636) + cast(u32, x605));
    var x638: u32 = undefined;
    var x639: u1 = undefined;
    subborrowxU32(&x638, &x639, 0x0, x621, 0xffffffff);
    var x640: u32 = undefined;
    var x641: u1 = undefined;
    subborrowxU32(&x640, &x641, x639, x623, 0xffffffff);
    var x642: u32 = undefined;
    var x643: u1 = undefined;
    subborrowxU32(&x642, &x643, x641, x625, 0xffffffff);
    var x644: u32 = undefined;
    var x645: u1 = undefined;
    subborrowxU32(&x644, &x645, x643, x627, cast(u32, 0x0));
    var x646: u32 = undefined;
    var x647: u1 = undefined;
    subborrowxU32(&x646, &x647, x645, x629, cast(u32, 0x0));
    var x648: u32 = undefined;
    var x649: u1 = undefined;
    subborrowxU32(&x648, &x649, x647, x631, cast(u32, 0x0));
    var x650: u32 = undefined;
    var x651: u1 = undefined;
    subborrowxU32(&x650, &x651, x649, x633, cast(u32, 0x1));
    var x652: u32 = undefined;
    var x653: u1 = undefined;
    subborrowxU32(&x652, &x653, x651, x635, 0xffffffff);
    var x654: u32 = undefined;
    var x655: u1 = undefined;
    subborrowxU32(&x654, &x655, x653, x637, cast(u32, 0x0));
    var x656: u32 = undefined;
    cmovznzU32(&x656, x655, x638, x621);
    var x657: u32 = undefined;
    cmovznzU32(&x657, x655, x640, x623);
    var x658: u32 = undefined;
    cmovznzU32(&x658, x655, x642, x625);
    var x659: u32 = undefined;
    cmovznzU32(&x659, x655, x644, x627);
    var x660: u32 = undefined;
    cmovznzU32(&x660, x655, x646, x629);
    var x661: u32 = undefined;
    cmovznzU32(&x661, x655, x648, x631);
    var x662: u32 = undefined;
    cmovznzU32(&x662, x655, x650, x633);
    var x663: u32 = undefined;
    cmovznzU32(&x663, x655, x652, x635);
    out1[0] = x656;
    out1[1] = x657;
    out1[2] = x658;
    out1[3] = x659;
    out1[4] = x660;
    out1[5] = x661;
    out1[6] = x662;
    out1[7] = x663;
}

/// The function square squares a field element in the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
///   0 ≤ eval out1 < m
///
pub fn square(out1: *MontgomeryDomainFieldElement, arg1: MontgomeryDomainFieldElement) void {
    @setRuntimeSafety(mode == .Debug);

    const x1 = (arg1[1]);
    const x2 = (arg1[2]);
    const x3 = (arg1[3]);
    const x4 = (arg1[4]);
    const x5 = (arg1[5]);
    const x6 = (arg1[6]);
    const x7 = (arg1[7]);
    const x8 = (arg1[0]);
    var x9: u32 = undefined;
    var x10: u32 = undefined;
    mulxU32(&x9, &x10, x8, (arg1[7]));
    var x11: u32 = undefined;
    var x12: u32 = undefined;
    mulxU32(&x11, &x12, x8, (arg1[6]));
    var x13: u32 = undefined;
    var x14: u32 = undefined;
    mulxU32(&x13, &x14, x8, (arg1[5]));
    var x15: u32 = undefined;
    var x16: u32 = undefined;
    mulxU32(&x15, &x16, x8, (arg1[4]));
    var x17: u32 = undefined;
    var x18: u32 = undefined;
    mulxU32(&x17, &x18, x8, (arg1[3]));
    var x19: u32 = undefined;
    var x20: u32 = undefined;
    mulxU32(&x19, &x20, x8, (arg1[2]));
    var x21: u32 = undefined;
    var x22: u32 = undefined;
    mulxU32(&x21, &x22, x8, (arg1[1]));
    var x23: u32 = undefined;
    var x24: u32 = undefined;
    mulxU32(&x23, &x24, x8, (arg1[0]));
    var x25: u32 = undefined;
    var x26: u1 = undefined;
    addcarryxU32(&x25, &x26, 0x0, x24, x21);
    var x27: u32 = undefined;
    var x28: u1 = undefined;
    addcarryxU32(&x27, &x28, x26, x22, x19);
    var x29: u32 = undefined;
    var x30: u1 = undefined;
    addcarryxU32(&x29, &x30, x28, x20, x17);
    var x31: u32 = undefined;
    var x32: u1 = undefined;
    addcarryxU32(&x31, &x32, x30, x18, x15);
    var x33: u32 = undefined;
    var x34: u1 = undefined;
    addcarryxU32(&x33, &x34, x32, x16, x13);
    var x35: u32 = undefined;
    var x36: u1 = undefined;
    addcarryxU32(&x35, &x36, x34, x14, x11);
    var x37: u32 = undefined;
    var x38: u1 = undefined;
    addcarryxU32(&x37, &x38, x36, x12, x9);
    const x39 = (cast(u32, x38) + x10);
    var x40: u32 = undefined;
    var x41: u32 = undefined;
    mulxU32(&x40, &x41, x23, 0xffffffff);
    var x42: u32 = undefined;
    var x43: u32 = undefined;
    mulxU32(&x42, &x43, x23, 0xffffffff);
    var x44: u32 = undefined;
    var x45: u32 = undefined;
    mulxU32(&x44, &x45, x23, 0xffffffff);
    var x46: u32 = undefined;
    var x47: u32 = undefined;
    mulxU32(&x46, &x47, x23, 0xffffffff);
    var x48: u32 = undefined;
    var x49: u1 = undefined;
    addcarryxU32(&x48, &x49, 0x0, x47, x44);
    var x50: u32 = undefined;
    var x51: u1 = undefined;
    addcarryxU32(&x50, &x51, x49, x45, x42);
    const x52 = (cast(u32, x51) + x43);
    var x53: u32 = undefined;
    var x54: u1 = undefined;
    addcarryxU32(&x53, &x54, 0x0, x23, x46);
    var x55: u32 = undefined;
    var x56: u1 = undefined;
    addcarryxU32(&x55, &x56, x54, x25, x48);
    var x57: u32 = undefined;
    var x58: u1 = undefined;
    addcarryxU32(&x57, &x58, x56, x27, x50);
    var x59: u32 = undefined;
    var x60: u1 = undefined;
    addcarryxU32(&x59, &x60, x58, x29, x52);
    var x61: u32 = undefined;
    var x62: u1 = undefined;
    addcarryxU32(&x61, &x62, x60, x31, cast(u32, 0x0));
    var x63: u32 = undefined;
    var x64: u1 = undefined;
    addcarryxU32(&x63, &x64, x62, x33, cast(u32, 0x0));
    var x65: u32 = undefined;
    var x66: u1 = undefined;
    addcarryxU32(&x65, &x66, x64, x35, x23);
    var x67: u32 = undefined;
    var x68: u1 = undefined;
    addcarryxU32(&x67, &x68, x66, x37, x40);
    var x69: u32 = undefined;
    var x70: u1 = undefined;
    addcarryxU32(&x69, &x70, x68, x39, x41);
    var x71: u32 = undefined;
    var x72: u32 = undefined;
    mulxU32(&x71, &x72, x1, (arg1[7]));
    var x73: u32 = undefined;
    var x74: u32 = undefined;
    mulxU32(&x73, &x74, x1, (arg1[6]));
    var x75: u32 = undefined;
    var x76: u32 = undefined;
    mulxU32(&x75, &x76, x1, (arg1[5]));
    var x77: u32 = undefined;
    var x78: u32 = undefined;
    mulxU32(&x77, &x78, x1, (arg1[4]));
    var x79: u32 = undefined;
    var x80: u32 = undefined;
    mulxU32(&x79, &x80, x1, (arg1[3]));
    var x81: u32 = undefined;
    var x82: u32 = undefined;
    mulxU32(&x81, &x82, x1, (arg1[2]));
    var x83: u32 = undefined;
    var x84: u32 = undefined;
    mulxU32(&x83, &x84, x1, (arg1[1]));
    var x85: u32 = undefined;
    var x86: u32 = undefined;
    mulxU32(&x85, &x86, x1, (arg1[0]));
    var x87: u32 = undefined;
    var x88: u1 = undefined;
    addcarryxU32(&x87, &x88, 0x0, x86, x83);
    var x89: u32 = undefined;
    var x90: u1 = undefined;
    addcarryxU32(&x89, &x90, x88, x84, x81);
    var x91: u32 = undefined;
    var x92: u1 = undefined;
    addcarryxU32(&x91, &x92, x90, x82, x79);
    var x93: u32 = undefined;
    var x94: u1 = undefined;
    addcarryxU32(&x93, &x94, x92, x80, x77);
    var x95: u32 = undefined;
    var x96: u1 = undefined;
    addcarryxU32(&x95, &x96, x94, x78, x75);
    var x97: u32 = undefined;
    var x98: u1 = undefined;
    addcarryxU32(&x97, &x98, x96, x76, x73);
    var x99: u32 = undefined;
    var x100: u1 = undefined;
    addcarryxU32(&x99, &x100, x98, x74, x71);
    const x101 = (cast(u32, x100) + x72);
    var x102: u32 = undefined;
    var x103: u1 = undefined;
    addcarryxU32(&x102, &x103, 0x0, x55, x85);
    var x104: u32 = undefined;
    var x105: u1 = undefined;
    addcarryxU32(&x104, &x105, x103, x57, x87);
    var x106: u32 = undefined;
    var x107: u1 = undefined;
    addcarryxU32(&x106, &x107, x105, x59, x89);
    var x108: u32 = undefined;
    var x109: u1 = undefined;
    addcarryxU32(&x108, &x109, x107, x61, x91);
    var x110: u32 = undefined;
    var x111: u1 = undefined;
    addcarryxU32(&x110, &x111, x109, x63, x93);
    var x112: u32 = undefined;
    var x113: u1 = undefined;
    addcarryxU32(&x112, &x113, x111, x65, x95);
    var x114: u32 = undefined;
    var x115: u1 = undefined;
    addcarryxU32(&x114, &x115, x113, x67, x97);
    var x116: u32 = undefined;
    var x117: u1 = undefined;
    addcarryxU32(&x116, &x117, x115, x69, x99);
    var x118: u32 = undefined;
    var x119: u1 = undefined;
    addcarryxU32(&x118, &x119, x117, cast(u32, x70), x101);
    var x120: u32 = undefined;
    var x121: u32 = undefined;
    mulxU32(&x120, &x121, x102, 0xffffffff);
    var x122: u32 = undefined;
    var x123: u32 = undefined;
    mulxU32(&x122, &x123, x102, 0xffffffff);
    var x124: u32 = undefined;
    var x125: u32 = undefined;
    mulxU32(&x124, &x125, x102, 0xffffffff);
    var x126: u32 = undefined;
    var x127: u32 = undefined;
    mulxU32(&x126, &x127, x102, 0xffffffff);
    var x128: u32 = undefined;
    var x129: u1 = undefined;
    addcarryxU32(&x128, &x129, 0x0, x127, x124);
    var x130: u32 = undefined;
    var x131: u1 = undefined;
    addcarryxU32(&x130, &x131, x129, x125, x122);
    const x132 = (cast(u32, x131) + x123);
    var x133: u32 = undefined;
    var x134: u1 = undefined;
    addcarryxU32(&x133, &x134, 0x0, x102, x126);
    var x135: u32 = undefined;
    var x136: u1 = undefined;
    addcarryxU32(&x135, &x136, x134, x104, x128);
    var x137: u32 = undefined;
    var x138: u1 = undefined;
    addcarryxU32(&x137, &x138, x136, x106, x130);
    var x139: u32 = undefined;
    var x140: u1 = undefined;
    addcarryxU32(&x139, &x140, x138, x108, x132);
    var x141: u32 = undefined;
    var x142: u1 = undefined;
    addcarryxU32(&x141, &x142, x140, x110, cast(u32, 0x0));
    var x143: u32 = undefined;
    var x144: u1 = undefined;
    addcarryxU32(&x143, &x144, x142, x112, cast(u32, 0x0));
    var x145: u32 = undefined;
    var x146: u1 = undefined;
    addcarryxU32(&x145, &x146, x144, x114, x102);
    var x147: u32 = undefined;
    var x148: u1 = undefined;
    addcarryxU32(&x147, &x148, x146, x116, x120);
    var x149: u32 = undefined;
    var x150: u1 = undefined;
    addcarryxU32(&x149, &x150, x148, x118, x121);
    const x151 = (cast(u32, x150) + cast(u32, x119));
    var x152: u32 = undefined;
    var x153: u32 = undefined;
    mulxU32(&x152, &x153, x2, (arg1[7]));
    var x154: u32 = undefined;
    var x155: u32 = undefined;
    mulxU32(&x154, &x155, x2, (arg1[6]));
    var x156: u32 = undefined;
    var x157: u32 = undefined;
    mulxU32(&x156, &x157, x2, (arg1[5]));
    var x158: u32 = undefined;
    var x159: u32 = undefined;
    mulxU32(&x158, &x159, x2, (arg1[4]));
    var x160: u32 = undefined;
    var x161: u32 = undefined;
    mulxU32(&x160, &x161, x2, (arg1[3]));
    var x162: u32 = undefined;
    var x163: u32 = undefined;
    mulxU32(&x162, &x163, x2, (arg1[2]));
    var x164: u32 = undefined;
    var x165: u32 = undefined;
    mulxU32(&x164, &x165, x2, (arg1[1]));
    var x166: u32 = undefined;
    var x167: u32 = undefined;
    mulxU32(&x166, &x167, x2, (arg1[0]));
    var x168: u32 = undefined;
    var x169: u1 = undefined;
    addcarryxU32(&x168, &x169, 0x0, x167, x164);
    var x170: u32 = undefined;
    var x171: u1 = undefined;
    addcarryxU32(&x170, &x171, x169, x165, x162);
    var x172: u32 = undefined;
    var x173: u1 = undefined;
    addcarryxU32(&x172, &x173, x171, x163, x160);
    var x174: u32 = undefined;
    var x175: u1 = undefined;
    addcarryxU32(&x174, &x175, x173, x161, x158);
    var x176: u32 = undefined;
    var x177: u1 = undefined;
    addcarryxU32(&x176, &x177, x175, x159, x156);
    var x178: u32 = undefined;
    var x179: u1 = undefined;
    addcarryxU32(&x178, &x179, x177, x157, x154);
    var x180: u32 = undefined;
    var x181: u1 = undefined;
    addcarryxU32(&x180, &x181, x179, x155, x152);
    const x182 = (cast(u32, x181) + x153);
    var x183: u32 = undefined;
    var x184: u1 = undefined;
    addcarryxU32(&x183, &x184, 0x0, x135, x166);
    var x185: u32 = undefined;
    var x186: u1 = undefined;
    addcarryxU32(&x185, &x186, x184, x137, x168);
    var x187: u32 = undefined;
    var x188: u1 = undefined;
    addcarryxU32(&x187, &x188, x186, x139, x170);
    var x189: u32 = undefined;
    var x190: u1 = undefined;
    addcarryxU32(&x189, &x190, x188, x141, x172);
    var x191: u32 = undefined;
    var x192: u1 = undefined;
    addcarryxU32(&x191, &x192, x190, x143, x174);
    var x193: u32 = undefined;
    var x194: u1 = undefined;
    addcarryxU32(&x193, &x194, x192, x145, x176);
    var x195: u32 = undefined;
    var x196: u1 = undefined;
    addcarryxU32(&x195, &x196, x194, x147, x178);
    var x197: u32 = undefined;
    var x198: u1 = undefined;
    addcarryxU32(&x197, &x198, x196, x149, x180);
    var x199: u32 = undefined;
    var x200: u1 = undefined;
    addcarryxU32(&x199, &x200, x198, x151, x182);
    var x201: u32 = undefined;
    var x202: u32 = undefined;
    mulxU32(&x201, &x202, x183, 0xffffffff);
    var x203: u32 = undefined;
    var x204: u32 = undefined;
    mulxU32(&x203, &x204, x183, 0xffffffff);
    var x205: u32 = undefined;
    var x206: u32 = undefined;
    mulxU32(&x205, &x206, x183, 0xffffffff);
    var x207: u32 = undefined;
    var x208: u32 = undefined;
    mulxU32(&x207, &x208, x183, 0xffffffff);
    var x209: u32 = undefined;
    var x210: u1 = undefined;
    addcarryxU32(&x209, &x210, 0x0, x208, x205);
    var x211: u32 = undefined;
    var x212: u1 = undefined;
    addcarryxU32(&x211, &x212, x210, x206, x203);
    const x213 = (cast(u32, x212) + x204);
    var x214: u32 = undefined;
    var x215: u1 = undefined;
    addcarryxU32(&x214, &x215, 0x0, x183, x207);
    var x216: u32 = undefined;
    var x217: u1 = undefined;
    addcarryxU32(&x216, &x217, x215, x185, x209);
    var x218: u32 = undefined;
    var x219: u1 = undefined;
    addcarryxU32(&x218, &x219, x217, x187, x211);
    var x220: u32 = undefined;
    var x221: u1 = undefined;
    addcarryxU32(&x220, &x221, x219, x189, x213);
    var x222: u32 = undefined;
    var x223: u1 = undefined;
    addcarryxU32(&x222, &x223, x221, x191, cast(u32, 0x0));
    var x224: u32 = undefined;
    var x225: u1 = undefined;
    addcarryxU32(&x224, &x225, x223, x193, cast(u32, 0x0));
    var x226: u32 = undefined;
    var x227: u1 = undefined;
    addcarryxU32(&x226, &x227, x225, x195, x183);
    var x228: u32 = undefined;
    var x229: u1 = undefined;
    addcarryxU32(&x228, &x229, x227, x197, x201);
    var x230: u32 = undefined;
    var x231: u1 = undefined;
    addcarryxU32(&x230, &x231, x229, x199, x202);
    const x232 = (cast(u32, x231) + cast(u32, x200));
    var x233: u32 = undefined;
    var x234: u32 = undefined;
    mulxU32(&x233, &x234, x3, (arg1[7]));
    var x235: u32 = undefined;
    var x236: u32 = undefined;
    mulxU32(&x235, &x236, x3, (arg1[6]));
    var x237: u32 = undefined;
    var x238: u32 = undefined;
    mulxU32(&x237, &x238, x3, (arg1[5]));
    var x239: u32 = undefined;
    var x240: u32 = undefined;
    mulxU32(&x239, &x240, x3, (arg1[4]));
    var x241: u32 = undefined;
    var x242: u32 = undefined;
    mulxU32(&x241, &x242, x3, (arg1[3]));
    var x243: u32 = undefined;
    var x244: u32 = undefined;
    mulxU32(&x243, &x244, x3, (arg1[2]));
    var x245: u32 = undefined;
    var x246: u32 = undefined;
    mulxU32(&x245, &x246, x3, (arg1[1]));
    var x247: u32 = undefined;
    var x248: u32 = undefined;
    mulxU32(&x247, &x248, x3, (arg1[0]));
    var x249: u32 = undefined;
    var x250: u1 = undefined;
    addcarryxU32(&x249, &x250, 0x0, x248, x245);
    var x251: u32 = undefined;
    var x252: u1 = undefined;
    addcarryxU32(&x251, &x252, x250, x246, x243);
    var x253: u32 = undefined;
    var x254: u1 = undefined;
    addcarryxU32(&x253, &x254, x252, x244, x241);
    var x255: u32 = undefined;
    var x256: u1 = undefined;
    addcarryxU32(&x255, &x256, x254, x242, x239);
    var x257: u32 = undefined;
    var x258: u1 = undefined;
    addcarryxU32(&x257, &x258, x256, x240, x237);
    var x259: u32 = undefined;
    var x260: u1 = undefined;
    addcarryxU32(&x259, &x260, x258, x238, x235);
    var x261: u32 = undefined;
    var x262: u1 = undefined;
    addcarryxU32(&x261, &x262, x260, x236, x233);
    const x263 = (cast(u32, x262) + x234);
    var x264: u32 = undefined;
    var x265: u1 = undefined;
    addcarryxU32(&x264, &x265, 0x0, x216, x247);
    var x266: u32 = undefined;
    var x267: u1 = undefined;
    addcarryxU32(&x266, &x267, x265, x218, x249);
    var x268: u32 = undefined;
    var x269: u1 = undefined;
    addcarryxU32(&x268, &x269, x267, x220, x251);
    var x270: u32 = undefined;
    var x271: u1 = undefined;
    addcarryxU32(&x270, &x271, x269, x222, x253);
    var x272: u32 = undefined;
    var x273: u1 = undefined;
    addcarryxU32(&x272, &x273, x271, x224, x255);
    var x274: u32 = undefined;
    var x275: u1 = undefined;
    addcarryxU32(&x274, &x275, x273, x226, x257);
    var x276: u32 = undefined;
    var x277: u1 = undefined;
    addcarryxU32(&x276, &x277, x275, x228, x259);
    var x278: u32 = undefined;
    var x279: u1 = undefined;
    addcarryxU32(&x278, &x279, x277, x230, x261);
    var x280: u32 = undefined;
    var x281: u1 = undefined;
    addcarryxU32(&x280, &x281, x279, x232, x263);
    var x282: u32 = undefined;
    var x283: u32 = undefined;
    mulxU32(&x282, &x283, x264, 0xffffffff);
    var x284: u32 = undefined;
    var x285: u32 = undefined;
    mulxU32(&x284, &x285, x264, 0xffffffff);
    var x286: u32 = undefined;
    var x287: u32 = undefined;
    mulxU32(&x286, &x287, x264, 0xffffffff);
    var x288: u32 = undefined;
    var x289: u32 = undefined;
    mulxU32(&x288, &x289, x264, 0xffffffff);
    var x290: u32 = undefined;
    var x291: u1 = undefined;
    addcarryxU32(&x290, &x291, 0x0, x289, x286);
    var x292: u32 = undefined;
    var x293: u1 = undefined;
    addcarryxU32(&x292, &x293, x291, x287, x284);
    const x294 = (cast(u32, x293) + x285);
    var x295: u32 = undefined;
    var x296: u1 = undefined;
    addcarryxU32(&x295, &x296, 0x0, x264, x288);
    var x297: u32 = undefined;
    var x298: u1 = undefined;
    addcarryxU32(&x297, &x298, x296, x266, x290);
    var x299: u32 = undefined;
    var x300: u1 = undefined;
    addcarryxU32(&x299, &x300, x298, x268, x292);
    var x301: u32 = undefined;
    var x302: u1 = undefined;
    addcarryxU32(&x301, &x302, x300, x270, x294);
    var x303: u32 = undefined;
    var x304: u1 = undefined;
    addcarryxU32(&x303, &x304, x302, x272, cast(u32, 0x0));
    var x305: u32 = undefined;
    var x306: u1 = undefined;
    addcarryxU32(&x305, &x306, x304, x274, cast(u32, 0x0));
    var x307: u32 = undefined;
    var x308: u1 = undefined;
    addcarryxU32(&x307, &x308, x306, x276, x264);
    var x309: u32 = undefined;
    var x310: u1 = undefined;
    addcarryxU32(&x309, &x310, x308, x278, x282);
    var x311: u32 = undefined;
    var x312: u1 = undefined;
    addcarryxU32(&x311, &x312, x310, x280, x283);
    const x313 = (cast(u32, x312) + cast(u32, x281));
    var x314: u32 = undefined;
    var x315: u32 = undefined;
    mulxU32(&x314, &x315, x4, (arg1[7]));
    var x316: u32 = undefined;
    var x317: u32 = undefined;
    mulxU32(&x316, &x317, x4, (arg1[6]));
    var x318: u32 = undefined;
    var x319: u32 = undefined;
    mulxU32(&x318, &x319, x4, (arg1[5]));
    var x320: u32 = undefined;
    var x321: u32 = undefined;
    mulxU32(&x320, &x321, x4, (arg1[4]));
    var x322: u32 = undefined;
    var x323: u32 = undefined;
    mulxU32(&x322, &x323, x4, (arg1[3]));
    var x324: u32 = undefined;
    var x325: u32 = undefined;
    mulxU32(&x324, &x325, x4, (arg1[2]));
    var x326: u32 = undefined;
    var x327: u32 = undefined;
    mulxU32(&x326, &x327, x4, (arg1[1]));
    var x328: u32 = undefined;
    var x329: u32 = undefined;
    mulxU32(&x328, &x329, x4, (arg1[0]));
    var x330: u32 = undefined;
    var x331: u1 = undefined;
    addcarryxU32(&x330, &x331, 0x0, x329, x326);
    var x332: u32 = undefined;
    var x333: u1 = undefined;
    addcarryxU32(&x332, &x333, x331, x327, x324);
    var x334: u32 = undefined;
    var x335: u1 = undefined;
    addcarryxU32(&x334, &x335, x333, x325, x322);
    var x336: u32 = undefined;
    var x337: u1 = undefined;
    addcarryxU32(&x336, &x337, x335, x323, x320);
    var x338: u32 = undefined;
    var x339: u1 = undefined;
    addcarryxU32(&x338, &x339, x337, x321, x318);
    var x340: u32 = undefined;
    var x341: u1 = undefined;
    addcarryxU32(&x340, &x341, x339, x319, x316);
    var x342: u32 = undefined;
    var x343: u1 = undefined;
    addcarryxU32(&x342, &x343, x341, x317, x314);
    const x344 = (cast(u32, x343) + x315);
    var x345: u32 = undefined;
    var x346: u1 = undefined;
    addcarryxU32(&x345, &x346, 0x0, x297, x328);
    var x347: u32 = undefined;
    var x348: u1 = undefined;
    addcarryxU32(&x347, &x348, x346, x299, x330);
    var x349: u32 = undefined;
    var x350: u1 = undefined;
    addcarryxU32(&x349, &x350, x348, x301, x332);
    var x351: u32 = undefined;
    var x352: u1 = undefined;
    addcarryxU32(&x351, &x352, x350, x303, x334);
    var x353: u32 = undefined;
    var x354: u1 = undefined;
    addcarryxU32(&x353, &x354, x352, x305, x336);
    var x355: u32 = undefined;
    var x356: u1 = undefined;
    addcarryxU32(&x355, &x356, x354, x307, x338);
    var x357: u32 = undefined;
    var x358: u1 = undefined;
    addcarryxU32(&x357, &x358, x356, x309, x340);
    var x359: u32 = undefined;
    var x360: u1 = undefined;
    addcarryxU32(&x359, &x360, x358, x311, x342);
    var x361: u32 = undefined;
    var x362: u1 = undefined;
    addcarryxU32(&x361, &x362, x360, x313, x344);
    var x363: u32 = undefined;
    var x364: u32 = undefined;
    mulxU32(&x363, &x364, x345, 0xffffffff);
    var x365: u32 = undefined;
    var x366: u32 = undefined;
    mulxU32(&x365, &x366, x345, 0xffffffff);
    var x367: u32 = undefined;
    var x368: u32 = undefined;
    mulxU32(&x367, &x368, x345, 0xffffffff);
    var x369: u32 = undefined;
    var x370: u32 = undefined;
    mulxU32(&x369, &x370, x345, 0xffffffff);
    var x371: u32 = undefined;
    var x372: u1 = undefined;
    addcarryxU32(&x371, &x372, 0x0, x370, x367);
    var x373: u32 = undefined;
    var x374: u1 = undefined;
    addcarryxU32(&x373, &x374, x372, x368, x365);
    const x375 = (cast(u32, x374) + x366);
    var x376: u32 = undefined;
    var x377: u1 = undefined;
    addcarryxU32(&x376, &x377, 0x0, x345, x369);
    var x378: u32 = undefined;
    var x379: u1 = undefined;
    addcarryxU32(&x378, &x379, x377, x347, x371);
    var x380: u32 = undefined;
    var x381: u1 = undefined;
    addcarryxU32(&x380, &x381, x379, x349, x373);
    var x382: u32 = undefined;
    var x383: u1 = undefined;
    addcarryxU32(&x382, &x383, x381, x351, x375);
    var x384: u32 = undefined;
    var x385: u1 = undefined;
    addcarryxU32(&x384, &x385, x383, x353, cast(u32, 0x0));
    var x386: u32 = undefined;
    var x387: u1 = undefined;
    addcarryxU32(&x386, &x387, x385, x355, cast(u32, 0x0));
    var x388: u32 = undefined;
    var x389: u1 = undefined;
    addcarryxU32(&x388, &x389, x387, x357, x345);
    var x390: u32 = undefined;
    var x391: u1 = undefined;
    addcarryxU32(&x390, &x391, x389, x359, x363);
    var x392: u32 = undefined;
    var x393: u1 = undefined;
    addcarryxU32(&x392, &x393, x391, x361, x364);
    const x394 = (cast(u32, x393) + cast(u32, x362));
    var x395: u32 = undefined;
    var x396: u32 = undefined;
    mulxU32(&x395, &x396, x5, (arg1[7]));
    var x397: u32 = undefined;
    var x398: u32 = undefined;
    mulxU32(&x397, &x398, x5, (arg1[6]));
    var x399: u32 = undefined;
    var x400: u32 = undefined;
    mulxU32(&x399, &x400, x5, (arg1[5]));
    var x401: u32 = undefined;
    var x402: u32 = undefined;
    mulxU32(&x401, &x402, x5, (arg1[4]));
    var x403: u32 = undefined;
    var x404: u32 = undefined;
    mulxU32(&x403, &x404, x5, (arg1[3]));
    var x405: u32 = undefined;
    var x406: u32 = undefined;
    mulxU32(&x405, &x406, x5, (arg1[2]));
    var x407: u32 = undefined;
    var x408: u32 = undefined;
    mulxU32(&x407, &x408, x5, (arg1[1]));
    var x409: u32 = undefined;
    var x410: u32 = undefined;
    mulxU32(&x409, &x410, x5, (arg1[0]));
    var x411: u32 = undefined;
    var x412: u1 = undefined;
    addcarryxU32(&x411, &x412, 0x0, x410, x407);
    var x413: u32 = undefined;
    var x414: u1 = undefined;
    addcarryxU32(&x413, &x414, x412, x408, x405);
    var x415: u32 = undefined;
    var x416: u1 = undefined;
    addcarryxU32(&x415, &x416, x414, x406, x403);
    var x417: u32 = undefined;
    var x418: u1 = undefined;
    addcarryxU32(&x417, &x418, x416, x404, x401);
    var x419: u32 = undefined;
    var x420: u1 = undefined;
    addcarryxU32(&x419, &x420, x418, x402, x399);
    var x421: u32 = undefined;
    var x422: u1 = undefined;
    addcarryxU32(&x421, &x422, x420, x400, x397);
    var x423: u32 = undefined;
    var x424: u1 = undefined;
    addcarryxU32(&x423, &x424, x422, x398, x395);
    const x425 = (cast(u32, x424) + x396);
    var x426: u32 = undefined;
    var x427: u1 = undefined;
    addcarryxU32(&x426, &x427, 0x0, x378, x409);
    var x428: u32 = undefined;
    var x429: u1 = undefined;
    addcarryxU32(&x428, &x429, x427, x380, x411);
    var x430: u32 = undefined;
    var x431: u1 = undefined;
    addcarryxU32(&x430, &x431, x429, x382, x413);
    var x432: u32 = undefined;
    var x433: u1 = undefined;
    addcarryxU32(&x432, &x433, x431, x384, x415);
    var x434: u32 = undefined;
    var x435: u1 = undefined;
    addcarryxU32(&x434, &x435, x433, x386, x417);
    var x436: u32 = undefined;
    var x437: u1 = undefined;
    addcarryxU32(&x436, &x437, x435, x388, x419);
    var x438: u32 = undefined;
    var x439: u1 = undefined;
    addcarryxU32(&x438, &x439, x437, x390, x421);
    var x440: u32 = undefined;
    var x441: u1 = undefined;
    addcarryxU32(&x440, &x441, x439, x392, x423);
    var x442: u32 = undefined;
    var x443: u1 = undefined;
    addcarryxU32(&x442, &x443, x441, x394, x425);
    var x444: u32 = undefined;
    var x445: u32 = undefined;
    mulxU32(&x444, &x445, x426, 0xffffffff);
    var x446: u32 = undefined;
    var x447: u32 = undefined;
    mulxU32(&x446, &x447, x426, 0xffffffff);
    var x448: u32 = undefined;
    var x449: u32 = undefined;
    mulxU32(&x448, &x449, x426, 0xffffffff);
    var x450: u32 = undefined;
    var x451: u32 = undefined;
    mulxU32(&x450, &x451, x426, 0xffffffff);
    var x452: u32 = undefined;
    var x453: u1 = undefined;
    addcarryxU32(&x452, &x453, 0x0, x451, x448);
    var x454: u32 = undefined;
    var x455: u1 = undefined;
    addcarryxU32(&x454, &x455, x453, x449, x446);
    const x456 = (cast(u32, x455) + x447);
    var x457: u32 = undefined;
    var x458: u1 = undefined;
    addcarryxU32(&x457, &x458, 0x0, x426, x450);
    var x459: u32 = undefined;
    var x460: u1 = undefined;
    addcarryxU32(&x459, &x460, x458, x428, x452);
    var x461: u32 = undefined;
    var x462: u1 = undefined;
    addcarryxU32(&x461, &x462, x460, x430, x454);
    var x463: u32 = undefined;
    var x464: u1 = undefined;
    addcarryxU32(&x463, &x464, x462, x432, x456);
    var x465: u32 = undefined;
    var x466: u1 = undefined;
    addcarryxU32(&x465, &x466, x464, x434, cast(u32, 0x0));
    var x467: u32 = undefined;
    var x468: u1 = undefined;
    addcarryxU32(&x467, &x468, x466, x436, cast(u32, 0x0));
    var x469: u32 = undefined;
    var x470: u1 = undefined;
    addcarryxU32(&x469, &x470, x468, x438, x426);
    var x471: u32 = undefined;
    var x472: u1 = undefined;
    addcarryxU32(&x471, &x472, x470, x440, x444);
    var x473: u32 = undefined;
    var x474: u1 = undefined;
    addcarryxU32(&x473, &x474, x472, x442, x445);
    const x475 = (cast(u32, x474) + cast(u32, x443));
    var x476: u32 = undefined;
    var x477: u32 = undefined;
    mulxU32(&x476, &x477, x6, (arg1[7]));
    var x478: u32 = undefined;
    var x479: u32 = undefined;
    mulxU32(&x478, &x479, x6, (arg1[6]));
    var x480: u32 = undefined;
    var x481: u32 = undefined;
    mulxU32(&x480, &x481, x6, (arg1[5]));
    var x482: u32 = undefined;
    var x483: u32 = undefined;
    mulxU32(&x482, &x483, x6, (arg1[4]));
    var x484: u32 = undefined;
    var x485: u32 = undefined;
    mulxU32(&x484, &x485, x6, (arg1[3]));
    var x486: u32 = undefined;
    var x487: u32 = undefined;
    mulxU32(&x486, &x487, x6, (arg1[2]));
    var x488: u32 = undefined;
    var x489: u32 = undefined;
    mulxU32(&x488, &x489, x6, (arg1[1]));
    var x490: u32 = undefined;
    var x491: u32 = undefined;
    mulxU32(&x490, &x491, x6, (arg1[0]));
    var x492: u32 = undefined;
    var x493: u1 = undefined;
    addcarryxU32(&x492, &x493, 0x0, x491, x488);
    var x494: u32 = undefined;
    var x495: u1 = undefined;
    addcarryxU32(&x494, &x495, x493, x489, x486);
    var x496: u32 = undefined;
    var x497: u1 = undefined;
    addcarryxU32(&x496, &x497, x495, x487, x484);
    var x498: u32 = undefined;
    var x499: u1 = undefined;
    addcarryxU32(&x498, &x499, x497, x485, x482);
    var x500: u32 = undefined;
    var x501: u1 = undefined;
    addcarryxU32(&x500, &x501, x499, x483, x480);
    var x502: u32 = undefined;
    var x503: u1 = undefined;
    addcarryxU32(&x502, &x503, x501, x481, x478);
    var x504: u32 = undefined;
    var x505: u1 = undefined;
    addcarryxU32(&x504, &x505, x503, x479, x476);
    const x506 = (cast(u32, x505) + x477);
    var x507: u32 = undefined;
    var x508: u1 = undefined;
    addcarryxU32(&x507, &x508, 0x0, x459, x490);
    var x509: u32 = undefined;
    var x510: u1 = undefined;
    addcarryxU32(&x509, &x510, x508, x461, x492);
    var x511: u32 = undefined;
    var x512: u1 = undefined;
    addcarryxU32(&x511, &x512, x510, x463, x494);
    var x513: u32 = undefined;
    var x514: u1 = undefined;
    addcarryxU32(&x513, &x514, x512, x465, x496);
    var x515: u32 = undefined;
    var x516: u1 = undefined;
    addcarryxU32(&x515, &x516, x514, x467, x498);
    var x517: u32 = undefined;
    var x518: u1 = undefined;
    addcarryxU32(&x517, &x518, x516, x469, x500);
    var x519: u32 = undefined;
    var x520: u1 = undefined;
    addcarryxU32(&x519, &x520, x518, x471, x502);
    var x521: u32 = undefined;
    var x522: u1 = undefined;
    addcarryxU32(&x521, &x522, x520, x473, x504);
    var x523: u32 = undefined;
    var x524: u1 = undefined;
    addcarryxU32(&x523, &x524, x522, x475, x506);
    var x525: u32 = undefined;
    var x526: u32 = undefined;
    mulxU32(&x525, &x526, x507, 0xffffffff);
    var x527: u32 = undefined;
    var x528: u32 = undefined;
    mulxU32(&x527, &x528, x507, 0xffffffff);
    var x529: u32 = undefined;
    var x530: u32 = undefined;
    mulxU32(&x529, &x530, x507, 0xffffffff);
    var x531: u32 = undefined;
    var x532: u32 = undefined;
    mulxU32(&x531, &x532, x507, 0xffffffff);
    var x533: u32 = undefined;
    var x534: u1 = undefined;
    addcarryxU32(&x533, &x534, 0x0, x532, x529);
    var x535: u32 = undefined;
    var x536: u1 = undefined;
    addcarryxU32(&x535, &x536, x534, x530, x527);
    const x537 = (cast(u32, x536) + x528);
    var x538: u32 = undefined;
    var x539: u1 = undefined;
    addcarryxU32(&x538, &x539, 0x0, x507, x531);
    var x540: u32 = undefined;
    var x541: u1 = undefined;
    addcarryxU32(&x540, &x541, x539, x509, x533);
    var x542: u32 = undefined;
    var x543: u1 = undefined;
    addcarryxU32(&x542, &x543, x541, x511, x535);
    var x544: u32 = undefined;
    var x545: u1 = undefined;
    addcarryxU32(&x544, &x545, x543, x513, x537);
    var x546: u32 = undefined;
    var x547: u1 = undefined;
    addcarryxU32(&x546, &x547, x545, x515, cast(u32, 0x0));
    var x548: u32 = undefined;
    var x549: u1 = undefined;
    addcarryxU32(&x548, &x549, x547, x517, cast(u32, 0x0));
    var x550: u32 = undefined;
    var x551: u1 = undefined;
    addcarryxU32(&x550, &x551, x549, x519, x507);
    var x552: u32 = undefined;
    var x553: u1 = undefined;
    addcarryxU32(&x552, &x553, x551, x521, x525);
    var x554: u32 = undefined;
    var x555: u1 = undefined;
    addcarryxU32(&x554, &x555, x553, x523, x526);
    const x556 = (cast(u32, x555) + cast(u32, x524));
    var x557: u32 = undefined;
    var x558: u32 = undefined;
    mulxU32(&x557, &x558, x7, (arg1[7]));
    var x559: u32 = undefined;
    var x560: u32 = undefined;
    mulxU32(&x559, &x560, x7, (arg1[6]));
    var x561: u32 = undefined;
    var x562: u32 = undefined;
    mulxU32(&x561, &x562, x7, (arg1[5]));
    var x563: u32 = undefined;
    var x564: u32 = undefined;
    mulxU32(&x563, &x564, x7, (arg1[4]));
    var x565: u32 = undefined;
    var x566: u32 = undefined;
    mulxU32(&x565, &x566, x7, (arg1[3]));
    var x567: u32 = undefined;
    var x568: u32 = undefined;
    mulxU32(&x567, &x568, x7, (arg1[2]));
    var x569: u32 = undefined;
    var x570: u32 = undefined;
    mulxU32(&x569, &x570, x7, (arg1[1]));
    var x571: u32 = undefined;
    var x572: u32 = undefined;
    mulxU32(&x571, &x572, x7, (arg1[0]));
    var x573: u32 = undefined;
    var x574: u1 = undefined;
    addcarryxU32(&x573, &x574, 0x0, x572, x569);
    var x575: u32 = undefined;
    var x576: u1 = undefined;
    addcarryxU32(&x575, &x576, x574, x570, x567);
    var x577: u32 = undefined;
    var x578: u1 = undefined;
    addcarryxU32(&x577, &x578, x576, x568, x565);
    var x579: u32 = undefined;
    var x580: u1 = undefined;
    addcarryxU32(&x579, &x580, x578, x566, x563);
    var x581: u32 = undefined;
    var x582: u1 = undefined;
    addcarryxU32(&x581, &x582, x580, x564, x561);
    var x583: u32 = undefined;
    var x584: u1 = undefined;
    addcarryxU32(&x583, &x584, x582, x562, x559);
    var x585: u32 = undefined;
    var x586: u1 = undefined;
    addcarryxU32(&x585, &x586, x584, x560, x557);
    const x587 = (cast(u32, x586) + x558);
    var x588: u32 = undefined;
    var x589: u1 = undefined;
    addcarryxU32(&x588, &x589, 0x0, x540, x571);
    var x590: u32 = undefined;
    var x591: u1 = undefined;
    addcarryxU32(&x590, &x591, x589, x542, x573);
    var x592: u32 = undefined;
    var x593: u1 = undefined;
    addcarryxU32(&x592, &x593, x591, x544, x575);
    var x594: u32 = undefined;
    var x595: u1 = undefined;
    addcarryxU32(&x594, &x595, x593, x546, x577);
    var x596: u32 = undefined;
    var x597: u1 = undefined;
    addcarryxU32(&x596, &x597, x595, x548, x579);
    var x598: u32 = undefined;
    var x599: u1 = undefined;
    addcarryxU32(&x598, &x599, x597, x550, x581);
    var x600: u32 = undefined;
    var x601: u1 = undefined;
    addcarryxU32(&x600, &x601, x599, x552, x583);
    var x602: u32 = undefined;
    var x603: u1 = undefined;
    addcarryxU32(&x602, &x603, x601, x554, x585);
    var x604: u32 = undefined;
    var x605: u1 = undefined;
    addcarryxU32(&x604, &x605, x603, x556, x587);
    var x606: u32 = undefined;
    var x607: u32 = undefined;
    mulxU32(&x606, &x607, x588, 0xffffffff);
    var x608: u32 = undefined;
    var x609: u32 = undefined;
    mulxU32(&x608, &x609, x588, 0xffffffff);
    var x610: u32 = undefined;
    var x611: u32 = undefined;
    mulxU32(&x610, &x611, x588, 0xffffffff);
    var x612: u32 = undefined;
    var x613: u32 = undefined;
    mulxU32(&x612, &x613, x588, 0xffffffff);
    var x614: u32 = undefined;
    var x615: u1 = undefined;
    addcarryxU32(&x614, &x615, 0x0, x613, x610);
    var x616: u32 = undefined;
    var x617: u1 = undefined;
    addcarryxU32(&x616, &x617, x615, x611, x608);
    const x618 = (cast(u32, x617) + x609);
    var x619: u32 = undefined;
    var x620: u1 = undefined;
    addcarryxU32(&x619, &x620, 0x0, x588, x612);
    var x621: u32 = undefined;
    var x622: u1 = undefined;
    addcarryxU32(&x621, &x622, x620, x590, x614);
    var x623: u32 = undefined;
    var x624: u1 = undefined;
    addcarryxU32(&x623, &x624, x622, x592, x616);
    var x625: u32 = undefined;
    var x626: u1 = undefined;
    addcarryxU32(&x625, &x626, x624, x594, x618);
    var x627: u32 = undefined;
    var x628: u1 = undefined;
    addcarryxU32(&x627, &x628, x626, x596, cast(u32, 0x0));
    var x629: u32 = undefined;
    var x630: u1 = undefined;
    addcarryxU32(&x629, &x630, x628, x598, cast(u32, 0x0));
    var x631: u32 = undefined;
    var x632: u1 = undefined;
    addcarryxU32(&x631, &x632, x630, x600, x588);
    var x633: u32 = undefined;
    var x634: u1 = undefined;
    addcarryxU32(&x633, &x634, x632, x602, x606);
    var x635: u32 = undefined;
    var x636: u1 = undefined;
    addcarryxU32(&x635, &x636, x634, x604, x607);
    const x637 = (cast(u32, x636) + cast(u32, x605));
    var x638: u32 = undefined;
    var x639: u1 = undefined;
    subborrowxU32(&x638, &x639, 0x0, x621, 0xffffffff);
    var x640: u32 = undefined;
    var x641: u1 = undefined;
    subborrowxU32(&x640, &x641, x639, x623, 0xffffffff);
    var x642: u32 = undefined;
    var x643: u1 = undefined;
    subborrowxU32(&x642, &x643, x641, x625, 0xffffffff);
    var x644: u32 = undefined;
    var x645: u1 = undefined;
    subborrowxU32(&x644, &x645, x643, x627, cast(u32, 0x0));
    var x646: u32 = undefined;
    var x647: u1 = undefined;
    subborrowxU32(&x646, &x647, x645, x629, cast(u32, 0x0));
    var x648: u32 = undefined;
    var x649: u1 = undefined;
    subborrowxU32(&x648, &x649, x647, x631, cast(u32, 0x0));
    var x650: u32 = undefined;
    var x651: u1 = undefined;
    subborrowxU32(&x650, &x651, x649, x633, cast(u32, 0x1));
    var x652: u32 = undefined;
    var x653: u1 = undefined;
    subborrowxU32(&x652, &x653, x651, x635, 0xffffffff);
    var x654: u32 = undefined;
    var x655: u1 = undefined;
    subborrowxU32(&x654, &x655, x653, x637, cast(u32, 0x0));
    var x656: u32 = undefined;
    cmovznzU32(&x656, x655, x638, x621);
    var x657: u32 = undefined;
    cmovznzU32(&x657, x655, x640, x623);
    var x658: u32 = undefined;
    cmovznzU32(&x658, x655, x642, x625);
    var x659: u32 = undefined;
    cmovznzU32(&x659, x655, x644, x627);
    var x660: u32 = undefined;
    cmovznzU32(&x660, x655, x646, x629);
    var x661: u32 = undefined;
    cmovznzU32(&x661, x655, x648, x631);
    var x662: u32 = undefined;
    cmovznzU32(&x662, x655, x650, x633);
    var x663: u32 = undefined;
    cmovznzU32(&x663, x655, x652, x635);
    out1[0] = x656;
    out1[1] = x657;
    out1[2] = x658;
    out1[3] = x659;
    out1[4] = x660;
    out1[5] = x661;
    out1[6] = x662;
    out1[7] = x663;
}

/// The function add adds two field elements in the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
///   0 ≤ eval arg2 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
///   0 ≤ eval out1 < m
///
pub fn add(out1: *MontgomeryDomainFieldElement, arg1: MontgomeryDomainFieldElement, arg2: MontgomeryDomainFieldElement) void {
    @setRuntimeSafety(mode == .Debug);

    var x1: u32 = undefined;
    var x2: u1 = undefined;
    addcarryxU32(&x1, &x2, 0x0, (arg1[0]), (arg2[0]));
    var x3: u32 = undefined;
    var x4: u1 = undefined;
    addcarryxU32(&x3, &x4, x2, (arg1[1]), (arg2[1]));
    var x5: u32 = undefined;
    var x6: u1 = undefined;
    addcarryxU32(&x5, &x6, x4, (arg1[2]), (arg2[2]));
    var x7: u32 = undefined;
    var x8: u1 = undefined;
    addcarryxU32(&x7, &x8, x6, (arg1[3]), (arg2[3]));
    var x9: u32 = undefined;
    var x10: u1 = undefined;
    addcarryxU32(&x9, &x10, x8, (arg1[4]), (arg2[4]));
    var x11: u32 = undefined;
    var x12: u1 = undefined;
    addcarryxU32(&x11, &x12, x10, (arg1[5]), (arg2[5]));
    var x13: u32 = undefined;
    var x14: u1 = undefined;
    addcarryxU32(&x13, &x14, x12, (arg1[6]), (arg2[6]));
    var x15: u32 = undefined;
    var x16: u1 = undefined;
    addcarryxU32(&x15, &x16, x14, (arg1[7]), (arg2[7]));
    var x17: u32 = undefined;
    var x18: u1 = undefined;
    subborrowxU32(&x17, &x18, 0x0, x1, 0xffffffff);
    var x19: u32 = undefined;
    var x20: u1 = undefined;
    subborrowxU32(&x19, &x20, x18, x3, 0xffffffff);
    var x21: u32 = undefined;
    var x22: u1 = undefined;
    subborrowxU32(&x21, &x22, x20, x5, 0xffffffff);
    var x23: u32 = undefined;
    var x24: u1 = undefined;
    subborrowxU32(&x23, &x24, x22, x7, cast(u32, 0x0));
    var x25: u32 = undefined;
    var x26: u1 = undefined;
    subborrowxU32(&x25, &x26, x24, x9, cast(u32, 0x0));
    var x27: u32 = undefined;
    var x28: u1 = undefined;
    subborrowxU32(&x27, &x28, x26, x11, cast(u32, 0x0));
    var x29: u32 = undefined;
    var x30: u1 = undefined;
    subborrowxU32(&x29, &x30, x28, x13, cast(u32, 0x1));
    var x31: u32 = undefined;
    var x32: u1 = undefined;
    subborrowxU32(&x31, &x32, x30, x15, 0xffffffff);
    var x33: u32 = undefined;
    var x34: u1 = undefined;
    subborrowxU32(&x33, &x34, x32, cast(u32, x16), cast(u32, 0x0));
    var x35: u32 = undefined;
    cmovznzU32(&x35, x34, x17, x1);
    var x36: u32 = undefined;
    cmovznzU32(&x36, x34, x19, x3);
    var x37: u32 = undefined;
    cmovznzU32(&x37, x34, x21, x5);
    var x38: u32 = undefined;
    cmovznzU32(&x38, x34, x23, x7);
    var x39: u32 = undefined;
    cmovznzU32(&x39, x34, x25, x9);
    var x40: u32 = undefined;
    cmovznzU32(&x40, x34, x27, x11);
    var x41: u32 = undefined;
    cmovznzU32(&x41, x34, x29, x13);
    var x42: u32 = undefined;
    cmovznzU32(&x42, x34, x31, x15);
    out1[0] = x35;
    out1[1] = x36;
    out1[2] = x37;
    out1[3] = x38;
    out1[4] = x39;
    out1[5] = x40;
    out1[6] = x41;
    out1[7] = x42;
}

/// The function sub subtracts two field elements in the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
///   0 ≤ eval arg2 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
///   0 ≤ eval out1 < m
///
pub fn sub(out1: *MontgomeryDomainFieldElement, arg1: MontgomeryDomainFieldElement, arg2: MontgomeryDomainFieldElement) void {
    @setRuntimeSafety(mode == .Debug);

    var x1: u32 = undefined;
    var x2: u1 = undefined;
    subborrowxU32(&x1, &x2, 0x0, (arg1[0]), (arg2[0]));
    var x3: u32 = undefined;
    var x4: u1 = undefined;
    subborrowxU32(&x3, &x4, x2, (arg1[1]), (arg2[1]));
    var x5: u32 = undefined;
    var x6: u1 = undefined;
    subborrowxU32(&x5, &x6, x4, (arg1[2]), (arg2[2]));
    var x7: u32 = undefined;
    var x8: u1 = undefined;
    subborrowxU32(&x7, &x8, x6, (arg1[3]), (arg2[3]));
    var x9: u32 = undefined;
    var x10: u1 = undefined;
    subborrowxU32(&x9, &x10, x8, (arg1[4]), (arg2[4]));
    var x11: u32 = undefined;
    var x12: u1 = undefined;
    subborrowxU32(&x11, &x12, x10, (arg1[5]), (arg2[5]));
    var x13: u32 = undefined;
    var x14: u1 = undefined;
    subborrowxU32(&x13, &x14, x12, (arg1[6]), (arg2[6]));
    var x15: u32 = undefined;
    var x16: u1 = undefined;
    subborrowxU32(&x15, &x16, x14, (arg1[7]), (arg2[7]));
    var x17: u32 = undefined;
    cmovznzU32(&x17, x16, cast(u32, 0x0), 0xffffffff);
    var x18: u32 = undefined;
    var x19: u1 = undefined;
    addcarryxU32(&x18, &x19, 0x0, x1, x17);
    var x20: u32 = undefined;
    var x21: u1 = undefined;
    addcarryxU32(&x20, &x21, x19, x3, x17);
    var x22: u32 = undefined;
    var x23: u1 = undefined;
    addcarryxU32(&x22, &x23, x21, x5, x17);
    var x24: u32 = undefined;
    var x25: u1 = undefined;
    addcarryxU32(&x24, &x25, x23, x7, cast(u32, 0x0));
    var x26: u32 = undefined;
    var x27: u1 = undefined;
    addcarryxU32(&x26, &x27, x25, x9, cast(u32, 0x0));
    var x28: u32 = undefined;
    var x29: u1 = undefined;
    addcarryxU32(&x28, &x29, x27, x11, cast(u32, 0x0));
    var x30: u32 = undefined;
    var x31: u1 = undefined;
    addcarryxU32(&x30, &x31, x29, x13, cast(u32, cast(u1, (x17 & cast(u32, 0x1)))));
    var x32: u32 = undefined;
    var x33: u1 = undefined;
    addcarryxU32(&x32, &x33, x31, x15, x17);
    out1[0] = x18;
    out1[1] = x20;
    out1[2] = x22;
    out1[3] = x24;
    out1[4] = x26;
    out1[5] = x28;
    out1[6] = x30;
    out1[7] = x32;
}

/// The function opp negates a field element in the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
///   0 ≤ eval out1 < m
///
pub fn opp(out1: *MontgomeryDomainFieldElement, arg1: MontgomeryDomainFieldElement) void {
    @setRuntimeSafety(mode == .Debug);

    var x1: u32 = undefined;
    var x2: u1 = undefined;
    subborrowxU32(&x1, &x2, 0x0, cast(u32, 0x0), (arg1[0]));
    var x3: u32 = undefined;
    var x4: u1 = undefined;
    subborrowxU32(&x3, &x4, x2, cast(u32, 0x0), (arg1[1]));
    var x5: u32 = undefined;
    var x6: u1 = undefined;
    subborrowxU32(&x5, &x6, x4, cast(u32, 0x0), (arg1[2]));
    var x7: u32 = undefined;
    var x8: u1 = undefined;
    subborrowxU32(&x7, &x8, x6, cast(u32, 0x0), (arg1[3]));
    var x9: u32 = undefined;
    var x10: u1 = undefined;
    subborrowxU32(&x9, &x10, x8, cast(u32, 0x0), (arg1[4]));
    var x11: u32 = undefined;
    var x12: u1 = undefined;
    subborrowxU32(&x11, &x12, x10, cast(u32, 0x0), (arg1[5]));
    var x13: u32 = undefined;
    var x14: u1 = undefined;
    subborrowxU32(&x13, &x14, x12, cast(u32, 0x0), (arg1[6]));
    var x15: u32 = undefined;
    var x16: u1 = undefined;
    subborrowxU32(&x15, &x16, x14, cast(u32, 0x0), (arg1[7]));
    var x17: u32 = undefined;
    cmovznzU32(&x17, x16, cast(u32, 0x0), 0xffffffff);
    var x18: u32 = undefined;
    var x19: u1 = undefined;
    addcarryxU32(&x18, &x19, 0x0, x1, x17);
    var x20: u32 = undefined;
    var x21: u1 = undefined;
    addcarryxU32(&x20, &x21, x19, x3, x17);
    var x22: u32 = undefined;
    var x23: u1 = undefined;
    addcarryxU32(&x22, &x23, x21, x5, x17);
    var x24: u32 = undefined;
    var x25: u1 = undefined;
    addcarryxU32(&x24, &x25, x23, x7, cast(u32, 0x0));
    var x26: u32 = undefined;
    var x27: u1 = undefined;
    addcarryxU32(&x26, &x27, x25, x9, cast(u32, 0x0));
    var x28: u32 = undefined;
    var x29: u1 = undefined;
    addcarryxU32(&x28, &x29, x27, x11, cast(u32, 0x0));
    var x30: u32 = undefined;
    var x31: u1 = undefined;
    addcarryxU32(&x30, &x31, x29, x13, cast(u32, cast(u1, (x17 & cast(u32, 0x1)))));
    var x32: u32 = undefined;
    var x33: u1 = undefined;
    addcarryxU32(&x32, &x33, x31, x15, x17);
    out1[0] = x18;
    out1[1] = x20;
    out1[2] = x22;
    out1[3] = x24;
    out1[4] = x26;
    out1[5] = x28;
    out1[6] = x30;
    out1[7] = x32;
}

/// The function fromMontgomery translates a field element out of the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval out1 mod m = (eval arg1 * ((2^32)⁻¹ mod m)^8) mod m
///   0 ≤ eval out1 < m
///
pub fn fromMontgomery(out1: *NonMontgomeryDomainFieldElement, arg1: MontgomeryDomainFieldElement) void {
    @setRuntimeSafety(mode == .Debug);

    const x1 = (arg1[0]);
    var x2: u32 = undefined;
    var x3: u32 = undefined;
    mulxU32(&x2, &x3, x1, 0xffffffff);
    var x4: u32 = undefined;
    var x5: u32 = undefined;
    mulxU32(&x4, &x5, x1, 0xffffffff);
    var x6: u32 = undefined;
    var x7: u32 = undefined;
    mulxU32(&x6, &x7, x1, 0xffffffff);
    var x8: u32 = undefined;
    var x9: u32 = undefined;
    mulxU32(&x8, &x9, x1, 0xffffffff);
    var x10: u32 = undefined;
    var x11: u1 = undefined;
    addcarryxU32(&x10, &x11, 0x0, x9, x6);
    var x12: u32 = undefined;
    var x13: u1 = undefined;
    addcarryxU32(&x12, &x13, x11, x7, x4);
    var x14: u32 = undefined;
    var x15: u1 = undefined;
    addcarryxU32(&x14, &x15, 0x0, x1, x8);
    var x16: u32 = undefined;
    var x17: u1 = undefined;
    addcarryxU32(&x16, &x17, x15, cast(u32, 0x0), x10);
    var x18: u32 = undefined;
    var x19: u1 = undefined;
    addcarryxU32(&x18, &x19, x17, cast(u32, 0x0), x12);
    var x20: u32 = undefined;
    var x21: u1 = undefined;
    addcarryxU32(&x20, &x21, x19, cast(u32, 0x0), (cast(u32, x13) + x5));
    var x22: u32 = undefined;
    var x23: u1 = undefined;
    addcarryxU32(&x22, &x23, 0x0, x16, (arg1[1]));
    var x24: u32 = undefined;
    var x25: u1 = undefined;
    addcarryxU32(&x24, &x25, x23, x18, cast(u32, 0x0));
    var x26: u32 = undefined;
    var x27: u1 = undefined;
    addcarryxU32(&x26, &x27, x25, x20, cast(u32, 0x0));
    var x28: u32 = undefined;
    var x29: u32 = undefined;
    mulxU32(&x28, &x29, x22, 0xffffffff);
    var x30: u32 = undefined;
    var x31: u32 = undefined;
    mulxU32(&x30, &x31, x22, 0xffffffff);
    var x32: u32 = undefined;
    var x33: u32 = undefined;
    mulxU32(&x32, &x33, x22, 0xffffffff);
    var x34: u32 = undefined;
    var x35: u32 = undefined;
    mulxU32(&x34, &x35, x22, 0xffffffff);
    var x36: u32 = undefined;
    var x37: u1 = undefined;
    addcarryxU32(&x36, &x37, 0x0, x35, x32);
    var x38: u32 = undefined;
    var x39: u1 = undefined;
    addcarryxU32(&x38, &x39, x37, x33, x30);
    var x40: u32 = undefined;
    var x41: u1 = undefined;
    addcarryxU32(&x40, &x41, 0x0, x22, x34);
    var x42: u32 = undefined;
    var x43: u1 = undefined;
    addcarryxU32(&x42, &x43, x41, x24, x36);
    var x44: u32 = undefined;
    var x45: u1 = undefined;
    addcarryxU32(&x44, &x45, x43, x26, x38);
    var x46: u32 = undefined;
    var x47: u1 = undefined;
    addcarryxU32(&x46, &x47, x45, (cast(u32, x27) + cast(u32, x21)), (cast(u32, x39) + x31));
    var x48: u32 = undefined;
    var x49: u1 = undefined;
    addcarryxU32(&x48, &x49, 0x0, x2, x22);
    var x50: u32 = undefined;
    var x51: u1 = undefined;
    addcarryxU32(&x50, &x51, x49, x3, x28);
    var x52: u32 = undefined;
    var x53: u1 = undefined;
    addcarryxU32(&x52, &x53, 0x0, x42, (arg1[2]));
    var x54: u32 = undefined;
    var x55: u1 = undefined;
    addcarryxU32(&x54, &x55, x53, x44, cast(u32, 0x0));
    var x56: u32 = undefined;
    var x57: u1 = undefined;
    addcarryxU32(&x56, &x57, x55, x46, cast(u32, 0x0));
    var x58: u32 = undefined;
    var x59: u32 = undefined;
    mulxU32(&x58, &x59, x52, 0xffffffff);
    var x60: u32 = undefined;
    var x61: u32 = undefined;
    mulxU32(&x60, &x61, x52, 0xffffffff);
    var x62: u32 = undefined;
    var x63: u32 = undefined;
    mulxU32(&x62, &x63, x52, 0xffffffff);
    var x64: u32 = undefined;
    var x65: u32 = undefined;
    mulxU32(&x64, &x65, x52, 0xffffffff);
    var x66: u32 = undefined;
    var x67: u1 = undefined;
    addcarryxU32(&x66, &x67, 0x0, x65, x62);
    var x68: u32 = undefined;
    var x69: u1 = undefined;
    addcarryxU32(&x68, &x69, x67, x63, x60);
    var x70: u32 = undefined;
    var x71: u1 = undefined;
    addcarryxU32(&x70, &x71, 0x0, x52, x64);
    var x72: u32 = undefined;
    var x73: u1 = undefined;
    addcarryxU32(&x72, &x73, x71, x54, x66);
    var x74: u32 = undefined;
    var x75: u1 = undefined;
    addcarryxU32(&x74, &x75, x73, x56, x68);
    var x76: u32 = undefined;
    var x77: u1 = undefined;
    addcarryxU32(&x76, &x77, x75, (cast(u32, x57) + cast(u32, x47)), (cast(u32, x69) + x61));
    var x78: u32 = undefined;
    var x79: u1 = undefined;
    addcarryxU32(&x78, &x79, x77, x1, cast(u32, 0x0));
    var x80: u32 = undefined;
    var x81: u1 = undefined;
    addcarryxU32(&x80, &x81, x79, x48, cast(u32, 0x0));
    var x82: u32 = undefined;
    var x83: u1 = undefined;
    addcarryxU32(&x82, &x83, x81, x50, x52);
    var x84: u32 = undefined;
    var x85: u1 = undefined;
    addcarryxU32(&x84, &x85, x83, (cast(u32, x51) + x29), x58);
    var x86: u32 = undefined;
    var x87: u1 = undefined;
    addcarryxU32(&x86, &x87, 0x0, x72, (arg1[3]));
    var x88: u32 = undefined;
    var x89: u1 = undefined;
    addcarryxU32(&x88, &x89, x87, x74, cast(u32, 0x0));
    var x90: u32 = undefined;
    var x91: u1 = undefined;
    addcarryxU32(&x90, &x91, x89, x76, cast(u32, 0x0));
    var x92: u32 = undefined;
    var x93: u1 = undefined;
    addcarryxU32(&x92, &x93, x91, x78, cast(u32, 0x0));
    var x94: u32 = undefined;
    var x95: u1 = undefined;
    addcarryxU32(&x94, &x95, x93, x80, cast(u32, 0x0));
    var x96: u32 = undefined;
    var x97: u1 = undefined;
    addcarryxU32(&x96, &x97, x95, x82, cast(u32, 0x0));
    var x98: u32 = undefined;
    var x99: u1 = undefined;
    addcarryxU32(&x98, &x99, x97, x84, cast(u32, 0x0));
    var x100: u32 = undefined;
    var x101: u1 = undefined;
    addcarryxU32(&x100, &x101, x99, (cast(u32, x85) + x59), cast(u32, 0x0));
    var x102: u32 = undefined;
    var x103: u32 = undefined;
    mulxU32(&x102, &x103, x86, 0xffffffff);
    var x104: u32 = undefined;
    var x105: u32 = undefined;
    mulxU32(&x104, &x105, x86, 0xffffffff);
    var x106: u32 = undefined;
    var x107: u32 = undefined;
    mulxU32(&x106, &x107, x86, 0xffffffff);
    var x108: u32 = undefined;
    var x109: u32 = undefined;
    mulxU32(&x108, &x109, x86, 0xffffffff);
    var x110: u32 = undefined;
    var x111: u1 = undefined;
    addcarryxU32(&x110, &x111, 0x0, x109, x106);
    var x112: u32 = undefined;
    var x113: u1 = undefined;
    addcarryxU32(&x112, &x113, x111, x107, x104);
    var x114: u32 = undefined;
    var x115: u1 = undefined;
    addcarryxU32(&x114, &x115, 0x0, x86, x108);
    var x116: u32 = undefined;
    var x117: u1 = undefined;
    addcarryxU32(&x116, &x117, x115, x88, x110);
    var x118: u32 = undefined;
    var x119: u1 = undefined;
    addcarryxU32(&x118, &x119, x117, x90, x112);
    var x120: u32 = undefined;
    var x121: u1 = undefined;
    addcarryxU32(&x120, &x121, x119, x92, (cast(u32, x113) + x105));
    var x122: u32 = undefined;
    var x123: u1 = undefined;
    addcarryxU32(&x122, &x123, x121, x94, cast(u32, 0x0));
    var x124: u32 = undefined;
    var x125: u1 = undefined;
    addcarryxU32(&x124, &x125, x123, x96, cast(u32, 0x0));
    var x126: u32 = undefined;
    var x127: u1 = undefined;
    addcarryxU32(&x126, &x127, x125, x98, x86);
    var x128: u32 = undefined;
    var x129: u1 = undefined;
    addcarryxU32(&x128, &x129, x127, x100, x102);
    var x130: u32 = undefined;
    var x131: u1 = undefined;
    addcarryxU32(&x130, &x131, x129, cast(u32, x101), x103);
    var x132: u32 = undefined;
    var x133: u1 = undefined;
    addcarryxU32(&x132, &x133, 0x0, x116, (arg1[4]));
    var x134: u32 = undefined;
    var x135: u1 = undefined;
    addcarryxU32(&x134, &x135, x133, x118, cast(u32, 0x0));
    var x136: u32 = undefined;
    var x137: u1 = undefined;
    addcarryxU32(&x136, &x137, x135, x120, cast(u32, 0x0));
    var x138: u32 = undefined;
    var x139: u1 = undefined;
    addcarryxU32(&x138, &x139, x137, x122, cast(u32, 0x0));
    var x140: u32 = undefined;
    var x141: u1 = undefined;
    addcarryxU32(&x140, &x141, x139, x124, cast(u32, 0x0));
    var x142: u32 = undefined;
    var x143: u1 = undefined;
    addcarryxU32(&x142, &x143, x141, x126, cast(u32, 0x0));
    var x144: u32 = undefined;
    var x145: u1 = undefined;
    addcarryxU32(&x144, &x145, x143, x128, cast(u32, 0x0));
    var x146: u32 = undefined;
    var x147: u1 = undefined;
    addcarryxU32(&x146, &x147, x145, x130, cast(u32, 0x0));
    var x148: u32 = undefined;
    var x149: u32 = undefined;
    mulxU32(&x148, &x149, x132, 0xffffffff);
    var x150: u32 = undefined;
    var x151: u32 = undefined;
    mulxU32(&x150, &x151, x132, 0xffffffff);
    var x152: u32 = undefined;
    var x153: u32 = undefined;
    mulxU32(&x152, &x153, x132, 0xffffffff);
    var x154: u32 = undefined;
    var x155: u32 = undefined;
    mulxU32(&x154, &x155, x132, 0xffffffff);
    var x156: u32 = undefined;
    var x157: u1 = undefined;
    addcarryxU32(&x156, &x157, 0x0, x155, x152);
    var x158: u32 = undefined;
    var x159: u1 = undefined;
    addcarryxU32(&x158, &x159, x157, x153, x150);
    var x160: u32 = undefined;
    var x161: u1 = undefined;
    addcarryxU32(&x160, &x161, 0x0, x132, x154);
    var x162: u32 = undefined;
    var x163: u1 = undefined;
    addcarryxU32(&x162, &x163, x161, x134, x156);
    var x164: u32 = undefined;
    var x165: u1 = undefined;
    addcarryxU32(&x164, &x165, x163, x136, x158);
    var x166: u32 = undefined;
    var x167: u1 = undefined;
    addcarryxU32(&x166, &x167, x165, x138, (cast(u32, x159) + x151));
    var x168: u32 = undefined;
    var x169: u1 = undefined;
    addcarryxU32(&x168, &x169, x167, x140, cast(u32, 0x0));
    var x170: u32 = undefined;
    var x171: u1 = undefined;
    addcarryxU32(&x170, &x171, x169, x142, cast(u32, 0x0));
    var x172: u32 = undefined;
    var x173: u1 = undefined;
    addcarryxU32(&x172, &x173, x171, x144, x132);
    var x174: u32 = undefined;
    var x175: u1 = undefined;
    addcarryxU32(&x174, &x175, x173, x146, x148);
    var x176: u32 = undefined;
    var x177: u1 = undefined;
    addcarryxU32(&x176, &x177, x175, (cast(u32, x147) + cast(u32, x131)), x149);
    var x178: u32 = undefined;
    var x179: u1 = undefined;
    addcarryxU32(&x178, &x179, 0x0, x162, (arg1[5]));
    var x180: u32 = undefined;
    var x181: u1 = undefined;
    addcarryxU32(&x180, &x181, x179, x164, cast(u32, 0x0));
    var x182: u32 = undefined;
    var x183: u1 = undefined;
    addcarryxU32(&x182, &x183, x181, x166, cast(u32, 0x0));
    var x184: u32 = undefined;
    var x185: u1 = undefined;
    addcarryxU32(&x184, &x185, x183, x168, cast(u32, 0x0));
    var x186: u32 = undefined;
    var x187: u1 = undefined;
    addcarryxU32(&x186, &x187, x185, x170, cast(u32, 0x0));
    var x188: u32 = undefined;
    var x189: u1 = undefined;
    addcarryxU32(&x188, &x189, x187, x172, cast(u32, 0x0));
    var x190: u32 = undefined;
    var x191: u1 = undefined;
    addcarryxU32(&x190, &x191, x189, x174, cast(u32, 0x0));
    var x192: u32 = undefined;
    var x193: u1 = undefined;
    addcarryxU32(&x192, &x193, x191, x176, cast(u32, 0x0));
    var x194: u32 = undefined;
    var x195: u32 = undefined;
    mulxU32(&x194, &x195, x178, 0xffffffff);
    var x196: u32 = undefined;
    var x197: u32 = undefined;
    mulxU32(&x196, &x197, x178, 0xffffffff);
    var x198: u32 = undefined;
    var x199: u32 = undefined;
    mulxU32(&x198, &x199, x178, 0xffffffff);
    var x200: u32 = undefined;
    var x201: u32 = undefined;
    mulxU32(&x200, &x201, x178, 0xffffffff);
    var x202: u32 = undefined;
    var x203: u1 = undefined;
    addcarryxU32(&x202, &x203, 0x0, x201, x198);
    var x204: u32 = undefined;
    var x205: u1 = undefined;
    addcarryxU32(&x204, &x205, x203, x199, x196);
    var x206: u32 = undefined;
    var x207: u1 = undefined;
    addcarryxU32(&x206, &x207, 0x0, x178, x200);
    var x208: u32 = undefined;
    var x209: u1 = undefined;
    addcarryxU32(&x208, &x209, x207, x180, x202);
    var x210: u32 = undefined;
    var x211: u1 = undefined;
    addcarryxU32(&x210, &x211, x209, x182, x204);
    var x212: u32 = undefined;
    var x213: u1 = undefined;
    addcarryxU32(&x212, &x213, x211, x184, (cast(u32, x205) + x197));
    var x214: u32 = undefined;
    var x215: u1 = undefined;
    addcarryxU32(&x214, &x215, x213, x186, cast(u32, 0x0));
    var x216: u32 = undefined;
    var x217: u1 = undefined;
    addcarryxU32(&x216, &x217, x215, x188, cast(u32, 0x0));
    var x218: u32 = undefined;
    var x219: u1 = undefined;
    addcarryxU32(&x218, &x219, x217, x190, x178);
    var x220: u32 = undefined;
    var x221: u1 = undefined;
    addcarryxU32(&x220, &x221, x219, x192, x194);
    var x222: u32 = undefined;
    var x223: u1 = undefined;
    addcarryxU32(&x222, &x223, x221, (cast(u32, x193) + cast(u32, x177)), x195);
    var x224: u32 = undefined;
    var x225: u1 = undefined;
    addcarryxU32(&x224, &x225, 0x0, x208, (arg1[6]));
    var x226: u32 = undefined;
    var x227: u1 = undefined;
    addcarryxU32(&x226, &x227, x225, x210, cast(u32, 0x0));
    var x228: u32 = undefined;
    var x229: u1 = undefined;
    addcarryxU32(&x228, &x229, x227, x212, cast(u32, 0x0));
    var x230: u32 = undefined;
    var x231: u1 = undefined;
    addcarryxU32(&x230, &x231, x229, x214, cast(u32, 0x0));
    var x232: u32 = undefined;
    var x233: u1 = undefined;
    addcarryxU32(&x232, &x233, x231, x216, cast(u32, 0x0));
    var x234: u32 = undefined;
    var x235: u1 = undefined;
    addcarryxU32(&x234, &x235, x233, x218, cast(u32, 0x0));
    var x236: u32 = undefined;
    var x237: u1 = undefined;
    addcarryxU32(&x236, &x237, x235, x220, cast(u32, 0x0));
    var x238: u32 = undefined;
    var x239: u1 = undefined;
    addcarryxU32(&x238, &x239, x237, x222, cast(u32, 0x0));
    var x240: u32 = undefined;
    var x241: u32 = undefined;
    mulxU32(&x240, &x241, x224, 0xffffffff);
    var x242: u32 = undefined;
    var x243: u32 = undefined;
    mulxU32(&x242, &x243, x224, 0xffffffff);
    var x244: u32 = undefined;
    var x245: u32 = undefined;
    mulxU32(&x244, &x245, x224, 0xffffffff);
    var x246: u32 = undefined;
    var x247: u32 = undefined;
    mulxU32(&x246, &x247, x224, 0xffffffff);
    var x248: u32 = undefined;
    var x249: u1 = undefined;
    addcarryxU32(&x248, &x249, 0x0, x247, x244);
    var x250: u32 = undefined;
    var x251: u1 = undefined;
    addcarryxU32(&x250, &x251, x249, x245, x242);
    var x252: u32 = undefined;
    var x253: u1 = undefined;
    addcarryxU32(&x252, &x253, 0x0, x224, x246);
    var x254: u32 = undefined;
    var x255: u1 = undefined;
    addcarryxU32(&x254, &x255, x253, x226, x248);
    var x256: u32 = undefined;
    var x257: u1 = undefined;
    addcarryxU32(&x256, &x257, x255, x228, x250);
    var x258: u32 = undefined;
    var x259: u1 = undefined;
    addcarryxU32(&x258, &x259, x257, x230, (cast(u32, x251) + x243));
    var x260: u32 = undefined;
    var x261: u1 = undefined;
    addcarryxU32(&x260, &x261, x259, x232, cast(u32, 0x0));
    var x262: u32 = undefined;
    var x263: u1 = undefined;
    addcarryxU32(&x262, &x263, x261, x234, cast(u32, 0x0));
    var x264: u32 = undefined;
    var x265: u1 = undefined;
    addcarryxU32(&x264, &x265, x263, x236, x224);
    var x266: u32 = undefined;
    var x267: u1 = undefined;
    addcarryxU32(&x266, &x267, x265, x238, x240);
    var x268: u32 = undefined;
    var x269: u1 = undefined;
    addcarryxU32(&x268, &x269, x267, (cast(u32, x239) + cast(u32, x223)), x241);
    var x270: u32 = undefined;
    var x271: u1 = undefined;
    addcarryxU32(&x270, &x271, 0x0, x254, (arg1[7]));
    var x272: u32 = undefined;
    var x273: u1 = undefined;
    addcarryxU32(&x272, &x273, x271, x256, cast(u32, 0x0));
    var x274: u32 = undefined;
    var x275: u1 = undefined;
    addcarryxU32(&x274, &x275, x273, x258, cast(u32, 0x0));
    var x276: u32 = undefined;
    var x277: u1 = undefined;
    addcarryxU32(&x276, &x277, x275, x260, cast(u32, 0x0));
    var x278: u32 = undefined;
    var x279: u1 = undefined;
    addcarryxU32(&x278, &x279, x277, x262, cast(u32, 0x0));
    var x280: u32 = undefined;
    var x281: u1 = undefined;
    addcarryxU32(&x280, &x281, x279, x264, cast(u32, 0x0));
    var x282: u32 = undefined;
    var x283: u1 = undefined;
    addcarryxU32(&x282, &x283, x281, x266, cast(u32, 0x0));
    var x284: u32 = undefined;
    var x285: u1 = undefined;
    addcarryxU32(&x284, &x285, x283, x268, cast(u32, 0x0));
    var x286: u32 = undefined;
    var x287: u32 = undefined;
    mulxU32(&x286, &x287, x270, 0xffffffff);
    var x288: u32 = undefined;
    var x289: u32 = undefined;
    mulxU32(&x288, &x289, x270, 0xffffffff);
    var x290: u32 = undefined;
    var x291: u32 = undefined;
    mulxU32(&x290, &x291, x270, 0xffffffff);
    var x292: u32 = undefined;
    var x293: u32 = undefined;
    mulxU32(&x292, &x293, x270, 0xffffffff);
    var x294: u32 = undefined;
    var x295: u1 = undefined;
    addcarryxU32(&x294, &x295, 0x0, x293, x290);
    var x296: u32 = undefined;
    var x297: u1 = undefined;
    addcarryxU32(&x296, &x297, x295, x291, x288);
    var x298: u32 = undefined;
    var x299: u1 = undefined;
    addcarryxU32(&x298, &x299, 0x0, x270, x292);
    var x300: u32 = undefined;
    var x301: u1 = undefined;
    addcarryxU32(&x300, &x301, x299, x272, x294);
    var x302: u32 = undefined;
    var x303: u1 = undefined;
    addcarryxU32(&x302, &x303, x301, x274, x296);
    var x304: u32 = undefined;
    var x305: u1 = undefined;
    addcarryxU32(&x304, &x305, x303, x276, (cast(u32, x297) + x289));
    var x306: u32 = undefined;
    var x307: u1 = undefined;
    addcarryxU32(&x306, &x307, x305, x278, cast(u32, 0x0));
    var x308: u32 = undefined;
    var x309: u1 = undefined;
    addcarryxU32(&x308, &x309, x307, x280, cast(u32, 0x0));
    var x310: u32 = undefined;
    var x311: u1 = undefined;
    addcarryxU32(&x310, &x311, x309, x282, x270);
    var x312: u32 = undefined;
    var x313: u1 = undefined;
    addcarryxU32(&x312, &x313, x311, x284, x286);
    var x314: u32 = undefined;
    var x315: u1 = undefined;
    addcarryxU32(&x314, &x315, x313, (cast(u32, x285) + cast(u32, x269)), x287);
    var x316: u32 = undefined;
    var x317: u1 = undefined;
    subborrowxU32(&x316, &x317, 0x0, x300, 0xffffffff);
    var x318: u32 = undefined;
    var x319: u1 = undefined;
    subborrowxU32(&x318, &x319, x317, x302, 0xffffffff);
    var x320: u32 = undefined;
    var x321: u1 = undefined;
    subborrowxU32(&x320, &x321, x319, x304, 0xffffffff);
    var x322: u32 = undefined;
    var x323: u1 = undefined;
    subborrowxU32(&x322, &x323, x321, x306, cast(u32, 0x0));
    var x324: u32 = undefined;
    var x325: u1 = undefined;
    subborrowxU32(&x324, &x325, x323, x308, cast(u32, 0x0));
    var x326: u32 = undefined;
    var x327: u1 = undefined;
    subborrowxU32(&x326, &x327, x325, x310, cast(u32, 0x0));
    var x328: u32 = undefined;
    var x329: u1 = undefined;
    subborrowxU32(&x328, &x329, x327, x312, cast(u32, 0x1));
    var x330: u32 = undefined;
    var x331: u1 = undefined;
    subborrowxU32(&x330, &x331, x329, x314, 0xffffffff);
    var x332: u32 = undefined;
    var x333: u1 = undefined;
    subborrowxU32(&x332, &x333, x331, cast(u32, x315), cast(u32, 0x0));
    var x334: u32 = undefined;
    cmovznzU32(&x334, x333, x316, x300);
    var x335: u32 = undefined;
    cmovznzU32(&x335, x333, x318, x302);
    var x336: u32 = undefined;
    cmovznzU32(&x336, x333, x320, x304);
    var x337: u32 = undefined;
    cmovznzU32(&x337, x333, x322, x306);
    var x338: u32 = undefined;
    cmovznzU32(&x338, x333, x324, x308);
    var x339: u32 = undefined;
    cmovznzU32(&x339, x333, x326, x310);
    var x340: u32 = undefined;
    cmovznzU32(&x340, x333, x328, x312);
    var x341: u32 = undefined;
    cmovznzU32(&x341, x333, x330, x314);
    out1[0] = x334;
    out1[1] = x335;
    out1[2] = x336;
    out1[3] = x337;
    out1[4] = x338;
    out1[5] = x339;
    out1[6] = x340;
    out1[7] = x341;
}

/// The function toMontgomery translates a field element into the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = eval arg1 mod m
///   0 ≤ eval out1 < m
///
pub fn toMontgomery(out1: *MontgomeryDomainFieldElement, arg1: NonMontgomeryDomainFieldElement) void {
    @setRuntimeSafety(mode == .Debug);

    const x1 = (arg1[1]);
    const x2 = (arg1[2]);
    const x3 = (arg1[3]);
    const x4 = (arg1[4]);
    const x5 = (arg1[5]);
    const x6 = (arg1[6]);
    const x7 = (arg1[7]);
    const x8 = (arg1[0]);
    var x9: u32 = undefined;
    var x10: u32 = undefined;
    mulxU32(&x9, &x10, x8, 0x4);
    var x11: u32 = undefined;
    var x12: u32 = undefined;
    mulxU32(&x11, &x12, x8, 0xfffffffd);
    var x13: u32 = undefined;
    var x14: u32 = undefined;
    mulxU32(&x13, &x14, x8, 0xffffffff);
    var x15: u32 = undefined;
    var x16: u32 = undefined;
    mulxU32(&x15, &x16, x8, 0xfffffffe);
    var x17: u32 = undefined;
    var x18: u32 = undefined;
    mulxU32(&x17, &x18, x8, 0xfffffffb);
    var x19: u32 = undefined;
    var x20: u32 = undefined;
    mulxU32(&x19, &x20, x8, 0xffffffff);
    var x21: u32 = undefined;
    var x22: u32 = undefined;
    mulxU32(&x21, &x22, x8, 0x3);
    var x23: u32 = undefined;
    var x24: u1 = undefined;
    addcarryxU32(&x23, &x24, 0x0, x20, x17);
    var x25: u32 = undefined;
    var x26: u1 = undefined;
    addcarryxU32(&x25, &x26, x24, x18, x15);
    var x27: u32 = undefined;
    var x28: u1 = undefined;
    addcarryxU32(&x27, &x28, x26, x16, x13);
    var x29: u32 = undefined;
    var x30: u1 = undefined;
    addcarryxU32(&x29, &x30, x28, x14, x11);
    var x31: u32 = undefined;
    var x32: u1 = undefined;
    addcarryxU32(&x31, &x32, x30, x12, x9);
    var x33: u32 = undefined;
    var x34: u32 = undefined;
    mulxU32(&x33, &x34, x21, 0xffffffff);
    var x35: u32 = undefined;
    var x36: u32 = undefined;
    mulxU32(&x35, &x36, x21, 0xffffffff);
    var x37: u32 = undefined;
    var x38: u32 = undefined;
    mulxU32(&x37, &x38, x21, 0xffffffff);
    var x39: u32 = undefined;
    var x40: u32 = undefined;
    mulxU32(&x39, &x40, x21, 0xffffffff);
    var x41: u32 = undefined;
    var x42: u1 = undefined;
    addcarryxU32(&x41, &x42, 0x0, x40, x37);
    var x43: u32 = undefined;
    var x44: u1 = undefined;
    addcarryxU32(&x43, &x44, x42, x38, x35);
    var x45: u32 = undefined;
    var x46: u1 = undefined;
    addcarryxU32(&x45, &x46, 0x0, x21, x39);
    var x47: u32 = undefined;
    var x48: u1 = undefined;
    addcarryxU32(&x47, &x48, x46, x22, x41);
    var x49: u32 = undefined;
    var x50: u1 = undefined;
    addcarryxU32(&x49, &x50, x48, x19, x43);
    var x51: u32 = undefined;
    var x52: u1 = undefined;
    addcarryxU32(&x51, &x52, x50, x23, (cast(u32, x44) + x36));
    var x53: u32 = undefined;
    var x54: u1 = undefined;
    addcarryxU32(&x53, &x54, x52, x25, cast(u32, 0x0));
    var x55: u32 = undefined;
    var x56: u1 = undefined;
    addcarryxU32(&x55, &x56, x54, x27, cast(u32, 0x0));
    var x57: u32 = undefined;
    var x58: u1 = undefined;
    addcarryxU32(&x57, &x58, x56, x29, x21);
    var x59: u32 = undefined;
    var x60: u1 = undefined;
    addcarryxU32(&x59, &x60, x58, x31, x33);
    var x61: u32 = undefined;
    var x62: u1 = undefined;
    addcarryxU32(&x61, &x62, x60, (cast(u32, x32) + x10), x34);
    var x63: u32 = undefined;
    var x64: u32 = undefined;
    mulxU32(&x63, &x64, x1, 0x4);
    var x65: u32 = undefined;
    var x66: u32 = undefined;
    mulxU32(&x65, &x66, x1, 0xfffffffd);
    var x67: u32 = undefined;
    var x68: u32 = undefined;
    mulxU32(&x67, &x68, x1, 0xffffffff);
    var x69: u32 = undefined;
    var x70: u32 = undefined;
    mulxU32(&x69, &x70, x1, 0xfffffffe);
    var x71: u32 = undefined;
    var x72: u32 = undefined;
    mulxU32(&x71, &x72, x1, 0xfffffffb);
    var x73: u32 = undefined;
    var x74: u32 = undefined;
    mulxU32(&x73, &x74, x1, 0xffffffff);
    var x75: u32 = undefined;
    var x76: u32 = undefined;
    mulxU32(&x75, &x76, x1, 0x3);
    var x77: u32 = undefined;
    var x78: u1 = undefined;
    addcarryxU32(&x77, &x78, 0x0, x74, x71);
    var x79: u32 = undefined;
    var x80: u1 = undefined;
    addcarryxU32(&x79, &x80, x78, x72, x69);
    var x81: u32 = undefined;
    var x82: u1 = undefined;
    addcarryxU32(&x81, &x82, x80, x70, x67);
    var x83: u32 = undefined;
    var x84: u1 = undefined;
    addcarryxU32(&x83, &x84, x82, x68, x65);
    var x85: u32 = undefined;
    var x86: u1 = undefined;
    addcarryxU32(&x85, &x86, x84, x66, x63);
    var x87: u32 = undefined;
    var x88: u1 = undefined;
    addcarryxU32(&x87, &x88, 0x0, x47, x75);
    var x89: u32 = undefined;
    var x90: u1 = undefined;
    addcarryxU32(&x89, &x90, x88, x49, x76);
    var x91: u32 = undefined;
    var x92: u1 = undefined;
    addcarryxU32(&x91, &x92, x90, x51, x73);
    var x93: u32 = undefined;
    var x94: u1 = undefined;
    addcarryxU32(&x93, &x94, x92, x53, x77);
    var x95: u32 = undefined;
    var x96: u1 = undefined;
    addcarryxU32(&x95, &x96, x94, x55, x79);
    var x97: u32 = undefined;
    var x98: u1 = undefined;
    addcarryxU32(&x97, &x98, x96, x57, x81);
    var x99: u32 = undefined;
    var x100: u1 = undefined;
    addcarryxU32(&x99, &x100, x98, x59, x83);
    var x101: u32 = undefined;
    var x102: u1 = undefined;
    addcarryxU32(&x101, &x102, x100, x61, x85);
    var x103: u32 = undefined;
    var x104: u32 = undefined;
    mulxU32(&x103, &x104, x87, 0xffffffff);
    var x105: u32 = undefined;
    var x106: u32 = undefined;
    mulxU32(&x105, &x106, x87, 0xffffffff);
    var x107: u32 = undefined;
    var x108: u32 = undefined;
    mulxU32(&x107, &x108, x87, 0xffffffff);
    var x109: u32 = undefined;
    var x110: u32 = undefined;
    mulxU32(&x109, &x110, x87, 0xffffffff);
    var x111: u32 = undefined;
    var x112: u1 = undefined;
    addcarryxU32(&x111, &x112, 0x0, x110, x107);
    var x113: u32 = undefined;
    var x114: u1 = undefined;
    addcarryxU32(&x113, &x114, x112, x108, x105);
    var x115: u32 = undefined;
    var x116: u1 = undefined;
    addcarryxU32(&x115, &x116, 0x0, x87, x109);
    var x117: u32 = undefined;
    var x118: u1 = undefined;
    addcarryxU32(&x117, &x118, x116, x89, x111);
    var x119: u32 = undefined;
    var x120: u1 = undefined;
    addcarryxU32(&x119, &x120, x118, x91, x113);
    var x121: u32 = undefined;
    var x122: u1 = undefined;
    addcarryxU32(&x121, &x122, x120, x93, (cast(u32, x114) + x106));
    var x123: u32 = undefined;
    var x124: u1 = undefined;
    addcarryxU32(&x123, &x124, x122, x95, cast(u32, 0x0));
    var x125: u32 = undefined;
    var x126: u1 = undefined;
    addcarryxU32(&x125, &x126, x124, x97, cast(u32, 0x0));
    var x127: u32 = undefined;
    var x128: u1 = undefined;
    addcarryxU32(&x127, &x128, x126, x99, x87);
    var x129: u32 = undefined;
    var x130: u1 = undefined;
    addcarryxU32(&x129, &x130, x128, x101, x103);
    var x131: u32 = undefined;
    var x132: u1 = undefined;
    addcarryxU32(&x131, &x132, x130, ((cast(u32, x102) + cast(u32, x62)) + (cast(u32, x86) + x64)), x104);
    var x133: u32 = undefined;
    var x134: u32 = undefined;
    mulxU32(&x133, &x134, x2, 0x4);
    var x135: u32 = undefined;
    var x136: u32 = undefined;
    mulxU32(&x135, &x136, x2, 0xfffffffd);
    var x137: u32 = undefined;
    var x138: u32 = undefined;
    mulxU32(&x137, &x138, x2, 0xffffffff);
    var x139: u32 = undefined;
    var x140: u32 = undefined;
    mulxU32(&x139, &x140, x2, 0xfffffffe);
    var x141: u32 = undefined;
    var x142: u32 = undefined;
    mulxU32(&x141, &x142, x2, 0xfffffffb);
    var x143: u32 = undefined;
    var x144: u32 = undefined;
    mulxU32(&x143, &x144, x2, 0xffffffff);
    var x145: u32 = undefined;
    var x146: u32 = undefined;
    mulxU32(&x145, &x146, x2, 0x3);
    var x147: u32 = undefined;
    var x148: u1 = undefined;
    addcarryxU32(&x147, &x148, 0x0, x144, x141);
    var x149: u32 = undefined;
    var x150: u1 = undefined;
    addcarryxU32(&x149, &x150, x148, x142, x139);
    var x151: u32 = undefined;
    var x152: u1 = undefined;
    addcarryxU32(&x151, &x152, x150, x140, x137);
    var x153: u32 = undefined;
    var x154: u1 = undefined;
    addcarryxU32(&x153, &x154, x152, x138, x135);
    var x155: u32 = undefined;
    var x156: u1 = undefined;
    addcarryxU32(&x155, &x156, x154, x136, x133);
    var x157: u32 = undefined;
    var x158: u1 = undefined;
    addcarryxU32(&x157, &x158, 0x0, x117, x145);
    var x159: u32 = undefined;
    var x160: u1 = undefined;
    addcarryxU32(&x159, &x160, x158, x119, x146);
    var x161: u32 = undefined;
    var x162: u1 = undefined;
    addcarryxU32(&x161, &x162, x160, x121, x143);
    var x163: u32 = undefined;
    var x164: u1 = undefined;
    addcarryxU32(&x163, &x164, x162, x123, x147);
    var x165: u32 = undefined;
    var x166: u1 = undefined;
    addcarryxU32(&x165, &x166, x164, x125, x149);
    var x167: u32 = undefined;
    var x168: u1 = undefined;
    addcarryxU32(&x167, &x168, x166, x127, x151);
    var x169: u32 = undefined;
    var x170: u1 = undefined;
    addcarryxU32(&x169, &x170, x168, x129, x153);
    var x171: u32 = undefined;
    var x172: u1 = undefined;
    addcarryxU32(&x171, &x172, x170, x131, x155);
    var x173: u32 = undefined;
    var x174: u32 = undefined;
    mulxU32(&x173, &x174, x157, 0xffffffff);
    var x175: u32 = undefined;
    var x176: u32 = undefined;
    mulxU32(&x175, &x176, x157, 0xffffffff);
    var x177: u32 = undefined;
    var x178: u32 = undefined;
    mulxU32(&x177, &x178, x157, 0xffffffff);
    var x179: u32 = undefined;
    var x180: u32 = undefined;
    mulxU32(&x179, &x180, x157, 0xffffffff);
    var x181: u32 = undefined;
    var x182: u1 = undefined;
    addcarryxU32(&x181, &x182, 0x0, x180, x177);
    var x183: u32 = undefined;
    var x184: u1 = undefined;
    addcarryxU32(&x183, &x184, x182, x178, x175);
    var x185: u32 = undefined;
    var x186: u1 = undefined;
    addcarryxU32(&x185, &x186, 0x0, x157, x179);
    var x187: u32 = undefined;
    var x188: u1 = undefined;
    addcarryxU32(&x187, &x188, x186, x159, x181);
    var x189: u32 = undefined;
    var x190: u1 = undefined;
    addcarryxU32(&x189, &x190, x188, x161, x183);
    var x191: u32 = undefined;
    var x192: u1 = undefined;
    addcarryxU32(&x191, &x192, x190, x163, (cast(u32, x184) + x176));
    var x193: u32 = undefined;
    var x194: u1 = undefined;
    addcarryxU32(&x193, &x194, x192, x165, cast(u32, 0x0));
    var x195: u32 = undefined;
    var x196: u1 = undefined;
    addcarryxU32(&x195, &x196, x194, x167, cast(u32, 0x0));
    var x197: u32 = undefined;
    var x198: u1 = undefined;
    addcarryxU32(&x197, &x198, x196, x169, x157);
    var x199: u32 = undefined;
    var x200: u1 = undefined;
    addcarryxU32(&x199, &x200, x198, x171, x173);
    var x201: u32 = undefined;
    var x202: u1 = undefined;
    addcarryxU32(&x201, &x202, x200, ((cast(u32, x172) + cast(u32, x132)) + (cast(u32, x156) + x134)), x174);
    var x203: u32 = undefined;
    var x204: u32 = undefined;
    mulxU32(&x203, &x204, x3, 0x4);
    var x205: u32 = undefined;
    var x206: u32 = undefined;
    mulxU32(&x205, &x206, x3, 0xfffffffd);
    var x207: u32 = undefined;
    var x208: u32 = undefined;
    mulxU32(&x207, &x208, x3, 0xffffffff);
    var x209: u32 = undefined;
    var x210: u32 = undefined;
    mulxU32(&x209, &x210, x3, 0xfffffffe);
    var x211: u32 = undefined;
    var x212: u32 = undefined;
    mulxU32(&x211, &x212, x3, 0xfffffffb);
    var x213: u32 = undefined;
    var x214: u32 = undefined;
    mulxU32(&x213, &x214, x3, 0xffffffff);
    var x215: u32 = undefined;
    var x216: u32 = undefined;
    mulxU32(&x215, &x216, x3, 0x3);
    var x217: u32 = undefined;
    var x218: u1 = undefined;
    addcarryxU32(&x217, &x218, 0x0, x214, x211);
    var x219: u32 = undefined;
    var x220: u1 = undefined;
    addcarryxU32(&x219, &x220, x218, x212, x209);
    var x221: u32 = undefined;
    var x222: u1 = undefined;
    addcarryxU32(&x221, &x222, x220, x210, x207);
    var x223: u32 = undefined;
    var x224: u1 = undefined;
    addcarryxU32(&x223, &x224, x222, x208, x205);
    var x225: u32 = undefined;
    var x226: u1 = undefined;
    addcarryxU32(&x225, &x226, x224, x206, x203);
    var x227: u32 = undefined;
    var x228: u1 = undefined;
    addcarryxU32(&x227, &x228, 0x0, x187, x215);
    var x229: u32 = undefined;
    var x230: u1 = undefined;
    addcarryxU32(&x229, &x230, x228, x189, x216);
    var x231: u32 = undefined;
    var x232: u1 = undefined;
    addcarryxU32(&x231, &x232, x230, x191, x213);
    var x233: u32 = undefined;
    var x234: u1 = undefined;
    addcarryxU32(&x233, &x234, x232, x193, x217);
    var x235: u32 = undefined;
    var x236: u1 = undefined;
    addcarryxU32(&x235, &x236, x234, x195, x219);
    var x237: u32 = undefined;
    var x238: u1 = undefined;
    addcarryxU32(&x237, &x238, x236, x197, x221);
    var x239: u32 = undefined;
    var x240: u1 = undefined;
    addcarryxU32(&x239, &x240, x238, x199, x223);
    var x241: u32 = undefined;
    var x242: u1 = undefined;
    addcarryxU32(&x241, &x242, x240, x201, x225);
    var x243: u32 = undefined;
    var x244: u32 = undefined;
    mulxU32(&x243, &x244, x227, 0xffffffff);
    var x245: u32 = undefined;
    var x246: u32 = undefined;
    mulxU32(&x245, &x246, x227, 0xffffffff);
    var x247: u32 = undefined;
    var x248: u32 = undefined;
    mulxU32(&x247, &x248, x227, 0xffffffff);
    var x249: u32 = undefined;
    var x250: u32 = undefined;
    mulxU32(&x249, &x250, x227, 0xffffffff);
    var x251: u32 = undefined;
    var x252: u1 = undefined;
    addcarryxU32(&x251, &x252, 0x0, x250, x247);
    var x253: u32 = undefined;
    var x254: u1 = undefined;
    addcarryxU32(&x253, &x254, x252, x248, x245);
    var x255: u32 = undefined;
    var x256: u1 = undefined;
    addcarryxU32(&x255, &x256, 0x0, x227, x249);
    var x257: u32 = undefined;
    var x258: u1 = undefined;
    addcarryxU32(&x257, &x258, x256, x229, x251);
    var x259: u32 = undefined;
    var x260: u1 = undefined;
    addcarryxU32(&x259, &x260, x258, x231, x253);
    var x261: u32 = undefined;
    var x262: u1 = undefined;
    addcarryxU32(&x261, &x262, x260, x233, (cast(u32, x254) + x246));
    var x263: u32 = undefined;
    var x264: u1 = undefined;
    addcarryxU32(&x263, &x264, x262, x235, cast(u32, 0x0));
    var x265: u32 = undefined;
    var x266: u1 = undefined;
    addcarryxU32(&x265, &x266, x264, x237, cast(u32, 0x0));
    var x267: u32 = undefined;
    var x268: u1 = undefined;
    addcarryxU32(&x267, &x268, x266, x239, x227);
    var x269: u32 = undefined;
    var x270: u1 = undefined;
    addcarryxU32(&x269, &x270, x268, x241, x243);
    var x271: u32 = undefined;
    var x272: u1 = undefined;
    addcarryxU32(&x271, &x272, x270, ((cast(u32, x242) + cast(u32, x202)) + (cast(u32, x226) + x204)), x244);
    var x273: u32 = undefined;
    var x274: u32 = undefined;
    mulxU32(&x273, &x274, x4, 0x4);
    var x275: u32 = undefined;
    var x276: u32 = undefined;
    mulxU32(&x275, &x276, x4, 0xfffffffd);
    var x277: u32 = undefined;
    var x278: u32 = undefined;
    mulxU32(&x277, &x278, x4, 0xffffffff);
    var x279: u32 = undefined;
    var x280: u32 = undefined;
    mulxU32(&x279, &x280, x4, 0xfffffffe);
    var x281: u32 = undefined;
    var x282: u32 = undefined;
    mulxU32(&x281, &x282, x4, 0xfffffffb);
    var x283: u32 = undefined;
    var x284: u32 = undefined;
    mulxU32(&x283, &x284, x4, 0xffffffff);
    var x285: u32 = undefined;
    var x286: u32 = undefined;
    mulxU32(&x285, &x286, x4, 0x3);
    var x287: u32 = undefined;
    var x288: u1 = undefined;
    addcarryxU32(&x287, &x288, 0x0, x284, x281);
    var x289: u32 = undefined;
    var x290: u1 = undefined;
    addcarryxU32(&x289, &x290, x288, x282, x279);
    var x291: u32 = undefined;
    var x292: u1 = undefined;
    addcarryxU32(&x291, &x292, x290, x280, x277);
    var x293: u32 = undefined;
    var x294: u1 = undefined;
    addcarryxU32(&x293, &x294, x292, x278, x275);
    var x295: u32 = undefined;
    var x296: u1 = undefined;
    addcarryxU32(&x295, &x296, x294, x276, x273);
    var x297: u32 = undefined;
    var x298: u1 = undefined;
    addcarryxU32(&x297, &x298, 0x0, x257, x285);
    var x299: u32 = undefined;
    var x300: u1 = undefined;
    addcarryxU32(&x299, &x300, x298, x259, x286);
    var x301: u32 = undefined;
    var x302: u1 = undefined;
    addcarryxU32(&x301, &x302, x300, x261, x283);
    var x303: u32 = undefined;
    var x304: u1 = undefined;
    addcarryxU32(&x303, &x304, x302, x263, x287);
    var x305: u32 = undefined;
    var x306: u1 = undefined;
    addcarryxU32(&x305, &x306, x304, x265, x289);
    var x307: u32 = undefined;
    var x308: u1 = undefined;
    addcarryxU32(&x307, &x308, x306, x267, x291);
    var x309: u32 = undefined;
    var x310: u1 = undefined;
    addcarryxU32(&x309, &x310, x308, x269, x293);
    var x311: u32 = undefined;
    var x312: u1 = undefined;
    addcarryxU32(&x311, &x312, x310, x271, x295);
    var x313: u32 = undefined;
    var x314: u32 = undefined;
    mulxU32(&x313, &x314, x297, 0xffffffff);
    var x315: u32 = undefined;
    var x316: u32 = undefined;
    mulxU32(&x315, &x316, x297, 0xffffffff);
    var x317: u32 = undefined;
    var x318: u32 = undefined;
    mulxU32(&x317, &x318, x297, 0xffffffff);
    var x319: u32 = undefined;
    var x320: u32 = undefined;
    mulxU32(&x319, &x320, x297, 0xffffffff);
    var x321: u32 = undefined;
    var x322: u1 = undefined;
    addcarryxU32(&x321, &x322, 0x0, x320, x317);
    var x323: u32 = undefined;
    var x324: u1 = undefined;
    addcarryxU32(&x323, &x324, x322, x318, x315);
    var x325: u32 = undefined;
    var x326: u1 = undefined;
    addcarryxU32(&x325, &x326, 0x0, x297, x319);
    var x327: u32 = undefined;
    var x328: u1 = undefined;
    addcarryxU32(&x327, &x328, x326, x299, x321);
    var x329: u32 = undefined;
    var x330: u1 = undefined;
    addcarryxU32(&x329, &x330, x328, x301, x323);
    var x331: u32 = undefined;
    var x332: u1 = undefined;
    addcarryxU32(&x331, &x332, x330, x303, (cast(u32, x324) + x316));
    var x333: u32 = undefined;
    var x334: u1 = undefined;
    addcarryxU32(&x333, &x334, x332, x305, cast(u32, 0x0));
    var x335: u32 = undefined;
    var x336: u1 = undefined;
    addcarryxU32(&x335, &x336, x334, x307, cast(u32, 0x0));
    var x337: u32 = undefined;
    var x338: u1 = undefined;
    addcarryxU32(&x337, &x338, x336, x309, x297);
    var x339: u32 = undefined;
    var x340: u1 = undefined;
    addcarryxU32(&x339, &x340, x338, x311, x313);
    var x341: u32 = undefined;
    var x342: u1 = undefined;
    addcarryxU32(&x341, &x342, x340, ((cast(u32, x312) + cast(u32, x272)) + (cast(u32, x296) + x274)), x314);
    var x343: u32 = undefined;
    var x344: u32 = undefined;
    mulxU32(&x343, &x344, x5, 0x4);
    var x345: u32 = undefined;
    var x346: u32 = undefined;
    mulxU32(&x345, &x346, x5, 0xfffffffd);
    var x347: u32 = undefined;
    var x348: u32 = undefined;
    mulxU32(&x347, &x348, x5, 0xffffffff);
    var x349: u32 = undefined;
    var x350: u32 = undefined;
    mulxU32(&x349, &x350, x5, 0xfffffffe);
    var x351: u32 = undefined;
    var x352: u32 = undefined;
    mulxU32(&x351, &x352, x5, 0xfffffffb);
    var x353: u32 = undefined;
    var x354: u32 = undefined;
    mulxU32(&x353, &x354, x5, 0xffffffff);
    var x355: u32 = undefined;
    var x356: u32 = undefined;
    mulxU32(&x355, &x356, x5, 0x3);
    var x357: u32 = undefined;
    var x358: u1 = undefined;
    addcarryxU32(&x357, &x358, 0x0, x354, x351);
    var x359: u32 = undefined;
    var x360: u1 = undefined;
    addcarryxU32(&x359, &x360, x358, x352, x349);
    var x361: u32 = undefined;
    var x362: u1 = undefined;
    addcarryxU32(&x361, &x362, x360, x350, x347);
    var x363: u32 = undefined;
    var x364: u1 = undefined;
    addcarryxU32(&x363, &x364, x362, x348, x345);
    var x365: u32 = undefined;
    var x366: u1 = undefined;
    addcarryxU32(&x365, &x366, x364, x346, x343);
    var x367: u32 = undefined;
    var x368: u1 = undefined;
    addcarryxU32(&x367, &x368, 0x0, x327, x355);
    var x369: u32 = undefined;
    var x370: u1 = undefined;
    addcarryxU32(&x369, &x370, x368, x329, x356);
    var x371: u32 = undefined;
    var x372: u1 = undefined;
    addcarryxU32(&x371, &x372, x370, x331, x353);
    var x373: u32 = undefined;
    var x374: u1 = undefined;
    addcarryxU32(&x373, &x374, x372, x333, x357);
    var x375: u32 = undefined;
    var x376: u1 = undefined;
    addcarryxU32(&x375, &x376, x374, x335, x359);
    var x377: u32 = undefined;
    var x378: u1 = undefined;
    addcarryxU32(&x377, &x378, x376, x337, x361);
    var x379: u32 = undefined;
    var x380: u1 = undefined;
    addcarryxU32(&x379, &x380, x378, x339, x363);
    var x381: u32 = undefined;
    var x382: u1 = undefined;
    addcarryxU32(&x381, &x382, x380, x341, x365);
    var x383: u32 = undefined;
    var x384: u32 = undefined;
    mulxU32(&x383, &x384, x367, 0xffffffff);
    var x385: u32 = undefined;
    var x386: u32 = undefined;
    mulxU32(&x385, &x386, x367, 0xffffffff);
    var x387: u32 = undefined;
    var x388: u32 = undefined;
    mulxU32(&x387, &x388, x367, 0xffffffff);
    var x389: u32 = undefined;
    var x390: u32 = undefined;
    mulxU32(&x389, &x390, x367, 0xffffffff);
    var x391: u32 = undefined;
    var x392: u1 = undefined;
    addcarryxU32(&x391, &x392, 0x0, x390, x387);
    var x393: u32 = undefined;
    var x394: u1 = undefined;
    addcarryxU32(&x393, &x394, x392, x388, x385);
    var x395: u32 = undefined;
    var x396: u1 = undefined;
    addcarryxU32(&x395, &x396, 0x0, x367, x389);
    var x397: u32 = undefined;
    var x398: u1 = undefined;
    addcarryxU32(&x397, &x398, x396, x369, x391);
    var x399: u32 = undefined;
    var x400: u1 = undefined;
    addcarryxU32(&x399, &x400, x398, x371, x393);
    var x401: u32 = undefined;
    var x402: u1 = undefined;
    addcarryxU32(&x401, &x402, x400, x373, (cast(u32, x394) + x386));
    var x403: u32 = undefined;
    var x404: u1 = undefined;
    addcarryxU32(&x403, &x404, x402, x375, cast(u32, 0x0));
    var x405: u32 = undefined;
    var x406: u1 = undefined;
    addcarryxU32(&x405, &x406, x404, x377, cast(u32, 0x0));
    var x407: u32 = undefined;
    var x408: u1 = undefined;
    addcarryxU32(&x407, &x408, x406, x379, x367);
    var x409: u32 = undefined;
    var x410: u1 = undefined;
    addcarryxU32(&x409, &x410, x408, x381, x383);
    var x411: u32 = undefined;
    var x412: u1 = undefined;
    addcarryxU32(&x411, &x412, x410, ((cast(u32, x382) + cast(u32, x342)) + (cast(u32, x366) + x344)), x384);
    var x413: u32 = undefined;
    var x414: u32 = undefined;
    mulxU32(&x413, &x414, x6, 0x4);
    var x415: u32 = undefined;
    var x416: u32 = undefined;
    mulxU32(&x415, &x416, x6, 0xfffffffd);
    var x417: u32 = undefined;
    var x418: u32 = undefined;
    mulxU32(&x417, &x418, x6, 0xffffffff);
    var x419: u32 = undefined;
    var x420: u32 = undefined;
    mulxU32(&x419, &x420, x6, 0xfffffffe);
    var x421: u32 = undefined;
    var x422: u32 = undefined;
    mulxU32(&x421, &x422, x6, 0xfffffffb);
    var x423: u32 = undefined;
    var x424: u32 = undefined;
    mulxU32(&x423, &x424, x6, 0xffffffff);
    var x425: u32 = undefined;
    var x426: u32 = undefined;
    mulxU32(&x425, &x426, x6, 0x3);
    var x427: u32 = undefined;
    var x428: u1 = undefined;
    addcarryxU32(&x427, &x428, 0x0, x424, x421);
    var x429: u32 = undefined;
    var x430: u1 = undefined;
    addcarryxU32(&x429, &x430, x428, x422, x419);
    var x431: u32 = undefined;
    var x432: u1 = undefined;
    addcarryxU32(&x431, &x432, x430, x420, x417);
    var x433: u32 = undefined;
    var x434: u1 = undefined;
    addcarryxU32(&x433, &x434, x432, x418, x415);
    var x435: u32 = undefined;
    var x436: u1 = undefined;
    addcarryxU32(&x435, &x436, x434, x416, x413);
    var x437: u32 = undefined;
    var x438: u1 = undefined;
    addcarryxU32(&x437, &x438, 0x0, x397, x425);
    var x439: u32 = undefined;
    var x440: u1 = undefined;
    addcarryxU32(&x439, &x440, x438, x399, x426);
    var x441: u32 = undefined;
    var x442: u1 = undefined;
    addcarryxU32(&x441, &x442, x440, x401, x423);
    var x443: u32 = undefined;
    var x444: u1 = undefined;
    addcarryxU32(&x443, &x444, x442, x403, x427);
    var x445: u32 = undefined;
    var x446: u1 = undefined;
    addcarryxU32(&x445, &x446, x444, x405, x429);
    var x447: u32 = undefined;
    var x448: u1 = undefined;
    addcarryxU32(&x447, &x448, x446, x407, x431);
    var x449: u32 = undefined;
    var x450: u1 = undefined;
    addcarryxU32(&x449, &x450, x448, x409, x433);
    var x451: u32 = undefined;
    var x452: u1 = undefined;
    addcarryxU32(&x451, &x452, x450, x411, x435);
    var x453: u32 = undefined;
    var x454: u32 = undefined;
    mulxU32(&x453, &x454, x437, 0xffffffff);
    var x455: u32 = undefined;
    var x456: u32 = undefined;
    mulxU32(&x455, &x456, x437, 0xffffffff);
    var x457: u32 = undefined;
    var x458: u32 = undefined;
    mulxU32(&x457, &x458, x437, 0xffffffff);
    var x459: u32 = undefined;
    var x460: u32 = undefined;
    mulxU32(&x459, &x460, x437, 0xffffffff);
    var x461: u32 = undefined;
    var x462: u1 = undefined;
    addcarryxU32(&x461, &x462, 0x0, x460, x457);
    var x463: u32 = undefined;
    var x464: u1 = undefined;
    addcarryxU32(&x463, &x464, x462, x458, x455);
    var x465: u32 = undefined;
    var x466: u1 = undefined;
    addcarryxU32(&x465, &x466, 0x0, x437, x459);
    var x467: u32 = undefined;
    var x468: u1 = undefined;
    addcarryxU32(&x467, &x468, x466, x439, x461);
    var x469: u32 = undefined;
    var x470: u1 = undefined;
    addcarryxU32(&x469, &x470, x468, x441, x463);
    var x471: u32 = undefined;
    var x472: u1 = undefined;
    addcarryxU32(&x471, &x472, x470, x443, (cast(u32, x464) + x456));
    var x473: u32 = undefined;
    var x474: u1 = undefined;
    addcarryxU32(&x473, &x474, x472, x445, cast(u32, 0x0));
    var x475: u32 = undefined;
    var x476: u1 = undefined;
    addcarryxU32(&x475, &x476, x474, x447, cast(u32, 0x0));
    var x477: u32 = undefined;
    var x478: u1 = undefined;
    addcarryxU32(&x477, &x478, x476, x449, x437);
    var x479: u32 = undefined;
    var x480: u1 = undefined;
    addcarryxU32(&x479, &x480, x478, x451, x453);
    var x481: u32 = undefined;
    var x482: u1 = undefined;
    addcarryxU32(&x481, &x482, x480, ((cast(u32, x452) + cast(u32, x412)) + (cast(u32, x436) + x414)), x454);
    var x483: u32 = undefined;
    var x484: u32 = undefined;
    mulxU32(&x483, &x484, x7, 0x4);
    var x485: u32 = undefined;
    var x486: u32 = undefined;
    mulxU32(&x485, &x486, x7, 0xfffffffd);
    var x487: u32 = undefined;
    var x488: u32 = undefined;
    mulxU32(&x487, &x488, x7, 0xffffffff);
    var x489: u32 = undefined;
    var x490: u32 = undefined;
    mulxU32(&x489, &x490, x7, 0xfffffffe);
    var x491: u32 = undefined;
    var x492: u32 = undefined;
    mulxU32(&x491, &x492, x7, 0xfffffffb);
    var x493: u32 = undefined;
    var x494: u32 = undefined;
    mulxU32(&x493, &x494, x7, 0xffffffff);
    var x495: u32 = undefined;
    var x496: u32 = undefined;
    mulxU32(&x495, &x496, x7, 0x3);
    var x497: u32 = undefined;
    var x498: u1 = undefined;
    addcarryxU32(&x497, &x498, 0x0, x494, x491);
    var x499: u32 = undefined;
    var x500: u1 = undefined;
    addcarryxU32(&x499, &x500, x498, x492, x489);
    var x501: u32 = undefined;
    var x502: u1 = undefined;
    addcarryxU32(&x501, &x502, x500, x490, x487);
    var x503: u32 = undefined;
    var x504: u1 = undefined;
    addcarryxU32(&x503, &x504, x502, x488, x485);
    var x505: u32 = undefined;
    var x506: u1 = undefined;
    addcarryxU32(&x505, &x506, x504, x486, x483);
    var x507: u32 = undefined;
    var x508: u1 = undefined;
    addcarryxU32(&x507, &x508, 0x0, x467, x495);
    var x509: u32 = undefined;
    var x510: u1 = undefined;
    addcarryxU32(&x509, &x510, x508, x469, x496);
    var x511: u32 = undefined;
    var x512: u1 = undefined;
    addcarryxU32(&x511, &x512, x510, x471, x493);
    var x513: u32 = undefined;
    var x514: u1 = undefined;
    addcarryxU32(&x513, &x514, x512, x473, x497);
    var x515: u32 = undefined;
    var x516: u1 = undefined;
    addcarryxU32(&x515, &x516, x514, x475, x499);
    var x517: u32 = undefined;
    var x518: u1 = undefined;
    addcarryxU32(&x517, &x518, x516, x477, x501);
    var x519: u32 = undefined;
    var x520: u1 = undefined;
    addcarryxU32(&x519, &x520, x518, x479, x503);
    var x521: u32 = undefined;
    var x522: u1 = undefined;
    addcarryxU32(&x521, &x522, x520, x481, x505);
    var x523: u32 = undefined;
    var x524: u32 = undefined;
    mulxU32(&x523, &x524, x507, 0xffffffff);
    var x525: u32 = undefined;
    var x526: u32 = undefined;
    mulxU32(&x525, &x526, x507, 0xffffffff);
    var x527: u32 = undefined;
    var x528: u32 = undefined;
    mulxU32(&x527, &x528, x507, 0xffffffff);
    var x529: u32 = undefined;
    var x530: u32 = undefined;
    mulxU32(&x529, &x530, x507, 0xffffffff);
    var x531: u32 = undefined;
    var x532: u1 = undefined;
    addcarryxU32(&x531, &x532, 0x0, x530, x527);
    var x533: u32 = undefined;
    var x534: u1 = undefined;
    addcarryxU32(&x533, &x534, x532, x528, x525);
    var x535: u32 = undefined;
    var x536: u1 = undefined;
    addcarryxU32(&x535, &x536, 0x0, x507, x529);
    var x537: u32 = undefined;
    var x538: u1 = undefined;
    addcarryxU32(&x537, &x538, x536, x509, x531);
    var x539: u32 = undefined;
    var x540: u1 = undefined;
    addcarryxU32(&x539, &x540, x538, x511, x533);
    var x541: u32 = undefined;
    var x542: u1 = undefined;
    addcarryxU32(&x541, &x542, x540, x513, (cast(u32, x534) + x526));
    var x543: u32 = undefined;
    var x544: u1 = undefined;
    addcarryxU32(&x543, &x544, x542, x515, cast(u32, 0x0));
    var x545: u32 = undefined;
    var x546: u1 = undefined;
    addcarryxU32(&x545, &x546, x544, x517, cast(u32, 0x0));
    var x547: u32 = undefined;
    var x548: u1 = undefined;
    addcarryxU32(&x547, &x548, x546, x519, x507);
    var x549: u32 = undefined;
    var x550: u1 = undefined;
    addcarryxU32(&x549, &x550, x548, x521, x523);
    var x551: u32 = undefined;
    var x552: u1 = undefined;
    addcarryxU32(&x551, &x552, x550, ((cast(u32, x522) + cast(u32, x482)) + (cast(u32, x506) + x484)), x524);
    var x553: u32 = undefined;
    var x554: u1 = undefined;
    subborrowxU32(&x553, &x554, 0x0, x537, 0xffffffff);
    var x555: u32 = undefined;
    var x556: u1 = undefined;
    subborrowxU32(&x555, &x556, x554, x539, 0xffffffff);
    var x557: u32 = undefined;
    var x558: u1 = undefined;
    subborrowxU32(&x557, &x558, x556, x541, 0xffffffff);
    var x559: u32 = undefined;
    var x560: u1 = undefined;
    subborrowxU32(&x559, &x560, x558, x543, cast(u32, 0x0));
    var x561: u32 = undefined;
    var x562: u1 = undefined;
    subborrowxU32(&x561, &x562, x560, x545, cast(u32, 0x0));
    var x563: u32 = undefined;
    var x564: u1 = undefined;
    subborrowxU32(&x563, &x564, x562, x547, cast(u32, 0x0));
    var x565: u32 = undefined;
    var x566: u1 = undefined;
    subborrowxU32(&x565, &x566, x564, x549, cast(u32, 0x1));
    var x567: u32 = undefined;
    var x568: u1 = undefined;
    subborrowxU32(&x567, &x568, x566, x551, 0xffffffff);
    var x569: u32 = undefined;
    var x570: u1 = undefined;
    subborrowxU32(&x569, &x570, x568, cast(u32, x552), cast(u32, 0x0));
    var x571: u32 = undefined;
    cmovznzU32(&x571, x570, x553, x537);
    var x572: u32 = undefined;
    cmovznzU32(&x572, x570, x555, x539);
    var x573: u32 = undefined;
    cmovznzU32(&x573, x570, x557, x541);
    var x574: u32 = undefined;
    cmovznzU32(&x574, x570, x559, x543);
    var x575: u32 = undefined;
    cmovznzU32(&x575, x570, x561, x545);
    var x576: u32 = undefined;
    cmovznzU32(&x576, x570, x563, x547);
    var x577: u32 = undefined;
    cmovznzU32(&x577, x570, x565, x549);
    var x578: u32 = undefined;
    cmovznzU32(&x578, x570, x567, x551);
    out1[0] = x571;
    out1[1] = x572;
    out1[2] = x573;
    out1[3] = x574;
    out1[4] = x575;
    out1[5] = x576;
    out1[6] = x577;
    out1[7] = x578;
}

/// The function nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
pub fn nonzero(out1: *u32, arg1: [8]u32) void {
    @setRuntimeSafety(mode == .Debug);

    const x1 = ((arg1[0]) | ((arg1[1]) | ((arg1[2]) | ((arg1[3]) | ((arg1[4]) | ((arg1[5]) | ((arg1[6]) | (arg1[7]))))))));
    out1.* = x1;
}

/// The function selectznz is a multi-limb conditional select.
///
/// Postconditions:
///   out1 = (if arg1 = 0 then arg2 else arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
pub fn selectznz(out1: *[8]u32, arg1: u1, arg2: [8]u32, arg3: [8]u32) void {
    @setRuntimeSafety(mode == .Debug);

    var x1: u32 = undefined;
    cmovznzU32(&x1, arg1, (arg2[0]), (arg3[0]));
    var x2: u32 = undefined;
    cmovznzU32(&x2, arg1, (arg2[1]), (arg3[1]));
    var x3: u32 = undefined;
    cmovznzU32(&x3, arg1, (arg2[2]), (arg3[2]));
    var x4: u32 = undefined;
    cmovznzU32(&x4, arg1, (arg2[3]), (arg3[3]));
    var x5: u32 = undefined;
    cmovznzU32(&x5, arg1, (arg2[4]), (arg3[4]));
    var x6: u32 = undefined;
    cmovznzU32(&x6, arg1, (arg2[5]), (arg3[5]));
    var x7: u32 = undefined;
    cmovznzU32(&x7, arg1, (arg2[6]), (arg3[6]));
    var x8: u32 = undefined;
    cmovznzU32(&x8, arg1, (arg2[7]), (arg3[7]));
    out1[0] = x1;
    out1[1] = x2;
    out1[2] = x3;
    out1[3] = x4;
    out1[4] = x5;
    out1[5] = x6;
    out1[6] = x7;
    out1[7] = x8;
}

/// The function toBytes serializes a field element NOT in the Montgomery domain to bytes in little-endian order.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..31]
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
pub fn toBytes(out1: *[32]u8, arg1: [8]u32) void {
    @setRuntimeSafety(mode == .Debug);

    const x1 = (arg1[7]);
    const x2 = (arg1[6]);
    const x3 = (arg1[5]);
    const x4 = (arg1[4]);
    const x5 = (arg1[3]);
    const x6 = (arg1[2]);
    const x7 = (arg1[1]);
    const x8 = (arg1[0]);
    const x9 = cast(u8, (x8 & cast(u32, 0xff)));
    const x10 = (x8 >> 8);
    const x11 = cast(u8, (x10 & cast(u32, 0xff)));
    const x12 = (x10 >> 8);
    const x13 = cast(u8, (x12 & cast(u32, 0xff)));
    const x14 = cast(u8, (x12 >> 8));
    const x15 = cast(u8, (x7 & cast(u32, 0xff)));
    const x16 = (x7 >> 8);
    const x17 = cast(u8, (x16 & cast(u32, 0xff)));
    const x18 = (x16 >> 8);
    const x19 = cast(u8, (x18 & cast(u32, 0xff)));
    const x20 = cast(u8, (x18 >> 8));
    const x21 = cast(u8, (x6 & cast(u32, 0xff)));
    const x22 = (x6 >> 8);
    const x23 = cast(u8, (x22 & cast(u32, 0xff)));
    const x24 = (x22 >> 8);
    const x25 = cast(u8, (x24 & cast(u32, 0xff)));
    const x26 = cast(u8, (x24 >> 8));
    const x27 = cast(u8, (x5 & cast(u32, 0xff)));
    const x28 = (x5 >> 8);
    const x29 = cast(u8, (x28 & cast(u32, 0xff)));
    const x30 = (x28 >> 8);
    const x31 = cast(u8, (x30 & cast(u32, 0xff)));
    const x32 = cast(u8, (x30 >> 8));
    const x33 = cast(u8, (x4 & cast(u32, 0xff)));
    const x34 = (x4 >> 8);
    const x35 = cast(u8, (x34 & cast(u32, 0xff)));
    const x36 = (x34 >> 8);
    const x37 = cast(u8, (x36 & cast(u32, 0xff)));
    const x38 = cast(u8, (x36 >> 8));
    const x39 = cast(u8, (x3 & cast(u32, 0xff)));
    const x40 = (x3 >> 8);
    const x41 = cast(u8, (x40 & cast(u32, 0xff)));
    const x42 = (x40 >> 8);
    const x43 = cast(u8, (x42 & cast(u32, 0xff)));
    const x44 = cast(u8, (x42 >> 8));
    const x45 = cast(u8, (x2 & cast(u32, 0xff)));
    const x46 = (x2 >> 8);
    const x47 = cast(u8, (x46 & cast(u32, 0xff)));
    const x48 = (x46 >> 8);
    const x49 = cast(u8, (x48 & cast(u32, 0xff)));
    const x50 = cast(u8, (x48 >> 8));
    const x51 = cast(u8, (x1 & cast(u32, 0xff)));
    const x52 = (x1 >> 8);
    const x53 = cast(u8, (x52 & cast(u32, 0xff)));
    const x54 = (x52 >> 8);
    const x55 = cast(u8, (x54 & cast(u32, 0xff)));
    const x56 = cast(u8, (x54 >> 8));
    out1[0] = x9;
    out1[1] = x11;
    out1[2] = x13;
    out1[3] = x14;
    out1[4] = x15;
    out1[5] = x17;
    out1[6] = x19;
    out1[7] = x20;
    out1[8] = x21;
    out1[9] = x23;
    out1[10] = x25;
    out1[11] = x26;
    out1[12] = x27;
    out1[13] = x29;
    out1[14] = x31;
    out1[15] = x32;
    out1[16] = x33;
    out1[17] = x35;
    out1[18] = x37;
    out1[19] = x38;
    out1[20] = x39;
    out1[21] = x41;
    out1[22] = x43;
    out1[23] = x44;
    out1[24] = x45;
    out1[25] = x47;
    out1[26] = x49;
    out1[27] = x50;
    out1[28] = x51;
    out1[29] = x53;
    out1[30] = x55;
    out1[31] = x56;
}

/// The function fromBytes deserializes a field element NOT in the Montgomery domain from bytes in little-endian order.
///
/// Preconditions:
///   0 ≤ bytes_eval arg1 < m
/// Postconditions:
///   eval out1 mod m = bytes_eval arg1 mod m
///   0 ≤ eval out1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
pub fn fromBytes(out1: *[8]u32, arg1: [32]u8) void {
    @setRuntimeSafety(mode == .Debug);

    const x1 = (cast(u32, (arg1[31])) << 24);
    const x2 = (cast(u32, (arg1[30])) << 16);
    const x3 = (cast(u32, (arg1[29])) << 8);
    const x4 = (arg1[28]);
    const x5 = (cast(u32, (arg1[27])) << 24);
    const x6 = (cast(u32, (arg1[26])) << 16);
    const x7 = (cast(u32, (arg1[25])) << 8);
    const x8 = (arg1[24]);
    const x9 = (cast(u32, (arg1[23])) << 24);
    const x10 = (cast(u32, (arg1[22])) << 16);
    const x11 = (cast(u32, (arg1[21])) << 8);
    const x12 = (arg1[20]);
    const x13 = (cast(u32, (arg1[19])) << 24);
    const x14 = (cast(u32, (arg1[18])) << 16);
    const x15 = (cast(u32, (arg1[17])) << 8);
    const x16 = (arg1[16]);
    const x17 = (cast(u32, (arg1[15])) << 24);
    const x18 = (cast(u32, (arg1[14])) << 16);
    const x19 = (cast(u32, (arg1[13])) << 8);
    const x20 = (arg1[12]);
    const x21 = (cast(u32, (arg1[11])) << 24);
    const x22 = (cast(u32, (arg1[10])) << 16);
    const x23 = (cast(u32, (arg1[9])) << 8);
    const x24 = (arg1[8]);
    const x25 = (cast(u32, (arg1[7])) << 24);
    const x26 = (cast(u32, (arg1[6])) << 16);
    const x27 = (cast(u32, (arg1[5])) << 8);
    const x28 = (arg1[4]);
    const x29 = (cast(u32, (arg1[3])) << 24);
    const x30 = (cast(u32, (arg1[2])) << 16);
    const x31 = (cast(u32, (arg1[1])) << 8);
    const x32 = (arg1[0]);
    const x33 = (x31 + cast(u32, x32));
    const x34 = (x30 + x33);
    const x35 = (x29 + x34);
    const x36 = (x27 + cast(u32, x28));
    const x37 = (x26 + x36);
    const x38 = (x25 + x37);
    const x39 = (x23 + cast(u32, x24));
    const x40 = (x22 + x39);
    const x41 = (x21 + x40);
    const x42 = (x19 + cast(u32, x20));
    const x43 = (x18 + x42);
    const x44 = (x17 + x43);
    const x45 = (x15 + cast(u32, x16));
    const x46 = (x14 + x45);
    const x47 = (x13 + x46);
    const x48 = (x11 + cast(u32, x12));
    const x49 = (x10 + x48);
    const x50 = (x9 + x49);
    const x51 = (x7 + cast(u32, x8));
    const x52 = (x6 + x51);
    const x53 = (x5 + x52);
    const x54 = (x3 + cast(u32, x4));
    const x55 = (x2 + x54);
    const x56 = (x1 + x55);
    out1[0] = x35;
    out1[1] = x38;
    out1[2] = x41;
    out1[3] = x44;
    out1[4] = x47;
    out1[5] = x50;
    out1[6] = x53;
    out1[7] = x56;
}

/// The function setOne returns the field element one in the Montgomery domain.
///
/// Postconditions:
///   eval (from_montgomery out1) mod m = 1 mod m
///   0 ≤ eval out1 < m
///
pub fn setOne(out1: *MontgomeryDomainFieldElement) void {
    @setRuntimeSafety(mode == .Debug);

    out1[0] = cast(u32, 0x1);
    out1[1] = cast(u32, 0x0);
    out1[2] = cast(u32, 0x0);
    out1[3] = 0xffffffff;
    out1[4] = 0xffffffff;
    out1[5] = 0xffffffff;
    out1[6] = 0xfffffffe;
    out1[7] = cast(u32, 0x0);
}

/// The function msat returns the saturated representation of the prime modulus.
///
/// Postconditions:
///   twos_complement_eval out1 = m
///   0 ≤ eval out1 < m
///
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
pub fn msat(out1: *[9]u32) void {
    @setRuntimeSafety(mode == .Debug);

    out1[0] = 0xffffffff;
    out1[1] = 0xffffffff;
    out1[2] = 0xffffffff;
    out1[3] = cast(u32, 0x0);
    out1[4] = cast(u32, 0x0);
    out1[5] = cast(u32, 0x0);
    out1[6] = cast(u32, 0x1);
    out1[7] = 0xffffffff;
    out1[8] = cast(u32, 0x0);
}

/// The function divstep computes a divstep.
///
/// Preconditions:
///   0 ≤ eval arg4 < m
///   0 ≤ eval arg5 < m
/// Postconditions:
///   out1 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then 1 - arg1 else 1 + arg1)
///   twos_complement_eval out2 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then twos_complement_eval arg3 else twos_complement_eval arg2)
///   twos_complement_eval out3 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then ⌊(twos_complement_eval arg3 - twos_complement_eval arg2) / 2⌋ else ⌊(twos_complement_eval arg3 + (twos_complement_eval arg3 mod 2) * twos_complement_eval arg2) / 2⌋)
///   eval (from_montgomery out4) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (2 * eval (from_montgomery arg5)) mod m else (2 * eval (from_montgomery arg4)) mod m)
///   eval (from_montgomery out5) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (eval (from_montgomery arg4) - eval (from_montgomery arg4)) mod m else (eval (from_montgomery arg5) + (twos_complement_eval arg3 mod 2) * eval (from_montgomery arg4)) mod m)
///   0 ≤ eval out5 < m
///   0 ≤ eval out5 < m
///   0 ≤ eval out2 < m
///   0 ≤ eval out3 < m
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffff]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
pub fn divstep(out1: *u32, out2: *[9]u32, out3: *[9]u32, out4: *[8]u32, out5: *[8]u32, arg1: u32, arg2: [9]u32, arg3: [9]u32, arg4: [8]u32, arg5: [8]u32) void {
    @setRuntimeSafety(mode == .Debug);

    var x1: u32 = undefined;
    var x2: u1 = undefined;
    addcarryxU32(&x1, &x2, 0x0, (~arg1), cast(u32, 0x1));
    const x3 = (cast(u1, (x1 >> 31)) & cast(u1, ((arg3[0]) & cast(u32, 0x1))));
    var x4: u32 = undefined;
    var x5: u1 = undefined;
    addcarryxU32(&x4, &x5, 0x0, (~arg1), cast(u32, 0x1));
    var x6: u32 = undefined;
    cmovznzU32(&x6, x3, arg1, x4);
    var x7: u32 = undefined;
    cmovznzU32(&x7, x3, (arg2[0]), (arg3[0]));
    var x8: u32 = undefined;
    cmovznzU32(&x8, x3, (arg2[1]), (arg3[1]));
    var x9: u32 = undefined;
    cmovznzU32(&x9, x3, (arg2[2]), (arg3[2]));
    var x10: u32 = undefined;
    cmovznzU32(&x10, x3, (arg2[3]), (arg3[3]));
    var x11: u32 = undefined;
    cmovznzU32(&x11, x3, (arg2[4]), (arg3[4]));
    var x12: u32 = undefined;
    cmovznzU32(&x12, x3, (arg2[5]), (arg3[5]));
    var x13: u32 = undefined;
    cmovznzU32(&x13, x3, (arg2[6]), (arg3[6]));
    var x14: u32 = undefined;
    cmovznzU32(&x14, x3, (arg2[7]), (arg3[7]));
    var x15: u32 = undefined;
    cmovznzU32(&x15, x3, (arg2[8]), (arg3[8]));
    var x16: u32 = undefined;
    var x17: u1 = undefined;
    addcarryxU32(&x16, &x17, 0x0, cast(u32, 0x1), (~(arg2[0])));
    var x18: u32 = undefined;
    var x19: u1 = undefined;
    addcarryxU32(&x18, &x19, x17, cast(u32, 0x0), (~(arg2[1])));
    var x20: u32 = undefined;
    var x21: u1 = undefined;
    addcarryxU32(&x20, &x21, x19, cast(u32, 0x0), (~(arg2[2])));
    var x22: u32 = undefined;
    var x23: u1 = undefined;
    addcarryxU32(&x22, &x23, x21, cast(u32, 0x0), (~(arg2[3])));
    var x24: u32 = undefined;
    var x25: u1 = undefined;
    addcarryxU32(&x24, &x25, x23, cast(u32, 0x0), (~(arg2[4])));
    var x26: u32 = undefined;
    var x27: u1 = undefined;
    addcarryxU32(&x26, &x27, x25, cast(u32, 0x0), (~(arg2[5])));
    var x28: u32 = undefined;
    var x29: u1 = undefined;
    addcarryxU32(&x28, &x29, x27, cast(u32, 0x0), (~(arg2[6])));
    var x30: u32 = undefined;
    var x31: u1 = undefined;
    addcarryxU32(&x30, &x31, x29, cast(u32, 0x0), (~(arg2[7])));
    var x32: u32 = undefined;
    var x33: u1 = undefined;
    addcarryxU32(&x32, &x33, x31, cast(u32, 0x0), (~(arg2[8])));
    var x34: u32 = undefined;
    cmovznzU32(&x34, x3, (arg3[0]), x16);
    var x35: u32 = undefined;
    cmovznzU32(&x35, x3, (arg3[1]), x18);
    var x36: u32 = undefined;
    cmovznzU32(&x36, x3, (arg3[2]), x20);
    var x37: u32 = undefined;
    cmovznzU32(&x37, x3, (arg3[3]), x22);
    var x38: u32 = undefined;
    cmovznzU32(&x38, x3, (arg3[4]), x24);
    var x39: u32 = undefined;
    cmovznzU32(&x39, x3, (arg3[5]), x26);
    var x40: u32 = undefined;
    cmovznzU32(&x40, x3, (arg3[6]), x28);
    var x41: u32 = undefined;
    cmovznzU32(&x41, x3, (arg3[7]), x30);
    var x42: u32 = undefined;
    cmovznzU32(&x42, x3, (arg3[8]), x32);
    var x43: u32 = undefined;
    cmovznzU32(&x43, x3, (arg4[0]), (arg5[0]));
    var x44: u32 = undefined;
    cmovznzU32(&x44, x3, (arg4[1]), (arg5[1]));
    var x45: u32 = undefined;
    cmovznzU32(&x45, x3, (arg4[2]), (arg5[2]));
    var x46: u32 = undefined;
    cmovznzU32(&x46, x3, (arg4[3]), (arg5[3]));
    var x47: u32 = undefined;
    cmovznzU32(&x47, x3, (arg4[4]), (arg5[4]));
    var x48: u32 = undefined;
    cmovznzU32(&x48, x3, (arg4[5]), (arg5[5]));
    var x49: u32 = undefined;
    cmovznzU32(&x49, x3, (arg4[6]), (arg5[6]));
    var x50: u32 = undefined;
    cmovznzU32(&x50, x3, (arg4[7]), (arg5[7]));
    var x51: u32 = undefined;
    var x52: u1 = undefined;
    addcarryxU32(&x51, &x52, 0x0, x43, x43);
    var x53: u32 = undefined;
    var x54: u1 = undefined;
    addcarryxU32(&x53, &x54, x52, x44, x44);
    var x55: u32 = undefined;
    var x56: u1 = undefined;
    addcarryxU32(&x55, &x56, x54, x45, x45);
    var x57: u32 = undefined;
    var x58: u1 = undefined;
    addcarryxU32(&x57, &x58, x56, x46, x46);
    var x59: u32 = undefined;
    var x60: u1 = undefined;
    addcarryxU32(&x59, &x60, x58, x47, x47);
    var x61: u32 = undefined;
    var x62: u1 = undefined;
    addcarryxU32(&x61, &x62, x60, x48, x48);
    var x63: u32 = undefined;
    var x64: u1 = undefined;
    addcarryxU32(&x63, &x64, x62, x49, x49);
    var x65: u32 = undefined;
    var x66: u1 = undefined;
    addcarryxU32(&x65, &x66, x64, x50, x50);
    var x67: u32 = undefined;
    var x68: u1 = undefined;
    subborrowxU32(&x67, &x68, 0x0, x51, 0xffffffff);
    var x69: u32 = undefined;
    var x70: u1 = undefined;
    subborrowxU32(&x69, &x70, x68, x53, 0xffffffff);
    var x71: u32 = undefined;
    var x72: u1 = undefined;
    subborrowxU32(&x71, &x72, x70, x55, 0xffffffff);
    var x73: u32 = undefined;
    var x74: u1 = undefined;
    subborrowxU32(&x73, &x74, x72, x57, cast(u32, 0x0));
    var x75: u32 = undefined;
    var x76: u1 = undefined;
    subborrowxU32(&x75, &x76, x74, x59, cast(u32, 0x0));
    var x77: u32 = undefined;
    var x78: u1 = undefined;
    subborrowxU32(&x77, &x78, x76, x61, cast(u32, 0x0));
    var x79: u32 = undefined;
    var x80: u1 = undefined;
    subborrowxU32(&x79, &x80, x78, x63, cast(u32, 0x1));
    var x81: u32 = undefined;
    var x82: u1 = undefined;
    subborrowxU32(&x81, &x82, x80, x65, 0xffffffff);
    var x83: u32 = undefined;
    var x84: u1 = undefined;
    subborrowxU32(&x83, &x84, x82, cast(u32, x66), cast(u32, 0x0));
    const x85 = (arg4[7]);
    const x86 = (arg4[6]);
    const x87 = (arg4[5]);
    const x88 = (arg4[4]);
    const x89 = (arg4[3]);
    const x90 = (arg4[2]);
    const x91 = (arg4[1]);
    const x92 = (arg4[0]);
    var x93: u32 = undefined;
    var x94: u1 = undefined;
    subborrowxU32(&x93, &x94, 0x0, cast(u32, 0x0), x92);
    var x95: u32 = undefined;
    var x96: u1 = undefined;
    subborrowxU32(&x95, &x96, x94, cast(u32, 0x0), x91);
    var x97: u32 = undefined;
    var x98: u1 = undefined;
    subborrowxU32(&x97, &x98, x96, cast(u32, 0x0), x90);
    var x99: u32 = undefined;
    var x100: u1 = undefined;
    subborrowxU32(&x99, &x100, x98, cast(u32, 0x0), x89);
    var x101: u32 = undefined;
    var x102: u1 = undefined;
    subborrowxU32(&x101, &x102, x100, cast(u32, 0x0), x88);
    var x103: u32 = undefined;
    var x104: u1 = undefined;
    subborrowxU32(&x103, &x104, x102, cast(u32, 0x0), x87);
    var x105: u32 = undefined;
    var x106: u1 = undefined;
    subborrowxU32(&x105, &x106, x104, cast(u32, 0x0), x86);
    var x107: u32 = undefined;
    var x108: u1 = undefined;
    subborrowxU32(&x107, &x108, x106, cast(u32, 0x0), x85);
    var x109: u32 = undefined;
    cmovznzU32(&x109, x108, cast(u32, 0x0), 0xffffffff);
    var x110: u32 = undefined;
    var x111: u1 = undefined;
    addcarryxU32(&x110, &x111, 0x0, x93, x109);
    var x112: u32 = undefined;
    var x113: u1 = undefined;
    addcarryxU32(&x112, &x113, x111, x95, x109);
    var x114: u32 = undefined;
    var x115: u1 = undefined;
    addcarryxU32(&x114, &x115, x113, x97, x109);
    var x116: u32 = undefined;
    var x117: u1 = undefined;
    addcarryxU32(&x116, &x117, x115, x99, cast(u32, 0x0));
    var x118: u32 = undefined;
    var x119: u1 = undefined;
    addcarryxU32(&x118, &x119, x117, x101, cast(u32, 0x0));
    var x120: u32 = undefined;
    var x121: u1 = undefined;
    addcarryxU32(&x120, &x121, x119, x103, cast(u32, 0x0));
    var x122: u32 = undefined;
    var x123: u1 = undefined;
    addcarryxU32(&x122, &x123, x121, x105, cast(u32, cast(u1, (x109 & cast(u32, 0x1)))));
    var x124: u32 = undefined;
    var x125: u1 = undefined;
    addcarryxU32(&x124, &x125, x123, x107, x109);
    var x126: u32 = undefined;
    cmovznzU32(&x126, x3, (arg5[0]), x110);
    var x127: u32 = undefined;
    cmovznzU32(&x127, x3, (arg5[1]), x112);
    var x128: u32 = undefined;
    cmovznzU32(&x128, x3, (arg5[2]), x114);
    var x129: u32 = undefined;
    cmovznzU32(&x129, x3, (arg5[3]), x116);
    var x130: u32 = undefined;
    cmovznzU32(&x130, x3, (arg5[4]), x118);
    var x131: u32 = undefined;
    cmovznzU32(&x131, x3, (arg5[5]), x120);
    var x132: u32 = undefined;
    cmovznzU32(&x132, x3, (arg5[6]), x122);
    var x133: u32 = undefined;
    cmovznzU32(&x133, x3, (arg5[7]), x124);
    const x134 = cast(u1, (x34 & cast(u32, 0x1)));
    var x135: u32 = undefined;
    cmovznzU32(&x135, x134, cast(u32, 0x0), x7);
    var x136: u32 = undefined;
    cmovznzU32(&x136, x134, cast(u32, 0x0), x8);
    var x137: u32 = undefined;
    cmovznzU32(&x137, x134, cast(u32, 0x0), x9);
    var x138: u32 = undefined;
    cmovznzU32(&x138, x134, cast(u32, 0x0), x10);
    var x139: u32 = undefined;
    cmovznzU32(&x139, x134, cast(u32, 0x0), x11);
    var x140: u32 = undefined;
    cmovznzU32(&x140, x134, cast(u32, 0x0), x12);
    var x141: u32 = undefined;
    cmovznzU32(&x141, x134, cast(u32, 0x0), x13);
    var x142: u32 = undefined;
    cmovznzU32(&x142, x134, cast(u32, 0x0), x14);
    var x143: u32 = undefined;
    cmovznzU32(&x143, x134, cast(u32, 0x0), x15);
    var x144: u32 = undefined;
    var x145: u1 = undefined;
    addcarryxU32(&x144, &x145, 0x0, x34, x135);
    var x146: u32 = undefined;
    var x147: u1 = undefined;
    addcarryxU32(&x146, &x147, x145, x35, x136);
    var x148: u32 = undefined;
    var x149: u1 = undefined;
    addcarryxU32(&x148, &x149, x147, x36, x137);
    var x150: u32 = undefined;
    var x151: u1 = undefined;
    addcarryxU32(&x150, &x151, x149, x37, x138);
    var x152: u32 = undefined;
    var x153: u1 = undefined;
    addcarryxU32(&x152, &x153, x151, x38, x139);
    var x154: u32 = undefined;
    var x155: u1 = undefined;
    addcarryxU32(&x154, &x155, x153, x39, x140);
    var x156: u32 = undefined;
    var x157: u1 = undefined;
    addcarryxU32(&x156, &x157, x155, x40, x141);
    var x158: u32 = undefined;
    var x159: u1 = undefined;
    addcarryxU32(&x158, &x159, x157, x41, x142);
    var x160: u32 = undefined;
    var x161: u1 = undefined;
    addcarryxU32(&x160, &x161, x159, x42, x143);
    var x162: u32 = undefined;
    cmovznzU32(&x162, x134, cast(u32, 0x0), x43);
    var x163: u32 = undefined;
    cmovznzU32(&x163, x134, cast(u32, 0x0), x44);
    var x164: u32 = undefined;
    cmovznzU32(&x164, x134, cast(u32, 0x0), x45);
    var x165: u32 = undefined;
    cmovznzU32(&x165, x134, cast(u32, 0x0), x46);
    var x166: u32 = undefined;
    cmovznzU32(&x166, x134, cast(u32, 0x0), x47);
    var x167: u32 = undefined;
    cmovznzU32(&x167, x134, cast(u32, 0x0), x48);
    var x168: u32 = undefined;
    cmovznzU32(&x168, x134, cast(u32, 0x0), x49);
    var x169: u32 = undefined;
    cmovznzU32(&x169, x134, cast(u32, 0x0), x50);
    var x170: u32 = undefined;
    var x171: u1 = undefined;
    addcarryxU32(&x170, &x171, 0x0, x126, x162);
    var x172: u32 = undefined;
    var x173: u1 = undefined;
    addcarryxU32(&x172, &x173, x171, x127, x163);
    var x174: u32 = undefined;
    var x175: u1 = undefined;
    addcarryxU32(&x174, &x175, x173, x128, x164);
    var x176: u32 = undefined;
    var x177: u1 = undefined;
    addcarryxU32(&x176, &x177, x175, x129, x165);
    var x178: u32 = undefined;
    var x179: u1 = undefined;
    addcarryxU32(&x178, &x179, x177, x130, x166);
    var x180: u32 = undefined;
    var x181: u1 = undefined;
    addcarryxU32(&x180, &x181, x179, x131, x167);
    var x182: u32 = undefined;
    var x183: u1 = undefined;
    addcarryxU32(&x182, &x183, x181, x132, x168);
    var x184: u32 = undefined;
    var x185: u1 = undefined;
    addcarryxU32(&x184, &x185, x183, x133, x169);
    var x186: u32 = undefined;
    var x187: u1 = undefined;
    subborrowxU32(&x186, &x187, 0x0, x170, 0xffffffff);
    var x188: u32 = undefined;
    var x189: u1 = undefined;
    subborrowxU32(&x188, &x189, x187, x172, 0xffffffff);
    var x190: u32 = undefined;
    var x191: u1 = undefined;
    subborrowxU32(&x190, &x191, x189, x174, 0xffffffff);
    var x192: u32 = undefined;
    var x193: u1 = undefined;
    subborrowxU32(&x192, &x193, x191, x176, cast(u32, 0x0));
    var x194: u32 = undefined;
    var x195: u1 = undefined;
    subborrowxU32(&x194, &x195, x193, x178, cast(u32, 0x0));
    var x196: u32 = undefined;
    var x197: u1 = undefined;
    subborrowxU32(&x196, &x197, x195, x180, cast(u32, 0x0));
    var x198: u32 = undefined;
    var x199: u1 = undefined;
    subborrowxU32(&x198, &x199, x197, x182, cast(u32, 0x1));
    var x200: u32 = undefined;
    var x201: u1 = undefined;
    subborrowxU32(&x200, &x201, x199, x184, 0xffffffff);
    var x202: u32 = undefined;
    var x203: u1 = undefined;
    subborrowxU32(&x202, &x203, x201, cast(u32, x185), cast(u32, 0x0));
    var x204: u32 = undefined;
    var x205: u1 = undefined;
    addcarryxU32(&x204, &x205, 0x0, x6, cast(u32, 0x1));
    const x206 = ((x144 >> 1) | ((x146 << 31) & 0xffffffff));
    const x207 = ((x146 >> 1) | ((x148 << 31) & 0xffffffff));
    const x208 = ((x148 >> 1) | ((x150 << 31) & 0xffffffff));
    const x209 = ((x150 >> 1) | ((x152 << 31) & 0xffffffff));
    const x210 = ((x152 >> 1) | ((x154 << 31) & 0xffffffff));
    const x211 = ((x154 >> 1) | ((x156 << 31) & 0xffffffff));
    const x212 = ((x156 >> 1) | ((x158 << 31) & 0xffffffff));
    const x213 = ((x158 >> 1) | ((x160 << 31) & 0xffffffff));
    const x214 = ((x160 & 0x80000000) | (x160 >> 1));
    var x215: u32 = undefined;
    cmovznzU32(&x215, x84, x67, x51);
    var x216: u32 = undefined;
    cmovznzU32(&x216, x84, x69, x53);
    var x217: u32 = undefined;
    cmovznzU32(&x217, x84, x71, x55);
    var x218: u32 = undefined;
    cmovznzU32(&x218, x84, x73, x57);
    var x219: u32 = undefined;
    cmovznzU32(&x219, x84, x75, x59);
    var x220: u32 = undefined;
    cmovznzU32(&x220, x84, x77, x61);
    var x221: u32 = undefined;
    cmovznzU32(&x221, x84, x79, x63);
    var x222: u32 = undefined;
    cmovznzU32(&x222, x84, x81, x65);
    var x223: u32 = undefined;
    cmovznzU32(&x223, x203, x186, x170);
    var x224: u32 = undefined;
    cmovznzU32(&x224, x203, x188, x172);
    var x225: u32 = undefined;
    cmovznzU32(&x225, x203, x190, x174);
    var x226: u32 = undefined;
    cmovznzU32(&x226, x203, x192, x176);
    var x227: u32 = undefined;
    cmovznzU32(&x227, x203, x194, x178);
    var x228: u32 = undefined;
    cmovznzU32(&x228, x203, x196, x180);
    var x229: u32 = undefined;
    cmovznzU32(&x229, x203, x198, x182);
    var x230: u32 = undefined;
    cmovznzU32(&x230, x203, x200, x184);
    out1.* = x204;
    out2[0] = x7;
    out2[1] = x8;
    out2[2] = x9;
    out2[3] = x10;
    out2[4] = x11;
    out2[5] = x12;
    out2[6] = x13;
    out2[7] = x14;
    out2[8] = x15;
    out3[0] = x206;
    out3[1] = x207;
    out3[2] = x208;
    out3[3] = x209;
    out3[4] = x210;
    out3[5] = x211;
    out3[6] = x212;
    out3[7] = x213;
    out3[8] = x214;
    out4[0] = x215;
    out4[1] = x216;
    out4[2] = x217;
    out4[3] = x218;
    out4[4] = x219;
    out4[5] = x220;
    out4[6] = x221;
    out4[7] = x222;
    out5[0] = x223;
    out5[1] = x224;
    out5[2] = x225;
    out5[3] = x226;
    out5[4] = x227;
    out5[5] = x228;
    out5[6] = x229;
    out5[7] = x230;
}

/// The function divstepPrecomp returns the precomputed value for Bernstein-Yang-inversion (in montgomery form).
///
/// Postconditions:
///   eval (from_montgomery out1) = ⌊(m - 1) / 2⌋^(if ⌊log2 m⌋ + 1 < 46 then ⌊(49 * (⌊log2 m⌋ + 1) + 80) / 17⌋ else ⌊(49 * (⌊log2 m⌋ + 1) + 57) / 17⌋)
///   0 ≤ eval out1 < m
///
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
pub fn divstepPrecomp(out1: *[8]u32) void {
    @setRuntimeSafety(mode == .Debug);

    out1[0] = 0xb8000000;
    out1[1] = 0x67ffffff;
    out1[2] = 0x38000000;
    out1[3] = 0xc0000000;
    out1[4] = 0x7fffffff;
    out1[5] = 0xd8000000;
    out1[6] = 0xffffffff;
    out1[7] = 0x2fffffff;
}
