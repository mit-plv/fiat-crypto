Require Import Coq.Strings.String Coq.Lists.List.
Import ListNotations.
Local Open Scope string_scope.
Local Open Scope list_scope.
Example example : list string := [
"SECTION .text";
"	GLOBAL fiat_p256_square_optimised";
"";
"fiat_p256_square_optimised:";
"	sub rsp, 0xd0 ";
"	mov [rsp + 0x08 * 19 ], rbx; saving to stack";
"	mov [rsp + 0x08 * 20 ], rbp; saving to stack";
"	mov [rsp + 0x08 * 21 ], r12; saving to stack";
"	mov [rsp + 0x08 * 22 ], r13; saving to stack";
"	mov [rsp + 0x08 * 23 ], r14; saving to stack";
"	mov [rsp + 0x08 * 24 ], r15; saving to stack";
"	; rdi contains out1";
"	; rsi contains arg1";
"	; fr:rax,r10,r11,rbx,rbp,r12,r13,r14,r15,rdx,rcx,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi""]";
"	;chose >>RANDOMLY<< rcx from candidates :rax, r10, r11, rbx, rbp, r12, r13, r14, r15, rdx, rcx, r8, r9[10].";
"	mov rcx, [rsi + 0x08 * 0 ]; load m64 x4 to register64";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:rcx""]";
"	;chose >>saved<< x4 from:x4, arg1[1][0] and candidates: x4, arg1[1]";
"	mov rdx, rcx; x4 to rdx";
"	; fr:rax,r10,r11,rbx,rbp,r12,r13,r14,r15,rcx,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:rdx""]";
"	;chose >>RANDOMLY<< r10 from candidates :rax, r10, r11, rbx, rbp, r12, r13, r14, r15, rcx, r8, r9[1].";
"	; fr:rax,r11,rbx,rbp,r12,r13,r14,r15,rcx,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:rdx"",""x10:r10""]";
"	;chose >>RANDOMLY<< r11 from candidates :rax, r11, rbx, rbp, r12, r13, r14, r15, rcx, r8, r9[1].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:rdx"",""x10:r10"",""x9:r11""]";
"	mulx r10, r11, [rsi + 0x08 * 1 ]; x10, x9<- x4 * arg1[1]";
"	; fr:rax,rbx,rbp,r12,r13,r14,r15,rcx,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:rdx"",""x10:r10"",""x9:r11""]";
"	;chose >>RANDOMLY<< rax from candidates :rax, rbx, rbp, r12, r13, r14, r15, rcx, r8, r9[0].";
"	; fr:rbx,rbp,r12,r13,r14,r15,rcx,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:rdx"",""x10:r10"",""x9:r11"",""x12:rax""]";
"	;chose >>RANDOMLY<< r15 from candidates :rbx, rbp, r12, r13, r14, r15, rcx, r8, r9[5].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:rdx"",""x10:r10"",""x9:r11"",""x12:rax"",""x11:r15""]";
"	mulx rax, r15, [rsi + 0x08 * 0 ]; x12, x11<- x4 * arg1[0]";
"	; fr:rbx,rbp,r12,r13,r14,rcx,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:rdx"",""x10:r10"",""x9:r11"",""x12:rax"",""x11:r15""]";
"	;chose >>RANDOMLY<< r13 from candidates :rbx, rbp, r12, r13, r14, rcx, r8, r9[3].";
"	mov r13, 0xffffffffffffffff ; moving imm to reg";
"	;chose >>saved<< x11 from:x11, 0xffffffffffffffff[0] and candidates: x11, 0xffffffffffffffff";
"	xchg rdx, r15; x11, swapping with x4, which is currently in rdx";
"	; fr:rbx,rbp,r12,r14,rcx,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r15"",""x10:r10"",""x9:r11"",""x12:rax"",""x11:rdx"",""0xffffffffffffffff:r13""]";
"	;chose >>RANDOMLY<< rcx from candidates :rbx, rbp, r12, r14, rcx, r8, r9[4].";
"	; fr:rbx,rbp,r12,r14,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r15"",""x10:r10"",""x9:r11"",""x12:rax"",""x11:rdx"",""0xffffffffffffffff:r13"",""x25:rcx""]";
"	;chose >>RANDOMLY<< r9 from candidates :rbx, rbp, r12, r14, r8, r9[5].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r15"",""x10:r10"",""x9:r11"",""x12:rax"",""x11:rdx"",""0xffffffffffffffff:r13"",""x25:rcx"",""x24:r9""]";
"	mulx rcx, r9, r13; x25, x24<- x11 * 0xffffffffffffffff";
"	";
"";
"	; add:";
"	; r:_,f:x30<-add(0x0,x11,x24)";
"	; CF: KILLED,OF: KILLED";
"	; fr:rbx,rbp,r12,r14,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r15"",""x10:r10"",""x9:r11"",""x12:rax"",""x11:rdx"",""0xffffffffffffffff:r13"",""x25:rcx"",""x24:r9""]";
"	;chose >>RANDOMLY<< rbp from candidates :rbx, rbp, r12, r14, r8[1].";
"	mov rbp,  rdx; _, copying x11 here, cause x11 is needed in a reg for other than _, namely all: , x22--x23, x20--x21, _--x30, size: 3";
"	;chose >>saved<< c_add from:c_add, c_xor_adx, c_test_adx[0] and candidates: c_add, c_xor_adx, c_test_adx";
"	add rbp, r9; could be done better, if r0 has been u8 as well";
"	";
"";
"	; add:";
"	; r:x13,f:x14<-add(0x0,x12,x9)";
"	; CF: ALIVE,OF: KILLED";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:rbx,rbp,r12,r14,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r15"",""x10:r10"",""x9:r11"",""x11:rdx"",""0xffffffffffffffff:r13"",""x25:rcx"",""x24:r9"",""x30:CF"",""x13:rax""]";
"	;chose >>RANDOMLY<< r12 from candidates :rbx, rbp, r12, r14, r8[2].";
"	mov r12, 0x0 ; moving imm to reg";
"	dec r12; OF<-0x0, preserve CF 3";
"	adox rax, r11";
"	; fr:rbx,rbp,r14,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r15"",""x10:r10"",""x9:r11"",""x11:rdx"",""0xffffffffffffffff:r13"",""x25:rcx"",""x24:r9"",""x30:CF"",""x13:rax"",""-0x1:r12"",""x14:OF""]";
"	;chose >>RANDOMLY<< r8 from candidates :rbx, rbp, r14, r8[3].";
"	mov r8, 0xffffffff ; moving imm to reg";
"	; fr:rbx,rbp,r14";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r15"",""x10:r10"",""x9:r11"",""x11:rdx"",""0xffffffffffffffff:r13"",""x25:rcx"",""x24:r9"",""x30:CF"",""x13:rax"",""-0x1:r12"",""x14:OF"",""0xffffffff:r8""]";
"	;chose >>RANDOMLY<< rbp from candidates :rbx, rbp, r14[1].";
"	; fr:rbx,r14";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r15"",""x10:r10"",""x9:r11"",""x11:rdx"",""0xffffffffffffffff:r13"",""x25:rcx"",""x24:r9"",""x30:CF"",""x13:rax"",""-0x1:r12"",""x14:OF"",""0xffffffff:r8"",""x23:rbp""]";
"	;chose >>RANDOMLY<< rbx from candidates :rbx, r14[0].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r15"",""x10:r10"",""x9:r11"",""x11:rdx"",""0xffffffffffffffff:r13"",""x25:rcx"",""x24:r9"",""x30:CF"",""x13:rax"",""-0x1:r12"",""x14:OF"",""0xffffffff:r8"",""x23:rbp"",""x22:rbx""]";
"	mulx rbp, rbx, r8; x23, x22<- x11 * 0xffffffff";
"	";
"";
"	; add:";
"	; r:x26,f:x27<-add(0x0,x25,x22)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:r14";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r15"",""x10:r10"",""x9:r11"",""x11:rdx"",""0xffffffffffffffff:r13"",""x24:r9"",""x30:CF"",""x13:rax"",""-0x1:r12"",""x14:OF"",""0xffffffff:r8"",""x23:rbp"",""x22:rbx"",""x26:rcx""]";
"	;chose >>RANDOMLY<< r14 from candidates :r14[0].";
"	seto r14b; spill OF x14 to reg (r14)";
"	inc r12; OF<-0x0, preserve CF 2";
"	adox rcx, rbx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r15"",""x10:r10"",""x9:r11"",""x11:rdx"",""0xffffffffffffffff:r13"",""x24:r9"",""x30:CF"",""x13:rax"",""x14:r14b"",""0xffffffff:r8"",""x23:rbp"",""x22:rbx"",""x26:rcx"",""0x0:r12"",""x27:OF""]";
"	; freeing x9 (r11) no dependants anymore";
"	mov r11, [rsi + 0x08 * 1 ]; load m64 x1 to register64";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r15"",""x10:r10"",""x11:rdx"",""0xffffffffffffffff:r13"",""x24:r9"",""x30:CF"",""x13:rax"",""x14:r14b"",""0xffffffff:r8"",""x23:rbp"",""x22:rbx"",""x26:rcx"",""0x0:r12"",""x27:OF"",""x1:r11""]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r15"",""x10:r10"",""x11:rdx"",""0xffffffffffffffff:r13"",""x24:r9"",""x30:CF"",""x13:rax"",""x14:r14b"",""0xffffffff:r8"",""x23:rbp"",""x22:rbx"",""x26:rcx"",""0x0:r12"",""x27:OF"",""x1:r11""]";
"	; freeing x24 (r9) no dependants anymore";
"	mov r9, [rsi + 0x08 * 2 ]; load m64 x2 to register64";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r15"",""x10:r10"",""x11:rdx"",""0xffffffffffffffff:r13"",""x30:CF"",""x13:rax"",""x14:r14b"",""0xffffffff:r8"",""x23:rbp"",""x22:rbx"",""x26:rcx"",""0x0:r12"",""x27:OF"",""x1:r11"",""x2:r9""]";
"	;chose >>saved<< arg1[0] from:x1, arg1[0][1] and candidates: x1, arg1[0]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r15"",""x10:r10"",""x11:rdx"",""0xffffffffffffffff:r13"",""x30:CF"",""x13:rax"",""x14:r14b"",""0xffffffff:r8"",""x23:rbp"",""x22:rbx"",""x26:rcx"",""0x0:r12"",""x27:OF"",""x1:r11"",""x2:r9"",""arg1[0]:rdx""]";
"	; freeing x22 (rbx) no dependants anymore";
"	mov rbx, rdx; preserving value of x11 into a new reg";
"	mov rdx, [rsi + 0x08 * 0 ]; saving arg1[0] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r15"",""x10:r10"",""x11:rbx"",""0xffffffffffffffff:r13"",""x30:CF"",""x13:rax"",""x14:r14b"",""0xffffffff:r8"",""x23:rbp"",""x26:rcx"",""0x0:r12"",""x27:OF"",""x1:r11"",""x2:r9"",""arg1[0]:rdx""]";
"	; freeing 0x0 (r12, since all are neeed, but this one is just an immediate value.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r15"",""x10:r10"",""x11:rbx"",""0xffffffffffffffff:r13"",""x30:CF"",""x13:rax"",""x14:r14b"",""0xffffffff:r8"",""x23:rbp"",""x26:rcx"",""x27:OF"",""x1:r11"",""x2:r9"",""arg1[0]:rdx"",""x46:r12""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: 0xffffffffffffffff, 0xffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x4(r15),x10(r10),x11(rbx),0xffffffffffffffff(r13),x13(rax),x14(r14b),0xffffffff(r8),x23(rbp),x26(rcx),x1(r11),x2(r9),arg1[0](rdx),x46(r12); clobs x45,x46,x1,arg1[0],arg1,x11,x11,x46; will spare: 0xffffffffffffffff ";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r15"",""x10:r10"",""x11:rbx"",""x30:CF"",""x13:rax"",""x14:r14b"",""0xffffffff:r8"",""x23:rbp"",""x26:rcx"",""x27:OF"",""x1:r11"",""x2:r9"",""arg1[0]:rdx"",""x46:r12"",""x45:r13""]";
"	mulx r12, r13, r11; x46, x45<- x1 * arg1[0]";
"	;chose >>saved<< arg1[2] from:x4, arg1[2][1] and candidates: x4, arg1[2]";
"	mov rdx, [rsi + 0x08 * 2 ]; arg1[2] to rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r15"",""x10:r10"",""x11:rbx"",""x30:CF"",""x13:rax"",""x14:r14b"",""0xffffffff:r8"",""x23:rbp"",""x26:rcx"",""x27:OF"",""x1:r11"",""x2:r9"",""x46:r12"",""x45:r13"",""arg1[2]:rdx""]";
"	;chose 0xffffffff to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: 0xffffffff";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x4(r15),x10(r10),x11(rbx),x13(rax),x14(r14b),0xffffffff(r8),x23(rbp),x26(rcx),x1(r11),x2(r9),x46(r12),x45(r13),arg1[2](rdx); clobs x7,x8,x4,arg1[2],arg1; will spare: 0xffffffff ";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r15"",""x10:r10"",""x11:rbx"",""x30:CF"",""x13:rax"",""x14:r14b"",""x23:rbp"",""x26:rcx"",""x27:OF"",""x1:r11"",""x2:r9"",""x46:r12"",""x45:r13"",""arg1[2]:rdx"",""x8:r8""]";
"	;chose x2 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: out1, x10, x11, x13, x14, x23, x26, x1, x2, x46, x45";
"	; freeing, i.e. spilling x2, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x4(r15),x10(r10),x11(rbx),x13(rax),x14(r14b),x23(rbp),x26(rcx),x1(r11),x2(r9),x46(r12),x45(r13),arg1[2](rdx),x8(r8); clobs x7,x8,x4,arg1[2],arg1,x8; will spare: x2 ";
"	mov [rsp + 0x08 * 0 ], r9; spilling x2 to mem";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r15"",""x10:r10"",""x11:rbx"",""x30:CF"",""x13:rax"",""x14:r14b"",""x23:rbp"",""x26:rcx"",""x27:OF"",""x1:r11"",""x46:r12"",""x45:r13"",""arg1[2]:rdx"",""x8:r8"",""x7:r9""]";
"	mulx r8, r9, r15; x8, x7<- x4 * arg1[2]";
"	";
"";
"	; add:";
"	; r:x31,f:x32<-add(x30,x13,x26)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx rcx, rax";
"	";
"";
"	; add:";
"	; r:x54,f:x55<-add(0x0,x31,x45)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r15"",""x10:r10"",""x11:rbx"",""x13:rax"",""x14:r14b"",""x23:rbp"",""x27:OF"",""x1:r11"",""x46:r12"",""x45:r13"",""arg1[2]:rdx"",""x8:r8"",""x7:r9"",""x32:CF"",""x54:rcx""]";
"	; freeing x13 (rax) no dependants anymore";
"	setc al; spill CF x32 to reg (rax)";
"	clc;";
"	adcx rcx, r13";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r15"",""x10:r10"",""x11:rbx"",""x14:r14b"",""x23:rbp"",""x27:OF"",""x1:r11"",""x46:r12"",""x45:r13"",""arg1[2]:rdx"",""x8:r8"",""x7:r9"",""x32:al"",""x54:rcx"",""x55:CF""]";
"	; freeing x45 (r13) no dependants anymore";
"	mov r13, 0xffffffffffffffff ; moving imm to reg";
"	;chose >>saved<< 0xffffffffffffffff from:x54, 0xffffffffffffffff[1] and candidates: x54, 0xffffffffffffffff";
"	mov rdx, r13; 0xffffffffffffffff to rdx";
"	; fr:r13";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r15"",""x10:r10"",""x11:rbx"",""x14:r14b"",""x23:rbp"",""x27:OF"",""x1:r11"",""x46:r12"",""x8:r8"",""x7:r9"",""x32:al"",""x54:rcx"",""x55:CF"",""0xffffffffffffffff:rdx""]";
"	;chose >>RANDOMLY<< r13 from candidates :r13[0].";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r15"",""x10:r10"",""x11:rbx"",""x14:r14b"",""x23:rbp"",""x27:OF"",""x1:r11"",""x46:r12"",""x8:r8"",""x7:r9"",""x32:al"",""x54:rcx"",""x55:CF"",""0xffffffffffffffff:rdx"",""x69:r13""]";
"	;chose out1 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: out1, arg1, x4, x10, x11, x14, x23, x1, x46, x8, x7, x32";
"	; freeing, i.e. spilling out1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x4(r15),x10(r10),x11(rbx),x14(r14b),x23(rbp),x1(r11),x46(r12),x8(r8),x7(r9),x32(al),x54(rcx),0xffffffffffffffff(rdx),x69(r13); clobs x68,x69,x54,0xffffffffffffffff,0xffffffffffffffff,0xffffffffffffffff; will spare: out1 ";
"	mov [rsp + 0x08 * 1 ], rdi; spilling out1 to mem";
"	;-- allocation: [""arg1:rsi"",""x4:r15"",""x10:r10"",""x11:rbx"",""x14:r14b"",""x23:rbp"",""x27:OF"",""x1:r11"",""x46:r12"",""x8:r8"",""x7:r9"",""x32:al"",""x54:rcx"",""x55:CF"",""0xffffffffffffffff:rdx"",""x69:r13"",""x68:rdi""]";
"	mulx r13, rdi, rcx; x69, x68<- x54 * 0xffffffffffffffff";
"	";
"";
"	; add:";
"	; r:x15,f:x16<-add(x14,x10,x7)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:r15"",""x11:rbx"",""x14:r14b"",""x23:rbp"",""x27:OF"",""x1:r11"",""x46:r12"",""x8:r8"",""x7:r9"",""x32:al"",""x54:rcx"",""x55:CF"",""0xffffffffffffffff:rdx"",""x69:r13"",""x68:rdi"",""x15:r10""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: 0xffffffffffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: arg1(rsi),x4(r15),x11(rbx),x14(r14b),x23(rbp),x1(r11),x46(r12),x8(r8),x7(r9),x32(al),x54(rcx),0xffffffffffffffff(rdx),x69(r13),x68(rdi),x15(r10); clobs x15,x16,x14,x10,x7,x10,x55; will spare: 0xffffffffffffffff ";
"	setc dl; spill CF x55 to reg (rdx)";
"	clc;";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:r15"",""x11:rbx"",""x14:r14b"",""x23:rbp"",""x27:OF"",""x1:r11"",""x46:r12"",""x8:r8"",""x7:r9"",""x32:al"",""x54:rcx"",""x55:dl"",""x69:r13"",""x68:rdi"",""x15:r10""]";
"	;chose x8 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: arg1, x4, x11, x23, x1, x46, x8, x32, x54, x69, x68";
"	; freeing, i.e. spilling x8, because I am out of ideas";
"	; allocs: arg1(rsi),x4(r15),x11(rbx),x14(r14b),x23(rbp),x1(r11),x46(r12),x8(r8),x7(r9),x32(al),x54(rcx),x55(dl),x69(r13),x68(rdi),x15(r10); clobs x15,x16,x14,x10,x7,x10,x55,x55,-0x1; will spare: x8 ";
"	mov [rsp + 0x08 * 2 ], r8; spilling x8 to mem";
"	mov r8, -0x1 ; moving imm to reg";
"	movzx r14, r14b";
"	adcx r14, r8; loading flag";
"	adcx r10, r9";
"	";
"";
"	; add:";
"	; r:_,f:x74<-add(0x0,x54,x68)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:r15"",""x11:rbx"",""x14:r14b"",""x23:rbp"",""x27:OF"",""x1:r11"",""x46:r12"",""x7:r9"",""x32:al"",""x54:rcx"",""x55:dl"",""x69:r13"",""x68:rdi"",""x15:r10"",""-0x1:r8"",""x16:CF""]";
"	; freeing x14 (r14b) no dependants anymore";
"	mov r14,  rcx; _, copying x54 here, cause x54 is needed in a reg for other than _, namely all: , x64--x65, x66--x67, _--x74, size: 3";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:r15"",""x11:rbx"",""x23:rbp"",""x27:OF"",""x1:r11"",""x46:r12"",""x7:r9"",""x32:al"",""x54:rcx"",""x55:dl"",""x69:r13"",""x68:rdi"",""x15:r10"",""-0x1:r8"",""x16:CF"",""_:r14""]";
"	; freeing x7 (r9) no dependants anymore";
"	setc r9b; spill CF x16 to reg (r9)";
"	clc;";
"	adcx r14, rdi";
"	;chose >>saved<< arg1[1] from:x1, arg1[1][1] and candidates: x1, arg1[1]";
"	; fr:r14";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:r15"",""x11:rbx"",""x23:rbp"",""x27:OF"",""x1:r11"",""x46:r12"",""x32:al"",""x54:rcx"",""x55:dl"",""x69:r13"",""x68:rdi"",""x15:r10"",""-0x1:r8"",""x16:r9b"",""x74:CF"",""arg1[1]:rdx""]";
"	;chose >>RANDOMLY<< r14 from candidates :r14[0].";
"	mov r14b, dl; preserving value of x55 into a new reg";
"	mov rdx, [rsi + 0x08 * 1 ]; saving arg1[1] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:r15"",""x11:rbx"",""x23:rbp"",""x27:OF"",""x1:r11"",""x46:r12"",""x32:al"",""x54:rcx"",""x55:r14b"",""x69:r13"",""x68:rdi"",""x15:r10"",""-0x1:r8"",""x16:r9b"",""x74:CF"",""arg1[1]:rdx""]";
"	; freeing x68 (rdi) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:r15"",""x11:rbx"",""x23:rbp"",""x27:OF"",""x1:r11"",""x46:r12"",""x32:al"",""x54:rcx"",""x55:r14b"",""x69:r13"",""x15:r10"",""-0x1:r8"",""x16:r9b"",""x74:CF"",""arg1[1]:rdx"",""x44:rdi""]";
"	;chose -0x1 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg1(rsi),x4(r15),x11(rbx),x23(rbp),x1(r11),x46(r12),x32(al),x54(rcx),x55(r14b),x69(r13),x15(r10),-0x1(r8),x16(r9b),arg1[1](rdx),x44(rdi); clobs x43,x44,x1,arg1[1],arg1,x55,x44; will spare: -0x1 ";
"	;-- allocation: [""arg1:rsi"",""x4:r15"",""x11:rbx"",""x23:rbp"",""x27:OF"",""x1:r11"",""x46:r12"",""x32:al"",""x54:rcx"",""x55:r14b"",""x69:r13"",""x15:r10"",""x16:r9b"",""x74:CF"",""arg1[1]:rdx"",""x44:rdi"",""x43:r8""]";
"	mulx rdi, r8, r11; x44, x43<- x1 * arg1[1]";
"	";
"";
"	; add:";
"	; r:x28,f:_<-add(x27,x23)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:r15"",""x11:rbx"",""x27:OF"",""x1:r11"",""x46:r12"",""x32:al"",""x54:rcx"",""x55:r14b"",""x69:r13"",""x15:r10"",""x16:r9b"",""x74:CF"",""arg1[1]:rdx"",""x44:rdi"",""x43:r8"",""x28:rbp""]";
"	;chose arg1[1] to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: arg1[1]";
"	; freeing, i.e. spilling arg1[1], because I am out of ideas";
"	; allocs: arg1(rsi),x4(r15),x11(rbx),x1(r11),x46(r12),x32(al),x54(rcx),x55(r14b),x69(r13),x15(r10),x16(r9b),arg1[1](rdx),x44(rdi),x43(r8),x28(rbp); clobs x28,x27,x23,x23,0x0; will spare: arg1[1] ";
"	mov rdx, 0x0 ; moving imm to reg";
"	adox rbp, rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:r15"",""x11:rbx"",""x27:OF"",""x1:r11"",""x46:r12"",""x32:al"",""x54:rcx"",""x55:r14b"",""x69:r13"",""x15:r10"",""x16:r9b"",""x74:CF"",""x44:rdi"",""x43:r8"",""x28:rbp"",""0x0:rdx""]";
"	; freeing 0x0 (rdx, since all are neeed, but this one is just an immediate value.";
"	mov rdx, 0xffffffff ; moving imm to reg";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:r15"",""x11:rbx"",""x27:OF"",""x1:r11"",""x46:r12"",""x32:al"",""x54:rcx"",""x55:r14b"",""x69:r13"",""x15:r10"",""x16:r9b"",""x74:CF"",""x44:rdi"",""x43:r8"",""x28:rbp"",""0xffffffff:rdx""]";
"	;chose x16 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: arg1, x4, x11, x1, x46, x32, x55, x69, x15, x16, x44, x43, x28";
"	; freeing, i.e. spilling x16, because I am out of ideas";
"	; allocs: arg1(rsi),x4(r15),x11(rbx),x1(r11),x46(r12),x32(al),x54(rcx),x55(r14b),x69(r13),x15(r10),x16(r9b),x44(rdi),x43(r8),x28(rbp),0xffffffff(rdx); clobs x66,x67,x54,0xffffffff,0xffffffff,0xffffffff; will spare: x16 ";
"	mov byte [rsp + 0x08 * 3 ], r9b; spilling byte x16 to mem";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:r15"",""x11:rbx"",""x27:OF"",""x1:r11"",""x46:r12"",""x32:al"",""x54:rcx"",""x55:r14b"",""x69:r13"",""x15:r10"",""x74:CF"",""x44:rdi"",""x43:r8"",""x28:rbp"",""0xffffffff:rdx"",""x67:r9""]";
"	;chose x44 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: arg1, x4, x11, x1, x46, x32, x55, x69, x15, x44, x43, x28";
"	; freeing, i.e. spilling x44, because I am out of ideas";
"	; allocs: arg1(rsi),x4(r15),x11(rbx),x1(r11),x46(r12),x32(al),x54(rcx),x55(r14b),x69(r13),x15(r10),x44(rdi),x43(r8),x28(rbp),0xffffffff(rdx),x67(r9); clobs x66,x67,x54,0xffffffff,0xffffffff,0xffffffff,x67; will spare: x44 ";
"	mov [rsp + 0x08 * 4 ], rdi; spilling x44 to mem";
"	;-- allocation: [""arg1:rsi"",""x4:r15"",""x11:rbx"",""x27:OF"",""x1:r11"",""x46:r12"",""x32:al"",""x54:rcx"",""x55:r14b"",""x69:r13"",""x15:r10"",""x74:CF"",""x43:r8"",""x28:rbp"",""0xffffffff:rdx"",""x67:r9"",""x66:rdi""]";
"	mulx r9, rdi, rcx; x67, x66<- x54 * 0xffffffff";
"	";
"";
"	; add:";
"	; r:x47,f:x48<-add(0x0,x46,x43)";
"	; CF: ALIVE,OF: KILLED";
"	;chose >>saved<< -0x1 from:0x0, -0x1[1] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:r15"",""x11:rbx"",""x27:OF"",""x1:r11"",""x32:al"",""x54:rcx"",""x55:r14b"",""x69:r13"",""x15:r10"",""x74:CF"",""x43:r8"",""x28:rbp"",""0xffffffff:rdx"",""x67:r9"",""x66:rdi"",""x47:r12""]";
"	;chose 0xffffffff to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: 0xffffffff";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: arg1(rsi),x4(r15),x11(rbx),x1(r11),x32(al),x54(rcx),x55(r14b),x69(r13),x15(r10),x43(r8),x28(rbp),0xffffffff(rdx),x67(r9),x66(rdi),x47(r12); clobs x47,x48,0x0,x46,x43,x46,-0x1; will spare: 0xffffffff ";
"	mov rdx, -0x1 ; moving imm to reg";
"	inc rdx; OF<-0x0, preserve CF 2";
"	adox r12, r8";
"	";
"";
"	; add:";
"	; r:x33,f:x34<-add(x32,x15,x28)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:r15"",""x11:rbx"",""x1:r11"",""x32:al"",""x54:rcx"",""x55:r14b"",""x69:r13"",""x74:CF"",""x43:r8"",""x28:rbp"",""x67:r9"",""x66:rdi"",""x47:r12"",""0x0:rdx"",""x48:OF"",""x33:r10""]";
"	; freeing x43 (r8) no dependants anymore";
"	seto r8b; spill OF x48 to reg (r8)";
"	dec rdx; OF<-0x0, preserve CF 3";
"	movzx rax, al";
"	adox rax, rdx; loading flag";
"	adox r10, rbp";
"	";
"";
"	; add:";
"	; r:x70,f:x71<-add(0x0,x69,x66)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:r15"",""x11:rbx"",""x1:r11"",""x32:al"",""x54:rcx"",""x55:r14b"",""x74:CF"",""x28:rbp"",""x67:r9"",""x66:rdi"",""x47:r12"",""x48:r8b"",""x33:r10"",""-0x1:rdx"",""x34:OF"",""x70:r13""]";
"	; freeing x32 (al) no dependants anymore";
"	seto al; spill OF x34 to reg (rax)";
"	inc rdx; OF<-0x0, preserve CF 2";
"	adox r13, rdi";
"	;chose >>saved<< arg1[0] from:x2, arg1[0][1] and candidates: x2, arg1[0]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:r15"",""x11:rbx"",""x1:r11"",""x54:rcx"",""x55:r14b"",""x74:CF"",""x28:rbp"",""x67:r9"",""x66:rdi"",""x47:r12"",""x48:r8b"",""x33:r10"",""x34:al"",""x70:r13"",""0x0:rdx"",""x71:OF"",""arg1[0]:rdx""]";
"	; freeing x28 (rbp) no dependants anymore";
"	mov rbp, rdx; preserving value of 0x0 into a new reg";
"	mov rdx, [rsi + 0x08 * 0 ]; saving arg1[0] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:r15"",""x11:rbx"",""x1:r11"",""x54:rcx"",""x55:r14b"",""x74:CF"",""x67:r9"",""x66:rdi"",""x47:r12"",""x48:r8b"",""x33:r10"",""x34:al"",""x70:r13"",""0x0:rbp"",""x71:OF"",""arg1[0]:rdx""]";
"	; freeing x66 (rdi) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:r15"",""x11:rbx"",""x1:r11"",""x54:rcx"",""x55:r14b"",""x74:CF"",""x67:r9"",""x47:r12"",""x48:r8b"",""x33:r10"",""x34:al"",""x70:r13"",""0x0:rbp"",""x71:OF"",""arg1[0]:rdx"",""x91:rdi""]";
"	;chose x54 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: x4, x11, x1, x54, x55, x67, x47, x48, x33, x34, x70";
"	; freeing, i.e. spilling x54, because I am out of ideas";
"	; allocs: arg1(rsi),x4(r15),x11(rbx),x1(r11),x54(rcx),x55(r14b),x67(r9),x47(r12),x48(r8b),x33(r10),x34(al),x70(r13),0x0(rbp),arg1[0](rdx),x91(rdi); clobs x90,x91,x2,arg1[0],arg1,0x0,0x0,x91; will spare: x54 ";
"	mov [rsp + 0x08 * 5 ], rcx; spilling x54 to mem";
"	;-- allocation: [""arg1:rsi"",""x4:r15"",""x11:rbx"",""x1:r11"",""x55:r14b"",""x74:CF"",""x67:r9"",""x47:r12"",""x48:r8b"",""x33:r10"",""x34:al"",""x70:r13"",""0x0:rbp"",""x71:OF"",""arg1[0]:rdx"",""x91:rdi"",""x90:rcx""]";
"	mulx rdi, rcx, [rsp + 0x08 * 0 ]; x91, x90<- x2 * arg1[0]";
"	";
"";
"	; add:";
"	; r:x56,f:x57<-add(x55,x33,x47)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:r15"",""x11:rbx"",""x1:r11"",""x55:r14b"",""x74:CF"",""x67:r9"",""x47:r12"",""x48:r8b"",""x34:al"",""x70:r13"",""0x0:rbp"",""x71:OF"",""arg1[0]:rdx"",""x91:rdi"",""x90:rcx"",""x56:r10""]";
"	; freeing 0x0 (rbp, since all are neeed, but this one is just an immediate value.";
"	seto bpl; spill OF x71 to reg (rbp)";
"	;chose >>saved<< -0x1 from:0x0, -0x1[1] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:r15"",""x11:rbx"",""x1:r11"",""x55:r14b"",""x74:CF"",""x67:r9"",""x47:r12"",""x48:r8b"",""x34:al"",""x70:r13"",""x71:bpl"",""arg1[0]:rdx"",""x91:rdi"",""x90:rcx"",""x56:r10""]";
"	;chose arg1[0] to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: arg1[0]";
"	; freeing, i.e. spilling arg1[0], because I am out of ideas";
"	; allocs: arg1(rsi),x4(r15),x11(rbx),x1(r11),x55(r14b),x67(r9),x47(r12),x48(r8b),x34(al),x70(r13),x71(bpl),arg1[0](rdx),x91(rdi),x90(rcx),x56(r10); clobs x56,x57,x55,x33,x47,x33,x71,x71,-0x1; will spare: arg1[0] ";
"	mov rdx, -0x1 ; moving imm to reg";
"	inc rdx; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:r15"",""x11:rbx"",""x1:r11"",""x55:r14b"",""x74:CF"",""x67:r9"",""x47:r12"",""x48:r8b"",""x34:al"",""x70:r13"",""x71:bpl"",""x91:rdi"",""x90:rcx"",""x56:r10"",""0x0:rdx""]";
"	; freeing 0x0 (rdx, since all are neeed, but this one is just an immediate value.";
"	mov rdx, -0x1 ; moving imm to reg";
"	movzx r14, r14b";
"	adox r14, rdx; loading flag";
"	adox r10, r12";
"	;chose >>saved<< arg1[3] from:x4, arg1[3][1] and candidates: x4, arg1[3]";
"	mov rdx, [rsi + 0x08 * 3 ]; arg1[3] to rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x11:rbx"",""x1:r11"",""x55:r14b"",""x74:CF"",""x67:r9"",""x47:r12"",""x48:r8b"",""x34:al"",""x70:r13"",""x71:bpl"",""x91:rdi"",""x90:rcx"",""x56:r10"",""x57:OF"",""arg1[3]:rdx"",""x6:r15""]";
"	; freeing x55 (r14b) no dependants anymore";
"	;-- allocation: [""arg1:rsi"",""x11:rbx"",""x1:r11"",""x74:CF"",""x67:r9"",""x47:r12"",""x48:r8b"",""x34:al"",""x70:r13"",""x71:bpl"",""x91:rdi"",""x90:rcx"",""x56:r10"",""x57:OF"",""arg1[3]:rdx"",""x6:r15"",""x5:r14""]";
"	mulx r15, r14, r15; x6, x5<- x4 * arg1[3]";
"	";
"";
"	; add:";
"	; r:x75,f:x76<-add(x74,x56,x70)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx r13, r10";
"	";
"";
"	; add:";
"	; r:x99,f:x100<-add(0x0,x75,x90)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x11:rbx"",""x1:r11"",""x67:r9"",""x47:r12"",""x48:r8b"",""x34:al"",""x71:bpl"",""x91:rdi"",""x90:rcx"",""x56:r10"",""x57:OF"",""arg1[3]:rdx"",""x6:r15"",""x5:r14"",""x76:CF"",""x99:r13""]";
"	; freeing x47 (r12) no dependants anymore";
"	setc r12b; spill CF x76 to reg (r12)";
"	clc;";
"	adcx r13, rcx";
"	;chose >>saved<< arg1[2] from:x1, arg1[2][1] and candidates: x1, arg1[2]";
"	mov rdx, [rsi + 0x08 * 2 ]; arg1[2] to rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x11:rbx"",""x1:r11"",""x67:r9"",""x48:r8b"",""x34:al"",""x71:bpl"",""x91:rdi"",""x90:rcx"",""x56:r10"",""x57:OF"",""x6:r15"",""x5:r14"",""x76:r12b"",""x99:r13"",""x100:CF"",""arg1[2]:rdx""]";
"	; freeing x90 (rcx) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x11:rbx"",""x1:r11"",""x67:r9"",""x48:r8b"",""x34:al"",""x71:bpl"",""x91:rdi"",""x56:r10"",""x57:OF"",""x6:r15"",""x5:r14"",""x76:r12b"",""x99:r13"",""x100:CF"",""arg1[2]:rdx"",""x42:rcx""]";
"	; freeing x56 (r10) no dependants anymore";
"	;-- allocation: [""arg1:rsi"",""x11:rbx"",""x1:r11"",""x67:r9"",""x48:r8b"",""x34:al"",""x71:bpl"",""x91:rdi"",""x57:OF"",""x6:r15"",""x5:r14"",""x76:r12b"",""x99:r13"",""x100:CF"",""arg1[2]:rdx"",""x42:rcx"",""x41:r10""]";
"	mulx rcx, r10, r11; x42, x41<- x1 * arg1[2]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x11:rbx"",""x1:r11"",""x67:r9"",""x48:r8b"",""x34:al"",""x71:bpl"",""x91:rdi"",""x57:OF"",""x6:r15"",""x5:r14"",""x76:r12b"",""x99:r13"",""x100:CF"",""arg1[2]:rdx"",""x42:rcx"",""x41:r10""]";
"	;chose arg1[2] to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: arg1[2]";
"	; freeing, i.e. spilling arg1[2], because I am out of ideas";
"	; allocs: arg1(rsi),x11(rbx),x1(r11),x67(r9),x48(r8b),x34(al),x71(bpl),x91(rdi),x6(r15),x5(r14),x76(r12b),x99(r13),arg1[2](rdx),x42(rcx),x41(r10); clobs x113,x114,x99,0xffffffffffffffff,0xffffffffffffffff; will spare: arg1[2] ";
"	mov rdx, 0xffffffffffffffff ; moving imm to reg";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x11:rbx"",""x1:r11"",""x67:r9"",""x48:r8b"",""x34:al"",""x71:bpl"",""x91:rdi"",""x57:OF"",""x6:r15"",""x5:r14"",""x76:r12b"",""x99:r13"",""x100:CF"",""x42:rcx"",""x41:r10"",""0xffffffffffffffff:rdx""]";
"	;chose x6 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: arg1, x11, x1, x67, x48, x34, x71, x91, x6, x5, x76, x42, x41";
"	; freeing, i.e. spilling x6, because I am out of ideas";
"	; allocs: arg1(rsi),x11(rbx),x1(r11),x67(r9),x48(r8b),x34(al),x71(bpl),x91(rdi),x6(r15),x5(r14),x76(r12b),x99(r13),x42(rcx),x41(r10),0xffffffffffffffff(rdx); clobs x113,x114,x99,0xffffffffffffffff,0xffffffffffffffff,0xffffffffffffffff; will spare: x6 ";
"	mov [rsp + 0x08 * 6 ], r15; spilling x6 to mem";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x11:rbx"",""x1:r11"",""x67:r9"",""x48:r8b"",""x34:al"",""x71:bpl"",""x91:rdi"",""x57:OF"",""x5:r14"",""x76:r12b"",""x99:r13"",""x100:CF"",""x42:rcx"",""x41:r10"",""0xffffffffffffffff:rdx"",""x114:r15""]";
"	;chose x76 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: arg1, x11, x1, x67, x48, x34, x71, x91, x5, x76, x42, x41";
"	; freeing, i.e. spilling x76, because I am out of ideas";
"	; allocs: arg1(rsi),x11(rbx),x1(r11),x67(r9),x48(r8b),x34(al),x71(bpl),x91(rdi),x5(r14),x76(r12b),x99(r13),x42(rcx),x41(r10),0xffffffffffffffff(rdx),x114(r15); clobs x113,x114,x99,0xffffffffffffffff,0xffffffffffffffff,0xffffffffffffffff,x114; will spare: x76 ";
"	mov byte [rsp + 0x08 * 7 ], r12b; spilling byte x76 to mem";
"	;-- allocation: [""arg1:rsi"",""x11:rbx"",""x1:r11"",""x67:r9"",""x48:r8b"",""x34:al"",""x71:bpl"",""x91:rdi"",""x57:OF"",""x5:r14"",""x99:r13"",""x100:CF"",""x42:rcx"",""x41:r10"",""0xffffffffffffffff:rdx"",""x114:r15"",""x113:r12""]";
"	mulx r15, r12, r13; x114, x113<- x99 * 0xffffffffffffffff";
"	";
"";
"	; add:";
"	; r:_,f:x119<-add(0x0,x99,x113)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x11:rbx"",""x1:r11"",""x67:r9"",""x48:r8b"",""x34:al"",""x71:bpl"",""x91:rdi"",""x57:OF"",""x5:r14"",""x99:r13"",""x100:CF"",""x42:rcx"",""x41:r10"",""0xffffffffffffffff:rdx"",""x114:r15"",""x113:r12""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: 0xffffffffffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: arg1(rsi),x11(rbx),x1(r11),x67(r9),x48(r8b),x34(al),x71(bpl),x91(rdi),x5(r14),x99(r13),x42(rcx),x41(r10),0xffffffffffffffff(rdx),x114(r15),x113(r12); clobs _,x119,0x0,x99,x113,x99; will spare: 0xffffffffffffffff ";
"	mov rdx,  r13; _, copying x99 here, cause x99 is needed in a reg for other than _, namely all: , x111--x112, _--x119, x109--x110, size: 3";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x11:rbx"",""x1:r11"",""x67:r9"",""x48:r8b"",""x34:al"",""x71:bpl"",""x91:rdi"",""x57:OF"",""x5:r14"",""x99:r13"",""x100:CF"",""x42:rcx"",""x41:r10"",""x114:r15"",""x113:r12"",""_:rdx""]";
"	;chose x91 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: arg1, x11, x1, x67, x48, x34, x71, x91, x5, x42, x41, x114";
"	; freeing, i.e. spilling x91, because I am out of ideas";
"	; allocs: arg1(rsi),x11(rbx),x1(r11),x67(r9),x48(r8b),x34(al),x71(bpl),x91(rdi),x5(r14),x99(r13),x42(rcx),x41(r10),x114(r15),x113(r12),_(rdx); clobs _,x119,0x0,x99,x113,x99,_,x100; will spare: x91 ";
"	mov [rsp + 0x08 * 8 ], rdi; spilling x91 to mem";
"	setc dil; spill CF x100 to reg (rdi)";
"	clc;";
"	adcx rdx, r12";
"	; fr:rdx";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x11:rbx"",""x1:r11"",""x67:r9"",""x48:r8b"",""x34:al"",""x71:bpl"",""x57:OF"",""x5:r14"",""x99:r13"",""x100:dil"",""x42:rcx"",""x41:r10"",""x114:r15"",""x113:r12"",""x119:CF""]";
"	;chose >>RANDOMLY<< rdx from candidates :rdx[0].";
"	mov rdx, 0xffffffff00000001 ; moving imm to reg";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:r11"",""x67:r9"",""x48:r8b"",""x34:al"",""x71:bpl"",""x57:OF"",""x5:r14"",""x99:r13"",""x100:dil"",""x42:rcx"",""x41:r10"",""x114:r15"",""x113:r12"",""x119:CF"",""0xffffffff00000001:rdx"",""x21:rbx""]";
"	; freeing x113 (r12) no dependants anymore";
"	;-- allocation: [""arg1:rsi"",""x1:r11"",""x67:r9"",""x48:r8b"",""x34:al"",""x71:bpl"",""x57:OF"",""x5:r14"",""x99:r13"",""x100:dil"",""x42:rcx"",""x41:r10"",""x114:r15"",""x119:CF"",""0xffffffff00000001:rdx"",""x21:rbx"",""x20:r12""]";
"	mulx rbx, r12, rbx; x21, x20<- x11 * 0xffffffff00000001";
"	";
"";
"	; add:";
"	; r:x17,f:x18<-add(x16,x8,x5)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:r11"",""x67:r9"",""x48:r8b"",""x34:al"",""x71:bpl"",""x57:OF"",""x99:r13"",""x100:dil"",""x42:rcx"",""x41:r10"",""x114:r15"",""x119:CF"",""0xffffffff00000001:rdx"",""x21:rbx"",""x20:r12"",""x17:r14""]";
"	;chose 0xffffffff00000001 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: 0xffffffff00000001";
"	; freeing, i.e. spilling 0xffffffff00000001, because I am out of ideas";
"	; allocs: arg1(rsi),x1(r11),x67(r9),x48(r8b),x34(al),x71(bpl),x99(r13),x100(dil),x42(rcx),x41(r10),x114(r15),0xffffffff00000001(rdx),x21(rbx),x20(r12),x17(r14); clobs x17,x18,x16,x8,x5,x5,x119; will spare: 0xffffffff00000001 ";
"	setc dl; spill CF x119 to reg (rdx)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:r11"",""x67:r9"",""x48:r8b"",""x34:al"",""x71:bpl"",""x57:OF"",""x99:r13"",""x100:dil"",""x42:rcx"",""x41:r10"",""x114:r15"",""x119:dl"",""x21:rbx"",""x20:r12"",""x17:r14""]";
"	;chose x99 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: arg1, x1, x67, x48, x34, x71, x99, x100, x42, x41, x114, x21, x20";
"	; freeing, i.e. spilling x99, because I am out of ideas";
"	; allocs: arg1(rsi),x1(r11),x67(r9),x48(r8b),x34(al),x71(bpl),x99(r13),x100(dil),x42(rcx),x41(r10),x114(r15),x119(dl),x21(rbx),x20(r12),x17(r14); clobs x17,x18,x16,x8,x5,x5,x119,x119,x16; will spare: x99 ";
"	mov [rsp + 0x08 * 9 ], r13; spilling x99 to mem";
"	movzx r13, byte [rsp + 0x08 * 3 ]; load byte memx16 to register64";
"	clc;";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:r11"",""x16:r13"",""x67:r9"",""x48:r8b"",""x34:al"",""x71:bpl"",""x57:OF"",""x100:dil"",""x42:rcx"",""x41:r10"",""x114:r15"",""x119:dl"",""x21:rbx"",""x20:r12"",""x17:r14""]";
"	;chose x114 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: arg1, x1, x67, x48, x34, x71, x100, x42, x41, x114, x21, x20";
"	; freeing, i.e. spilling x114, because I am out of ideas";
"	; allocs: arg1(rsi),x1(r11),x16(r13),x67(r9),x48(r8b),x34(al),x71(bpl),x100(dil),x42(rcx),x41(r10),x114(r15),x119(dl),x21(rbx),x20(r12),x17(r14); clobs x17,x18,x16,x8,x5,x5,x119,x119,x16,x16,-0x1; will spare: x114 ";
"	mov [rsp + 0x08 * 10 ], r15; spilling x114 to mem";
"	mov r15, -0x1 ; moving imm to reg";
"	adcx r13, r15; loading flag";
"	adcx r14, [rsp + 0x08 * 2 ]";
"	";
"";
"	; add:";
"	; r:x35,f:x36<-add(x34,x17,x20)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:r11"",""x16:r13"",""x67:r9"",""x48:r8b"",""x34:al"",""x71:bpl"",""x57:OF"",""x100:dil"",""x42:rcx"",""x41:r10"",""x119:dl"",""x21:rbx"",""x20:r12"",""-0x1:r15"",""x18:CF"",""x35:r14""]";
"	; freeing x16 (r13) no dependants anymore";
"	setc r13b; spill CF x18 to reg (r13)";
"	clc;";
"	movzx rax, al";
"	adcx rax, r15; loading flag";
"	adcx r14, r12";
"	";
"";
"	; add:";
"	; r:x72,f:_<-add(x71,x67)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:r11"",""x67:r9"",""x48:r8b"",""x34:al"",""x71:bpl"",""x57:OF"",""x100:dil"",""x42:rcx"",""x41:r10"",""x119:dl"",""x21:rbx"",""x20:r12"",""-0x1:r15"",""x18:r13b"",""x35:r14"",""x36:CF""]";
"	; freeing x34 (al) no dependants anymore";
"	movzx rax,  bpl; x72, copying x71 here, cause x71 is needed in a reg for other than x72, namely all: , x72, size: 1";
"	lea rax, [rax+r9]";
"	";
"";
"	; add:";
"	; r:x49,f:x50<-add(x48,x44,x41)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:r11"",""x67:r9"",""x48:r8b"",""x71:bpl"",""x57:OF"",""x100:dil"",""x42:rcx"",""x119:dl"",""x21:rbx"",""x20:r12"",""-0x1:r15"",""x18:r13b"",""x35:r14"",""x36:CF"",""x72:rax"",""x49:r10""]";
"	; freeing x67 (r9) no dependants anymore";
"	setc r9b; spill CF x36 to reg (r9)";
"	clc;";
"	movzx r8, r8b";
"	adcx r8, r15; loading flag";
"	adcx r10, [rsp + 0x08 * 4 ]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:r11"",""x48:r8b"",""x71:bpl"",""x57:OF"",""x100:dil"",""x42:rcx"",""x119:dl"",""x21:rbx"",""x20:r12"",""-0x1:r15"",""x18:r13b"",""x35:r14"",""x36:r9b"",""x72:rax"",""x49:r10"",""x50:CF""]";
"	; freeing x48 (r8b) no dependants anymore";
"	mov r8, 0xffffffff ; moving imm to reg";
"	;chose >>saved<< x99 from:x99, 0xffffffff[0] and candidates: x99, 0xffffffff";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:r11"",""x71:bpl"",""x57:OF"",""x99:rdx"",""x100:dil"",""x42:rcx"",""x119:dl"",""x21:rbx"",""x20:r12"",""-0x1:r15"",""x18:r13b"",""x35:r14"",""x36:r9b"",""x72:rax"",""x49:r10"",""x50:CF"",""0xffffffff:r8""]";
"	; freeing x71 (bpl) no dependants anymore";
"	mov bpl, dl; preserving value of x119 into a new reg";
"	mov rdx, [rsp + 0x08 * 9 ]; saving x99 in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:r11"",""x57:OF"",""x99:rdx"",""x100:dil"",""x42:rcx"",""x119:bpl"",""x21:rbx"",""x20:r12"",""-0x1:r15"",""x18:r13b"",""x35:r14"",""x36:r9b"",""x72:rax"",""x49:r10"",""x50:CF"",""0xffffffff:r8""]";
"	; freeing x20 (r12) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:r11"",""x57:OF"",""x99:rdx"",""x100:dil"",""x42:rcx"",""x119:bpl"",""x21:rbx"",""-0x1:r15"",""x18:r13b"",""x35:r14"",""x36:r9b"",""x72:rax"",""x49:r10"",""x50:CF"",""0xffffffff:r8"",""x112:r12""]";
"	;chose -0x1 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg1(rsi),x1(r11),x99(rdx),x100(dil),x42(rcx),x119(bpl),x21(rbx),-0x1(r15),x18(r13b),x35(r14),x36(r9b),x72(rax),x49(r10),0xffffffff(r8),x112(r12); clobs x111,x112,x99,0xffffffff,0xffffffff,0xffffffff,x119,x119,x112; will spare: -0x1 ";
"	;-- allocation: [""arg1:rsi"",""x1:r11"",""x57:OF"",""x99:rdx"",""x100:dil"",""x42:rcx"",""x119:bpl"",""x21:rbx"",""x18:r13b"",""x35:r14"",""x36:r9b"",""x72:rax"",""x49:r10"",""x50:CF"",""0xffffffff:r8"",""x112:r12"",""x111:r15""]";
"	mulx r12, r15, r8; x112, x111<- x99 * 0xffffffff";
"	";
"";
"	; add:";
"	; r:x58,f:x59<-add(x57,x35,x49)";
"	; CF: ALIVE,OF: ALIVE";
"	adox r10, r14";
"	";
"";
"	; add:";
"	; r:x77,f:x78<-add(x76,x58,x72)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:r11"",""x99:rdx"",""x100:dil"",""x42:rcx"",""x119:bpl"",""x21:rbx"",""x18:r13b"",""x35:r14"",""x36:r9b"",""x72:rax"",""x50:CF"",""0xffffffff:r8"",""x112:r12"",""x111:r15"",""x59:OF"",""x77:r10""]";
"	; freeing x35 (r14) no dependants anymore";
"	setc r14b; spill CF x50 to reg (r14)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:r11"",""x99:rdx"",""x100:dil"",""x42:rcx"",""x119:bpl"",""x21:rbx"",""x18:r13b"",""x36:r9b"",""x72:rax"",""x50:r14b"",""0xffffffff:r8"",""x112:r12"",""x111:r15"",""x59:OF"",""x77:r10""]";
"	;chose 0xffffffff to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: 0xffffffff";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: arg1(rsi),x1(r11),x99(rdx),x100(dil),x42(rcx),x119(bpl),x21(rbx),x18(r13b),x36(r9b),x72(rax),x50(r14b),0xffffffff(r8),x112(r12),x111(r15),x77(r10); clobs x77,x78,x76,x58,x72,x58,x50,x50,x76; will spare: 0xffffffff ";
"	movzx r8, byte [rsp + 0x08 * 7 ]; load byte memx76 to register64";
"	clc;";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:r11"",""x76:r8"",""x99:rdx"",""x100:dil"",""x42:rcx"",""x119:bpl"",""x21:rbx"",""x18:r13b"",""x36:r9b"",""x72:rax"",""x50:r14b"",""x112:r12"",""x111:r15"",""x59:OF"",""x77:r10""]";
"	;chose x99 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: arg1, x1, x99, x100, x42, x119, x21, x18, x36, x112, x111";
"	; freeing, i.e. spilling x99, because I am out of ideas";
"	; allocs: arg1(rsi),x1(r11),x76(r8),x99(rdx),x100(dil),x42(rcx),x119(bpl),x21(rbx),x18(r13b),x36(r9b),x72(rax),x50(r14b),x112(r12),x111(r15),x77(r10); clobs x77,x78,x76,x58,x72,x58,x50,x50,x76,x76,-0x1; will spare: x99 ";
"	mov [rsp + 0x08 * 9 ], rdx; spilling x99 to mem";
"	mov rdx, -0x1 ; moving imm to reg";
"	adcx r8, rdx; loading flag";
"	adcx r10, rax";
"	;chose >>saved<< x2 from:x2, arg1[1][0] and candidates: x2, arg1[1]";
"	mov rdx, [rsp + 0x08 * 0 ]; x2 to rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:r11"",""x2:rdx"",""x76:r8"",""x100:dil"",""x42:rcx"",""x119:bpl"",""x21:rbx"",""x18:r13b"",""x36:r9b"",""x72:rax"",""x50:r14b"",""x112:r12"",""x111:r15"",""x59:OF"",""x77:r10"",""x78:CF""]";
"	; freeing x76 (r8) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:r11"",""x2:rdx"",""x100:dil"",""x42:rcx"",""x119:bpl"",""x21:rbx"",""x18:r13b"",""x36:r9b"",""x72:rax"",""x50:r14b"",""x112:r12"",""x111:r15"",""x59:OF"",""x77:r10"",""x78:CF"",""x89:r8""]";
"	; freeing x72 (rax) no dependants anymore";
"	;-- allocation: [""arg1:rsi"",""x1:r11"",""x2:rdx"",""x100:dil"",""x42:rcx"",""x119:bpl"",""x21:rbx"",""x18:r13b"",""x36:r9b"",""x50:r14b"",""x112:r12"",""x111:r15"",""x59:OF"",""x77:r10"",""x78:CF"",""x89:r8"",""x88:rax""]";
"	mulx r8, rax, [rsi + 0x08 * 1 ]; x89, x88<- x2 * arg1[1]";
"	";
"";
"	; add:";
"	; r:x115,f:x116<-add(0x0,x114,x111)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:r11"",""x2:rdx"",""x100:dil"",""x42:rcx"",""x119:bpl"",""x21:rbx"",""x18:r13b"",""x36:r9b"",""x50:r14b"",""x112:r12"",""x111:r15"",""x59:OF"",""x77:r10"",""x78:CF"",""x89:r8"",""x88:rax""]";
"	;chose x50 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: arg1, x1, x2, x100, x42, x119, x21, x18, x36, x50, x112, x77, x89, x88";
"	; freeing, i.e. spilling x50, because I am out of ideas";
"	; allocs: arg1(rsi),x1(r11),x2(rdx),x100(dil),x42(rcx),x119(bpl),x21(rbx),x18(r13b),x36(r9b),x50(r14b),x112(r12),x111(r15),x77(r10),x89(r8),x88(rax); clobs x115,x116,0x0,x114,x111,x114; will spare: x50 ";
"	mov byte [rsp + 0x08 * 11 ], r14b; spilling byte x50 to mem";
"	mov r14,  [rsp + 0x08 * 10 ]; x115, copying x114 here, cause x114 is needed in a reg for other than x115, namely all: , x115--x116, size: 1";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:r11"",""x2:rdx"",""x100:dil"",""x42:rcx"",""x119:bpl"",""x21:rbx"",""x18:r13b"",""x36:r9b"",""x112:r12"",""x111:r15"",""x59:OF"",""x77:r10"",""x78:CF"",""x89:r8"",""x88:rax"",""x115:r14""]";
"	;chose x2 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: arg1, x1, x2, x100, x42, x119, x21, x18, x36, x112, x77, x89, x88";
"	; freeing, i.e. spilling x2, because I am out of ideas";
"	; allocs: arg1(rsi),x1(r11),x2(rdx),x100(dil),x42(rcx),x119(bpl),x21(rbx),x18(r13b),x36(r9b),x112(r12),x111(r15),x77(r10),x89(r8),x88(rax),x115(r14); clobs x115,x116,0x0,x114,x111,x114,x115,x78; will spare: x2 ";
"	mov [rsp + 0x08 * 0 ], rdx; spilling x2 to mem";
"	setc dl; spill CF x78 to reg (rdx)";
"	clc;";
"	adcx r14, r15";
"	;chose >>saved<< x1 from:x1, arg1[3][0] and candidates: x1, arg1[3]";
"	xchg rdx, r11; x1, swapping with x78, which is currently in rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x100:dil"",""x42:rcx"",""x119:bpl"",""x21:rbx"",""x18:r13b"",""x36:r9b"",""x112:r12"",""x111:r15"",""x59:OF"",""x77:r10"",""x78:r11b"",""x89:r8"",""x88:rax"",""x115:r14"",""x116:CF"",""x40:rdx""]";
"	; freeing x111 (r15) no dependants anymore";
"	;-- allocation: [""arg1:rsi"",""x100:dil"",""x42:rcx"",""x119:bpl"",""x21:rbx"",""x18:r13b"",""x36:r9b"",""x112:r12"",""x59:OF"",""x77:r10"",""x78:r11b"",""x89:r8"",""x88:rax"",""x115:r14"",""x116:CF"",""x40:rdx"",""x39:r15""]";
"	mulx rdx, r15, [rsi + 0x08 * 3 ]; x40, x39<- x1 * arg1[3]";
"	";
"";
"	; add:";
"	; r:x92,f:x93<-add(0x0,x91,x88)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x100:dil"",""x42:rcx"",""x119:bpl"",""x21:rbx"",""x18:r13b"",""x36:r9b"",""x112:r12"",""x59:OF"",""x77:r10"",""x78:r11b"",""x89:r8"",""x88:rax"",""x115:r14"",""x116:CF"",""x40:rdx"",""x39:r15""]";
"	;chose x18 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: arg1, x100, x42, x119, x21, x18, x36, x112, x77, x78, x89, x115, x40, x39";
"	; freeing, i.e. spilling x18, because I am out of ideas";
"	; allocs: arg1(rsi),x100(dil),x42(rcx),x119(bpl),x21(rbx),x18(r13b),x36(r9b),x112(r12),x77(r10),x78(r11b),x89(r8),x88(rax),x115(r14),x40(rdx),x39(r15); clobs x92,x93,0x0,x91,x88,x91; will spare: x18 ";
"	mov byte [rsp + 0x08 * 12 ], r13b; spilling byte x18 to mem";
"	mov r13,  [rsp + 0x08 * 8 ]; x92, copying x91 here, cause x91 is needed in a reg for other than x92, namely all: , x92--x93, size: 1";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x100:dil"",""x42:rcx"",""x119:bpl"",""x21:rbx"",""x36:r9b"",""x112:r12"",""x59:OF"",""x77:r10"",""x78:r11b"",""x89:r8"",""x88:rax"",""x115:r14"",""x116:CF"",""x40:rdx"",""x39:r15"",""x92:r13""]";
"	;chose x115 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: arg1, x100, x42, x119, x21, x36, x112, x77, x78, x89, x115, x40, x39";
"	; freeing, i.e. spilling x115, because I am out of ideas";
"	; allocs: arg1(rsi),x100(dil),x42(rcx),x119(bpl),x21(rbx),x36(r9b),x112(r12),x77(r10),x78(r11b),x89(r8),x88(rax),x115(r14),x40(rdx),x39(r15),x92(r13); clobs x92,x93,0x0,x91,x88,x91,x92,x116; will spare: x115 ";
"	mov [rsp + 0x08 * 13 ], r14; spilling x115 to mem";
"	setc r14b; spill CF x116 to reg (r14)";
"	clc;";
"	adcx r13, rax";
"	";
"";
"	; add:";
"	; r:x51,f:x52<-add(x50,x42,x39)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x100:dil"",""x119:bpl"",""x21:rbx"",""x36:r9b"",""x112:r12"",""x59:OF"",""x77:r10"",""x78:r11b"",""x89:r8"",""x88:rax"",""x116:r14b"",""x40:rdx"",""x39:r15"",""x92:r13"",""x93:CF"",""x51:rcx""]";
"	; freeing x88 (rax) no dependants anymore";
"	setc al; spill CF x93 to reg (rax)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x100:dil"",""x119:bpl"",""x21:rbx"",""x36:r9b"",""x112:r12"",""x59:OF"",""x77:r10"",""x78:r11b"",""x89:r8"",""x116:r14b"",""x40:rdx"",""x39:r15"",""x92:r13"",""x93:al"",""x51:rcx""]";
"	;chose x40 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: arg1, x100, x119, x21, x36, x112, x77, x78, x89, x116, x40, x92";
"	; freeing, i.e. spilling x40, because I am out of ideas";
"	; allocs: arg1(rsi),x100(dil),x119(bpl),x21(rbx),x36(r9b),x112(r12),x77(r10),x78(r11b),x89(r8),x116(r14b),x40(rdx),x39(r15),x92(r13),x93(al),x51(rcx); clobs x51,x52,x50,x42,x39,x42,x93,x93,x50; will spare: x40 ";
"	mov [rsp + 0x08 * 14 ], rdx; spilling x40 to mem";
"	movzx rdx, byte [rsp + 0x08 * 11 ]; load byte memx50 to register64";
"	clc;";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x100:dil"",""x119:bpl"",""x21:rbx"",""x36:r9b"",""x50:rdx"",""x112:r12"",""x59:OF"",""x77:r10"",""x78:r11b"",""x89:r8"",""x116:r14b"",""x39:r15"",""x92:r13"",""x93:al"",""x51:rcx""]";
"	;chose x36 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: arg1, x100, x119, x21, x36, x112, x77, x78, x89, x116, x92";
"	; freeing, i.e. spilling x36, because I am out of ideas";
"	; allocs: arg1(rsi),x100(dil),x119(bpl),x21(rbx),x36(r9b),x50(rdx),x112(r12),x77(r10),x78(r11b),x89(r8),x116(r14b),x39(r15),x92(r13),x93(al),x51(rcx); clobs x51,x52,x50,x42,x39,x42,x93,x93,x50,x50,-0x1; will spare: x36 ";
"	mov byte [rsp + 0x08 * 15 ], r9b; spilling byte x36 to mem";
"	mov r9, -0x1 ; moving imm to reg";
"	adcx rdx, r9; loading flag";
"	adcx rcx, r15";
"	";
"";
"	; add:";
"	; r:x101,f:x102<-add(x100,x77,x92)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x100:dil"",""x119:bpl"",""x21:rbx"",""x50:rdx"",""x112:r12"",""x59:OF"",""x78:r11b"",""x89:r8"",""x116:r14b"",""x39:r15"",""x92:r13"",""x93:al"",""x51:rcx"",""-0x1:r9"",""x52:CF"",""x101:r10""]";
"	; freeing x50 (rdx) no dependants anymore";
"	setc dl; spill CF x52 to reg (rdx)";
"	clc;";
"	movzx rdi, dil";
"	adcx rdi, r9; loading flag";
"	adcx r10, r13";
"	";
"";
"	; add:";
"	; r:x120,f:x121<-add(x119,x101,x115)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x100:dil"",""x119:bpl"",""x21:rbx"",""x112:r12"",""x59:OF"",""x78:r11b"",""x89:r8"",""x116:r14b"",""x39:r15"",""x92:r13"",""x93:al"",""x51:rcx"",""-0x1:r9"",""x52:dl"",""x102:CF"",""x120:r10""]";
"	; freeing x100 (dil) no dependants anymore";
"	setc dil; spill CF x102 to reg (rdi)";
"	clc;";
"	movzx rbp, bpl";
"	adcx rbp, r9; loading flag";
"	adcx r10, [rsp + 0x08 * 13 ]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x119:bpl"",""x21:rbx"",""x112:r12"",""x59:OF"",""x78:r11b"",""x89:r8"",""x116:r14b"",""x39:r15"",""x92:r13"",""x93:al"",""x51:rcx"",""-0x1:r9"",""x52:dl"",""x102:dil"",""x120:r10"",""x121:CF""]";
"	; freeing x119 (bpl) no dependants anymore";
"	mov rbp, 0xffffffff00000001 ; moving imm to reg";
"	;chose >>saved<< x54 from:x54, 0xffffffff00000001[0] and candidates: x54, 0xffffffff00000001";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x54:rdx"",""x21:rbx"",""x112:r12"",""x59:OF"",""x78:r11b"",""x89:r8"",""x116:r14b"",""x39:r15"",""x92:r13"",""x93:al"",""x51:rcx"",""-0x1:r9"",""x52:dl"",""x102:dil"",""x120:r10"",""x121:CF"",""0xffffffff00000001:rbp""]";
"	; freeing x39 (r15) no dependants anymore";
"	mov r15b, dl; preserving value of x52 into a new reg";
"	mov rdx, [rsp + 0x08 * 5 ]; saving x54 in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x21:rbx"",""x112:r12"",""x59:OF"",""x78:r11b"",""x89:r8"",""x116:r14b"",""x92:r13"",""x93:al"",""x51:rcx"",""-0x1:r9"",""x52:r15b"",""x102:dil"",""x120:r10"",""x121:CF"",""0xffffffff00000001:rbp"",""x65:rdx""]";
"	; freeing x92 (r13) no dependants anymore";
"	;-- allocation: [""arg1:rsi"",""x21:rbx"",""x112:r12"",""x59:OF"",""x78:r11b"",""x89:r8"",""x116:r14b"",""x93:al"",""x51:rcx"",""-0x1:r9"",""x52:r15b"",""x102:dil"",""x120:r10"",""x121:CF"",""0xffffffff00000001:rbp"",""x65:rdx"",""x64:r13""]";
"	mulx rdx, r13, rbp; x65, x64<- x54 * 0xffffffff00000001";
"	";
"";
"	; add:";
"	; r:x19,f:_<-add(x18,x6)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x21:rbx"",""x112:r12"",""x59:OF"",""x78:r11b"",""x89:r8"",""x116:r14b"",""x93:al"",""x51:rcx"",""-0x1:r9"",""x52:r15b"",""x102:dil"",""x120:r10"",""x121:CF"",""0xffffffff00000001:rbp"",""x65:rdx"",""x64:r13""]";
"	;chose 0xffffffff00000001 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: -0x1, 0xffffffff00000001";
"	; freeing, i.e. spilling 0xffffffff00000001, because I am out of ideas";
"	; allocs: arg1(rsi),x21(rbx),x112(r12),x78(r11b),x89(r8),x116(r14b),x93(al),x51(rcx),-0x1(r9),x52(r15b),x102(dil),x120(r10),0xffffffff00000001(rbp),x65(rdx),x64(r13); clobs x19,x18,x6,x18; will spare: 0xffffffff00000001 ";
"	movzx rbp, byte [rsp + 0x08 * 12 ]; x19, copying x18 here, cause x18 is needed in a reg for other than x19, namely all: , x19, size: 1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x21:rbx"",""x112:r12"",""x59:OF"",""x78:r11b"",""x89:r8"",""x116:r14b"",""x93:al"",""x51:rcx"",""-0x1:r9"",""x52:r15b"",""x102:dil"",""x120:r10"",""x121:CF"",""x65:rdx"",""x64:r13"",""x19:rbp""]";
"	;chose -0x1 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg1(rsi),x21(rbx),x112(r12),x78(r11b),x89(r8),x116(r14b),x93(al),x51(rcx),-0x1(r9),x52(r15b),x102(dil),x120(r10),x65(rdx),x64(r13),x19(rbp); clobs x19,x18,x6,x18,x19,x6; will spare: -0x1 ";
"	mov r9, [rsp + 0x08 * 6 ]; load m64 x6 to register64";
"	lea rbp, [rbp+r9]; r8/64 + m8";
"	";
"";
"	; add:";
"	; r:x37,f:x38<-add(x36,x19,x21)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x6:r9"",""x21:rbx"",""x112:r12"",""x59:OF"",""x78:r11b"",""x89:r8"",""x116:r14b"",""x93:al"",""x51:rcx"",""x52:r15b"",""x102:dil"",""x120:r10"",""x121:CF"",""x65:rdx"",""x64:r13"",""x37:rbp""]";
"	; freeing x6 (r9) no dependants anymore";
"	seto r9b; spill OF x59 to reg (r9)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x21:rbx"",""x112:r12"",""x59:r9b"",""x78:r11b"",""x89:r8"",""x116:r14b"",""x93:al"",""x51:rcx"",""x52:r15b"",""x102:dil"",""x120:r10"",""x121:CF"",""x65:rdx"",""x64:r13"",""x37:rbp""]";
"	;chose x93 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: arg1, x112, x78, x89, x116, x93, x51, x52, x102, x120, x65, x64";
"	; freeing, i.e. spilling x93, because I am out of ideas";
"	; allocs: arg1(rsi),x21(rbx),x112(r12),x59(r9b),x78(r11b),x89(r8),x116(r14b),x93(al),x51(rcx),x52(r15b),x102(dil),x120(r10),x65(rdx),x64(r13),x37(rbp); clobs x37,x38,x36,x19,x21,x19,x59,x59,x36; will spare: x93 ";
"	mov byte [rsp + 0x08 * 16 ], al; spilling byte x93 to mem";
"	movzx rax, byte [rsp + 0x08 * 15 ]; load byte memx36 to register64";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x21:rbx"",""x36:rax"",""x112:r12"",""x59:r9b"",""x78:r11b"",""x89:r8"",""x116:r14b"",""x51:rcx"",""x52:r15b"",""x102:dil"",""x120:r10"",""x121:CF"",""x65:rdx"",""x64:r13"",""x37:rbp""]";
"	;chose x120 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: arg1, x112, x78, x89, x116, x51, x52, x102, x120, x65, x64";
"	; freeing, i.e. spilling x120, because I am out of ideas";
"	; allocs: arg1(rsi),x21(rbx),x36(rax),x112(r12),x59(r9b),x78(r11b),x89(r8),x116(r14b),x51(rcx),x52(r15b),x102(dil),x120(r10),x65(rdx),x64(r13),x37(rbp); clobs x37,x38,x36,x19,x21,x19,x59,x59,x36,x36,0x0; will spare: x120 ";
"	mov [rsp + 0x08 * 17 ], r10; spilling x120 to mem";
"	mov r10, 0x0 ; moving imm to reg";
"	dec r10; OF<-0x0, preserve CF 3";
"	adox rax, r10; loading flag";
"	adox rbp, rbx";
"	";
"";
"	; add:";
"	; r:x60,f:x61<-add(x59,x37,x51)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x21:rbx"",""x36:rax"",""x112:r12"",""x59:r9b"",""x78:r11b"",""x89:r8"",""x116:r14b"",""x51:rcx"",""x52:r15b"",""x102:dil"",""x121:CF"",""x65:rdx"",""x64:r13"",""-0x1:r10"",""x38:OF"",""x60:rbp""]";
"	; freeing x21 (rbx) no dependants anymore";
"	setc bl; spill CF x121 to reg (rbx)";
"	clc;";
"	movzx r9, r9b";
"	adcx r9, r10; loading flag";
"	adcx rbp, rcx";
"	";
"";
"	; add:";
"	; r:x53,f:_<-add(x52,x40)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x36:rax"",""x112:r12"",""x59:r9b"",""x78:r11b"",""x89:r8"",""x116:r14b"",""x51:rcx"",""x52:r15b"",""x102:dil"",""x121:bl"",""x65:rdx"",""x64:r13"",""-0x1:r10"",""x38:OF"",""x60:rbp"",""x61:CF""]";
"	; freeing x36 (rax) no dependants anymore";
"	movzx rax,  r15b; x53, copying x52 here, cause x52 is needed in a reg for other than x53, namely all: , x53, size: 1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x112:r12"",""x59:r9b"",""x78:r11b"",""x89:r8"",""x116:r14b"",""x51:rcx"",""x52:r15b"",""x102:dil"",""x121:bl"",""x65:rdx"",""x64:r13"",""-0x1:r10"",""x38:OF"",""x60:rbp"",""x61:CF"",""x53:rax""]";
"	; freeing x59 (r9b) no dependants anymore";
"	mov r9, [rsp + 0x08 * 14 ]; load m64 x40 to register64";
"	lea rax, [rax+r9]; r8/64 + m8";
"	";
"";
"	; add:";
"	; r:x79,f:x80<-add(x78,x60,x64)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x112:r12"",""x78:r11b"",""x89:r8"",""x116:r14b"",""x40:r9"",""x51:rcx"",""x52:r15b"",""x102:dil"",""x121:bl"",""x65:rdx"",""x64:r13"",""-0x1:r10"",""x38:OF"",""x61:CF"",""x53:rax"",""x79:rbp""]";
"	; freeing x40 (r9) no dependants anymore";
"	seto r9b; spill OF x38 to reg (r9)";
"	inc r10; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x112:r12"",""x78:r11b"",""x89:r8"",""x116:r14b"",""x51:rcx"",""x52:r15b"",""x102:dil"",""x121:bl"",""x65:rdx"",""x64:r13"",""x38:r9b"",""x61:CF"",""x53:rax"",""x79:rbp"",""0x0:r10""]";
"	; freeing x51 (rcx) no dependants anymore";
"	mov rcx, -0x1 ; moving imm to reg";
"	movzx r11, r11b";
"	adox r11, rcx; loading flag";
"	adox rbp, r13";
"	;chose >>saved<< arg1[2] from:x2, arg1[2][1] and candidates: x2, arg1[2]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x112:r12"",""x78:r11b"",""x89:r8"",""x116:r14b"",""x52:r15b"",""x102:dil"",""x121:bl"",""x65:rdx"",""x64:r13"",""x38:r9b"",""x61:CF"",""x53:rax"",""x79:rbp"",""0x0:r10"",""-0x1:rcx"",""x80:OF"",""arg1[2]:rdx""]";
"	; freeing x78 (r11b) no dependants anymore";
"	mov r11, rdx; preserving value of x65 into a new reg";
"	mov rdx, [rsi + 0x08 * 2 ]; saving arg1[2] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x112:r12"",""x89:r8"",""x116:r14b"",""x52:r15b"",""x102:dil"",""x121:bl"",""x65:r11"",""x64:r13"",""x38:r9b"",""x61:CF"",""x53:rax"",""x79:rbp"",""0x0:r10"",""-0x1:rcx"",""x80:OF"",""arg1[2]:rdx""]";
"	; freeing x52 (r15b) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x112:r12"",""x89:r8"",""x116:r14b"",""x102:dil"",""x121:bl"",""x65:r11"",""x64:r13"",""x38:r9b"",""x61:CF"",""x53:rax"",""x79:rbp"",""0x0:r10"",""-0x1:rcx"",""x80:OF"",""arg1[2]:rdx"",""x87:r15""]";
"	; freeing x64 (r13) no dependants anymore";
"	;-- allocation: [""arg1:rsi"",""x112:r12"",""x89:r8"",""x116:r14b"",""x102:dil"",""x121:bl"",""x65:r11"",""x38:r9b"",""x61:CF"",""x53:rax"",""x79:rbp"",""0x0:r10"",""-0x1:rcx"",""x80:OF"",""arg1[2]:rdx"",""x87:r15"",""x86:r13""]";
"	mulx r15, r13, [rsp + 0x08 * 0 ]; x87, x86<- x2 * arg1[2]";
"	";
"";
"	; add:";
"	; r:x117,f:_<-add(x116,x112)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x112:r12"",""x89:r8"",""x116:r14b"",""x102:dil"",""x121:bl"",""x65:r11"",""x38:r9b"",""x61:CF"",""x53:rax"",""x79:rbp"",""0x0:r10"",""-0x1:rcx"",""x80:OF"",""arg1[2]:rdx"",""x87:r15"",""x86:r13""]";
"	; freeing 0x0 (r10, since all are neeed, but this one is just an immediate value.";
"	movzx r10,  r14b; x117, copying x116 here, cause x116 is needed in a reg for other than x117, namely all: , x117, size: 1";
"	lea r10, [r10+r12]";
"	";
"";
"	; add:";
"	; r:x94,f:x95<-add(x93,x89,x86)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x112:r12"",""x116:r14b"",""x102:dil"",""x121:bl"",""x65:r11"",""x38:r9b"",""x61:CF"",""x53:rax"",""x79:rbp"",""-0x1:rcx"",""x80:OF"",""arg1[2]:rdx"",""x87:r15"",""x86:r13"",""x117:r10"",""x94:r8""]";
"	; freeing x112 (r12) no dependants anymore";
"	seto r12b; spill OF x80 to reg (r12)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x116:r14b"",""x102:dil"",""x121:bl"",""x65:r11"",""x38:r9b"",""x61:CF"",""x53:rax"",""x79:rbp"",""-0x1:rcx"",""x80:r12b"",""arg1[2]:rdx"",""x87:r15"",""x86:r13"",""x117:r10"",""x94:r8""]";
"	; freeing x116 (r14b) no dependants anymore";
"	movzx r14, byte [rsp + 0x08 * 16 ]; load byte memx93 to register64";
"	inc rcx; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x93:r14"",""x102:dil"",""x121:bl"",""x65:r11"",""x38:r9b"",""x61:CF"",""x53:rax"",""x79:rbp"",""x80:r12b"",""arg1[2]:rdx"",""x87:r15"",""x86:r13"",""x117:r10"",""x94:r8"",""0x0:rcx""]";
"	; freeing 0x0 (rcx, since all are neeed, but this one is just an immediate value.";
"	mov rcx, -0x1 ; moving imm to reg";
"	adox r14, rcx; loading flag";
"	adox r8, r13";
"	";
"";
"	; add:";
"	; r:x103,f:x104<-add(x102,x79,x94)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x93:r14"",""x102:dil"",""x121:bl"",""x65:r11"",""x38:r9b"",""x61:CF"",""x53:rax"",""x80:r12b"",""arg1[2]:rdx"",""x87:r15"",""x86:r13"",""x117:r10"",""x94:r8"",""-0x1:rcx"",""x95:OF"",""x103:rbp""]";
"	; freeing x93 (r14) no dependants anymore";
"	seto r14b; spill OF x95 to reg (r14)";
"	inc rcx; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x102:dil"",""x121:bl"",""x65:r11"",""x38:r9b"",""x61:CF"",""x53:rax"",""x80:r12b"",""arg1[2]:rdx"",""x87:r15"",""x86:r13"",""x117:r10"",""x94:r8"",""x95:r14b"",""x103:rbp"",""0x0:rcx""]";
"	; freeing x86 (r13) no dependants anymore";
"	mov r13, -0x1 ; moving imm to reg";
"	movzx rdi, dil";
"	adox rdi, r13; loading flag";
"	adox rbp, r8";
"	";
"";
"	; add:";
"	; r:x62,f:x63<-add(x61,x38,x53)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x102:dil"",""x121:bl"",""x65:r11"",""x38:r9b"",""x53:rax"",""x80:r12b"",""arg1[2]:rdx"",""x87:r15"",""x117:r10"",""x94:r8"",""x95:r14b"",""x103:rbp"",""0x0:rcx"",""-0x1:r13"",""x104:OF"",""x63:CF""]";
"	; freeing x102 (dil) no dependants anymore";
"	movzx rdi,  r9b; x62, copying x38 here, cause x38 is needed in a reg for other than x62, namely all: , x62--x63, size: 1";
"	adcx rdi, rax";
"	";
"";
"	; add:";
"	; r:x122,f:x123<-add(x121,x103,x117)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x121:bl"",""x65:r11"",""x38:r9b"",""x53:rax"",""x80:r12b"",""arg1[2]:rdx"",""x87:r15"",""x117:r10"",""x94:r8"",""x95:r14b"",""0x0:rcx"",""-0x1:r13"",""x104:OF"",""x63:CF"",""x62:rdi"",""x122:rbp""]";
"	; freeing x38 (r9b) no dependants anymore";
"	setc r9b; spill CF x63 to reg (r9)";
"	clc;";
"	movzx rbx, bl";
"	adcx rbx, r13; loading flag";
"	adcx rbp, r10";
"	;chose >>saved<< arg1[3] from:x2, arg1[3][1] and candidates: x2, arg1[3]";
"	mov rdx, [rsi + 0x08 * 3 ]; arg1[3] to rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x121:bl"",""x65:r11"",""x53:rax"",""x80:r12b"",""x87:r15"",""x117:r10"",""x94:r8"",""x95:r14b"",""0x0:rcx"",""-0x1:r13"",""x104:OF"",""x63:r9b"",""x62:rdi"",""x122:rbp"",""x123:CF"",""arg1[3]:rdx""]";
"	; freeing x121 (bl) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x65:r11"",""x53:rax"",""x80:r12b"",""x87:r15"",""x117:r10"",""x94:r8"",""x95:r14b"",""0x0:rcx"",""-0x1:r13"",""x104:OF"",""x63:r9b"",""x62:rdi"",""x122:rbp"",""x123:CF"",""arg1[3]:rdx"",""x85:rbx""]";
"	; freeing x53 (rax) no dependants anymore";
"	;-- allocation: [""arg1:rsi"",""x65:r11"",""x80:r12b"",""x87:r15"",""x117:r10"",""x94:r8"",""x95:r14b"",""0x0:rcx"",""-0x1:r13"",""x104:OF"",""x63:r9b"",""x62:rdi"",""x122:rbp"",""x123:CF"",""arg1[3]:rdx"",""x85:rbx"",""x84:rax""]";
"	mulx rbx, rax, [rsp + 0x08 * 0 ]; x85, x84<- x2 * arg1[3]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x65:r11"",""x80:r12b"",""x87:r15"",""x117:r10"",""x94:r8"",""x95:r14b"",""0x0:rcx"",""-0x1:r13"",""x104:OF"",""x63:r9b"",""x62:rdi"",""x122:rbp"",""x123:CF"",""arg1[3]:rdx"",""x85:rbx"",""x84:rax""]";
"	; freeing x117 (r10) no dependants anymore";
"	mov r10, 0xffffffff00000001 ; moving imm to reg";
"	;chose >>saved<< 0xffffffff00000001 from:x99, 0xffffffff00000001[1] and candidates: x99, 0xffffffff00000001";
"	mov rdx, r10; 0xffffffff00000001 to rdx";
"	; fr:r10";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x65:r11"",""x80:r12b"",""x87:r15"",""x94:r8"",""x95:r14b"",""0x0:rcx"",""-0x1:r13"",""x104:OF"",""x63:r9b"",""x62:rdi"",""x122:rbp"",""x123:CF"",""x85:rbx"",""x84:rax"",""0xffffffff00000001:rdx""]";
"	;chose >>RANDOMLY<< r10 from candidates :r10[0].";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x65:r11"",""x80:r12b"",""x87:r15"",""x94:r8"",""x95:r14b"",""0x0:rcx"",""-0x1:r13"",""x104:OF"",""x63:r9b"",""x62:rdi"",""x122:rbp"",""x123:CF"",""x85:rbx"",""x84:rax"",""0xffffffff00000001:rdx"",""x110:r10""]";
"	; freeing x94 (r8) no dependants anymore";
"	;-- allocation: [""arg1:rsi"",""x65:r11"",""x80:r12b"",""x87:r15"",""x95:r14b"",""0x0:rcx"",""-0x1:r13"",""x104:OF"",""x63:r9b"",""x62:rdi"",""x122:rbp"",""x123:CF"",""x85:rbx"",""x84:rax"",""0xffffffff00000001:rdx"",""x110:r10"",""x109:r8""]";
"	mulx r10, r8, [rsp + 0x08 * 9 ]; x110, x109<- x99 * 0xffffffff00000001";
"	";
"";
"	; add:";
"	; r:x96,f:x97<-add(x95,x87,x84)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x65:r11"",""x80:r12b"",""x95:r14b"",""0x0:rcx"",""-0x1:r13"",""x104:OF"",""x63:r9b"",""x62:rdi"",""x122:rbp"",""x123:CF"",""x85:rbx"",""x84:rax"",""0xffffffff00000001:rdx"",""x110:r10"",""x109:r8"",""x96:r15""]";
"	; freeing 0x0 (rcx, since all are neeed, but this one is just an immediate value.";
"	setc cl; spill CF x123 to reg (rcx)";
"	clc;";
"	movzx r14, r14b";
"	adcx r14, r13; loading flag";
"	adcx r15, rax";
"	";
"";
"	; add:";
"	; r:x98,f:_<-add(x97,x85)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x65:r11"",""x80:r12b"",""x95:r14b"",""-0x1:r13"",""x104:OF"",""x63:r9b"",""x62:rdi"",""x122:rbp"",""x123:cl"",""x84:rax"",""0xffffffff00000001:rdx"",""x110:r10"",""x109:r8"",""x96:r15"",""x97:CF"",""x98:rbx""]";
"	; freeing x95 (r14b) no dependants anymore";
"	mov r14, 0x0 ; moving imm to reg";
"	adcx rbx, r14";
"	";
"";
"	; add:";
"	; r:x81,f:x82<-add(x80,x62,x65)";
"	; CF: KILLED,OF: ALIVE";
"	clc;";
"	movzx r12, r12b";
"	adcx r12, r13; loading flag";
"	adcx rdi, r11";
"	";
"";
"	; add:";
"	; r:x105,f:x106<-add(x104,x81,x96)";
"	; CF: ALIVE,OF: ALIVE";
"	adox r15, rdi";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x65:r11"",""x80:r12b"",""-0x1:r13"",""x63:r9b"",""x122:rbp"",""x123:cl"",""x84:rax"",""0xffffffff00000001:rdx"",""x110:r10"",""x109:r8"",""x98:rbx"",""0x0:r14"",""x81:rdi"",""x82:CF"",""x106:OF"",""x105:r15""]";
"	; freeing x65 (r11) no dependants anymore";
"	mov r11, [rsi + 0x08 * 3 ]; load m64 x3 to register64";
"	;-- allocation: [""arg1:rsi"",""x80:r12b"",""-0x1:r13"",""x63:r9b"",""x122:rbp"",""x123:cl"",""x84:rax"",""0xffffffff00000001:rdx"",""x110:r10"",""x109:r8"",""x98:rbx"",""0x0:r14"",""x81:rdi"",""x82:CF"",""x106:OF"",""x105:r15"",""x3:r11""]";
"	";
"";
"	; add:";
"	; r:x83,f:_<-add(x82,x63)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x80:r12b"",""-0x1:r13"",""x63:r9b"",""x122:rbp"",""x123:cl"",""x84:rax"",""0xffffffff00000001:rdx"",""x110:r10"",""x109:r8"",""x98:rbx"",""0x0:r14"",""x81:rdi"",""x82:CF"",""x106:OF"",""x105:r15"",""x3:r11""]";
"	; freeing x80 (r12b) no dependants anymore";
"	movzx r12,  r9b; x83, copying x63 here, cause x63 is needed in a reg for other than x83, namely all: , x83, size: 1";
"	adcx r12, r14";
"	";
"";
"	; add:";
"	; r:x124,f:x125<-add(x123,x105,x109)";
"	; CF: KILLED,OF: ALIVE";
"	clc;";
"	movzx rcx, cl";
"	adcx rcx, r13; loading flag";
"	adcx r15, r8";
"	";
"";
"	; add:";
"	; r:x107,f:x108<-add(x106,x83,x98)";
"	; CF: ALIVE,OF: ALIVE";
"	adox rbx, r12";
"	";
"";
"	; add:";
"	; r:x126,f:x127<-add(x125,x107,x110)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx r10, rbx";
"	;chose >>saved<< arg1[1] from:x3, arg1[1][1] and candidates: x3, arg1[1]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""-0x1:r13"",""x63:r9b"",""x122:rbp"",""x123:cl"",""x84:rax"",""0xffffffff00000001:rdx"",""x109:r8"",""0x0:r14"",""x81:rdi"",""x3:r11"",""x83:r12"",""x124:r15"",""x108:OF"",""x107:rbx"",""x127:CF"",""x126:r10"",""arg1[1]:rdx""]";
"	; freeing x63 (r9b) no dependants anymore";
"	mov r9, rdx; preserving value of 0xffffffff00000001 into a new reg";
"	mov rdx, [rsi + 0x08 * 1 ]; saving arg1[1] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""-0x1:r13"",""x122:rbp"",""x123:cl"",""x84:rax"",""0xffffffff00000001:r9"",""x109:r8"",""0x0:r14"",""x81:rdi"",""x3:r11"",""x83:r12"",""x124:r15"",""x108:OF"",""x107:rbx"",""x127:CF"",""x126:r10"",""arg1[1]:rdx""]";
"	; freeing x123 (cl) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""-0x1:r13"",""x122:rbp"",""x84:rax"",""0xffffffff00000001:r9"",""x109:r8"",""0x0:r14"",""x81:rdi"",""x3:r11"",""x83:r12"",""x124:r15"",""x108:OF"",""x107:rbx"",""x127:CF"",""x126:r10"",""arg1[1]:rdx"",""x134:rcx""]";
"	; freeing x84 (rax) no dependants anymore";
"	;-- allocation: [""arg1:rsi"",""-0x1:r13"",""x122:rbp"",""0xffffffff00000001:r9"",""x109:r8"",""0x0:r14"",""x81:rdi"",""x3:r11"",""x83:r12"",""x124:r15"",""x108:OF"",""x107:rbx"",""x127:CF"",""x126:r10"",""arg1[1]:rdx"",""x134:rcx"",""x133:rax""]";
"	mulx rcx, rax, r11; x134, x133<- x3 * arg1[1]";
"	";
"";
"	; add:";
"	; r:x128,f:_<-add(x127,x108)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""-0x1:r13"",""x122:rbp"",""0xffffffff00000001:r9"",""x109:r8"",""0x0:r14"",""x81:rdi"",""x3:r11"",""x83:r12"",""x124:r15"",""x108:OF"",""x107:rbx"",""x127:CF"",""x126:r10"",""arg1[1]:rdx"",""x134:rcx"",""x133:rax""]";
"	; freeing x109 (r8) no dependants anymore";
"	seto r8b; spill OF x128 to reg (r8)";
"	adc r8b, 0x0";
"	movzx r8, r8b";
"	;chose >>saved<< x3 from:x3, arg1[0][0] and candidates: x3, arg1[0]";
"	mov rdx, r11; x3 to rdx";
"	; fr:r11";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""-0x1:r13"",""x122:rbp"",""0xffffffff00000001:r9"",""0x0:r14"",""x81:rdi"",""x3:rdx"",""x83:r12"",""x124:r15"",""x108:OF"",""x107:rbx"",""x127:CF"",""x126:r10"",""x134:rcx"",""x133:rax"",""x128:r8b""]";
"	;chose >>RANDOMLY<< r11 from candidates :r11[0].";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""-0x1:r13"",""x122:rbp"",""0xffffffff00000001:r9"",""0x0:r14"",""x81:rdi"",""x3:rdx"",""x83:r12"",""x124:r15"",""x108:OF"",""x107:rbx"",""x127:CF"",""x126:r10"",""x134:rcx"",""x133:rax"",""x128:r8b"",""x136:r11""]";
"	; freeing x81 (rdi) no dependants anymore";
"	;-- allocation: [""arg1:rsi"",""-0x1:r13"",""x122:rbp"",""0xffffffff00000001:r9"",""0x0:r14"",""x3:rdx"",""x83:r12"",""x124:r15"",""x108:OF"",""x107:rbx"",""x127:CF"",""x126:r10"",""x134:rcx"",""x133:rax"",""x128:r8b"",""x136:r11"",""x135:rdi""]";
"	mulx r11, rdi, [rsi + 0x08 * 0 ]; x136, x135<- x3 * arg1[0]";
"	";
"";
"	; add:";
"	; r:x144,f:x145<-add(0x0,x120,x135)";
"	; CF: ZERO,OF: ZERO";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""-0x1:r13"",""x122:rbp"",""0xffffffff00000001:r9"",""0x0:r14"",""x3:rdx"",""x83:r12"",""x124:r15"",""x108:OF"",""x107:rbx"",""x127:CF"",""x126:r10"",""x134:rcx"",""x133:rax"",""x128:r8b"",""x136:r11"",""x135:rdi""]";
"	; freeing x83 (r12) no dependants anymore";
"	mov r12,  [rsp + 0x08 * 17 ]; x144, copying x120 here, cause x120 is needed in a reg for other than x144, namely all: , x144--x145, size: 1";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	adox r12, rdi";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""-0x1:r13"",""x122:rbp"",""0xffffffff00000001:r9"",""0x0:r14"",""x3:rdx"",""x124:r15"",""x107:rbx"",""x127:CF"",""x126:r10"",""x134:rcx"",""x133:rax"",""x128:r8b"",""x136:r11"",""x135:rdi"",""x144:r12"",""x145:OF""]";
"	; freeing x107 (rbx) no dependants anymore";
"	mov rbx, 0xffffffffffffffff ; moving imm to reg";
"	;chose >>saved<< 0xffffffffffffffff from:x144, 0xffffffffffffffff[1] and candidates: x144, 0xffffffffffffffff";
"	xchg rdx, rbx; 0xffffffffffffffff, swapping with x3, which is currently in rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""-0x1:r13"",""x122:rbp"",""0xffffffff00000001:r9"",""0x0:r14"",""x3:rbx"",""x124:r15"",""x127:CF"",""x126:r10"",""x134:rcx"",""x133:rax"",""x128:r8b"",""x136:r11"",""x135:rdi"",""x144:r12"",""x145:OF"",""0xffffffffffffffff:rdx""]";
"	; freeing x135 (rdi) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""-0x1:r13"",""x122:rbp"",""0xffffffff00000001:r9"",""0x0:r14"",""x3:rbx"",""x124:r15"",""x127:CF"",""x126:r10"",""x134:rcx"",""x133:rax"",""x128:r8b"",""x136:r11"",""x144:r12"",""x145:OF"",""0xffffffffffffffff:rdx"",""x159:rdi""]";
"	; freeing 0x0 (r14, since all are neeed, but this one is just an immediate value.";
"	;-- allocation: [""arg1:rsi"",""-0x1:r13"",""x122:rbp"",""0xffffffff00000001:r9"",""x3:rbx"",""x124:r15"",""x127:CF"",""x126:r10"",""x134:rcx"",""x133:rax"",""x128:r8b"",""x136:r11"",""x144:r12"",""x145:OF"",""0xffffffffffffffff:rdx"",""x159:rdi"",""x158:r14""]";
"	mulx rdi, r14, r12; x159, x158<- x144 * 0xffffffffffffffff";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""-0x1:r13"",""x122:rbp"",""0xffffffff00000001:r9"",""x3:rbx"",""x124:r15"",""x127:CF"",""x126:r10"",""x134:rcx"",""x133:rax"",""x128:r8b"",""x136:r11"",""x144:r12"",""x145:OF"",""0xffffffffffffffff:rdx"",""x159:rdi"",""x158:r14""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: -0x1, 0xffffffff00000001, 0xffffffffffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: arg1(rsi),-0x1(r13),x122(rbp),0xffffffff00000001(r9),x3(rbx),x124(r15),x126(r10),x134(rcx),x133(rax),x128(r8b),x136(r11),x144(r12),0xffffffffffffffff(rdx),x159(rdi),x158(r14); clobs x156,x157,x144,0xffffffff,0xffffffff; will spare: 0xffffffffffffffff ";
"	mov rdx, 0xffffffff ; moving imm to reg";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""-0x1:r13"",""x122:rbp"",""0xffffffff00000001:r9"",""x3:rbx"",""x124:r15"",""x127:CF"",""x126:r10"",""x134:rcx"",""x133:rax"",""x128:r8b"",""x136:r11"",""x144:r12"",""x145:OF"",""x159:rdi"",""x158:r14"",""0xffffffff:rdx""]";
"	;chose 0xffffffff00000001 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: -0x1, 0xffffffff00000001";
"	; freeing, i.e. spilling 0xffffffff00000001, because I am out of ideas";
"	; allocs: arg1(rsi),-0x1(r13),x122(rbp),0xffffffff00000001(r9),x3(rbx),x124(r15),x126(r10),x134(rcx),x133(rax),x128(r8b),x136(r11),x144(r12),x159(rdi),x158(r14),0xffffffff(rdx); clobs x156,x157,x144,0xffffffff,0xffffffff,0xffffffff; will spare: 0xffffffff00000001 ";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""-0x1:r13"",""x122:rbp"",""x3:rbx"",""x124:r15"",""x127:CF"",""x126:r10"",""x134:rcx"",""x133:rax"",""x128:r8b"",""x136:r11"",""x144:r12"",""x145:OF"",""x159:rdi"",""x158:r14"",""0xffffffff:rdx"",""x157:r9""]";
"	;chose -0x1 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg1(rsi),-0x1(r13),x122(rbp),x3(rbx),x124(r15),x126(r10),x134(rcx),x133(rax),x128(r8b),x136(r11),x144(r12),x159(rdi),x158(r14),0xffffffff(rdx),x157(r9); clobs x156,x157,x144,0xffffffff,0xffffffff,0xffffffff,x157; will spare: -0x1 ";
"	;-- allocation: [""arg1:rsi"",""x122:rbp"",""x3:rbx"",""x124:r15"",""x127:CF"",""x126:r10"",""x134:rcx"",""x133:rax"",""x128:r8b"",""x136:r11"",""x144:r12"",""x145:OF"",""x159:rdi"",""x158:r14"",""0xffffffff:rdx"",""x157:r9"",""x156:r13""]";
"	mulx r9, r13, r12; x157, x156<- x144 * 0xffffffff";
"	";
"";
"	; add:";
"	; r:_,f:x164<-add(0x0,x144,x158)";
"	; CF: ZERO,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x122:rbp"",""x3:rbx"",""x124:r15"",""x127:CF"",""x126:r10"",""x134:rcx"",""x133:rax"",""x128:r8b"",""x136:r11"",""x144:r12"",""x145:OF"",""x159:rdi"",""x158:r14"",""0xffffffff:rdx"",""x157:r9"",""x156:r13""]";
"	;chose 0xffffffff to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: 0xffffffff";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: arg1(rsi),x122(rbp),x3(rbx),x124(r15),x126(r10),x134(rcx),x133(rax),x128(r8b),x136(r11),x144(r12),x159(rdi),x158(r14),0xffffffff(rdx),x157(r9),x156(r13); clobs _,x164,0x0,x144,x158,x144; will spare: 0xffffffff ";
"	mov rdx,  r12; _, copying x144 here, cause x144 is needed in a reg for other than _, namely all: , x154--x155, _--x164, size: 2";
"	adcx rdx, r14";
"	";
"";
"	; add:";
"	; r:x160,f:x161<-add(0x0,x159,x156)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:rdx";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x122:rbp"",""x3:rbx"",""x124:r15"",""x126:r10"",""x134:rcx"",""x133:rax"",""x128:r8b"",""x136:r11"",""x144:r12"",""x145:OF"",""x158:r14"",""x157:r9"",""x156:r13"",""x164:CF"",""x160:rdi""]";
"	;chose >>RANDOMLY<< rdx from candidates :rdx[0].";
"	setc dl; spill CF x164 to reg (rdx)";
"	clc;";
"	adcx rdi, r13";
"	;chose >>saved<< arg1[2] from:x3, arg1[2][1] and candidates: x3, arg1[2]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x122:rbp"",""x3:rbx"",""x124:r15"",""x126:r10"",""x134:rcx"",""x133:rax"",""x128:r8b"",""x136:r11"",""x144:r12"",""x145:OF"",""x158:r14"",""x157:r9"",""x156:r13"",""x164:dl"",""x160:rdi"",""x161:CF"",""arg1[2]:rdx""]";
"	; freeing x158 (r14) no dependants anymore";
"	mov r14b, dl; preserving value of x164 into a new reg";
"	mov rdx, [rsi + 0x08 * 2 ]; saving arg1[2] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x122:rbp"",""x3:rbx"",""x124:r15"",""x126:r10"",""x134:rcx"",""x133:rax"",""x128:r8b"",""x136:r11"",""x144:r12"",""x145:OF"",""x157:r9"",""x156:r13"",""x164:r14b"",""x160:rdi"",""x161:CF"",""arg1[2]:rdx""]";
"	; freeing x156 (r13) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x122:rbp"",""x3:rbx"",""x124:r15"",""x126:r10"",""x134:rcx"",""x133:rax"",""x128:r8b"",""x136:r11"",""x144:r12"",""x145:OF"",""x157:r9"",""x164:r14b"",""x160:rdi"",""x161:CF"",""arg1[2]:rdx"",""x132:r13""]";
"	;chose x128 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: x122, x124, x126, x134, x133, x128, x136, x144, x157, x160";
"	; freeing, i.e. spilling x128, because I am out of ideas";
"	; allocs: arg1(rsi),x122(rbp),x3(rbx),x124(r15),x126(r10),x134(rcx),x133(rax),x128(r8b),x136(r11),x144(r12),x157(r9),x164(r14b),x160(rdi),arg1[2](rdx),x132(r13); clobs x131,x132,x3,arg1[2],arg1,x164,x164,x132; will spare: x128 ";
"	mov byte [rsp + 0x08 * 18 ], r8b; spilling byte x128 to mem";
"	;-- allocation: [""arg1:rsi"",""x122:rbp"",""x3:rbx"",""x124:r15"",""x126:r10"",""x134:rcx"",""x133:rax"",""x136:r11"",""x144:r12"",""x145:OF"",""x157:r9"",""x164:r14b"",""x160:rdi"",""x161:CF"",""arg1[2]:rdx"",""x132:r13"",""x131:r8""]";
"	mulx r13, r8, rbx; x132, x131<- x3 * arg1[2]";
"	";
"";
"	; add:";
"	; r:x137,f:x138<-add(0x0,x136,x133)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x122:rbp"",""x3:rbx"",""x124:r15"",""x126:r10"",""x134:rcx"",""x133:rax"",""x144:r12"",""x145:OF"",""x157:r9"",""x164:r14b"",""x160:rdi"",""x161:CF"",""arg1[2]:rdx"",""x132:r13"",""x131:r8"",""x137:r11""]";
"	;chose arg1[2] to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: arg1[2]";
"	; freeing, i.e. spilling arg1[2], because I am out of ideas";
"	; allocs: arg1(rsi),x122(rbp),x3(rbx),x124(r15),x126(r10),x134(rcx),x133(rax),x144(r12),x157(r9),x164(r14b),x160(rdi),arg1[2](rdx),x132(r13),x131(r8),x137(r11); clobs x137,x138,0x0,x136,x133,x136,x161; will spare: arg1[2] ";
"	setc dl; spill CF x161 to reg (rdx)";
"	clc;";
"	adcx r11, rax";
"	";
"";
"	; add:";
"	; r:x146,f:x147<-add(x145,x122,x137)";
"	; CF: ALIVE,OF: ALIVE";
"	adox r11, rbp";
"	";
"";
"	; add:";
"	; r:x165,f:x166<-add(x164,x146,x160)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x122:rbp"",""x3:rbx"",""x124:r15"",""x126:r10"",""x134:rcx"",""x133:rax"",""x144:r12"",""x157:r9"",""x164:r14b"",""x160:rdi"",""x161:dl"",""x132:r13"",""x131:r8"",""x138:CF"",""x147:OF"",""x165:r11""]";
"	; freeing x122 (rbp) no dependants anymore";
"	seto bpl; spill OF x147 to reg (rbp)";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x3:rbx"",""x124:r15"",""x126:r10"",""x134:rcx"",""x133:rax"",""x144:r12"",""x157:r9"",""x164:r14b"",""x160:rdi"",""x161:dl"",""x132:r13"",""x131:r8"",""x138:CF"",""x147:bpl"",""x165:r11""]";
"	; freeing x133 (rax) no dependants anymore";
"	mov rax, 0x0 ; moving imm to reg";
"	dec rax; OF<-0x0, preserve CF 3";
"	movzx r14, r14b";
"	adox r14, rax; loading flag";
"	adox r11, rdi";
"	";
"";
"	; add:";
"	; r:x139,f:x140<-add(x138,x134,x131)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx r8, rcx";
"	";
"";
"	; add:";
"	; r:x162,f:_<-add(x161,x157)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x3:rbx"",""x124:r15"",""x126:r10"",""x134:rcx"",""x144:r12"",""x157:r9"",""x164:r14b"",""x160:rdi"",""x161:dl"",""x132:r13"",""x147:bpl"",""x165:r11"",""-0x1:rax"",""x166:OF"",""x140:CF"",""x139:r8""]";
"	; freeing x134 (rcx) no dependants anymore";
"	movzx rcx,  dl; x162, copying x161 here, cause x161 is needed in a reg for other than x162, namely all: , x162, size: 1";
"	lea rcx, [rcx+r9]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x3:rbx"",""x124:r15"",""x126:r10"",""x144:r12"",""x157:r9"",""x164:r14b"",""x160:rdi"",""x161:dl"",""x132:r13"",""x147:bpl"",""x165:r11"",""-0x1:rax"",""x166:OF"",""x140:CF"",""x139:r8"",""x162:rcx""]";
"	; freeing x157 (r9) no dependants anymore";
"	mov r9, 0xffffffff00000001 ; moving imm to reg";
"	;chose >>saved<< 0xffffffff00000001 from:x144, 0xffffffff00000001[1] and candidates: x144, 0xffffffff00000001";
"	mov rdx, r9; 0xffffffff00000001 to rdx";
"	; fr:r9";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x3:rbx"",""x124:r15"",""x126:r10"",""x164:r14b"",""x160:rdi"",""x132:r13"",""x147:bpl"",""x165:r11"",""-0x1:rax"",""x166:OF"",""x140:CF"",""x139:r8"",""x162:rcx"",""0xffffffff00000001:rdx"",""x155:r12""]";
"	;chose >>RANDOMLY<< r9 from candidates :r9[0].";
"	;-- allocation: [""arg1:rsi"",""x3:rbx"",""x124:r15"",""x126:r10"",""x164:r14b"",""x160:rdi"",""x132:r13"",""x147:bpl"",""x165:r11"",""-0x1:rax"",""x166:OF"",""x140:CF"",""x139:r8"",""x162:rcx"",""0xffffffff00000001:rdx"",""x155:r12"",""x154:r9""]";
"	mulx r12, r9, r12; x155, x154<- x144 * 0xffffffff00000001";
"	";
"";
"	; add:";
"	; r:x148,f:x149<-add(x147,x124,x139)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x3:rbx"",""x126:r10"",""x164:r14b"",""x160:rdi"",""x132:r13"",""x147:bpl"",""x165:r11"",""-0x1:rax"",""x166:OF"",""x140:CF"",""x139:r8"",""x162:rcx"",""0xffffffff00000001:rdx"",""x155:r12"",""x154:r9"",""x148:r15""]";
"	; freeing x164 (r14b) no dependants anymore";
"	setc r14b; spill CF x140 to reg (r14)";
"	clc;";
"	movzx rbp, bpl";
"	adcx rbp, rax; loading flag";
"	adcx r15, r8";
"	;chose >>saved<< arg1[3] from:x3, arg1[3][1] and candidates: x3, arg1[3]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x3:rbx"",""x126:r10"",""x160:rdi"",""x132:r13"",""x147:bpl"",""x165:r11"",""-0x1:rax"",""x166:OF"",""x140:r14b"",""x139:r8"",""x162:rcx"",""0xffffffff00000001:rdx"",""x155:r12"",""x154:r9"",""x148:r15"",""x149:CF"",""arg1[3]:rdx""]";
"	; freeing x160 (rdi) no dependants anymore";
"	mov rdi, rdx; preserving value of 0xffffffff00000001 into a new reg";
"	mov rdx, [rsi + 0x08 * 3 ]; saving arg1[3] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x126:r10"",""x132:r13"",""x147:bpl"",""x165:r11"",""-0x1:rax"",""x166:OF"",""x140:r14b"",""x139:r8"",""x162:rcx"",""0xffffffff00000001:rdi"",""x155:r12"",""x154:r9"",""x148:r15"",""x149:CF"",""arg1[3]:rdx"",""x130:rbx""]";
"	; freeing x147 (bpl) no dependants anymore";
"	;-- allocation: [""arg1:rsi"",""x126:r10"",""x132:r13"",""x165:r11"",""-0x1:rax"",""x166:OF"",""x140:r14b"",""x139:r8"",""x162:rcx"",""0xffffffff00000001:rdi"",""x155:r12"",""x154:r9"",""x148:r15"",""x149:CF"",""arg1[3]:rdx"",""x130:rbx"",""x129:rbp""]";
"	mulx rbx, rbp, rbx; x130, x129<- x3 * arg1[3]";
"	";
"";
"	; add:";
"	; r:x167,f:x168<-add(x166,x148,x162)";
"	; CF: ALIVE,OF: ALIVE";
"	adox rcx, r15";
"	";
"";
"	; sub:";
"	; r:x174,f:x175<-sub(0x0,x165,0xffffffffffffffff)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x126:r10"",""x132:r13"",""x165:r11"",""-0x1:rax"",""x140:r14b"",""x139:r8"",""0xffffffff00000001:rdi"",""x155:r12"",""x154:r9"",""x148:r15"",""x149:CF"",""arg1[3]:rdx"",""x130:rbx"",""x129:rbp"",""x168:OF"",""x167:rcx""]";
"	; freeing x139 (r8) no dependants anymore";
"	setc r8b; spill CF x149 to reg (r8)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x126:r10"",""x132:r13"",""x165:r11"",""-0x1:rax"",""x140:r14b"",""0xffffffff00000001:rdi"",""x155:r12"",""x154:r9"",""x148:r15"",""x149:r8b"",""arg1[3]:rdx"",""x130:rbx"",""x129:rbp"",""x168:OF"",""x167:rcx""]";
"	; freeing x148 (r15) no dependants anymore";
"	seto r15b; spill OF x168 to reg (r15)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x126:r10"",""x132:r13"",""x165:r11"",""-0x1:rax"",""x140:r14b"",""0xffffffff00000001:rdi"",""x155:r12"",""x154:r9"",""x149:r8b"",""arg1[3]:rdx"",""x130:rbx"",""x129:rbp"",""x168:r15b"",""x167:rcx""]";
"	;chose 0xffffffff00000001 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: -0x1, 0xffffffff00000001, arg1[3]";
"	; freeing, i.e. spilling 0xffffffff00000001, because I am out of ideas";
"	; allocs: arg1(rsi),x126(r10),x132(r13),x165(r11),-0x1(rax),x140(r14b),0xffffffff00000001(rdi),x155(r12),x154(r9),x149(r8b),arg1[3](rdx),x130(rbx),x129(rbp),x168(r15b),x167(rcx); clobs x174,x175,0x0,x165,0xffffffffffffffff,x149,x149,x168,x168,x165; will spare: 0xffffffff00000001 ";
"	mov rdi,  r11; x174, copying x165 here, cause x165 is needed in a reg for other than x174, namely all: , x184, x174--x175, size: 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x126:r10"",""x132:r13"",""x165:r11"",""-0x1:rax"",""x140:r14b"",""x155:r12"",""x154:r9"",""x149:r8b"",""arg1[3]:rdx"",""x130:rbx"",""x129:rbp"",""x168:r15b"",""x167:rcx"",""x174:rdi""]";
"	;chose arg1[3] to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: -0x1, arg1[3]";
"	; freeing, i.e. spilling arg1[3], because I am out of ideas";
"	; allocs: arg1(rsi),x126(r10),x132(r13),x165(r11),-0x1(rax),x140(r14b),x155(r12),x154(r9),x149(r8b),arg1[3](rdx),x130(rbx),x129(rbp),x168(r15b),x167(rcx),x174(rdi); clobs x174,x175,0x0,x165,0xffffffffffffffff,x149,x149,x168,x168,x165,x174,0xffffffffffffffff; will spare: arg1[3] ";
"	mov rdx, 0xffffffffffffffff ; moving imm to reg";
"	sub rdi, rdx";
"	";
"";
"	; sub:";
"	; r:x176,f:x177<-sub(x175,x167,0xffffffff)";
"	; CF: ALIVE,OF: KILLED";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x126:r10"",""x132:r13"",""x165:r11"",""-0x1:rax"",""x140:r14b"",""x155:r12"",""x154:r9"",""x149:r8b"",""x130:rbx"",""x129:rbp"",""x168:r15b"",""x167:rcx"",""x174:rdi"",""0xffffffffffffffff:rdx"",""x177:CF""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: -0x1, 0xffffffffffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: arg1(rsi),x126(r10),x132(r13),x165(r11),-0x1(rax),x140(r14b),x155(r12),x154(r9),x149(r8b),x130(rbx),x129(rbp),x168(r15b),x167(rcx),x174(rdi),0xffffffffffffffff(rdx); clobs x176,x177,x175,x167,0xffffffff,x167; will spare: 0xffffffffffffffff ";
"	mov rdx,  rcx; x176, copying x167 here, cause x167 is needed in a reg for other than x176, namely all: , x176--x177, x185, size: 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x126:r10"",""x132:r13"",""x165:r11"",""-0x1:rax"",""x140:r14b"",""x155:r12"",""x154:r9"",""x149:r8b"",""x130:rbx"",""x129:rbp"",""x168:r15b"",""x167:rcx"",""x174:rdi"",""x177:CF"",""x176:rdx""]";
"	;chose -0x1 to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg1(rsi),x126(r10),x132(r13),x165(r11),-0x1(rax),x140(r14b),x155(r12),x154(r9),x149(r8b),x130(rbx),x129(rbp),x168(r15b),x167(rcx),x174(rdi),x176(rdx); clobs x176,x177,x175,x167,0xffffffff,x167,x176,0xffffffff; will spare: -0x1 ";
"	mov rax, 0xffffffff ; moving imm to reg";
"	sbb rdx, rax";
"	";
"";
"	; add:";
"	; r:x141,f:x142<-add(x140,x132,x129)";
"	; CF: ALIVE,OF: KILLED";
"	;chose >>saved<< -0x1 from:0x0, -0x1[1] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x126:r10"",""x165:r11"",""x140:r14b"",""x155:r12"",""x154:r9"",""x149:r8b"",""x130:rbx"",""x129:rbp"",""x168:r15b"",""x167:rcx"",""x174:rdi"",""x177:CF"",""x176:rdx"",""0xffffffff:rax"",""x141:r13""]";
"	;chose 0xffffffff to spill because list of spills:x50Lx50Lx50Lx50Lx50Lx50Lx50Lx50Lx99Lx99Lx99Lx99Lx99Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx6Lx128Lx128Lx128Lx128Lx128Lx128Lx128Lx128L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx2Lx2Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx76Lx91Lout1Lout1Lout1Lout1Lout1Lout1Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Larg1[2]Larg1[2]Larg1[2]Larg1[2]Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx149Lx16Lx16Lx16Lx16Lx16Lx93Lx93Lx93Lx93Lx93Lx120Lx120Lx120Lx120Lx60Lx60Lx60Lx60Lx60Lx60Lx60Lx60L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx18Lx44Lx44Lx114Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx84Lx84Lx84Larg1[0]Larg1[0]Larg1[0]Lx67Lx67Lx67Lx67Lx67Larg1[3]Lx124Lx124Lx124Lx124Lx124Lx124Lx124Lx115Lx115Lx115L-0x1L-0x1L-0x1Lx40Lx36Lx36Lx36Lx36Lx36Lx36Lx119Larg1Larg1Larg1L0xffffffff and candidates: 0xffffffff";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: arg1(rsi),x126(r10),x165(r11),x140(r14b),x155(r12),x154(r9),x149(r8b),x130(rbx),x129(rbp),x168(r15b),x167(rcx),x174(rdi),x176(rdx),0xffffffff(rax),x141(r13); clobs x141,x142,x140,x132,x129,x132,-0x1; will spare: 0xffffffff ";
"	mov rax, -0x1 ; moving imm to reg";
"	inc rax; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x126:r10"",""x165:r11"",""x140:r14b"",""x155:r12"",""x154:r9"",""x149:r8b"",""x130:rbx"",""x129:rbp"",""x168:r15b"",""x167:rcx"",""x174:rdi"",""x177:CF"",""x176:rdx"",""x141:r13"",""0x0:rax""]";
"	; freeing 0x0 (rax, since all are neeed, but this one is just an immediate value.";
"	mov rax, -0x1 ; moving imm to reg";
"	movzx r14, r14b";
"	adox r14, rax; loading flag";
"	adox r13, rbp";
"	";
"";
"	; add:";
"	; r:x143,f:_<-add(x142,x130)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x126:r10"",""x165:r11"",""x140:r14b"",""x155:r12"",""x154:r9"",""x149:r8b"",""x129:rbp"",""x168:r15b"",""x167:rcx"",""x174:rdi"",""x177:CF"",""x176:rdx"",""x141:r13"",""-0x1:rax"",""x142:OF"",""x143:rbx""]";
"	; freeing x140 (r14b) no dependants anymore";
"	mov r14, 0x0 ; moving imm to reg";
"	adox rbx, r14";
"	";
"";
"	; add:";
"	; r:x150,f:x151<-add(x149,x126,x141)";
"	; CF: ALIVE,OF: KILLED";
"	inc rax; OF<-0x0, preserve CF 1";
"	; fr:r14";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x165:r11"",""x155:r12"",""x154:r9"",""x149:r8b"",""x129:rbp"",""x168:r15b"",""x167:rcx"",""x174:rdi"",""x177:CF"",""x176:rdx"",""x141:r13"",""x142:OF"",""x143:rbx"",""0x0:rax"",""x150:r10""]";
"	;chose >>RANDOMLY<< r14 from candidates :r14[0].";
"	mov r14, -0x1 ; moving imm to reg";
"	movzx r8, r8b";
"	adox r8, r14; loading flag";
"	adox r10, r13";
"	";
"";
"	; add:";
"	; r:x152,f:x153<-add(x151,x128,x143)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x165:r11"",""x155:r12"",""x154:r9"",""x149:r8b"",""x129:rbp"",""x168:r15b"",""x167:rcx"",""x174:rdi"",""x177:CF"",""x176:rdx"",""x141:r13"",""x143:rbx"",""0x0:rax"",""x150:r10"",""-0x1:r14"",""x153:OF""]";
"	; freeing x149 (r8b) no dependants anymore";
"	movzx r8, byte [rsp + 0x08 * 18 ]; x152, copying x128 here, cause x128 is needed in a reg for other than x152, namely all: , x152--x153, size: 1";
"	adox r8, rbx";
"	";
"";
"	; add:";
"	; r:x169,f:x170<-add(x168,x150,x154)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x165:r11"",""x155:r12"",""x154:r9"",""x129:rbp"",""x168:r15b"",""x167:rcx"",""x174:rdi"",""x177:CF"",""x176:rdx"",""x141:r13"",""x143:rbx"",""0x0:rax"",""-0x1:r14"",""x153:OF"",""x152:r8"",""x169:r10""]";
"	; freeing x129 (rbp) no dependants anymore";
"	seto bpl; spill OF x153 to reg (rbp)";
"	inc r14; OF<-0x0, preserve CF 1";
"	; fr:rax";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x165:r11"",""x155:r12"",""x154:r9"",""x168:r15b"",""x167:rcx"",""x174:rdi"",""x177:CF"",""x176:rdx"",""x141:r13"",""x143:rbx"",""0x0:r14"",""x153:bpl"",""x152:r8"",""x169:r10""]";
"	;chose >>RANDOMLY<< rax from candidates :rax[0].";
"	mov rax, -0x1 ; moving imm to reg";
"	movzx r15, r15b";
"	adox r15, rax; loading flag";
"	adox r10, r9";
"	";
"";
"	; add:";
"	; r:x171,f:x172<-add(x170,x152,x155)";
"	; CF: ALIVE,OF: ALIVE";
"	adox r12, r8";
"	";
"";
"	; sub:";
"	; r:x178,f:x179<-sub(x177,x169,0x0)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x165:r11"",""x154:r9"",""x168:r15b"",""x167:rcx"",""x174:rdi"",""x176:rdx"",""x141:r13"",""x143:rbx"",""0x0:r14"",""x153:bpl"",""x152:r8"",""x169:r10"",""-0x1:rax"",""x172:OF"",""x171:r12"",""x179:CF""]";
"	; freeing x154 (r9) no dependants anymore";
"	seto r9b; spill OF x172 to reg (r9)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x165:r11"",""x168:r15b"",""x167:rcx"",""x174:rdi"",""x176:rdx"",""x141:r13"",""x143:rbx"",""0x0:r14"",""x153:bpl"",""x152:r8"",""x169:r10"",""-0x1:rax"",""x172:r9b"",""x171:r12"",""x179:CF""]";
"	; freeing x168 (r15b) no dependants anymore";
"	mov r15,  r10; x178, copying x169 here, cause x169 is needed in a reg for other than x178, namely all: , x178--x179, x186, size: 2";
"	sbb r15, 0x00000000";
"	";
"";
"	; sub:";
"	; r:x180,f:x181<-sub(x179,x171,0xffffffff00000001)";
"	; CF: ALIVE,OF: KILLED";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x165:r11"",""x167:rcx"",""x174:rdi"",""x176:rdx"",""x141:r13"",""x143:rbx"",""0x0:r14"",""x153:bpl"",""x152:r8"",""x169:r10"",""-0x1:rax"",""x172:r9b"",""x171:r12"",""x178:r15"",""x181:CF""]";
"	; freeing x141 (r13) no dependants anymore";
"	mov r13,  r12; x180, copying x171 here, cause x171 is needed in a reg for other than x180, namely all: , x180--x181, x187, size: 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x165:r11"",""x167:rcx"",""x174:rdi"",""x176:rdx"",""x143:rbx"",""0x0:r14"",""x153:bpl"",""x152:r8"",""x169:r10"",""-0x1:rax"",""x172:r9b"",""x171:r12"",""x178:r15"",""x181:CF"",""x180:r13""]";
"	; freeing x143 (rbx) no dependants anymore";
"	mov rbx, 0xffffffff00000001 ; moving imm to reg";
"	sbb r13, rbx";
"	";
"";
"	; add:";
"	; r:x173,f:_<-add(x172,x153)";
"	; CF: ALIVE,OF: KILLED";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x165:r11"",""x167:rcx"",""x174:rdi"",""x176:rdx"",""0x0:r14"",""x153:bpl"",""x152:r8"",""x169:r10"",""-0x1:rax"",""x172:r9b"",""x171:r12"",""x178:r15"",""x181:CF"",""x180:r13"",""0xffffffff00000001:rbx""]";
"	; freeing x152 (r8) no dependants anymore";
"	movzx r8,  r9b; x173, copying x172 here, cause x172 is needed in a reg for other than x173, namely all: , x173, size: 1";
"	movzx rbp, bpl";
"	lea r8, [r8+rbp]";
"	";
"";
"	; sub:";
"	; r:_,f:x183<-sub(x181,x173,0x0)";
"	; CF: ALIVE,OF: KILLED";
"	sbb r8, 0x00000000";
"	; the job is: x184 = x183 !== 0 ? x174: x165";
"	; fr:r8";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x165:r11"",""x167:rcx"",""x174:rdi"",""x176:rdx"",""0x0:r14"",""x153:bpl"",""x169:r10"",""-0x1:rax"",""x172:r9b"",""x171:r12"",""x178:r15"",""x180:r13"",""0xffffffff00000001:rbx"",""x183:CF""]";
"	;chose >>RANDOMLY<< r8 from candidates :r8[0].";
"	setc r8b; spill CF x183 to reg (r8)";
"	;-- allocation: [""arg1:rsi"",""x165:r11"",""x167:rcx"",""x176:rdx"",""0x0:r14"",""x153:bpl"",""x169:r10"",""-0x1:rax"",""x172:r9b"",""x171:r12"",""x178:r15"",""x180:r13"",""0xffffffff00000001:rbx"",""x183:r8b"",""x184:rdi""]";
"	test r8b, r8b; testing x183";
"	cmovnz rdi, r11; if !ZF, x184<- x165 (nzVar)";
"	; the job is: x187 = x183 !== 0 ? x180: x171";
"	;-- allocation: [""arg1:rsi"",""x165:r11"",""x167:rcx"",""x176:rdx"",""0x0:r14"",""x153:bpl"",""x169:r10"",""-0x1:rax"",""x172:r9b"",""x171:r12"",""x178:r15"",""0xffffffff00000001:rbx"",""x183:r8b"",""x184:rdi"",""x187:r13""]";
"	test r8b, r8b; testing x183";
"	cmovnz r13, r12; if !ZF, x187<- x171 (nzVar)";
"	; the job is: x186 = x183 !== 0 ? x178: x169";
"	;-- allocation: [""arg1:rsi"",""x165:r11"",""x167:rcx"",""x176:rdx"",""0x0:r14"",""x153:bpl"",""x169:r10"",""-0x1:rax"",""x172:r9b"",""x171:r12"",""0xffffffff00000001:rbx"",""x183:r8b"",""x184:rdi"",""x187:r13"",""x186:r15""]";
"	test r8b, r8b; testing x183";
"	cmovnz r15, r10; if !ZF, x186<- x169 (nzVar)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x165:r11"",""x167:rcx"",""x176:rdx"",""0x0:r14"",""x153:bpl"",""x169:r10"",""-0x1:rax"",""x172:r9b"",""x171:r12"",""0xffffffff00000001:rbx"",""x183:r8b"",""x184:rdi"",""x187:r13"",""x186:r15""]";
"	; freeing x165 (r11) no dependants anymore";
"	mov r11, [rsp + 0x08 * 1 ]; load m64 out1 to register64";
"	;-- allocation: [""out1:r11"",""arg1:rsi"",""x167:rcx"",""x176:rdx"",""0x0:r14"",""x153:bpl"",""x169:r10"",""-0x1:rax"",""x172:r9b"",""x171:r12"",""0xffffffff00000001:rbx"",""x183:r8b"",""x184:rdi"",""x186:r15"",""x187:r13""]";
"	mov [r11 + 0x08 * 3 ], r13; out1[3] = x187";
"	; the job is: x185 = x183 !== 0 ? x176: x167";
"	;-- allocation: [""out1:r11"",""arg1:rsi"",""x167:rcx"",""0x0:r14"",""x153:bpl"",""x169:r10"",""-0x1:rax"",""x172:r9b"",""x171:r12"",""0xffffffff00000001:rbx"",""x183:r8b"",""x184:rdi"",""x186:r15"",""x187:r13"",""x185:rdx""]";
"	test r8b, r8b; testing x183";
"	cmovnz rdx, rcx; if !ZF, x185<- x167 (nzVar)";
"	;-- allocation: [""out1:r11"",""arg1:rsi"",""x167:rcx"",""0x0:r14"",""x153:bpl"",""x169:r10"",""-0x1:rax"",""x172:r9b"",""x171:r12"",""0xffffffff00000001:rbx"",""x183:r8b"",""x184:rdi"",""x187:r13"",""x185:rdx"",""x186:r15""]";
"	mov [r11 + 0x08 * 2 ], r15; out1[2] = x186";
"	;-- allocation: [""out1:r11"",""arg1:rsi"",""x167:rcx"",""0x0:r14"",""x153:bpl"",""x169:r10"",""-0x1:rax"",""x172:r9b"",""x171:r12"",""0xffffffff00000001:rbx"",""x183:r8b"",""x184:rdi"",""x187:r13"",""x186:r15"",""x185:rdx""]";
"	mov [r11 + 0x08 * 1 ], rdx; out1[1] = x185";
"	;-- allocation: [""out1:r11"",""arg1:rsi"",""x167:rcx"",""0x0:r14"",""x153:bpl"",""x169:r10"",""-0x1:rax"",""x172:r9b"",""x171:r12"",""0xffffffff00000001:rbx"",""x183:r8b"",""x187:r13"",""x186:r15"",""x185:rdx"",""x184:rdi""]";
"	mov [r11 + 0x08 * 0 ], rdi; out1[0] = x184";
"	mov rbx, [rsp + 0x08 * 19 ]; restoring from stack";
"	mov rbp, [rsp + 0x08 * 20 ]; restoring from stack";
"	mov r12, [rsp + 0x08 * 21 ]; restoring from stack";
"	mov r13, [rsp + 0x08 * 22 ]; restoring from stack";
"	mov r14, [rsp + 0x08 * 23 ]; restoring from stack";
"	mov r15, [rsp + 0x08 * 24 ]; restoring from stack";
"	add rsp, 0xd0 ";
"	ret";
"; cyclecount: 2057";
"; seed 103 ";
"; time Needed: 1804901 ms/ 10000 runs";
"; Time Spent By Invoking Make (measure): 1242609 ms";
"; Ratio (time for make measure)/elapsed: 0.6884637993995238";
"; Reverts a mutation because test was slower: 7935";
"; number tried mutation Permutation: 3330";
"; number tried mutation Spill: 3333";
"; number tried mutation Decision: 3336";
"; FailedEvals (cannot swap because of edge to the next node): 1516";
""].
