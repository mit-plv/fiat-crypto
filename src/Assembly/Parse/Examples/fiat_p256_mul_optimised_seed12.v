Require Import Coq.Strings.String Coq.Lists.List.
Import ListNotations.
Local Open Scope string_scope.
Local Open Scope list_scope.
Example example : list string := [
"SECTION .text";
"	GLOBAL fiat_p256_mul_optimised";
"";
"fiat_p256_mul_optimised:";
"	sub rsp, 0x148 ";
"	mov [rsp + 0x08 * 34 ], rbx; saving to stack";
"	mov [rsp + 0x08 * 35 ], rbp; saving to stack";
"	mov [rsp + 0x08 * 36 ], r12; saving to stack";
"	mov [rsp + 0x08 * 37 ], r13; saving to stack";
"	mov [rsp + 0x08 * 38 ], r14; saving to stack";
"	mov [rsp + 0x08 * 39 ], r15; saving to stack";
"	; rdi contains out1";
"	; rsi contains arg1";
"	; rdx contains arg2";
"	; fr:rax,r10,r11,rbx,rbp,r12,r13,r14,r15,rcx,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rdx""]";
"	;chose >>RANDOMLY<< rax from candidates :rax, r10, r11, rbx, rbp, r12, r13, r14, r15, rcx, r8, r9[0].";
"	mov rax, [rsi + 0x08 * 0 ]; load m64 x4 to register64";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rdx"",""x4:rax""]";
"	;chose >>saved<< arg2[0] from:x4, arg2[0][1] and candidates: x4, arg2[0]";
"	; fr:r10,r11,rbx,rbp,r12,r13,r14,r15,rcx,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rdx"",""x4:rax"",""arg2[0]:rdx""]";
"	;chose >>RANDOMLY<< rcx from candidates :r10, r11, rbx, rbp, r12, r13, r14, r15, rcx, r8, r9[8].";
"	mov rcx, rdx; preserving value of arg2 into a new reg";
"	mov rdx, [rdx + 0x08 * 0 ]; saving arg2[0] in rdx.";
"	; fr:r10,r11,rbx,rbp,r12,r13,r14,r15,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""arg2[0]:rdx""]";
"	;chose >>RANDOMLY<< r15 from candidates :r10, r11, rbx, rbp, r12, r13, r14, r15, r8, r9[7].";
"	; fr:r10,r11,rbx,rbp,r12,r13,r14,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""arg2[0]:rdx"",""x12:r15""]";
"	;chose >>RANDOMLY<< r12 from candidates :r10, r11, rbx, rbp, r12, r13, r14, r8, r9[4].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""arg2[0]:rdx"",""x12:r15"",""x11:r12""]";
"	mulx r15, r12, rax; x12, x11<- x4 * arg2[0]";
"	; fr:r10,r11,rbx,rbp,r13,r14,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""arg2[0]:rdx"",""x12:r15"",""x11:r12""]";
"	;chose >>RANDOMLY<< r8 from candidates :r10, r11, rbx, rbp, r13, r14, r8, r9[6].";
"	mov r8, 0xffffffffffffffff ; moving imm to reg";
"	;chose >>saved<< x11 from:x11, 0xffffffffffffffff[0] and candidates: x11, 0xffffffffffffffff";
"	mov rdx, r12; x11 to rdx";
"	; fr:r10,r11,rbx,rbp,r12,r13,r14,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""x12:r15"",""x11:rdx"",""0xffffffffffffffff:r8""]";
"	;chose >>RANDOMLY<< r14 from candidates :r10, r11, rbx, rbp, r12, r13, r14, r9[6].";
"	; fr:r10,r11,rbx,rbp,r12,r13,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""x12:r15"",""x11:rdx"",""0xffffffffffffffff:r8"",""x25:r14""]";
"	;chose >>RANDOMLY<< r10 from candidates :r10, r11, rbx, rbp, r12, r13, r9[0].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""x12:r15"",""x11:rdx"",""0xffffffffffffffff:r8"",""x25:r14"",""x24:r10""]";
"	mulx r14, r10, r8; x25, x24<- x11 * 0xffffffffffffffff";
"	;chose >>saved<< arg2[1] from:x4, arg2[1][1] and candidates: x4, arg2[1]";
"	; fr:r11,rbx,rbp,r12,r13,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""x12:r15"",""x11:rdx"",""0xffffffffffffffff:r8"",""x25:r14"",""x24:r10"",""arg2[1]:rdx""]";
"	;chose >>RANDOMLY<< r9 from candidates :r11, rbx, rbp, r12, r13, r9[5].";
"	mov r9, rdx; preserving value of x11 into a new reg";
"	mov rdx, [rcx + 0x08 * 1 ]; saving arg2[1] in rdx.";
"	; fr:r11,rbx,rbp,r12,r13";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""x12:r15"",""x11:r9"",""0xffffffffffffffff:r8"",""x25:r14"",""x24:r10"",""arg2[1]:rdx""]";
"	;chose >>RANDOMLY<< rbp from candidates :r11, rbx, rbp, r12, r13[2].";
"	; fr:r11,rbx,r12,r13";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""x12:r15"",""x11:r9"",""0xffffffffffffffff:r8"",""x25:r14"",""x24:r10"",""arg2[1]:rdx"",""x10:rbp""]";
"	;chose >>RANDOMLY<< r13 from candidates :r11, rbx, r12, r13[3].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""x12:r15"",""x11:r9"",""0xffffffffffffffff:r8"",""x25:r14"",""x24:r10"",""arg2[1]:rdx"",""x10:rbp"",""x9:r13""]";
"	mulx rbp, r13, rax; x10, x9<- x4 * arg2[1]";
"	";
"";
"	; add:";
"	; r:_,f:x30<-add(0x0,x11,x24)";
"	; CF: KILLED,OF: KILLED";
"	; fr:r11,rbx,r12";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""x12:r15"",""x11:r9"",""0xffffffffffffffff:r8"",""x25:r14"",""x24:r10"",""arg2[1]:rdx"",""x10:rbp"",""x9:r13""]";
"	;chose >>RANDOMLY<< rbx from candidates :r11, rbx, r12[1].";
"	mov rbx,  r9; _, copying x11 here, cause x11 is needed in a reg for other than _, namely all: , x22--x23, x20--x21, _--x30, size: 3";
"	;chose >>saved<< c_add from:c_add, c_xor_adx, c_test_adx[0] and candidates: c_add, c_xor_adx, c_test_adx";
"	add rbx, r10; could be done better, if r0 has been u8 as well";
"	; fr:r11,rbx,r12";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""x12:r15"",""x11:r9"",""0xffffffffffffffff:r8"",""x25:r14"",""x24:r10"",""arg2[1]:rdx"",""x10:rbp"",""x9:r13"",""x30:CF""]";
"	;chose >>RANDOMLY<< rbx from candidates :r11, rbx, r12[1].";
"	mov rbx, 0xffffffff ; moving imm to reg";
"	;chose >>saved<< 0xffffffff from:x11, 0xffffffff[1] and candidates: x11, 0xffffffff";
"	mov rdx, rbx; 0xffffffff to rdx";
"	; fr:r11,rbx,r12";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""x12:r15"",""x11:r9"",""0xffffffffffffffff:r8"",""x25:r14"",""x24:r10"",""x10:rbp"",""x9:r13"",""x30:CF"",""0xffffffff:rdx""]";
"	;chose >>RANDOMLY<< r11 from candidates :r11, rbx, r12[0].";
"	; fr:rbx,r12";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""x12:r15"",""x11:r9"",""0xffffffffffffffff:r8"",""x25:r14"",""x24:r10"",""x10:rbp"",""x9:r13"",""x30:CF"",""0xffffffff:rdx"",""x23:r11""]";
"	;chose >>RANDOMLY<< r12 from candidates :rbx, r12[1].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""x12:r15"",""x11:r9"",""0xffffffffffffffff:r8"",""x25:r14"",""x24:r10"",""x10:rbp"",""x9:r13"",""x30:CF"",""0xffffffff:rdx"",""x23:r11"",""x22:r12""]";
"	mulx r11, r12, r9; x23, x22<- x11 * 0xffffffff";
"	";
"";
"	; add:";
"	; r:x26,f:x27<-add(0x0,x25,x22)";
"	; CF: ALIVE,OF: KILLED";
"	;chose >>saved<< -0x1 from:0x0, -0x1[1] and candidates: 0x0, -0x1";
"	; fr:rbx";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""x12:r15"",""x11:r9"",""0xffffffffffffffff:r8"",""x24:r10"",""x10:rbp"",""x9:r13"",""x30:CF"",""0xffffffff:rdx"",""x23:r11"",""x22:r12"",""x26:r14""]";
"	;chose >>RANDOMLY<< rbx from candidates :rbx[0].";
"	mov rbx, -0x1 ; moving imm to reg";
"	inc rbx; OF<-0x0, preserve CF 2";
"	adox r14, r12";
"	";
"";
"	; add:";
"	; r:x13,f:x14<-add(0x0,x12,x9)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""x11:r9"",""0xffffffffffffffff:r8"",""x24:r10"",""x10:rbp"",""x9:r13"",""x30:CF"",""0xffffffff:rdx"",""x23:r11"",""x22:r12"",""x26:r14"",""0x0:rbx"",""x27:OF"",""x13:r15""]";
"	; freeing x24 (r10) no dependants anymore";
"	seto r10b; spill OF x27 to reg (r10)";
"	dec rbx; OF<-0x0, preserve CF 3";
"	adox r15, r13";
"	";
"";
"	; add:";
"	; r:x31,f:x32<-add(x30,x13,x26)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx r14, r15";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""x11:r9"",""0xffffffffffffffff:r8"",""x10:rbp"",""x9:r13"",""0xffffffff:rdx"",""x23:r11"",""x22:r12"",""x27:r10b"",""x13:r15"",""-0x1:rbx"",""x14:OF"",""x32:CF"",""x31:r14""]";
"	; freeing x9 (r13) no dependants anymore";
"	mov r13, [rsi + 0x08 * 1 ]; load m64 x1 to register64";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""x11:r9"",""0xffffffffffffffff:r8"",""x10:rbp"",""0xffffffff:rdx"",""x23:r11"",""x22:r12"",""x27:r10b"",""x13:r15"",""-0x1:rbx"",""x14:OF"",""x32:CF"",""x31:r14"",""x1:r13""]";
"	;chose >>saved<< arg2[0] from:x1, arg2[0][1] and candidates: x1, arg2[0]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""x11:r9"",""0xffffffffffffffff:r8"",""x10:rbp"",""0xffffffff:rdx"",""x23:r11"",""x22:r12"",""x27:r10b"",""x13:r15"",""-0x1:rbx"",""x14:OF"",""x32:CF"",""x31:r14"",""x1:r13"",""arg2[0]:rdx""]";
"	; freeing x22 (r12) no dependants anymore";
"	mov r12, rdx; preserving value of 0xffffffff into a new reg";
"	mov rdx, [rcx + 0x08 * 0 ]; saving arg2[0] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""x11:r9"",""0xffffffffffffffff:r8"",""x10:rbp"",""0xffffffff:r12"",""x23:r11"",""x27:r10b"",""x13:r15"",""-0x1:rbx"",""x14:OF"",""x32:CF"",""x31:r14"",""x1:r13"",""arg2[0]:rdx""]";
"	; freeing x13 (r15) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""x11:r9"",""0xffffffffffffffff:r8"",""x10:rbp"",""0xffffffff:r12"",""x23:r11"",""x27:r10b"",""-0x1:rbx"",""x14:OF"",""x32:CF"",""x31:r14"",""x1:r13"",""arg2[0]:rdx"",""x46:r15""]";
"	;chose -0x1 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: 0xffffffffffffffff, -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),arg2(rcx),x4(rax),x11(r9),0xffffffffffffffff(r8),x10(rbp),0xffffffff(r12),x23(r11),x27(r10b),-0x1(rbx),x31(r14),x1(r13),arg2[0](rdx),x46(r15); clobs x45,x46,x1,arg2[0],arg2,0xffffffff,0xffffffff,x46; will spare: -0x1 ";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""x11:r9"",""0xffffffffffffffff:r8"",""x10:rbp"",""0xffffffff:r12"",""x23:r11"",""x27:r10b"",""x14:OF"",""x32:CF"",""x31:r14"",""x1:r13"",""arg2[0]:rdx"",""x46:r15"",""x45:rbx""]";
"	mulx r15, rbx, r13; x46, x45<- x1 * arg2[0]";
"	";
"";
"	; add:";
"	; r:x54,f:x55<-add(0x0,x31,x45)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""x11:r9"",""0xffffffffffffffff:r8"",""x10:rbp"",""0xffffffff:r12"",""x23:r11"",""x27:r10b"",""x14:OF"",""x32:CF"",""x1:r13"",""arg2[0]:rdx"",""x46:r15"",""x45:rbx"",""x54:r14""]";
"	;chose 0xffffffff to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: 0xffffffffffffffff, 0xffffffff, arg2[0]";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),arg2(rcx),x4(rax),x11(r9),0xffffffffffffffff(r8),x10(rbp),0xffffffff(r12),x23(r11),x27(r10b),x1(r13),arg2[0](rdx),x46(r15),x45(rbx),x54(r14); clobs x54,x55,0x0,x31,x45,x31,x32; will spare: 0xffffffff ";
"	setc r12b; spill CF x32 to reg (r12)";
"	clc;";
"	adcx r14, rbx";
"	;chose >>saved<< 0xffffffffffffffff from:x54, 0xffffffffffffffff[1] and candidates: x54, 0xffffffffffffffff";
"	mov rdx, r8; 0xffffffffffffffff to rdx";
"	; fr:r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""x11:r9"",""0xffffffffffffffff:rdx"",""x10:rbp"",""x23:r11"",""x27:r10b"",""x14:OF"",""x32:r12b"",""x1:r13"",""x46:r15"",""x45:rbx"",""x54:r14"",""x55:CF""]";
"	;chose >>RANDOMLY<< r8 from candidates :r8[0].";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""x11:r9"",""0xffffffffffffffff:rdx"",""x10:rbp"",""x23:r11"",""x27:r10b"",""x14:OF"",""x32:r12b"",""x1:r13"",""x46:r15"",""x45:rbx"",""x54:r14"",""x55:CF"",""x69:r8""]";
"	; freeing x45 (rbx) no dependants anymore";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""x11:r9"",""0xffffffffffffffff:rdx"",""x10:rbp"",""x23:r11"",""x27:r10b"",""x14:OF"",""x32:r12b"",""x1:r13"",""x46:r15"",""x54:r14"",""x55:CF"",""x69:r8"",""x68:rbx""]";
"	mulx r8, rbx, r14; x69, x68<- x54 * 0xffffffffffffffff";
"	";
"";
"	; add:";
"	; r:_,f:x74<-add(0x0,x54,x68)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""x11:r9"",""0xffffffffffffffff:rdx"",""x10:rbp"",""x23:r11"",""x27:r10b"",""x14:OF"",""x32:r12b"",""x1:r13"",""x46:r15"",""x54:r14"",""x55:CF"",""x69:r8"",""x68:rbx""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: 0xffffffffffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),arg2(rcx),x4(rax),x11(r9),0xffffffffffffffff(rdx),x10(rbp),x23(r11),x27(r10b),x32(r12b),x1(r13),x46(r15),x54(r14),x69(r8),x68(rbx); clobs _,x74,0x0,x54,x68,x54; will spare: 0xffffffffffffffff ";
"	mov rdx,  r14; _, copying x54 here, cause x54 is needed in a reg for other than _, namely all: , _--x74, x64--x65, x66--x67, size: 3";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rcx"",""x4:rax"",""x11:r9"",""x10:rbp"",""x23:r11"",""x27:r10b"",""x14:OF"",""x32:r12b"",""x1:r13"",""x46:r15"",""x54:r14"",""x55:CF"",""x69:r8"",""x68:rbx"",""_:rdx""]";
"	;chose out1 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: out1, arg1, arg2, x4, x11, x10, x23, x27, x32, x1, x46, x69";
"	; freeing, i.e. spilling out1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),arg2(rcx),x4(rax),x11(r9),x10(rbp),x23(r11),x27(r10b),x32(r12b),x1(r13),x46(r15),x54(r14),x69(r8),x68(rbx),_(rdx); clobs _,x74,0x0,x54,x68,x54,_,x55; will spare: out1 ";
"	mov [rsp + 0x08 * 0 ], rdi; spilling out1 to mem";
"	setc dil; spill CF x55 to reg (rdi)";
"	clc;";
"	adcx rdx, rbx";
"	;chose >>saved<< x4 from:x4, arg2[2][0] and candidates: x4, arg2[2]";
"	mov rdx, rax; x4 to rdx";
"	; fr:rax";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rcx"",""x4:rdx"",""x11:r9"",""x10:rbp"",""x23:r11"",""x27:r10b"",""x14:OF"",""x32:r12b"",""x1:r13"",""x46:r15"",""x54:r14"",""x55:dil"",""x69:r8"",""x68:rbx"",""x74:CF""]";
"	;chose >>RANDOMLY<< rax from candidates :rax[0].";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rcx"",""x4:rdx"",""x11:r9"",""x10:rbp"",""x23:r11"",""x27:r10b"",""x14:OF"",""x32:r12b"",""x1:r13"",""x46:r15"",""x54:r14"",""x55:dil"",""x69:r8"",""x68:rbx"",""x74:CF"",""x8:rax""]";
"	; freeing x68 (rbx) no dependants anymore";
"	;-- allocation: [""arg1:rsi"",""arg2:rcx"",""x4:rdx"",""x11:r9"",""x10:rbp"",""x23:r11"",""x27:r10b"",""x14:OF"",""x32:r12b"",""x1:r13"",""x46:r15"",""x54:r14"",""x55:dil"",""x69:r8"",""x74:CF"",""x8:rax"",""x7:rbx""]";
"	mulx rax, rbx, [rcx + 0x08 * 2 ]; x8, x7<- x4 * arg2[2]";
"	";
"";
"	; add:";
"	; r:x15,f:x16<-add(x14,x10,x7)";
"	; CF: ALIVE,OF: ALIVE";
"	adox rbx, rbp";
"	;chose >>saved<< arg2[1] from:x1, arg2[1][1] and candidates: x1, arg2[1]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rcx"",""x4:rdx"",""x11:r9"",""x10:rbp"",""x23:r11"",""x27:r10b"",""x32:r12b"",""x1:r13"",""x46:r15"",""x54:r14"",""x55:dil"",""x69:r8"",""x74:CF"",""x8:rax"",""x16:OF"",""x15:rbx"",""arg2[1]:rdx""]";
"	; freeing x10 (rbp) no dependants anymore";
"	mov rbp, rdx; preserving value of x4 into a new reg";
"	mov rdx, [rcx + 0x08 * 1 ]; saving arg2[1] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rcx"",""x4:rbp"",""x11:r9"",""x23:r11"",""x27:r10b"",""x32:r12b"",""x1:r13"",""x46:r15"",""x54:r14"",""x55:dil"",""x69:r8"",""x74:CF"",""x8:rax"",""x16:OF"",""x15:rbx"",""arg2[1]:rdx""]";
"	;chose x8 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, x11, x23, x27, x32, x46, x54, x55, x69, x8, x15";
"	; freeing, i.e. spilling x8, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rcx),x4(rbp),x11(r9),x23(r11),x27(r10b),x32(r12b),x1(r13),x46(r15),x54(r14),x55(dil),x69(r8),x8(rax),x15(rbx),arg2[1](rdx); clobs x43,x44,x1,arg2[1],arg2,x4,x4; will spare: x8 ";
"	mov [rsp + 0x08 * 1 ], rax; spilling x8 to mem";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rcx"",""x4:rbp"",""x11:r9"",""x23:r11"",""x27:r10b"",""x32:r12b"",""x1:r13"",""x46:r15"",""x54:r14"",""x55:dil"",""x69:r8"",""x74:CF"",""x16:OF"",""x15:rbx"",""arg2[1]:rdx"",""x44:rax""]";
"	;chose x54 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, x11, x23, x27, x32, x46, x54, x55, x69, x15";
"	; freeing, i.e. spilling x54, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rcx),x4(rbp),x11(r9),x23(r11),x27(r10b),x32(r12b),x1(r13),x46(r15),x54(r14),x55(dil),x69(r8),x15(rbx),arg2[1](rdx),x44(rax); clobs x43,x44,x1,arg2[1],arg2,x4,x4,x44; will spare: x54 ";
"	mov [rsp + 0x08 * 2 ], r14; spilling x54 to mem";
"	;-- allocation: [""arg1:rsi"",""arg2:rcx"",""x4:rbp"",""x11:r9"",""x23:r11"",""x27:r10b"",""x32:r12b"",""x1:r13"",""x46:r15"",""x55:dil"",""x69:r8"",""x74:CF"",""x16:OF"",""x15:rbx"",""arg2[1]:rdx"",""x44:rax"",""x43:r14""]";
"	mulx rax, r14, r13; x44, x43<- x1 * arg2[1]";
"	";
"";
"	; add:";
"	; r:x28,f:_<-add(x27,x23)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rcx"",""x4:rbp"",""x11:r9"",""x23:r11"",""x27:r10b"",""x32:r12b"",""x1:r13"",""x46:r15"",""x55:dil"",""x69:r8"",""x74:CF"",""x16:OF"",""x15:rbx"",""arg2[1]:rdx"",""x44:rax"",""x43:r14""]";
"	;chose arg2[1] to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg2[1]";
"	; freeing, i.e. spilling arg2[1], because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rcx),x4(rbp),x11(r9),x23(r11),x27(r10b),x32(r12b),x1(r13),x46(r15),x55(dil),x69(r8),x15(rbx),arg2[1](rdx),x44(rax),x43(r14); clobs x28,x27,x23,x27; will spare: arg2[1] ";
"	movzx rdx,  r10b; x28, copying x27 here, cause x27 is needed in a reg for other than x28, namely all: , x28, size: 1";
"	lea rdx, [rdx+r11]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rcx"",""x4:rbp"",""x11:r9"",""x23:r11"",""x27:r10b"",""x32:r12b"",""x1:r13"",""x46:r15"",""x55:dil"",""x69:r8"",""x74:CF"",""x16:OF"",""x15:rbx"",""x44:rax"",""x43:r14"",""x28:rdx""]";
"	; freeing x23 (r11) no dependants anymore";
"	mov r11, 0xffffffff ; moving imm to reg";
"	;chose >>saved<< 0xffffffff from:x54, 0xffffffff[1] and candidates: x54, 0xffffffff";
"	xchg rdx, r11; 0xffffffff, swapping with x28, which is currently in rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rcx"",""x4:rbp"",""x11:r9"",""x27:r10b"",""x32:r12b"",""x1:r13"",""x46:r15"",""x55:dil"",""x69:r8"",""x74:CF"",""x16:OF"",""x15:rbx"",""x44:rax"",""x43:r14"",""x28:r11"",""0xffffffff:rdx""]";
"	; freeing x27 (r10b) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rcx"",""x4:rbp"",""x11:r9"",""x32:r12b"",""x1:r13"",""x46:r15"",""x55:dil"",""x69:r8"",""x74:CF"",""x16:OF"",""x15:rbx"",""x44:rax"",""x43:r14"",""x28:r11"",""0xffffffff:rdx"",""x67:r10""]";
"	;chose arg2 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, arg2, x4, x11, x32, x1, x46, x55, x69, x15, x44, x43, x28";
"	; freeing, i.e. spilling arg2, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rcx),x4(rbp),x11(r9),x32(r12b),x1(r13),x46(r15),x55(dil),x69(r8),x15(rbx),x44(rax),x43(r14),x28(r11),0xffffffff(rdx),x67(r10); clobs x66,x67,x54,0xffffffff,0xffffffff,0xffffffff,x67; will spare: arg2 ";
"	mov [rsp + 0x08 * 3 ], rcx; spilling arg2 to mem";
"	;-- allocation: [""arg1:rsi"",""x4:rbp"",""x11:r9"",""x32:r12b"",""x1:r13"",""x46:r15"",""x55:dil"",""x69:r8"",""x74:CF"",""x16:OF"",""x15:rbx"",""x44:rax"",""x43:r14"",""x28:r11"",""0xffffffff:rdx"",""x67:r10"",""x66:rcx""]";
"	mulx r10, rcx, [rsp + 0x08 * 2 ]; x67, x66<- x54 * 0xffffffff";
"	";
"";
"	; add:";
"	; r:x47,f:x48<-add(0x0,x46,x43)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:rbp"",""x11:r9"",""x32:r12b"",""x1:r13"",""x55:dil"",""x69:r8"",""x74:CF"",""x16:OF"",""x15:rbx"",""x44:rax"",""x43:r14"",""x28:r11"",""0xffffffff:rdx"",""x67:r10"",""x66:rcx"",""x47:r15""]";
"	;chose 0xffffffff to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: 0xffffffff";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: arg1(rsi),x4(rbp),x11(r9),x32(r12b),x1(r13),x55(dil),x69(r8),x15(rbx),x44(rax),x43(r14),x28(r11),0xffffffff(rdx),x67(r10),x66(rcx),x47(r15); clobs x47,x48,0x0,x46,x43,x46,x16; will spare: 0xffffffff ";
"	seto dl; spill OF x16 to reg (rdx)";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:rbp"",""x11:r9"",""x32:r12b"",""x1:r13"",""x55:dil"",""x69:r8"",""x74:CF"",""x16:dl"",""x15:rbx"",""x44:rax"",""x43:r14"",""x28:r11"",""x67:r10"",""x66:rcx"",""x47:r15""]";
"	;chose x67 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, x4, x11, x32, x1, x55, x69, x15, x44, x28, x67, x66";
"	; freeing, i.e. spilling x67, because I am out of ideas";
"	; allocs: arg1(rsi),x4(rbp),x11(r9),x32(r12b),x1(r13),x55(dil),x69(r8),x16(dl),x15(rbx),x44(rax),x43(r14),x28(r11),x67(r10),x66(rcx),x47(r15); clobs x47,x48,0x0,x46,x43,x46,x16,x16,0x0; will spare: x67 ";
"	mov [rsp + 0x08 * 4 ], r10; spilling x67 to mem";
"	mov r10, 0x0 ; moving imm to reg";
"	dec r10; OF<-0x0, preserve CF 3";
"	adox r15, r14";
"	";
"";
"	; add:";
"	; r:x33,f:x34<-add(x32,x15,x28)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:rbp"",""x11:r9"",""x32:r12b"",""x1:r13"",""x55:dil"",""x69:r8"",""x74:CF"",""x16:dl"",""x44:rax"",""x43:r14"",""x28:r11"",""x66:rcx"",""x47:r15"",""-0x1:r10"",""x48:OF"",""x33:rbx""]";
"	; freeing x43 (r14) no dependants anymore";
"	setc r14b; spill CF x74 to reg (r14)";
"	clc;";
"	movzx r12, r12b";
"	adcx r12, r10; loading flag";
"	adcx rbx, r11";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:rbp"",""x11:r9"",""x32:r12b"",""x1:r13"",""x55:dil"",""x69:r8"",""x74:r14b"",""x16:dl"",""x44:rax"",""x28:r11"",""x66:rcx"",""x47:r15"",""-0x1:r10"",""x48:OF"",""x33:rbx"",""x34:CF""]";
"	; freeing x32 (r12b) no dependants anymore";
"	mov r12, [rsi + 0x08 * 2 ]; load m64 x2 to register64";
"	;-- allocation: [""arg1:rsi"",""x4:rbp"",""x11:r9"",""x1:r13"",""x55:dil"",""x69:r8"",""x74:r14b"",""x16:dl"",""x44:rax"",""x28:r11"",""x66:rcx"",""x47:r15"",""-0x1:r10"",""x48:OF"",""x33:rbx"",""x34:CF"",""x2:r12""]";
"	";
"";
"	; add:";
"	; r:x70,f:x71<-add(0x0,x69,x66)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:rbp"",""x11:r9"",""x1:r13"",""x55:dil"",""x74:r14b"",""x16:dl"",""x44:rax"",""x28:r11"",""x66:rcx"",""x47:r15"",""-0x1:r10"",""x48:OF"",""x33:rbx"",""x34:CF"",""x2:r12"",""x70:r8""]";
"	; freeing x28 (r11) no dependants anymore";
"	seto r11b; spill OF x48 to reg (r11)";
"	inc r10; OF<-0x0, preserve CF 2";
"	adox r8, rcx";
"	";
"";
"	; add:";
"	; r:x56,f:x57<-add(x55,x33,x47)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:rbp"",""x11:r9"",""x1:r13"",""x55:dil"",""x74:r14b"",""x16:dl"",""x44:rax"",""x66:rcx"",""x47:r15"",""x48:r11b"",""x34:CF"",""x2:r12"",""x70:r8"",""0x0:r10"",""x71:OF"",""x56:rbx""]";
"	; freeing x66 (rcx) no dependants anymore";
"	seto cl; spill OF x71 to reg (rcx)";
"	dec r10; OF<-0x0, preserve CF 3";
"	movzx rdi, dil";
"	adox rdi, r10; loading flag";
"	adox rbx, r15";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x4:rbp"",""x11:r9"",""x1:r13"",""x55:dil"",""x74:r14b"",""x16:dl"",""x44:rax"",""x47:r15"",""x48:r11b"",""x34:CF"",""x2:r12"",""x70:r8"",""x71:cl"",""x56:rbx"",""-0x1:r10"",""x57:OF""]";
"	; freeing x55 (dil) no dependants anymore";
"	mov rdi, [rsp + 0x08 * 3 ]; load m64 arg2 to register64";
"	;chose >>saved<< x2 from:x2, arg2[0][0] and candidates: x2, arg2[0]";
"	xchg rdx, r12; x2, swapping with x16, which is currently in rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x4:rbp"",""x11:r9"",""x1:r13"",""x74:r14b"",""x16:r12b"",""x44:rax"",""x47:r15"",""x48:r11b"",""x34:CF"",""x2:rdx"",""x70:r8"",""x71:cl"",""x56:rbx"",""-0x1:r10"",""x57:OF""]";
"	; freeing x47 (r15) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x4:rbp"",""x11:r9"",""x1:r13"",""x74:r14b"",""x16:r12b"",""x44:rax"",""x48:r11b"",""x34:CF"",""x2:rdx"",""x70:r8"",""x71:cl"",""x56:rbx"",""-0x1:r10"",""x57:OF"",""x91:r15""]";
"	;chose -0x1 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x4(rbp),x11(r9),x1(r13),x74(r14b),x16(r12b),x44(rax),x48(r11b),x2(rdx),x70(r8),x71(cl),x56(rbx),-0x1(r10),x91(r15); clobs x90,x91,x2,arg2[0],arg2,arg2,arg2,x91; will spare: -0x1 ";
"	;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x4:rbp"",""x11:r9"",""x1:r13"",""x74:r14b"",""x16:r12b"",""x44:rax"",""x48:r11b"",""x34:CF"",""x2:rdx"",""x70:r8"",""x71:cl"",""x56:rbx"",""x57:OF"",""x91:r15"",""x90:r10""]";
"	mulx r15, r10, [rdi + 0x08 * 0 ]; x91, x90<- x2 * arg2[0]";
"	";
"";
"	; add:";
"	; r:x75,f:x76<-add(x74,x56,x70)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x4:rbp"",""x11:r9"",""x1:r13"",""x74:r14b"",""x16:r12b"",""x44:rax"",""x48:r11b"",""x34:CF"",""x2:rdx"",""x70:r8"",""x71:cl"",""x57:OF"",""x91:r15"",""x90:r10"",""x75:rbx""]";
"	;chose x48 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, arg2, x4, x11, x1, x16, x44, x48, x2, x71, x91, x90";
"	; freeing, i.e. spilling x48, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x4(rbp),x11(r9),x1(r13),x74(r14b),x16(r12b),x44(rax),x48(r11b),x2(rdx),x70(r8),x71(cl),x91(r15),x90(r10),x75(rbx); clobs x75,x76,x74,x56,x70,x56,x57; will spare: x48 ";
"	mov byte [rsp + 0x08 * 5 ], r11b; spilling byte x48 to mem";
"	seto r11b; spill OF x57 to reg (r11)";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x4:rbp"",""x11:r9"",""x1:r13"",""x74:r14b"",""x16:r12b"",""x44:rax"",""x34:CF"",""x2:rdx"",""x70:r8"",""x71:cl"",""x57:r11b"",""x91:r15"",""x90:r10"",""x75:rbx""]";
"	;chose x91 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, arg2, x4, x11, x1, x16, x44, x2, x71, x91, x90";
"	; freeing, i.e. spilling x91, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x4(rbp),x11(r9),x1(r13),x74(r14b),x16(r12b),x44(rax),x2(rdx),x70(r8),x71(cl),x57(r11b),x91(r15),x90(r10),x75(rbx); clobs x75,x76,x74,x56,x70,x56,x57,x57,0x0; will spare: x91 ";
"	mov [rsp + 0x08 * 6 ], r15; spilling x91 to mem";
"	mov r15, 0x0 ; moving imm to reg";
"	dec r15; OF<-0x0, preserve CF 3";
"	movzx r14, r14b";
"	adox r14, r15; loading flag";
"	adox rbx, r8";
"	";
"";
"	; add:";
"	; r:x99,f:x100<-add(0x0,x75,x90)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x4:rbp"",""x11:r9"",""x1:r13"",""x74:r14b"",""x16:r12b"",""x44:rax"",""x34:CF"",""x2:rdx"",""x70:r8"",""x71:cl"",""x57:r11b"",""x90:r10"",""-0x1:r15"",""x76:OF"",""x99:rbx""]";
"	; freeing x74 (r14b) no dependants anymore";
"	seto r14b; spill OF x76 to reg (r14)";
"	inc r15; OF<-0x0, preserve CF 2";
"	adox rbx, r10";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x4:rbp"",""x11:r9"",""x1:r13"",""x16:r12b"",""x44:rax"",""x34:CF"",""x2:rdx"",""x70:r8"",""x71:cl"",""x57:r11b"",""x90:r10"",""x76:r14b"",""x99:rbx"",""0x0:r15"",""x100:OF""]";
"	; freeing x70 (r8) no dependants anymore";
"	mov r8, 0xffffffffffffffff ; moving imm to reg";
"	;chose >>saved<< x99 from:x99, 0xffffffffffffffff[0] and candidates: x99, 0xffffffffffffffff";
"	xchg rdx, rbx; x99, swapping with x2, which is currently in rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x4:rbp"",""x11:r9"",""x1:r13"",""x16:r12b"",""x44:rax"",""x34:CF"",""x2:rbx"",""x71:cl"",""x57:r11b"",""x90:r10"",""x76:r14b"",""x99:rdx"",""0x0:r15"",""x100:OF"",""0xffffffffffffffff:r8""]";
"	; freeing x90 (r10) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x4:rbp"",""x11:r9"",""x1:r13"",""x16:r12b"",""x44:rax"",""x34:CF"",""x2:rbx"",""x71:cl"",""x57:r11b"",""x76:r14b"",""x99:rdx"",""0x0:r15"",""x100:OF"",""0xffffffffffffffff:r8"",""x114:r10""]";
"	; freeing 0x0 (r15, since all are neeed, but this one is just an immediate value.";
"	;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x4:rbp"",""x11:r9"",""x1:r13"",""x16:r12b"",""x44:rax"",""x34:CF"",""x2:rbx"",""x71:cl"",""x57:r11b"",""x76:r14b"",""x99:rdx"",""x100:OF"",""0xffffffffffffffff:r8"",""x114:r10"",""x113:r15""]";
"	mulx r10, r15, r8; x114, x113<- x99 * 0xffffffffffffffff";
"	;chose >>saved<< arg2[3] from:x4, arg2[3][1] and candidates: x4, arg2[3]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x4:rbp"",""x11:r9"",""x1:r13"",""x16:r12b"",""x44:rax"",""x34:CF"",""x2:rbx"",""x71:cl"",""x57:r11b"",""x76:r14b"",""x99:rdx"",""x100:OF"",""0xffffffffffffffff:r8"",""x114:r10"",""x113:r15"",""arg2[3]:rdx""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: 0xffffffffffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x4(rbp),x11(r9),x1(r13),x16(r12b),x44(rax),x2(rbx),x71(cl),x57(r11b),x76(r14b),x99(rdx),0xffffffffffffffff(r8),x114(r10),x113(r15),arg2[3](rdx); clobs x5,x6,x4,arg2[3],arg2,x99; will spare: 0xffffffffffffffff ";
"	mov r8, rdx; preserving value of x99 into a new reg";
"	mov rdx, [rdi + 0x08 * 3 ]; saving arg2[3] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x11:r9"",""x1:r13"",""x16:r12b"",""x44:rax"",""x34:CF"",""x2:rbx"",""x71:cl"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x100:OF"",""x114:r10"",""x113:r15"",""arg2[3]:rdx"",""x6:rbp""]";
"	;chose x71 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, x11, x1, x16, x44, x2, x71, x57, x76, x114, x113";
"	; freeing, i.e. spilling x71, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x11(r9),x1(r13),x16(r12b),x44(rax),x2(rbx),x71(cl),x57(r11b),x76(r14b),x99(r8),x114(r10),x113(r15),arg2[3](rdx),x6(rbp); clobs x5,x6,x4,arg2[3],arg2,x99,x99; will spare: x71 ";
"	mov byte [rsp + 0x08 * 7 ], cl; spilling byte x71 to mem";
"	;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x11:r9"",""x1:r13"",""x16:r12b"",""x44:rax"",""x34:CF"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x100:OF"",""x114:r10"",""x113:r15"",""arg2[3]:rdx"",""x6:rbp"",""x5:rcx""]";
"	mulx rbp, rcx, rbp; x6, x5<- x4 * arg2[3]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x11:r9"",""x1:r13"",""x16:r12b"",""x44:rax"",""x34:CF"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x100:OF"",""x114:r10"",""x113:r15"",""arg2[3]:rdx"",""x6:rbp"",""x5:rcx""]";
"	;chose arg2[3] to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg2[3]";
"	; freeing, i.e. spilling arg2[3], because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x11(r9),x1(r13),x16(r12b),x44(rax),x2(rbx),x57(r11b),x76(r14b),x99(r8),x114(r10),x113(r15),arg2[3](rdx),x6(rbp),x5(rcx); clobs x20,x21,x11,0xffffffff00000001,0xffffffff00000001; will spare: arg2[3] ";
"	mov rdx, 0xffffffff00000001 ; moving imm to reg";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x1:r13"",""x16:r12b"",""x44:rax"",""x34:CF"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x100:OF"",""x114:r10"",""x113:r15"",""x6:rbp"",""x5:rcx"",""0xffffffff00000001:rdx"",""x21:r9""]";
"	;chose x6 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, arg2, x1, x16, x44, x2, x57, x76, x99, x114, x113, x6, x5";
"	; freeing, i.e. spilling x6, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x1(r13),x16(r12b),x44(rax),x2(rbx),x57(r11b),x76(r14b),x99(r8),x114(r10),x113(r15),x6(rbp),x5(rcx),0xffffffff00000001(rdx),x21(r9); clobs x20,x21,x11,0xffffffff00000001,0xffffffff00000001,0xffffffff00000001; will spare: x6 ";
"	mov [rsp + 0x08 * 8 ], rbp; spilling x6 to mem";
"	;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x1:r13"",""x16:r12b"",""x44:rax"",""x34:CF"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x100:OF"",""x114:r10"",""x113:r15"",""x5:rcx"",""0xffffffff00000001:rdx"",""x21:r9"",""x20:rbp""]";
"	mulx r9, rbp, r9; x21, x20<- x11 * 0xffffffff00000001";
"	";
"";
"	; add:";
"	; r:_,f:x119<-add(0x0,x99,x113)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x1:r13"",""x16:r12b"",""x44:rax"",""x34:CF"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x100:OF"",""x114:r10"",""x113:r15"",""x5:rcx"",""0xffffffff00000001:rdx"",""x21:r9"",""x20:rbp""]";
"	;chose 0xffffffff00000001 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: 0xffffffff00000001";
"	; freeing, i.e. spilling 0xffffffff00000001, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x1(r13),x16(r12b),x44(rax),x2(rbx),x57(r11b),x76(r14b),x99(r8),x114(r10),x113(r15),x5(rcx),0xffffffff00000001(rdx),x21(r9),x20(rbp); clobs _,x119,0x0,x99,x113,x99; will spare: 0xffffffff00000001 ";
"	mov rdx,  r8; _, copying x99 here, cause x99 is needed in a reg for other than _, namely all: , _--x119, x109--x110, x111--x112, size: 3";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x1:r13"",""x16:r12b"",""x44:rax"",""x34:CF"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x100:OF"",""x114:r10"",""x113:r15"",""x5:rcx"",""x21:r9"",""x20:rbp"",""_:rdx""]";
"	;chose x21 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, arg2, x1, x16, x44, x2, x57, x76, x114, x5, x21, x20";
"	; freeing, i.e. spilling x21, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x1(r13),x16(r12b),x44(rax),x2(rbx),x57(r11b),x76(r14b),x99(r8),x114(r10),x113(r15),x5(rcx),x21(r9),x20(rbp),_(rdx); clobs _,x119,0x0,x99,x113,x99,_,x100; will spare: x21 ";
"	mov [rsp + 0x08 * 9 ], r9; spilling x21 to mem";
"	seto r9b; spill OF x100 to reg (r9)";
"	;chose >>saved<< -0x1 from:0x0, -0x1[1] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x1:r13"",""x16:r12b"",""x44:rax"",""x34:CF"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x100:r9b"",""x114:r10"",""x113:r15"",""x5:rcx"",""x20:rbp"",""_:rdx""]";
"	;chose arg2 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, arg2, x1, x16, x44, x2, x57, x76, x114, x5, x20";
"	; freeing, i.e. spilling arg2, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x1(r13),x16(r12b),x44(rax),x2(rbx),x57(r11b),x76(r14b),x99(r8),x100(r9b),x114(r10),x113(r15),x5(rcx),x20(rbp),_(rdx); clobs _,x119,0x0,x99,x113,x99,_,x100,x100,-0x1; will spare: arg2 ";
"	mov [rsp + 0x08 * 3 ], rdi; spilling arg2 to mem";
"	mov rdi, -0x1 ; moving imm to reg";
"	inc rdi; OF<-0x0, preserve CF 2";
"	adox rdx, r15";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:r13"",""x16:r12b"",""x44:rax"",""x34:CF"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x100:r9b"",""x114:r10"",""x113:r15"",""x5:rcx"",""x20:rbp"",""0x0:rdi"",""x119:OF""]";
"	; freeing x113 (r15) no dependants anymore";
"	mov r15, [rsp + 0x08 * 3 ]; load m64 arg2 to register64";
"	;chose >>saved<< x1 from:x1, arg2[2][0] and candidates: x1, arg2[2]";
"	mov rdx, r13; x1 to rdx";
"	; fr:r13";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x1:rdx"",""x16:r12b"",""x44:rax"",""x34:CF"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x100:r9b"",""x114:r10"",""x5:rcx"",""x20:rbp"",""0x0:rdi"",""x119:OF""]";
"	;chose >>RANDOMLY<< r13 from candidates :r13[0].";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x1:rdx"",""x16:r12b"",""x44:rax"",""x34:CF"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x100:r9b"",""x114:r10"",""x5:rcx"",""x20:rbp"",""0x0:rdi"",""x119:OF"",""x42:r13""]";
"	; freeing 0x0 (rdi, since all are neeed, but this one is just an immediate value.";
"	;-- allocation: [""arg1:rsi"",""arg2:r15"",""x1:rdx"",""x16:r12b"",""x44:rax"",""x34:CF"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x100:r9b"",""x114:r10"",""x5:rcx"",""x20:rbp"",""x119:OF"",""x42:r13"",""x41:rdi""]";
"	mulx r13, rdi, [r15 + 0x08 * 2 ]; x42, x41<- x1 * arg2[2]";
"	";
"";
"	; add:";
"	; r:x17,f:x18<-add(x16,x8,x5)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x1:rdx"",""x16:r12b"",""x44:rax"",""x34:CF"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x100:r9b"",""x114:r10"",""x20:rbp"",""x119:OF"",""x42:r13"",""x41:rdi"",""x17:rcx""]";
"	;chose x100 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, arg2, x1, x44, x2, x57, x76, x99, x100, x114, x20, x42, x41";
"	; freeing, i.e. spilling x100, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x1(rdx),x16(r12b),x44(rax),x2(rbx),x57(r11b),x76(r14b),x99(r8),x100(r9b),x114(r10),x20(rbp),x42(r13),x41(rdi),x17(rcx); clobs x17,x18,x16,x8,x5,x5,x119; will spare: x100 ";
"	mov byte [rsp + 0x08 * 10 ], r9b; spilling byte x100 to mem";
"	seto r9b; spill OF x119 to reg (r9)";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x1:rdx"",""x16:r12b"",""x44:rax"",""x34:CF"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x114:r10"",""x20:rbp"",""x119:r9b"",""x42:r13"",""x41:rdi"",""x17:rcx""]";
"	;chose arg2 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, arg2, x1, x44, x2, x57, x76, x99, x114, x20, x42, x41";
"	; freeing, i.e. spilling arg2, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x1(rdx),x16(r12b),x44(rax),x2(rbx),x57(r11b),x76(r14b),x99(r8),x114(r10),x20(rbp),x119(r9b),x42(r13),x41(rdi),x17(rcx); clobs x17,x18,x16,x8,x5,x5,x119,x119,0x0; will spare: arg2 ";
"	mov [rsp + 0x08 * 3 ], r15; spilling arg2 to mem";
"	mov r15, 0x0 ; moving imm to reg";
"	dec r15; OF<-0x0, preserve CF 3";
"	movzx r12, r12b";
"	adox r12, r15; loading flag";
"	adox rcx, [rsp + 0x08 * 1 ]";
"	";
"";
"	; add:";
"	; r:x49,f:x50<-add(x48,x44,x41)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:rdx"",""x16:r12b"",""x34:CF"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x114:r10"",""x20:rbp"",""x119:r9b"",""x42:r13"",""x41:rdi"",""x17:rcx"",""-0x1:r15"",""x18:OF"",""x49:rax""]";
"	; freeing x16 (r12b) no dependants anymore";
"	seto r12b; spill OF x18 to reg (r12)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:rdx"",""x34:CF"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x114:r10"",""x20:rbp"",""x119:r9b"",""x42:r13"",""x41:rdi"",""x17:rcx"",""-0x1:r15"",""x18:r12b"",""x49:rax""]";
"	;chose -0x1 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg1(rsi),x1(rdx),x2(rbx),x57(r11b),x76(r14b),x99(r8),x114(r10),x20(rbp),x119(r9b),x42(r13),x41(rdi),x17(rcx),-0x1(r15),x18(r12b),x49(rax); clobs x49,x50,x48,x44,x41,x44,x18,x18,x48; will spare: -0x1 ";
"	movzx r15, byte [rsp + 0x08 * 5 ]; load byte memx48 to register64";
"	;chose >>saved<< -0x1 from:0x0, -0x1[1] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:rdx"",""x48:r15"",""x34:CF"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x114:r10"",""x20:rbp"",""x119:r9b"",""x42:r13"",""x41:rdi"",""x17:rcx"",""x18:r12b"",""x49:rax""]";
"	;chose x119 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, x1, x2, x57, x76, x99, x114, x20, x119, x42, x17";
"	; freeing, i.e. spilling x119, because I am out of ideas";
"	; allocs: arg1(rsi),x1(rdx),x48(r15),x2(rbx),x57(r11b),x76(r14b),x99(r8),x114(r10),x20(rbp),x119(r9b),x42(r13),x41(rdi),x17(rcx),x18(r12b),x49(rax); clobs x49,x50,x48,x44,x41,x44,x18,x18,x48,x48,-0x1; will spare: x119 ";
"	mov byte [rsp + 0x08 * 11 ], r9b; spilling byte x119 to mem";
"	mov r9, -0x1 ; moving imm to reg";
"	inc r9; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:rdx"",""x48:r15"",""x34:CF"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x114:r10"",""x20:rbp"",""x42:r13"",""x41:rdi"",""x17:rcx"",""x18:r12b"",""x49:rax"",""0x0:r9""]";
"	; freeing 0x0 (r9, since all are neeed, but this one is just an immediate value.";
"	mov r9, -0x1 ; moving imm to reg";
"	adox r15, r9; loading flag";
"	adox rax, rdi";
"	";
"";
"	; add:";
"	; r:x35,f:x36<-add(x34,x17,x20)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx rbp, rcx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:rdx"",""x48:r15"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x114:r10"",""x42:r13"",""x41:rdi"",""x17:rcx"",""x18:r12b"",""x49:rax"",""-0x1:r9"",""x50:OF"",""x36:CF"",""x35:rbp""]";
"	; freeing x48 (r15) no dependants anymore";
"	mov r15, [rsp + 0x08 * 3 ]; load m64 arg2 to register64";
"	;chose >>saved<< arg2[1] from:x2, arg2[1][1] and candidates: x2, arg2[1]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x1:rdx"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x114:r10"",""x42:r13"",""x41:rdi"",""x17:rcx"",""x18:r12b"",""x49:rax"",""-0x1:r9"",""x50:OF"",""x36:CF"",""x35:rbp"",""arg2[1]:rdx""]";
"	; freeing x41 (rdi) no dependants anymore";
"	mov rdi, rdx; preserving value of x1 into a new reg";
"	mov rdx, [r15 + 0x08 * 1 ]; saving arg2[1] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x1:rdi"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x114:r10"",""x42:r13"",""x17:rcx"",""x18:r12b"",""x49:rax"",""-0x1:r9"",""x50:OF"",""x36:CF"",""x35:rbp"",""arg2[1]:rdx""]";
"	; freeing x17 (rcx) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x1:rdi"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x114:r10"",""x42:r13"",""x18:r12b"",""x49:rax"",""-0x1:r9"",""x50:OF"",""x36:CF"",""x35:rbp"",""arg2[1]:rdx"",""x89:rcx""]";
"	;chose -0x1 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x1(rdi),x2(rbx),x57(r11b),x76(r14b),x99(r8),x114(r10),x42(r13),x18(r12b),x49(rax),-0x1(r9),x35(rbp),arg2[1](rdx),x89(rcx); clobs x88,x89,x2,arg2[1],arg2,arg2,arg2,x1,x1,x89; will spare: -0x1 ";
"	;-- allocation: [""arg1:rsi"",""arg2:r15"",""x1:rdi"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x114:r10"",""x42:r13"",""x18:r12b"",""x49:rax"",""x50:OF"",""x36:CF"",""x35:rbp"",""arg2[1]:rdx"",""x89:rcx"",""x88:r9""]";
"	mulx rcx, r9, rbx; x89, x88<- x2 * arg2[1]";
"	";
"";
"	; add:";
"	; r:x72,f:_<-add(x71,x67)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x1:rdi"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x114:r10"",""x42:r13"",""x18:r12b"",""x49:rax"",""x50:OF"",""x36:CF"",""x35:rbp"",""arg2[1]:rdx"",""x89:rcx"",""x88:r9""]";
"	;chose arg2[1] to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg2[1]";
"	; freeing, i.e. spilling arg2[1], because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x1(rdi),x2(rbx),x57(r11b),x76(r14b),x99(r8),x114(r10),x42(r13),x18(r12b),x49(rax),x35(rbp),arg2[1](rdx),x89(rcx),x88(r9); clobs x72,x71,x67,x71; will spare: arg2[1] ";
"	movzx rdx, byte [rsp + 0x08 * 7 ]; x72, copying x71 here, cause x71 is needed in a reg for other than x72, namely all: , x72, size: 1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x1:rdi"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x114:r10"",""x42:r13"",""x18:r12b"",""x49:rax"",""x50:OF"",""x36:CF"",""x35:rbp"",""x89:rcx"",""x88:r9"",""x72:rdx""]";
"	;chose arg2 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, arg2, x1, x2, x57, x76, x99, x114, x42, x18, x49, x35, x89, x88";
"	; freeing, i.e. spilling arg2, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x1(rdi),x2(rbx),x57(r11b),x76(r14b),x99(r8),x114(r10),x42(r13),x18(r12b),x49(rax),x35(rbp),x89(rcx),x88(r9),x72(rdx); clobs x72,x71,x67,x71,x72,x67; will spare: arg2 ";
"	mov [rsp + 0x08 * 3 ], r15; spilling arg2 to mem";
"	mov r15, [rsp + 0x08 * 4 ]; load m64 x67 to register64";
"	lea rdx, [rdx+r15]; r8/64 + m8";
"	";
"";
"	; add:";
"	; r:x58,f:x59<-add(x57,x35,x49)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:rdi"",""x67:r15"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x114:r10"",""x42:r13"",""x18:r12b"",""x49:rax"",""x50:OF"",""x36:CF"",""x89:rcx"",""x88:r9"",""x72:rdx"",""x58:rbp""]";
"	; freeing x67 (r15) no dependants anymore";
"	setc r15b; spill CF x36 to reg (r15)";
"	clc;";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:rdi"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x99:r8"",""x114:r10"",""x42:r13"",""x18:r12b"",""x49:rax"",""x50:OF"",""x36:r15b"",""x89:rcx"",""x88:r9"",""x72:rdx"",""x58:rbp""]";
"	;chose x99 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, x1, x2, x76, x99, x114, x42, x18, x89, x88, x72";
"	; freeing, i.e. spilling x99, because I am out of ideas";
"	; allocs: arg1(rsi),x1(rdi),x2(rbx),x57(r11b),x76(r14b),x99(r8),x114(r10),x42(r13),x18(r12b),x49(rax),x36(r15b),x89(rcx),x88(r9),x72(rdx),x58(rbp); clobs x58,x59,x57,x35,x49,x35,x36,x36,-0x1; will spare: x99 ";
"	mov [rsp + 0x08 * 12 ], r8; spilling x99 to mem";
"	mov r8, -0x1 ; moving imm to reg";
"	movzx r11, r11b";
"	adcx r11, r8; loading flag";
"	adcx rbp, rax";
"	";
"";
"	; add:";
"	; r:x92,f:x93<-add(0x0,x91,x88)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:rdi"",""x2:rbx"",""x57:r11b"",""x76:r14b"",""x114:r10"",""x42:r13"",""x18:r12b"",""x49:rax"",""x50:OF"",""x36:r15b"",""x89:rcx"",""x88:r9"",""x72:rdx"",""x58:rbp"",""-0x1:r8"",""x59:CF""]";
"	; freeing x57 (r11b) no dependants anymore";
"	mov r11,  [rsp + 0x08 * 6 ]; x92, copying x91 here, cause x91 is needed in a reg for other than x92, namely all: , x92--x93, size: 1";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:rdi"",""x2:rbx"",""x76:r14b"",""x114:r10"",""x42:r13"",""x18:r12b"",""x49:rax"",""x50:OF"",""x36:r15b"",""x89:rcx"",""x88:r9"",""x72:rdx"",""x58:rbp"",""-0x1:r8"",""x59:CF"",""x92:r11""]";
"	; freeing x49 (rax) no dependants anymore";
"	seto al; spill OF x50 to reg (rax)";
"	inc r8; OF<-0x0, preserve CF 2";
"	adox r11, r9";
"	";
"";
"	; add:";
"	; r:x77,f:x78<-add(x76,x58,x72)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:rdi"",""x2:rbx"",""x76:r14b"",""x114:r10"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x89:rcx"",""x88:r9"",""x72:rdx"",""x59:CF"",""x92:r11"",""0x0:r8"",""x93:OF"",""x77:rbp""]";
"	; freeing x88 (r9) no dependants anymore";
"	seto r9b; spill OF x93 to reg (r9)";
"	dec r8; OF<-0x0, preserve CF 3";
"	movzx r14, r14b";
"	adox r14, r8; loading flag";
"	adox rbp, rdx";
"	";
"";
"	; add:";
"	; r:x101,f:x102<-add(x100,x77,x92)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:rdi"",""x2:rbx"",""x76:r14b"",""x114:r10"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x89:rcx"",""x72:rdx"",""x59:CF"",""x92:r11"",""x93:r9b"",""-0x1:r8"",""x78:OF"",""x101:rbp""]";
"	; freeing x76 (r14b) no dependants anymore";
"	seto r14b; spill OF x78 to reg (r14)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:rdi"",""x2:rbx"",""x114:r10"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x89:rcx"",""x72:rdx"",""x59:CF"",""x92:r11"",""x93:r9b"",""-0x1:r8"",""x78:r14b"",""x101:rbp""]";
"	; freeing x72 (rdx) no dependants anymore";
"	movzx rdx, byte [rsp + 0x08 * 10 ]; load byte memx100 to register64";
"	inc r8; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:rdi"",""x2:rbx"",""x100:rdx"",""x114:r10"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x89:rcx"",""x59:CF"",""x92:r11"",""x93:r9b"",""x78:r14b"",""x101:rbp"",""0x0:r8""]";
"	; freeing 0x0 (r8, since all are neeed, but this one is just an immediate value.";
"	mov r8, -0x1 ; moving imm to reg";
"	adox rdx, r8; loading flag";
"	adox rbp, r11";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:rdi"",""x2:rbx"",""x100:rdx"",""x114:r10"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x89:rcx"",""x59:CF"",""x92:r11"",""x93:r9b"",""x78:r14b"",""x101:rbp"",""-0x1:r8"",""x102:OF""]";
"	; freeing x100 (rdx) no dependants anymore";
"	mov rdx, 0xffffffff ; moving imm to reg";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:rdi"",""x2:rbx"",""x114:r10"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x89:rcx"",""x59:CF"",""x92:r11"",""x93:r9b"",""x78:r14b"",""x101:rbp"",""-0x1:r8"",""x102:OF"",""0xffffffff:rdx""]";
"	; freeing x92 (r11) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:rdi"",""x2:rbx"",""x114:r10"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x89:rcx"",""x59:CF"",""x93:r9b"",""x78:r14b"",""x101:rbp"",""-0x1:r8"",""x102:OF"",""0xffffffff:rdx"",""x112:r11""]";
"	;chose -0x1 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg1(rsi),x1(rdi),x2(rbx),x114(r10),x42(r13),x18(r12b),x50(al),x36(r15b),x89(rcx),x93(r9b),x78(r14b),x101(rbp),-0x1(r8),0xffffffff(rdx),x112(r11); clobs x111,x112,x99,0xffffffff,0xffffffff,0xffffffff,x112; will spare: -0x1 ";
"	;-- allocation: [""arg1:rsi"",""x1:rdi"",""x2:rbx"",""x114:r10"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x89:rcx"",""x59:CF"",""x93:r9b"",""x78:r14b"",""x101:rbp"",""x102:OF"",""0xffffffff:rdx"",""x112:r11"",""x111:r8""]";
"	mulx r11, r8, [rsp + 0x08 * 12 ]; x112, x111<- x99 * 0xffffffff";
"	";
"";
"	; add:";
"	; r:x115,f:x116<-add(0x0,x114,x111)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:rdi"",""x2:rbx"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x89:rcx"",""x59:CF"",""x93:r9b"",""x78:r14b"",""x101:rbp"",""x102:OF"",""0xffffffff:rdx"",""x112:r11"",""x111:r8"",""x115:r10""]";
"	;chose 0xffffffff to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: 0xffffffff";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: arg1(rsi),x1(rdi),x2(rbx),x42(r13),x18(r12b),x50(al),x36(r15b),x89(rcx),x93(r9b),x78(r14b),x101(rbp),0xffffffff(rdx),x112(r11),x111(r8),x115(r10); clobs x115,x116,0x0,x114,x111,x114,x102; will spare: 0xffffffff ";
"	seto dl; spill OF x102 to reg (rdx)";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:rdi"",""x2:rbx"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x89:rcx"",""x59:CF"",""x93:r9b"",""x78:r14b"",""x101:rbp"",""x102:dl"",""x112:r11"",""x111:r8"",""x115:r10""]";
"	;chose x93 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, x1, x2, x42, x18, x50, x36, x89, x93, x78, x101, x112";
"	; freeing, i.e. spilling x93, because I am out of ideas";
"	; allocs: arg1(rsi),x1(rdi),x2(rbx),x42(r13),x18(r12b),x50(al),x36(r15b),x89(rcx),x93(r9b),x78(r14b),x101(rbp),x102(dl),x112(r11),x111(r8),x115(r10); clobs x115,x116,0x0,x114,x111,x114,x102,x102,0x0; will spare: x93 ";
"	mov byte [rsp + 0x08 * 13 ], r9b; spilling byte x93 to mem";
"	mov r9, 0x0 ; moving imm to reg";
"	dec r9; OF<-0x0, preserve CF 3";
"	adox r10, r8";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:rdi"",""x2:rbx"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x89:rcx"",""x59:CF"",""x78:r14b"",""x101:rbp"",""x102:dl"",""x112:r11"",""x111:r8"",""x115:r10"",""-0x1:r9"",""x116:OF""]";
"	; freeing x111 (r8) no dependants anymore";
"	mov r8, [rsi + 0x08 * 3 ]; load m64 x3 to register64";
"	;-- allocation: [""arg1:rsi"",""x1:rdi"",""x2:rbx"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x89:rcx"",""x59:CF"",""x78:r14b"",""x101:rbp"",""x102:dl"",""x112:r11"",""x115:r10"",""-0x1:r9"",""x116:OF"",""x3:r8""]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x1:rdi"",""x2:rbx"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x89:rcx"",""x59:CF"",""x78:r14b"",""x101:rbp"",""x102:dl"",""x112:r11"",""x115:r10"",""-0x1:r9"",""x116:OF"",""x3:r8""]";
"	;chose -0x1 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg1(rsi),x1(rdi),x2(rbx),x42(r13),x18(r12b),x50(al),x36(r15b),x89(rcx),x78(r14b),x101(rbp),x102(dl),x112(r11),x115(r10),-0x1(r9),x3(r8); clobs x135,x136,x3,arg2[0],arg2,arg2; will spare: -0x1 ";
"	mov r9, [rsp + 0x08 * 3 ]; load m64 arg2 to register64";
"	;chose >>saved<< arg2[0] from:x3, arg2[0][1] and candidates: x3, arg2[0]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r9"",""x1:rdi"",""x2:rbx"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x89:rcx"",""x59:CF"",""x78:r14b"",""x101:rbp"",""x102:dl"",""x112:r11"",""x115:r10"",""x116:OF"",""x3:r8"",""arg2[0]:rdx""]";
"	;chose x112 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, x1, x2, x42, x18, x50, x36, x89, x78, x101, x112, x115";
"	; freeing, i.e. spilling x112, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r9),x1(rdi),x2(rbx),x42(r13),x18(r12b),x50(al),x36(r15b),x89(rcx),x78(r14b),x101(rbp),x102(dl),x112(r11),x115(r10),x3(r8),arg2[0](rdx); clobs x135,x136,x3,arg2[0],arg2,arg2,arg2,x102; will spare: x112 ";
"	mov [rsp + 0x08 * 14 ], r11; spilling x112 to mem";
"	mov r11b, dl; preserving value of x102 into a new reg";
"	mov rdx, [r9 + 0x08 * 0 ]; saving arg2[0] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r9"",""x1:rdi"",""x2:rbx"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x89:rcx"",""x59:CF"",""x78:r14b"",""x101:rbp"",""x102:r11b"",""x115:r10"",""x116:OF"",""x3:r8"",""arg2[0]:rdx""]";
"	;chose x115 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, x1, x2, x42, x18, x50, x36, x89, x78, x101, x115";
"	; freeing, i.e. spilling x115, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r9),x1(rdi),x2(rbx),x42(r13),x18(r12b),x50(al),x36(r15b),x89(rcx),x78(r14b),x101(rbp),x102(r11b),x115(r10),x3(r8),arg2[0](rdx); clobs x135,x136,x3,arg2[0],arg2,arg2,arg2,x102,x102; will spare: x115 ";
"	mov [rsp + 0x08 * 15 ], r10; spilling x115 to mem";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r9"",""x1:rdi"",""x2:rbx"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x89:rcx"",""x59:CF"",""x78:r14b"",""x101:rbp"",""x102:r11b"",""x116:OF"",""x3:r8"",""arg2[0]:rdx"",""x136:r10""]";
"	;chose x89 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, x1, x2, x42, x18, x50, x36, x89, x78, x101";
"	; freeing, i.e. spilling x89, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r9),x1(rdi),x2(rbx),x42(r13),x18(r12b),x50(al),x36(r15b),x89(rcx),x78(r14b),x101(rbp),x102(r11b),x3(r8),arg2[0](rdx),x136(r10); clobs x135,x136,x3,arg2[0],arg2,arg2,arg2,x102,x102,x136; will spare: x89 ";
"	mov [rsp + 0x08 * 16 ], rcx; spilling x89 to mem";
"	;-- allocation: [""arg1:rsi"",""arg2:r9"",""x1:rdi"",""x2:rbx"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x59:CF"",""x78:r14b"",""x101:rbp"",""x102:r11b"",""x116:OF"",""x3:r8"",""arg2[0]:rdx"",""x136:r10"",""x135:rcx""]";
"	mulx r10, rcx, r8; x136, x135<- x3 * arg2[0]";
"	";
"";
"	; add:";
"	; r:x120,f:x121<-add(x119,x101,x115)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r9"",""x1:rdi"",""x2:rbx"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x59:CF"",""x78:r14b"",""x102:r11b"",""x116:OF"",""x3:r8"",""arg2[0]:rdx"",""x136:r10"",""x135:rcx"",""x120:rbp""]";
"	;chose arg2[0] to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg2[0]";
"	; freeing, i.e. spilling arg2[0], because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r9),x1(rdi),x2(rbx),x42(r13),x18(r12b),x50(al),x36(r15b),x78(r14b),x102(r11b),x3(r8),arg2[0](rdx),x136(r10),x135(rcx),x120(rbp); clobs x120,x121,x119,x101,x115,x101,x59; will spare: arg2[0] ";
"	setc dl; spill CF x59 to reg (rdx)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r9"",""x1:rdi"",""x2:rbx"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x59:dl"",""x78:r14b"",""x102:r11b"",""x116:OF"",""x3:r8"",""x136:r10"",""x135:rcx"",""x120:rbp""]";
"	;chose x3 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, arg2, x1, x2, x42, x18, x50, x36, x78, x102, x3, x136, x135";
"	; freeing, i.e. spilling x3, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r9),x1(rdi),x2(rbx),x42(r13),x18(r12b),x50(al),x36(r15b),x59(dl),x78(r14b),x102(r11b),x3(r8),x136(r10),x135(rcx),x120(rbp); clobs x120,x121,x119,x101,x115,x101,x59,x59,x119; will spare: x3 ";
"	mov [rsp + 0x08 * 17 ], r8; spilling x3 to mem";
"	movzx r8, byte [rsp + 0x08 * 11 ]; load byte memx119 to register64";
"	clc;";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r9"",""x1:rdi"",""x2:rbx"",""x119:r8"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x59:dl"",""x78:r14b"",""x102:r11b"",""x116:OF"",""x136:r10"",""x135:rcx"",""x120:rbp""]";
"	;chose x102 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, arg2, x1, x2, x42, x18, x50, x36, x78, x102, x136, x135";
"	; freeing, i.e. spilling x102, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r9),x1(rdi),x2(rbx),x119(r8),x42(r13),x18(r12b),x50(al),x36(r15b),x59(dl),x78(r14b),x102(r11b),x136(r10),x135(rcx),x120(rbp); clobs x120,x121,x119,x101,x115,x101,x59,x59,x119,x119,-0x1; will spare: x102 ";
"	mov byte [rsp + 0x08 * 18 ], r11b; spilling byte x102 to mem";
"	mov r11, -0x1 ; moving imm to reg";
"	adcx r8, r11; loading flag";
"	adcx rbp, [rsp + 0x08 * 15 ]";
"	";
"";
"	; add:";
"	; r:x144,f:x145<-add(0x0,x120,x135)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r9"",""x1:rdi"",""x2:rbx"",""x119:r8"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x59:dl"",""x78:r14b"",""x116:OF"",""x136:r10"",""x135:rcx"",""-0x1:r11"",""x121:CF"",""x144:rbp""]";
"	; freeing x119 (r8) no dependants anymore";
"	setc r8b; spill CF x121 to reg (r8)";
"	clc;";
"	adcx rbp, rcx";
"	;chose >>saved<< x1 from:x1, arg2[3][0] and candidates: x1, arg2[3]";
"	xchg rdx, rdi; x1, swapping with x59, which is currently in rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r9"",""x2:rbx"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x59:dil"",""x78:r14b"",""x116:OF"",""x136:r10"",""x135:rcx"",""-0x1:r11"",""x121:r8b"",""x144:rbp"",""x145:CF"",""x40:rdx""]";
"	; freeing x135 (rcx) no dependants anymore";
"	;-- allocation: [""arg1:rsi"",""arg2:r9"",""x2:rbx"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x59:dil"",""x78:r14b"",""x116:OF"",""x136:r10"",""-0x1:r11"",""x121:r8b"",""x144:rbp"",""x145:CF"",""x40:rdx"",""x39:rcx""]";
"	mulx rdx, rcx, [r9 + 0x08 * 3 ]; x40, x39<- x1 * arg2[3]";
"	";
"";
"	; add:";
"	; r:x19,f:_<-add(x18,x6)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r9"",""x2:rbx"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x59:dil"",""x78:r14b"",""x116:OF"",""x136:r10"",""-0x1:r11"",""x121:r8b"",""x144:rbp"",""x145:CF"",""x40:rdx"",""x39:rcx""]";
"	;chose -0x1 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r9),x2(rbx),x42(r13),x18(r12b),x50(al),x36(r15b),x59(dil),x78(r14b),x136(r10),-0x1(r11),x121(r8b),x144(rbp),x40(rdx),x39(rcx); clobs x19,x18,x6,x18; will spare: -0x1 ";
"	movzx r11,  r12b; x19, copying x18 here, cause x18 is needed in a reg for other than x19, namely all: , x19, size: 1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r9"",""x2:rbx"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x59:dil"",""x78:r14b"",""x116:OF"",""x136:r10"",""x121:r8b"",""x144:rbp"",""x145:CF"",""x40:rdx"",""x39:rcx"",""x19:r11""]";
"	;chose x40 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, arg2, x2, x42, x50, x36, x59, x78, x136, x121, x144, x40, x39";
"	; freeing, i.e. spilling x40, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r9),x2(rbx),x42(r13),x18(r12b),x50(al),x36(r15b),x59(dil),x78(r14b),x136(r10),x121(r8b),x144(rbp),x40(rdx),x39(rcx),x19(r11); clobs x19,x18,x6,x18,x19,x6; will spare: x40 ";
"	mov [rsp + 0x08 * 19 ], rdx; spilling x40 to mem";
"	mov rdx, [rsp + 0x08 * 8 ]; load m64 x6 to register64";
"	lea r11, [r11+rdx]; r8/64 + m8";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r9"",""x2:rbx"",""x6:rdx"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x59:dil"",""x78:r14b"",""x116:OF"",""x136:r10"",""x121:r8b"",""x144:rbp"",""x145:CF"",""x39:rcx"",""x19:r11""]";
"	; freeing x6 (rdx) no dependants anymore";
"	mov rdx, 0xffffffff00000001 ; moving imm to reg";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r9"",""x2:rbx"",""x42:r13"",""x18:r12b"",""x50:al"",""x36:r15b"",""x59:dil"",""x78:r14b"",""x116:OF"",""x136:r10"",""x121:r8b"",""x144:rbp"",""x145:CF"",""x39:rcx"",""x19:r11"",""0xffffffff00000001:rdx""]";
"	; freeing x18 (r12b) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r9"",""x2:rbx"",""x42:r13"",""x50:al"",""x36:r15b"",""x59:dil"",""x78:r14b"",""x116:OF"",""x136:r10"",""x121:r8b"",""x144:rbp"",""x145:CF"",""x39:rcx"",""x19:r11"",""0xffffffff00000001:rdx"",""x65:r12""]";
"	;chose arg2 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, arg2, x2, x42, x50, x36, x59, x78, x136, x121, x144, x39, x19";
"	; freeing, i.e. spilling arg2, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r9),x2(rbx),x42(r13),x50(al),x36(r15b),x59(dil),x78(r14b),x136(r10),x121(r8b),x144(rbp),x39(rcx),x19(r11),0xffffffff00000001(rdx),x65(r12); clobs x64,x65,x54,0xffffffff00000001,0xffffffff00000001,0xffffffff00000001,x65; will spare: arg2 ";
"	mov [rsp + 0x08 * 3 ], r9; spilling arg2 to mem";
"	;-- allocation: [""arg1:rsi"",""x2:rbx"",""x42:r13"",""x50:al"",""x36:r15b"",""x59:dil"",""x78:r14b"",""x116:OF"",""x136:r10"",""x121:r8b"",""x144:rbp"",""x145:CF"",""x39:rcx"",""x19:r11"",""0xffffffff00000001:rdx"",""x65:r12"",""x64:r9""]";
"	mulx r12, r9, [rsp + 0x08 * 2 ]; x65, x64<- x54 * 0xffffffff00000001";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x2:rbx"",""x42:r13"",""x50:al"",""x36:r15b"",""x59:dil"",""x78:r14b"",""x116:OF"",""x136:r10"",""x121:r8b"",""x144:rbp"",""x145:CF"",""x39:rcx"",""x19:r11"",""0xffffffff00000001:rdx"",""x65:r12"",""x64:r9""]";
"	;chose 0xffffffff00000001 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: 0xffffffff00000001";
"	; freeing, i.e. spilling 0xffffffff00000001, because I am out of ideas";
"	; allocs: arg1(rsi),x2(rbx),x42(r13),x50(al),x36(r15b),x59(dil),x78(r14b),x136(r10),x121(r8b),x144(rbp),x39(rcx),x19(r11),0xffffffff00000001(rdx),x65(r12),x64(r9); clobs x158,x159,x144,0xffffffffffffffff,0xffffffffffffffff; will spare: 0xffffffff00000001 ";
"	mov rdx, 0xffffffffffffffff ; moving imm to reg";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x2:rbx"",""x42:r13"",""x50:al"",""x36:r15b"",""x59:dil"",""x78:r14b"",""x116:OF"",""x136:r10"",""x121:r8b"",""x144:rbp"",""x145:CF"",""x39:rcx"",""x19:r11"",""x65:r12"",""x64:r9"",""0xffffffffffffffff:rdx""]";
"	;chose x65 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, x2, x42, x50, x36, x59, x78, x136, x121, x39, x19, x65, x64";
"	; freeing, i.e. spilling x65, because I am out of ideas";
"	; allocs: arg1(rsi),x2(rbx),x42(r13),x50(al),x36(r15b),x59(dil),x78(r14b),x136(r10),x121(r8b),x144(rbp),x39(rcx),x19(r11),x65(r12),x64(r9),0xffffffffffffffff(rdx); clobs x158,x159,x144,0xffffffffffffffff,0xffffffffffffffff,0xffffffffffffffff; will spare: x65 ";
"	mov [rsp + 0x08 * 20 ], r12; spilling x65 to mem";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x2:rbx"",""x42:r13"",""x50:al"",""x36:r15b"",""x59:dil"",""x78:r14b"",""x116:OF"",""x136:r10"",""x121:r8b"",""x144:rbp"",""x145:CF"",""x39:rcx"",""x19:r11"",""x64:r9"",""0xffffffffffffffff:rdx"",""x159:r12""]";
"	;chose x136 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, x2, x42, x50, x36, x59, x78, x136, x121, x39, x19, x64";
"	; freeing, i.e. spilling x136, because I am out of ideas";
"	; allocs: arg1(rsi),x2(rbx),x42(r13),x50(al),x36(r15b),x59(dil),x78(r14b),x136(r10),x121(r8b),x144(rbp),x39(rcx),x19(r11),x64(r9),0xffffffffffffffff(rdx),x159(r12); clobs x158,x159,x144,0xffffffffffffffff,0xffffffffffffffff,0xffffffffffffffff,x159; will spare: x136 ";
"	mov [rsp + 0x08 * 21 ], r10; spilling x136 to mem";
"	;-- allocation: [""arg1:rsi"",""x2:rbx"",""x42:r13"",""x50:al"",""x36:r15b"",""x59:dil"",""x78:r14b"",""x116:OF"",""x121:r8b"",""x144:rbp"",""x145:CF"",""x39:rcx"",""x19:r11"",""x64:r9"",""0xffffffffffffffff:rdx"",""x159:r12"",""x158:r10""]";
"	mulx r12, r10, rbp; x159, x158<- x144 * 0xffffffffffffffff";
"	";
"";
"	; add:";
"	; r:x51,f:x52<-add(x50,x42,x39)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x2:rbx"",""x50:al"",""x36:r15b"",""x59:dil"",""x78:r14b"",""x116:OF"",""x121:r8b"",""x144:rbp"",""x145:CF"",""x39:rcx"",""x19:r11"",""x64:r9"",""0xffffffffffffffff:rdx"",""x159:r12"",""x158:r10"",""x51:r13""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: 0xffffffffffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: arg1(rsi),x2(rbx),x50(al),x36(r15b),x59(dil),x78(r14b),x121(r8b),x144(rbp),x39(rcx),x19(r11),x64(r9),0xffffffffffffffff(rdx),x159(r12),x158(r10),x51(r13); clobs x51,x52,x50,x42,x39,x42,x116; will spare: 0xffffffffffffffff ";
"	seto dl; spill OF x116 to reg (rdx)";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x2:rbx"",""x50:al"",""x36:r15b"",""x59:dil"",""x78:r14b"",""x116:dl"",""x121:r8b"",""x144:rbp"",""x145:CF"",""x39:rcx"",""x19:r11"",""x64:r9"",""x159:r12"",""x158:r10"",""x51:r13""]";
"	;chose x144 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, x2, x36, x59, x78, x121, x144, x19, x64, x159, x158";
"	; freeing, i.e. spilling x144, because I am out of ideas";
"	; allocs: arg1(rsi),x2(rbx),x50(al),x36(r15b),x59(dil),x78(r14b),x116(dl),x121(r8b),x144(rbp),x39(rcx),x19(r11),x64(r9),x159(r12),x158(r10),x51(r13); clobs x51,x52,x50,x42,x39,x42,x116,x116,0x0; will spare: x144 ";
"	mov [rsp + 0x08 * 22 ], rbp; spilling x144 to mem";
"	mov rbp, 0x0 ; moving imm to reg";
"	dec rbp; OF<-0x0, preserve CF 3";
"	movzx rax, al";
"	adox rax, rbp; loading flag";
"	adox r13, rcx";
"	";
"";
"	; add:";
"	; r:x37,f:x38<-add(x36,x19,x21)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x2:rbx"",""x50:al"",""x36:r15b"",""x59:dil"",""x78:r14b"",""x116:dl"",""x121:r8b"",""x145:CF"",""x39:rcx"",""x64:r9"",""x159:r12"",""x158:r10"",""x51:r13"",""-0x1:rbp"",""x52:OF"",""x37:r11""]";
"	; freeing x50 (al) no dependants anymore";
"	setc al; spill CF x145 to reg (rax)";
"	clc;";
"	movzx r15, r15b";
"	adcx r15, rbp; loading flag";
"	adcx r11, [rsp + 0x08 * 9 ]";
"	";
"";
"	; add:";
"	; r:_,f:x164<-add(0x0,x144,x158)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x2:rbx"",""x36:r15b"",""x59:dil"",""x78:r14b"",""x116:dl"",""x121:r8b"",""x145:al"",""x39:rcx"",""x64:r9"",""x159:r12"",""x158:r10"",""x51:r13"",""-0x1:rbp"",""x52:OF"",""x37:r11"",""x38:CF""]";
"	; freeing x36 (r15b) no dependants anymore";
"	mov r15,  [rsp + 0x08 * 22 ]; _, copying x144 here, cause x144 is needed in a reg for other than _, namely all: , x156--x157, x154--x155, _--x164, size: 3";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x2:rbx"",""x59:dil"",""x78:r14b"",""x116:dl"",""x121:r8b"",""x145:al"",""x39:rcx"",""x64:r9"",""x159:r12"",""x158:r10"",""x51:r13"",""-0x1:rbp"",""x52:OF"",""x37:r11"",""x38:CF"",""_:r15""]";
"	; freeing x39 (rcx) no dependants anymore";
"	seto cl; spill OF x52 to reg (rcx)";
"	inc rbp; OF<-0x0, preserve CF 2";
"	adox r15, r10";
"	";
"";
"	; add:";
"	; r:x60,f:x61<-add(x59,x37,x51)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:r15";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x2:rbx"",""x59:dil"",""x78:r14b"",""x116:dl"",""x121:r8b"",""x145:al"",""x64:r9"",""x159:r12"",""x158:r10"",""x51:r13"",""x52:cl"",""x38:CF"",""0x0:rbp"",""x164:OF"",""x60:r11""]";
"	;chose >>RANDOMLY<< r15 from candidates :r15[0].";
"	setc r15b; spill CF x38 to reg (r15)";
"	clc;";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x2:rbx"",""x59:dil"",""x78:r14b"",""x116:dl"",""x121:r8b"",""x145:al"",""x64:r9"",""x159:r12"",""x158:r10"",""x51:r13"",""x52:cl"",""x38:r15b"",""0x0:rbp"",""x164:OF"",""x60:r11""]";
"	; freeing x158 (r10) no dependants anymore";
"	mov r10, -0x1 ; moving imm to reg";
"	movzx rdi, dil";
"	adcx rdi, r10; loading flag";
"	adcx r11, r13";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x2:rbx"",""x59:dil"",""x78:r14b"",""x116:dl"",""x121:r8b"",""x145:al"",""x64:r9"",""x159:r12"",""x51:r13"",""x52:cl"",""x38:r15b"",""0x0:rbp"",""x164:OF"",""x60:r11"",""-0x1:r10"",""x61:CF""]";
"	; freeing x59 (dil) no dependants anymore";
"	mov rdi, [rsp + 0x08 * 3 ]; load m64 arg2 to register64";
"	;chose >>saved<< arg2[2] from:x2, arg2[2][1] and candidates: x2, arg2[2]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x78:r14b"",""x116:dl"",""x121:r8b"",""x145:al"",""x64:r9"",""x159:r12"",""x51:r13"",""x52:cl"",""x38:r15b"",""0x0:rbp"",""x164:OF"",""x60:r11"",""-0x1:r10"",""x61:CF"",""arg2[2]:rdx""]";
"	; freeing x51 (r13) no dependants anymore";
"	mov r13b, dl; preserving value of x116 into a new reg";
"	mov rdx, [rdi + 0x08 * 2 ]; saving arg2[2] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x78:r14b"",""x116:r13b"",""x121:r8b"",""x145:al"",""x64:r9"",""x159:r12"",""x52:cl"",""x38:r15b"",""0x0:rbp"",""x164:OF"",""x60:r11"",""-0x1:r10"",""x61:CF"",""arg2[2]:rdx""]";
"	; freeing 0x0 (rbp, since all are neeed, but this one is just an immediate value.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x78:r14b"",""x116:r13b"",""x121:r8b"",""x145:al"",""x64:r9"",""x159:r12"",""x52:cl"",""x38:r15b"",""x164:OF"",""x60:r11"",""-0x1:r10"",""x61:CF"",""arg2[2]:rdx"",""x87:rbp""]";
"	;chose -0x1 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x2(rbx),x78(r14b),x116(r13b),x121(r8b),x145(al),x64(r9),x159(r12),x52(cl),x38(r15b),x60(r11),-0x1(r10),arg2[2](rdx),x87(rbp); clobs x86,x87,x2,arg2[2],arg2,arg2,arg2,x116,x116,x87; will spare: -0x1 ";
"	;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x78:r14b"",""x116:r13b"",""x121:r8b"",""x145:al"",""x64:r9"",""x159:r12"",""x52:cl"",""x38:r15b"",""x164:OF"",""x60:r11"",""x61:CF"",""arg2[2]:rdx"",""x87:rbp"",""x86:r10""]";
"	mulx rbp, r10, rbx; x87, x86<- x2 * arg2[2]";
"	";
"";
"	; add:";
"	; r:x94,f:x95<-add(x93,x89,x86)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x78:r14b"",""x116:r13b"",""x121:r8b"",""x145:al"",""x64:r9"",""x159:r12"",""x52:cl"",""x38:r15b"",""x164:OF"",""x60:r11"",""x61:CF"",""arg2[2]:rdx"",""x87:rbp"",""x94:r10""]";
"	;chose arg2[2] to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg2[2]";
"	; freeing, i.e. spilling arg2[2], because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x2(rbx),x78(r14b),x116(r13b),x121(r8b),x145(al),x64(r9),x159(r12),x52(cl),x38(r15b),x60(r11),arg2[2](rdx),x87(rbp),x94(r10); clobs x94,x95,x93,x89,x86,x86,x164; will spare: arg2[2] ";
"	seto dl; spill OF x164 to reg (rdx)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x78:r14b"",""x116:r13b"",""x121:r8b"",""x145:al"",""x64:r9"",""x159:r12"",""x52:cl"",""x38:r15b"",""x164:dl"",""x60:r11"",""x61:CF"",""x87:rbp"",""x94:r10""]";
"	;chose x116 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, arg2, x2, x78, x116, x121, x145, x64, x159, x52, x38, x60, x87";
"	; freeing, i.e. spilling x116, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x2(rbx),x78(r14b),x116(r13b),x121(r8b),x145(al),x64(r9),x159(r12),x52(cl),x38(r15b),x164(dl),x60(r11),x87(rbp),x94(r10); clobs x94,x95,x93,x89,x86,x86,x164,x164,x93; will spare: x116 ";
"	mov byte [rsp + 0x08 * 23 ], r13b; spilling byte x116 to mem";
"	movzx r13, byte [rsp + 0x08 * 13 ]; load byte memx93 to register64";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x93:r13"",""x78:r14b"",""x121:r8b"",""x145:al"",""x64:r9"",""x159:r12"",""x52:cl"",""x38:r15b"",""x164:dl"",""x60:r11"",""x61:CF"",""x87:rbp"",""x94:r10""]";
"	;chose x52 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, arg2, x2, x78, x121, x145, x64, x159, x52, x38, x60, x87";
"	; freeing, i.e. spilling x52, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x2(rbx),x93(r13),x78(r14b),x121(r8b),x145(al),x64(r9),x159(r12),x52(cl),x38(r15b),x164(dl),x60(r11),x87(rbp),x94(r10); clobs x94,x95,x93,x89,x86,x86,x164,x164,x93,x93,0x0; will spare: x52 ";
"	mov byte [rsp + 0x08 * 24 ], cl; spilling byte x52 to mem";
"	mov rcx, 0x0 ; moving imm to reg";
"	dec rcx; OF<-0x0, preserve CF 3";
"	adox r13, rcx; loading flag";
"	adox r10, [rsp + 0x08 * 16 ]";
"	";
"";
"	; add:";
"	; r:x79,f:x80<-add(x78,x60,x64)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x93:r13"",""x78:r14b"",""x121:r8b"",""x145:al"",""x64:r9"",""x159:r12"",""x38:r15b"",""x164:dl"",""x61:CF"",""x87:rbp"",""x94:r10"",""-0x1:rcx"",""x95:OF"",""x79:r11""]";
"	; freeing x93 (r13) no dependants anymore";
"	setc r13b; spill CF x61 to reg (r13)";
"	clc;";
"	movzx r14, r14b";
"	adcx r14, rcx; loading flag";
"	adcx r11, r9";
"	";
"";
"	; add:";
"	; r:x103,f:x104<-add(x102,x79,x94)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x78:r14b"",""x121:r8b"",""x145:al"",""x64:r9"",""x159:r12"",""x38:r15b"",""x164:dl"",""x61:r13b"",""x87:rbp"",""x94:r10"",""-0x1:rcx"",""x95:OF"",""x80:CF"",""x103:r11""]";
"	; freeing x78 (r14b) no dependants anymore";
"	setc r14b; spill CF x80 to reg (r14)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x121:r8b"",""x145:al"",""x64:r9"",""x159:r12"",""x38:r15b"",""x164:dl"",""x61:r13b"",""x87:rbp"",""x94:r10"",""-0x1:rcx"",""x95:OF"",""x80:r14b"",""x103:r11""]";
"	; freeing x64 (r9) no dependants anymore";
"	movzx r9, byte [rsp + 0x08 * 18 ]; load byte memx102 to register64";
"	clc;";
"	adcx r9, rcx; loading flag";
"	adcx r11, r10";
"	;chose >>saved<< arg2[1] from:x3, arg2[1][1] and candidates: x3, arg2[1]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x102:r9"",""x121:r8b"",""x145:al"",""x159:r12"",""x38:r15b"",""x164:dl"",""x61:r13b"",""x87:rbp"",""x94:r10"",""-0x1:rcx"",""x95:OF"",""x80:r14b"",""x103:r11"",""x104:CF"",""arg2[1]:rdx""]";
"	; freeing x102 (r9) no dependants anymore";
"	mov r9b, dl; preserving value of x164 into a new reg";
"	mov rdx, [rdi + 0x08 * 1 ]; saving arg2[1] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x121:r8b"",""x145:al"",""x159:r12"",""x38:r15b"",""x164:r9b"",""x61:r13b"",""x87:rbp"",""x94:r10"",""-0x1:rcx"",""x95:OF"",""x80:r14b"",""x103:r11"",""x104:CF"",""arg2[1]:rdx""]";
"	; freeing x94 (r10) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x121:r8b"",""x145:al"",""x159:r12"",""x38:r15b"",""x164:r9b"",""x61:r13b"",""x87:rbp"",""-0x1:rcx"",""x95:OF"",""x80:r14b"",""x103:r11"",""x104:CF"",""arg2[1]:rdx"",""x134:r10""]";
"	;chose -0x1 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x2(rbx),x121(r8b),x145(al),x159(r12),x38(r15b),x164(r9b),x61(r13b),x87(rbp),-0x1(rcx),x80(r14b),x103(r11),arg2[1](rdx),x134(r10); clobs x133,x134,x3,arg2[1],arg2,x164,x164,x134; will spare: -0x1 ";
"	;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x121:r8b"",""x145:al"",""x159:r12"",""x38:r15b"",""x164:r9b"",""x61:r13b"",""x87:rbp"",""x95:OF"",""x80:r14b"",""x103:r11"",""x104:CF"",""arg2[1]:rdx"",""x134:r10"",""x133:rcx""]";
"	mulx r10, rcx, [rsp + 0x08 * 17 ]; x134, x133<- x3 * arg2[1]";
"	";
"";
"	; add:";
"	; r:x117,f:_<-add(x116,x112)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x121:r8b"",""x145:al"",""x159:r12"",""x38:r15b"",""x164:r9b"",""x61:r13b"",""x87:rbp"",""x95:OF"",""x80:r14b"",""x103:r11"",""x104:CF"",""arg2[1]:rdx"",""x134:r10"",""x133:rcx""]";
"	;chose arg2[1] to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg2[1]";
"	; freeing, i.e. spilling arg2[1], because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x2(rbx),x121(r8b),x145(al),x159(r12),x38(r15b),x164(r9b),x61(r13b),x87(rbp),x80(r14b),x103(r11),arg2[1](rdx),x134(r10),x133(rcx); clobs x117,x116,x112,x116; will spare: arg2[1] ";
"	movzx rdx, byte [rsp + 0x08 * 23 ]; x117, copying x116 here, cause x116 is needed in a reg for other than x117, namely all: , x117, size: 1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x121:r8b"",""x145:al"",""x159:r12"",""x38:r15b"",""x164:r9b"",""x61:r13b"",""x87:rbp"",""x95:OF"",""x80:r14b"",""x103:r11"",""x104:CF"",""x134:r10"",""x133:rcx"",""x117:rdx""]";
"	;chose x164 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, arg2, x2, x121, x145, x159, x38, x164, x61, x87, x80, x103, x134, x133";
"	; freeing, i.e. spilling x164, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x2(rbx),x121(r8b),x145(al),x159(r12),x38(r15b),x164(r9b),x61(r13b),x87(rbp),x80(r14b),x103(r11),x134(r10),x133(rcx),x117(rdx); clobs x117,x116,x112,x116,x117,x112; will spare: x164 ";
"	mov byte [rsp + 0x08 * 25 ], r9b; spilling byte x164 to mem";
"	mov r9, [rsp + 0x08 * 14 ]; load m64 x112 to register64";
"	lea rdx, [rdx+r9]; r8/64 + m8";
"	";
"";
"	; add:";
"	; r:x122,f:x123<-add(x121,x103,x117)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x112:r9"",""x121:r8b"",""x145:al"",""x159:r12"",""x38:r15b"",""x61:r13b"",""x87:rbp"",""x95:OF"",""x80:r14b"",""x104:CF"",""x134:r10"",""x133:rcx"",""x117:rdx"",""x122:r11""]";
"	; freeing x112 (r9) no dependants anymore";
"	seto r9b; spill OF x95 to reg (r9)";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x121:r8b"",""x145:al"",""x159:r12"",""x38:r15b"",""x61:r13b"",""x87:rbp"",""x95:r9b"",""x80:r14b"",""x104:CF"",""x134:r10"",""x133:rcx"",""x117:rdx"",""x122:r11""]";
"	;chose x61 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, arg2, x2, x145, x159, x38, x61, x87, x80, x134, x133";
"	; freeing, i.e. spilling x61, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x2(rbx),x121(r8b),x145(al),x159(r12),x38(r15b),x61(r13b),x87(rbp),x95(r9b),x80(r14b),x134(r10),x133(rcx),x117(rdx),x122(r11); clobs x122,x123,x121,x103,x117,x103,x95,x95,0x0; will spare: x61 ";
"	mov byte [rsp + 0x08 * 26 ], r13b; spilling byte x61 to mem";
"	mov r13, 0x0 ; moving imm to reg";
"	dec r13; OF<-0x0, preserve CF 3";
"	movzx r8, r8b";
"	adox r8, r13; loading flag";
"	adox r11, rdx";
"	";
"";
"	; add:";
"	; r:x137,f:x138<-add(0x0,x136,x133)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x121:r8b"",""x145:al"",""x159:r12"",""x38:r15b"",""x87:rbp"",""x95:r9b"",""x80:r14b"",""x104:CF"",""x134:r10"",""x133:rcx"",""x117:rdx"",""x122:r11"",""-0x1:r13"",""x123:OF""]";
"	; freeing x121 (r8b) no dependants anymore";
"	mov r8,  [rsp + 0x08 * 21 ]; x137, copying x136 here, cause x136 is needed in a reg for other than x137, namely all: , x137--x138, size: 1";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x145:al"",""x159:r12"",""x38:r15b"",""x87:rbp"",""x95:r9b"",""x80:r14b"",""x104:CF"",""x134:r10"",""x133:rcx"",""x117:rdx"",""x122:r11"",""-0x1:r13"",""x123:OF"",""x137:r8""]";
"	; freeing x117 (rdx) no dependants anymore";
"	setc dl; spill CF x104 to reg (rdx)";
"	clc;";
"	adcx r8, rcx";
"	";
"";
"	; add:";
"	; r:x146,f:x147<-add(x145,x122,x137)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x145:al"",""x159:r12"",""x38:r15b"",""x87:rbp"",""x95:r9b"",""x80:r14b"",""x104:dl"",""x134:r10"",""x133:rcx"",""-0x1:r13"",""x123:OF"",""x137:r8"",""x138:CF"",""x146:r11""]";
"	; freeing x133 (rcx) no dependants anymore";
"	setc cl; spill CF x138 to reg (rcx)";
"	clc;";
"	movzx rax, al";
"	adcx rax, r13; loading flag";
"	adcx r11, r8";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x145:al"",""x159:r12"",""x38:r15b"",""x87:rbp"",""x95:r9b"",""x80:r14b"",""x104:dl"",""x134:r10"",""-0x1:r13"",""x123:OF"",""x137:r8"",""x138:cl"",""x146:r11"",""x147:CF""]";
"	; freeing x145 (al) no dependants anymore";
"	mov rax, 0xffffffff ; moving imm to reg";
"	;chose >>saved<< x144 from:x144, 0xffffffff[0] and candidates: x144, 0xffffffff";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x144:rdx"",""x159:r12"",""x38:r15b"",""x87:rbp"",""x95:r9b"",""x80:r14b"",""x104:dl"",""x134:r10"",""-0x1:r13"",""x123:OF"",""x137:r8"",""x138:cl"",""x146:r11"",""x147:CF"",""0xffffffff:rax""]";
"	; freeing x137 (r8) no dependants anymore";
"	mov r8b, dl; preserving value of x104 into a new reg";
"	mov rdx, [rsp + 0x08 * 22 ]; saving x144 in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x144:rdx"",""x159:r12"",""x38:r15b"",""x87:rbp"",""x95:r9b"",""x80:r14b"",""x104:r8b"",""x134:r10"",""-0x1:r13"",""x123:OF"",""x138:cl"",""x146:r11"",""x147:CF"",""0xffffffff:rax""]";
"	;chose -0x1 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x2(rbx),x144(rdx),x159(r12),x38(r15b),x87(rbp),x95(r9b),x80(r14b),x104(r8b),x134(r10),-0x1(r13),x138(cl),x146(r11),0xffffffff(rax); clobs x156,x157,x144,0xffffffff,0xffffffff,0xffffffff,x104,x104; will spare: -0x1 ";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x144:rdx"",""x159:r12"",""x38:r15b"",""x87:rbp"",""x95:r9b"",""x80:r14b"",""x104:r8b"",""x134:r10"",""x123:OF"",""x138:cl"",""x146:r11"",""x147:CF"",""0xffffffff:rax"",""x157:r13""]";
"	;chose x138 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, arg2, x2, x159, x38, x87, x95, x80, x134, x138, x146";
"	; freeing, i.e. spilling x138, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x2(rbx),x144(rdx),x159(r12),x38(r15b),x87(rbp),x95(r9b),x80(r14b),x104(r8b),x134(r10),x138(cl),x146(r11),0xffffffff(rax),x157(r13); clobs x156,x157,x144,0xffffffff,0xffffffff,0xffffffff,x104,x104,x157; will spare: x138 ";
"	mov byte [rsp + 0x08 * 27 ], cl; spilling byte x138 to mem";
"	;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x144:rdx"",""x159:r12"",""x38:r15b"",""x87:rbp"",""x95:r9b"",""x80:r14b"",""x104:r8b"",""x134:r10"",""x123:OF"",""x146:r11"",""x147:CF"",""0xffffffff:rax"",""x157:r13"",""x156:rcx""]";
"	mulx r13, rcx, rax; x157, x156<- x144 * 0xffffffff";
"	;chose >>saved<< arg2[3] from:x2, arg2[3][1] and candidates: x2, arg2[3]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:rbx"",""x144:rdx"",""x159:r12"",""x38:r15b"",""x87:rbp"",""x95:r9b"",""x80:r14b"",""x104:r8b"",""x134:r10"",""x123:OF"",""x146:r11"",""x147:CF"",""0xffffffff:rax"",""x157:r13"",""x156:rcx"",""arg2[3]:rdx""]";
"	;chose 0xffffffff to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: 0xffffffff";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x2(rbx),x144(rdx),x159(r12),x38(r15b),x87(rbp),x95(r9b),x80(r14b),x104(r8b),x134(r10),x146(r11),0xffffffff(rax),x157(r13),x156(rcx),arg2[3](rdx); clobs x84,x85,x2,arg2[3],arg2,x144; will spare: 0xffffffff ";
"	mov rax, rdx; preserving value of x144 into a new reg";
"	mov rdx, [rdi + 0x08 * 3 ]; saving arg2[3] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x144:rax"",""x159:r12"",""x38:r15b"",""x87:rbp"",""x95:r9b"",""x80:r14b"",""x104:r8b"",""x134:r10"",""x123:OF"",""x146:r11"",""x147:CF"",""x157:r13"",""x156:rcx"",""arg2[3]:rdx"",""x85:rbx""]";
"	;chose x134 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, x159, x38, x87, x95, x80, x104, x134, x146, x157, x156";
"	; freeing, i.e. spilling x134, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x144(rax),x159(r12),x38(r15b),x87(rbp),x95(r9b),x80(r14b),x104(r8b),x134(r10),x146(r11),x157(r13),x156(rcx),arg2[3](rdx),x85(rbx); clobs x84,x85,x2,arg2[3],arg2,x144,x144; will spare: x134 ";
"	mov [rsp + 0x08 * 28 ], r10; spilling x134 to mem";
"	;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x144:rax"",""x159:r12"",""x38:r15b"",""x87:rbp"",""x95:r9b"",""x80:r14b"",""x104:r8b"",""x123:OF"",""x146:r11"",""x147:CF"",""x157:r13"",""x156:rcx"",""arg2[3]:rdx"",""x85:rbx"",""x84:r10""]";
"	mulx rbx, r10, rbx; x85, x84<- x2 * arg2[3]";
"	";
"";
"	; add:";
"	; r:x160,f:x161<-add(0x0,x159,x156)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x144:rax"",""x38:r15b"",""x87:rbp"",""x95:r9b"",""x80:r14b"",""x104:r8b"",""x123:OF"",""x146:r11"",""x147:CF"",""x157:r13"",""x156:rcx"",""arg2[3]:rdx"",""x85:rbx"",""x84:r10"",""x160:r12""]";
"	;chose arg2[3] to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg2[3]";
"	; freeing, i.e. spilling arg2[3], because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x144(rax),x38(r15b),x87(rbp),x95(r9b),x80(r14b),x104(r8b),x146(r11),x157(r13),x156(rcx),arg2[3](rdx),x85(rbx),x84(r10),x160(r12); clobs x160,x161,0x0,x159,x156,x159,x147; will spare: arg2[3] ";
"	setc dl; spill CF x147 to reg (rdx)";
"	clc;";
"	adcx r12, rcx";
"	";
"";
"	; add:";
"	; r:x165,f:x166<-add(x164,x146,x160)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x144:rax"",""x38:r15b"",""x87:rbp"",""x95:r9b"",""x80:r14b"",""x104:r8b"",""x123:OF"",""x147:dl"",""x157:r13"",""x156:rcx"",""x85:rbx"",""x84:r10"",""x160:r12"",""x161:CF"",""x165:r11""]";
"	; freeing x156 (rcx) no dependants anymore";
"	seto cl; spill OF x123 to reg (rcx)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x144:rax"",""x38:r15b"",""x87:rbp"",""x95:r9b"",""x80:r14b"",""x104:r8b"",""x123:cl"",""x147:dl"",""x157:r13"",""x85:rbx"",""x84:r10"",""x160:r12"",""x161:CF"",""x165:r11""]";
"	;chose arg2 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, arg2, x144, x38, x87, x95, x80, x104, x147, x157, x85, x84";
"	; freeing, i.e. spilling arg2, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x144(rax),x38(r15b),x87(rbp),x95(r9b),x80(r14b),x104(r8b),x123(cl),x147(dl),x157(r13),x85(rbx),x84(r10),x160(r12),x165(r11); clobs x165,x166,x164,x146,x160,x146,x123,x123,x164; will spare: arg2 ";
"	mov [rsp + 0x08 * 3 ], rdi; spilling arg2 to mem";
"	movzx rdi, byte [rsp + 0x08 * 25 ]; load byte memx164 to register64";
"	;chose >>saved<< -0x1 from:0x0, -0x1[1] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x144:rax"",""x38:r15b"",""x164:rdi"",""x87:rbp"",""x95:r9b"",""x80:r14b"",""x104:r8b"",""x123:cl"",""x147:dl"",""x157:r13"",""x85:rbx"",""x84:r10"",""x160:r12"",""x161:CF"",""x165:r11""]";
"	;chose x144 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, x144, x38, x87, x95, x80, x104, x147, x157, x85, x84";
"	; freeing, i.e. spilling x144, because I am out of ideas";
"	; allocs: arg1(rsi),x144(rax),x38(r15b),x164(rdi),x87(rbp),x95(r9b),x80(r14b),x104(r8b),x123(cl),x147(dl),x157(r13),x85(rbx),x84(r10),x160(r12),x165(r11); clobs x165,x166,x164,x146,x160,x146,x123,x123,x164,x164,-0x1; will spare: x144 ";
"	mov [rsp + 0x08 * 22 ], rax; spilling x144 to mem";
"	mov rax, -0x1 ; moving imm to reg";
"	inc rax; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x38:r15b"",""x164:rdi"",""x87:rbp"",""x95:r9b"",""x80:r14b"",""x104:r8b"",""x123:cl"",""x147:dl"",""x157:r13"",""x85:rbx"",""x84:r10"",""x160:r12"",""x161:CF"",""x165:r11"",""0x0:rax""]";
"	; freeing 0x0 (rax, since all are neeed, but this one is just an immediate value.";
"	mov rax, -0x1 ; moving imm to reg";
"	adox rdi, rax; loading flag";
"	adox r11, r12";
"	";
"";
"	; add:";
"	; r:x96,f:x97<-add(x95,x87,x84)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x38:r15b"",""x164:rdi"",""x95:r9b"",""x80:r14b"",""x104:r8b"",""x123:cl"",""x147:dl"",""x157:r13"",""x85:rbx"",""x84:r10"",""x160:r12"",""x161:CF"",""x165:r11"",""-0x1:rax"",""x166:OF"",""x96:rbp""]";
"	; freeing x164 (rdi) no dependants anymore";
"	setc dil; spill CF x161 to reg (rdi)";
"	clc;";
"	movzx r9, r9b";
"	adcx r9, rax; loading flag";
"	adcx rbp, r10";
"	";
"";
"	; add:";
"	; r:x53,f:_<-add(x52,x40)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x38:r15b"",""x95:r9b"",""x80:r14b"",""x104:r8b"",""x123:cl"",""x147:dl"",""x157:r13"",""x85:rbx"",""x84:r10"",""x160:r12"",""x161:dil"",""x165:r11"",""-0x1:rax"",""x166:OF"",""x96:rbp"",""x97:CF""]";
"	; freeing x95 (r9b) no dependants anymore";
"	movzx r9, byte [rsp + 0x08 * 24 ]; x53, copying x52 here, cause x52 is needed in a reg for other than x53, namely all: , x53, size: 1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x38:r15b"",""x80:r14b"",""x104:r8b"",""x123:cl"",""x147:dl"",""x157:r13"",""x85:rbx"",""x84:r10"",""x160:r12"",""x161:dil"",""x165:r11"",""-0x1:rax"",""x166:OF"",""x96:rbp"",""x97:CF"",""x53:r9""]";
"	; freeing x84 (r10) no dependants anymore";
"	mov r10, [rsp + 0x08 * 19 ]; load m64 x40 to register64";
"	lea r9, [r9+r10]; r8/64 + m8";
"	";
"";
"	; add:";
"	; r:x62,f:x63<-add(x61,x38,x53)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x40:r10"",""x38:r15b"",""x80:r14b"",""x104:r8b"",""x123:cl"",""x147:dl"",""x157:r13"",""x85:rbx"",""x160:r12"",""x161:dil"",""x165:r11"",""-0x1:rax"",""x166:OF"",""x96:rbp"",""x97:CF"",""x62:r9""]";
"	; freeing x40 (r10) no dependants anymore";
"	seto r10b; spill OF x166 to reg (r10)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x38:r15b"",""x80:r14b"",""x104:r8b"",""x123:cl"",""x147:dl"",""x157:r13"",""x85:rbx"",""x160:r12"",""x161:dil"",""x165:r11"",""-0x1:rax"",""x166:r10b"",""x96:rbp"",""x97:CF"",""x62:r9""]";
"	; freeing x160 (r12) no dependants anymore";
"	movzx r12, byte [rsp + 0x08 * 26 ]; load byte memx61 to register64";
"	inc rax; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x38:r15b"",""x61:r12"",""x80:r14b"",""x104:r8b"",""x123:cl"",""x147:dl"",""x157:r13"",""x85:rbx"",""x161:dil"",""x165:r11"",""x166:r10b"",""x96:rbp"",""x97:CF"",""x62:r9"",""0x0:rax""]";
"	; freeing 0x0 (rax, since all are neeed, but this one is just an immediate value.";
"	mov rax, -0x1 ; moving imm to reg";
"	movzx r15, r15b";
"	adox r12, rax; loading flag";
"	adox r9, r15";
"	";
"";
"	; add:";
"	; r:x81,f:x82<-add(x80,x62,x65)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x38:r15b"",""x61:r12"",""x80:r14b"",""x104:r8b"",""x123:cl"",""x147:dl"",""x157:r13"",""x85:rbx"",""x161:dil"",""x165:r11"",""x166:r10b"",""x96:rbp"",""x97:CF"",""-0x1:rax"",""x63:OF"",""x81:r9""]";
"	; freeing x38 (r15b) no dependants anymore";
"	setc r15b; spill CF x97 to reg (r15)";
"	clc;";
"	movzx r14, r14b";
"	adcx r14, rax; loading flag";
"	adcx r9, [rsp + 0x08 * 20 ]";
"	";
"";
"	; add:";
"	; r:x105,f:x106<-add(x104,x81,x96)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x61:r12"",""x80:r14b"",""x104:r8b"",""x123:cl"",""x147:dl"",""x157:r13"",""x85:rbx"",""x161:dil"",""x165:r11"",""x166:r10b"",""x96:rbp"",""x97:r15b"",""-0x1:rax"",""x63:OF"",""x82:CF"",""x105:r9""]";
"	; freeing x61 (r12) no dependants anymore";
"	setc r12b; spill CF x82 to reg (r12)";
"	clc;";
"	movzx r8, r8b";
"	adcx r8, rax; loading flag";
"	adcx r9, rbp";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x80:r14b"",""x104:r8b"",""x123:cl"",""x147:dl"",""x157:r13"",""x85:rbx"",""x161:dil"",""x165:r11"",""x166:r10b"",""x96:rbp"",""x97:r15b"",""-0x1:rax"",""x63:OF"",""x82:r12b"",""x105:r9"",""x106:CF""]";
"	; freeing x80 (r14b) no dependants anymore";
"	mov r14, [rsp + 0x08 * 3 ]; load m64 arg2 to register64";
"	;chose >>saved<< arg2[2] from:x3, arg2[2][1] and candidates: x3, arg2[2]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r14"",""x104:r8b"",""x123:cl"",""x147:dl"",""x157:r13"",""x85:rbx"",""x161:dil"",""x165:r11"",""x166:r10b"",""x96:rbp"",""x97:r15b"",""-0x1:rax"",""x63:OF"",""x82:r12b"",""x105:r9"",""x106:CF"",""arg2[2]:rdx""]";
"	; freeing x104 (r8b) no dependants anymore";
"	mov r8b, dl; preserving value of x147 into a new reg";
"	mov rdx, [r14 + 0x08 * 2 ]; saving arg2[2] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r14"",""x123:cl"",""x147:r8b"",""x157:r13"",""x85:rbx"",""x161:dil"",""x165:r11"",""x166:r10b"",""x96:rbp"",""x97:r15b"",""-0x1:rax"",""x63:OF"",""x82:r12b"",""x105:r9"",""x106:CF"",""arg2[2]:rdx""]";
"	; freeing x96 (rbp) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r14"",""x123:cl"",""x147:r8b"",""x157:r13"",""x85:rbx"",""x161:dil"",""x165:r11"",""x166:r10b"",""x97:r15b"",""-0x1:rax"",""x63:OF"",""x82:r12b"",""x105:r9"",""x106:CF"",""arg2[2]:rdx"",""x132:rbp""]";
"	;chose -0x1 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r14),x123(cl),x147(r8b),x157(r13),x85(rbx),x161(dil),x165(r11),x166(r10b),x97(r15b),-0x1(rax),x82(r12b),x105(r9),arg2[2](rdx),x132(rbp); clobs x131,x132,x3,arg2[2],arg2,arg2,arg2,x147,x147,x132; will spare: -0x1 ";
"	;-- allocation: [""arg1:rsi"",""arg2:r14"",""x123:cl"",""x147:r8b"",""x157:r13"",""x85:rbx"",""x161:dil"",""x165:r11"",""x166:r10b"",""x97:r15b"",""x63:OF"",""x82:r12b"",""x105:r9"",""x106:CF"",""arg2[2]:rdx"",""x132:rbp"",""x131:rax""]";
"	mulx rbp, rax, [rsp + 0x08 * 17 ]; x132, x131<- x3 * arg2[2]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r14"",""x123:cl"",""x147:r8b"",""x157:r13"",""x85:rbx"",""x161:dil"",""x165:r11"",""x166:r10b"",""x97:r15b"",""x63:OF"",""x82:r12b"",""x105:r9"",""x106:CF"",""arg2[2]:rdx"",""x132:rbp"",""x131:rax""]";
"	;chose arg2[2] to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg2[2]";
"	; freeing, i.e. spilling arg2[2], because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r14),x123(cl),x147(r8b),x157(r13),x85(rbx),x161(dil),x165(r11),x166(r10b),x97(r15b),x82(r12b),x105(r9),arg2[2](rdx),x132(rbp),x131(rax); clobs x109,x110,x99,0xffffffff00000001,0xffffffff00000001; will spare: arg2[2] ";
"	mov rdx, 0xffffffff00000001 ; moving imm to reg";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r14"",""x123:cl"",""x147:r8b"",""x157:r13"",""x85:rbx"",""x161:dil"",""x165:r11"",""x166:r10b"",""x97:r15b"",""x63:OF"",""x82:r12b"",""x105:r9"",""x106:CF"",""x132:rbp"",""x131:rax"",""0xffffffff00000001:rdx""]";
"	;chose x161 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, arg2, x123, x147, x157, x85, x161, x165, x166, x97, x82, x105, x132, x131";
"	; freeing, i.e. spilling x161, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r14),x123(cl),x147(r8b),x157(r13),x85(rbx),x161(dil),x165(r11),x166(r10b),x97(r15b),x82(r12b),x105(r9),x132(rbp),x131(rax),0xffffffff00000001(rdx); clobs x109,x110,x99,0xffffffff00000001,0xffffffff00000001,0xffffffff00000001; will spare: x161 ";
"	mov byte [rsp + 0x08 * 29 ], dil; spilling byte x161 to mem";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r14"",""x123:cl"",""x147:r8b"",""x157:r13"",""x85:rbx"",""x165:r11"",""x166:r10b"",""x97:r15b"",""x63:OF"",""x82:r12b"",""x105:r9"",""x106:CF"",""x132:rbp"",""x131:rax"",""0xffffffff00000001:rdx"",""x110:rdi""]";
"	;chose arg2 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, arg2, x123, x147, x157, x85, x165, x166, x97, x82, x105, x132, x131";
"	; freeing, i.e. spilling arg2, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r14),x123(cl),x147(r8b),x157(r13),x85(rbx),x165(r11),x166(r10b),x97(r15b),x82(r12b),x105(r9),x132(rbp),x131(rax),0xffffffff00000001(rdx),x110(rdi); clobs x109,x110,x99,0xffffffff00000001,0xffffffff00000001,0xffffffff00000001,x110; will spare: arg2 ";
"	mov [rsp + 0x08 * 3 ], r14; spilling arg2 to mem";
"	;-- allocation: [""arg1:rsi"",""x123:cl"",""x147:r8b"",""x157:r13"",""x85:rbx"",""x165:r11"",""x166:r10b"",""x97:r15b"",""x63:OF"",""x82:r12b"",""x105:r9"",""x106:CF"",""x132:rbp"",""x131:rax"",""0xffffffff00000001:rdx"",""x110:rdi"",""x109:r14""]";
"	mulx rdi, r14, [rsp + 0x08 * 12 ]; x110, x109<- x99 * 0xffffffff00000001";
"	";
"";
"	; sub:";
"	; r:x174,f:x175<-sub(0x0,x165,0xffffffffffffffff)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x123:cl"",""x147:r8b"",""x157:r13"",""x85:rbx"",""x165:r11"",""x166:r10b"",""x97:r15b"",""x63:OF"",""x82:r12b"",""x105:r9"",""x106:CF"",""x132:rbp"",""x131:rax"",""0xffffffff00000001:rdx"",""x110:rdi"",""x109:r14""]";
"	;chose 0xffffffff00000001 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: 0xffffffff00000001";
"	; freeing, i.e. spilling 0xffffffff00000001, because I am out of ideas";
"	; allocs: arg1(rsi),x123(cl),x147(r8b),x157(r13),x85(rbx),x165(r11),x166(r10b),x97(r15b),x82(r12b),x105(r9),x132(rbp),x131(rax),0xffffffff00000001(rdx),x110(rdi),x109(r14); clobs x174,x175,0x0,x165,0xffffffffffffffff,x106; will spare: 0xffffffff00000001 ";
"	setc dl; spill CF x106 to reg (rdx)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x123:cl"",""x147:r8b"",""x157:r13"",""x85:rbx"",""x165:r11"",""x166:r10b"",""x97:r15b"",""x63:OF"",""x82:r12b"",""x105:r9"",""x106:dl"",""x132:rbp"",""x131:rax"",""x110:rdi"",""x109:r14""]";
"	;chose x110 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, x123, x147, x157, x85, x166, x97, x82, x105, x132, x131, x110, x109";
"	; freeing, i.e. spilling x110, because I am out of ideas";
"	; allocs: arg1(rsi),x123(cl),x147(r8b),x157(r13),x85(rbx),x165(r11),x166(r10b),x97(r15b),x82(r12b),x105(r9),x106(dl),x132(rbp),x131(rax),x110(rdi),x109(r14); clobs x174,x175,0x0,x165,0xffffffffffffffff,x106,x106,x63; will spare: x110 ";
"	mov [rsp + 0x08 * 30 ], rdi; spilling x110 to mem";
"	seto dil; spill OF x63 to reg (rdi)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x123:cl"",""x147:r8b"",""x157:r13"",""x85:rbx"",""x165:r11"",""x166:r10b"",""x97:r15b"",""x63:dil"",""x82:r12b"",""x105:r9"",""x106:dl"",""x132:rbp"",""x131:rax"",""x109:r14""]";
"	;chose x132 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, x123, x147, x157, x85, x166, x97, x82, x105, x132, x131, x109";
"	; freeing, i.e. spilling x132, because I am out of ideas";
"	; allocs: arg1(rsi),x123(cl),x147(r8b),x157(r13),x85(rbx),x165(r11),x166(r10b),x97(r15b),x63(dil),x82(r12b),x105(r9),x106(dl),x132(rbp),x131(rax),x109(r14); clobs x174,x175,0x0,x165,0xffffffffffffffff,x106,x106,x63,x63,x165; will spare: x132 ";
"	mov [rsp + 0x08 * 31 ], rbp; spilling x132 to mem";
"	mov rbp,  r11; x174, copying x165 here, cause x165 is needed in a reg for other than x174, namely all: , x184, x174--x175, size: 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x123:cl"",""x147:r8b"",""x157:r13"",""x85:rbx"",""x165:r11"",""x166:r10b"",""x97:r15b"",""x63:dil"",""x82:r12b"",""x105:r9"",""x106:dl"",""x131:rax"",""x109:r14"",""x174:rbp""]";
"	;chose x157 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, x123, x147, x157, x85, x166, x97, x82, x105, x131, x109";
"	; freeing, i.e. spilling x157, because I am out of ideas";
"	; allocs: arg1(rsi),x123(cl),x147(r8b),x157(r13),x85(rbx),x165(r11),x166(r10b),x97(r15b),x63(dil),x82(r12b),x105(r9),x106(dl),x131(rax),x109(r14),x174(rbp); clobs x174,x175,0x0,x165,0xffffffffffffffff,x106,x106,x63,x63,x165,x174,0xffffffffffffffff; will spare: x157 ";
"	mov [rsp + 0x08 * 32 ], r13; spilling x157 to mem";
"	mov r13, 0xffffffffffffffff ; moving imm to reg";
"	sub rbp, r13";
"	";
"";
"	; add:";
"	; r:x124,f:x125<-add(x123,x105,x109)";
"	; CF: ALIVE,OF: KILLED";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x123:cl"",""x147:r8b"",""x85:rbx"",""x165:r11"",""x166:r10b"",""x97:r15b"",""x63:dil"",""x82:r12b"",""x106:dl"",""x131:rax"",""x109:r14"",""x174:rbp"",""0xffffffffffffffff:r13"",""x175:CF"",""x124:r9""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: 0xffffffffffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: arg1(rsi),x123(cl),x147(r8b),x85(rbx),x165(r11),x166(r10b),x97(r15b),x63(dil),x82(r12b),x106(dl),x131(rax),x109(r14),x174(rbp),0xffffffffffffffff(r13),x124(r9); clobs x124,x125,x123,x105,x109,x105,0x0; will spare: 0xffffffffffffffff ";
"	mov r13, 0x0 ; moving imm to reg";
"	dec r13; OF<-0x0, preserve CF 3";
"	movzx rcx, cl";
"	adox rcx, r13; loading flag";
"	adox r9, r14";
"	";
"";
"	; add:";
"	; r:x139,f:x140<-add(x138,x134,x131)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x123:cl"",""x147:r8b"",""x85:rbx"",""x165:r11"",""x166:r10b"",""x97:r15b"",""x63:dil"",""x82:r12b"",""x106:dl"",""x109:r14"",""x174:rbp"",""x175:CF"",""x124:r9"",""-0x1:r13"",""x125:OF"",""x139:rax""]";
"	; freeing x123 (cl) no dependants anymore";
"	seto cl; spill OF x125 to reg (rcx)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x147:r8b"",""x85:rbx"",""x165:r11"",""x166:r10b"",""x97:r15b"",""x63:dil"",""x82:r12b"",""x106:dl"",""x109:r14"",""x174:rbp"",""x175:CF"",""x124:r9"",""-0x1:r13"",""x125:cl"",""x139:rax""]";
"	; freeing x109 (r14) no dependants anymore";
"	movzx r14, byte [rsp + 0x08 * 27 ]; load byte memx138 to register64";
"	inc r13; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x138:r14"",""x147:r8b"",""x85:rbx"",""x165:r11"",""x166:r10b"",""x97:r15b"",""x63:dil"",""x82:r12b"",""x106:dl"",""x174:rbp"",""x175:CF"",""x124:r9"",""x125:cl"",""x139:rax"",""0x0:r13""]";
"	; freeing 0x0 (r13, since all are neeed, but this one is just an immediate value.";
"	mov r13, -0x1 ; moving imm to reg";
"	adox r14, r13; loading flag";
"	adox rax, [rsp + 0x08 * 28 ]";
"	";
"";
"	; add:";
"	; r:x148,f:x149<-add(x147,x124,x139)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x138:r14"",""x147:r8b"",""x85:rbx"",""x165:r11"",""x166:r10b"",""x97:r15b"",""x63:dil"",""x82:r12b"",""x106:dl"",""x174:rbp"",""x175:CF"",""x125:cl"",""x139:rax"",""-0x1:r13"",""x140:OF"",""x148:r9""]";
"	; freeing x138 (r14) no dependants anymore";
"	seto r14b; spill OF x140 to reg (r14)";
"	inc r13; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x147:r8b"",""x85:rbx"",""x165:r11"",""x166:r10b"",""x97:r15b"",""x63:dil"",""x82:r12b"",""x106:dl"",""x174:rbp"",""x175:CF"",""x125:cl"",""x139:rax"",""x140:r14b"",""x148:r9"",""0x0:r13""]";
"	; freeing 0x0 (r13, since all are neeed, but this one is just an immediate value.";
"	mov r13, -0x1 ; moving imm to reg";
"	movzx r8, r8b";
"	adox r8, r13; loading flag";
"	adox r9, rax";
"	";
"";
"	; add:";
"	; r:x162,f:_<-add(x161,x157)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x147:r8b"",""x85:rbx"",""x165:r11"",""x166:r10b"",""x97:r15b"",""x63:dil"",""x82:r12b"",""x106:dl"",""x174:rbp"",""x175:CF"",""x125:cl"",""x139:rax"",""x140:r14b"",""x148:r9"",""-0x1:r13"",""x149:OF""]";
"	; freeing x147 (r8b) no dependants anymore";
"	movzx r8, byte [rsp + 0x08 * 29 ]; x162, copying x161 here, cause x161 is needed in a reg for other than x162, namely all: , x162, size: 1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x85:rbx"",""x165:r11"",""x166:r10b"",""x97:r15b"",""x63:dil"",""x82:r12b"",""x106:dl"",""x174:rbp"",""x175:CF"",""x125:cl"",""x139:rax"",""x140:r14b"",""x148:r9"",""-0x1:r13"",""x149:OF"",""x162:r8""]";
"	; freeing x139 (rax) no dependants anymore";
"	mov rax, [rsp + 0x08 * 32 ]; load m64 x157 to register64";
"	lea r8, [r8+rax]; r8/64 + m8";
"	";
"";
"	; add:";
"	; r:x83,f:_<-add(x82,x63)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x157:rax"",""x85:rbx"",""x165:r11"",""x166:r10b"",""x97:r15b"",""x63:dil"",""x82:r12b"",""x106:dl"",""x174:rbp"",""x175:CF"",""x125:cl"",""x140:r14b"",""x148:r9"",""-0x1:r13"",""x149:OF"",""x162:r8""]";
"	; freeing x157 (rax) no dependants anymore";
"	movzx rax,  r12b; x83, copying x82 here, cause x82 is needed in a reg for other than x83, namely all: , x83, size: 1";
"	movzx rdi, dil";
"	lea rax, [rax+rdi]";
"	";
"";
"	; add:";
"	; r:x167,f:x168<-add(x166,x148,x162)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x85:rbx"",""x165:r11"",""x166:r10b"",""x97:r15b"",""x63:dil"",""x82:r12b"",""x106:dl"",""x174:rbp"",""x175:CF"",""x125:cl"",""x140:r14b"",""-0x1:r13"",""x149:OF"",""x162:r8"",""x83:rax"",""x167:r9""]";
"	; freeing x63 (dil) no dependants anymore";
"	seto dil; spill OF x149 to reg (rdi)";
"	inc r13; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x85:rbx"",""x165:r11"",""x166:r10b"",""x97:r15b"",""x82:r12b"",""x106:dl"",""x174:rbp"",""x175:CF"",""x125:cl"",""x140:r14b"",""x149:dil"",""x162:r8"",""x83:rax"",""x167:r9"",""0x0:r13""]";
"	; freeing x82 (r12b) no dependants anymore";
"	mov r12, -0x1 ; moving imm to reg";
"	movzx r10, r10b";
"	adox r10, r12; loading flag";
"	adox r9, r8";
"	";
"";
"	; sub:";
"	; r:x176,f:x177<-sub(x175,x167,0xffffffff)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x85:rbx"",""x165:r11"",""x166:r10b"",""x97:r15b"",""x106:dl"",""x174:rbp"",""x125:cl"",""x140:r14b"",""x149:dil"",""x162:r8"",""x83:rax"",""x167:r9"",""0x0:r13"",""-0x1:r12"",""x168:OF"",""x177:CF""]";
"	; freeing x166 (r10b) no dependants anymore";
"	seto r10b; spill OF x168 to reg (r10)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x85:rbx"",""x165:r11"",""x97:r15b"",""x106:dl"",""x174:rbp"",""x125:cl"",""x140:r14b"",""x149:dil"",""x162:r8"",""x83:rax"",""x167:r9"",""0x0:r13"",""-0x1:r12"",""x168:r10b"",""x177:CF""]";
"	; freeing x162 (r8) no dependants anymore";
"	mov r8,  r9; x176, copying x167 here, cause x167 is needed in a reg for other than x176, namely all: , x185, x176--x177, size: 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x85:rbx"",""x165:r11"",""x97:r15b"",""x106:dl"",""x174:rbp"",""x125:cl"",""x140:r14b"",""x149:dil"",""x83:rax"",""x167:r9"",""0x0:r13"",""-0x1:r12"",""x168:r10b"",""x177:CF"",""x176:r8""]";
"	; freeing 0x0 (r13, since all are neeed, but this one is just an immediate value.";
"	mov r13, 0xffffffff ; moving imm to reg";
"	sbb r8, r13";
"	";
"";
"	; add:";
"	; r:x98,f:_<-add(x97,x85)";
"	; CF: ALIVE,OF: KILLED";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x85:rbx"",""x165:r11"",""x97:r15b"",""x106:dl"",""x174:rbp"",""x125:cl"",""x140:r14b"",""x149:dil"",""x83:rax"",""x167:r9"",""-0x1:r12"",""x168:r10b"",""x177:CF"",""x176:r8"",""0xffffffff:r13""]";
"	;chose 0xffffffff to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: -0x1, 0xffffffff";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: arg1(rsi),x85(rbx),x165(r11),x97(r15b),x106(dl),x174(rbp),x125(cl),x140(r14b),x149(dil),x83(rax),x167(r9),-0x1(r12),x168(r10b),x176(r8),0xffffffff(r13); clobs x98,x97,x85,x97; will spare: 0xffffffff ";
"	movzx r13,  r15b; x98, copying x97 here, cause x97 is needed in a reg for other than x98, namely all: , x98, size: 1";
"	lea r13, [r13+rbx]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""x85:rbx"",""x165:r11"",""x97:r15b"",""x106:dl"",""x174:rbp"",""x125:cl"",""x140:r14b"",""x149:dil"",""x83:rax"",""x167:r9"",""-0x1:r12"",""x168:r10b"",""x177:CF"",""x176:r8"",""x98:r13""]";
"	; freeing x85 (rbx) no dependants anymore";
"	mov rbx, [rsp + 0x08 * 3 ]; load m64 arg2 to register64";
"	;chose >>saved<< arg2[3] from:x3, arg2[3][1] and candidates: x3, arg2[3]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x97:r15b"",""x106:dl"",""x174:rbp"",""x125:cl"",""x140:r14b"",""x149:dil"",""x83:rax"",""x167:r9"",""-0x1:r12"",""x168:r10b"",""x177:CF"",""x176:r8"",""x98:r13"",""arg2[3]:rdx""]";
"	; freeing x97 (r15b) no dependants anymore";
"	mov r15b, dl; preserving value of x106 into a new reg";
"	mov rdx, [rbx + 0x08 * 3 ]; saving arg2[3] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x106:r15b"",""x174:rbp"",""x125:cl"",""x140:r14b"",""x149:dil"",""x83:rax"",""x167:r9"",""-0x1:r12"",""x168:r10b"",""x177:CF"",""x176:r8"",""x98:r13"",""arg2[3]:rdx""]";
"	;chose -0x1 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rbx),x165(r11),x106(r15b),x174(rbp),x125(cl),x140(r14b),x149(dil),x83(rax),x167(r9),-0x1(r12),x168(r10b),x176(r8),x98(r13),arg2[3](rdx); clobs x129,x130,x3,arg2[3],arg2,arg2,arg2,x106,x106; will spare: -0x1 ";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x106:r15b"",""x174:rbp"",""x125:cl"",""x140:r14b"",""x149:dil"",""x83:rax"",""x167:r9"",""x168:r10b"",""x177:CF"",""x176:r8"",""x98:r13"",""arg2[3]:rdx"",""x130:r12""]";
"	;chose x168 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg1, x165, x174, x125, x140, x149, x83, x167, x168, x176, x98";
"	; freeing, i.e. spilling x168, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rbx),x165(r11),x106(r15b),x174(rbp),x125(cl),x140(r14b),x149(dil),x83(rax),x167(r9),x168(r10b),x176(r8),x98(r13),arg2[3](rdx),x130(r12); clobs x129,x130,x3,arg2[3],arg2,arg2,arg2,x106,x106,x130; will spare: x168 ";
"	mov byte [rsp + 0x08 * 33 ], r10b; spilling byte x168 to mem";
"	;-- allocation: [""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x106:r15b"",""x174:rbp"",""x125:cl"",""x140:r14b"",""x149:dil"",""x83:rax"",""x167:r9"",""x177:CF"",""x176:r8"",""x98:r13"",""arg2[3]:rdx"",""x130:r12"",""x129:r10""]";
"	mulx r12, r10, [rsp + 0x08 * 17 ]; x130, x129<- x3 * arg2[3]";
"	";
"";
"	; add:";
"	; r:x141,f:x142<-add(x140,x132,x129)";
"	; CF: ALIVE,OF: KILLED";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x106:r15b"",""x174:rbp"",""x125:cl"",""x140:r14b"",""x149:dil"",""x83:rax"",""x167:r9"",""x177:CF"",""x176:r8"",""x98:r13"",""arg2[3]:rdx"",""x130:r12"",""x141:r10""]";
"	;chose arg2[3] to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: arg2[3]";
"	; freeing, i.e. spilling arg2[3], because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rbx),x165(r11),x106(r15b),x174(rbp),x125(cl),x140(r14b),x149(dil),x83(rax),x167(r9),x176(r8),x98(r13),arg2[3](rdx),x130(r12),x141(r10); clobs x141,x142,x140,x132,x129,x129,0x0; will spare: arg2[3] ";
"	mov rdx, 0x0 ; moving imm to reg";
"	dec rdx; OF<-0x0, preserve CF 3";
"	movzx r14, r14b";
"	adox r14, rdx; loading flag";
"	adox r10, [rsp + 0x08 * 31 ]";
"	";
"";
"	; add:";
"	; r:x107,f:x108<-add(x106,x83,x98)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x106:r15b"",""x174:rbp"",""x125:cl"",""x140:r14b"",""x149:dil"",""x167:r9"",""x177:CF"",""x176:r8"",""x98:r13"",""x130:r12"",""x141:r10"",""-0x1:rdx"",""x142:OF"",""x107:rax""]";
"	; freeing x140 (r14b) no dependants anymore";
"	setc r14b; spill CF x177 to reg (r14)";
"	clc;";
"	movzx r15, r15b";
"	adcx r15, rdx; loading flag";
"	adcx rax, r13";
"	";
"";
"	; add:";
"	; r:x126,f:x127<-add(x125,x107,x110)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x106:r15b"",""x174:rbp"",""x125:cl"",""x149:dil"",""x167:r9"",""x177:r14b"",""x176:r8"",""x98:r13"",""x130:r12"",""x141:r10"",""-0x1:rdx"",""x142:OF"",""x108:CF"",""x126:rax""]";
"	; freeing x106 (r15b) no dependants anymore";
"	setc r15b; spill CF x108 to reg (r15)";
"	clc;";
"	movzx rcx, cl";
"	adcx rcx, rdx; loading flag";
"	adcx rax, [rsp + 0x08 * 30 ]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x174:rbp"",""x125:cl"",""x149:dil"",""x167:r9"",""x177:r14b"",""x176:r8"",""x98:r13"",""x130:r12"",""x141:r10"",""-0x1:rdx"",""x142:OF"",""x108:r15b"",""x126:rax"",""x127:CF""]";
"	; freeing x125 (cl) no dependants anymore";
"	mov rcx, 0xffffffff00000001 ; moving imm to reg";
"	;chose >>saved<< x144 from:x144, 0xffffffff00000001[0] and candidates: x144, 0xffffffff00000001";
"	mov rdx, [rsp + 0x08 * 22 ]; x144 to rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x174:rbp"",""x149:dil"",""x167:r9"",""x177:r14b"",""x176:r8"",""x98:r13"",""x130:r12"",""x141:r10"",""x142:OF"",""x108:r15b"",""x126:rax"",""x127:CF"",""0xffffffff00000001:rcx"",""x155:rdx""]";
"	; freeing x98 (r13) no dependants anymore";
"	;-- allocation: [""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x174:rbp"",""x149:dil"",""x167:r9"",""x177:r14b"",""x176:r8"",""x130:r12"",""x141:r10"",""x142:OF"",""x108:r15b"",""x126:rax"",""x127:CF"",""0xffffffff00000001:rcx"",""x155:rdx"",""x154:r13""]";
"	mulx rdx, r13, rcx; x155, x154<- x144 * 0xffffffff00000001";
"	";
"";
"	; add:";
"	; r:x143,f:_<-add(x142,x130)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x174:rbp"",""x149:dil"",""x167:r9"",""x177:r14b"",""x176:r8"",""x141:r10"",""x142:OF"",""x108:r15b"",""x126:rax"",""x127:CF"",""0xffffffff00000001:rcx"",""x155:rdx"",""x154:r13"",""x143:r12""]";
"	;chose 0xffffffff00000001 to spill because list of spills:x100Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx93Lx93Lx93Lx93Lx93Lx93Lx3Lx3Lx3Lx3Lx164Lx164Lx164Lx65Lx65Lx65L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lout1Lx61Lx61Lx61Lx61Lx61Lx61Lx48Lx48Lx56Lx56Lx56Lx56Lx56Lx56Lx102Lx102Lx102Lx102Lx102L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx112Lx112Lx112Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx124Lx124Lx124Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx175Lx138Lx138Lx138L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1L-0x1Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx106Lx8Lx8Lx8Lx8Lx8Lx91Lx91Lx91Lx91Lx91Lx91Lx91Lx116Lx116Lx116L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx71Lx71Lx71Lx6Lx6Lx6Lx6Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Lx54Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx40Lx40Lx40Lx40Lx40Lx40Lx40Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx86Lx86Lx86Lx52Lx52Lx52Lx52Lx52Lx52Lx52Lx52Larg2Larg2Larg2Larg2Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx134Lx134Lx37Lx37Lx37Lx37Lx37Lx144Lx144Lx144Lx111Lx111Lx111Lx111Lx111Lx145Lx67Lx67Lx67Lx136Lx136Lx136Lx136Lx139Lx139Lx139Lx139Lx139Larg2[3]Larg2[3]Lx49Lx49Lx49Lx119Lx119Lx57Lx168Lx168Lx168Lx132Lx132Lx157Lx157Lx23Lx96Lx11Lx39Lx99Lx99Lx166Lx166Lx115Lx89Lx20Lx18Lx167 and candidates: 0xffffffff00000001";
"	; freeing, i.e. spilling 0xffffffff00000001, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rbx),x165(r11),x174(rbp),x149(dil),x167(r9),x177(r14b),x176(r8),x141(r10),x108(r15b),x126(rax),0xffffffff00000001(rcx),x155(rdx),x154(r13),x143(r12); clobs x143,x142,x130,x130,0x0; will spare: 0xffffffff00000001 ";
"	mov rcx, 0x0 ; moving imm to reg";
"	adox r12, rcx";
"	";
"";
"	; add:";
"	; r:x128,f:_<-add(x127,x108)";
"	; CF: ALIVE,OF: KILLED";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x174:rbp"",""x149:dil"",""x167:r9"",""x177:r14b"",""x176:r8"",""x141:r10"",""x142:OF"",""x108:r15b"",""x126:rax"",""x127:CF"",""x155:rdx"",""x154:r13"",""x143:r12"",""0x0:rcx""]";
"	; freeing 0x0 (rcx, since all are neeed, but this one is just an immediate value.";
"	movzx rcx,  r15b; x128, copying x108 here, cause x108 is needed in a reg for other than x128, namely all: , x128, size: 1";
"	adc rcx, 0x0";
"	";
"";
"	; add:";
"	; r:x150,f:x151<-add(x149,x126,x141)";
"	; CF: KILLED,OF: KILLED";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	add dil, 0x7F; load flag from rm/8 into OF, clears other flag. NODE, if operand1 is not a byte reg, this fails.";
"	seto dil; since that has deps, resore it whereever it was";
"	adox rax, r10";
"	";
"";
"	; add:";
"	; r:x169,f:x170<-add(x168,x150,x154)";
"	; CF: ZERO,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x174:rbp"",""x149:dil"",""x167:r9"",""x177:r14b"",""x176:r8"",""x141:r10"",""x108:r15b"",""x127:CF"",""x155:rdx"",""x154:r13"",""x143:r12"",""x128:rcx"",""x151:OF"",""x169:rax""]";
"	; freeing x149 (dil) no dependants anymore";
"	movzx rdi, byte [rsp + 0x08 * 33 ]; load byte memx168 to register64";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x174:rbp"",""x167:r9"",""x168:rdi"",""x177:r14b"",""x176:r8"",""x141:r10"",""x108:r15b"",""x127:CF"",""x155:rdx"",""x154:r13"",""x143:r12"",""x128:rcx"",""x151:OF"",""x169:rax""]";
"	; freeing x141 (r10) no dependants anymore";
"	mov r10, -0x1 ; moving imm to reg";
"	adcx rdi, r10; loading flag";
"	adcx rax, r13";
"	";
"";
"	; add:";
"	; r:x152,f:x153<-add(x151,x128,x143)";
"	; CF: ALIVE,OF: ALIVE";
"	adox r12, rcx";
"	";
"";
"	; add:";
"	; r:x171,f:x172<-add(x170,x152,x155)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx rdx, r12";
"	";
"";
"	; sub:";
"	; r:x178,f:x179<-sub(x177,x169,0x0)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x174:rbp"",""x167:r9"",""x168:rdi"",""x177:r14b"",""x176:r8"",""x108:r15b"",""x154:r13"",""x128:rcx"",""x169:rax"",""-0x1:r10"",""x153:OF"",""x152:r12"",""x172:CF"",""x171:rdx""]";
"	; freeing x168 (rdi) no dependants anymore";
"	setc dil; spill CF x172 to reg (rdi)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x174:rbp"",""x167:r9"",""x177:r14b"",""x176:r8"",""x108:r15b"",""x154:r13"",""x128:rcx"",""x169:rax"",""-0x1:r10"",""x153:OF"",""x152:r12"",""x172:dil"",""x171:rdx""]";
"	; freeing x108 (r15b) no dependants anymore";
"	seto r15b; spill OF x153 to reg (r15)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x174:rbp"",""x167:r9"",""x177:r14b"",""x176:r8"",""x154:r13"",""x128:rcx"",""x169:rax"",""-0x1:r10"",""x153:r15b"",""x152:r12"",""x172:dil"",""x171:rdx""]";
"	; freeing x154 (r13) no dependants anymore";
"	movzx r13,  r14b; x177, copying x177 here, cause x177 is needed in a reg for other than x177, namely all: , x178--x179, size: 1";
"	add r13, -0x1";
"	; fr:r13,r14";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x174:rbp"",""x167:r9"",""x176:r8"",""x128:rcx"",""x169:rax"",""-0x1:r10"",""x153:r15b"",""x152:r12"",""x172:dil"",""x171:rdx"",""x179:CF""]";
"	;chose >>RANDOMLY<< r14 from candidates :r13, r14[1].";
"	mov r14,  rax; x178, copying x169 here, cause x169 is needed in a reg for other than x178, namely all: , x186, x178--x179, size: 2";
"	sbb r14, 0x00000000";
"	";
"";
"	; add:";
"	; r:x173,f:_<-add(x172,x153)";
"	; CF: ALIVE,OF: KILLED";
"	; fr:r13";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x174:rbp"",""x167:r9"",""x176:r8"",""x128:rcx"",""x169:rax"",""-0x1:r10"",""x153:r15b"",""x152:r12"",""x172:dil"",""x171:rdx"",""x179:CF"",""x178:r14""]";
"	;chose >>RANDOMLY<< r13 from candidates :r13[0].";
"	movzx r13,  dil; x173, copying x172 here, cause x172 is needed in a reg for other than x173, namely all: , x173, size: 1";
"	movzx r15, r15b";
"	lea r13, [r13+r15]";
"	";
"";
"	; sub:";
"	; r:x180,f:x181<-sub(x179,x171,0xffffffff00000001)";
"	; CF: ALIVE,OF: KILLED";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x174:rbp"",""x167:r9"",""x176:r8"",""x128:rcx"",""x169:rax"",""-0x1:r10"",""x153:r15b"",""x152:r12"",""x172:dil"",""x171:rdx"",""x178:r14"",""x173:r13"",""x181:CF""]";
"	; freeing x128 (rcx) no dependants anymore";
"	mov rcx,  rdx; x180, copying x171 here, cause x171 is needed in a reg for other than x180, namely all: , x187, x180--x181, size: 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x174:rbp"",""x167:r9"",""x176:r8"",""x169:rax"",""-0x1:r10"",""x153:r15b"",""x152:r12"",""x172:dil"",""x171:rdx"",""x178:r14"",""x173:r13"",""x181:CF"",""x180:rcx""]";
"	; freeing x153 (r15b) no dependants anymore";
"	mov r15, 0xffffffff00000001 ; moving imm to reg";
"	sbb rcx, r15";
"	";
"";
"	; sub:";
"	; r:_,f:x183<-sub(x181,x173,0x0)";
"	; CF: ALIVE,OF: KILLED";
"	sbb r13, 0x00000000";
"	; the job is: x185 = x183 !== 0 ? x176: x167";
"	; fr:r13";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x174:rbp"",""x167:r9"",""x176:r8"",""x169:rax"",""-0x1:r10"",""x152:r12"",""x172:dil"",""x171:rdx"",""x178:r14"",""x180:rcx"",""0xffffffff00000001:r15"",""x183:CF""]";
"	;chose >>RANDOMLY<< r13 from candidates :r13[0].";
"	setc r13b; spill CF x183 to reg (r13)";
"	;-- allocation: [""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x174:rbp"",""x167:r9"",""x169:rax"",""-0x1:r10"",""x152:r12"",""x172:dil"",""x171:rdx"",""x178:r14"",""x180:rcx"",""0xffffffff00000001:r15"",""x183:r13b"",""x185:r8""]";
"	test r13b, r13b; testing x183";
"	cmovnz r8, r9; if !ZF, x185<- x167 (nzVar)";
"	; the job is: x187 = x183 !== 0 ? x180: x171";
"	;-- allocation: [""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x174:rbp"",""x167:r9"",""x169:rax"",""-0x1:r10"",""x152:r12"",""x172:dil"",""x171:rdx"",""x178:r14"",""0xffffffff00000001:r15"",""x183:r13b"",""x185:r8"",""x187:rcx""]";
"	test r13b, r13b; testing x183";
"	cmovnz rcx, rdx; if !ZF, x187<- x171 (nzVar)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x174:rbp"",""x167:r9"",""x169:rax"",""-0x1:r10"",""x152:r12"",""x172:dil"",""x171:rdx"",""x178:r14"",""0xffffffff00000001:r15"",""x183:r13b"",""x185:r8"",""x187:rcx""]";
"	; freeing x167 (r9) no dependants anymore";
"	mov r9, [rsp + 0x08 * 0 ]; load m64 out1 to register64";
"	;-- allocation: [""out1:r9"",""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x174:rbp"",""x169:rax"",""-0x1:r10"",""x152:r12"",""x172:dil"",""x171:rdx"",""x178:r14"",""0xffffffff00000001:r15"",""x183:r13b"",""x187:rcx"",""x185:r8""]";
"	mov [r9 + 0x08 * 1 ], r8; out1[1] = x185";
"	; the job is: x184 = x183 !== 0 ? x174: x165";
"	;-- allocation: [""out1:r9"",""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x169:rax"",""-0x1:r10"",""x152:r12"",""x172:dil"",""x171:rdx"",""x178:r14"",""0xffffffff00000001:r15"",""x183:r13b"",""x187:rcx"",""x185:r8"",""x184:rbp""]";
"	test r13b, r13b; testing x183";
"	cmovnz rbp, r11; if !ZF, x184<- x165 (nzVar)";
"	; the job is: x186 = x183 !== 0 ? x178: x169";
"	;-- allocation: [""out1:r9"",""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x169:rax"",""-0x1:r10"",""x152:r12"",""x172:dil"",""x171:rdx"",""0xffffffff00000001:r15"",""x183:r13b"",""x187:rcx"",""x185:r8"",""x184:rbp"",""x186:r14""]";
"	test r13b, r13b; testing x183";
"	cmovnz r14, rax; if !ZF, x186<- x169 (nzVar)";
"	;-- allocation: [""out1:r9"",""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x169:rax"",""-0x1:r10"",""x152:r12"",""x172:dil"",""x171:rdx"",""0xffffffff00000001:r15"",""x183:r13b"",""x187:rcx"",""x185:r8"",""x184:rbp"",""x186:r14""]";
"	mov [r9 + 0x08 * 2 ], r14; out1[2] = x186";
"	;-- allocation: [""out1:r9"",""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x169:rax"",""-0x1:r10"",""x152:r12"",""x172:dil"",""x171:rdx"",""0xffffffff00000001:r15"",""x183:r13b"",""x185:r8"",""x184:rbp"",""x186:r14"",""x187:rcx""]";
"	mov [r9 + 0x08 * 3 ], rcx; out1[3] = x187";
"	;-- allocation: [""out1:r9"",""arg1:rsi"",""arg2:rbx"",""x165:r11"",""x169:rax"",""-0x1:r10"",""x152:r12"",""x172:dil"",""x171:rdx"",""0xffffffff00000001:r15"",""x183:r13b"",""x185:r8"",""x186:r14"",""x187:rcx"",""x184:rbp""]";
"	mov [r9 + 0x08 * 0 ], rbp; out1[0] = x184";
"	mov rbx, [rsp + 0x08 * 34 ]; restoring from stack";
"	mov rbp, [rsp + 0x08 * 35 ]; restoring from stack";
"	mov r12, [rsp + 0x08 * 36 ]; restoring from stack";
"	mov r13, [rsp + 0x08 * 37 ]; restoring from stack";
"	mov r14, [rsp + 0x08 * 38 ]; restoring from stack";
"	mov r15, [rsp + 0x08 * 39 ]; restoring from stack";
"	add rsp, 0x148 ";
"	ret";
"; cyclecount: 1721";
"; seed 12 ";
"; time Needed: 1860873 ms/ 10000 runs";
"; Time Spent By Invoking Make (measure): 1205650 ms";
"; Ratio (time for make measure)/elapsed: 0.647894832156735";
"; Reverts a mutation because test was slower: 7861";
"; number tried mutation Permutation: 3302";
"; number tried mutation Spill: 3391";
"; number tried mutation Decision: 3307";
"; FailedEvals (cannot swap because of edge to the next node): 1976";
""].
