Require Import Coq.Strings.String Coq.Lists.List.
Import ListNotations.
Local Open Scope string_scope.
Local Open Scope list_scope.
Example example : list string := [
"SECTION .text";
"	GLOBAL fiat_p256_mul_optimised";
"";
"fiat_p256_mul_optimised:";
"	sub rsp, 0xd0 ";
"	mov [rsp + 0x08 * 19 ], rbx; saving to stack";
"	mov [rsp + 0x08 * 20 ], rbp; saving to stack";
"	mov [rsp + 0x08 * 21 ], r12; saving to stack";
"	mov [rsp + 0x08 * 22 ], r13; saving to stack";
"	mov [rsp + 0x08 * 23 ], r14; saving to stack";
"	mov [rsp + 0x08 * 24 ], r15; saving to stack";
"	; rdi contains out1";
"	; rsi contains arg1";
"	; rdx contains arg2";
"	; fr:rax,r10,r11,rbx,rbp,r12,r13,r14,r15,rcx,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rdx""]";
"	;chose >>RANDOMLY<< rbx from candidates :rax, r10, r11, rbx, rbp, r12, r13, r14, r15, rcx, r8, r9[3].";
"	mov rbx, [rsi + 0x08 * 1 ]; load m64 x1 to register64";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rdx"",""x1:rbx""]";
"	; fr:rax,r10,r11,rbp,r12,r13,r14,r15,rcx,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rdx"",""x1:rbx""]";
"	;chose >>RANDOMLY<< r15 from candidates :rax, r10, r11, rbp, r12, r13, r14, r15, rcx, r8, r9[7].";
"	mov r15, [rsi + 0x08 * 0 ]; load m64 x4 to register64";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rdx"",""x1:rbx"",""x4:r15""]";
"	;chose >>saved<< x4 from:x4, arg2[0][0] and candidates: x4, arg2[0]";
"	xchg rdx, r15; x4, swapping with arg2, which is currently in rdx";
"	; fr:rax,r10,r11,rbp,r12,r13,r14,rcx,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:rdx""]";
"	;chose >>RANDOMLY<< r9 from candidates :rax, r10, r11, rbp, r12, r13, r14, rcx, r8, r9[9].";
"	; fr:rax,r10,r11,rbp,r12,r13,r14,rcx,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:rdx"",""x12:r9""]";
"	;chose >>RANDOMLY<< r10 from candidates :rax, r10, r11, rbp, r12, r13, r14, rcx, r8[1].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:rdx"",""x12:r9"",""x11:r10""]";
"	mulx r9, r10, [r15 + 0x08 * 0 ]; x12, x11<- x4 * arg2[0]";
"	; fr:rax,r11,rbp,r12,r13,r14,rcx,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:rdx"",""x12:r9"",""x11:r10""]";
"	;chose >>RANDOMLY<< rax from candidates :rax, r11, rbp, r12, r13, r14, rcx, r8[0].";
"	; fr:r11,rbp,r12,r13,r14,rcx,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:rdx"",""x12:r9"",""x11:r10"",""x10:rax""]";
"	;chose >>RANDOMLY<< rbp from candidates :r11, rbp, r12, r13, r14, rcx, r8[1].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:rdx"",""x12:r9"",""x11:r10"",""x10:rax"",""x9:rbp""]";
"	mulx rax, rbp, [r15 + 0x08 * 1 ]; x10, x9<- x4 * arg2[1]";
"	; fr:r11,r12,r13,r14,rcx,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:rdx"",""x12:r9"",""x11:r10"",""x10:rax"",""x9:rbp""]";
"	;chose >>RANDOMLY<< rcx from candidates :r11, r12, r13, r14, rcx, r8[4].";
"	mov rcx, 0xffffffff ; moving imm to reg";
"	;chose >>saved<< x11 from:x11, 0xffffffff[0] and candidates: x11, 0xffffffff";
"	xchg rdx, r10; x11, swapping with x4, which is currently in rdx";
"	; fr:r11,r12,r13,r14,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:r10"",""x12:r9"",""x11:rdx"",""x10:rax"",""x9:rbp"",""0xffffffff:rcx""]";
"	;chose >>RANDOMLY<< r12 from candidates :r11, r12, r13, r14, r8[1].";
"	; fr:r11,r13,r14,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:r10"",""x12:r9"",""x11:rdx"",""x10:rax"",""x9:rbp"",""0xffffffff:rcx"",""x23:r12""]";
"	;chose >>RANDOMLY<< r14 from candidates :r11, r13, r14, r8[2].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:r10"",""x12:r9"",""x11:rdx"",""x10:rax"",""x9:rbp"",""0xffffffff:rcx"",""x23:r12"",""x22:r14""]";
"	mulx r12, r14, rcx; x23, x22<- x11 * 0xffffffff";
"	";
"";
"	; add:";
"	; r:x13,f:x14<-add(0x0,x12,x9)";
"	; CF: KILLED,OF: KILLED";
"	;chose >>saved<< c_add from:c_add, c_xor_adx, c_test_adx[0] and candidates: c_add, c_xor_adx, c_test_adx";
"	add r9, rbp; could be done better, if r0 has been u8 as well";
"	; fr:r11,r13,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:r10"",""x11:rdx"",""x10:rax"",""x9:rbp"",""0xffffffff:rcx"",""x23:r12"",""x22:r14"",""x13:r9"",""x14:CF""]";
"	;chose >>RANDOMLY<< r13 from candidates :r11, r13, r8[1].";
"	mov r13, 0xffffffffffffffff ; moving imm to reg";
"	; fr:r11,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:r10"",""x11:rdx"",""x10:rax"",""x9:rbp"",""0xffffffff:rcx"",""x23:r12"",""x22:r14"",""x13:r9"",""x14:CF"",""0xffffffffffffffff:r13""]";
"	;chose >>RANDOMLY<< r11 from candidates :r11, r8[0].";
"	; fr:r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:r10"",""x11:rdx"",""x10:rax"",""x9:rbp"",""0xffffffff:rcx"",""x23:r12"",""x22:r14"",""x13:r9"",""x14:CF"",""0xffffffffffffffff:r13"",""x25:r11""]";
"	;chose >>RANDOMLY<< r8 from candidates :r8[0].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:r10"",""x11:rdx"",""x10:rax"",""x9:rbp"",""0xffffffff:rcx"",""x23:r12"",""x22:r14"",""x13:r9"",""x14:CF"",""0xffffffffffffffff:r13"",""x25:r11"",""x24:r8""]";
"	mulx r11, r8, r13; x25, x24<- x11 * 0xffffffffffffffff";
"	";
"";
"	; add:";
"	; r:x26,f:x27<-add(0x0,x25,x22)";
"	; CF: ALIVE,OF: KILLED";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:r10"",""x11:rdx"",""x10:rax"",""x9:rbp"",""0xffffffff:rcx"",""x23:r12"",""x22:r14"",""x13:r9"",""x14:CF"",""0xffffffffffffffff:r13"",""x24:r8"",""x26:r11""]";
"	; freeing x9 (rbp) no dependants anymore";
"	mov rbp, 0x0 ; moving imm to reg";
"	dec rbp; OF<-0x0, preserve CF 3";
"	adox r11, r14";
"	;chose >>saved<< arg2[0] from:x1, arg2[0][1] and candidates: x1, arg2[0]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:r10"",""x11:rdx"",""x10:rax"",""0xffffffff:rcx"",""x23:r12"",""x22:r14"",""x13:r9"",""x14:CF"",""0xffffffffffffffff:r13"",""x24:r8"",""x26:r11"",""-0x1:rbp"",""x27:OF"",""arg2[0]:rdx""]";
"	; freeing x22 (r14) no dependants anymore";
"	mov r14, rdx; preserving value of x11 into a new reg";
"	mov rdx, [r15 + 0x08 * 0 ]; saving arg2[0] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:r10"",""x11:r14"",""x10:rax"",""0xffffffff:rcx"",""x23:r12"",""x13:r9"",""x14:CF"",""0xffffffffffffffff:r13"",""x24:r8"",""x26:r11"",""-0x1:rbp"",""x27:OF"",""arg2[0]:rdx""]";
"	;chose 0xffffffff to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: 0xffffffff, 0xffffffffffffffff, -0x1";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),arg2(r15),x1(rbx),x4(r10),x11(r14),x10(rax),0xffffffff(rcx),x23(r12),x13(r9),0xffffffffffffffff(r13),x24(r8),x26(r11),-0x1(rbp),arg2[0](rdx); clobs x45,x46,x1,arg2[0],arg2,x11,x11; will spare: 0xffffffff ";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:r10"",""x11:r14"",""x10:rax"",""x23:r12"",""x13:r9"",""x14:CF"",""0xffffffffffffffff:r13"",""x24:r8"",""x26:r11"",""-0x1:rbp"",""x27:OF"",""arg2[0]:rdx"",""x46:rcx""]";
"	;chose -0x1 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: 0xffffffffffffffff, -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),arg2(r15),x1(rbx),x4(r10),x11(r14),x10(rax),x23(r12),x13(r9),0xffffffffffffffff(r13),x24(r8),x26(r11),-0x1(rbp),arg2[0](rdx),x46(rcx); clobs x45,x46,x1,arg2[0],arg2,x11,x11,x46; will spare: -0x1 ";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:r10"",""x11:r14"",""x10:rax"",""x23:r12"",""x13:r9"",""x14:CF"",""0xffffffffffffffff:r13"",""x24:r8"",""x26:r11"",""x27:OF"",""arg2[0]:rdx"",""x46:rcx"",""x45:rbp""]";
"	mulx rcx, rbp, rbx; x46, x45<- x1 * arg2[0]";
"	";
"";
"	; add:";
"	; r:x28,f:_<-add(x27,x23)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:r10"",""x11:r14"",""x10:rax"",""x13:r9"",""x14:CF"",""0xffffffffffffffff:r13"",""x24:r8"",""x26:r11"",""x27:OF"",""arg2[0]:rdx"",""x46:rcx"",""x45:rbp"",""x28:r12""]";
"	;chose arg2[0] to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: 0xffffffffffffffff, arg2[0]";
"	; freeing, i.e. spilling arg2[0], because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),arg2(r15),x1(rbx),x4(r10),x11(r14),x10(rax),x13(r9),0xffffffffffffffff(r13),x24(r8),x26(r11),arg2[0](rdx),x46(rcx),x45(rbp),x28(r12); clobs x28,x27,x23,x23,0x0; will spare: arg2[0] ";
"	mov rdx, 0x0 ; moving imm to reg";
"	adox r12, rdx";
"	";
"";
"	; add:";
"	; r:_,f:x30<-add(0x0,x11,x24)";
"	; CF: ALIVE,OF: KILLED";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:r10"",""x11:r14"",""x10:rax"",""x13:r9"",""x14:CF"",""0xffffffffffffffff:r13"",""x24:r8"",""x26:r11"",""x27:OF"",""x46:rcx"",""x45:rbp"",""x28:r12"",""0x0:rdx""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: 0xffffffffffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),arg2(r15),x1(rbx),x4(r10),x11(r14),x10(rax),x13(r9),0xffffffffffffffff(r13),x24(r8),x26(r11),x46(rcx),x45(rbp),x28(r12),0x0(rdx); clobs _,x30,0x0,x11,x24,x11; will spare: 0xffffffffffffffff ";
"	mov r13,  r14; _, copying x11 here, cause x11 is needed in a reg for other than _, namely all: , _--x30, x20--x21, size: 2";
"	dec rdx; OF<-0x0, preserve CF 3";
"	adox r13, r8";
"	";
"";
"	; add:";
"	; r:x31,f:x32<-add(x30,x13,x26)";
"	; CF: ALIVE,OF: ALIVE";
"	adox r11, r9";
"	";
"";
"	; add:";
"	; r:x54,f:x55<-add(0x0,x31,x45)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:r13";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:r10"",""x11:r14"",""x10:rax"",""x13:r9"",""x14:CF"",""x24:r8"",""x46:rcx"",""x45:rbp"",""x28:r12"",""-0x1:rdx"",""x32:OF"",""x54:r11""]";
"	;chose >>RANDOMLY<< r13 from candidates :r13[0].";
"	setc r13b; spill CF x14 to reg (r13)";
"	clc;";
"	adcx r11, rbp";
"	;chose >>saved<< arg2[1] from:x1, arg2[1][1] and candidates: x1, arg2[1]";
"	mov rdx, [r15 + 0x08 * 1 ]; arg2[1] to rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:r10"",""x11:r14"",""x10:rax"",""x13:r9"",""x14:r13b"",""x24:r8"",""x46:rcx"",""x45:rbp"",""x28:r12"",""x32:OF"",""x54:r11"",""x55:CF"",""arg2[1]:rdx""]";
"	; freeing x13 (r9) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:r10"",""x11:r14"",""x10:rax"",""x14:r13b"",""x24:r8"",""x46:rcx"",""x45:rbp"",""x28:r12"",""x32:OF"",""x54:r11"",""x55:CF"",""arg2[1]:rdx"",""x44:r9""]";
"	; freeing x24 (r8) no dependants anymore";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:r10"",""x11:r14"",""x10:rax"",""x14:r13b"",""x46:rcx"",""x45:rbp"",""x28:r12"",""x32:OF"",""x54:r11"",""x55:CF"",""arg2[1]:rdx"",""x44:r9"",""x43:r8""]";
"	mulx r9, r8, rbx; x44, x43<- x1 * arg2[1]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:r10"",""x11:r14"",""x10:rax"",""x14:r13b"",""x46:rcx"",""x45:rbp"",""x28:r12"",""x32:OF"",""x54:r11"",""x55:CF"",""arg2[1]:rdx"",""x44:r9"",""x43:r8""]";
"	; freeing x45 (rbp) no dependants anymore";
"	mov rbp, 0xffffffffffffffff ; moving imm to reg";
"	;chose >>saved<< 0xffffffffffffffff from:x54, 0xffffffffffffffff[1] and candidates: x54, 0xffffffffffffffff";
"	mov rdx, rbp; 0xffffffffffffffff to rdx";
"	; fr:rbp";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:r10"",""x11:r14"",""x10:rax"",""x14:r13b"",""x46:rcx"",""x28:r12"",""x32:OF"",""x54:r11"",""x55:CF"",""x44:r9"",""x43:r8"",""0xffffffffffffffff:rdx""]";
"	;chose >>RANDOMLY<< rbp from candidates :rbp[0].";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x1:rbx"",""x4:r10"",""x11:r14"",""x10:rax"",""x14:r13b"",""x46:rcx"",""x28:r12"",""x32:OF"",""x54:r11"",""x55:CF"",""x44:r9"",""x43:r8"",""0xffffffffffffffff:rdx"",""x69:rbp""]";
"	;chose arg1 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: out1, arg1, arg2, x1, x4, x11, x10, x14, x46, x28, x44, x43";
"	; freeing, i.e. spilling arg1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),arg2(r15),x1(rbx),x4(r10),x11(r14),x10(rax),x14(r13b),x46(rcx),x28(r12),x54(r11),x44(r9),x43(r8),0xffffffffffffffff(rdx),x69(rbp); clobs x68,x69,x54,0xffffffffffffffff,0xffffffffffffffff,0xffffffffffffffff; will spare: arg1 ";
"	mov [rsp + 0x08 * 0 ], rsi; spilling arg1 to mem";
"	;-- allocation: [""out1:rdi"",""arg2:r15"",""x1:rbx"",""x4:r10"",""x11:r14"",""x10:rax"",""x14:r13b"",""x46:rcx"",""x28:r12"",""x32:OF"",""x54:r11"",""x55:CF"",""x44:r9"",""x43:r8"",""0xffffffffffffffff:rdx"",""x69:rbp"",""x68:rsi""]";
"	mulx rbp, rsi, r11; x69, x68<- x54 * 0xffffffffffffffff";
"	";
"";
"	; add:";
"	; r:_,f:x74<-add(0x0,x54,x68)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg2:r15"",""x1:rbx"",""x4:r10"",""x11:r14"",""x10:rax"",""x14:r13b"",""x46:rcx"",""x28:r12"",""x32:OF"",""x54:r11"",""x55:CF"",""x44:r9"",""x43:r8"",""0xffffffffffffffff:rdx"",""x69:rbp"",""x68:rsi""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: 0xffffffffffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: out1(rdi),arg2(r15),x1(rbx),x4(r10),x11(r14),x10(rax),x14(r13b),x46(rcx),x28(r12),x54(r11),x44(r9),x43(r8),0xffffffffffffffff(rdx),x69(rbp),x68(rsi); clobs _,x74,0x0,x54,x68,x54; will spare: 0xffffffffffffffff ";
"	mov rdx,  r11; _, copying x54 here, cause x54 is needed in a reg for other than _, namely all: , _--x74, x64--x65, x66--x67, size: 3";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg2:r15"",""x1:rbx"",""x4:r10"",""x11:r14"",""x10:rax"",""x14:r13b"",""x46:rcx"",""x28:r12"",""x32:OF"",""x54:r11"",""x55:CF"",""x44:r9"",""x43:r8"",""x69:rbp"",""x68:rsi"",""_:rdx""]";
"	;chose x11 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: out1, arg2, x1, x4, x11, x10, x14, x46, x28, x44, x43, x69";
"	; freeing, i.e. spilling x11, because I am out of ideas";
"	; allocs: out1(rdi),arg2(r15),x1(rbx),x4(r10),x11(r14),x10(rax),x14(r13b),x46(rcx),x28(r12),x54(r11),x44(r9),x43(r8),x69(rbp),x68(rsi),_(rdx); clobs _,x74,0x0,x54,x68,x54,_,x32; will spare: x11 ";
"	mov [rsp + 0x08 * 1 ], r14; spilling x11 to mem";
"	seto r14b; spill OF x32 to reg (r14)";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg2:r15"",""x1:rbx"",""x4:r10"",""x10:rax"",""x14:r13b"",""x46:rcx"",""x28:r12"",""x32:r14b"",""x54:r11"",""x55:CF"",""x44:r9"",""x43:r8"",""x69:rbp"",""x68:rsi"",""_:rdx""]";
"	;chose out1 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: out1, arg2, x1, x4, x10, x14, x46, x28, x44, x43, x69";
"	; freeing, i.e. spilling out1, because I am out of ideas";
"	; allocs: out1(rdi),arg2(r15),x1(rbx),x4(r10),x10(rax),x14(r13b),x46(rcx),x28(r12),x32(r14b),x54(r11),x44(r9),x43(r8),x69(rbp),x68(rsi),_(rdx); clobs _,x74,0x0,x54,x68,x54,_,x32,x32,0x0; will spare: out1 ";
"	mov [rsp + 0x08 * 2 ], rdi; spilling out1 to mem";
"	mov rdi, 0x0 ; moving imm to reg";
"	dec rdi; OF<-0x0, preserve CF 3";
"	adox rdx, rsi";
"	;chose >>saved<< arg2[2] from:x4, arg2[2][1] and candidates: x4, arg2[2]";
"	mov rdx, [r15 + 0x08 * 2 ]; arg2[2] to rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:r15"",""x1:rbx"",""x4:r10"",""x10:rax"",""x14:r13b"",""x46:rcx"",""x28:r12"",""x32:r14b"",""x54:r11"",""x55:CF"",""x44:r9"",""x43:r8"",""x69:rbp"",""x68:rsi"",""-0x1:rdi"",""x74:OF"",""arg2[2]:rdx""]";
"	; freeing x68 (rsi) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:r15"",""x1:rbx"",""x4:r10"",""x10:rax"",""x14:r13b"",""x46:rcx"",""x28:r12"",""x32:r14b"",""x54:r11"",""x55:CF"",""x44:r9"",""x43:r8"",""x69:rbp"",""-0x1:rdi"",""x74:OF"",""arg2[2]:rdx"",""x8:rsi""]";
"	;chose -0x1 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg2(r15),x1(rbx),x4(r10),x10(rax),x14(r13b),x46(rcx),x28(r12),x32(r14b),x54(r11),x44(r9),x43(r8),x69(rbp),-0x1(rdi),arg2[2](rdx),x8(rsi); clobs x7,x8,x4,arg2[2],arg2,x8; will spare: -0x1 ";
"	;-- allocation: [""arg2:r15"",""x1:rbx"",""x4:r10"",""x10:rax"",""x14:r13b"",""x46:rcx"",""x28:r12"",""x32:r14b"",""x54:r11"",""x55:CF"",""x44:r9"",""x43:r8"",""x69:rbp"",""x74:OF"",""arg2[2]:rdx"",""x8:rsi"",""x7:rdi""]";
"	mulx rsi, rdi, r10; x8, x7<- x4 * arg2[2]";
"	";
"";
"	; add:";
"	; r:x15,f:x16<-add(x14,x10,x7)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:r15"",""x1:rbx"",""x4:r10"",""x14:r13b"",""x46:rcx"",""x28:r12"",""x32:r14b"",""x54:r11"",""x55:CF"",""x44:r9"",""x43:r8"",""x69:rbp"",""x74:OF"",""arg2[2]:rdx"",""x8:rsi"",""x7:rdi"",""x15:rax""]";
"	;chose arg2[2] to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: arg2[2]";
"	; freeing, i.e. spilling arg2[2], because I am out of ideas";
"	; allocs: arg2(r15),x1(rbx),x4(r10),x14(r13b),x46(rcx),x28(r12),x32(r14b),x54(r11),x44(r9),x43(r8),x69(rbp),arg2[2](rdx),x8(rsi),x7(rdi),x15(rax); clobs x15,x16,x14,x10,x7,x10,x55; will spare: arg2[2] ";
"	setc dl; spill CF x55 to reg (rdx)";
"	clc;";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:r15"",""x1:rbx"",""x4:r10"",""x14:r13b"",""x46:rcx"",""x28:r12"",""x32:r14b"",""x54:r11"",""x55:dl"",""x44:r9"",""x43:r8"",""x69:rbp"",""x74:OF"",""x8:rsi"",""x7:rdi"",""x15:rax""]";
"	;chose x28 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: arg2, x1, x4, x46, x28, x32, x54, x44, x43, x69, x8";
"	; freeing, i.e. spilling x28, because I am out of ideas";
"	; allocs: arg2(r15),x1(rbx),x4(r10),x14(r13b),x46(rcx),x28(r12),x32(r14b),x54(r11),x55(dl),x44(r9),x43(r8),x69(rbp),x8(rsi),x7(rdi),x15(rax); clobs x15,x16,x14,x10,x7,x10,x55,x55,-0x1; will spare: x28 ";
"	mov [rsp + 0x08 * 3 ], r12; spilling x28 to mem";
"	mov r12, -0x1 ; moving imm to reg";
"	movzx r13, r13b";
"	adcx r13, r12; loading flag";
"	adcx rax, rdi";
"	";
"";
"	; add:";
"	; r:x33,f:x34<-add(x32,x15,x28)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:r15"",""x1:rbx"",""x4:r10"",""x14:r13b"",""x46:rcx"",""x32:r14b"",""x54:r11"",""x55:dl"",""x44:r9"",""x43:r8"",""x69:rbp"",""x74:OF"",""x8:rsi"",""x7:rdi"",""-0x1:r12"",""x16:CF"",""x33:rax""]";
"	; freeing x14 (r13b) no dependants anymore";
"	seto r13b; spill OF x74 to reg (r13)";
"	inc r12; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:r15"",""x1:rbx"",""x4:r10"",""x46:rcx"",""x32:r14b"",""x54:r11"",""x55:dl"",""x44:r9"",""x43:r8"",""x69:rbp"",""x74:r13b"",""x8:rsi"",""x7:rdi"",""x16:CF"",""x33:rax"",""0x0:r12""]";
"	; freeing x7 (rdi) no dependants anymore";
"	mov rdi, -0x1 ; moving imm to reg";
"	movzx r14, r14b";
"	adox r14, rdi; loading flag";
"	adox rax, [rsp + 0x08 * 3 ]";
"	";
"";
"	; add:";
"	; r:x47,f:x48<-add(0x0,x46,x43)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:r15"",""x1:rbx"",""x4:r10"",""x32:r14b"",""x54:r11"",""x55:dl"",""x44:r9"",""x43:r8"",""x69:rbp"",""x74:r13b"",""x8:rsi"",""x16:CF"",""x33:rax"",""0x0:r12"",""-0x1:rdi"",""x34:OF"",""x47:rcx""]";
"	; freeing x32 (r14b) no dependants anymore";
"	seto r14b; spill OF x34 to reg (r14)";
"	inc rdi; OF<-0x0, preserve CF 1";
"	adox rcx, r8";
"	";
"";
"	; add:";
"	; r:x56,f:x57<-add(x55,x33,x47)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:r12";
"	; allocatedR: ;-- allocation: [""arg2:r15"",""x1:rbx"",""x4:r10"",""x54:r11"",""x55:dl"",""x44:r9"",""x43:r8"",""x69:rbp"",""x74:r13b"",""x8:rsi"",""x16:CF"",""0x0:rdi"",""x34:r14b"",""x47:rcx"",""x48:OF"",""x56:rax""]";
"	;chose >>RANDOMLY<< r12 from candidates :r12[0].";
"	setc r12b; spill CF x16 to reg (r12)";
"	clc;";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:r15"",""x1:rbx"",""x4:r10"",""x54:r11"",""x55:dl"",""x44:r9"",""x43:r8"",""x69:rbp"",""x74:r13b"",""x8:rsi"",""x16:r12b"",""0x0:rdi"",""x34:r14b"",""x47:rcx"",""x48:OF"",""x56:rax""]";
"	; freeing x43 (r8) no dependants anymore";
"	mov r8, -0x1 ; moving imm to reg";
"	movzx rdx, dl";
"	adcx rdx, r8; loading flag";
"	adcx rax, rcx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:r15"",""x1:rbx"",""x4:r10"",""x54:r11"",""x55:dl"",""x44:r9"",""x69:rbp"",""x74:r13b"",""x8:rsi"",""x16:r12b"",""0x0:rdi"",""x34:r14b"",""x47:rcx"",""x48:OF"",""x56:rax"",""-0x1:r8"",""x57:CF""]";
"	; freeing x55 (dl) no dependants anymore";
"	mov rdx, 0xffffffff ; moving imm to reg";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:r15"",""x1:rbx"",""x4:r10"",""x54:r11"",""x44:r9"",""x69:rbp"",""x74:r13b"",""x8:rsi"",""x16:r12b"",""0x0:rdi"",""x34:r14b"",""x47:rcx"",""x48:OF"",""x56:rax"",""-0x1:r8"",""x57:CF"",""0xffffffff:rdx""]";
"	; freeing x47 (rcx) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:r15"",""x1:rbx"",""x4:r10"",""x54:r11"",""x44:r9"",""x69:rbp"",""x74:r13b"",""x8:rsi"",""x16:r12b"",""0x0:rdi"",""x34:r14b"",""x48:OF"",""x56:rax"",""-0x1:r8"",""x57:CF"",""0xffffffff:rdx"",""x67:rcx""]";
"	; freeing 0x0 (rdi, since all are neeed, but this one is just an immediate value.";
"	;-- allocation: [""arg2:r15"",""x1:rbx"",""x4:r10"",""x54:r11"",""x44:r9"",""x69:rbp"",""x74:r13b"",""x8:rsi"",""x16:r12b"",""x34:r14b"",""x48:OF"",""x56:rax"",""-0x1:r8"",""x57:CF"",""0xffffffff:rdx"",""x67:rcx"",""x66:rdi""]";
"	mulx rcx, rdi, r11; x67, x66<- x54 * 0xffffffff";
"	;chose >>saved<< arg2[3] from:x4, arg2[3][1] and candidates: x4, arg2[3]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:r15"",""x1:rbx"",""x4:r10"",""x54:r11"",""x44:r9"",""x69:rbp"",""x74:r13b"",""x8:rsi"",""x16:r12b"",""x34:r14b"",""x48:OF"",""x56:rax"",""-0x1:r8"",""x57:CF"",""0xffffffff:rdx"",""x67:rcx"",""x66:rdi"",""arg2[3]:rdx""]";
"	;chose -0x1 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg2(r15),x1(rbx),x4(r10),x54(r11),x44(r9),x69(rbp),x74(r13b),x8(rsi),x16(r12b),x34(r14b),x56(rax),-0x1(r8),0xffffffff(rdx),x67(rcx),x66(rdi),arg2[3](rdx); clobs x5,x6,x4,arg2[3],arg2,0xffffffff; will spare: -0x1 ";
"	mov r8, rdx; preserving value of 0xffffffff into a new reg";
"	mov rdx, [r15 + 0x08 * 3 ]; saving arg2[3] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:r15"",""x1:rbx"",""x54:r11"",""x44:r9"",""x69:rbp"",""x74:r13b"",""x8:rsi"",""x16:r12b"",""x34:r14b"",""x48:OF"",""x56:rax"",""x57:CF"",""0xffffffff:r8"",""x67:rcx"",""x66:rdi"",""arg2[3]:rdx"",""x6:r10""]";
"	;chose x67 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: x1, x54, x44, x69, x74, x8, x16, x34, x56, x67, x66";
"	; freeing, i.e. spilling x67, because I am out of ideas";
"	; allocs: arg2(r15),x1(rbx),x54(r11),x44(r9),x69(rbp),x74(r13b),x8(rsi),x16(r12b),x34(r14b),x56(rax),0xffffffff(r8),x67(rcx),x66(rdi),arg2[3](rdx),x6(r10); clobs x5,x6,x4,arg2[3],arg2,0xffffffff,0xffffffff; will spare: x67 ";
"	mov [rsp + 0x08 * 4 ], rcx; spilling x67 to mem";
"	;-- allocation: [""arg2:r15"",""x1:rbx"",""x54:r11"",""x44:r9"",""x69:rbp"",""x74:r13b"",""x8:rsi"",""x16:r12b"",""x34:r14b"",""x48:OF"",""x56:rax"",""x57:CF"",""0xffffffff:r8"",""x66:rdi"",""arg2[3]:rdx"",""x6:r10"",""x5:rcx""]";
"	mulx r10, rcx, r10; x6, x5<- x4 * arg2[3]";
"	";
"";
"	; add:";
"	; r:x70,f:x71<-add(0x0,x69,x66)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:r15"",""x1:rbx"",""x54:r11"",""x44:r9"",""x74:r13b"",""x8:rsi"",""x16:r12b"",""x34:r14b"",""x48:OF"",""x56:rax"",""x57:CF"",""0xffffffff:r8"",""x66:rdi"",""arg2[3]:rdx"",""x6:r10"",""x5:rcx"",""x70:rbp""]";
"	;chose 0xffffffff to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: 0xffffffff, arg2[3]";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: arg2(r15),x1(rbx),x54(r11),x44(r9),x74(r13b),x8(rsi),x16(r12b),x34(r14b),x56(rax),0xffffffff(r8),x66(rdi),arg2[3](rdx),x6(r10),x5(rcx),x70(rbp); clobs x70,x71,0x0,x69,x66,x69,x57; will spare: 0xffffffff ";
"	setc r8b; spill CF x57 to reg (r8)";
"	clc;";
"	adcx rbp, rdi";
"	";
"";
"	; add:";
"	; r:x17,f:x18<-add(x16,x8,x5)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:r15"",""x1:rbx"",""x54:r11"",""x44:r9"",""x74:r13b"",""x16:r12b"",""x34:r14b"",""x48:OF"",""x56:rax"",""x57:r8b"",""x66:rdi"",""arg2[3]:rdx"",""x6:r10"",""x5:rcx"",""x70:rbp"",""x71:CF"",""x17:rsi""]";
"	; freeing x66 (rdi) no dependants anymore";
"	setc dil; spill CF x71 to reg (rdi)";
"	clc;";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:r15"",""x1:rbx"",""x54:r11"",""x44:r9"",""x74:r13b"",""x16:r12b"",""x34:r14b"",""x48:OF"",""x56:rax"",""x57:r8b"",""arg2[3]:rdx"",""x6:r10"",""x5:rcx"",""x70:rbp"",""x71:dil"",""x17:rsi""]";
"	;chose arg2[3] to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: arg2[3]";
"	; freeing, i.e. spilling arg2[3], because I am out of ideas";
"	; allocs: arg2(r15),x1(rbx),x54(r11),x44(r9),x74(r13b),x16(r12b),x34(r14b),x56(rax),x57(r8b),arg2[3](rdx),x6(r10),x5(rcx),x70(rbp),x71(dil),x17(rsi); clobs x17,x18,x16,x8,x5,x8,x71,x71,-0x1; will spare: arg2[3] ";
"	mov rdx, -0x1 ; moving imm to reg";
"	movzx r12, r12b";
"	adcx r12, rdx; loading flag";
"	adcx rsi, rcx";
"	";
"";
"	; add:";
"	; r:x75,f:x76<-add(x74,x56,x70)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:r15"",""x1:rbx"",""x54:r11"",""x44:r9"",""x74:r13b"",""x16:r12b"",""x34:r14b"",""x48:OF"",""x57:r8b"",""x6:r10"",""x5:rcx"",""x70:rbp"",""x71:dil"",""x17:rsi"",""-0x1:rdx"",""x18:CF"",""x75:rax""]";
"	; freeing x16 (r12b) no dependants anymore";
"	setc r12b; spill CF x18 to reg (r12)";
"	clc;";
"	movzx r13, r13b";
"	adcx r13, rdx; loading flag";
"	adcx rax, rbp";
"	;chose >>saved<< arg2[2] from:x1, arg2[2][1] and candidates: x1, arg2[2]";
"	mov rdx, [r15 + 0x08 * 2 ]; arg2[2] to rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:r15"",""x1:rbx"",""x54:r11"",""x44:r9"",""x74:r13b"",""x34:r14b"",""x48:OF"",""x57:r8b"",""x6:r10"",""x5:rcx"",""x70:rbp"",""x71:dil"",""x17:rsi"",""x18:r12b"",""x75:rax"",""x76:CF"",""arg2[2]:rdx""]";
"	; freeing x74 (r13b) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:r15"",""x1:rbx"",""x54:r11"",""x44:r9"",""x34:r14b"",""x48:OF"",""x57:r8b"",""x6:r10"",""x5:rcx"",""x70:rbp"",""x71:dil"",""x17:rsi"",""x18:r12b"",""x75:rax"",""x76:CF"",""arg2[2]:rdx"",""x42:r13""]";
"	; freeing x5 (rcx) no dependants anymore";
"	;-- allocation: [""arg2:r15"",""x1:rbx"",""x54:r11"",""x44:r9"",""x34:r14b"",""x48:OF"",""x57:r8b"",""x6:r10"",""x70:rbp"",""x71:dil"",""x17:rsi"",""x18:r12b"",""x75:rax"",""x76:CF"",""arg2[2]:rdx"",""x42:r13"",""x41:rcx""]";
"	mulx r13, rcx, rbx; x42, x41<- x1 * arg2[2]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:r15"",""x1:rbx"",""x54:r11"",""x44:r9"",""x34:r14b"",""x48:OF"",""x57:r8b"",""x6:r10"",""x70:rbp"",""x71:dil"",""x17:rsi"",""x18:r12b"",""x75:rax"",""x76:CF"",""arg2[2]:rdx"",""x42:r13"",""x41:rcx""]";
"	; freeing x70 (rbp) no dependants anymore";
"	mov rbp, 0xffffffff00000001 ; moving imm to reg";
"	;chose >>saved<< x11 from:x11, 0xffffffff00000001[0] and candidates: x11, 0xffffffff00000001";
"	mov rdx, [rsp + 0x08 * 1 ]; x11 to rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:r15"",""x1:rbx"",""x54:r11"",""x44:r9"",""x34:r14b"",""x48:OF"",""x57:r8b"",""x6:r10"",""x71:dil"",""x17:rsi"",""x18:r12b"",""x75:rax"",""x76:CF"",""x42:r13"",""x41:rcx"",""0xffffffff00000001:rbp"",""x21:rdx""]";
"	;chose arg2 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: arg2, x1, x54, x44, x34, x57, x6, x71, x17, x18, x75, x42, x41";
"	; freeing, i.e. spilling arg2, because I am out of ideas";
"	; allocs: arg2(r15),x1(rbx),x54(r11),x44(r9),x34(r14b),x57(r8b),x6(r10),x71(dil),x17(rsi),x18(r12b),x75(rax),x42(r13),x41(rcx),0xffffffff00000001(rbp),x21(rdx); clobs x20,x21,x11,0xffffffff00000001,0xffffffff00000001,0xffffffff00000001; will spare: arg2 ";
"	mov [rsp + 0x08 * 5 ], r15; spilling arg2 to mem";
"	;-- allocation: [""x1:rbx"",""x54:r11"",""x44:r9"",""x34:r14b"",""x48:OF"",""x57:r8b"",""x6:r10"",""x71:dil"",""x17:rsi"",""x18:r12b"",""x75:rax"",""x76:CF"",""x42:r13"",""x41:rcx"",""0xffffffff00000001:rbp"",""x21:rdx"",""x20:r15""]";
"	mulx rdx, r15, rbp; x21, x20<- x11 * 0xffffffff00000001";
"	";
"";
"	; add:";
"	; r:x49,f:x50<-add(x48,x44,x41)";
"	; CF: ALIVE,OF: ALIVE";
"	adox rcx, r9";
"	";
"";
"	; add:";
"	; r:x35,f:x36<-add(x34,x17,x20)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x1:rbx"",""x54:r11"",""x44:r9"",""x34:r14b"",""x57:r8b"",""x6:r10"",""x71:dil"",""x18:r12b"",""x75:rax"",""x76:CF"",""x42:r13"",""0xffffffff00000001:rbp"",""x21:rdx"",""x20:r15"",""x50:OF"",""x49:rcx"",""x35:rsi""]";
"	; freeing x44 (r9) no dependants anymore";
"	seto r9b; spill OF x50 to reg (r9)";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x1:rbx"",""x54:r11"",""x34:r14b"",""x57:r8b"",""x6:r10"",""x71:dil"",""x18:r12b"",""x75:rax"",""x76:CF"",""x42:r13"",""0xffffffff00000001:rbp"",""x21:rdx"",""x20:r15"",""x50:r9b"",""x49:rcx"",""x35:rsi""]";
"	;chose 0xffffffff00000001 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: 0xffffffff00000001";
"	; freeing, i.e. spilling 0xffffffff00000001, because I am out of ideas";
"	; allocs: x1(rbx),x54(r11),x34(r14b),x57(r8b),x6(r10),x71(dil),x18(r12b),x75(rax),x42(r13),0xffffffff00000001(rbp),x21(rdx),x20(r15),x50(r9b),x49(rcx),x35(rsi); clobs x35,x36,x34,x17,x20,x17,x50,x50,0x0; will spare: 0xffffffff00000001 ";
"	mov rbp, 0x0 ; moving imm to reg";
"	dec rbp; OF<-0x0, preserve CF 3";
"	movzx r14, r14b";
"	adox r14, rbp; loading flag";
"	adox rsi, r15";
"	";
"";
"	; add:";
"	; r:x58,f:x59<-add(x57,x35,x49)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x1:rbx"",""x54:r11"",""x34:r14b"",""x57:r8b"",""x6:r10"",""x71:dil"",""x18:r12b"",""x75:rax"",""x76:CF"",""x42:r13"",""x21:rdx"",""x20:r15"",""x50:r9b"",""x49:rcx"",""-0x1:rbp"",""x36:OF"",""x58:rsi""]";
"	; freeing x34 (r14b) no dependants anymore";
"	seto r14b; spill OF x36 to reg (r14)";
"	inc rbp; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x1:rbx"",""x54:r11"",""x57:r8b"",""x6:r10"",""x71:dil"",""x18:r12b"",""x75:rax"",""x76:CF"",""x42:r13"",""x21:rdx"",""x20:r15"",""x50:r9b"",""x49:rcx"",""x36:r14b"",""x58:rsi"",""0x0:rbp""]";
"	; freeing x20 (r15) no dependants anymore";
"	mov r15, -0x1 ; moving imm to reg";
"	movzx r8, r8b";
"	adox r8, r15; loading flag";
"	adox rsi, rcx";
"	";
"";
"	; add:";
"	; r:x19,f:_<-add(x18,x6)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x1:rbx"",""x54:r11"",""x57:r8b"",""x6:r10"",""x71:dil"",""x18:r12b"",""x75:rax"",""x76:CF"",""x42:r13"",""x21:rdx"",""x50:r9b"",""x49:rcx"",""x36:r14b"",""x58:rsi"",""0x0:rbp"",""-0x1:r15"",""x59:OF""]";
"	; freeing x57 (r8b) no dependants anymore";
"	movzx r8,  r12b; x19, copying x18 here, cause x18 is needed in a reg for other than x19, namely all: , x19, size: 1";
"	lea r8, [r8+r10]";
"	";
"";
"	; add:";
"	; r:x72,f:_<-add(x71,x67)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x1:rbx"",""x54:r11"",""x6:r10"",""x71:dil"",""x18:r12b"",""x75:rax"",""x76:CF"",""x42:r13"",""x21:rdx"",""x50:r9b"",""x49:rcx"",""x36:r14b"",""x58:rsi"",""0x0:rbp"",""-0x1:r15"",""x59:OF"",""x19:r8""]";
"	; freeing x6 (r10) no dependants anymore";
"	movzx r10,  dil; x72, copying x71 here, cause x71 is needed in a reg for other than x72, namely all: , x72, size: 1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x1:rbx"",""x54:r11"",""x71:dil"",""x18:r12b"",""x75:rax"",""x76:CF"",""x42:r13"",""x21:rdx"",""x50:r9b"",""x49:rcx"",""x36:r14b"",""x58:rsi"",""0x0:rbp"",""-0x1:r15"",""x59:OF"",""x19:r8"",""x72:r10""]";
"	; freeing x18 (r12b) no dependants anymore";
"	mov r12, [rsp + 0x08 * 4 ]; load m64 x67 to register64";
"	lea r10, [r10+r12]; r8/64 + m8";
"	";
"";
"	; add:";
"	; r:x77,f:x78<-add(x76,x58,x72)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx r10, rsi";
"	";
"";
"	; add:";
"	; r:x37,f:x38<-add(x36,x19,x21)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x1:rbx"",""x54:r11"",""x67:r12"",""x71:dil"",""x75:rax"",""x42:r13"",""x21:rdx"",""x50:r9b"",""x49:rcx"",""x36:r14b"",""x58:rsi"",""0x0:rbp"",""-0x1:r15"",""x59:OF"",""x78:CF"",""x77:r10"",""x37:r8""]";
"	; freeing x67 (r12) no dependants anymore";
"	setc r12b; spill CF x78 to reg (r12)";
"	clc;";
"	movzx r14, r14b";
"	adcx r14, r15; loading flag";
"	adcx r8, rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x1:rbx"",""x54:r11"",""x71:dil"",""x75:rax"",""x42:r13"",""x21:rdx"",""x50:r9b"",""x49:rcx"",""x36:r14b"",""x58:rsi"",""0x0:rbp"",""-0x1:r15"",""x59:OF"",""x78:r12b"",""x77:r10"",""x37:r8"",""x38:CF""]";
"	; freeing x71 (dil) no dependants anymore";
"	mov rdi, [rsp + 0x08 * 5 ]; load m64 arg2 to register64";
"	;chose >>saved<< x1 from:x1, arg2[3][0] and candidates: x1, arg2[3]";
"	mov rdx, rbx; x1 to rdx";
"	; fr:rbx";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x54:r11"",""x75:rax"",""x42:r13"",""x50:r9b"",""x49:rcx"",""x36:r14b"",""x58:rsi"",""0x0:rbp"",""-0x1:r15"",""x59:OF"",""x78:r12b"",""x77:r10"",""x37:r8"",""x38:CF"",""x40:rdx""]";
"	;chose >>RANDOMLY<< rbx from candidates :rbx[0].";
"	;-- allocation: [""arg2:rdi"",""x54:r11"",""x75:rax"",""x42:r13"",""x50:r9b"",""x49:rcx"",""x36:r14b"",""x58:rsi"",""0x0:rbp"",""-0x1:r15"",""x59:OF"",""x78:r12b"",""x77:r10"",""x37:r8"",""x38:CF"",""x40:rdx"",""x39:rbx""]";
"	mulx rdx, rbx, [rdi + 0x08 * 3 ]; x40, x39<- x1 * arg2[3]";
"	";
"";
"	; add:";
"	; r:x51,f:x52<-add(x50,x42,x39)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x54:r11"",""x75:rax"",""x50:r9b"",""x49:rcx"",""x36:r14b"",""x58:rsi"",""0x0:rbp"",""-0x1:r15"",""x59:OF"",""x78:r12b"",""x77:r10"",""x37:r8"",""x38:CF"",""x40:rdx"",""x39:rbx"",""x51:r13""]";
"	; freeing x49 (rcx) no dependants anymore";
"	setc cl; spill CF x38 to reg (rcx)";
"	clc;";
"	movzx r9, r9b";
"	adcx r9, r15; loading flag";
"	adcx r13, rbx";
"	";
"";
"	; add:";
"	; r:x60,f:x61<-add(x59,x37,x51)";
"	; CF: ALIVE,OF: ALIVE";
"	adox r13, r8";
"	";
"";
"	; add:";
"	; r:x53,f:_<-add(x52,x40)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx rdx, rbp";
"	";
"";
"	; add:";
"	; r:x62,f:x63<-add(x61,x38,x53)";
"	; CF: KILLED,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x54:r11"",""x75:rax"",""x50:r9b"",""x36:r14b"",""x58:rsi"",""0x0:rbp"",""-0x1:r15"",""x78:r12b"",""x77:r10"",""x37:r8"",""x38:cl"",""x39:rbx"",""x52:CF"",""x60:r13"",""x53:rdx"",""x63:OF""]";
"	; freeing x50 (r9b) no dependants anymore";
"	movzx r9,  cl; x62, copying x38 here, cause x38 is needed in a reg for other than x62, namely all: , x62--x63, size: 1";
"	adox r9, rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x54:r11"",""x75:rax"",""x36:r14b"",""x58:rsi"",""0x0:rbp"",""-0x1:r15"",""x78:r12b"",""x77:r10"",""x37:r8"",""x38:cl"",""x39:rbx"",""x52:CF"",""x60:r13"",""x53:rdx"",""x63:OF"",""x62:r9""]";
"	; freeing x36 (r14b) no dependants anymore";
"	mov r14, 0xffffffff00000001 ; moving imm to reg";
"	;chose >>saved<< x54 from:x54, 0xffffffff00000001[0] and candidates: x54, 0xffffffff00000001";
"	mov rdx, r11; x54 to rdx";
"	; fr:r11";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x75:rax"",""x58:rsi"",""0x0:rbp"",""-0x1:r15"",""x78:r12b"",""x77:r10"",""x37:r8"",""x38:cl"",""x39:rbx"",""x52:CF"",""x60:r13"",""x63:OF"",""x62:r9"",""0xffffffff00000001:r14"",""x65:rdx""]";
"	;chose >>RANDOMLY<< r11 from candidates :r11[0].";
"	;-- allocation: [""arg2:rdi"",""x75:rax"",""x58:rsi"",""0x0:rbp"",""-0x1:r15"",""x78:r12b"",""x77:r10"",""x37:r8"",""x38:cl"",""x39:rbx"",""x52:CF"",""x60:r13"",""x63:OF"",""x62:r9"",""0xffffffff00000001:r14"",""x65:rdx"",""x64:r11""]";
"	mulx rdx, r11, r14; x65, x64<- x54 * 0xffffffff00000001";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x75:rax"",""x58:rsi"",""0x0:rbp"",""-0x1:r15"",""x78:r12b"",""x77:r10"",""x37:r8"",""x38:cl"",""x39:rbx"",""x52:CF"",""x60:r13"",""x63:OF"",""x62:r9"",""0xffffffff00000001:r14"",""x65:rdx"",""x64:r11""]";
"	; freeing x58 (rsi) no dependants anymore";
"	mov rsi, [rsp + 0x08 * 0 ]; load m64 arg1 to register64";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x75:rax"",""0x0:rbp"",""-0x1:r15"",""x78:r12b"",""x77:r10"",""x37:r8"",""x38:cl"",""x39:rbx"",""x52:CF"",""x60:r13"",""x63:OF"",""x62:r9"",""0xffffffff00000001:r14"",""x65:rdx"",""x64:r11""]";
"	; freeing x37 (r8) no dependants anymore";
"	mov r8, [rsi + 0x08 * 2 ]; load m64 x2 to register64";
"	;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x75:rax"",""0x0:rbp"",""-0x1:r15"",""x78:r12b"",""x77:r10"",""x38:cl"",""x39:rbx"",""x52:CF"",""x60:r13"",""x63:OF"",""x62:r9"",""0xffffffff00000001:r14"",""x65:rdx"",""x64:r11"",""x2:r8""]";
"	";
"";
"	; add:";
"	; r:x79,f:x80<-add(x78,x60,x64)";
"	; CF: KILLED,OF: ALIVE";
"	clc;";
"	movzx r12, r12b";
"	adcx r12, r15; loading flag";
"	adcx r13, r11";
"	";
"";
"	; add:";
"	; r:x81,f:x82<-add(x80,x62,x65)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx rdx, r9";
"	";
"";
"	; add:";
"	; r:x83,f:_<-add(x82,x63)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x75:rax"",""0x0:rbp"",""-0x1:r15"",""x78:r12b"",""x77:r10"",""x38:cl"",""x39:rbx"",""x63:OF"",""x62:r9"",""0xffffffff00000001:r14"",""x64:r11"",""x2:r8"",""x79:r13"",""x82:CF"",""x81:rdx""]";
"	; freeing x78 (r12b) no dependants anymore";
"	seto r12b; spill OF x83 to reg (r12)";
"	adc r12b, 0x0";
"	movzx r12, r12b";
"	;chose >>saved<< arg2[0] from:x2, arg2[0][1] and candidates: x2, arg2[0]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x75:rax"",""0x0:rbp"",""-0x1:r15"",""x77:r10"",""x38:cl"",""x39:rbx"",""x63:OF"",""x62:r9"",""0xffffffff00000001:r14"",""x64:r11"",""x2:r8"",""x79:r13"",""x82:CF"",""x81:rdx"",""x83:r12b"",""arg2[0]:rdx""]";
"	; freeing x38 (cl) no dependants anymore";
"	mov rcx, rdx; preserving value of x81 into a new reg";
"	mov rdx, [rdi + 0x08 * 0 ]; saving arg2[0] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x75:rax"",""0x0:rbp"",""-0x1:r15"",""x77:r10"",""x39:rbx"",""x63:OF"",""x62:r9"",""0xffffffff00000001:r14"",""x64:r11"",""x2:r8"",""x79:r13"",""x82:CF"",""x81:rcx"",""x83:r12b"",""arg2[0]:rdx""]";
"	; freeing x39 (rbx) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x75:rax"",""0x0:rbp"",""-0x1:r15"",""x77:r10"",""x63:OF"",""x62:r9"",""0xffffffff00000001:r14"",""x64:r11"",""x2:r8"",""x79:r13"",""x82:CF"",""x81:rcx"",""x83:r12b"",""arg2[0]:rdx"",""x91:rbx""]";
"	; freeing x62 (r9) no dependants anymore";
"	;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x75:rax"",""0x0:rbp"",""-0x1:r15"",""x77:r10"",""x63:OF"",""0xffffffff00000001:r14"",""x64:r11"",""x2:r8"",""x79:r13"",""x82:CF"",""x81:rcx"",""x83:r12b"",""arg2[0]:rdx"",""x91:rbx"",""x90:r9""]";
"	mulx rbx, r9, r8; x91, x90<- x2 * arg2[0]";
"	";
"";
"	; add:";
"	; r:x99,f:x100<-add(0x0,x75,x90)";
"	; CF: ZERO,OF: ZERO";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	adox rax, r9";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""0x0:rbp"",""-0x1:r15"",""x77:r10"",""0xffffffff00000001:r14"",""x64:r11"",""x2:r8"",""x79:r13"",""x82:CF"",""x81:rcx"",""x83:r12b"",""arg2[0]:rdx"",""x91:rbx"",""x90:r9"",""x99:rax"",""x100:OF""]";
"	; freeing x64 (r11) no dependants anymore";
"	mov r11, 0xffffffffffffffff ; moving imm to reg";
"	;chose >>saved<< x99 from:x99, 0xffffffffffffffff[0] and candidates: x99, 0xffffffffffffffff";
"	mov rdx, rax; x99 to rdx";
"	; fr:rax";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""0x0:rbp"",""-0x1:r15"",""x77:r10"",""0xffffffff00000001:r14"",""x2:r8"",""x79:r13"",""x82:CF"",""x81:rcx"",""x83:r12b"",""x91:rbx"",""x90:r9"",""x99:rdx"",""x100:OF"",""0xffffffffffffffff:r11""]";
"	;chose >>RANDOMLY<< rax from candidates :rax[0].";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""0x0:rbp"",""-0x1:r15"",""x77:r10"",""0xffffffff00000001:r14"",""x2:r8"",""x79:r13"",""x82:CF"",""x81:rcx"",""x83:r12b"",""x91:rbx"",""x90:r9"",""x99:rdx"",""x100:OF"",""0xffffffffffffffff:r11"",""x114:rax""]";
"	; freeing x90 (r9) no dependants anymore";
"	;-- allocation: [""arg1:rsi"",""arg2:rdi"",""0x0:rbp"",""-0x1:r15"",""x77:r10"",""0xffffffff00000001:r14"",""x2:r8"",""x79:r13"",""x82:CF"",""x81:rcx"",""x83:r12b"",""x91:rbx"",""x99:rdx"",""x100:OF"",""0xffffffffffffffff:r11"",""x114:rax"",""x113:r9""]";
"	mulx rax, r9, r11; x114, x113<- x99 * 0xffffffffffffffff";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""0x0:rbp"",""-0x1:r15"",""x77:r10"",""0xffffffff00000001:r14"",""x2:r8"",""x79:r13"",""x82:CF"",""x81:rcx"",""x83:r12b"",""x91:rbx"",""x99:rdx"",""x100:OF"",""0xffffffffffffffff:r11"",""x114:rax"",""x113:r9""]";
"	; freeing 0x0 (rbp, since all are neeed, but this one is just an immediate value.";
"	mov rbp, 0xffffffff ; moving imm to reg";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""-0x1:r15"",""x77:r10"",""0xffffffff00000001:r14"",""x2:r8"",""x79:r13"",""x82:CF"",""x81:rcx"",""x83:r12b"",""x91:rbx"",""x99:rdx"",""x100:OF"",""0xffffffffffffffff:r11"",""x114:rax"",""x113:r9"",""0xffffffff:rbp""]";
"	;chose 0xffffffff00000001 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: -0x1, 0xffffffff00000001, 0xffffffffffffffff";
"	; freeing, i.e. spilling 0xffffffff00000001, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),-0x1(r15),x77(r10),0xffffffff00000001(r14),x2(r8),x79(r13),x81(rcx),x83(r12b),x91(rbx),x99(rdx),0xffffffffffffffff(r11),x114(rax),x113(r9),0xffffffff(rbp); clobs x111,x112,x99,0xffffffff,0xffffffff,0xffffffff; will spare: 0xffffffff00000001 ";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""-0x1:r15"",""x77:r10"",""x2:r8"",""x79:r13"",""x82:CF"",""x81:rcx"",""x83:r12b"",""x91:rbx"",""x99:rdx"",""x100:OF"",""0xffffffffffffffff:r11"",""x114:rax"",""x113:r9"",""0xffffffff:rbp"",""x112:r14""]";
"	;chose -0x1 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: -0x1, 0xffffffffffffffff";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),-0x1(r15),x77(r10),x2(r8),x79(r13),x81(rcx),x83(r12b),x91(rbx),x99(rdx),0xffffffffffffffff(r11),x114(rax),x113(r9),0xffffffff(rbp),x112(r14); clobs x111,x112,x99,0xffffffff,0xffffffff,0xffffffff,x112; will spare: -0x1 ";
"	;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x77:r10"",""x2:r8"",""x79:r13"",""x82:CF"",""x81:rcx"",""x83:r12b"",""x91:rbx"",""x99:rdx"",""x100:OF"",""0xffffffffffffffff:r11"",""x114:rax"",""x113:r9"",""0xffffffff:rbp"",""x112:r14"",""x111:r15""]";
"	mulx r14, r15, rbp; x112, x111<- x99 * 0xffffffff";
"	;chose >>saved<< arg2[1] from:x2, arg2[1][1] and candidates: x2, arg2[1]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x77:r10"",""x2:r8"",""x79:r13"",""x82:CF"",""x81:rcx"",""x83:r12b"",""x91:rbx"",""x99:rdx"",""x100:OF"",""0xffffffffffffffff:r11"",""x114:rax"",""x113:r9"",""0xffffffff:rbp"",""x112:r14"",""x111:r15"",""arg2[1]:rdx""]";
"	;chose 0xffffffff to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: 0xffffffffffffffff, 0xffffffff";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x77(r10),x2(r8),x79(r13),x81(rcx),x83(r12b),x91(rbx),x99(rdx),0xffffffffffffffff(r11),x114(rax),x113(r9),0xffffffff(rbp),x112(r14),x111(r15),arg2[1](rdx); clobs x88,x89,x2,arg2[1],arg2,x99; will spare: 0xffffffff ";
"	mov rbp, rdx; preserving value of x99 into a new reg";
"	mov rdx, [rdi + 0x08 * 1 ]; saving arg2[1] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x77:r10"",""x2:r8"",""x79:r13"",""x82:CF"",""x81:rcx"",""x83:r12b"",""x91:rbx"",""x99:rbp"",""x100:OF"",""0xffffffffffffffff:r11"",""x114:rax"",""x113:r9"",""x112:r14"",""x111:r15"",""arg2[1]:rdx""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: 0xffffffffffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x77(r10),x2(r8),x79(r13),x81(rcx),x83(r12b),x91(rbx),x99(rbp),0xffffffffffffffff(r11),x114(rax),x113(r9),x112(r14),x111(r15),arg2[1](rdx); clobs x88,x89,x2,arg2[1],arg2,x99,x99; will spare: 0xffffffffffffffff ";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x77:r10"",""x2:r8"",""x79:r13"",""x82:CF"",""x81:rcx"",""x83:r12b"",""x91:rbx"",""x99:rbp"",""x100:OF"",""x114:rax"",""x113:r9"",""x112:r14"",""x111:r15"",""arg2[1]:rdx"",""x89:r11""]";
"	;chose x83 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: arg1, x77, x79, x81, x83, x91, x114, x113, x112, x111";
"	; freeing, i.e. spilling x83, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x77(r10),x2(r8),x79(r13),x81(rcx),x83(r12b),x91(rbx),x99(rbp),x114(rax),x113(r9),x112(r14),x111(r15),arg2[1](rdx),x89(r11); clobs x88,x89,x2,arg2[1],arg2,x99,x99,x89; will spare: x83 ";
"	mov byte [rsp + 0x08 * 6 ], r12b; spilling byte x83 to mem";
"	;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x77:r10"",""x2:r8"",""x79:r13"",""x82:CF"",""x81:rcx"",""x91:rbx"",""x99:rbp"",""x100:OF"",""x114:rax"",""x113:r9"",""x112:r14"",""x111:r15"",""arg2[1]:rdx"",""x89:r11"",""x88:r12""]";
"	mulx r11, r12, r8; x89, x88<- x2 * arg2[1]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x77:r10"",""x2:r8"",""x79:r13"",""x82:CF"",""x81:rcx"",""x91:rbx"",""x99:rbp"",""x100:OF"",""x114:rax"",""x113:r9"",""x112:r14"",""x111:r15"",""arg2[1]:rdx"",""x89:r11"",""x88:r12""]";
"	;chose arg2[1] to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: arg2[1]";
"	; freeing, i.e. spilling arg2[1], because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x77(r10),x2(r8),x79(r13),x81(rcx),x91(rbx),x99(rbp),x114(rax),x113(r9),x112(r14),x111(r15),arg2[1](rdx),x89(r11),x88(r12); clobs x3,arg1[3],arg1,x3; will spare: arg2[1] ";
"	mov rdx, [rsi + 0x08 * 3 ]; load m64 x3 to register64";
"	;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x77:r10"",""x2:r8"",""x79:r13"",""x82:CF"",""x81:rcx"",""x91:rbx"",""x99:rbp"",""x100:OF"",""x114:rax"",""x113:r9"",""x112:r14"",""x111:r15"",""x89:r11"",""x88:r12"",""x3:rdx""]";
"	";
"";
"	; add:";
"	; r:x115,f:x116<-add(0x0,x114,x111)";
"	; CF: ZERO,OF: ALIVE";
"	adcx rax, r15";
"	";
"";
"	; add:";
"	; r:x117,f:_<-add(x116,x112)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x77:r10"",""x2:r8"",""x79:r13"",""x81:rcx"",""x91:rbx"",""x99:rbp"",""x100:OF"",""x113:r9"",""x111:r15"",""x89:r11"",""x88:r12"",""x3:rdx"",""x115:rax"",""x116:CF"",""x117:r14""]";
"	; freeing x111 (r15) no dependants anymore";
"	mov r15, 0x0 ; moving imm to reg";
"	adcx r14, r15";
"	";
"";
"	; add:";
"	; r:x92,f:x93<-add(0x0,x91,x88)";
"	; CF: KILLED,OF: ALIVE";
"	clc;";
"	adcx rbx, r12";
"	";
"";
"	; add:";
"	; r:x101,f:x102<-add(x100,x77,x92)";
"	; CF: ALIVE,OF: ALIVE";
"	adox rbx, r10";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x77:r10"",""x2:r8"",""x79:r13"",""x81:rcx"",""x99:rbp"",""x113:r9"",""x89:r11"",""x88:r12"",""x3:rdx"",""x115:rax"",""x117:r14"",""0x0:r15"",""x93:CF"",""x102:OF"",""x101:rbx""]";
"	; freeing x77 (r10) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:r8"",""x79:r13"",""x81:rcx"",""x99:rbp"",""x113:r9"",""x89:r11"",""x88:r12"",""x3:rdx"",""x115:rax"",""x117:r14"",""0x0:r15"",""x93:CF"",""x102:OF"",""x101:rbx"",""x136:r10""]";
"	; freeing x88 (r12) no dependants anymore";
"	;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:r8"",""x79:r13"",""x81:rcx"",""x99:rbp"",""x113:r9"",""x89:r11"",""x3:rdx"",""x115:rax"",""x117:r14"",""0x0:r15"",""x93:CF"",""x102:OF"",""x101:rbx"",""x136:r10"",""x135:r12""]";
"	mulx r10, r12, [rdi + 0x08 * 0 ]; x136, x135<- x3 * arg2[0]";
"	";
"";
"	; add:";
"	; r:_,f:x119<-add(0x0,x99,x113)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:r8"",""x79:r13"",""x81:rcx"",""x99:rbp"",""x113:r9"",""x89:r11"",""x3:rdx"",""x115:rax"",""x117:r14"",""0x0:r15"",""x93:CF"",""x102:OF"",""x101:rbx"",""x136:r10"",""x135:r12""]";
"	;chose x89 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: arg1, arg2, x2, x79, x81, x89, x3, x115, x117, x101, x136, x135";
"	; freeing, i.e. spilling x89, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x2(r8),x79(r13),x81(rcx),x99(rbp),x113(r9),x89(r11),x3(rdx),x115(rax),x117(r14),0x0(r15),x101(rbx),x136(r10),x135(r12); clobs _,x119,0x0,x99,x113,x99; will spare: x89 ";
"	mov [rsp + 0x08 * 7 ], r11; spilling x89 to mem";
"	mov r11,  rbp; _, copying x99 here, cause x99 is needed in a reg for other than _, namely all: , _--x119, x109--x110, size: 2";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:r8"",""x79:r13"",""x81:rcx"",""x99:rbp"",""x113:r9"",""x3:rdx"",""x115:rax"",""x117:r14"",""0x0:r15"",""x93:CF"",""x102:OF"",""x101:rbx"",""x136:r10"",""x135:r12"",""_:r11""]";
"	;chose x117 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: arg1, arg2, x2, x79, x81, x3, x115, x117, x101, x136, x135";
"	; freeing, i.e. spilling x117, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x2(r8),x79(r13),x81(rcx),x99(rbp),x113(r9),x3(rdx),x115(rax),x117(r14),0x0(r15),x101(rbx),x136(r10),x135(r12),_(r11); clobs _,x119,0x0,x99,x113,x99,_,x102; will spare: x117 ";
"	mov [rsp + 0x08 * 8 ], r14; spilling x117 to mem";
"	seto r14b; spill OF x102 to reg (r14)";
"	dec r15; OF<-0x0, preserve CF 3";
"	adox r11, r9";
"	";
"";
"	; add:";
"	; r:x120,f:x121<-add(x119,x101,x115)";
"	; CF: ALIVE,OF: ALIVE";
"	adox rax, rbx";
"	";
"";
"	; add:";
"	; r:x144,f:x145<-add(0x0,x120,x135)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:r11";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:r8"",""x79:r13"",""x81:rcx"",""x99:rbp"",""x113:r9"",""x3:rdx"",""x93:CF"",""x102:r14b"",""x101:rbx"",""x136:r10"",""x135:r12"",""-0x1:r15"",""x121:OF"",""x144:rax""]";
"	;chose >>RANDOMLY<< r11 from candidates :r11[0].";
"	setc r11b; spill CF x93 to reg (r11)";
"	clc;";
"	adcx rax, r12";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:r8"",""x79:r13"",""x81:rcx"",""x99:rbp"",""x113:r9"",""x3:rdx"",""x93:r11b"",""x102:r14b"",""x101:rbx"",""x136:r10"",""x135:r12"",""-0x1:r15"",""x121:OF"",""x144:rax"",""x145:CF""]";
"	; freeing x113 (r9) no dependants anymore";
"	mov r9, 0xffffffffffffffff ; moving imm to reg";
"	;chose >>saved<< x144 from:x144, 0xffffffffffffffff[0] and candidates: x144, 0xffffffffffffffff";
"	xchg rdx, rax; x144, swapping with x3, which is currently in rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:r8"",""x79:r13"",""x81:rcx"",""x99:rbp"",""x3:rax"",""x93:r11b"",""x102:r14b"",""x101:rbx"",""x136:r10"",""x135:r12"",""-0x1:r15"",""x121:OF"",""x144:rdx"",""x145:CF"",""0xffffffffffffffff:r9""]";
"	; freeing x101 (rbx) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:r8"",""x79:r13"",""x81:rcx"",""x99:rbp"",""x3:rax"",""x93:r11b"",""x102:r14b"",""x136:r10"",""x135:r12"",""-0x1:r15"",""x121:OF"",""x144:rdx"",""x145:CF"",""0xffffffffffffffff:r9"",""x159:rbx""]";
"	; freeing x135 (r12) no dependants anymore";
"	;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:r8"",""x79:r13"",""x81:rcx"",""x99:rbp"",""x3:rax"",""x93:r11b"",""x102:r14b"",""x136:r10"",""-0x1:r15"",""x121:OF"",""x144:rdx"",""x145:CF"",""0xffffffffffffffff:r9"",""x159:rbx"",""x158:r12""]";
"	mulx rbx, r12, r9; x159, x158<- x144 * 0xffffffffffffffff";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:r8"",""x79:r13"",""x81:rcx"",""x99:rbp"",""x3:rax"",""x93:r11b"",""x102:r14b"",""x136:r10"",""-0x1:r15"",""x121:OF"",""x144:rdx"",""x145:CF"",""0xffffffffffffffff:r9"",""x159:rbx"",""x158:r12""]";
"	;chose -0x1 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: -0x1, 0xffffffffffffffff";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x2(r8),x79(r13),x81(rcx),x99(rbp),x3(rax),x93(r11b),x102(r14b),x136(r10),-0x1(r15),x144(rdx),0xffffffffffffffff(r9),x159(rbx),x158(r12); clobs x156,x157,x144,0xffffffff,0xffffffff; will spare: -0x1 ";
"	mov r15, 0xffffffff ; moving imm to reg";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:r8"",""x79:r13"",""x81:rcx"",""x99:rbp"",""x3:rax"",""x93:r11b"",""x102:r14b"",""x136:r10"",""x121:OF"",""x144:rdx"",""x145:CF"",""0xffffffffffffffff:r9"",""x159:rbx"",""x158:r12"",""0xffffffff:r15""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: 0xffffffffffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x2(r8),x79(r13),x81(rcx),x99(rbp),x3(rax),x93(r11b),x102(r14b),x136(r10),x144(rdx),0xffffffffffffffff(r9),x159(rbx),x158(r12),0xffffffff(r15); clobs x156,x157,x144,0xffffffff,0xffffffff,0xffffffff; will spare: 0xffffffffffffffff ";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:r8"",""x79:r13"",""x81:rcx"",""x99:rbp"",""x3:rax"",""x93:r11b"",""x102:r14b"",""x136:r10"",""x121:OF"",""x144:rdx"",""x145:CF"",""x159:rbx"",""x158:r12"",""0xffffffff:r15"",""x157:r9""]";
"	;chose x79 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: arg1, arg2, x2, x79, x81, x99, x3, x93, x102, x136, x159, x158";
"	; freeing, i.e. spilling x79, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x2(r8),x79(r13),x81(rcx),x99(rbp),x3(rax),x93(r11b),x102(r14b),x136(r10),x144(rdx),x159(rbx),x158(r12),0xffffffff(r15),x157(r9); clobs x156,x157,x144,0xffffffff,0xffffffff,0xffffffff,x157; will spare: x79 ";
"	mov [rsp + 0x08 * 9 ], r13; spilling x79 to mem";
"	;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:r8"",""x81:rcx"",""x99:rbp"",""x3:rax"",""x93:r11b"",""x102:r14b"",""x136:r10"",""x121:OF"",""x144:rdx"",""x145:CF"",""x159:rbx"",""x158:r12"",""0xffffffff:r15"",""x157:r9"",""x156:r13""]";
"	mulx r9, r13, r15; x157, x156<- x144 * 0xffffffff";
"	";
"";
"	; add:";
"	; r:x160,f:x161<-add(0x0,x159,x156)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:r8"",""x81:rcx"",""x99:rbp"",""x3:rax"",""x93:r11b"",""x102:r14b"",""x136:r10"",""x121:OF"",""x144:rdx"",""x145:CF"",""x158:r12"",""0xffffffff:r15"",""x157:r9"",""x156:r13"",""x160:rbx""]";
"	;chose 0xffffffff to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: 0xffffffff";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x2(r8),x81(rcx),x99(rbp),x3(rax),x93(r11b),x102(r14b),x136(r10),x144(rdx),x158(r12),0xffffffff(r15),x157(r9),x156(r13),x160(rbx); clobs x160,x161,0x0,x159,x156,x159,x121; will spare: 0xffffffff ";
"	seto r15b; spill OF x121 to reg (r15)";
"	;chose >>saved<< -0x1 from:0x0, -0x1[1] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:rdi"",""x2:r8"",""x81:rcx"",""x99:rbp"",""x3:rax"",""x93:r11b"",""x102:r14b"",""x136:r10"",""x121:r15b"",""x144:rdx"",""x145:CF"",""x158:r12"",""x157:r9"",""x156:r13"",""x160:rbx""]";
"	;chose arg1 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: arg1, arg2, x2, x81, x99, x3, x93, x102, x136, x144, x158, x157";
"	; freeing, i.e. spilling arg1, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(rdi),x2(r8),x81(rcx),x99(rbp),x3(rax),x93(r11b),x102(r14b),x136(r10),x121(r15b),x144(rdx),x158(r12),x157(r9),x156(r13),x160(rbx); clobs x160,x161,0x0,x159,x156,x159,x121,x121,-0x1; will spare: arg1 ";
"	mov [rsp + 0x08 * 0 ], rsi; spilling arg1 to mem";
"	mov rsi, -0x1 ; moving imm to reg";
"	inc rsi; OF<-0x0, preserve CF 2";
"	adox rbx, r13";
"	";
"";
"	; add:";
"	; r:x162,f:_<-add(x161,x157)";
"	; CF: ALIVE,OF: ALIVE";
"	adox r9, rsi";
"	";
"";
"	; add:";
"	; r:_,f:x164<-add(0x0,x144,x158)";
"	; CF: ALIVE,OF: KILLED";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x2:r8"",""x81:rcx"",""x99:rbp"",""x3:rax"",""x93:r11b"",""x102:r14b"",""x136:r10"",""x121:r15b"",""x144:rdx"",""x145:CF"",""x158:r12"",""x156:r13"",""x160:rbx"",""0x0:rsi"",""x161:OF"",""x162:r9""]";
"	; freeing x156 (r13) no dependants anymore";
"	mov r13,  rdx; _, copying x144 here, cause x144 is needed in a reg for other than _, namely all: , _--x164, x154--x155, size: 2";
"	dec rsi; OF<-0x0, preserve CF 3";
"	adox r13, r12";
"	;chose >>saved<< arg2[2] from:x2, arg2[2][1] and candidates: x2, arg2[2]";
"	; fr:r13";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x2:r8"",""x81:rcx"",""x99:rbp"",""x3:rax"",""x93:r11b"",""x102:r14b"",""x136:r10"",""x121:r15b"",""x144:rdx"",""x145:CF"",""x158:r12"",""x160:rbx"",""x162:r9"",""-0x1:rsi"",""x164:OF"",""arg2[2]:rdx""]";
"	;chose >>RANDOMLY<< r13 from candidates :r13[0].";
"	mov r13, rdx; preserving value of x144 into a new reg";
"	mov rdx, [rdi + 0x08 * 2 ]; saving arg2[2] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x2:r8"",""x81:rcx"",""x99:rbp"",""x3:rax"",""x93:r11b"",""x102:r14b"",""x136:r10"",""x121:r15b"",""x144:r13"",""x145:CF"",""x158:r12"",""x160:rbx"",""x162:r9"",""-0x1:rsi"",""x164:OF"",""arg2[2]:rdx""]";
"	; freeing x158 (r12) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x2:r8"",""x81:rcx"",""x99:rbp"",""x3:rax"",""x93:r11b"",""x102:r14b"",""x136:r10"",""x121:r15b"",""x144:r13"",""x145:CF"",""x160:rbx"",""x162:r9"",""-0x1:rsi"",""x164:OF"",""arg2[2]:rdx"",""x87:r12""]";
"	;chose -0x1 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg2(rdi),x2(r8),x81(rcx),x99(rbp),x3(rax),x93(r11b),x102(r14b),x136(r10),x121(r15b),x144(r13),x160(rbx),x162(r9),-0x1(rsi),arg2[2](rdx),x87(r12); clobs x86,x87,x2,arg2[2],arg2,x144,x87; will spare: -0x1 ";
"	;-- allocation: [""arg2:rdi"",""x2:r8"",""x81:rcx"",""x99:rbp"",""x3:rax"",""x93:r11b"",""x102:r14b"",""x136:r10"",""x121:r15b"",""x144:r13"",""x145:CF"",""x160:rbx"",""x162:r9"",""x164:OF"",""arg2[2]:rdx"",""x87:r12"",""x86:rsi""]";
"	mulx r12, rsi, r8; x87, x86<- x2 * arg2[2]";
"	;chose >>saved<< x3 from:x3, arg2[1][0] and candidates: x3, arg2[1]";
"	mov rdx, rax; x3 to rdx";
"	; fr:rax";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x2:r8"",""x81:rcx"",""x99:rbp"",""x3:rdx"",""x93:r11b"",""x102:r14b"",""x136:r10"",""x121:r15b"",""x144:r13"",""x145:CF"",""x160:rbx"",""x162:r9"",""x164:OF"",""x87:r12"",""x86:rsi""]";
"	;chose >>RANDOMLY<< rax from candidates :rax[0].";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x2:r8"",""x81:rcx"",""x99:rbp"",""x3:rdx"",""x93:r11b"",""x102:r14b"",""x136:r10"",""x121:r15b"",""x144:r13"",""x145:CF"",""x160:rbx"",""x162:r9"",""x164:OF"",""x87:r12"",""x86:rsi"",""x134:rax""]";
"	;chose x160 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: x2, x81, x99, x93, x102, x136, x121, x144, x160, x162, x87, x86";
"	; freeing, i.e. spilling x160, because I am out of ideas";
"	; allocs: arg2(rdi),x2(r8),x81(rcx),x99(rbp),x3(rdx),x93(r11b),x102(r14b),x136(r10),x121(r15b),x144(r13),x160(rbx),x162(r9),x87(r12),x86(rsi),x134(rax); clobs x133,x134,x3,arg2[1],arg2; will spare: x160 ";
"	mov [rsp + 0x08 * 10 ], rbx; spilling x160 to mem";
"	;-- allocation: [""arg2:rdi"",""x2:r8"",""x81:rcx"",""x99:rbp"",""x3:rdx"",""x93:r11b"",""x102:r14b"",""x136:r10"",""x121:r15b"",""x144:r13"",""x145:CF"",""x162:r9"",""x164:OF"",""x87:r12"",""x86:rsi"",""x134:rax"",""x133:rbx""]";
"	mulx rax, rbx, [rdi + 0x08 * 1 ]; x134, x133<- x3 * arg2[1]";
"	";
"";
"	; add:";
"	; r:x94,f:x95<-add(x93,x89,x86)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x2:r8"",""x81:rcx"",""x99:rbp"",""x3:rdx"",""x93:r11b"",""x102:r14b"",""x136:r10"",""x121:r15b"",""x144:r13"",""x145:CF"",""x162:r9"",""x164:OF"",""x87:r12"",""x134:rax"",""x133:rbx"",""x94:rsi""]";
"	;chose x134 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: arg2, x2, x81, x99, x3, x102, x136, x121, x144, x162, x87, x134, x133";
"	; freeing, i.e. spilling x134, because I am out of ideas";
"	; allocs: arg2(rdi),x2(r8),x81(rcx),x99(rbp),x3(rdx),x93(r11b),x102(r14b),x136(r10),x121(r15b),x144(r13),x162(r9),x87(r12),x134(rax),x133(rbx),x94(rsi); clobs x94,x95,x93,x89,x86,x86,x164; will spare: x134 ";
"	mov [rsp + 0x08 * 11 ], rax; spilling x134 to mem";
"	seto al; spill OF x164 to reg (rax)";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x2:r8"",""x81:rcx"",""x99:rbp"",""x3:rdx"",""x93:r11b"",""x102:r14b"",""x136:r10"",""x121:r15b"",""x144:r13"",""x145:CF"",""x162:r9"",""x164:al"",""x87:r12"",""x133:rbx"",""x94:rsi""]";
"	;chose x162 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: arg2, x2, x81, x99, x3, x102, x136, x121, x144, x162, x87, x133";
"	; freeing, i.e. spilling x162, because I am out of ideas";
"	; allocs: arg2(rdi),x2(r8),x81(rcx),x99(rbp),x3(rdx),x93(r11b),x102(r14b),x136(r10),x121(r15b),x144(r13),x162(r9),x164(al),x87(r12),x133(rbx),x94(rsi); clobs x94,x95,x93,x89,x86,x86,x164,x164,0x0; will spare: x162 ";
"	mov [rsp + 0x08 * 12 ], r9; spilling x162 to mem";
"	mov r9, 0x0 ; moving imm to reg";
"	dec r9; OF<-0x0, preserve CF 3";
"	movzx r11, r11b";
"	adox r11, r9; loading flag";
"	adox rsi, [rsp + 0x08 * 7 ]";
"	";
"";
"	; add:";
"	; r:x103,f:x104<-add(x102,x79,x94)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x2:r8"",""x81:rcx"",""x99:rbp"",""x3:rdx"",""x93:r11b"",""x102:r14b"",""x136:r10"",""x121:r15b"",""x144:r13"",""x145:CF"",""x164:al"",""x87:r12"",""x133:rbx"",""-0x1:r9"",""x95:OF"",""x103:rsi""]";
"	; freeing x93 (r11b) no dependants anymore";
"	setc r11b; spill CF x145 to reg (r11)";
"	clc;";
"	movzx r14, r14b";
"	adcx r14, r9; loading flag";
"	adcx rsi, [rsp + 0x08 * 9 ]";
"	";
"";
"	; add:";
"	; r:x137,f:x138<-add(0x0,x136,x133)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x2:r8"",""x81:rcx"",""x99:rbp"",""x3:rdx"",""x102:r14b"",""x121:r15b"",""x144:r13"",""x145:r11b"",""x164:al"",""x87:r12"",""x133:rbx"",""-0x1:r9"",""x95:OF"",""x103:rsi"",""x104:CF"",""x137:r10""]";
"	; freeing x102 (r14b) no dependants anymore";
"	setc r14b; spill CF x104 to reg (r14)";
"	clc;";
"	adcx r10, rbx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x2:r8"",""x81:rcx"",""x99:rbp"",""x3:rdx"",""x121:r15b"",""x144:r13"",""x145:r11b"",""x164:al"",""x87:r12"",""x133:rbx"",""-0x1:r9"",""x95:OF"",""x103:rsi"",""x104:r14b"",""x137:r10"",""x138:CF""]";
"	; freeing x133 (rbx) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x2:r8"",""x81:rcx"",""x99:rbp"",""x3:rdx"",""x121:r15b"",""x144:r13"",""x145:r11b"",""x164:al"",""x87:r12"",""-0x1:r9"",""x95:OF"",""x103:rsi"",""x104:r14b"",""x137:r10"",""x138:CF"",""x132:rbx""]";
"	;chose -0x1 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg2(rdi),x2(r8),x81(rcx),x99(rbp),x3(rdx),x121(r15b),x144(r13),x145(r11b),x164(al),x87(r12),-0x1(r9),x103(rsi),x104(r14b),x137(r10),x132(rbx); clobs x131,x132,x3,arg2[2],arg2,x132; will spare: -0x1 ";
"	;-- allocation: [""arg2:rdi"",""x2:r8"",""x81:rcx"",""x99:rbp"",""x3:rdx"",""x121:r15b"",""x144:r13"",""x145:r11b"",""x164:al"",""x87:r12"",""x95:OF"",""x103:rsi"",""x104:r14b"",""x137:r10"",""x138:CF"",""x132:rbx"",""x131:r9""]";
"	mulx rbx, r9, [rdi + 0x08 * 2 ]; x132, x131<- x3 * arg2[2]";
"	";
"";
"	; add:";
"	; r:x122,f:x123<-add(x121,x103,x117)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x2:r8"",""x81:rcx"",""x99:rbp"",""x3:rdx"",""x121:r15b"",""x144:r13"",""x145:r11b"",""x164:al"",""x87:r12"",""x95:OF"",""x104:r14b"",""x137:r10"",""x138:CF"",""x132:rbx"",""x131:r9"",""x122:rsi""]";
"	;chose x104 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: arg2, x2, x81, x99, x3, x144, x145, x164, x87, x104, x137, x132, x131";
"	; freeing, i.e. spilling x104, because I am out of ideas";
"	; allocs: arg2(rdi),x2(r8),x81(rcx),x99(rbp),x3(rdx),x121(r15b),x144(r13),x145(r11b),x164(al),x87(r12),x104(r14b),x137(r10),x132(rbx),x131(r9),x122(rsi); clobs x122,x123,x121,x103,x117,x103,x95; will spare: x104 ";
"	mov byte [rsp + 0x08 * 13 ], r14b; spilling byte x104 to mem";
"	seto r14b; spill OF x95 to reg (r14)";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x2:r8"",""x81:rcx"",""x99:rbp"",""x3:rdx"",""x121:r15b"",""x144:r13"",""x145:r11b"",""x164:al"",""x87:r12"",""x95:r14b"",""x137:r10"",""x138:CF"",""x132:rbx"",""x131:r9"",""x122:rsi""]";
"	;chose x99 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: arg2, x2, x81, x99, x3, x144, x145, x164, x87, x137, x132, x131";
"	; freeing, i.e. spilling x99, because I am out of ideas";
"	; allocs: arg2(rdi),x2(r8),x81(rcx),x99(rbp),x3(rdx),x121(r15b),x144(r13),x145(r11b),x164(al),x87(r12),x95(r14b),x137(r10),x132(rbx),x131(r9),x122(rsi); clobs x122,x123,x121,x103,x117,x103,x95,x95,0x0; will spare: x99 ";
"	mov [rsp + 0x08 * 14 ], rbp; spilling x99 to mem";
"	mov rbp, 0x0 ; moving imm to reg";
"	dec rbp; OF<-0x0, preserve CF 3";
"	movzx r15, r15b";
"	adox r15, rbp; loading flag";
"	adox rsi, [rsp + 0x08 * 8 ]";
"	";
"";
"	; add:";
"	; r:x146,f:x147<-add(x145,x122,x137)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x2:r8"",""x81:rcx"",""x3:rdx"",""x121:r15b"",""x144:r13"",""x145:r11b"",""x164:al"",""x87:r12"",""x95:r14b"",""x137:r10"",""x138:CF"",""x132:rbx"",""x131:r9"",""-0x1:rbp"",""x123:OF"",""x146:rsi""]";
"	; freeing x121 (r15b) no dependants anymore";
"	seto r15b; spill OF x123 to reg (r15)";
"	inc rbp; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x2:r8"",""x81:rcx"",""x3:rdx"",""x144:r13"",""x145:r11b"",""x164:al"",""x87:r12"",""x95:r14b"",""x137:r10"",""x138:CF"",""x132:rbx"",""x131:r9"",""x123:r15b"",""x146:rsi"",""0x0:rbp""]";
"	; freeing 0x0 (rbp, since all are neeed, but this one is just an immediate value.";
"	mov rbp, -0x1 ; moving imm to reg";
"	movzx r11, r11b";
"	adox r11, rbp; loading flag";
"	adox rsi, r10";
"	;chose >>saved<< arg2[3] from:x2, arg2[3][1] and candidates: x2, arg2[3]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x2:r8"",""x81:rcx"",""x3:rdx"",""x144:r13"",""x145:r11b"",""x164:al"",""x87:r12"",""x95:r14b"",""x137:r10"",""x138:CF"",""x132:rbx"",""x131:r9"",""x123:r15b"",""x146:rsi"",""-0x1:rbp"",""x147:OF"",""arg2[3]:rdx""]";
"	; freeing x145 (r11b) no dependants anymore";
"	mov r11, rdx; preserving value of x3 into a new reg";
"	mov rdx, [rdi + 0x08 * 3 ]; saving arg2[3] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x81:rcx"",""x3:r11"",""x144:r13"",""x164:al"",""x87:r12"",""x95:r14b"",""x137:r10"",""x138:CF"",""x132:rbx"",""x131:r9"",""x123:r15b"",""x146:rsi"",""-0x1:rbp"",""x147:OF"",""arg2[3]:rdx"",""x85:r8""]";
"	; freeing x137 (r10) no dependants anymore";
"	;-- allocation: [""arg2:rdi"",""x81:rcx"",""x3:r11"",""x144:r13"",""x164:al"",""x87:r12"",""x95:r14b"",""x138:CF"",""x132:rbx"",""x131:r9"",""x123:r15b"",""x146:rsi"",""-0x1:rbp"",""x147:OF"",""arg2[3]:rdx"",""x85:r8"",""x84:r10""]";
"	mulx r8, r10, r8; x85, x84<- x2 * arg2[3]";
"	";
"";
"	; add:";
"	; r:x165,f:x166<-add(x164,x146,x160)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x81:rcx"",""x3:r11"",""x144:r13"",""x164:al"",""x87:r12"",""x95:r14b"",""x138:CF"",""x132:rbx"",""x131:r9"",""x123:r15b"",""-0x1:rbp"",""x147:OF"",""arg2[3]:rdx"",""x85:r8"",""x84:r10"",""x165:rsi""]";
"	;chose arg2[3] to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: -0x1, arg2[3]";
"	; freeing, i.e. spilling arg2[3], because I am out of ideas";
"	; allocs: arg2(rdi),x81(rcx),x3(r11),x144(r13),x164(al),x87(r12),x95(r14b),x132(rbx),x131(r9),x123(r15b),-0x1(rbp),arg2[3](rdx),x85(r8),x84(r10),x165(rsi); clobs x165,x166,x164,x146,x160,x146,x147; will spare: arg2[3] ";
"	seto dl; spill OF x147 to reg (rdx)";
"	inc rbp; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x81:rcx"",""x3:r11"",""x144:r13"",""x164:al"",""x87:r12"",""x95:r14b"",""x138:CF"",""x132:rbx"",""x131:r9"",""x123:r15b"",""x147:dl"",""x85:r8"",""x84:r10"",""x165:rsi"",""0x0:rbp""]";
"	; freeing 0x0 (rbp, since all are neeed, but this one is just an immediate value.";
"	mov rbp, -0x1 ; moving imm to reg";
"	movzx rax, al";
"	adox rax, rbp; loading flag";
"	adox rsi, [rsp + 0x08 * 10 ]";
"	";
"";
"	; sub:";
"	; r:x174,f:x175<-sub(0x0,x165,0xffffffffffffffff)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x81:rcx"",""x3:r11"",""x144:r13"",""x164:al"",""x87:r12"",""x95:r14b"",""x138:CF"",""x132:rbx"",""x131:r9"",""x123:r15b"",""x147:dl"",""x85:r8"",""x84:r10"",""x165:rsi"",""-0x1:rbp"",""x166:OF""]";
"	; freeing x164 (al) no dependants anymore";
"	setc al; spill CF x138 to reg (rax)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x81:rcx"",""x3:r11"",""x144:r13"",""x87:r12"",""x95:r14b"",""x138:al"",""x132:rbx"",""x131:r9"",""x123:r15b"",""x147:dl"",""x85:r8"",""x84:r10"",""x165:rsi"",""-0x1:rbp"",""x166:OF""]";
"	;chose -0x1 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg2(rdi),x81(rcx),x3(r11),x144(r13),x87(r12),x95(r14b),x138(al),x132(rbx),x131(r9),x123(r15b),x147(dl),x85(r8),x84(r10),x165(rsi),-0x1(rbp); clobs x174,x175,0x0,x165,0xffffffffffffffff,x138,x138,x166; will spare: -0x1 ";
"	seto bpl; spill OF x166 to reg (rbp)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x81:rcx"",""x3:r11"",""x144:r13"",""x87:r12"",""x95:r14b"",""x138:al"",""x132:rbx"",""x131:r9"",""x123:r15b"",""x147:dl"",""x85:r8"",""x84:r10"",""x165:rsi"",""x166:bpl""]";
"	;chose x123 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: arg2, x81, x3, x144, x87, x95, x132, x131, x123, x147, x85, x84";
"	; freeing, i.e. spilling x123, because I am out of ideas";
"	; allocs: arg2(rdi),x81(rcx),x3(r11),x144(r13),x87(r12),x95(r14b),x138(al),x132(rbx),x131(r9),x123(r15b),x147(dl),x85(r8),x84(r10),x165(rsi),x166(bpl); clobs x174,x175,0x0,x165,0xffffffffffffffff,x138,x138,x166,x166,x165; will spare: x123 ";
"	mov byte [rsp + 0x08 * 15 ], r15b; spilling byte x123 to mem";
"	mov r15,  rsi; x174, copying x165 here, cause x165 is needed in a reg for other than x174, namely all: , x174--x175, x184, size: 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x81:rcx"",""x3:r11"",""x144:r13"",""x87:r12"",""x95:r14b"",""x138:al"",""x132:rbx"",""x131:r9"",""x147:dl"",""x85:r8"",""x84:r10"",""x165:rsi"",""x166:bpl"",""x174:r15""]";
"	;chose x132 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: arg2, x81, x3, x144, x87, x95, x132, x131, x147, x85, x84";
"	; freeing, i.e. spilling x132, because I am out of ideas";
"	; allocs: arg2(rdi),x81(rcx),x3(r11),x144(r13),x87(r12),x95(r14b),x138(al),x132(rbx),x131(r9),x147(dl),x85(r8),x84(r10),x165(rsi),x166(bpl),x174(r15); clobs x174,x175,0x0,x165,0xffffffffffffffff,x138,x138,x166,x166,x165,x174,0xffffffffffffffff; will spare: x132 ";
"	mov [rsp + 0x08 * 16 ], rbx; spilling x132 to mem";
"	mov rbx, 0xffffffffffffffff ; moving imm to reg";
"	sub r15, rbx";
"	;chose >>saved<< arg2[3] from:x3, arg2[3][1] and candidates: x3, arg2[3]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x81:rcx"",""x3:r11"",""x144:r13"",""x87:r12"",""x95:r14b"",""x138:al"",""x131:r9"",""x147:dl"",""x85:r8"",""x84:r10"",""x165:rsi"",""x166:bpl"",""x174:r15"",""0xffffffffffffffff:rbx"",""x175:CF"",""arg2[3]:rdx""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: 0xffffffffffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: arg2(rdi),x81(rcx),x3(r11),x144(r13),x87(r12),x95(r14b),x138(al),x131(r9),x147(dl),x85(r8),x84(r10),x165(rsi),x166(bpl),x174(r15),0xffffffffffffffff(rbx),arg2[3](rdx); clobs x129,x130,x3,arg2[3],arg2,x147; will spare: 0xffffffffffffffff ";
"	mov bl, dl; preserving value of x147 into a new reg";
"	mov rdx, [rdi + 0x08 * 3 ]; saving arg2[3] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x81:rcx"",""x144:r13"",""x87:r12"",""x95:r14b"",""x138:al"",""x131:r9"",""x147:bl"",""x85:r8"",""x84:r10"",""x165:rsi"",""x166:bpl"",""x174:r15"",""x175:CF"",""arg2[3]:rdx"",""x130:r11""]";
"	;chose x166 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: x81, x144, x87, x95, x138, x131, x85, x84, x165, x166, x174";
"	; freeing, i.e. spilling x166, because I am out of ideas";
"	; allocs: arg2(rdi),x81(rcx),x144(r13),x87(r12),x95(r14b),x138(al),x131(r9),x147(bl),x85(r8),x84(r10),x165(rsi),x166(bpl),x174(r15),arg2[3](rdx),x130(r11); clobs x129,x130,x3,arg2[3],arg2,x147,x147; will spare: x166 ";
"	mov byte [rsp + 0x08 * 17 ], bpl; spilling byte x166 to mem";
"	;-- allocation: [""arg2:rdi"",""x81:rcx"",""x144:r13"",""x87:r12"",""x95:r14b"",""x138:al"",""x131:r9"",""x147:bl"",""x85:r8"",""x84:r10"",""x165:rsi"",""x174:r15"",""x175:CF"",""arg2[3]:rdx"",""x130:r11"",""x129:rbp""]";
"	mulx r11, rbp, r11; x130, x129<- x3 * arg2[3]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x81:rcx"",""x144:r13"",""x87:r12"",""x95:r14b"",""x138:al"",""x131:r9"",""x147:bl"",""x85:r8"",""x84:r10"",""x165:rsi"",""x174:r15"",""x175:CF"",""arg2[3]:rdx"",""x130:r11"",""x129:rbp""]";
"	;chose arg2[3] to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: arg2[3]";
"	; freeing, i.e. spilling arg2[3], because I am out of ideas";
"	; allocs: arg2(rdi),x81(rcx),x144(r13),x87(r12),x95(r14b),x138(al),x131(r9),x147(bl),x85(r8),x84(r10),x165(rsi),x174(r15),arg2[3](rdx),x130(r11),x129(rbp); clobs x109,x110,x99,0xffffffff00000001,0xffffffff00000001; will spare: arg2[3] ";
"	mov rdx, 0xffffffff00000001 ; moving imm to reg";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x81:rcx"",""x144:r13"",""x87:r12"",""x95:r14b"",""x138:al"",""x131:r9"",""x147:bl"",""x85:r8"",""x84:r10"",""x165:rsi"",""x174:r15"",""x175:CF"",""x130:r11"",""x129:rbp"",""0xffffffff00000001:rdx""]";
"	;chose x129 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: arg2, x81, x144, x87, x95, x138, x131, x147, x85, x84, x165, x174, x130, x129";
"	; freeing, i.e. spilling x129, because I am out of ideas";
"	; allocs: arg2(rdi),x81(rcx),x144(r13),x87(r12),x95(r14b),x138(al),x131(r9),x147(bl),x85(r8),x84(r10),x165(rsi),x174(r15),x130(r11),x129(rbp),0xffffffff00000001(rdx); clobs x109,x110,x99,0xffffffff00000001,0xffffffff00000001,0xffffffff00000001; will spare: x129 ";
"	mov [rsp + 0x08 * 18 ], rbp; spilling x129 to mem";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg2:rdi"",""x81:rcx"",""x144:r13"",""x87:r12"",""x95:r14b"",""x138:al"",""x131:r9"",""x147:bl"",""x85:r8"",""x84:r10"",""x165:rsi"",""x174:r15"",""x175:CF"",""x130:r11"",""0xffffffff00000001:rdx"",""x110:rbp""]";
"	;chose arg2 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: arg2, x81, x144, x87, x95, x138, x131, x147, x85, x84, x165, x174, x130";
"	; freeing, i.e. spilling arg2, because I am out of ideas";
"	; allocs: arg2(rdi),x81(rcx),x144(r13),x87(r12),x95(r14b),x138(al),x131(r9),x147(bl),x85(r8),x84(r10),x165(rsi),x174(r15),x130(r11),0xffffffff00000001(rdx),x110(rbp); clobs x109,x110,x99,0xffffffff00000001,0xffffffff00000001,0xffffffff00000001,x110; will spare: arg2 ";
"	mov [rsp + 0x08 * 5 ], rdi; spilling arg2 to mem";
"	;-- allocation: [""x81:rcx"",""x144:r13"",""x87:r12"",""x95:r14b"",""x138:al"",""x131:r9"",""x147:bl"",""x85:r8"",""x84:r10"",""x165:rsi"",""x174:r15"",""x175:CF"",""x130:r11"",""0xffffffff00000001:rdx"",""x110:rbp"",""x109:rdi""]";
"	mulx rbp, rdi, [rsp + 0x08 * 14 ]; x110, x109<- x99 * 0xffffffff00000001";
"	";
"";
"	; add:";
"	; r:x139,f:x140<-add(x138,x134,x131)";
"	; CF: ALIVE,OF: KILLED";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x81:rcx"",""x144:r13"",""x87:r12"",""x95:r14b"",""x138:al"",""x147:bl"",""x85:r8"",""x84:r10"",""x165:rsi"",""x174:r15"",""x175:CF"",""x130:r11"",""0xffffffff00000001:rdx"",""x110:rbp"",""x109:rdi"",""x139:r9""]";
"	;chose 0xffffffff00000001 to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: 0xffffffff00000001";
"	; freeing, i.e. spilling 0xffffffff00000001, because I am out of ideas";
"	; allocs: x81(rcx),x144(r13),x87(r12),x95(r14b),x138(al),x147(bl),x85(r8),x84(r10),x165(rsi),x174(r15),x130(r11),0xffffffff00000001(rdx),x110(rbp),x109(rdi),x139(r9); clobs x139,x140,x138,x134,x131,x131,0x0; will spare: 0xffffffff00000001 ";
"	mov rdx, 0x0 ; moving imm to reg";
"	dec rdx; OF<-0x0, preserve CF 3";
"	movzx rax, al";
"	adox rax, rdx; loading flag";
"	adox r9, [rsp + 0x08 * 11 ]";
"	";
"";
"	; add:";
"	; r:x96,f:x97<-add(x95,x87,x84)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x81:rcx"",""x144:r13"",""x95:r14b"",""x138:al"",""x147:bl"",""x85:r8"",""x84:r10"",""x165:rsi"",""x174:r15"",""x175:CF"",""x130:r11"",""x110:rbp"",""x109:rdi"",""x139:r9"",""-0x1:rdx"",""x140:OF"",""x96:r12""]";
"	; freeing x138 (al) no dependants anymore";
"	setc al; spill CF x175 to reg (rax)";
"	clc;";
"	movzx r14, r14b";
"	adcx r14, rdx; loading flag";
"	adcx r12, r10";
"	";
"";
"	; add:";
"	; r:x105,f:x106<-add(x104,x81,x96)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x144:r13"",""x95:r14b"",""x147:bl"",""x85:r8"",""x84:r10"",""x165:rsi"",""x174:r15"",""x175:al"",""x130:r11"",""x110:rbp"",""x109:rdi"",""x139:r9"",""-0x1:rdx"",""x140:OF"",""x96:r12"",""x97:CF"",""x105:rcx""]";
"	; freeing x95 (r14b) no dependants anymore";
"	seto r14b; spill OF x140 to reg (r14)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x144:r13"",""x147:bl"",""x85:r8"",""x84:r10"",""x165:rsi"",""x174:r15"",""x175:al"",""x130:r11"",""x110:rbp"",""x109:rdi"",""x139:r9"",""-0x1:rdx"",""x140:r14b"",""x96:r12"",""x97:CF"",""x105:rcx""]";
"	; freeing x84 (r10) no dependants anymore";
"	movzx r10, byte [rsp + 0x08 * 13 ]; load byte memx104 to register64";
"	inc rdx; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x144:r13"",""x104:r10"",""x147:bl"",""x85:r8"",""x165:rsi"",""x174:r15"",""x175:al"",""x130:r11"",""x110:rbp"",""x109:rdi"",""x139:r9"",""x140:r14b"",""x96:r12"",""x97:CF"",""x105:rcx"",""0x0:rdx""]";
"	; freeing 0x0 (rdx, since all are neeed, but this one is just an immediate value.";
"	mov rdx, -0x1 ; moving imm to reg";
"	adox r10, rdx; loading flag";
"	adox rcx, r12";
"	";
"";
"	; add:";
"	; r:x124,f:x125<-add(x123,x105,x109)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x144:r13"",""x104:r10"",""x147:bl"",""x85:r8"",""x165:rsi"",""x174:r15"",""x175:al"",""x130:r11"",""x110:rbp"",""x109:rdi"",""x139:r9"",""x140:r14b"",""x96:r12"",""x97:CF"",""-0x1:rdx"",""x106:OF"",""x124:rcx""]";
"	; freeing x104 (r10) no dependants anymore";
"	seto r10b; spill OF x106 to reg (r10)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x144:r13"",""x147:bl"",""x85:r8"",""x165:rsi"",""x174:r15"",""x175:al"",""x130:r11"",""x110:rbp"",""x109:rdi"",""x139:r9"",""x140:r14b"",""x96:r12"",""x97:CF"",""-0x1:rdx"",""x106:r10b"",""x124:rcx""]";
"	; freeing x96 (r12) no dependants anymore";
"	movzx r12, byte [rsp + 0x08 * 15 ]; load byte memx123 to register64";
"	inc rdx; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x144:r13"",""x123:r12"",""x147:bl"",""x85:r8"",""x165:rsi"",""x174:r15"",""x175:al"",""x130:r11"",""x110:rbp"",""x109:rdi"",""x139:r9"",""x140:r14b"",""x97:CF"",""x106:r10b"",""x124:rcx"",""0x0:rdx""]";
"	; freeing 0x0 (rdx, since all are neeed, but this one is just an immediate value.";
"	mov rdx, -0x1 ; moving imm to reg";
"	adox r12, rdx; loading flag";
"	adox rcx, rdi";
"	";
"";
"	; add:";
"	; r:x148,f:x149<-add(x147,x124,x139)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x144:r13"",""x123:r12"",""x147:bl"",""x85:r8"",""x165:rsi"",""x174:r15"",""x175:al"",""x130:r11"",""x110:rbp"",""x109:rdi"",""x139:r9"",""x140:r14b"",""x97:CF"",""x106:r10b"",""-0x1:rdx"",""x125:OF"",""x148:rcx""]";
"	; freeing x123 (r12) no dependants anymore";
"	seto r12b; spill OF x125 to reg (r12)";
"	inc rdx; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x144:r13"",""x147:bl"",""x85:r8"",""x165:rsi"",""x174:r15"",""x175:al"",""x130:r11"",""x110:rbp"",""x109:rdi"",""x139:r9"",""x140:r14b"",""x97:CF"",""x106:r10b"",""x125:r12b"",""x148:rcx"",""0x0:rdx""]";
"	; freeing x109 (rdi) no dependants anymore";
"	mov rdi, -0x1 ; moving imm to reg";
"	movzx rbx, bl";
"	adox rbx, rdi; loading flag";
"	adox rcx, r9";
"	";
"";
"	; add:";
"	; r:x98,f:_<-add(x97,x85)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx r8, rdx";
"	";
"";
"	; add:";
"	; r:x167,f:x168<-add(x166,x148,x162)";
"	; CF: KILLED,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x144:r13"",""x147:bl"",""x165:rsi"",""x174:r15"",""x175:al"",""x130:r11"",""x110:rbp"",""x139:r9"",""x140:r14b"",""x97:CF"",""x106:r10b"",""x125:r12b"",""0x0:rdx"",""-0x1:rdi"",""x149:OF"",""x98:r8"",""x167:rcx""]";
"	; freeing x147 (bl) no dependants anymore";
"	movzx rbx, byte [rsp + 0x08 * 17 ]; load byte memx166 to register64";
"	clc;";
"	adcx rbx, rdi; loading flag";
"	adcx rcx, [rsp + 0x08 * 12 ]";
"	";
"";
"	; add:";
"	; r:x107,f:x108<-add(x106,x83,x98)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x144:r13"",""x165:rsi"",""x166:rbx"",""x174:r15"",""x175:al"",""x130:r11"",""x110:rbp"",""x139:r9"",""x140:r14b"",""x106:r10b"",""x125:r12b"",""0x0:rdx"",""-0x1:rdi"",""x149:OF"",""x167:rcx"",""x168:CF"",""x107:r8""]";
"	; freeing x166 (rbx) no dependants anymore";
"	seto bl; spill OF x149 to reg (rbx)";
"	inc rdi; OF<-0x0, preserve CF 1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x144:r13"",""x165:rsi"",""x174:r15"",""x175:al"",""x130:r11"",""x110:rbp"",""x139:r9"",""x140:r14b"",""x106:r10b"",""x125:r12b"",""0x0:rdi"",""x149:bl"",""x167:rcx"",""x168:CF"",""x107:r8""]";
"	; freeing x139 (r9) no dependants anymore";
"	mov r9, -0x1 ; moving imm to reg";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x144:r13"",""x165:rsi"",""x174:r15"",""x175:al"",""x130:r11"",""x110:rbp"",""x140:r14b"",""x106:r10b"",""x125:r12b"",""0x0:rdi"",""x149:bl"",""x167:rcx"",""x168:CF"",""x107:r8"",""-0x1:r9""]";
"	; freeing 0x0 (rdi, since all are neeed, but this one is just an immediate value.";
"	movzx rdi, byte [rsp + 0x08 * 6 ]; load byte memx83 to register64";
"	movzx r10, r10b";
"	adox r10, r9; loading flag";
"	adox r8, rdi";
"	";
"";
"	; add:";
"	; r:x126,f:x127<-add(x125,x107,x110)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x83:rdi"",""x144:r13"",""x165:rsi"",""x174:r15"",""x175:al"",""x130:r11"",""x110:rbp"",""x140:r14b"",""x106:r10b"",""x125:r12b"",""x149:bl"",""x167:rcx"",""x168:CF"",""-0x1:r9"",""x108:OF"",""x126:r8""]";
"	; freeing x83 (rdi) no dependants anymore";
"	seto dil; spill OF x108 to reg (rdi)";
"	inc r9; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x144:r13"",""x165:rsi"",""x174:r15"",""x175:al"",""x130:r11"",""x110:rbp"",""x140:r14b"",""x106:r10b"",""x125:r12b"",""x149:bl"",""x167:rcx"",""x168:CF"",""x108:dil"",""x126:r8"",""0x0:r9""]";
"	; freeing x106 (r10b) no dependants anymore";
"	mov r10, -0x1 ; moving imm to reg";
"	movzx r12, r12b";
"	adox r12, r10; loading flag";
"	adox r8, rbp";
"	";
"";
"	; add:";
"	; r:x128,f:_<-add(x127,x108)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x144:r13"",""x165:rsi"",""x174:r15"",""x175:al"",""x130:r11"",""x110:rbp"",""x140:r14b"",""x125:r12b"",""x149:bl"",""x167:rcx"",""x168:CF"",""x108:dil"",""x126:r8"",""0x0:r9"",""-0x1:r10"",""x127:OF""]";
"	; freeing x110 (rbp) no dependants anymore";
"	movzx rbp,  dil; x128, copying x108 here, cause x108 is needed in a reg for other than x128, namely all: , x128, size: 1";
"	adox rbp, r9";
"	";
"";
"	; sub:";
"	; r:x176,f:x177<-sub(x175,x167,0xffffffff)";
"	; CF: ALIVE,OF: KILLED";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x144:r13"",""x165:rsi"",""x174:r15"",""x175:al"",""x130:r11"",""x140:r14b"",""x125:r12b"",""x149:bl"",""x167:rcx"",""x168:CF"",""x108:dil"",""x126:r8"",""0x0:r9"",""-0x1:r10"",""x127:OF"",""x128:rbp""]";
"	; freeing x125 (r12b) no dependants anymore";
"	setc r12b; spill CF x168 to reg (r12)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x144:r13"",""x165:rsi"",""x174:r15"",""x175:al"",""x130:r11"",""x140:r14b"",""x149:bl"",""x167:rcx"",""x168:r12b"",""x108:dil"",""x126:r8"",""0x0:r9"",""-0x1:r10"",""x127:OF"",""x128:rbp""]";
"	; freeing x108 (dil) no dependants anymore";
"	movzx rdi,  al; x175, copying x175 here, cause x175 is needed in a reg for other than x175, namely all: , x176--x177, size: 1";
"	add rdi, -0x1";
"	; fr:rax";
"	; allocatedR: ;-- allocation: [""x144:r13"",""x165:rsi"",""x174:r15"",""x130:r11"",""x140:r14b"",""x149:bl"",""x167:rcx"",""x168:r12b"",""x126:r8"",""0x0:r9"",""-0x1:r10"",""x127:OF"",""x128:rbp"",""x177:CF""]";
"	;chose >>RANDOMLY<< rax from candidates :rax[0].";
"	mov rax,  rcx; x176, copying x167 here, cause x167 is needed in a reg for other than x176, namely all: , x176--x177, x185, size: 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x144:r13"",""x165:rsi"",""x174:r15"",""x130:r11"",""x140:r14b"",""x149:bl"",""x167:rcx"",""x168:r12b"",""x126:r8"",""0x0:r9"",""-0x1:r10"",""x127:OF"",""x128:rbp"",""x177:CF"",""x176:rax""]";
"	; freeing 0x0 (r9, since all are neeed, but this one is just an immediate value.";
"	mov r9, 0xffffffff ; moving imm to reg";
"	sbb rax, r9";
"	";
"";
"	; add:";
"	; r:x141,f:x142<-add(x140,x132,x129)";
"	; CF: ALIVE,OF: KILLED";
"	; fr m m r";
"	;chose >>saved<< x129 from:x129, x132[0] and candidates: x129, x132";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x144:r13"",""x165:rsi"",""x174:r15"",""x130:r11"",""x140:r14b"",""x149:bl"",""x167:rcx"",""x168:r12b"",""x126:r8"",""-0x1:r10"",""x127:OF"",""x128:rbp"",""x177:CF"",""x176:rax"",""0xffffffff:r9""]";
"	;chose 0xffffffff to spill because list of spills:x89Lx89Lx160Lx160Lx160Lx160Lx160Lx160Lx83Lx83Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Lx21Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Larg2[0]Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117Lx117L0xffffffff00000001L0xffffffff00000001Lx79Lx79Lx79Lx79Lx79Lx79Lx48Lx48L0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLarg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Larg2[3]Lx167Lx167Lx167Lx167Lx167Lx167Larg1Larg1Larg1Larg1Lx104Lx104Lx104Lx104Lx104Lx104Lx109Lx109Lx109Lx109Lx109Lx109Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx67Lx11Lx11Lx11Lx11Lx11Lx11Larg2[2]Larg2[2]Larg2[2]Lx127Lx127Lx127Lx127Lx127Lx127Lx127Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134Lx134L-0x1L-0x1L-0x1Lx162Lx162Lx162Lout1Lout1Lout1Lout1Lout1Lout1Lx125Lx28Lx28Lx28Lx28L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx107Lx107Lx107Lx107Lx107Lx107Lx99Lx99Lx99Lx99Lx140Lx140Lx140Lx97Lx97Lx129Lx106Lx145Lx145Lx132Lx132Lx132Lx166Lx166Larg2Larg2Lx141Lx141Lx87Lx87Lx87Lx85 and candidates: -0x1, 0xffffffff";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: x144(r13),x165(rsi),x174(r15),x130(r11),x140(r14b),x149(bl),x167(rcx),x168(r12b),x126(r8),-0x1(r10),x128(rbp),x176(rax),0xffffffff(r9); clobs x141,x142,x140,x132,x129,x129; will spare: 0xffffffff ";
"	mov r9, [rsp + 0x08 * 18 ]; load m64 x129 to register64";
"	inc r10; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x144:r13"",""x165:rsi"",""x174:r15"",""x130:r11"",""x140:r14b"",""x149:bl"",""x167:rcx"",""x168:r12b"",""x126:r8"",""x127:OF"",""x128:rbp"",""x177:CF"",""x176:rax"",""x141:r9"",""0x0:r10""]";
"	; freeing 0x0 (r10, since all are neeed, but this one is just an immediate value.";
"	mov r10, -0x1 ; moving imm to reg";
"	movzx r14, r14b";
"	adox r14, r10; loading flag";
"	adox r9, [rsp + 0x08 * 16 ]";
"	";
"";
"	; add:";
"	; r:x150,f:x151<-add(x149,x126,x141)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x144:r13"",""x165:rsi"",""x174:r15"",""x130:r11"",""x140:r14b"",""x149:bl"",""x167:rcx"",""x168:r12b"",""x128:rbp"",""x177:CF"",""x176:rax"",""x141:r9"",""-0x1:r10"",""x142:OF"",""x150:r8""]";
"	; freeing x140 (r14b) no dependants anymore";
"	seto r14b; spill OF x142 to reg (r14)";
"	inc r10; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x144:r13"",""x165:rsi"",""x174:r15"",""x130:r11"",""x149:bl"",""x167:rcx"",""x168:r12b"",""x128:rbp"",""x177:CF"",""x176:rax"",""x141:r9"",""x142:r14b"",""x150:r8"",""0x0:r10""]";
"	; freeing 0x0 (r10, since all are neeed, but this one is just an immediate value.";
"	mov r10, -0x1 ; moving imm to reg";
"	movzx rbx, bl";
"	adox rbx, r10; loading flag";
"	adox r8, r9";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x144:r13"",""x165:rsi"",""x174:r15"",""x130:r11"",""x149:bl"",""x167:rcx"",""x168:r12b"",""x128:rbp"",""x177:CF"",""x176:rax"",""x141:r9"",""x142:r14b"",""x150:r8"",""-0x1:r10"",""x151:OF""]";
"	; freeing x149 (bl) no dependants anymore";
"	mov rbx, 0xffffffff00000001 ; moving imm to reg";
"	;chose >>saved<< x144 from:x144, 0xffffffff00000001[0] and candidates: x144, 0xffffffff00000001";
"	mov rdx, r13; x144 to rdx";
"	; fr:r13";
"	; allocatedR: ;-- allocation: [""x165:rsi"",""x174:r15"",""x130:r11"",""x167:rcx"",""x168:r12b"",""x128:rbp"",""x177:CF"",""x176:rax"",""x141:r9"",""x142:r14b"",""x150:r8"",""-0x1:r10"",""x151:OF"",""0xffffffff00000001:rbx"",""x155:rdx""]";
"	;chose >>RANDOMLY<< r13 from candidates :r13[0].";
"	;-- allocation: [""x165:rsi"",""x174:r15"",""x130:r11"",""x167:rcx"",""x168:r12b"",""x128:rbp"",""x177:CF"",""x176:rax"",""x141:r9"",""x142:r14b"",""x150:r8"",""-0x1:r10"",""x151:OF"",""0xffffffff00000001:rbx"",""x155:rdx"",""x154:r13""]";
"	mulx rdx, r13, rbx; x155, x154<- x144 * 0xffffffff00000001";
"	";
"";
"	; add:";
"	; r:x143,f:_<-add(x142,x130)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x165:rsi"",""x174:r15"",""x130:r11"",""x167:rcx"",""x168:r12b"",""x128:rbp"",""x177:CF"",""x176:rax"",""x141:r9"",""x142:r14b"",""x150:r8"",""-0x1:r10"",""x151:OF"",""0xffffffff00000001:rbx"",""x155:rdx"",""x154:r13""]";
"	; freeing x141 (r9) no dependants anymore";
"	movzx r9,  r14b; x143, copying x142 here, cause x142 is needed in a reg for other than x143, namely all: , x143, size: 1";
"	lea r9, [r9+r11]";
"	";
"";
"	; add:";
"	; r:x169,f:x170<-add(x168,x150,x154)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x165:rsi"",""x174:r15"",""x130:r11"",""x167:rcx"",""x168:r12b"",""x128:rbp"",""x177:CF"",""x176:rax"",""x142:r14b"",""-0x1:r10"",""x151:OF"",""0xffffffff00000001:rbx"",""x155:rdx"",""x154:r13"",""x143:r9"",""x169:r8""]";
"	; freeing x130 (r11) no dependants anymore";
"	setc r11b; spill CF x177 to reg (r11)";
"	clc;";
"	movzx r12, r12b";
"	adcx r12, r10; loading flag";
"	adcx r8, r13";
"	";
"";
"	; add:";
"	; r:x152,f:x153<-add(x151,x128,x143)";
"	; CF: ALIVE,OF: ALIVE";
"	adox r9, rbp";
"	";
"";
"	; add:";
"	; r:x171,f:x172<-add(x170,x152,x155)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx rdx, r9";
"	";
"";
"	; sub:";
"	; r:x178,f:x179<-sub(x177,x169,0x0)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x165:rsi"",""x174:r15"",""x167:rcx"",""x168:r12b"",""x128:rbp"",""x177:r11b"",""x176:rax"",""x142:r14b"",""-0x1:r10"",""0xffffffff00000001:rbx"",""x154:r13"",""x169:r8"",""x153:OF"",""x152:r9"",""x172:CF"",""x171:rdx""]";
"	; freeing x168 (r12b) no dependants anymore";
"	setc r12b; spill CF x172 to reg (r12)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x165:rsi"",""x174:r15"",""x167:rcx"",""x128:rbp"",""x177:r11b"",""x176:rax"",""x142:r14b"",""-0x1:r10"",""0xffffffff00000001:rbx"",""x154:r13"",""x169:r8"",""x153:OF"",""x152:r9"",""x172:r12b"",""x171:rdx""]";
"	; freeing x128 (rbp) no dependants anymore";
"	seto bpl; spill OF x153 to reg (rbp)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x165:rsi"",""x174:r15"",""x167:rcx"",""x177:r11b"",""x176:rax"",""x142:r14b"",""-0x1:r10"",""0xffffffff00000001:rbx"",""x154:r13"",""x169:r8"",""x153:bpl"",""x152:r9"",""x172:r12b"",""x171:rdx""]";
"	; freeing x142 (r14b) no dependants anymore";
"	movzx r14,  r11b; x177, copying x177 here, cause x177 is needed in a reg for other than x177, namely all: , x178--x179, size: 1";
"	add r14, -0x1";
"	; fr:r11,r14";
"	; allocatedR: ;-- allocation: [""x165:rsi"",""x174:r15"",""x167:rcx"",""x176:rax"",""-0x1:r10"",""0xffffffff00000001:rbx"",""x154:r13"",""x169:r8"",""x153:bpl"",""x152:r9"",""x172:r12b"",""x171:rdx"",""x179:CF""]";
"	;chose >>RANDOMLY<< r14 from candidates :r11, r14[1].";
"	mov r14,  r8; x178, copying x169 here, cause x169 is needed in a reg for other than x178, namely all: , x186, x178--x179, size: 2";
"	sbb r14, 0x00000000";
"	";
"";
"	; sub:";
"	; r:x180,f:x181<-sub(x179,x171,0xffffffff00000001)";
"	; CF: ALIVE,OF: KILLED";
"	; fr:r11";
"	; allocatedR: ;-- allocation: [""x165:rsi"",""x174:r15"",""x167:rcx"",""x176:rax"",""-0x1:r10"",""0xffffffff00000001:rbx"",""x154:r13"",""x169:r8"",""x153:bpl"",""x152:r9"",""x172:r12b"",""x171:rdx"",""x178:r14"",""x181:CF""]";
"	;chose >>RANDOMLY<< r11 from candidates :r11[0].";
"	mov r11,  rdx; x180, copying x171 here, cause x171 is needed in a reg for other than x180, namely all: , x187, x180--x181, size: 2";
"	sbb r11, rbx";
"	";
"";
"	; add:";
"	; r:x173,f:_<-add(x172,x153)";
"	; CF: ALIVE,OF: KILLED";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x165:rsi"",""x174:r15"",""x167:rcx"",""x176:rax"",""-0x1:r10"",""0xffffffff00000001:rbx"",""x154:r13"",""x169:r8"",""x153:bpl"",""x152:r9"",""x172:r12b"",""x171:rdx"",""x178:r14"",""x181:CF"",""x180:r11""]";
"	; freeing x154 (r13) no dependants anymore";
"	movzx r13,  r12b; x173, copying x172 here, cause x172 is needed in a reg for other than x173, namely all: , x173, size: 1";
"	movzx rbp, bpl";
"	lea r13, [r13+rbp]";
"	";
"";
"	; sub:";
"	; r:_,f:x183<-sub(x181,x173,0x0)";
"	; CF: ALIVE,OF: KILLED";
"	sbb r13, 0x00000000";
"	; the job is: x184 = x183 !== 0 ? x174: x165";
"	; fr:r13";
"	; allocatedR: ;-- allocation: [""x165:rsi"",""x174:r15"",""x167:rcx"",""x176:rax"",""-0x1:r10"",""0xffffffff00000001:rbx"",""x169:r8"",""x153:bpl"",""x152:r9"",""x172:r12b"",""x171:rdx"",""x178:r14"",""x180:r11"",""x183:CF""]";
"	;chose >>RANDOMLY<< r13 from candidates :r13[0].";
"	setc r13b; spill CF x183 to reg (r13)";
"	;-- allocation: [""x165:rsi"",""x167:rcx"",""x176:rax"",""-0x1:r10"",""0xffffffff00000001:rbx"",""x169:r8"",""x153:bpl"",""x152:r9"",""x172:r12b"",""x171:rdx"",""x178:r14"",""x180:r11"",""x183:r13b"",""x184:r15""]";
"	test r13b, r13b; testing x183";
"	cmovnz r15, rsi; if !ZF, x184<- x165 (nzVar)";
"	; the job is: x187 = x183 !== 0 ? x180: x171";
"	;-- allocation: [""x165:rsi"",""x167:rcx"",""x176:rax"",""-0x1:r10"",""0xffffffff00000001:rbx"",""x169:r8"",""x153:bpl"",""x152:r9"",""x172:r12b"",""x171:rdx"",""x178:r14"",""x183:r13b"",""x184:r15"",""x187:r11""]";
"	test r13b, r13b; testing x183";
"	cmovnz r11, rdx; if !ZF, x187<- x171 (nzVar)";
"	; the job is: x186 = x183 !== 0 ? x178: x169";
"	;-- allocation: [""x165:rsi"",""x167:rcx"",""x176:rax"",""-0x1:r10"",""0xffffffff00000001:rbx"",""x169:r8"",""x153:bpl"",""x152:r9"",""x172:r12b"",""x171:rdx"",""x183:r13b"",""x184:r15"",""x187:r11"",""x186:r14""]";
"	test r13b, r13b; testing x183";
"	cmovnz r14, r8; if !ZF, x186<- x169 (nzVar)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""x165:rsi"",""x167:rcx"",""x176:rax"",""-0x1:r10"",""0xffffffff00000001:rbx"",""x169:r8"",""x153:bpl"",""x152:r9"",""x172:r12b"",""x171:rdx"",""x183:r13b"",""x184:r15"",""x187:r11"",""x186:r14""]";
"	; freeing x165 (rsi) no dependants anymore";
"	mov rsi, [rsp + 0x08 * 2 ]; load m64 out1 to register64";
"	;-- allocation: [""out1:rsi"",""x167:rcx"",""x176:rax"",""-0x1:r10"",""0xffffffff00000001:rbx"",""x169:r8"",""x153:bpl"",""x152:r9"",""x172:r12b"",""x171:rdx"",""x183:r13b"",""x184:r15"",""x186:r14"",""x187:r11""]";
"	mov [rsi + 0x08 * 3 ], r11; out1[3] = x187";
"	; the job is: x185 = x183 !== 0 ? x176: x167";
"	;-- allocation: [""out1:rsi"",""x167:rcx"",""-0x1:r10"",""0xffffffff00000001:rbx"",""x169:r8"",""x153:bpl"",""x152:r9"",""x172:r12b"",""x171:rdx"",""x183:r13b"",""x184:r15"",""x186:r14"",""x187:r11"",""x185:rax""]";
"	test r13b, r13b; testing x183";
"	cmovnz rax, rcx; if !ZF, x185<- x167 (nzVar)";
"	;-- allocation: [""out1:rsi"",""x167:rcx"",""-0x1:r10"",""0xffffffff00000001:rbx"",""x169:r8"",""x153:bpl"",""x152:r9"",""x172:r12b"",""x171:rdx"",""x183:r13b"",""x184:r15"",""x187:r11"",""x185:rax"",""x186:r14""]";
"	mov [rsi + 0x08 * 2 ], r14; out1[2] = x186";
"	;-- allocation: [""out1:rsi"",""x167:rcx"",""-0x1:r10"",""0xffffffff00000001:rbx"",""x169:r8"",""x153:bpl"",""x152:r9"",""x172:r12b"",""x171:rdx"",""x183:r13b"",""x187:r11"",""x185:rax"",""x186:r14"",""x184:r15""]";
"	mov [rsi + 0x08 * 0 ], r15; out1[0] = x184";
"	;-- allocation: [""out1:rsi"",""x167:rcx"",""-0x1:r10"",""0xffffffff00000001:rbx"",""x169:r8"",""x153:bpl"",""x152:r9"",""x172:r12b"",""x171:rdx"",""x183:r13b"",""x187:r11"",""x186:r14"",""x184:r15"",""x185:rax""]";
"	mov [rsi + 0x08 * 1 ], rax; out1[1] = x185";
"	mov rbx, [rsp + 0x08 * 19 ]; restoring from stack";
"	mov rbp, [rsp + 0x08 * 20 ]; restoring from stack";
"	mov r12, [rsp + 0x08 * 21 ]; restoring from stack";
"	mov r13, [rsp + 0x08 * 22 ]; restoring from stack";
"	mov r14, [rsp + 0x08 * 23 ]; restoring from stack";
"	mov r15, [rsp + 0x08 * 24 ]; restoring from stack";
"	add rsp, 0xd0 ";
"	ret";
"; cyclecount: 1425";
"; seed 11 ";
"; time Needed: 1695327 ms/ 10000 runs";
"; Time Spent By Invoking Make (measure): 1161972 ms";
"; Ratio (time for make measure)/elapsed: 0.6853969765124959";
"; Reverts a mutation because test was slower: 7001";
"; number tried mutation Permutation: 3333";
"; number tried mutation Spill: 3344";
"; number tried mutation Decision: 3322";
"; FailedEvals (cannot swap because of edge to the next node): 1802";
""].
