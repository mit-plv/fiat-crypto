Require Import Coq.Strings.String Coq.Lists.List.
Import ListNotations.
Local Open Scope string_scope.
Local Open Scope list_scope.
Example example : list string := [
"SECTION .text";
"	GLOBAL fiat_p256_mul_optimised";
"";
"fiat_p256_mul_optimised:";
"	sub rsp, 0xd0 ";
"	mov [rsp + 0x08 * 19 ], rbx; saving to stack";
"	mov [rsp + 0x08 * 20 ], rbp; saving to stack";
"	mov [rsp + 0x08 * 21 ], r12; saving to stack";
"	mov [rsp + 0x08 * 22 ], r13; saving to stack";
"	mov [rsp + 0x08 * 23 ], r14; saving to stack";
"	mov [rsp + 0x08 * 24 ], r15; saving to stack";
"	; rdi contains out1";
"	; rsi contains arg1";
"	; rdx contains arg2";
"	; fr:rax,r10,r11,rbx,rbp,r12,r13,r14,r15,rcx,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rdx""]";
"	;chose >>RANDOMLY<< r12 from candidates :rax, r10, r11, rbx, rbp, r12, r13, r14, r15, rcx, r8, r9[5].";
"	mov r12, [rsi + 0x08 * 0 ]; load m64 x4 to register64";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rdx"",""x4:r12""]";
"	;chose >>saved<< arg2[0] from:x4, arg2[0][1] and candidates: x4, arg2[0]";
"	; fr:rax,r10,r11,rbx,rbp,r13,r14,r15,rcx,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:rdx"",""x4:r12"",""arg2[0]:rdx""]";
"	;chose >>RANDOMLY<< r15 from candidates :rax, r10, r11, rbx, rbp, r13, r14, r15, rcx, r8, r9[7].";
"	mov r15, rdx; preserving value of arg2 into a new reg";
"	mov rdx, [rdx + 0x08 * 0 ]; saving arg2[0] in rdx.";
"	; fr:rax,r10,r11,rbx,rbp,r13,r14,rcx,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x4:r12"",""arg2[0]:rdx""]";
"	;chose >>RANDOMLY<< r14 from candidates :rax, r10, r11, rbx, rbp, r13, r14, rcx, r8, r9[6].";
"	; fr:rax,r10,r11,rbx,rbp,r13,rcx,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x4:r12"",""arg2[0]:rdx"",""x12:r14""]";
"	;chose >>RANDOMLY<< r8 from candidates :rax, r10, r11, rbx, rbp, r13, rcx, r8, r9[7].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x4:r12"",""arg2[0]:rdx"",""x12:r14"",""x11:r8""]";
"	mulx r14, r8, r12; x12, x11<- x4 * arg2[0]";
"	; fr:rax,r10,r11,rbx,rbp,r13,rcx,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x4:r12"",""arg2[0]:rdx"",""x12:r14"",""x11:r8""]";
"	;chose >>RANDOMLY<< r9 from candidates :rax, r10, r11, rbx, rbp, r13, rcx, r9[7].";
"	mov r9, 0xffffffffffffffff ; moving imm to reg";
"	;chose >>saved<< x11 from:x11, 0xffffffffffffffff[0] and candidates: x11, 0xffffffffffffffff";
"	mov rdx, r8; x11 to rdx";
"	; fr:rax,r10,r11,rbx,rbp,r13,rcx,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x4:r12"",""x12:r14"",""x11:rdx"",""0xffffffffffffffff:r9""]";
"	;chose >>RANDOMLY<< rax from candidates :rax, r10, r11, rbx, rbp, r13, rcx, r8[0].";
"	; fr:r10,r11,rbx,rbp,r13,rcx,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x4:r12"",""x12:r14"",""x11:rdx"",""0xffffffffffffffff:r9"",""x25:rax""]";
"	;chose >>RANDOMLY<< rbp from candidates :r10, r11, rbx, rbp, r13, rcx, r8[3].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x4:r12"",""x12:r14"",""x11:rdx"",""0xffffffffffffffff:r9"",""x25:rax"",""x24:rbp""]";
"	mulx rax, rbp, r9; x25, x24<- x11 * 0xffffffffffffffff";
"	; fr:r10,r11,rbx,r13,rcx,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x4:r12"",""x12:r14"",""x11:rdx"",""0xffffffffffffffff:r9"",""x25:rax"",""x24:rbp""]";
"	;chose >>RANDOMLY<< r13 from candidates :r10, r11, rbx, r13, rcx, r8[3].";
"	mov r13, 0xffffffff ; moving imm to reg";
"	; fr:r10,r11,rbx,rcx,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x4:r12"",""x12:r14"",""x11:rdx"",""0xffffffffffffffff:r9"",""x25:rax"",""x24:rbp"",""0xffffffff:r13""]";
"	;chose >>RANDOMLY<< r10 from candidates :r10, r11, rbx, rcx, r8[0].";
"	; fr:r11,rbx,rcx,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x4:r12"",""x12:r14"",""x11:rdx"",""0xffffffffffffffff:r9"",""x25:rax"",""x24:rbp"",""0xffffffff:r13"",""x23:r10""]";
"	;chose >>RANDOMLY<< r11 from candidates :r11, rbx, rcx, r8[0].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x4:r12"",""x12:r14"",""x11:rdx"",""0xffffffffffffffff:r9"",""x25:rax"",""x24:rbp"",""0xffffffff:r13"",""x23:r10"",""x22:r11""]";
"	mulx r10, r11, r13; x23, x22<- x11 * 0xffffffff";
"	";
"";
"	; add:";
"	; r:x26,f:x27<-add(0x0,x25,x22)";
"	; CF: KILLED,OF: KILLED";
"	;chose >>saved<< c_add from:c_add, c_xor_adx, c_test_adx[0] and candidates: c_add, c_xor_adx, c_test_adx";
"	add rax, r11; could be done better, if r0 has been u8 as well";
"	";
"";
"	; add:";
"	; r:x28,f:_<-add(x27,x23)";
"	; CF: ALIVE,OF: KILLED";
"	adc r10, 0x0";
"	;chose >>saved<< arg2[1] from:x4, arg2[1][1] and candidates: x4, arg2[1]";
"	; fr:rbx,rcx,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x4:r12"",""x12:r14"",""x11:rdx"",""0xffffffffffffffff:r9"",""x24:rbp"",""0xffffffff:r13"",""x22:r11"",""x26:rax"",""x27:CF"",""x28:r10"",""arg2[1]:rdx""]";
"	;chose >>RANDOMLY<< r8 from candidates :rbx, rcx, r8[2].";
"	mov r8, rdx; preserving value of x11 into a new reg";
"	mov rdx, [r15 + 0x08 * 1 ]; saving arg2[1] in rdx.";
"	; fr:rbx,rcx";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x4:r12"",""x12:r14"",""x11:r8"",""0xffffffffffffffff:r9"",""x24:rbp"",""0xffffffff:r13"",""x22:r11"",""x26:rax"",""x27:CF"",""x28:r10"",""arg2[1]:rdx""]";
"	;chose >>RANDOMLY<< rbx from candidates :rbx, rcx[0].";
"	; fr:rcx";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x4:r12"",""x12:r14"",""x11:r8"",""0xffffffffffffffff:r9"",""x24:rbp"",""0xffffffff:r13"",""x22:r11"",""x26:rax"",""x27:CF"",""x28:r10"",""arg2[1]:rdx"",""x10:rbx""]";
"	;chose >>RANDOMLY<< rcx from candidates :rcx[0].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x4:r12"",""x12:r14"",""x11:r8"",""0xffffffffffffffff:r9"",""x24:rbp"",""0xffffffff:r13"",""x22:r11"",""x26:rax"",""x27:CF"",""x28:r10"",""arg2[1]:rdx"",""x10:rbx"",""x9:rcx""]";
"	mulx rbx, rcx, r12; x10, x9<- x4 * arg2[1]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x4:r12"",""x12:r14"",""x11:r8"",""0xffffffffffffffff:r9"",""x24:rbp"",""0xffffffff:r13"",""x22:r11"",""x26:rax"",""x27:CF"",""x28:r10"",""arg2[1]:rdx"",""x10:rbx"",""x9:rcx""]";
"	; freeing x22 (r11) no dependants anymore";
"	mov r11, [rsi + 0x08 * 1 ]; load m64 x1 to register64";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x4:r12"",""x12:r14"",""x11:r8"",""0xffffffffffffffff:r9"",""x24:rbp"",""0xffffffff:r13"",""x26:rax"",""x27:CF"",""x28:r10"",""arg2[1]:rdx"",""x10:rbx"",""x9:rcx"",""x1:r11""]";
"	";
"";
"	; add:";
"	; r:x13,f:x14<-add(0x0,x12,x9)";
"	; CF: KILLED,OF: KILLED";
"	;chose >>saved<< c_test_adx from:c_add, c_xor_adx, c_test_adx[2] and candidates: c_add, c_xor_adx, c_test_adx";
"	test al, al";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	adox r14, rcx";
"	";
"";
"	; add:";
"	; r:_,f:x30<-add(0x0,x11,x24)";
"	; CF: ZERO,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x4:r12"",""x11:r8"",""0xffffffffffffffff:r9"",""x24:rbp"",""0xffffffff:r13"",""x26:rax"",""x27:CF"",""x28:r10"",""arg2[1]:rdx"",""x10:rbx"",""x9:rcx"",""x1:r11"",""x13:r14"",""x14:OF""]";
"	; freeing x9 (rcx) no dependants anymore";
"	mov rcx,  r8; _, copying x11 here, cause x11 is needed in a reg for other than _, namely all: , x20--x21, _--x30, size: 2";
"	adcx rcx, rbp";
"	";
"";
"	; add:";
"	; r:x31,f:x32<-add(x30,x13,x26)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx rax, r14";
"	;chose >>saved<< arg2[0] from:x1, arg2[0][1] and candidates: x1, arg2[0]";
"	mov rdx, [r15 + 0x08 * 0 ]; arg2[0] to rdx";
"	; fr:rcx";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x4:r12"",""x11:r8"",""0xffffffffffffffff:r9"",""x24:rbp"",""0xffffffff:r13"",""x28:r10"",""x10:rbx"",""x1:r11"",""x13:r14"",""x14:OF"",""x32:CF"",""x31:rax"",""arg2[0]:rdx""]";
"	;chose >>RANDOMLY<< rcx from candidates :rcx[0].";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x4:r12"",""x11:r8"",""0xffffffffffffffff:r9"",""x24:rbp"",""0xffffffff:r13"",""x28:r10"",""x10:rbx"",""x1:r11"",""x13:r14"",""x14:OF"",""x32:CF"",""x31:rax"",""arg2[0]:rdx"",""x46:rcx""]";
"	; freeing x24 (rbp) no dependants anymore";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x4:r12"",""x11:r8"",""0xffffffffffffffff:r9"",""0xffffffff:r13"",""x28:r10"",""x10:rbx"",""x1:r11"",""x13:r14"",""x14:OF"",""x32:CF"",""x31:rax"",""arg2[0]:rdx"",""x46:rcx"",""x45:rbp""]";
"	mulx rcx, rbp, r11; x46, x45<- x1 * arg2[0]";
"	";
"";
"	; add:";
"	; r:x54,f:x55<-add(0x0,x31,x45)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x4:r12"",""x11:r8"",""0xffffffffffffffff:r9"",""0xffffffff:r13"",""x28:r10"",""x10:rbx"",""x1:r11"",""x13:r14"",""x14:OF"",""x32:CF"",""arg2[0]:rdx"",""x46:rcx"",""x45:rbp"",""x54:rax""]";
"	; freeing x13 (r14) no dependants anymore";
"	setc r14b; spill CF x32 to reg (r14)";
"	clc;";
"	adcx rax, rbp";
"	;chose >>saved<< arg2[3] from:x4, arg2[3][1] and candidates: x4, arg2[3]";
"	mov rdx, [r15 + 0x08 * 3 ]; arg2[3] to rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x4:r12"",""x11:r8"",""0xffffffffffffffff:r9"",""0xffffffff:r13"",""x28:r10"",""x10:rbx"",""x1:r11"",""x14:OF"",""x32:r14b"",""x46:rcx"",""x45:rbp"",""x54:rax"",""x55:CF"",""arg2[3]:rdx""]";
"	; freeing x45 (rbp) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x4:r12"",""x11:r8"",""0xffffffffffffffff:r9"",""0xffffffff:r13"",""x28:r10"",""x10:rbx"",""x1:r11"",""x14:OF"",""x32:r14b"",""x46:rcx"",""x54:rax"",""x55:CF"",""arg2[3]:rdx"",""x6:rbp""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: 0xffffffffffffffff, 0xffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),arg2(r15),x4(r12),x11(r8),0xffffffffffffffff(r9),0xffffffff(r13),x28(r10),x10(rbx),x1(r11),x32(r14b),x46(rcx),x54(rax),arg2[3](rdx),x6(rbp); clobs x5,x6,x4,arg2[3],arg2,x6; will spare: 0xffffffffffffffff ";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x4:r12"",""x11:r8"",""0xffffffff:r13"",""x28:r10"",""x10:rbx"",""x1:r11"",""x14:OF"",""x32:r14b"",""x46:rcx"",""x54:rax"",""x55:CF"",""arg2[3]:rdx"",""x6:rbp"",""x5:r9""]";
"	mulx rbp, r9, r12; x6, x5<- x4 * arg2[3]";
"	;chose >>saved<< arg2[2] from:x4, arg2[2][1] and candidates: x4, arg2[2]";
"	mov rdx, [r15 + 0x08 * 2 ]; arg2[2] to rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x11:r8"",""0xffffffff:r13"",""x28:r10"",""x10:rbx"",""x1:r11"",""x14:OF"",""x32:r14b"",""x46:rcx"",""x54:rax"",""x55:CF"",""x6:rbp"",""x5:r9"",""arg2[2]:rdx"",""x8:r12""]";
"	;chose 0xffffffff to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: 0xffffffff";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),arg2(r15),x11(r8),0xffffffff(r13),x28(r10),x10(rbx),x1(r11),x32(r14b),x46(rcx),x54(rax),x6(rbp),x5(r9),arg2[2](rdx),x8(r12); clobs x7,x8,x4,arg2[2],arg2; will spare: 0xffffffff ";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x11:r8"",""x28:r10"",""x10:rbx"",""x1:r11"",""x14:OF"",""x32:r14b"",""x46:rcx"",""x54:rax"",""x55:CF"",""x6:rbp"",""x5:r9"",""arg2[2]:rdx"",""x8:r12"",""x7:r13""]";
"	mulx r12, r13, r12; x8, x7<- x4 * arg2[2]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x11:r8"",""x28:r10"",""x10:rbx"",""x1:r11"",""x14:OF"",""x32:r14b"",""x46:rcx"",""x54:rax"",""x55:CF"",""x6:rbp"",""x5:r9"",""arg2[2]:rdx"",""x8:r12"",""x7:r13""]";
"	;chose arg2[2] to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: arg2[2]";
"	; freeing, i.e. spilling arg2[2], because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),arg2(r15),x11(r8),x28(r10),x10(rbx),x1(r11),x32(r14b),x46(rcx),x54(rax),x6(rbp),x5(r9),arg2[2](rdx),x8(r12),x7(r13); clobs x68,x69,x54,0xffffffffffffffff,0xffffffffffffffff; will spare: arg2[2] ";
"	mov rdx, 0xffffffffffffffff ; moving imm to reg";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x11:r8"",""x28:r10"",""x10:rbx"",""x1:r11"",""x14:OF"",""x32:r14b"",""x46:rcx"",""x54:rax"",""x55:CF"",""x6:rbp"",""x5:r9"",""x8:r12"",""x7:r13"",""0xffffffffffffffff:rdx""]";
"	;chose x46 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: out1, arg1, arg2, x11, x28, x10, x1, x32, x46, x6, x5, x8, x7";
"	; freeing, i.e. spilling x46, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),arg2(r15),x11(r8),x28(r10),x10(rbx),x1(r11),x32(r14b),x46(rcx),x54(rax),x6(rbp),x5(r9),x8(r12),x7(r13),0xffffffffffffffff(rdx); clobs x68,x69,x54,0xffffffffffffffff,0xffffffffffffffff,0xffffffffffffffff; will spare: x46 ";
"	mov [rsp + 0x08 * 0 ], rcx; spilling x46 to mem";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x11:r8"",""x28:r10"",""x10:rbx"",""x1:r11"",""x14:OF"",""x32:r14b"",""x54:rax"",""x55:CF"",""x6:rbp"",""x5:r9"",""x8:r12"",""x7:r13"",""0xffffffffffffffff:rdx"",""x69:rcx""]";
"	;chose x1 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: out1, arg1, arg2, x11, x28, x10, x1, x32, x6, x5, x8, x7";
"	; freeing, i.e. spilling x1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),arg2(r15),x11(r8),x28(r10),x10(rbx),x1(r11),x32(r14b),x54(rax),x6(rbp),x5(r9),x8(r12),x7(r13),0xffffffffffffffff(rdx),x69(rcx); clobs x68,x69,x54,0xffffffffffffffff,0xffffffffffffffff,0xffffffffffffffff,x69; will spare: x1 ";
"	mov [rsp + 0x08 * 1 ], r11; spilling x1 to mem";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x11:r8"",""x28:r10"",""x10:rbx"",""x14:OF"",""x32:r14b"",""x54:rax"",""x55:CF"",""x6:rbp"",""x5:r9"",""x8:r12"",""x7:r13"",""0xffffffffffffffff:rdx"",""x69:rcx"",""x68:r11""]";
"	mulx rcx, r11, rax; x69, x68<- x54 * 0xffffffffffffffff";
"	";
"";
"	; add:";
"	; r:_,f:x74<-add(0x0,x54,x68)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x11:r8"",""x28:r10"",""x10:rbx"",""x14:OF"",""x32:r14b"",""x54:rax"",""x55:CF"",""x6:rbp"",""x5:r9"",""x8:r12"",""x7:r13"",""0xffffffffffffffff:rdx"",""x69:rcx"",""x68:r11""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: 0xffffffffffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),arg2(r15),x11(r8),x28(r10),x10(rbx),x32(r14b),x54(rax),x6(rbp),x5(r9),x8(r12),x7(r13),0xffffffffffffffff(rdx),x69(rcx),x68(r11); clobs _,x74,0x0,x54,x68,x54; will spare: 0xffffffffffffffff ";
"	mov rdx,  rax; _, copying x54 here, cause x54 is needed in a reg for other than _, namely all: , x64--x65, _--x74, x66--x67, size: 3";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x11:r8"",""x28:r10"",""x10:rbx"",""x14:OF"",""x32:r14b"",""x54:rax"",""x55:CF"",""x6:rbp"",""x5:r9"",""x8:r12"",""x7:r13"",""x69:rcx"",""x68:r11"",""_:rdx""]";
"	;chose x11 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: out1, arg1, arg2, x11, x28, x10, x32, x6, x5, x8, x7, x69";
"	; freeing, i.e. spilling x11, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),arg2(r15),x11(r8),x28(r10),x10(rbx),x32(r14b),x54(rax),x6(rbp),x5(r9),x8(r12),x7(r13),x69(rcx),x68(r11),_(rdx); clobs _,x74,0x0,x54,x68,x54,_,x55; will spare: x11 ";
"	mov [rsp + 0x08 * 2 ], r8; spilling x11 to mem";
"	setc r8b; spill CF x55 to reg (r8)";
"	clc;";
"	adcx rdx, r11";
"	;chose >>saved<< arg2[1] from:x1, arg2[1][1] and candidates: x1, arg2[1]";
"	mov rdx, [r15 + 0x08 * 1 ]; arg2[1] to rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x28:r10"",""x10:rbx"",""x14:OF"",""x32:r14b"",""x54:rax"",""x55:r8b"",""x6:rbp"",""x5:r9"",""x8:r12"",""x7:r13"",""x69:rcx"",""x68:r11"",""x74:CF"",""arg2[1]:rdx""]";
"	; freeing x68 (r11) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""arg2:r15"",""x28:r10"",""x10:rbx"",""x14:OF"",""x32:r14b"",""x54:rax"",""x55:r8b"",""x6:rbp"",""x5:r9"",""x8:r12"",""x7:r13"",""x69:rcx"",""x74:CF"",""arg2[1]:rdx"",""x44:r11""]";
"	;chose out1 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: out1, arg1, x28, x10, x32, x54, x55, x6, x5, x8, x7, x69";
"	; freeing, i.e. spilling out1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),arg2(r15),x28(r10),x10(rbx),x32(r14b),x54(rax),x55(r8b),x6(rbp),x5(r9),x8(r12),x7(r13),x69(rcx),arg2[1](rdx),x44(r11); clobs x43,x44,x1,arg2[1],arg2,x44; will spare: out1 ";
"	mov [rsp + 0x08 * 3 ], rdi; spilling out1 to mem";
"	;-- allocation: [""arg1:rsi"",""arg2:r15"",""x28:r10"",""x10:rbx"",""x14:OF"",""x32:r14b"",""x54:rax"",""x55:r8b"",""x6:rbp"",""x5:r9"",""x8:r12"",""x7:r13"",""x69:rcx"",""x74:CF"",""arg2[1]:rdx"",""x44:r11"",""x43:rdi""]";
"	mulx r11, rdi, [rsp + 0x08 * 1 ]; x44, x43<- x1 * arg2[1]";
"	";
"";
"	; add:";
"	; r:x47,f:x48<-add(0x0,x46,x43)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x28:r10"",""x10:rbx"",""x14:OF"",""x32:r14b"",""x54:rax"",""x55:r8b"",""x6:rbp"",""x5:r9"",""x8:r12"",""x7:r13"",""x69:rcx"",""x74:CF"",""arg2[1]:rdx"",""x44:r11"",""x43:rdi""]";
"	;chose arg2[1] to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: arg2[1]";
"	; freeing, i.e. spilling arg2[1], because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x28(r10),x10(rbx),x32(r14b),x54(rax),x55(r8b),x6(rbp),x5(r9),x8(r12),x7(r13),x69(rcx),arg2[1](rdx),x44(r11),x43(rdi); clobs x47,x48,0x0,x46,x43,x46; will spare: arg2[1] ";
"	mov rdx,  [rsp + 0x08 * 0 ]; x47, copying x46 here, cause x46 is needed in a reg for other than x47, namely all: , x47--x48, size: 1";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x28:r10"",""x10:rbx"",""x14:OF"",""x32:r14b"",""x54:rax"",""x55:r8b"",""x6:rbp"",""x5:r9"",""x8:r12"",""x7:r13"",""x69:rcx"",""x74:CF"",""x44:r11"",""x43:rdi"",""x47:rdx""]";
"	;chose x44 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: arg1, arg2, x28, x10, x32, x54, x55, x6, x5, x8, x7, x69, x44";
"	; freeing, i.e. spilling x44, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x28(r10),x10(rbx),x32(r14b),x54(rax),x55(r8b),x6(rbp),x5(r9),x8(r12),x7(r13),x69(rcx),x44(r11),x43(rdi),x47(rdx); clobs x47,x48,0x0,x46,x43,x46,x47,x74; will spare: x44 ";
"	mov [rsp + 0x08 * 4 ], r11; spilling x44 to mem";
"	setc r11b; spill CF x74 to reg (r11)";
"	clc;";
"	adcx rdx, rdi";
"	";
"";
"	; add:";
"	; r:x15,f:x16<-add(x14,x10,x7)";
"	; CF: ALIVE,OF: ALIVE";
"	adox r13, rbx";
"	";
"";
"	; add:";
"	; r:x33,f:x34<-add(x32,x15,x28)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x28:r10"",""x10:rbx"",""x32:r14b"",""x54:rax"",""x55:r8b"",""x6:rbp"",""x5:r9"",""x8:r12"",""x69:rcx"",""x74:r11b"",""x43:rdi"",""x47:rdx"",""x48:CF"",""x16:OF"",""x33:r13""]";
"	; freeing x10 (rbx) no dependants anymore";
"	seto bl; spill OF x16 to reg (rbx)";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x28:r10"",""x32:r14b"",""x54:rax"",""x55:r8b"",""x6:rbp"",""x5:r9"",""x8:r12"",""x69:rcx"",""x74:r11b"",""x43:rdi"",""x47:rdx"",""x48:CF"",""x16:bl"",""x33:r13""]";
"	; freeing x43 (rdi) no dependants anymore";
"	mov rdi, 0x0 ; moving imm to reg";
"	dec rdi; OF<-0x0, preserve CF 3";
"	movzx r14, r14b";
"	adox r14, rdi; loading flag";
"	adox r13, r10";
"	";
"";
"	; add:";
"	; r:x56,f:x57<-add(x55,x33,x47)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x28:r10"",""x32:r14b"",""x54:rax"",""x55:r8b"",""x6:rbp"",""x5:r9"",""x8:r12"",""x69:rcx"",""x74:r11b"",""x47:rdx"",""x48:CF"",""x16:bl"",""-0x1:rdi"",""x34:OF"",""x56:r13""]";
"	; freeing x28 (r10) no dependants anymore";
"	setc r10b; spill CF x48 to reg (r10)";
"	clc;";
"	movzx r8, r8b";
"	adcx r8, rdi; loading flag";
"	adcx r13, rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x32:r14b"",""x54:rax"",""x55:r8b"",""x6:rbp"",""x5:r9"",""x8:r12"",""x69:rcx"",""x74:r11b"",""x47:rdx"",""x48:r10b"",""x16:bl"",""-0x1:rdi"",""x34:OF"",""x56:r13"",""x57:CF""]";
"	; freeing x32 (r14b) no dependants anymore";
"	mov r14, 0xffffffff ; moving imm to reg";
"	;chose >>saved<< 0xffffffff from:x54, 0xffffffff[1] and candidates: x54, 0xffffffff";
"	mov rdx, r14; 0xffffffff to rdx";
"	; fr:r14";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x54:rax"",""x55:r8b"",""x6:rbp"",""x5:r9"",""x8:r12"",""x69:rcx"",""x74:r11b"",""x48:r10b"",""x16:bl"",""-0x1:rdi"",""x34:OF"",""x56:r13"",""x57:CF"",""0xffffffff:rdx""]";
"	;chose >>RANDOMLY<< r14 from candidates :r14[0].";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x54:rax"",""x55:r8b"",""x6:rbp"",""x5:r9"",""x8:r12"",""x69:rcx"",""x74:r11b"",""x48:r10b"",""x16:bl"",""-0x1:rdi"",""x34:OF"",""x56:r13"",""x57:CF"",""0xffffffff:rdx"",""x67:r14""]";
"	; freeing x55 (r8b) no dependants anymore";
"	;-- allocation: [""arg1:rsi"",""arg2:r15"",""x54:rax"",""x6:rbp"",""x5:r9"",""x8:r12"",""x69:rcx"",""x74:r11b"",""x48:r10b"",""x16:bl"",""-0x1:rdi"",""x34:OF"",""x56:r13"",""x57:CF"",""0xffffffff:rdx"",""x67:r14"",""x66:r8""]";
"	mulx r14, r8, rax; x67, x66<- x54 * 0xffffffff";
"	";
"";
"	; add:";
"	; r:x70,f:x71<-add(0x0,x69,x66)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x54:rax"",""x6:rbp"",""x5:r9"",""x8:r12"",""x74:r11b"",""x48:r10b"",""x16:bl"",""-0x1:rdi"",""x34:OF"",""x56:r13"",""x57:CF"",""0xffffffff:rdx"",""x67:r14"",""x66:r8"",""x70:rcx""]";
"	;chose 0xffffffff to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: -0x1, 0xffffffff";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x54(rax),x6(rbp),x5(r9),x8(r12),x74(r11b),x48(r10b),x16(bl),-0x1(rdi),x56(r13),0xffffffff(rdx),x67(r14),x66(r8),x70(rcx); clobs x70,x71,0x0,x69,x66,x69,x57; will spare: 0xffffffff ";
"	setc dl; spill CF x57 to reg (rdx)";
"	clc;";
"	adcx rcx, r8";
"	";
"";
"	; add:";
"	; r:x17,f:x18<-add(x16,x8,x5)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x54:rax"",""x6:rbp"",""x5:r9"",""x74:r11b"",""x48:r10b"",""x16:bl"",""-0x1:rdi"",""x34:OF"",""x56:r13"",""x57:dl"",""x67:r14"",""x66:r8"",""x70:rcx"",""x71:CF"",""x17:r12""]";
"	; freeing x66 (r8) no dependants anymore";
"	setc r8b; spill CF x71 to reg (r8)";
"	clc;";
"	movzx rbx, bl";
"	adcx rbx, rdi; loading flag";
"	adcx r12, r9";
"	;chose >>saved<< arg2[2] from:x1, arg2[2][1] and candidates: x1, arg2[2]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x54:rax"",""x6:rbp"",""x5:r9"",""x74:r11b"",""x48:r10b"",""x16:bl"",""-0x1:rdi"",""x34:OF"",""x56:r13"",""x57:dl"",""x67:r14"",""x70:rcx"",""x71:r8b"",""x17:r12"",""x18:CF"",""arg2[2]:rdx""]";
"	; freeing x5 (r9) no dependants anymore";
"	mov r9b, dl; preserving value of x57 into a new reg";
"	mov rdx, [r15 + 0x08 * 2 ]; saving arg2[2] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x54:rax"",""x6:rbp"",""x74:r11b"",""x48:r10b"",""x16:bl"",""-0x1:rdi"",""x34:OF"",""x56:r13"",""x57:r9b"",""x67:r14"",""x70:rcx"",""x71:r8b"",""x17:r12"",""x18:CF"",""arg2[2]:rdx""]";
"	; freeing x16 (bl) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x54:rax"",""x6:rbp"",""x74:r11b"",""x48:r10b"",""-0x1:rdi"",""x34:OF"",""x56:r13"",""x57:r9b"",""x67:r14"",""x70:rcx"",""x71:r8b"",""x17:r12"",""x18:CF"",""arg2[2]:rdx"",""x42:rbx""]";
"	;chose -0x1 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x54(rax),x6(rbp),x74(r11b),x48(r10b),-0x1(rdi),x56(r13),x57(r9b),x67(r14),x70(rcx),x71(r8b),x17(r12),arg2[2](rdx),x42(rbx); clobs x41,x42,x1,arg2[2],arg2,x57,x57,x42; will spare: -0x1 ";
"	;-- allocation: [""arg1:rsi"",""arg2:r15"",""x54:rax"",""x6:rbp"",""x74:r11b"",""x48:r10b"",""x34:OF"",""x56:r13"",""x57:r9b"",""x67:r14"",""x70:rcx"",""x71:r8b"",""x17:r12"",""x18:CF"",""arg2[2]:rdx"",""x42:rbx"",""x41:rdi""]";
"	mulx rbx, rdi, [rsp + 0x08 * 1 ]; x42, x41<- x1 * arg2[2]";
"	";
"";
"	; add:";
"	; r:x19,f:_<-add(x18,x6)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x54:rax"",""x74:r11b"",""x48:r10b"",""x34:OF"",""x56:r13"",""x57:r9b"",""x67:r14"",""x70:rcx"",""x71:r8b"",""x17:r12"",""x18:CF"",""arg2[2]:rdx"",""x42:rbx"",""x41:rdi"",""x19:rbp""]";
"	;chose arg2[2] to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: arg2[2]";
"	; freeing, i.e. spilling arg2[2], because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x54(rax),x74(r11b),x48(r10b),x56(r13),x57(r9b),x67(r14),x70(rcx),x71(r8b),x17(r12),arg2[2](rdx),x42(rbx),x41(rdi),x19(rbp); clobs x19,x18,x6,x6,0x0; will spare: arg2[2] ";
"	mov rdx, 0x0 ; moving imm to reg";
"	adcx rbp, rdx";
"	";
"";
"	; add:";
"	; r:x75,f:x76<-add(x74,x56,x70)";
"	; CF: KILLED,OF: ALIVE";
"	clc;";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x54:rax"",""x74:r11b"",""x48:r10b"",""x34:OF"",""x57:r9b"",""x67:r14"",""x70:rcx"",""x71:r8b"",""x17:r12"",""x18:CF"",""x42:rbx"",""x41:rdi"",""x19:rbp"",""0x0:rdx"",""x75:r13""]";
"	; freeing 0x0 (rdx, since all are neeed, but this one is just an immediate value.";
"	mov rdx, -0x1 ; moving imm to reg";
"	movzx r11, r11b";
"	adcx r11, rdx; loading flag";
"	adcx r13, rcx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x54:rax"",""x74:r11b"",""x48:r10b"",""x34:OF"",""x57:r9b"",""x67:r14"",""x70:rcx"",""x71:r8b"",""x17:r12"",""x42:rbx"",""x41:rdi"",""x19:rbp"",""x75:r13"",""-0x1:rdx"",""x76:CF""]";
"	; freeing x74 (r11b) no dependants anymore";
"	mov r11, 0xffffffff00000001 ; moving imm to reg";
"	;chose >>saved<< x11 from:x11, 0xffffffff00000001[0] and candidates: x11, 0xffffffff00000001";
"	mov rdx, [rsp + 0x08 * 2 ]; x11 to rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x54:rax"",""x48:r10b"",""x34:OF"",""x57:r9b"",""x67:r14"",""x70:rcx"",""x71:r8b"",""x17:r12"",""x42:rbx"",""x41:rdi"",""x19:rbp"",""x75:r13"",""x76:CF"",""0xffffffff00000001:r11"",""x21:rdx""]";
"	; freeing x70 (rcx) no dependants anymore";
"	;-- allocation: [""arg1:rsi"",""arg2:r15"",""x54:rax"",""x48:r10b"",""x34:OF"",""x57:r9b"",""x67:r14"",""x71:r8b"",""x17:r12"",""x42:rbx"",""x41:rdi"",""x19:rbp"",""x75:r13"",""x76:CF"",""0xffffffff00000001:r11"",""x21:rdx"",""x20:rcx""]";
"	mulx rdx, rcx, r11; x21, x20<- x11 * 0xffffffff00000001";
"	";
"";
"	; add:";
"	; r:x35,f:x36<-add(x34,x17,x20)";
"	; CF: ALIVE,OF: ALIVE";
"	adox rcx, r12";
"	";
"";
"	; add:";
"	; r:x49,f:x50<-add(x48,x44,x41)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x54:rax"",""x48:r10b"",""x57:r9b"",""x67:r14"",""x71:r8b"",""x17:r12"",""x42:rbx"",""x19:rbp"",""x75:r13"",""x76:CF"",""0xffffffff00000001:r11"",""x21:rdx"",""x36:OF"",""x35:rcx"",""x49:rdi""]";
"	; freeing x17 (r12) no dependants anymore";
"	setc r12b; spill CF x76 to reg (r12)";
"	clc;";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x54:rax"",""x48:r10b"",""x57:r9b"",""x67:r14"",""x71:r8b"",""x42:rbx"",""x19:rbp"",""x75:r13"",""x76:r12b"",""0xffffffff00000001:r11"",""x21:rdx"",""x36:OF"",""x35:rcx"",""x49:rdi""]";
"	;chose 0xffffffff00000001 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: 0xffffffff00000001";
"	; freeing, i.e. spilling 0xffffffff00000001, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x54(rax),x48(r10b),x57(r9b),x67(r14),x71(r8b),x42(rbx),x19(rbp),x75(r13),x76(r12b),0xffffffff00000001(r11),x21(rdx),x35(rcx),x49(rdi); clobs x49,x50,x48,x44,x41,x41,x76,x76,-0x1; will spare: 0xffffffff00000001 ";
"	mov r11, -0x1 ; moving imm to reg";
"	movzx r10, r10b";
"	adcx r10, r11; loading flag";
"	adcx rdi, [rsp + 0x08 * 4 ]";
"	";
"";
"	; add:";
"	; r:x72,f:_<-add(x71,x67)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x54:rax"",""x48:r10b"",""x57:r9b"",""x67:r14"",""x71:r8b"",""x42:rbx"",""x19:rbp"",""x75:r13"",""x76:r12b"",""x21:rdx"",""x36:OF"",""x35:rcx"",""x49:rdi"",""-0x1:r11"",""x50:CF""]";
"	; freeing x48 (r10b) no dependants anymore";
"	movzx r10,  r8b; x72, copying x71 here, cause x71 is needed in a reg for other than x72, namely all: , x72, size: 1";
"	lea r10, [r10+r14]";
"	";
"";
"	; add:";
"	; r:x37,f:x38<-add(x36,x19,x21)";
"	; CF: ALIVE,OF: ALIVE";
"	adox rdx, rbp";
"	;chose >>saved<< x1 from:x1, arg2[3][0] and candidates: x1, arg2[3]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x1:rdx"",""x54:rax"",""x57:r9b"",""x67:r14"",""x71:r8b"",""x42:rbx"",""x19:rbp"",""x75:r13"",""x76:r12b"",""x35:rcx"",""x49:rdi"",""-0x1:r11"",""x50:CF"",""x72:r10"",""x38:OF"",""x37:rdx""]";
"	; freeing x67 (r14) no dependants anymore";
"	mov r14, rdx; preserving value of x37 into a new reg";
"	mov rdx, [rsp + 0x08 * 1 ]; saving x1 in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x54:rax"",""x57:r9b"",""x71:r8b"",""x42:rbx"",""x19:rbp"",""x75:r13"",""x76:r12b"",""x35:rcx"",""x49:rdi"",""-0x1:r11"",""x50:CF"",""x72:r10"",""x38:OF"",""x37:r14"",""x40:rdx""]";
"	; freeing x71 (r8b) no dependants anymore";
"	;-- allocation: [""arg1:rsi"",""arg2:r15"",""x54:rax"",""x57:r9b"",""x42:rbx"",""x19:rbp"",""x75:r13"",""x76:r12b"",""x35:rcx"",""x49:rdi"",""-0x1:r11"",""x50:CF"",""x72:r10"",""x38:OF"",""x37:r14"",""x40:rdx"",""x39:r8""]";
"	mulx rdx, r8, [r15 + 0x08 * 3 ]; x40, x39<- x1 * arg2[3]";
"	";
"";
"	; add:";
"	; r:x58,f:x59<-add(x57,x35,x49)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x54:rax"",""x57:r9b"",""x42:rbx"",""x19:rbp"",""x75:r13"",""x76:r12b"",""x49:rdi"",""-0x1:r11"",""x50:CF"",""x72:r10"",""x38:OF"",""x37:r14"",""x40:rdx"",""x39:r8"",""x58:rcx""]";
"	; freeing x19 (rbp) no dependants anymore";
"	seto bpl; spill OF x38 to reg (rbp)";
"	inc r11; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x54:rax"",""x57:r9b"",""x42:rbx"",""x75:r13"",""x76:r12b"",""x49:rdi"",""x50:CF"",""x72:r10"",""x38:bpl"",""x37:r14"",""x40:rdx"",""x39:r8"",""x58:rcx"",""0x0:r11""]";
"	; freeing 0x0 (r11, since all are neeed, but this one is just an immediate value.";
"	mov r11, -0x1 ; moving imm to reg";
"	movzx r9, r9b";
"	adox r9, r11; loading flag";
"	adox rcx, rdi";
"	";
"";
"	; add:";
"	; r:x51,f:x52<-add(x50,x42,x39)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx r8, rbx";
"	";
"";
"	; add:";
"	; r:x60,f:x61<-add(x59,x37,x51)";
"	; CF: ALIVE,OF: ALIVE";
"	adox r8, r14";
"	";
"";
"	; add:";
"	; r:x53,f:_<-add(x52,x40)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x54:rax"",""x57:r9b"",""x42:rbx"",""x75:r13"",""x76:r12b"",""x49:rdi"",""x72:r10"",""x38:bpl"",""x37:r14"",""x58:rcx"",""-0x1:r11"",""x52:CF"",""x61:OF"",""x60:r8"",""x53:rdx""]";
"	; freeing x57 (r9b) no dependants anymore";
"	mov r9, 0x0 ; moving imm to reg";
"	adcx rdx, r9";
"	";
"";
"	; add:";
"	; r:x77,f:x78<-add(x76,x58,x72)";
"	; CF: KILLED,OF: ALIVE";
"	clc;";
"	movzx r12, r12b";
"	adcx r12, r11; loading flag";
"	adcx rcx, r10";
"	";
"";
"	; add:";
"	; r:x62,f:x63<-add(x61,x38,x53)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x54:rax"",""x42:rbx"",""x75:r13"",""x76:r12b"",""x49:rdi"",""x72:r10"",""x38:bpl"",""x37:r14"",""-0x1:r11"",""x60:r8"",""x53:rdx"",""0x0:r9"",""x77:rcx"",""x78:CF"",""x63:OF""]";
"	; freeing x42 (rbx) no dependants anymore";
"	movzx rbx,  bpl; x62, copying x38 here, cause x38 is needed in a reg for other than x62, namely all: , x62--x63, size: 1";
"	adox rbx, rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x54:rax"",""x75:r13"",""x76:r12b"",""x49:rdi"",""x72:r10"",""x38:bpl"",""x37:r14"",""-0x1:r11"",""x60:r8"",""x53:rdx"",""0x0:r9"",""x77:rcx"",""x78:CF"",""x63:OF"",""x62:rbx""]";
"	; freeing x76 (r12b) no dependants anymore";
"	mov r12, [rsi + 0x08 * 2 ]; load m64 x2 to register64";
"	;-- allocation: [""arg1:rsi"",""arg2:r15"",""x54:rax"",""x75:r13"",""x49:rdi"",""x72:r10"",""x38:bpl"",""x37:r14"",""-0x1:r11"",""x60:r8"",""x53:rdx"",""0x0:r9"",""x77:rcx"",""x78:CF"",""x63:OF"",""x62:rbx"",""x2:r12""]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x54:rax"",""x75:r13"",""x49:rdi"",""x72:r10"",""x38:bpl"",""x37:r14"",""-0x1:r11"",""x60:r8"",""x53:rdx"",""0x0:r9"",""x77:rcx"",""x78:CF"",""x63:OF"",""x62:rbx"",""x2:r12""]";
"	; freeing x49 (rdi) no dependants anymore";
"	mov rdi, 0xffffffff00000001 ; moving imm to reg";
"	;chose >>saved<< x54 from:x54, 0xffffffff00000001[0] and candidates: x54, 0xffffffff00000001";
"	mov rdx, rax; x54 to rdx";
"	; fr:rax";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x75:r13"",""x72:r10"",""x38:bpl"",""x37:r14"",""-0x1:r11"",""x60:r8"",""0x0:r9"",""x77:rcx"",""x78:CF"",""x63:OF"",""x62:rbx"",""x2:r12"",""0xffffffff00000001:rdi"",""x65:rdx""]";
"	;chose >>RANDOMLY<< rax from candidates :rax[0].";
"	;-- allocation: [""arg1:rsi"",""arg2:r15"",""x75:r13"",""x72:r10"",""x38:bpl"",""x37:r14"",""-0x1:r11"",""x60:r8"",""0x0:r9"",""x77:rcx"",""x78:CF"",""x63:OF"",""x62:rbx"",""x2:r12"",""0xffffffff00000001:rdi"",""x65:rdx"",""x64:rax""]";
"	mulx rdx, rax, rdi; x65, x64<- x54 * 0xffffffff00000001";
"	";
"";
"	; add:";
"	; r:x79,f:x80<-add(x78,x60,x64)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx rax, r8";
"	;chose >>saved<< arg2[1] from:x2, arg2[1][1] and candidates: x2, arg2[1]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x75:r13"",""x72:r10"",""x38:bpl"",""x37:r14"",""-0x1:r11"",""x60:r8"",""0x0:r9"",""x77:rcx"",""x63:OF"",""x62:rbx"",""x2:r12"",""0xffffffff00000001:rdi"",""x65:rdx"",""x80:CF"",""x79:rax"",""arg2[1]:rdx""]";
"	; freeing x72 (r10) no dependants anymore";
"	mov r10, rdx; preserving value of x65 into a new reg";
"	mov rdx, [r15 + 0x08 * 1 ]; saving arg2[1] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x75:r13"",""x38:bpl"",""x37:r14"",""-0x1:r11"",""x60:r8"",""0x0:r9"",""x77:rcx"",""x63:OF"",""x62:rbx"",""x2:r12"",""0xffffffff00000001:rdi"",""x65:r10"",""x80:CF"",""x79:rax"",""arg2[1]:rdx""]";
"	; freeing x38 (bpl) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x75:r13"",""x37:r14"",""-0x1:r11"",""x60:r8"",""0x0:r9"",""x77:rcx"",""x63:OF"",""x62:rbx"",""x2:r12"",""0xffffffff00000001:rdi"",""x65:r10"",""x80:CF"",""x79:rax"",""arg2[1]:rdx"",""x89:rbp""]";
"	; freeing x37 (r14) no dependants anymore";
"	;-- allocation: [""arg1:rsi"",""arg2:r15"",""x75:r13"",""-0x1:r11"",""x60:r8"",""0x0:r9"",""x77:rcx"",""x63:OF"",""x62:rbx"",""x2:r12"",""0xffffffff00000001:rdi"",""x65:r10"",""x80:CF"",""x79:rax"",""arg2[1]:rdx"",""x89:rbp"",""x88:r14""]";
"	mulx rbp, r14, r12; x89, x88<- x2 * arg2[1]";
"	";
"";
"	; add:";
"	; r:x81,f:x82<-add(x80,x62,x65)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx r10, rbx";
"	";
"";
"	; add:";
"	; r:x83,f:_<-add(x82,x63)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x75:r13"",""-0x1:r11"",""x60:r8"",""0x0:r9"",""x77:rcx"",""x63:OF"",""x62:rbx"",""x2:r12"",""0xffffffff00000001:rdi"",""x79:rax"",""arg2[1]:rdx"",""x89:rbp"",""x88:r14"",""x82:CF"",""x81:r10""]";
"	; freeing x60 (r8) no dependants anymore";
"	seto r8b; spill OF x83 to reg (r8)";
"	adc r8b, 0x0";
"	movzx r8, r8b";
"	;chose >>saved<< arg2[0] from:x2, arg2[0][1] and candidates: x2, arg2[0]";
"	mov rdx, [r15 + 0x08 * 0 ]; arg2[0] to rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x75:r13"",""-0x1:r11"",""0x0:r9"",""x77:rcx"",""x63:OF"",""x62:rbx"",""x2:r12"",""0xffffffff00000001:rdi"",""x79:rax"",""x89:rbp"",""x88:r14"",""x82:CF"",""x81:r10"",""x83:r8b"",""arg2[0]:rdx""]";
"	; freeing x62 (rbx) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x75:r13"",""-0x1:r11"",""0x0:r9"",""x77:rcx"",""x63:OF"",""x2:r12"",""0xffffffff00000001:rdi"",""x79:rax"",""x89:rbp"",""x88:r14"",""x82:CF"",""x81:r10"",""x83:r8b"",""arg2[0]:rdx"",""x91:rbx""]";
"	; freeing 0x0 (r9, since all are neeed, but this one is just an immediate value.";
"	;-- allocation: [""arg1:rsi"",""arg2:r15"",""x75:r13"",""-0x1:r11"",""x77:rcx"",""x63:OF"",""x2:r12"",""0xffffffff00000001:rdi"",""x79:rax"",""x89:rbp"",""x88:r14"",""x82:CF"",""x81:r10"",""x83:r8b"",""arg2[0]:rdx"",""x91:rbx"",""x90:r9""]";
"	mulx rbx, r9, r12; x91, x90<- x2 * arg2[0]";
"	";
"";
"	; add:";
"	; r:x99,f:x100<-add(0x0,x75,x90)";
"	; CF: ZERO,OF: ZERO";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	adox r13, r9";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""-0x1:r11"",""x77:rcx"",""x2:r12"",""0xffffffff00000001:rdi"",""x79:rax"",""x89:rbp"",""x88:r14"",""x82:CF"",""x81:r10"",""x83:r8b"",""arg2[0]:rdx"",""x91:rbx"",""x90:r9"",""x99:r13"",""x100:OF""]";
"	; freeing x90 (r9) no dependants anymore";
"	mov r9, 0xffffffffffffffff ; moving imm to reg";
"	;chose >>saved<< x99 from:x99, 0xffffffffffffffff[0] and candidates: x99, 0xffffffffffffffff";
"	mov rdx, r13; x99 to rdx";
"	; fr:r13";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""-0x1:r11"",""x77:rcx"",""x2:r12"",""0xffffffff00000001:rdi"",""x79:rax"",""x89:rbp"",""x88:r14"",""x82:CF"",""x81:r10"",""x83:r8b"",""x91:rbx"",""x99:rdx"",""x100:OF"",""0xffffffffffffffff:r9""]";
"	;chose >>RANDOMLY<< r13 from candidates :r13[0].";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""-0x1:r11"",""x77:rcx"",""x2:r12"",""0xffffffff00000001:rdi"",""x79:rax"",""x89:rbp"",""x88:r14"",""x82:CF"",""x81:r10"",""x83:r8b"",""x91:rbx"",""x99:rdx"",""x100:OF"",""0xffffffffffffffff:r9"",""x114:r13""]";
"	;chose -0x1 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: -0x1, 0xffffffff00000001";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),-0x1(r11),x77(rcx),x2(r12),0xffffffff00000001(rdi),x79(rax),x89(rbp),x88(r14),x81(r10),x83(r8b),x91(rbx),x99(rdx),0xffffffffffffffff(r9),x114(r13); clobs x113,x114,x99,0xffffffffffffffff,0xffffffffffffffff,0xffffffffffffffff; will spare: -0x1 ";
"	;-- allocation: [""arg1:rsi"",""arg2:r15"",""x77:rcx"",""x2:r12"",""0xffffffff00000001:rdi"",""x79:rax"",""x89:rbp"",""x88:r14"",""x82:CF"",""x81:r10"",""x83:r8b"",""x91:rbx"",""x99:rdx"",""x100:OF"",""0xffffffffffffffff:r9"",""x114:r13"",""x113:r11""]";
"	mulx r13, r11, r9; x114, x113<- x99 * 0xffffffffffffffff";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x77:rcx"",""x2:r12"",""0xffffffff00000001:rdi"",""x79:rax"",""x89:rbp"",""x88:r14"",""x82:CF"",""x81:r10"",""x83:r8b"",""x91:rbx"",""x99:rdx"",""x100:OF"",""0xffffffffffffffff:r9"",""x114:r13"",""x113:r11""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: 0xffffffff00000001, 0xffffffffffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x77(rcx),x2(r12),0xffffffff00000001(rdi),x79(rax),x89(rbp),x88(r14),x81(r10),x83(r8b),x91(rbx),x99(rdx),0xffffffffffffffff(r9),x114(r13),x113(r11); clobs x111,x112,x99,0xffffffff,0xffffffff; will spare: 0xffffffffffffffff ";
"	mov r9, 0xffffffff ; moving imm to reg";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x77:rcx"",""x2:r12"",""0xffffffff00000001:rdi"",""x79:rax"",""x89:rbp"",""x88:r14"",""x82:CF"",""x81:r10"",""x83:r8b"",""x91:rbx"",""x99:rdx"",""x100:OF"",""x114:r13"",""x113:r11"",""0xffffffff:r9""]";
"	;chose 0xffffffff00000001 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: 0xffffffff00000001";
"	; freeing, i.e. spilling 0xffffffff00000001, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x77(rcx),x2(r12),0xffffffff00000001(rdi),x79(rax),x89(rbp),x88(r14),x81(r10),x83(r8b),x91(rbx),x99(rdx),x114(r13),x113(r11),0xffffffff(r9); clobs x111,x112,x99,0xffffffff,0xffffffff,0xffffffff; will spare: 0xffffffff00000001 ";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x77:rcx"",""x2:r12"",""x79:rax"",""x89:rbp"",""x88:r14"",""x82:CF"",""x81:r10"",""x83:r8b"",""x91:rbx"",""x99:rdx"",""x100:OF"",""x114:r13"",""x113:r11"",""0xffffffff:r9"",""x112:rdi""]";
"	;chose x81 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: arg1, arg2, x77, x2, x79, x89, x88, x81, x83, x91, x114, x113";
"	; freeing, i.e. spilling x81, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x77(rcx),x2(r12),x79(rax),x89(rbp),x88(r14),x81(r10),x83(r8b),x91(rbx),x99(rdx),x114(r13),x113(r11),0xffffffff(r9),x112(rdi); clobs x111,x112,x99,0xffffffff,0xffffffff,0xffffffff,x112; will spare: x81 ";
"	mov [rsp + 0x08 * 5 ], r10; spilling x81 to mem";
"	;-- allocation: [""arg1:rsi"",""arg2:r15"",""x77:rcx"",""x2:r12"",""x79:rax"",""x89:rbp"",""x88:r14"",""x82:CF"",""x83:r8b"",""x91:rbx"",""x99:rdx"",""x100:OF"",""x114:r13"",""x113:r11"",""0xffffffff:r9"",""x112:rdi"",""x111:r10""]";
"	mulx rdi, r10, r9; x112, x111<- x99 * 0xffffffff";
"	";
"";
"	; add:";
"	; r:x92,f:x93<-add(0x0,x91,x88)";
"	; CF: ZERO,OF: ALIVE";
"	adcx rbx, r14";
"	";
"";
"	; add:";
"	; r:_,f:x119<-add(0x0,x99,x113)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x77:rcx"",""x2:r12"",""x79:rax"",""x89:rbp"",""x88:r14"",""x83:r8b"",""x99:rdx"",""x100:OF"",""x114:r13"",""x113:r11"",""0xffffffff:r9"",""x112:rdi"",""x111:r10"",""x92:rbx"",""x93:CF""]";
"	; freeing x88 (r14) no dependants anymore";
"	mov r14,  rdx; _, copying x99 here, cause x99 is needed in a reg for other than _, namely all: , x109--x110, _--x119, size: 2";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x77:rcx"",""x2:r12"",""x79:rax"",""x89:rbp"",""x83:r8b"",""x99:rdx"",""x100:OF"",""x114:r13"",""x113:r11"",""0xffffffff:r9"",""x112:rdi"",""x111:r10"",""x92:rbx"",""x93:CF"",""_:r14""]";
"	;chose 0xffffffff to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: 0xffffffff";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x77(rcx),x2(r12),x79(rax),x89(rbp),x83(r8b),x99(rdx),x114(r13),x113(r11),0xffffffff(r9),x112(rdi),x111(r10),x92(rbx),_(r14); clobs _,x119,0x0,x99,x113,x99,_,x93; will spare: 0xffffffff ";
"	setc r9b; spill CF x93 to reg (r9)";
"	clc;";
"	adcx r14, r11";
"	";
"";
"	; add:";
"	; r:x101,f:x102<-add(x100,x77,x92)";
"	; CF: ALIVE,OF: ALIVE";
"	adox rbx, rcx";
"	";
"";
"	; add:";
"	; r:x115,f:x116<-add(0x0,x114,x111)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:r14";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x77:rcx"",""x2:r12"",""x79:rax"",""x89:rbp"",""x83:r8b"",""x99:rdx"",""x113:r11"",""x112:rdi"",""x111:r10"",""x93:r9b"",""x119:CF"",""x102:OF"",""x101:rbx"",""x115:r13""]";
"	;chose >>RANDOMLY<< r14 from candidates :r14[0].";
"	seto r14b; spill OF x102 to reg (r14)";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x77:rcx"",""x2:r12"",""x79:rax"",""x89:rbp"",""x83:r8b"",""x99:rdx"",""x113:r11"",""x112:rdi"",""x111:r10"",""x93:r9b"",""x119:CF"",""x102:r14b"",""x101:rbx"",""x115:r13""]";
"	; freeing x77 (rcx) no dependants anymore";
"	mov rcx, 0x0 ; moving imm to reg";
"	dec rcx; OF<-0x0, preserve CF 3";
"	adox r13, r10";
"	";
"";
"	; add:";
"	; r:x120,f:x121<-add(x119,x101,x115)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx r13, rbx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x79:rax"",""x89:rbp"",""x83:r8b"",""x99:rdx"",""x113:r11"",""x112:rdi"",""x111:r10"",""x93:r9b"",""x102:r14b"",""x101:rbx"",""-0x1:rcx"",""x116:OF"",""x121:CF"",""x120:r13""]";
"	; freeing x113 (r11) no dependants anymore";
"	mov r11, [rsi + 0x08 * 3 ]; load m64 x3 to register64";
"	;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x79:rax"",""x89:rbp"",""x83:r8b"",""x99:rdx"",""x112:rdi"",""x111:r10"",""x93:r9b"",""x102:r14b"",""x101:rbx"",""-0x1:rcx"",""x116:OF"",""x121:CF"",""x120:r13"",""x3:r11""]";
"	;chose >>saved<< arg2[0] from:x3, arg2[0][1] and candidates: x3, arg2[0]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x79:rax"",""x89:rbp"",""x83:r8b"",""x99:rdx"",""x112:rdi"",""x111:r10"",""x93:r9b"",""x102:r14b"",""x101:rbx"",""-0x1:rcx"",""x116:OF"",""x121:CF"",""x120:r13"",""x3:r11"",""arg2[0]:rdx""]";
"	; freeing x111 (r10) no dependants anymore";
"	mov r10, rdx; preserving value of x99 into a new reg";
"	mov rdx, [r15 + 0x08 * 0 ]; saving arg2[0] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x79:rax"",""x89:rbp"",""x83:r8b"",""x99:r10"",""x112:rdi"",""x93:r9b"",""x102:r14b"",""x101:rbx"",""-0x1:rcx"",""x116:OF"",""x121:CF"",""x120:r13"",""x3:r11"",""arg2[0]:rdx""]";
"	; freeing x101 (rbx) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x79:rax"",""x89:rbp"",""x83:r8b"",""x99:r10"",""x112:rdi"",""x93:r9b"",""x102:r14b"",""-0x1:rcx"",""x116:OF"",""x121:CF"",""x120:r13"",""x3:r11"",""arg2[0]:rdx"",""x136:rbx""]";
"	;chose -0x1 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x2(r12),x79(rax),x89(rbp),x83(r8b),x99(r10),x112(rdi),x93(r9b),x102(r14b),-0x1(rcx),x120(r13),x3(r11),arg2[0](rdx),x136(rbx); clobs x135,x136,x3,arg2[0],arg2,x99,x99,x136; will spare: -0x1 ";
"	;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x79:rax"",""x89:rbp"",""x83:r8b"",""x99:r10"",""x112:rdi"",""x93:r9b"",""x102:r14b"",""x116:OF"",""x121:CF"",""x120:r13"",""x3:r11"",""arg2[0]:rdx"",""x136:rbx"",""x135:rcx""]";
"	mulx rbx, rcx, r11; x136, x135<- x3 * arg2[0]";
"	;chose >>saved<< arg2[2] from:x2, arg2[2][1] and candidates: x2, arg2[2]";
"	mov rdx, [r15 + 0x08 * 2 ]; arg2[2] to rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x79:rax"",""x89:rbp"",""x83:r8b"",""x99:r10"",""x112:rdi"",""x93:r9b"",""x102:r14b"",""x116:OF"",""x121:CF"",""x120:r13"",""x3:r11"",""x136:rbx"",""x135:rcx"",""arg2[2]:rdx""]";
"	;chose x3 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: arg1, x79, x89, x83, x99, x112, x93, x102, x120, x3, x136, x135";
"	; freeing, i.e. spilling x3, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x2(r12),x79(rax),x89(rbp),x83(r8b),x99(r10),x112(rdi),x93(r9b),x102(r14b),x120(r13),x3(r11),x136(rbx),x135(rcx),arg2[2](rdx); clobs x86,x87,x2,arg2[2],arg2; will spare: x3 ";
"	mov [rsp + 0x08 * 6 ], r11; spilling x3 to mem";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x79:rax"",""x89:rbp"",""x83:r8b"",""x99:r10"",""x112:rdi"",""x93:r9b"",""x102:r14b"",""x116:OF"",""x121:CF"",""x120:r13"",""x136:rbx"",""x135:rcx"",""arg2[2]:rdx"",""x87:r11""]";
"	;chose x89 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: arg1, x79, x89, x83, x99, x112, x93, x102, x120, x136, x135";
"	; freeing, i.e. spilling x89, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x2(r12),x79(rax),x89(rbp),x83(r8b),x99(r10),x112(rdi),x93(r9b),x102(r14b),x120(r13),x136(rbx),x135(rcx),arg2[2](rdx),x87(r11); clobs x86,x87,x2,arg2[2],arg2,x87; will spare: x89 ";
"	mov [rsp + 0x08 * 7 ], rbp; spilling x89 to mem";
"	;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x79:rax"",""x83:r8b"",""x99:r10"",""x112:rdi"",""x93:r9b"",""x102:r14b"",""x116:OF"",""x121:CF"",""x120:r13"",""x136:rbx"",""x135:rcx"",""arg2[2]:rdx"",""x87:r11"",""x86:rbp""]";
"	mulx r11, rbp, r12; x87, x86<- x2 * arg2[2]";
"	";
"";
"	; add:";
"	; r:x117,f:_<-add(x116,x112)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x79:rax"",""x83:r8b"",""x99:r10"",""x93:r9b"",""x102:r14b"",""x116:OF"",""x121:CF"",""x120:r13"",""x136:rbx"",""x135:rcx"",""arg2[2]:rdx"",""x87:r11"",""x86:rbp"",""x117:rdi""]";
"	;chose arg2[2] to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: arg2[2]";
"	; freeing, i.e. spilling arg2[2], because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x2(r12),x79(rax),x83(r8b),x99(r10),x93(r9b),x102(r14b),x120(r13),x136(rbx),x135(rcx),arg2[2](rdx),x87(r11),x86(rbp),x117(rdi); clobs x117,x116,x112,x112,0x0; will spare: arg2[2] ";
"	mov rdx, 0x0 ; moving imm to reg";
"	adox rdi, rdx";
"	";
"";
"	; add:";
"	; r:x94,f:x95<-add(x93,x89,x86)";
"	; CF: ALIVE,OF: KILLED";
"	dec rdx; OF<-0x0, preserve CF 3";
"	movzx r9, r9b";
"	adox r9, rdx; loading flag";
"	adox rbp, [rsp + 0x08 * 7 ]";
"	";
"";
"	; add:";
"	; r:x144,f:x145<-add(0x0,x120,x135)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x79:rax"",""x83:r8b"",""x99:r10"",""x93:r9b"",""x102:r14b"",""x121:CF"",""x136:rbx"",""x135:rcx"",""x87:r11"",""x117:rdi"",""x94:rbp"",""-0x1:rdx"",""x95:OF"",""x144:r13""]";
"	; freeing x93 (r9b) no dependants anymore";
"	setc r9b; spill CF x121 to reg (r9)";
"	clc;";
"	adcx r13, rcx";
"	";
"";
"	; add:";
"	; r:x103,f:x104<-add(x102,x79,x94)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x83:r8b"",""x99:r10"",""x102:r14b"",""x121:r9b"",""x136:rbx"",""x135:rcx"",""x87:r11"",""x117:rdi"",""x94:rbp"",""-0x1:rdx"",""x95:OF"",""x144:r13"",""x145:CF"",""x103:rax""]";
"	; freeing x135 (rcx) no dependants anymore";
"	seto cl; spill OF x95 to reg (rcx)";
"	inc rdx; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x83:r8b"",""x99:r10"",""x102:r14b"",""x121:r9b"",""x136:rbx"",""x87:r11"",""x117:rdi"",""x94:rbp"",""x95:cl"",""x144:r13"",""x145:CF"",""x103:rax"",""0x0:rdx""]";
"	; freeing 0x0 (rdx, since all are neeed, but this one is just an immediate value.";
"	mov rdx, -0x1 ; moving imm to reg";
"	movzx r14, r14b";
"	adox r14, rdx; loading flag";
"	adox rax, rbp";
"	;chose >>saved<< arg2[1] from:x3, arg2[1][1] and candidates: x3, arg2[1]";
"	mov rdx, [r15 + 0x08 * 1 ]; arg2[1] to rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x83:r8b"",""x99:r10"",""x102:r14b"",""x121:r9b"",""x136:rbx"",""x87:r11"",""x117:rdi"",""x94:rbp"",""x95:cl"",""x144:r13"",""x145:CF"",""x103:rax"",""x104:OF"",""arg2[1]:rdx""]";
"	; freeing x102 (r14b) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x83:r8b"",""x99:r10"",""x121:r9b"",""x136:rbx"",""x87:r11"",""x117:rdi"",""x94:rbp"",""x95:cl"",""x144:r13"",""x145:CF"",""x103:rax"",""x104:OF"",""arg2[1]:rdx"",""x134:r14""]";
"	; freeing x94 (rbp) no dependants anymore";
"	;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x83:r8b"",""x99:r10"",""x121:r9b"",""x136:rbx"",""x87:r11"",""x117:rdi"",""x95:cl"",""x144:r13"",""x145:CF"",""x103:rax"",""x104:OF"",""arg2[1]:rdx"",""x134:r14"",""x133:rbp""]";
"	mulx r14, rbp, [rsp + 0x08 * 6 ]; x134, x133<- x3 * arg2[1]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x83:r8b"",""x99:r10"",""x121:r9b"",""x136:rbx"",""x87:r11"",""x117:rdi"",""x95:cl"",""x144:r13"",""x145:CF"",""x103:rax"",""x104:OF"",""arg2[1]:rdx"",""x134:r14"",""x133:rbp""]";
"	;chose arg2[1] to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: arg2[1]";
"	; freeing, i.e. spilling arg2[1], because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x2(r12),x83(r8b),x99(r10),x121(r9b),x136(rbx),x87(r11),x117(rdi),x95(cl),x144(r13),x103(rax),arg2[1](rdx),x134(r14),x133(rbp); clobs x158,x159,x144,0xffffffffffffffff,0xffffffffffffffff; will spare: arg2[1] ";
"	mov rdx, 0xffffffffffffffff ; moving imm to reg";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x83:r8b"",""x99:r10"",""x121:r9b"",""x136:rbx"",""x87:r11"",""x117:rdi"",""x95:cl"",""x144:r13"",""x145:CF"",""x103:rax"",""x104:OF"",""x134:r14"",""x133:rbp"",""0xffffffffffffffff:rdx""]";
"	;chose x103 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: arg1, arg2, x2, x83, x99, x121, x136, x87, x117, x95, x103, x134, x133";
"	; freeing, i.e. spilling x103, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x2(r12),x83(r8b),x99(r10),x121(r9b),x136(rbx),x87(r11),x117(rdi),x95(cl),x144(r13),x103(rax),x134(r14),x133(rbp),0xffffffffffffffff(rdx); clobs x158,x159,x144,0xffffffffffffffff,0xffffffffffffffff,0xffffffffffffffff; will spare: x103 ";
"	mov [rsp + 0x08 * 8 ], rax; spilling x103 to mem";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x83:r8b"",""x99:r10"",""x121:r9b"",""x136:rbx"",""x87:r11"",""x117:rdi"",""x95:cl"",""x144:r13"",""x145:CF"",""x104:OF"",""x134:r14"",""x133:rbp"",""0xffffffffffffffff:rdx"",""x159:rax""]";
"	;chose x83 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: arg1, arg2, x2, x83, x99, x121, x136, x87, x117, x95, x134, x133";
"	; freeing, i.e. spilling x83, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x2(r12),x83(r8b),x99(r10),x121(r9b),x136(rbx),x87(r11),x117(rdi),x95(cl),x144(r13),x134(r14),x133(rbp),0xffffffffffffffff(rdx),x159(rax); clobs x158,x159,x144,0xffffffffffffffff,0xffffffffffffffff,0xffffffffffffffff,x159; will spare: x83 ";
"	mov byte [rsp + 0x08 * 9 ], r8b; spilling byte x83 to mem";
"	;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x99:r10"",""x121:r9b"",""x136:rbx"",""x87:r11"",""x117:rdi"",""x95:cl"",""x144:r13"",""x145:CF"",""x104:OF"",""x134:r14"",""x133:rbp"",""0xffffffffffffffff:rdx"",""x159:rax"",""x158:r8""]";
"	mulx rax, r8, r13; x159, x158<- x144 * 0xffffffffffffffff";
"	";
"";
"	; add:";
"	; r:_,f:x164<-add(0x0,x144,x158)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x99:r10"",""x121:r9b"",""x136:rbx"",""x87:r11"",""x117:rdi"",""x95:cl"",""x144:r13"",""x145:CF"",""x104:OF"",""x134:r14"",""x133:rbp"",""0xffffffffffffffff:rdx"",""x159:rax"",""x158:r8""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: 0xffffffffffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x2(r12),x99(r10),x121(r9b),x136(rbx),x87(r11),x117(rdi),x95(cl),x144(r13),x134(r14),x133(rbp),0xffffffffffffffff(rdx),x159(rax),x158(r8); clobs _,x164,0x0,x144,x158,x144; will spare: 0xffffffffffffffff ";
"	mov rdx,  r13; _, copying x144 here, cause x144 is needed in a reg for other than _, namely all: , x156--x157, x154--x155, _--x164, size: 3";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x99:r10"",""x121:r9b"",""x136:rbx"",""x87:r11"",""x117:rdi"",""x95:cl"",""x144:r13"",""x145:CF"",""x104:OF"",""x134:r14"",""x133:rbp"",""x159:rax"",""x158:r8"",""_:rdx""]";
"	;chose x159 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: arg1, arg2, x2, x99, x121, x136, x87, x117, x95, x134, x133, x159";
"	; freeing, i.e. spilling x159, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x2(r12),x99(r10),x121(r9b),x136(rbx),x87(r11),x117(rdi),x95(cl),x144(r13),x134(r14),x133(rbp),x159(rax),x158(r8),_(rdx); clobs _,x164,0x0,x144,x158,x144,_,x104; will spare: x159 ";
"	mov [rsp + 0x08 * 10 ], rax; spilling x159 to mem";
"	seto al; spill OF x104 to reg (rax)";
"	;chose >>saved<< -0x1 from:0x0, -0x1[1] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x99:r10"",""x121:r9b"",""x136:rbx"",""x87:r11"",""x117:rdi"",""x95:cl"",""x144:r13"",""x145:CF"",""x104:al"",""x134:r14"",""x133:rbp"",""x158:r8"",""_:rdx""]";
"	;chose x134 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: arg1, arg2, x2, x99, x121, x136, x87, x117, x95, x134, x133";
"	; freeing, i.e. spilling x134, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x2(r12),x99(r10),x121(r9b),x136(rbx),x87(r11),x117(rdi),x95(cl),x144(r13),x104(al),x134(r14),x133(rbp),x158(r8),_(rdx); clobs _,x164,0x0,x144,x158,x144,_,x104,x104,-0x1; will spare: x134 ";
"	mov [rsp + 0x08 * 11 ], r14; spilling x134 to mem";
"	mov r14, -0x1 ; moving imm to reg";
"	inc r14; OF<-0x0, preserve CF 2";
"	adox rdx, r8";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x99:r10"",""x121:r9b"",""x136:rbx"",""x87:r11"",""x117:rdi"",""x95:cl"",""x144:r13"",""x145:CF"",""x104:al"",""x133:rbp"",""x158:r8"",""0x0:r14"",""x164:OF""]";
"	; freeing x158 (r8) no dependants anymore";
"	mov r8, 0xffffffff ; moving imm to reg";
"	;chose >>saved<< x144 from:x144, 0xffffffff[0] and candidates: x144, 0xffffffff";
"	mov rdx, r13; x144 to rdx";
"	; fr:r13";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x99:r10"",""x121:r9b"",""x136:rbx"",""x87:r11"",""x117:rdi"",""x95:cl"",""x144:rdx"",""x145:CF"",""x104:al"",""x133:rbp"",""0x0:r14"",""x164:OF"",""0xffffffff:r8""]";
"	;chose >>RANDOMLY<< r13 from candidates :r13[0].";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x99:r10"",""x121:r9b"",""x136:rbx"",""x87:r11"",""x117:rdi"",""x95:cl"",""x144:rdx"",""x145:CF"",""x104:al"",""x133:rbp"",""0x0:r14"",""x164:OF"",""0xffffffff:r8"",""x157:r13""]";
"	; freeing 0x0 (r14, since all are neeed, but this one is just an immediate value.";
"	;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x99:r10"",""x121:r9b"",""x136:rbx"",""x87:r11"",""x117:rdi"",""x95:cl"",""x144:rdx"",""x145:CF"",""x104:al"",""x133:rbp"",""x164:OF"",""0xffffffff:r8"",""x157:r13"",""x156:r14""]";
"	mulx r13, r14, r8; x157, x156<- x144 * 0xffffffff";
"	";
"";
"	; add:";
"	; r:x122,f:x123<-add(x121,x103,x117)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x99:r10"",""x121:r9b"",""x136:rbx"",""x87:r11"",""x95:cl"",""x144:rdx"",""x145:CF"",""x104:al"",""x133:rbp"",""x164:OF"",""0xffffffff:r8"",""x157:r13"",""x156:r14"",""x122:rdi""]";
"	;chose 0xffffffff to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: 0xffffffff";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x2(r12),x99(r10),x121(r9b),x136(rbx),x87(r11),x95(cl),x144(rdx),x104(al),x133(rbp),0xffffffff(r8),x157(r13),x156(r14),x122(rdi); clobs x122,x123,x121,x103,x117,x117,x164; will spare: 0xffffffff ";
"	seto r8b; spill OF x164 to reg (r8)";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x99:r10"",""x121:r9b"",""x136:rbx"",""x87:r11"",""x95:cl"",""x144:rdx"",""x145:CF"",""x104:al"",""x133:rbp"",""x164:r8b"",""x157:r13"",""x156:r14"",""x122:rdi""]";
"	;chose x144 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: arg1, arg2, x2, x99, x136, x87, x95, x144, x104, x133, x157, x156";
"	; freeing, i.e. spilling x144, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x2(r12),x99(r10),x121(r9b),x136(rbx),x87(r11),x95(cl),x144(rdx),x104(al),x133(rbp),x164(r8b),x157(r13),x156(r14),x122(rdi); clobs x122,x123,x121,x103,x117,x117,x164,x164,0x0; will spare: x144 ";
"	mov [rsp + 0x08 * 12 ], rdx; spilling x144 to mem";
"	mov rdx, 0x0 ; moving imm to reg";
"	dec rdx; OF<-0x0, preserve CF 3";
"	movzx r9, r9b";
"	adox r9, rdx; loading flag";
"	adox rdi, [rsp + 0x08 * 8 ]";
"	";
"";
"	; add:";
"	; r:x137,f:x138<-add(0x0,x136,x133)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x99:r10"",""x121:r9b"",""x87:r11"",""x95:cl"",""x145:CF"",""x104:al"",""x133:rbp"",""x164:r8b"",""x157:r13"",""x156:r14"",""x122:rdi"",""-0x1:rdx"",""x123:OF"",""x137:rbx""]";
"	; freeing x121 (r9b) no dependants anymore";
"	seto r9b; spill OF x123 to reg (r9)";
"	inc rdx; OF<-0x0, preserve CF 2";
"	adox rbx, rbp";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x99:r10"",""x87:r11"",""x95:cl"",""x145:CF"",""x104:al"",""x133:rbp"",""x164:r8b"",""x157:r13"",""x156:r14"",""x122:rdi"",""x123:r9b"",""x137:rbx"",""0x0:rdx"",""x138:OF""]";
"	; freeing x133 (rbp) no dependants anymore";
"	mov rbp, 0xffffffff00000001 ; moving imm to reg";
"	;chose >>saved<< 0xffffffff00000001 from:x99, 0xffffffff00000001[1] and candidates: x99, 0xffffffff00000001";
"	xchg rdx, rbp; 0xffffffff00000001, swapping with 0x0, which is currently in rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x87:r11"",""x95:cl"",""x145:CF"",""x104:al"",""x164:r8b"",""x157:r13"",""x156:r14"",""x122:rdi"",""x123:r9b"",""x137:rbx"",""0x0:rbp"",""x138:OF"",""0xffffffff00000001:rdx"",""x110:r10""]";
"	; freeing 0x0 (rbp, since all are neeed, but this one is just an immediate value.";
"	;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x87:r11"",""x95:cl"",""x145:CF"",""x104:al"",""x164:r8b"",""x157:r13"",""x156:r14"",""x122:rdi"",""x123:r9b"",""x137:rbx"",""x138:OF"",""0xffffffff00000001:rdx"",""x110:r10"",""x109:rbp""]";
"	mulx r10, rbp, r10; x110, x109<- x99 * 0xffffffff00000001";
"	";
"";
"	; add:";
"	; r:x146,f:x147<-add(x145,x122,x137)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx rbx, rdi";
"	";
"";
"	; add:";
"	; r:x160,f:x161<-add(0x0,x159,x156)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x87:r11"",""x95:cl"",""x104:al"",""x164:r8b"",""x157:r13"",""x156:r14"",""x122:rdi"",""x123:r9b"",""x138:OF"",""0xffffffff00000001:rdx"",""x110:r10"",""x109:rbp"",""x147:CF"",""x146:rbx""]";
"	; freeing x122 (rdi) no dependants anymore";
"	mov rdi,  [rsp + 0x08 * 10 ]; x160, copying x159 here, cause x159 is needed in a reg for other than x160, namely all: , x160--x161, size: 1";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x87:r11"",""x95:cl"",""x104:al"",""x164:r8b"",""x157:r13"",""x156:r14"",""x123:r9b"",""x138:OF"",""0xffffffff00000001:rdx"",""x110:r10"",""x109:rbp"",""x147:CF"",""x146:rbx"",""x160:rdi""]";
"	;chose 0xffffffff00000001 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: 0xffffffff00000001";
"	; freeing, i.e. spilling 0xffffffff00000001, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x2(r12),x87(r11),x95(cl),x104(al),x164(r8b),x157(r13),x156(r14),x123(r9b),0xffffffff00000001(rdx),x110(r10),x109(rbp),x146(rbx),x160(rdi); clobs x160,x161,0x0,x159,x156,x159,x160,x147; will spare: 0xffffffff00000001 ";
"	setc dl; spill CF x147 to reg (rdx)";
"	clc;";
"	adcx rdi, r14";
"	";
"";
"	; add:";
"	; r:x165,f:x166<-add(x164,x146,x160)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x87:r11"",""x95:cl"",""x104:al"",""x164:r8b"",""x157:r13"",""x156:r14"",""x123:r9b"",""x138:OF"",""x110:r10"",""x109:rbp"",""x147:dl"",""x160:rdi"",""x161:CF"",""x165:rbx""]";
"	; freeing x156 (r14) no dependants anymore";
"	seto r14b; spill OF x138 to reg (r14)";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x87:r11"",""x95:cl"",""x104:al"",""x164:r8b"",""x157:r13"",""x123:r9b"",""x138:r14b"",""x110:r10"",""x109:rbp"",""x147:dl"",""x160:rdi"",""x161:CF"",""x165:rbx""]";
"	;chose x104 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: arg1, arg2, x2, x87, x95, x104, x157, x123, x110, x109, x147";
"	; freeing, i.e. spilling x104, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x2(r12),x87(r11),x95(cl),x104(al),x164(r8b),x157(r13),x123(r9b),x138(r14b),x110(r10),x109(rbp),x147(dl),x160(rdi),x165(rbx); clobs x165,x166,x164,x146,x160,x146,x138,x138,0x0; will spare: x104 ";
"	mov byte [rsp + 0x08 * 13 ], al; spilling byte x104 to mem";
"	mov rax, 0x0 ; moving imm to reg";
"	dec rax; OF<-0x0, preserve CF 3";
"	movzx r8, r8b";
"	adox r8, rax; loading flag";
"	adox rbx, rdi";
"	";
"";
"	; sub:";
"	; r:x174,f:x175<-sub(0x0,x165,0xffffffffffffffff)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x87:r11"",""x95:cl"",""x164:r8b"",""x157:r13"",""x123:r9b"",""x138:r14b"",""x110:r10"",""x109:rbp"",""x147:dl"",""x160:rdi"",""x161:CF"",""x165:rbx"",""-0x1:rax"",""x166:OF""]";
"	; freeing x164 (r8b) no dependants anymore";
"	setc r8b; spill CF x161 to reg (r8)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x87:r11"",""x95:cl"",""x157:r13"",""x123:r9b"",""x138:r14b"",""x110:r10"",""x109:rbp"",""x147:dl"",""x160:rdi"",""x161:r8b"",""x165:rbx"",""-0x1:rax"",""x166:OF""]";
"	; freeing x160 (rdi) no dependants anymore";
"	seto dil; spill OF x166 to reg (rdi)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x87:r11"",""x95:cl"",""x157:r13"",""x123:r9b"",""x138:r14b"",""x110:r10"",""x109:rbp"",""x147:dl"",""x161:r8b"",""x165:rbx"",""-0x1:rax"",""x166:dil""]";
"	;chose -0x1 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x2(r12),x87(r11),x95(cl),x157(r13),x123(r9b),x138(r14b),x110(r10),x109(rbp),x147(dl),x161(r8b),x165(rbx),-0x1(rax),x166(dil); clobs x174,x175,0x0,x165,0xffffffffffffffff,x161,x161,x166,x166,x165; will spare: -0x1 ";
"	mov rax,  rbx; x174, copying x165 here, cause x165 is needed in a reg for other than x174, namely all: , x184, x174--x175, size: 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x87:r11"",""x95:cl"",""x157:r13"",""x123:r9b"",""x138:r14b"",""x110:r10"",""x109:rbp"",""x147:dl"",""x161:r8b"",""x165:rbx"",""x166:dil"",""x174:rax""]";
"	;chose x138 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: arg1, arg2, x2, x87, x95, x157, x123, x138, x110, x109, x147";
"	; freeing, i.e. spilling x138, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x2(r12),x87(r11),x95(cl),x157(r13),x123(r9b),x138(r14b),x110(r10),x109(rbp),x147(dl),x161(r8b),x165(rbx),x166(dil),x174(rax); clobs x174,x175,0x0,x165,0xffffffffffffffff,x161,x161,x166,x166,x165,x174,0xffffffffffffffff; will spare: x138 ";
"	mov byte [rsp + 0x08 * 14 ], r14b; spilling byte x138 to mem";
"	mov r14, 0xffffffffffffffff ; moving imm to reg";
"	sub rax, r14";
"	;chose >>saved<< arg2[3] from:x2, arg2[3][1] and candidates: x2, arg2[3]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x2:r12"",""x87:r11"",""x95:cl"",""x157:r13"",""x123:r9b"",""x110:r10"",""x109:rbp"",""x147:dl"",""x161:r8b"",""x165:rbx"",""x166:dil"",""x174:rax"",""0xffffffffffffffff:r14"",""x175:CF"",""arg2[3]:rdx""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: 0xffffffffffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x2(r12),x87(r11),x95(cl),x157(r13),x123(r9b),x110(r10),x109(rbp),x147(dl),x161(r8b),x165(rbx),x166(dil),x174(rax),0xffffffffffffffff(r14),arg2[3](rdx); clobs x84,x85,x2,arg2[3],arg2,x147; will spare: 0xffffffffffffffff ";
"	mov r14b, dl; preserving value of x147 into a new reg";
"	mov rdx, [r15 + 0x08 * 3 ]; saving arg2[3] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x87:r11"",""x95:cl"",""x157:r13"",""x123:r9b"",""x110:r10"",""x109:rbp"",""x147:r14b"",""x161:r8b"",""x165:rbx"",""x166:dil"",""x174:rax"",""x175:CF"",""arg2[3]:rdx"",""x85:r12""]";
"	;chose x174 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: arg1, x87, x95, x157, x123, x110, x109, x161, x165, x166, x174";
"	; freeing, i.e. spilling x174, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x87(r11),x95(cl),x157(r13),x123(r9b),x110(r10),x109(rbp),x147(r14b),x161(r8b),x165(rbx),x166(dil),x174(rax),arg2[3](rdx),x85(r12); clobs x84,x85,x2,arg2[3],arg2,x147,x147; will spare: x174 ";
"	mov [rsp + 0x08 * 15 ], rax; spilling x174 to mem";
"	;-- allocation: [""arg1:rsi"",""arg2:r15"",""x87:r11"",""x95:cl"",""x157:r13"",""x123:r9b"",""x110:r10"",""x109:rbp"",""x147:r14b"",""x161:r8b"",""x165:rbx"",""x166:dil"",""x175:CF"",""arg2[3]:rdx"",""x85:r12"",""x84:rax""]";
"	mulx r12, rax, r12; x85, x84<- x2 * arg2[3]";
"	";
"";
"	; add:";
"	; r:x96,f:x97<-add(x95,x87,x84)";
"	; CF: ALIVE,OF: KILLED";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x95:cl"",""x157:r13"",""x123:r9b"",""x110:r10"",""x109:rbp"",""x147:r14b"",""x161:r8b"",""x165:rbx"",""x166:dil"",""x175:CF"",""arg2[3]:rdx"",""x85:r12"",""x84:rax"",""x96:r11""]";
"	;chose arg2[3] to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: arg2[3]";
"	; freeing, i.e. spilling arg2[3], because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x95(cl),x157(r13),x123(r9b),x110(r10),x109(rbp),x147(r14b),x161(r8b),x165(rbx),x166(dil),arg2[3](rdx),x85(r12),x84(rax),x96(r11); clobs x96,x97,x95,x87,x84,x87,0x0; will spare: arg2[3] ";
"	mov rdx, 0x0 ; moving imm to reg";
"	dec rdx; OF<-0x0, preserve CF 3";
"	movzx rcx, cl";
"	adox rcx, rdx; loading flag";
"	adox r11, rax";
"	";
"";
"	; add:";
"	; r:x105,f:x106<-add(x104,x81,x96)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x95:cl"",""x157:r13"",""x123:r9b"",""x110:r10"",""x109:rbp"",""x147:r14b"",""x161:r8b"",""x165:rbx"",""x166:dil"",""x175:CF"",""x85:r12"",""x84:rax"",""-0x1:rdx"",""x97:OF"",""x105:r11""]";
"	; freeing x95 (cl) no dependants anymore";
"	setc cl; spill CF x175 to reg (rcx)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x157:r13"",""x123:r9b"",""x110:r10"",""x109:rbp"",""x147:r14b"",""x161:r8b"",""x165:rbx"",""x166:dil"",""x175:cl"",""x85:r12"",""x84:rax"",""-0x1:rdx"",""x97:OF"",""x105:r11""]";
"	; freeing x84 (rax) no dependants anymore";
"	movzx rax, byte [rsp + 0x08 * 13 ]; load byte memx104 to register64";
"	clc;";
"	adcx rax, rdx; loading flag";
"	adcx r11, [rsp + 0x08 * 5 ]";
"	;chose >>saved<< x3 from:x3, arg2[2][0] and candidates: x3, arg2[2]";
"	mov rdx, [rsp + 0x08 * 6 ]; x3 to rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x3:rdx"",""x104:rax"",""x157:r13"",""x123:r9b"",""x110:r10"",""x109:rbp"",""x147:r14b"",""x161:r8b"",""x165:rbx"",""x166:dil"",""x175:cl"",""x85:r12"",""x97:OF"",""x105:r11"",""x106:CF""]";
"	; freeing x104 (rax) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x3:rdx"",""x157:r13"",""x123:r9b"",""x110:r10"",""x109:rbp"",""x147:r14b"",""x161:r8b"",""x165:rbx"",""x166:dil"",""x175:cl"",""x85:r12"",""x97:OF"",""x105:r11"",""x106:CF"",""x132:rax""]";
"	;chose x85 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: arg1, x157, x123, x110, x109, x147, x161, x165, x166, x175, x85, x105";
"	; freeing, i.e. spilling x85, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x3(rdx),x157(r13),x123(r9b),x110(r10),x109(rbp),x147(r14b),x161(r8b),x165(rbx),x166(dil),x175(cl),x85(r12),x105(r11),x132(rax); clobs x131,x132,x3,arg2[2],arg2,x132; will spare: x85 ";
"	mov [rsp + 0x08 * 16 ], r12; spilling x85 to mem";
"	;-- allocation: [""arg1:rsi"",""arg2:r15"",""x3:rdx"",""x157:r13"",""x123:r9b"",""x110:r10"",""x109:rbp"",""x147:r14b"",""x161:r8b"",""x165:rbx"",""x166:dil"",""x175:cl"",""x97:OF"",""x105:r11"",""x106:CF"",""x132:rax"",""x131:r12""]";
"	mulx rax, r12, [r15 + 0x08 * 2 ]; x132, x131<- x3 * arg2[2]";
"	";
"";
"	; add:";
"	; r:x124,f:x125<-add(x123,x105,x109)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x3:rdx"",""x157:r13"",""x123:r9b"",""x110:r10"",""x109:rbp"",""x147:r14b"",""x161:r8b"",""x165:rbx"",""x166:dil"",""x175:cl"",""x97:OF"",""x106:CF"",""x132:rax"",""x131:r12"",""x124:r11""]";
"	;chose x3 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: arg1, arg2, x3, x157, x110, x147, x161, x165, x166, x175, x132, x131";
"	; freeing, i.e. spilling x3, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x3(rdx),x157(r13),x123(r9b),x110(r10),x109(rbp),x147(r14b),x161(r8b),x165(rbx),x166(dil),x175(cl),x132(rax),x131(r12),x124(r11); clobs x124,x125,x123,x105,x109,x105,x97; will spare: x3 ";
"	mov [rsp + 0x08 * 6 ], rdx; spilling x3 to mem";
"	seto dl; spill OF x97 to reg (rdx)";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x157:r13"",""x123:r9b"",""x110:r10"",""x109:rbp"",""x147:r14b"",""x161:r8b"",""x165:rbx"",""x166:dil"",""x175:cl"",""x97:dl"",""x106:CF"",""x132:rax"",""x131:r12"",""x124:r11""]";
"	;chose x161 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: arg1, arg2, x157, x110, x147, x161, x165, x166, x175, x132, x131";
"	; freeing, i.e. spilling x161, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x157(r13),x123(r9b),x110(r10),x109(rbp),x147(r14b),x161(r8b),x165(rbx),x166(dil),x175(cl),x97(dl),x132(rax),x131(r12),x124(r11); clobs x124,x125,x123,x105,x109,x105,x97,x97,0x0; will spare: x161 ";
"	mov byte [rsp + 0x08 * 17 ], r8b; spilling byte x161 to mem";
"	mov r8, 0x0 ; moving imm to reg";
"	dec r8; OF<-0x0, preserve CF 3";
"	movzx r9, r9b";
"	adox r9, r8; loading flag";
"	adox r11, rbp";
"	";
"";
"	; add:";
"	; r:x139,f:x140<-add(x138,x134,x131)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x157:r13"",""x123:r9b"",""x110:r10"",""x109:rbp"",""x147:r14b"",""x165:rbx"",""x166:dil"",""x175:cl"",""x97:dl"",""x106:CF"",""x132:rax"",""x124:r11"",""-0x1:r8"",""x125:OF"",""x139:r12""]";
"	; freeing x123 (r9b) no dependants anymore";
"	seto r9b; spill OF x125 to reg (r9)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x157:r13"",""x110:r10"",""x109:rbp"",""x147:r14b"",""x165:rbx"",""x166:dil"",""x175:cl"",""x97:dl"",""x106:CF"",""x132:rax"",""x124:r11"",""-0x1:r8"",""x125:r9b"",""x139:r12""]";
"	; freeing x109 (rbp) no dependants anymore";
"	movzx rbp, byte [rsp + 0x08 * 14 ]; load byte memx138 to register64";
"	inc r8; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x157:r13"",""x138:rbp"",""x110:r10"",""x147:r14b"",""x165:rbx"",""x166:dil"",""x175:cl"",""x97:dl"",""x106:CF"",""x132:rax"",""x124:r11"",""x125:r9b"",""x139:r12"",""0x0:r8""]";
"	; freeing 0x0 (r8, since all are neeed, but this one is just an immediate value.";
"	mov r8, -0x1 ; moving imm to reg";
"	adox rbp, r8; loading flag";
"	adox r12, [rsp + 0x08 * 11 ]";
"	";
"";
"	; add:";
"	; r:x162,f:_<-add(x161,x157)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x138:rbp"",""x110:r10"",""x147:r14b"",""x165:rbx"",""x166:dil"",""x175:cl"",""x97:dl"",""x106:CF"",""x132:rax"",""x124:r11"",""x125:r9b"",""x139:r12"",""-0x1:r8"",""x140:OF"",""x162:r13""]";
"	; freeing x138 (rbp) no dependants anymore";
"	movzx rbp, byte [rsp + 0x08 * 17 ]; load byte memx161 to register64";
"	lea r13, [r13+rbp]; r64+m8";
"	;chose >>saved<< x3 from:x3, arg2[3][0] and candidates: x3, arg2[3]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x3:rdx"",""x110:r10"",""x147:r14b"",""x161:rbp"",""x165:rbx"",""x166:dil"",""x175:cl"",""x97:dl"",""x106:CF"",""x132:rax"",""x124:r11"",""x125:r9b"",""x139:r12"",""-0x1:r8"",""x140:OF"",""x162:r13""]";
"	; freeing x161 (rbp) no dependants anymore";
"	mov bpl, dl; preserving value of x97 into a new reg";
"	mov rdx, [rsp + 0x08 * 6 ]; saving x3 in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x110:r10"",""x147:r14b"",""x165:rbx"",""x166:dil"",""x175:cl"",""x97:bpl"",""x106:CF"",""x132:rax"",""x124:r11"",""x125:r9b"",""x139:r12"",""-0x1:r8"",""x140:OF"",""x162:r13"",""x130:rdx""]";
"	;chose -0x1 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x110(r10),x147(r14b),x165(rbx),x166(dil),x175(cl),x97(bpl),x132(rax),x124(r11),x125(r9b),x139(r12),-0x1(r8),x162(r13),x130(rdx); clobs x129,x130,x3,arg2[3],arg2,x97,x97; will spare: -0x1 ";
"	;-- allocation: [""arg1:rsi"",""arg2:r15"",""x110:r10"",""x147:r14b"",""x165:rbx"",""x166:dil"",""x175:cl"",""x97:bpl"",""x106:CF"",""x132:rax"",""x124:r11"",""x125:r9b"",""x139:r12"",""x140:OF"",""x162:r13"",""x130:rdx"",""x129:r8""]";
"	mulx rdx, r8, [r15 + 0x08 * 3 ]; x130, x129<- x3 * arg2[3]";
"	";
"";
"	; add:";
"	; r:x141,f:x142<-add(x140,x132,x129)";
"	; CF: ALIVE,OF: ALIVE";
"	adox r8, rax";
"	";
"";
"	; add:";
"	; r:x98,f:_<-add(x97,x85)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x110:r10"",""x147:r14b"",""x165:rbx"",""x166:dil"",""x175:cl"",""x97:bpl"",""x106:CF"",""x132:rax"",""x124:r11"",""x125:r9b"",""x139:r12"",""x162:r13"",""x130:rdx"",""x142:OF"",""x141:r8""]";
"	; freeing x132 (rax) no dependants anymore";
"	movzx rax,  bpl; x98, copying x97 here, cause x97 is needed in a reg for other than x98, namely all: , x98, size: 1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x110:r10"",""x147:r14b"",""x165:rbx"",""x166:dil"",""x175:cl"",""x97:bpl"",""x106:CF"",""x124:r11"",""x125:r9b"",""x139:r12"",""x162:r13"",""x130:rdx"",""x142:OF"",""x141:r8"",""x98:rax""]";
"	;chose x125 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: arg1, arg2, x110, x147, x165, x166, x175, x124, x125, x139, x162, x130, x141";
"	; freeing, i.e. spilling x125, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x110(r10),x147(r14b),x165(rbx),x166(dil),x175(cl),x97(bpl),x124(r11),x125(r9b),x139(r12),x162(r13),x130(rdx),x141(r8),x98(rax); clobs x98,x97,x85,x97,x98,x85; will spare: x125 ";
"	mov byte [rsp + 0x08 * 18 ], r9b; spilling byte x125 to mem";
"	mov r9, [rsp + 0x08 * 16 ]; load m64 x85 to register64";
"	lea rax, [rax+r9]; r8/64 + m8";
"	";
"";
"	; add:";
"	; r:x107,f:x108<-add(x106,x83,x98)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x110:r10"",""x147:r14b"",""x165:rbx"",""x166:dil"",""x175:cl"",""x85:r9"",""x97:bpl"",""x124:r11"",""x139:r12"",""x162:r13"",""x130:rdx"",""x142:OF"",""x141:r8"",""x98:rax"",""x108:CF""]";
"	; freeing x85 (r9) no dependants anymore";
"	movzx r9, byte [rsp + 0x08 * 9 ]; x107, copying x83 here, cause x83 is needed in a reg for other than x107, namely all: , x107--x108, size: 1";
"	adcx r9, rax";
"	";
"";
"	; add:";
"	; r:x148,f:x149<-add(x147,x124,x139)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x110:r10"",""x147:r14b"",""x165:rbx"",""x166:dil"",""x175:cl"",""x97:bpl"",""x139:r12"",""x162:r13"",""x130:rdx"",""x142:OF"",""x141:r8"",""x98:rax"",""x108:CF"",""x107:r9"",""x148:r11""]";
"	; freeing x97 (bpl) no dependants anymore";
"	setc bpl; spill CF x108 to reg (rbp)";
"	clc;";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x110:r10"",""x147:r14b"",""x165:rbx"",""x166:dil"",""x175:cl"",""x139:r12"",""x162:r13"",""x130:rdx"",""x142:OF"",""x141:r8"",""x98:rax"",""x108:bpl"",""x107:r9"",""x148:r11""]";
"	; freeing x98 (rax) no dependants anymore";
"	mov rax, -0x1 ; moving imm to reg";
"	movzx r14, r14b";
"	adcx r14, rax; loading flag";
"	adcx r11, r12";
"	";
"";
"	; add:";
"	; r:x167,f:x168<-add(x166,x148,x162)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x110:r10"",""x147:r14b"",""x165:rbx"",""x166:dil"",""x175:cl"",""x139:r12"",""x162:r13"",""x130:rdx"",""x142:OF"",""x141:r8"",""x108:bpl"",""x107:r9"",""-0x1:rax"",""x149:CF"",""x167:r11""]";
"	; freeing x147 (r14b) no dependants anymore";
"	seto r14b; spill OF x142 to reg (r14)";
"	inc rax; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x110:r10"",""x165:rbx"",""x166:dil"",""x175:cl"",""x139:r12"",""x162:r13"",""x130:rdx"",""x142:r14b"",""x141:r8"",""x108:bpl"",""x107:r9"",""x149:CF"",""x167:r11"",""0x0:rax""]";
"	; freeing x139 (r12) no dependants anymore";
"	mov r12, -0x1 ; moving imm to reg";
"	movzx rdi, dil";
"	adox rdi, r12; loading flag";
"	adox r11, r13";
"	";
"";
"	; sub:";
"	; r:x176,f:x177<-sub(x175,x167,0xffffffff)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x110:r10"",""x165:rbx"",""x166:dil"",""x175:cl"",""x162:r13"",""x130:rdx"",""x142:r14b"",""x141:r8"",""x108:bpl"",""x107:r9"",""x149:CF"",""x167:r11"",""0x0:rax"",""-0x1:r12"",""x168:OF""]";
"	; freeing x166 (dil) no dependants anymore";
"	setc dil; spill CF x149 to reg (rdi)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x110:r10"",""x165:rbx"",""x175:cl"",""x162:r13"",""x130:rdx"",""x142:r14b"",""x141:r8"",""x108:bpl"",""x107:r9"",""x149:dil"",""x167:r11"",""0x0:rax"",""-0x1:r12"",""x168:OF""]";
"	; freeing x162 (r13) no dependants anymore";
"	seto r13b; spill OF x168 to reg (r13)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x110:r10"",""x165:rbx"",""x175:cl"",""x130:rdx"",""x142:r14b"",""x141:r8"",""x108:bpl"",""x107:r9"",""x149:dil"",""x167:r11"",""0x0:rax"",""-0x1:r12"",""x168:r13b""]";
"	; freeing 0x0 (rax, since all are neeed, but this one is just an immediate value.";
"	movzx rax,  cl; x175, copying x175 here, cause x175 is needed in a reg for other than x175, namely all: , x176--x177, size: 1";
"	add rax, -0x1";
"	; fr:rax,rcx";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x110:r10"",""x165:rbx"",""x130:rdx"",""x142:r14b"",""x141:r8"",""x108:bpl"",""x107:r9"",""x149:dil"",""x167:r11"",""-0x1:r12"",""x168:r13b"",""x177:CF""]";
"	;chose >>RANDOMLY<< rcx from candidates :rax, rcx[1].";
"	mov rcx,  r11; x176, copying x167 here, cause x167 is needed in a reg for other than x176, namely all: , x185, x176--x177, size: 2";
"	; fr:rax";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x110:r10"",""x165:rbx"",""x130:rdx"",""x142:r14b"",""x141:r8"",""x108:bpl"",""x107:r9"",""x149:dil"",""x167:r11"",""-0x1:r12"",""x168:r13b"",""x177:CF"",""x176:rcx""]";
"	;chose >>RANDOMLY<< rax from candidates :rax[0].";
"	mov rax, 0xffffffff ; moving imm to reg";
"	sbb rcx, rax";
"	";
"";
"	; add:";
"	; r:x126,f:x127<-add(x125,x107,x110)";
"	; CF: ALIVE,OF: KILLED";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x110:r10"",""x165:rbx"",""x130:rdx"",""x142:r14b"",""x141:r8"",""x108:bpl"",""x149:dil"",""x167:r11"",""-0x1:r12"",""x168:r13b"",""x177:CF"",""x176:rcx"",""0xffffffff:rax"",""x126:r9""]";
"	;chose 0xffffffff to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: -0x1, 0xffffffff";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x110(r10),x165(rbx),x130(rdx),x142(r14b),x141(r8),x108(bpl),x149(dil),x167(r11),-0x1(r12),x168(r13b),x176(rcx),0xffffffff(rax),x126(r9); clobs x126,x127,x125,x107,x110,x107,x125; will spare: 0xffffffff ";
"	movzx rax, byte [rsp + 0x08 * 18 ]; load byte memx125 to register64";
"	inc r12; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x110:r10"",""x165:rbx"",""x125:rax"",""x130:rdx"",""x142:r14b"",""x141:r8"",""x108:bpl"",""x149:dil"",""x167:r11"",""x168:r13b"",""x177:CF"",""x176:rcx"",""x126:r9"",""0x0:r12""]";
"	; freeing 0x0 (r12, since all are neeed, but this one is just an immediate value.";
"	mov r12, -0x1 ; moving imm to reg";
"	adox rax, r12; loading flag";
"	adox r9, r10";
"	";
"";
"	; add:";
"	; r:x150,f:x151<-add(x149,x126,x141)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x110:r10"",""x165:rbx"",""x125:rax"",""x130:rdx"",""x142:r14b"",""x141:r8"",""x108:bpl"",""x149:dil"",""x167:r11"",""x168:r13b"",""x177:CF"",""x176:rcx"",""-0x1:r12"",""x127:OF"",""x150:r9""]";
"	; freeing x110 (r10) no dependants anymore";
"	setc r10b; spill CF x177 to reg (r10)";
"	clc;";
"	movzx rdi, dil";
"	adcx rdi, r12; loading flag";
"	adcx r9, r8";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x165:rbx"",""x125:rax"",""x130:rdx"",""x142:r14b"",""x141:r8"",""x108:bpl"",""x149:dil"",""x167:r11"",""x168:r13b"",""x177:r10b"",""x176:rcx"",""-0x1:r12"",""x127:OF"",""x150:r9"",""x151:CF""]";
"	; freeing x125 (rax) no dependants anymore";
"	mov rax, 0xffffffff00000001 ; moving imm to reg";
"	;chose >>saved<< x144 from:x144, 0xffffffff00000001[0] and candidates: x144, 0xffffffff00000001";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x144:rdx"",""x165:rbx"",""x130:rdx"",""x142:r14b"",""x141:r8"",""x108:bpl"",""x149:dil"",""x167:r11"",""x168:r13b"",""x177:r10b"",""x176:rcx"",""-0x1:r12"",""x127:OF"",""x150:r9"",""x151:CF"",""0xffffffff00000001:rax""]";
"	; freeing x141 (r8) no dependants anymore";
"	mov r8, rdx; preserving value of x130 into a new reg";
"	mov rdx, [rsp + 0x08 * 12 ]; saving x144 in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x165:rbx"",""x130:r8"",""x142:r14b"",""x108:bpl"",""x149:dil"",""x167:r11"",""x168:r13b"",""x177:r10b"",""x176:rcx"",""-0x1:r12"",""x127:OF"",""x150:r9"",""x151:CF"",""0xffffffff00000001:rax"",""x155:rdx""]";
"	; freeing x149 (dil) no dependants anymore";
"	;-- allocation: [""arg1:rsi"",""arg2:r15"",""x165:rbx"",""x130:r8"",""x142:r14b"",""x108:bpl"",""x167:r11"",""x168:r13b"",""x177:r10b"",""x176:rcx"",""-0x1:r12"",""x127:OF"",""x150:r9"",""x151:CF"",""0xffffffff00000001:rax"",""x155:rdx"",""x154:rdi""]";
"	mulx rdx, rdi, rax; x155, x154<- x144 * 0xffffffff00000001";
"	";
"";
"	; add:";
"	; r:x128,f:_<-add(x127,x108)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x165:rbx"",""x130:r8"",""x142:r14b"",""x108:bpl"",""x167:r11"",""x168:r13b"",""x177:r10b"",""x176:rcx"",""-0x1:r12"",""x127:OF"",""x150:r9"",""x151:CF"",""0xffffffff00000001:rax"",""x155:rdx"",""x154:rdi""]";
"	;chose -0x1 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: -0x1, 0xffffffff00000001";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x165(rbx),x130(r8),x142(r14b),x108(bpl),x167(r11),x168(r13b),x177(r10b),x176(rcx),-0x1(r12),x150(r9),0xffffffff00000001(rax),x155(rdx),x154(rdi); clobs x128,x127,x108,x108; will spare: -0x1 ";
"	movzx r12,  bpl; x128, copying x108 here, cause x108 is needed in a reg for other than x128, namely all: , x128, size: 1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x165:rbx"",""x130:r8"",""x142:r14b"",""x108:bpl"",""x167:r11"",""x168:r13b"",""x177:r10b"",""x176:rcx"",""x127:OF"",""x150:r9"",""x151:CF"",""0xffffffff00000001:rax"",""x155:rdx"",""x154:rdi"",""x128:r12""]";
"	;chose 0xffffffff00000001 to spill because list of spills:x151Lx151Lx151Lx151Lx151Lx151Lx151Lx151Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx125Lx85Lx85Lx85Lx85L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffL0xffffffffLx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174Lx174L-0x1Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx158Lx81Lx81Lx142Lx142Lx142Lx142Lx116Lx116Lx116Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx3Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx89Lx19Lx19Lx19Lx19Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx144Lx104Lx104Lx104Lx104Lx106Lx106Lx106Lx46Lx46Lx46Lx46Lx46Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx103Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx176Lx71Lx71Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Lx16Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Larg2[2]Lx83Lx83Lx83Larg2[1]Larg2[1]Larg2[1]Larg2[1]Lx47Lx47Lx47Lx47Lx47Lx96Lx96Lx96Lx96Lx96Lx96Lx96Lx56Lx56Lx56Lx56Larg2[0]Larg2[0]Larg2[0]Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx1Lx1Lx1Lx37Lx37Lx37Lx37Lx37Lx14Lx14Lx11Lx11Lx11Lx44Lx138Lx138Lx138Lx138Lx138Lx165Lx165Lx165Lx165Larg2[3]Larg2[3]Larg2[3]Lout1Lout1Lout1L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx159Lx159Lx134Lx175Lx175Lx120Lx120Lx120Lx2Lx8 and candidates: 0xffffffff00000001";
"	; freeing, i.e. spilling 0xffffffff00000001, because I am out of ideas";
"	; allocs: arg1(rsi),arg2(r15),x165(rbx),x130(r8),x142(r14b),x108(bpl),x167(r11),x168(r13b),x177(r10b),x176(rcx),x150(r9),0xffffffff00000001(rax),x155(rdx),x154(rdi),x128(r12); clobs x128,x127,x108,x108,x128,0x0; will spare: 0xffffffff00000001 ";
"	mov rax, 0x0 ; moving imm to reg";
"	adox r12, rax";
"	";
"";
"	; add:";
"	; r:x143,f:_<-add(x142,x130)";
"	; CF: ALIVE,OF: KILLED";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x165:rbx"",""x130:r8"",""x142:r14b"",""x108:bpl"",""x167:r11"",""x168:r13b"",""x177:r10b"",""x176:rcx"",""x127:OF"",""x150:r9"",""x151:CF"",""x155:rdx"",""x154:rdi"",""x128:r12"",""0x0:rax""]";
"	; freeing x108 (bpl) no dependants anymore";
"	movzx rbp,  r14b; x143, copying x142 here, cause x142 is needed in a reg for other than x143, namely all: , x143, size: 1";
"	lea rbp, [rbp+r8]";
"	";
"";
"	; add:";
"	; r:x152,f:x153<-add(x151,x128,x143)";
"	; CF: ALIVE,OF: KILLED";
"	adcx rbp, r12";
"	";
"";
"	; add:";
"	; r:x169,f:x170<-add(x168,x150,x154)";
"	; CF: ALIVE,OF: KILLED";
"	dec rax; OF<-0x0, preserve CF 3";
"	movzx r13, r13b";
"	adox r13, rax; loading flag";
"	adox r9, rdi";
"	";
"";
"	; add:";
"	; r:x171,f:x172<-add(x170,x152,x155)";
"	; CF: ALIVE,OF: ALIVE";
"	adox rdx, rbp";
"	";
"";
"	; add:";
"	; r:x173,f:_<-add(x172,x153)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x165:rbx"",""x130:r8"",""x142:r14b"",""x167:r11"",""x168:r13b"",""x177:r10b"",""x176:rcx"",""x154:rdi"",""x128:r12"",""x153:CF"",""x152:rbp"",""x169:r9"",""-0x1:rax"",""x172:OF"",""x171:rdx""]";
"	; freeing x130 (r8) no dependants anymore";
"	seto r8b; spill OF x173 to reg (r8)";
"	adc r8b, 0x0";
"	movzx r8, r8b";
"	";
"";
"	; sub:";
"	; r:x178,f:x179<-sub(x177,x169,0x0)";
"	; CF: ZERO,OF: ZERO";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x165:rbx"",""x142:r14b"",""x167:r11"",""x168:r13b"",""x177:r10b"",""x176:rcx"",""x154:rdi"",""x128:r12"",""x153:CF"",""x152:rbp"",""x169:r9"",""-0x1:rax"",""x172:OF"",""x171:rdx"",""x173:r8b""]";
"	; freeing x142 (r14b) no dependants anymore";
"	movzx r14,  r10b; x177, copying x177 here, cause x177 is needed in a reg for other than x177, namely all: , x178--x179, size: 1";
"	add r14, -0x1";
"	; fr:r10,r14";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x165:rbx"",""x167:r11"",""x168:r13b"",""x176:rcx"",""x154:rdi"",""x128:r12"",""x152:rbp"",""x169:r9"",""-0x1:rax"",""x172:OF"",""x171:rdx"",""x173:r8b"",""x179:CF""]";
"	;chose >>RANDOMLY<< r10 from candidates :r10, r14[0].";
"	mov r10,  r9; x178, copying x169 here, cause x169 is needed in a reg for other than x178, namely all: , x178--x179, x186, size: 2";
"	sbb r10, 0x00000000";
"	";
"";
"	; sub:";
"	; r:x180,f:x181<-sub(x179,x171,0xffffffff00000001)";
"	; CF: ALIVE,OF: ZERO";
"	; fr:r14";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x165:rbx"",""x167:r11"",""x168:r13b"",""x176:rcx"",""x154:rdi"",""x128:r12"",""x152:rbp"",""x169:r9"",""-0x1:rax"",""x172:OF"",""x171:rdx"",""x173:r8b"",""x178:r10"",""x181:CF""]";
"	;chose >>RANDOMLY<< r14 from candidates :r14[0].";
"	mov r14,  rdx; x180, copying x171 here, cause x171 is needed in a reg for other than x180, namely all: , x187, x180--x181, size: 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x165:rbx"",""x167:r11"",""x168:r13b"",""x176:rcx"",""x154:rdi"",""x128:r12"",""x152:rbp"",""x169:r9"",""-0x1:rax"",""x172:OF"",""x171:rdx"",""x173:r8b"",""x178:r10"",""x181:CF"",""x180:r14""]";
"	; freeing x168 (r13b) no dependants anymore";
"	mov r13, 0xffffffff00000001 ; moving imm to reg";
"	sbb r14, r13";
"	";
"";
"	; sub:";
"	; r:_,f:x183<-sub(x181,x173,0x0)";
"	; CF: ALIVE,OF: ZERO";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x165:rbx"",""x167:r11"",""x176:rcx"",""x154:rdi"",""x128:r12"",""x152:rbp"",""x169:r9"",""-0x1:rax"",""x172:OF"",""x171:rdx"",""x173:r8b"",""x178:r10"",""x180:r14"",""0xffffffff00000001:r13"",""x183:CF""]";
"	; freeing x154 (rdi) no dependants anymore";
"	movzx rdi,  r8b; _, copying x173 here, cause x173 is needed in a reg for other than _, namely all: , _--x183, size: 1";
"	sbb rdi, 0x00000000";
"	; the job is: x186 = x183 !== 0 ? x178: x169";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x165:rbx"",""x167:r11"",""x176:rcx"",""x128:r12"",""x152:rbp"",""x169:r9"",""-0x1:rax"",""x172:OF"",""x171:rdx"",""x173:r8b"",""x178:r10"",""x180:r14"",""0xffffffff00000001:r13"",""x183:CF""]";
"	; freeing x128 (r12) no dependants anymore";
"	setc r12b; spill CF x183 to reg (r12)";
"	;-- allocation: [""arg1:rsi"",""arg2:r15"",""x165:rbx"",""x167:r11"",""x176:rcx"",""x152:rbp"",""x169:r9"",""-0x1:rax"",""x172:OF"",""x171:rdx"",""x173:r8b"",""x180:r14"",""0xffffffff00000001:r13"",""x183:r12b"",""x186:r10""]";
"	test r12b, r12b; testing x183";
"	cmovnz r10, r9; if !ZF, x186<- x169 (nzVar)";
"	; the job is: x184 = x183 !== 0 ? x174: x165";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x165:rbx"",""x167:r11"",""x176:rcx"",""x152:rbp"",""x169:r9"",""-0x1:rax"",""x172:OF"",""x171:rdx"",""x173:r8b"",""x180:r14"",""0xffffffff00000001:r13"",""x183:r12b"",""x186:r10""]";
"	; freeing x152 (rbp) no dependants anymore";
"	mov rbp, [rsp + 0x08 * 15 ]; load m64 x174 to register64";
"	;-- allocation: [""arg1:rsi"",""arg2:r15"",""x165:rbx"",""x167:r11"",""x176:rcx"",""x169:r9"",""-0x1:rax"",""x172:OF"",""x171:rdx"",""x173:r8b"",""x180:r14"",""0xffffffff00000001:r13"",""x183:r12b"",""x186:r10"",""x184:rbp""]";
"	test r12b, r12b; testing x183";
"	cmovnz rbp, rbx; if !ZF, x184<- x165 (nzVar)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""arg1:rsi"",""arg2:r15"",""x165:rbx"",""x167:r11"",""x176:rcx"",""x169:r9"",""-0x1:rax"",""x172:OF"",""x171:rdx"",""x173:r8b"",""x180:r14"",""0xffffffff00000001:r13"",""x183:r12b"",""x186:r10"",""x184:rbp""]";
"	; freeing x165 (rbx) no dependants anymore";
"	mov rbx, [rsp + 0x08 * 3 ]; load m64 out1 to register64";
"	;-- allocation: [""out1:rbx"",""arg1:rsi"",""arg2:r15"",""x167:r11"",""x176:rcx"",""x169:r9"",""-0x1:rax"",""x172:OF"",""x171:rdx"",""x173:r8b"",""x180:r14"",""0xffffffff00000001:r13"",""x183:r12b"",""x186:r10"",""x184:rbp""]";
"	mov [rbx + 0x08 * 0 ], rbp; out1[0] = x184";
"	; the job is: x187 = x183 !== 0 ? x180: x171";
"	;-- allocation: [""out1:rbx"",""arg1:rsi"",""arg2:r15"",""x167:r11"",""x176:rcx"",""x169:r9"",""-0x1:rax"",""x172:OF"",""x171:rdx"",""x173:r8b"",""0xffffffff00000001:r13"",""x183:r12b"",""x186:r10"",""x184:rbp"",""x187:r14""]";
"	test r12b, r12b; testing x183";
"	cmovnz r14, rdx; if !ZF, x187<- x171 (nzVar)";
"	; the job is: x185 = x183 !== 0 ? x176: x167";
"	;-- allocation: [""out1:rbx"",""arg1:rsi"",""arg2:r15"",""x167:r11"",""x169:r9"",""-0x1:rax"",""x172:OF"",""x171:rdx"",""x173:r8b"",""0xffffffff00000001:r13"",""x183:r12b"",""x186:r10"",""x184:rbp"",""x187:r14"",""x185:rcx""]";
"	test r12b, r12b; testing x183";
"	cmovnz rcx, r11; if !ZF, x185<- x167 (nzVar)";
"	;-- allocation: [""out1:rbx"",""arg1:rsi"",""arg2:r15"",""x167:r11"",""x169:r9"",""-0x1:rax"",""x172:OF"",""x171:rdx"",""x173:r8b"",""0xffffffff00000001:r13"",""x183:r12b"",""x186:r10"",""x184:rbp"",""x187:r14"",""x185:rcx""]";
"	mov [rbx + 0x08 * 1 ], rcx; out1[1] = x185";
"	;-- allocation: [""out1:rbx"",""arg1:rsi"",""arg2:r15"",""x167:r11"",""x169:r9"",""-0x1:rax"",""x172:OF"",""x171:rdx"",""x173:r8b"",""0xffffffff00000001:r13"",""x183:r12b"",""x184:rbp"",""x187:r14"",""x185:rcx"",""x186:r10""]";
"	mov [rbx + 0x08 * 2 ], r10; out1[2] = x186";
"	;-- allocation: [""out1:rbx"",""arg1:rsi"",""arg2:r15"",""x167:r11"",""x169:r9"",""-0x1:rax"",""x172:OF"",""x171:rdx"",""x173:r8b"",""0xffffffff00000001:r13"",""x183:r12b"",""x184:rbp"",""x185:rcx"",""x186:r10"",""x187:r14""]";
"	mov [rbx + 0x08 * 3 ], r14; out1[3] = x187";
"	mov rbx, [rsp + 0x08 * 19 ]; restoring from stack";
"	mov rbp, [rsp + 0x08 * 20 ]; restoring from stack";
"	mov r12, [rsp + 0x08 * 21 ]; restoring from stack";
"	mov r13, [rsp + 0x08 * 22 ]; restoring from stack";
"	mov r14, [rsp + 0x08 * 23 ]; restoring from stack";
"	mov r15, [rsp + 0x08 * 24 ]; restoring from stack";
"	add rsp, 0xd0 ";
"	ret";
"; cyclecount: 1304";
"; seed 4 ";
"; time Needed: 1709470 ms/ 10000 runs";
"; Time Spent By Invoking Make (measure): 1166434 ms";
"; Ratio (time for make measure)/elapsed: 0.6823366306516054";
"; Reverts a mutation because test was slower: 7784";
"; number tried mutation Permutation: 3398";
"; number tried mutation Spill: 3345";
"; number tried mutation Decision: 3257";
"; FailedEvals (cannot swap because of edge to the next node): 1784";
""].
