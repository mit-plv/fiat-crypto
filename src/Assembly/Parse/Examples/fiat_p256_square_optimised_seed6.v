Require Import Coq.Strings.String Coq.Lists.List.
Import ListNotations.
Local Open Scope string_scope.
Local Open Scope list_scope.
Example example : list string := [
"SECTION .text";
"	GLOBAL fiat_p256_square_optimised";
"";
"fiat_p256_square_optimised:";
"	sub rsp, 0x130 ";
"	mov [rsp + 0x08 * 31 ], rbx; saving to stack";
"	mov [rsp + 0x08 * 32 ], rbp; saving to stack";
"	mov [rsp + 0x08 * 33 ], r12; saving to stack";
"	mov [rsp + 0x08 * 34 ], r13; saving to stack";
"	mov [rsp + 0x08 * 35 ], r14; saving to stack";
"	mov [rsp + 0x08 * 36 ], r15; saving to stack";
"	; rdi contains out1";
"	; rsi contains arg1";
"	; fr:rax,r10,r11,rbx,rbp,r12,r13,r14,r15,rdx,rcx,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi""]";
"	;chose >>RANDOMLY<< r11 from candidates :rax, r10, r11, rbx, rbp, r12, r13, r14, r15, rdx, rcx, r8, r9[2].";
"	mov r11, [rsi + 0x08 * 0 ]; load m64 x4 to register64";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11""]";
"	;chose >>saved<< arg1[0] from:x4, arg1[0][1] and candidates: x4, arg1[0]";
"	mov rdx, [rsi + 0x08 * 0 ]; arg1[0] to rdx";
"	; fr:rax,r10,rbx,rbp,r12,r13,r14,r15,rcx,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11"",""arg1[0]:rdx""]";
"	;chose >>RANDOMLY<< r9 from candidates :rax, r10, rbx, rbp, r12, r13, r14, r15, rcx, r8, r9[10].";
"	; fr:rax,r10,rbx,rbp,r12,r13,r14,r15,rcx,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11"",""arg1[0]:rdx"",""x12:r9""]";
"	;chose >>RANDOMLY<< rbx from candidates :rax, r10, rbx, rbp, r12, r13, r14, r15, rcx, r8[2].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11"",""arg1[0]:rdx"",""x12:r9"",""x11:rbx""]";
"	mulx r9, rbx, r11; x12, x11<- x4 * arg1[0]";
"	; fr:rax,r10,rbp,r12,r13,r14,r15,rcx,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11"",""arg1[0]:rdx"",""x12:r9"",""x11:rbx""]";
"	;chose >>RANDOMLY<< rcx from candidates :rax, r10, rbp, r12, r13, r14, r15, rcx, r8[7].";
"	mov rcx, 0xffffffffffffffff ; moving imm to reg";
"	;chose >>saved<< 0xffffffffffffffff from:x11, 0xffffffffffffffff[1] and candidates: x11, 0xffffffffffffffff";
"	mov rdx, rcx; 0xffffffffffffffff to rdx";
"	; fr:rax,r10,rbp,r12,r13,r14,r15,rcx,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11"",""x12:r9"",""x11:rbx"",""0xffffffffffffffff:rdx""]";
"	;chose >>RANDOMLY<< r15 from candidates :rax, r10, rbp, r12, r13, r14, r15, rcx, r8[6].";
"	; fr:rax,r10,rbp,r12,r13,r14,rcx,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11"",""x12:r9"",""x11:rbx"",""0xffffffffffffffff:rdx"",""x25:r15""]";
"	;chose >>RANDOMLY<< rax from candidates :rax, r10, rbp, r12, r13, r14, rcx, r8[0].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11"",""x12:r9"",""x11:rbx"",""0xffffffffffffffff:rdx"",""x25:r15"",""x24:rax""]";
"	mulx r15, rax, rbx; x25, x24<- x11 * 0xffffffffffffffff";
"	;chose >>saved<< arg1[1] from:x4, arg1[1][1] and candidates: x4, arg1[1]";
"	; fr:r10,rbp,r12,r13,r14,rcx,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11"",""x12:r9"",""x11:rbx"",""0xffffffffffffffff:rdx"",""x25:r15"",""x24:rax"",""arg1[1]:rdx""]";
"	;chose >>RANDOMLY<< r10 from candidates :r10, rbp, r12, r13, r14, rcx, r8[0].";
"	mov r10, rdx; preserving value of 0xffffffffffffffff into a new reg";
"	mov rdx, [rsi + 0x08 * 1 ]; saving arg1[1] in rdx.";
"	; fr:rbp,r12,r13,r14,rcx,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11"",""x12:r9"",""x11:rbx"",""0xffffffffffffffff:r10"",""x25:r15"",""x24:rax"",""arg1[1]:rdx""]";
"	;chose >>RANDOMLY<< rcx from candidates :rbp, r12, r13, r14, rcx, r8[4].";
"	; fr:rbp,r12,r13,r14,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11"",""x12:r9"",""x11:rbx"",""0xffffffffffffffff:r10"",""x25:r15"",""x24:rax"",""arg1[1]:rdx"",""x10:rcx""]";
"	;chose >>RANDOMLY<< r13 from candidates :rbp, r12, r13, r14, r8[2].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11"",""x12:r9"",""x11:rbx"",""0xffffffffffffffff:r10"",""x25:r15"",""x24:rax"",""arg1[1]:rdx"",""x10:rcx"",""x9:r13""]";
"	mulx rcx, r13, r11; x10, x9<- x4 * arg1[1]";
"	";
"";
"	; add:";
"	; r:_,f:x30<-add(0x0,x11,x24)";
"	; CF: KILLED,OF: KILLED";
"	; fr:rbp,r12,r14,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11"",""x12:r9"",""x11:rbx"",""0xffffffffffffffff:r10"",""x25:r15"",""x24:rax"",""arg1[1]:rdx"",""x10:rcx"",""x9:r13""]";
"	;chose >>RANDOMLY<< rbp from candidates :rbp, r12, r14, r8[0].";
"	mov rbp,  rbx; _, copying x11 here, cause x11 is needed in a reg for other than _, namely all: , x22--x23, x20--x21, _--x30, size: 3";
"	;chose >>saved<< c_test_adx from:c_add, c_xor_adx, c_test_adx[2] and candidates: c_add, c_xor_adx, c_test_adx";
"	test al, al";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	adox rbp, rax";
"	";
"";
"	; add:";
"	; r:x13,f:x14<-add(0x0,x12,x9)";
"	; CF: ZERO,OF: ALIVE";
"	adcx r9, r13";
"	; fr:rbp,r12,r14,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11"",""x11:rbx"",""0xffffffffffffffff:r10"",""x25:r15"",""x24:rax"",""arg1[1]:rdx"",""x10:rcx"",""x9:r13"",""x30:OF"",""x13:r9"",""x14:CF""]";
"	;chose >>RANDOMLY<< r14 from candidates :rbp, r12, r14, r8[2].";
"	mov r14, 0xffffffff ; moving imm to reg";
"	;chose >>saved<< 0xffffffff from:x11, 0xffffffff[1] and candidates: x11, 0xffffffff";
"	mov rdx, r14; 0xffffffff to rdx";
"	; fr:rbp,r12,r14,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11"",""x11:rbx"",""0xffffffffffffffff:r10"",""x25:r15"",""x24:rax"",""x10:rcx"",""x9:r13"",""x30:OF"",""x13:r9"",""x14:CF"",""0xffffffff:rdx""]";
"	;chose >>RANDOMLY<< r12 from candidates :rbp, r12, r14, r8[1].";
"	; fr:rbp,r14,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11"",""x11:rbx"",""0xffffffffffffffff:r10"",""x25:r15"",""x24:rax"",""x10:rcx"",""x9:r13"",""x30:OF"",""x13:r9"",""x14:CF"",""0xffffffff:rdx"",""x23:r12""]";
"	;chose >>RANDOMLY<< r14 from candidates :rbp, r14, r8[1].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11"",""x11:rbx"",""0xffffffffffffffff:r10"",""x25:r15"",""x24:rax"",""x10:rcx"",""x9:r13"",""x30:OF"",""x13:r9"",""x14:CF"",""0xffffffff:rdx"",""x23:r12"",""x22:r14""]";
"	mulx r12, r14, rbx; x23, x22<- x11 * 0xffffffff";
"	";
"";
"	; add:";
"	; r:x26,f:x27<-add(0x0,x25,x22)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:rbp,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11"",""x11:rbx"",""0xffffffffffffffff:r10"",""x24:rax"",""x10:rcx"",""x9:r13"",""x30:OF"",""x13:r9"",""x14:CF"",""0xffffffff:rdx"",""x23:r12"",""x22:r14"",""x26:r15""]";
"	;chose >>RANDOMLY<< r8 from candidates :rbp, r8[1].";
"	setc r8b; spill CF x14 to reg (r8)";
"	clc;";
"	adcx r15, r14";
"	";
"";
"	; add:";
"	; r:x31,f:x32<-add(x30,x13,x26)";
"	; CF: ALIVE,OF: ALIVE";
"	adox r15, r9";
"	; fr:rbp";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11"",""x11:rbx"",""0xffffffffffffffff:r10"",""x24:rax"",""x10:rcx"",""x9:r13"",""x13:r9"",""x14:r8b"",""0xffffffff:rdx"",""x23:r12"",""x22:r14"",""x27:CF"",""x32:OF"",""x31:r15""]";
"	;chose >>RANDOMLY<< rbp from candidates :rbp[0].";
"	mov rbp, [rsi + 0x08 * 1 ]; load m64 x1 to register64";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11"",""x11:rbx"",""0xffffffffffffffff:r10"",""x24:rax"",""x10:rcx"",""x9:r13"",""x13:r9"",""x14:r8b"",""0xffffffff:rdx"",""x23:r12"",""x22:r14"",""x27:CF"",""x32:OF"",""x31:r15"",""x1:rbp""]";
"	;chose >>saved<< x1 from:x1, arg1[0][0] and candidates: x1, arg1[0]";
"	xchg rdx, rbp; x1, swapping with 0xffffffff, which is currently in rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11"",""x11:rbx"",""0xffffffffffffffff:r10"",""x24:rax"",""x10:rcx"",""x9:r13"",""x13:r9"",""x14:r8b"",""0xffffffff:rbp"",""x23:r12"",""x22:r14"",""x27:CF"",""x32:OF"",""x31:r15"",""x1:rdx""]";
"	; freeing x24 (rax) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11"",""x11:rbx"",""0xffffffffffffffff:r10"",""x10:rcx"",""x9:r13"",""x13:r9"",""x14:r8b"",""0xffffffff:rbp"",""x23:r12"",""x22:r14"",""x27:CF"",""x32:OF"",""x31:r15"",""x1:rdx"",""x46:rax""]";
"	; freeing x9 (r13) no dependants anymore";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11"",""x11:rbx"",""0xffffffffffffffff:r10"",""x10:rcx"",""x13:r9"",""x14:r8b"",""0xffffffff:rbp"",""x23:r12"",""x22:r14"",""x27:CF"",""x32:OF"",""x31:r15"",""x1:rdx"",""x46:rax"",""x45:r13""]";
"	mulx rax, r13, [rsi + 0x08 * 0 ]; x46, x45<- x1 * arg1[0]";
"	";
"";
"	; add:";
"	; r:x54,f:x55<-add(0x0,x31,x45)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11"",""x11:rbx"",""0xffffffffffffffff:r10"",""x10:rcx"",""x13:r9"",""x14:r8b"",""0xffffffff:rbp"",""x23:r12"",""x22:r14"",""x27:CF"",""x32:OF"",""x1:rdx"",""x46:rax"",""x45:r13"",""x54:r15""]";
"	; freeing x13 (r9) no dependants anymore";
"	setc r9b; spill CF x27 to reg (r9)";
"	clc;";
"	adcx r15, r13";
"	;chose >>saved<< 0xffffffffffffffff from:x54, 0xffffffffffffffff[1] and candidates: x54, 0xffffffffffffffff";
"	xchg rdx, r10; 0xffffffffffffffff, swapping with x1, which is currently in rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11"",""x11:rbx"",""0xffffffffffffffff:rdx"",""x10:rcx"",""x14:r8b"",""0xffffffff:rbp"",""x23:r12"",""x22:r14"",""x27:r9b"",""x32:OF"",""x1:r10"",""x46:rax"",""x45:r13"",""x54:r15"",""x55:CF""]";
"	; freeing x22 (r14) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11"",""x11:rbx"",""0xffffffffffffffff:rdx"",""x10:rcx"",""x14:r8b"",""0xffffffff:rbp"",""x23:r12"",""x27:r9b"",""x32:OF"",""x1:r10"",""x46:rax"",""x45:r13"",""x54:r15"",""x55:CF"",""x69:r14""]";
"	; freeing x45 (r13) no dependants anymore";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:r11"",""x11:rbx"",""0xffffffffffffffff:rdx"",""x10:rcx"",""x14:r8b"",""0xffffffff:rbp"",""x23:r12"",""x27:r9b"",""x32:OF"",""x1:r10"",""x46:rax"",""x54:r15"",""x55:CF"",""x69:r14"",""x68:r13""]";
"	mulx r14, r13, r15; x69, x68<- x54 * 0xffffffffffffffff";
"	;chose >>saved<< x4 from:x4, arg1[2][0] and candidates: x4, arg1[2]";
"	xchg rdx, r11; x4, swapping with 0xffffffffffffffff, which is currently in rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:rdx"",""x11:rbx"",""0xffffffffffffffff:r11"",""x10:rcx"",""x14:r8b"",""0xffffffff:rbp"",""x23:r12"",""x27:r9b"",""x32:OF"",""x1:r10"",""x46:rax"",""x54:r15"",""x55:CF"",""x69:r14"",""x68:r13""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: 0xffffffffffffffff, 0xffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x4(rdx),x11(rbx),0xffffffffffffffff(r11),x10(rcx),x14(r8b),0xffffffff(rbp),x23(r12),x27(r9b),x1(r10),x46(rax),x54(r15),x69(r14),x68(r13); clobs x7,x8,x4,arg1[2],arg1; will spare: 0xffffffffffffffff ";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:rdx"",""x11:rbx"",""x10:rcx"",""x14:r8b"",""0xffffffff:rbp"",""x23:r12"",""x27:r9b"",""x32:OF"",""x1:r10"",""x46:rax"",""x54:r15"",""x55:CF"",""x69:r14"",""x68:r13"",""x8:r11""]";
"	;chose 0xffffffff to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: 0xffffffff";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x4(rdx),x11(rbx),x10(rcx),x14(r8b),0xffffffff(rbp),x23(r12),x27(r9b),x1(r10),x46(rax),x54(r15),x69(r14),x68(r13),x8(r11); clobs x7,x8,x4,arg1[2],arg1,x8; will spare: 0xffffffff ";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:rdx"",""x11:rbx"",""x10:rcx"",""x14:r8b"",""x23:r12"",""x27:r9b"",""x32:OF"",""x1:r10"",""x46:rax"",""x54:r15"",""x55:CF"",""x69:r14"",""x68:r13"",""x8:r11"",""x7:rbp""]";
"	mulx r11, rbp, [rsi + 0x08 * 2 ]; x8, x7<- x4 * arg1[2]";
"	";
"";
"	; add:";
"	; r:x15,f:x16<-add(x14,x10,x7)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x4:rdx"",""x11:rbx"",""x14:r8b"",""x23:r12"",""x27:r9b"",""x32:OF"",""x1:r10"",""x46:rax"",""x54:r15"",""x55:CF"",""x69:r14"",""x68:r13"",""x8:r11"",""x7:rbp"",""x15:rcx""]";
"	;chose arg1 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, arg1, x4, x11, x23, x27, x1, x46, x54, x69, x68, x8";
"	; freeing, i.e. spilling arg1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x4(rdx),x11(rbx),x14(r8b),x23(r12),x27(r9b),x1(r10),x46(rax),x54(r15),x69(r14),x68(r13),x8(r11),x7(rbp),x15(rcx); clobs x15,x16,x14,x10,x7,x10,x55; will spare: arg1 ";
"	mov [rsp + 0x08 * 0 ], rsi; spilling arg1 to mem";
"	setc sil; spill CF x55 to reg (rsi)";
"	clc;";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x4:rdx"",""x11:rbx"",""x14:r8b"",""x23:r12"",""x27:r9b"",""x32:OF"",""x1:r10"",""x46:rax"",""x54:r15"",""x55:sil"",""x69:r14"",""x68:r13"",""x8:r11"",""x7:rbp"",""x15:rcx""]";
"	;chose x54 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, x4, x11, x23, x27, x1, x46, x54, x69, x68, x8";
"	; freeing, i.e. spilling x54, because I am out of ideas";
"	; allocs: out1(rdi),x4(rdx),x11(rbx),x14(r8b),x23(r12),x27(r9b),x1(r10),x46(rax),x54(r15),x55(sil),x69(r14),x68(r13),x8(r11),x7(rbp),x15(rcx); clobs x15,x16,x14,x10,x7,x10,x55,x55,-0x1; will spare: x54 ";
"	mov [rsp + 0x08 * 1 ], r15; spilling x54 to mem";
"	mov r15, -0x1 ; moving imm to reg";
"	movzx r8, r8b";
"	adcx r8, r15; loading flag";
"	adcx rcx, rbp";
"	";
"";
"	; add:";
"	; r:_,f:x74<-add(0x0,x54,x68)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x4:rdx"",""x11:rbx"",""x14:r8b"",""x23:r12"",""x27:r9b"",""x32:OF"",""x1:r10"",""x46:rax"",""x55:sil"",""x69:r14"",""x68:r13"",""x8:r11"",""x7:rbp"",""x15:rcx"",""-0x1:r15"",""x16:CF""]";
"	; freeing x14 (r8b) no dependants anymore";
"	mov r8,  [rsp + 0x08 * 1 ]; _, copying x54 here, cause x54 is needed in a reg for other than _, namely all: , x66--x67, x64--x65, _--x74, size: 3";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x4:rdx"",""x11:rbx"",""x23:r12"",""x27:r9b"",""x32:OF"",""x1:r10"",""x46:rax"",""x55:sil"",""x69:r14"",""x68:r13"",""x8:r11"",""x7:rbp"",""x15:rcx"",""-0x1:r15"",""x16:CF"",""_:r8""]";
"	; freeing x7 (rbp) no dependants anymore";
"	setc bpl; spill CF x16 to reg (rbp)";
"	clc;";
"	adcx r8, r13";
"	";
"";
"	; add:";
"	; r:x28,f:_<-add(x27,x23)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x4:rdx"",""x11:rbx"",""x23:r12"",""x27:r9b"",""x32:OF"",""x1:r10"",""x46:rax"",""x55:sil"",""x69:r14"",""x68:r13"",""x8:r11"",""x15:rcx"",""-0x1:r15"",""x16:bpl"",""x74:CF""]";
"	;chose >>RANDOMLY<< r8 from candidates :r8[0].";
"	movzx r8,  r9b; x28, copying x27 here, cause x27 is needed in a reg for other than x28, namely all: , x28, size: 1";
"	lea r8, [r8+r12]";
"	";
"";
"	; add:";
"	; r:x33,f:x34<-add(x32,x15,x28)";
"	; CF: ALIVE,OF: ALIVE";
"	adox r8, rcx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x4:rdx"",""x11:rbx"",""x23:r12"",""x27:r9b"",""x1:r10"",""x46:rax"",""x55:sil"",""x69:r14"",""x68:r13"",""x8:r11"",""x15:rcx"",""-0x1:r15"",""x16:bpl"",""x74:CF"",""x34:OF"",""x33:r8""]";
"	; freeing x23 (r12) no dependants anymore";
"	mov r12, [rsp + 0x08 * 0 ]; load m64 arg1 to register64";
"	;chose >>saved<< arg1[1] from:x1, arg1[1][1] and candidates: x1, arg1[1]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x4:rdx"",""x11:rbx"",""x27:r9b"",""x1:r10"",""x46:rax"",""x55:sil"",""x69:r14"",""x68:r13"",""x8:r11"",""x15:rcx"",""-0x1:r15"",""x16:bpl"",""x74:CF"",""x34:OF"",""x33:r8"",""arg1[1]:rdx""]";
"	; freeing x27 (r9b) no dependants anymore";
"	mov r9, rdx; preserving value of x4 into a new reg";
"	mov rdx, [r12 + 0x08 * 1 ]; saving arg1[1] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x4:r9"",""x11:rbx"",""x1:r10"",""x46:rax"",""x55:sil"",""x69:r14"",""x68:r13"",""x8:r11"",""x15:rcx"",""-0x1:r15"",""x16:bpl"",""x74:CF"",""x34:OF"",""x33:r8"",""arg1[1]:rdx""]";
"	; freeing x68 (r13) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x4:r9"",""x11:rbx"",""x1:r10"",""x46:rax"",""x55:sil"",""x69:r14"",""x8:r11"",""x15:rcx"",""-0x1:r15"",""x16:bpl"",""x74:CF"",""x34:OF"",""x33:r8"",""arg1[1]:rdx"",""x44:r13""]";
"	; freeing x15 (rcx) no dependants anymore";
"	;-- allocation: [""out1:rdi"",""arg1:r12"",""x4:r9"",""x11:rbx"",""x1:r10"",""x46:rax"",""x55:sil"",""x69:r14"",""x8:r11"",""-0x1:r15"",""x16:bpl"",""x74:CF"",""x34:OF"",""x33:r8"",""arg1[1]:rdx"",""x44:r13"",""x43:rcx""]";
"	mulx r13, rcx, r10; x44, x43<- x1 * arg1[1]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x4:r9"",""x11:rbx"",""x1:r10"",""x46:rax"",""x55:sil"",""x69:r14"",""x8:r11"",""-0x1:r15"",""x16:bpl"",""x74:CF"",""x34:OF"",""x33:r8"",""arg1[1]:rdx"",""x44:r13"",""x43:rcx""]";
"	;chose -0x1 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: -0x1, arg1[1]";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r12),x4(r9),x11(rbx),x1(r10),x46(rax),x55(sil),x69(r14),x8(r11),-0x1(r15),x16(bpl),x33(r8),arg1[1](rdx),x44(r13),x43(rcx); clobs x66,x67,x54,0xffffffff,0xffffffff; will spare: -0x1 ";
"	mov r15, 0xffffffff ; moving imm to reg";
"	;chose >>saved<< 0xffffffff from:x54, 0xffffffff[1] and candidates: x54, 0xffffffff";
"	mov rdx, r15; 0xffffffff to rdx";
"	; fr:r15";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x4:r9"",""x11:rbx"",""x1:r10"",""x46:rax"",""x55:sil"",""x69:r14"",""x8:r11"",""x16:bpl"",""x74:CF"",""x34:OF"",""x33:r8"",""x44:r13"",""x43:rcx"",""0xffffffff:rdx""]";
"	;chose >>RANDOMLY<< r15 from candidates :r15[0].";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x4:r9"",""x11:rbx"",""x1:r10"",""x46:rax"",""x55:sil"",""x69:r14"",""x8:r11"",""x16:bpl"",""x74:CF"",""x34:OF"",""x33:r8"",""x44:r13"",""x43:rcx"",""0xffffffff:rdx"",""x67:r15""]";
"	;chose x16 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, arg1, x4, x11, x1, x46, x55, x69, x8, x16, x33, x44, x43";
"	; freeing, i.e. spilling x16, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r12),x4(r9),x11(rbx),x1(r10),x46(rax),x55(sil),x69(r14),x8(r11),x16(bpl),x33(r8),x44(r13),x43(rcx),0xffffffff(rdx),x67(r15); clobs x66,x67,x54,0xffffffff,0xffffffff,0xffffffff; will spare: x16 ";
"	mov byte [rsp + 0x08 * 2 ], bpl; spilling byte x16 to mem";
"	;-- allocation: [""out1:rdi"",""arg1:r12"",""x4:r9"",""x11:rbx"",""x1:r10"",""x46:rax"",""x55:sil"",""x69:r14"",""x8:r11"",""x74:CF"",""x34:OF"",""x33:r8"",""x44:r13"",""x43:rcx"",""0xffffffff:rdx"",""x67:r15"",""x66:rbp""]";
"	mulx r15, rbp, [rsp + 0x08 * 1 ]; x67, x66<- x54 * 0xffffffff";
"	";
"";
"	; add:";
"	; r:x47,f:x48<-add(0x0,x46,x43)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x4:r9"",""x11:rbx"",""x1:r10"",""x55:sil"",""x69:r14"",""x8:r11"",""x74:CF"",""x34:OF"",""x33:r8"",""x44:r13"",""x43:rcx"",""0xffffffff:rdx"",""x67:r15"",""x66:rbp"",""x47:rax""]";
"	;chose 0xffffffff to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: 0xffffffff";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r12),x4(r9),x11(rbx),x1(r10),x55(sil),x69(r14),x8(r11),x33(r8),x44(r13),x43(rcx),0xffffffff(rdx),x67(r15),x66(rbp),x47(rax); clobs x47,x48,0x0,x46,x43,x46,x74; will spare: 0xffffffff ";
"	setc dl; spill CF x74 to reg (rdx)";
"	clc;";
"	adcx rax, rcx";
"	";
"";
"	; add:";
"	; r:x56,f:x57<-add(x55,x33,x47)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x4:r9"",""x11:rbx"",""x1:r10"",""x55:sil"",""x69:r14"",""x8:r11"",""x74:dl"",""x34:OF"",""x44:r13"",""x43:rcx"",""x67:r15"",""x66:rbp"",""x47:rax"",""x48:CF"",""x56:r8""]";
"	; freeing x43 (rcx) no dependants anymore";
"	setc cl; spill CF x48 to reg (rcx)";
"	clc;";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x4:r9"",""x11:rbx"",""x1:r10"",""x55:sil"",""x69:r14"",""x8:r11"",""x74:dl"",""x34:OF"",""x44:r13"",""x67:r15"",""x66:rbp"",""x47:rax"",""x48:cl"",""x56:r8""]";
"	;chose x67 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, arg1, x4, x11, x1, x69, x8, x74, x44, x67, x66";
"	; freeing, i.e. spilling x67, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r12),x4(r9),x11(rbx),x1(r10),x55(sil),x69(r14),x8(r11),x74(dl),x44(r13),x67(r15),x66(rbp),x47(rax),x48(cl),x56(r8); clobs x56,x57,x55,x33,x47,x33,x48,x48,-0x1; will spare: x67 ";
"	mov [rsp + 0x08 * 3 ], r15; spilling x67 to mem";
"	mov r15, -0x1 ; moving imm to reg";
"	movzx rsi, sil";
"	adcx rsi, r15; loading flag";
"	adcx r8, rax";
"	";
"";
"	; add:";
"	; r:x70,f:x71<-add(0x0,x69,x66)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x4:r9"",""x11:rbx"",""x1:r10"",""x55:sil"",""x8:r11"",""x74:dl"",""x34:OF"",""x44:r13"",""x66:rbp"",""x47:rax"",""x48:cl"",""x56:r8"",""-0x1:r15"",""x57:CF"",""x70:r14""]";
"	; freeing x55 (sil) no dependants anymore";
"	seto sil; spill OF x34 to reg (rsi)";
"	inc r15; OF<-0x0, preserve CF 2";
"	adox r14, rbp";
"	";
"";
"	; add:";
"	; r:x75,f:x76<-add(x74,x56,x70)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x4:r9"",""x11:rbx"",""x1:r10"",""x8:r11"",""x74:dl"",""x34:sil"",""x44:r13"",""x66:rbp"",""x47:rax"",""x48:cl"",""x57:CF"",""x70:r14"",""0x0:r15"",""x71:OF"",""x75:r8""]";
"	; freeing x66 (rbp) no dependants anymore";
"	seto bpl; spill OF x71 to reg (rbp)";
"	dec r15; OF<-0x0, preserve CF 3";
"	movzx rdx, dl";
"	adox rdx, r15; loading flag";
"	adox r8, r14";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x4:r9"",""x11:rbx"",""x1:r10"",""x8:r11"",""x74:dl"",""x34:sil"",""x44:r13"",""x47:rax"",""x48:cl"",""x57:CF"",""x70:r14"",""x71:bpl"",""x75:r8"",""-0x1:r15"",""x76:OF""]";
"	; freeing x74 (dl) no dependants anymore";
"	mov rdx, [r12 + 0x08 * 2 ]; load m64 x2 to register64";
"	;-- allocation: [""out1:rdi"",""arg1:r12"",""x4:r9"",""x11:rbx"",""x1:r10"",""x8:r11"",""x34:sil"",""x44:r13"",""x47:rax"",""x48:cl"",""x57:CF"",""x70:r14"",""x71:bpl"",""x75:r8"",""-0x1:r15"",""x76:OF"",""x2:rdx""]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x4:r9"",""x11:rbx"",""x1:r10"",""x8:r11"",""x34:sil"",""x44:r13"",""x47:rax"",""x48:cl"",""x57:CF"",""x70:r14"",""x71:bpl"",""x75:r8"",""-0x1:r15"",""x76:OF"",""x2:rdx""]";
"	; freeing x47 (rax) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x4:r9"",""x11:rbx"",""x1:r10"",""x8:r11"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:CF"",""x70:r14"",""x71:bpl"",""x75:r8"",""-0x1:r15"",""x76:OF"",""x2:rdx"",""x91:rax""]";
"	; freeing x70 (r14) no dependants anymore";
"	;-- allocation: [""out1:rdi"",""arg1:r12"",""x4:r9"",""x11:rbx"",""x1:r10"",""x8:r11"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:CF"",""x71:bpl"",""x75:r8"",""-0x1:r15"",""x76:OF"",""x2:rdx"",""x91:rax"",""x90:r14""]";
"	mulx rax, r14, [r12 + 0x08 * 0 ]; x91, x90<- x2 * arg1[0]";
"	";
"";
"	; add:";
"	; r:x99,f:x100<-add(0x0,x75,x90)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x4:r9"",""x11:rbx"",""x1:r10"",""x8:r11"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:CF"",""x71:bpl"",""-0x1:r15"",""x76:OF"",""x2:rdx"",""x91:rax"",""x90:r14"",""x99:r8""]";
"	;chose -0x1 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r12),x4(r9),x11(rbx),x1(r10),x8(r11),x34(sil),x44(r13),x48(cl),x71(bpl),-0x1(r15),x2(rdx),x91(rax),x90(r14),x99(r8); clobs x99,x100,0x0,x75,x90,x75,x76; will spare: -0x1 ";
"	seto r15b; spill OF x76 to reg (r15)";
"	;chose >>saved<< -0x1 from:0x0, -0x1[1] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x4:r9"",""x11:rbx"",""x1:r10"",""x8:r11"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:CF"",""x71:bpl"",""x76:r15b"",""x2:rdx"",""x91:rax"",""x90:r14"",""x99:r8""]";
"	;chose arg1 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, arg1, x4, x11, x1, x8, x34, x44, x48, x71, x2, x91";
"	; freeing, i.e. spilling arg1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r12),x4(r9),x11(rbx),x1(r10),x8(r11),x34(sil),x44(r13),x48(cl),x71(bpl),x76(r15b),x2(rdx),x91(rax),x90(r14),x99(r8); clobs x99,x100,0x0,x75,x90,x75,x76,x76,-0x1; will spare: arg1 ";
"	mov [rsp + 0x08 * 0 ], r12; spilling arg1 to mem";
"	mov r12, -0x1 ; moving imm to reg";
"	inc r12; OF<-0x0, preserve CF 2";
"	adox r8, r14";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x4:r9"",""x11:rbx"",""x1:r10"",""x8:r11"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:CF"",""x71:bpl"",""x76:r15b"",""x2:rdx"",""x91:rax"",""x90:r14"",""x99:r8"",""0x0:r12"",""x100:OF""]";
"	; freeing x90 (r14) no dependants anymore";
"	mov r14, [rsp + 0x08 * 0 ]; load m64 arg1 to register64";
"	;chose >>saved<< arg1[3] from:x4, arg1[3][1] and candidates: x4, arg1[3]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r14"",""x4:r9"",""x11:rbx"",""x1:r10"",""x8:r11"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:CF"",""x71:bpl"",""x76:r15b"",""x2:rdx"",""x91:rax"",""x99:r8"",""0x0:r12"",""x100:OF"",""arg1[3]:rdx""]";
"	; freeing 0x0 (r12, since all are neeed, but this one is just an immediate value.";
"	mov r12, rdx; preserving value of x2 into a new reg";
"	mov rdx, [r14 + 0x08 * 3 ]; saving arg1[3] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r14"",""x11:rbx"",""x1:r10"",""x8:r11"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:CF"",""x71:bpl"",""x76:r15b"",""x2:r12"",""x91:rax"",""x99:r8"",""x100:OF"",""arg1[3]:rdx"",""x6:r9""]";
"	;chose x76 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, x11, x1, x8, x34, x44, x48, x71, x76, x91, x99";
"	; freeing, i.e. spilling x76, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r14),x11(rbx),x1(r10),x8(r11),x34(sil),x44(r13),x48(cl),x71(bpl),x76(r15b),x2(r12),x91(rax),x99(r8),arg1[3](rdx),x6(r9); clobs x5,x6,x4,arg1[3],arg1,arg1,arg1,x2,x2; will spare: x76 ";
"	mov byte [rsp + 0x08 * 4 ], r15b; spilling byte x76 to mem";
"	;-- allocation: [""out1:rdi"",""arg1:r14"",""x11:rbx"",""x1:r10"",""x8:r11"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:CF"",""x71:bpl"",""x2:r12"",""x91:rax"",""x99:r8"",""x100:OF"",""arg1[3]:rdx"",""x6:r9"",""x5:r15""]";
"	mulx r9, r15, r9; x6, x5<- x4 * arg1[3]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r14"",""x11:rbx"",""x1:r10"",""x8:r11"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:CF"",""x71:bpl"",""x2:r12"",""x91:rax"",""x99:r8"",""x100:OF"",""arg1[3]:rdx"",""x6:r9"",""x5:r15""]";
"	;chose arg1[3] to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: arg1[3]";
"	; freeing, i.e. spilling arg1[3], because I am out of ideas";
"	; allocs: out1(rdi),arg1(r14),x11(rbx),x1(r10),x8(r11),x34(sil),x44(r13),x48(cl),x71(bpl),x2(r12),x91(rax),x99(r8),arg1[3](rdx),x6(r9),x5(r15); clobs x113,x114,x99,0xffffffffffffffff,0xffffffffffffffff; will spare: arg1[3] ";
"	mov rdx, 0xffffffffffffffff ; moving imm to reg";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r14"",""x11:rbx"",""x1:r10"",""x8:r11"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:CF"",""x71:bpl"",""x2:r12"",""x91:rax"",""x99:r8"",""x100:OF"",""x6:r9"",""x5:r15"",""0xffffffffffffffff:rdx""]";
"	;chose arg1 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, arg1, x11, x1, x8, x34, x44, x48, x71, x2, x91, x6, x5";
"	; freeing, i.e. spilling arg1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r14),x11(rbx),x1(r10),x8(r11),x34(sil),x44(r13),x48(cl),x71(bpl),x2(r12),x91(rax),x99(r8),x6(r9),x5(r15),0xffffffffffffffff(rdx); clobs x113,x114,x99,0xffffffffffffffff,0xffffffffffffffff,0xffffffffffffffff; will spare: arg1 ";
"	mov [rsp + 0x08 * 0 ], r14; spilling arg1 to mem";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x11:rbx"",""x1:r10"",""x8:r11"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:CF"",""x71:bpl"",""x2:r12"",""x91:rax"",""x99:r8"",""x100:OF"",""x6:r9"",""x5:r15"",""0xffffffffffffffff:rdx"",""x114:r14""]";
"	;chose x2 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, x11, x1, x8, x34, x44, x48, x71, x2, x91, x6, x5";
"	; freeing, i.e. spilling x2, because I am out of ideas";
"	; allocs: out1(rdi),x11(rbx),x1(r10),x8(r11),x34(sil),x44(r13),x48(cl),x71(bpl),x2(r12),x91(rax),x99(r8),x6(r9),x5(r15),0xffffffffffffffff(rdx),x114(r14); clobs x113,x114,x99,0xffffffffffffffff,0xffffffffffffffff,0xffffffffffffffff,x114; will spare: x2 ";
"	mov [rsp + 0x08 * 5 ], r12; spilling x2 to mem";
"	;-- allocation: [""out1:rdi"",""x11:rbx"",""x1:r10"",""x8:r11"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:CF"",""x71:bpl"",""x91:rax"",""x99:r8"",""x100:OF"",""x6:r9"",""x5:r15"",""0xffffffffffffffff:rdx"",""x114:r14"",""x113:r12""]";
"	mulx r14, r12, r8; x114, x113<- x99 * 0xffffffffffffffff";
"	";
"";
"	; add:";
"	; r:_,f:x119<-add(0x0,x99,x113)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x11:rbx"",""x1:r10"",""x8:r11"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:CF"",""x71:bpl"",""x91:rax"",""x99:r8"",""x100:OF"",""x6:r9"",""x5:r15"",""0xffffffffffffffff:rdx"",""x114:r14"",""x113:r12""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: 0xffffffffffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: out1(rdi),x11(rbx),x1(r10),x8(r11),x34(sil),x44(r13),x48(cl),x71(bpl),x91(rax),x99(r8),x6(r9),x5(r15),0xffffffffffffffff(rdx),x114(r14),x113(r12); clobs _,x119,0x0,x99,x113,x99; will spare: 0xffffffffffffffff ";
"	mov rdx,  r8; _, copying x99 here, cause x99 is needed in a reg for other than _, namely all: , _--x119, x109--x110, x111--x112, size: 3";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x11:rbx"",""x1:r10"",""x8:r11"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:CF"",""x71:bpl"",""x91:rax"",""x99:r8"",""x100:OF"",""x6:r9"",""x5:r15"",""x114:r14"",""x113:r12"",""_:rdx""]";
"	;chose x114 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, x11, x1, x8, x34, x44, x48, x71, x91, x6, x5, x114";
"	; freeing, i.e. spilling x114, because I am out of ideas";
"	; allocs: out1(rdi),x11(rbx),x1(r10),x8(r11),x34(sil),x44(r13),x48(cl),x71(bpl),x91(rax),x99(r8),x6(r9),x5(r15),x114(r14),x113(r12),_(rdx); clobs _,x119,0x0,x99,x113,x99,_,x100; will spare: x114 ";
"	mov [rsp + 0x08 * 6 ], r14; spilling x114 to mem";
"	seto r14b; spill OF x100 to reg (r14)";
"	;chose >>RANDOMLY<< -0x1 from candidates :0x0, -0x1[1].";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x11:rbx"",""x1:r10"",""x8:r11"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:CF"",""x71:bpl"",""x91:rax"",""x99:r8"",""x100:r14b"",""x6:r9"",""x5:r15"",""x113:r12"",""_:rdx""]";
"	;chose x1 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, x11, x1, x8, x34, x44, x48, x71, x91, x6, x5";
"	; freeing, i.e. spilling x1, because I am out of ideas";
"	; allocs: out1(rdi),x11(rbx),x1(r10),x8(r11),x34(sil),x44(r13),x48(cl),x71(bpl),x91(rax),x99(r8),x100(r14b),x6(r9),x5(r15),x113(r12),_(rdx); clobs _,x119,0x0,x99,x113,x99,_,x100,x100,-0x1; will spare: x1 ";
"	mov [rsp + 0x08 * 7 ], r10; spilling x1 to mem";
"	mov r10, -0x1 ; moving imm to reg";
"	inc r10; OF<-0x0, preserve CF 2";
"	adox rdx, r12";
"	";
"";
"	; add:";
"	; r:x17,f:x18<-add(x16,x8,x5)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:rdx";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x11:rbx"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:CF"",""x71:bpl"",""x91:rax"",""x99:r8"",""x100:r14b"",""x6:r9"",""x5:r15"",""x113:r12"",""0x0:r10"",""x119:OF"",""x17:r11""]";
"	;chose >>RANDOMLY<< rdx from candidates :rdx[0].";
"	setc dl; spill CF x57 to reg (rdx)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x11:rbx"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:dl"",""x71:bpl"",""x91:rax"",""x99:r8"",""x100:r14b"",""x6:r9"",""x5:r15"",""x113:r12"",""0x0:r10"",""x119:OF"",""x17:r11""]";
"	; freeing x113 (r12) no dependants anymore";
"	movzx r12, byte [rsp + 0x08 * 2 ]; load byte memx16 to register64";
"	clc;";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x11:rbx"",""x16:r12"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:dl"",""x71:bpl"",""x91:rax"",""x99:r8"",""x100:r14b"",""x6:r9"",""x5:r15"",""0x0:r10"",""x119:OF"",""x17:r11""]";
"	; freeing 0x0 (r10, since all are neeed, but this one is just an immediate value.";
"	mov r10, -0x1 ; moving imm to reg";
"	adcx r12, r10; loading flag";
"	adcx r11, r15";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x11:rbx"",""x16:r12"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:dl"",""x71:bpl"",""x91:rax"",""x99:r8"",""x100:r14b"",""x6:r9"",""x5:r15"",""x119:OF"",""x17:r11"",""-0x1:r10"",""x18:CF""]";
"	; freeing x16 (r12) no dependants anymore";
"	mov r12, [rsp + 0x08 * 0 ]; load m64 arg1 to register64";
"	;chose >>saved<< arg1[2] from:x1, arg1[2][1] and candidates: x1, arg1[2]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x11:rbx"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:dl"",""x71:bpl"",""x91:rax"",""x99:r8"",""x100:r14b"",""x6:r9"",""x5:r15"",""x119:OF"",""x17:r11"",""-0x1:r10"",""x18:CF"",""arg1[2]:rdx""]";
"	; freeing x5 (r15) no dependants anymore";
"	mov r15b, dl; preserving value of x57 into a new reg";
"	mov rdx, [r12 + 0x08 * 2 ]; saving arg1[2] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x11:rbx"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:r15b"",""x71:bpl"",""x91:rax"",""x99:r8"",""x100:r14b"",""x6:r9"",""x119:OF"",""x17:r11"",""-0x1:r10"",""x18:CF"",""arg1[2]:rdx""]";
"	;chose -0x1 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r12),x11(rbx),x34(sil),x44(r13),x48(cl),x57(r15b),x71(bpl),x91(rax),x99(r8),x100(r14b),x6(r9),x17(r11),-0x1(r10),arg1[2](rdx); clobs x41,x42,x1,arg1[2],arg1,arg1,arg1,x57,x57; will spare: -0x1 ";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x11:rbx"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:r15b"",""x71:bpl"",""x91:rax"",""x99:r8"",""x100:r14b"",""x6:r9"",""x119:OF"",""x17:r11"",""x18:CF"",""arg1[2]:rdx"",""x42:r10""]";
"	;chose x99 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, x11, x34, x44, x48, x71, x91, x99, x100, x6, x17";
"	; freeing, i.e. spilling x99, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r12),x11(rbx),x34(sil),x44(r13),x48(cl),x57(r15b),x71(bpl),x91(rax),x99(r8),x100(r14b),x6(r9),x17(r11),arg1[2](rdx),x42(r10); clobs x41,x42,x1,arg1[2],arg1,arg1,arg1,x57,x57,x42; will spare: x99 ";
"	mov [rsp + 0x08 * 8 ], r8; spilling x99 to mem";
"	;-- allocation: [""out1:rdi"",""arg1:r12"",""x11:rbx"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:r15b"",""x71:bpl"",""x91:rax"",""x100:r14b"",""x6:r9"",""x119:OF"",""x17:r11"",""x18:CF"",""arg1[2]:rdx"",""x42:r10"",""x41:r8""]";
"	mulx r10, r8, [rsp + 0x08 * 7 ]; x42, x41<- x1 * arg1[2]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x11:rbx"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:r15b"",""x71:bpl"",""x91:rax"",""x100:r14b"",""x6:r9"",""x119:OF"",""x17:r11"",""x18:CF"",""arg1[2]:rdx"",""x42:r10"",""x41:r8""]";
"	;chose arg1[2] to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: arg1[2]";
"	; freeing, i.e. spilling arg1[2], because I am out of ideas";
"	; allocs: out1(rdi),arg1(r12),x11(rbx),x34(sil),x44(r13),x48(cl),x57(r15b),x71(bpl),x91(rax),x100(r14b),x6(r9),x17(r11),arg1[2](rdx),x42(r10),x41(r8); clobs x20,x21,x11,0xffffffff00000001,0xffffffff00000001; will spare: arg1[2] ";
"	mov rdx, 0xffffffff00000001 ; moving imm to reg";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:r15b"",""x71:bpl"",""x91:rax"",""x100:r14b"",""x6:r9"",""x119:OF"",""x17:r11"",""x18:CF"",""x42:r10"",""x41:r8"",""0xffffffff00000001:rdx"",""x21:rbx""]";
"	;chose arg1 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, arg1, x34, x44, x48, x57, x71, x91, x100, x6, x17, x42, x41";
"	; freeing, i.e. spilling arg1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r12),x34(sil),x44(r13),x48(cl),x57(r15b),x71(bpl),x91(rax),x100(r14b),x6(r9),x17(r11),x42(r10),x41(r8),0xffffffff00000001(rdx),x21(rbx); clobs x20,x21,x11,0xffffffff00000001,0xffffffff00000001,0xffffffff00000001; will spare: arg1 ";
"	mov [rsp + 0x08 * 0 ], r12; spilling arg1 to mem";
"	;-- allocation: [""out1:rdi"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:r15b"",""x71:bpl"",""x91:rax"",""x100:r14b"",""x6:r9"",""x119:OF"",""x17:r11"",""x18:CF"",""x42:r10"",""x41:r8"",""0xffffffff00000001:rdx"",""x21:rbx"",""x20:r12""]";
"	mulx rbx, r12, rbx; x21, x20<- x11 * 0xffffffff00000001";
"	";
"";
"	; add:";
"	; r:x35,f:x36<-add(x34,x17,x20)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:r15b"",""x71:bpl"",""x91:rax"",""x100:r14b"",""x6:r9"",""x119:OF"",""x18:CF"",""x42:r10"",""x41:r8"",""0xffffffff00000001:rdx"",""x21:rbx"",""x20:r12"",""x35:r11""]";
"	;chose 0xffffffff00000001 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: 0xffffffff00000001";
"	; freeing, i.e. spilling 0xffffffff00000001, because I am out of ideas";
"	; allocs: out1(rdi),x34(sil),x44(r13),x48(cl),x57(r15b),x71(bpl),x91(rax),x100(r14b),x6(r9),x42(r10),x41(r8),0xffffffff00000001(rdx),x21(rbx),x20(r12),x35(r11); clobs x35,x36,x34,x17,x20,x17,x119; will spare: 0xffffffff00000001 ";
"	seto dl; spill OF x119 to reg (rdx)";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x34:sil"",""x44:r13"",""x48:cl"",""x57:r15b"",""x71:bpl"",""x91:rax"",""x100:r14b"",""x6:r9"",""x119:dl"",""x18:CF"",""x42:r10"",""x41:r8"",""x21:rbx"",""x20:r12"",""x35:r11""]";
"	;chose x42 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, x44, x48, x57, x71, x91, x100, x6, x42, x41, x21";
"	; freeing, i.e. spilling x42, because I am out of ideas";
"	; allocs: out1(rdi),x34(sil),x44(r13),x48(cl),x57(r15b),x71(bpl),x91(rax),x100(r14b),x6(r9),x119(dl),x42(r10),x41(r8),x21(rbx),x20(r12),x35(r11); clobs x35,x36,x34,x17,x20,x17,x119,x119,0x0; will spare: x42 ";
"	mov [rsp + 0x08 * 9 ], r10; spilling x42 to mem";
"	mov r10, 0x0 ; moving imm to reg";
"	dec r10; OF<-0x0, preserve CF 3";
"	movzx rsi, sil";
"	adox rsi, r10; loading flag";
"	adox r11, r12";
"	";
"";
"	; add:";
"	; r:x49,f:x50<-add(x48,x44,x41)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x34:sil"",""x48:cl"",""x57:r15b"",""x71:bpl"",""x91:rax"",""x100:r14b"",""x6:r9"",""x119:dl"",""x18:CF"",""x41:r8"",""x21:rbx"",""x20:r12"",""x35:r11"",""-0x1:r10"",""x36:OF"",""x49:r13""]";
"	; freeing x34 (sil) no dependants anymore";
"	seto sil; spill OF x36 to reg (rsi)";
"	inc r10; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x48:cl"",""x57:r15b"",""x71:bpl"",""x91:rax"",""x100:r14b"",""x6:r9"",""x119:dl"",""x18:CF"",""x41:r8"",""x21:rbx"",""x20:r12"",""x35:r11"",""x36:sil"",""x49:r13"",""0x0:r10""]";
"	; freeing x20 (r12) no dependants anymore";
"	mov r12, -0x1 ; moving imm to reg";
"	movzx rcx, cl";
"	adox rcx, r12; loading flag";
"	adox r13, r8";
"	";
"";
"	; add:";
"	; r:x72,f:_<-add(x71,x67)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x48:cl"",""x57:r15b"",""x71:bpl"",""x91:rax"",""x100:r14b"",""x6:r9"",""x119:dl"",""x18:CF"",""x41:r8"",""x21:rbx"",""x35:r11"",""x36:sil"",""x49:r13"",""0x0:r10"",""-0x1:r12"",""x50:OF""]";
"	; freeing x48 (cl) no dependants anymore";
"	movzx rcx,  bpl; x72, copying x71 here, cause x71 is needed in a reg for other than x72, namely all: , x72, size: 1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x57:r15b"",""x71:bpl"",""x91:rax"",""x100:r14b"",""x6:r9"",""x119:dl"",""x18:CF"",""x41:r8"",""x21:rbx"",""x35:r11"",""x36:sil"",""x49:r13"",""0x0:r10"",""-0x1:r12"",""x50:OF"",""x72:rcx""]";
"	; freeing x41 (r8) no dependants anymore";
"	mov r8, [rsp + 0x08 * 3 ]; load m64 x67 to register64";
"	lea rcx, [rcx+r8]; r8/64 + m8";
"	";
"";
"	; add:";
"	; r:x58,f:x59<-add(x57,x35,x49)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x67:r8"",""x57:r15b"",""x71:bpl"",""x91:rax"",""x100:r14b"",""x6:r9"",""x119:dl"",""x18:CF"",""x21:rbx"",""x36:sil"",""x49:r13"",""0x0:r10"",""-0x1:r12"",""x50:OF"",""x72:rcx"",""x58:r11""]";
"	; freeing x67 (r8) no dependants anymore";
"	setc r8b; spill CF x18 to reg (r8)";
"	clc;";
"	movzx r15, r15b";
"	adcx r15, r12; loading flag";
"	adcx r11, r13";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x57:r15b"",""x71:bpl"",""x91:rax"",""x100:r14b"",""x6:r9"",""x119:dl"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x49:r13"",""0x0:r10"",""-0x1:r12"",""x50:OF"",""x72:rcx"",""x58:r11"",""x59:CF""]";
"	; freeing x57 (r15b) no dependants anymore";
"	mov r15, [rsp + 0x08 * 0 ]; load m64 arg1 to register64";
"	;chose >>saved<< x2 from:x2, arg1[1][0] and candidates: x2, arg1[1]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r15"",""x71:bpl"",""x2:rdx"",""x91:rax"",""x100:r14b"",""x6:r9"",""x119:dl"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x49:r13"",""0x0:r10"",""-0x1:r12"",""x50:OF"",""x72:rcx"",""x58:r11"",""x59:CF""]";
"	; freeing x71 (bpl) no dependants anymore";
"	mov bpl, dl; preserving value of x119 into a new reg";
"	mov rdx, [rsp + 0x08 * 5 ]; saving x2 in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r15"",""x2:rdx"",""x91:rax"",""x100:r14b"",""x6:r9"",""x119:bpl"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x49:r13"",""0x0:r10"",""-0x1:r12"",""x50:OF"",""x72:rcx"",""x58:r11"",""x59:CF""]";
"	; freeing x49 (r13) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r15"",""x2:rdx"",""x91:rax"",""x100:r14b"",""x6:r9"",""x119:bpl"",""x18:r8b"",""x21:rbx"",""x36:sil"",""0x0:r10"",""-0x1:r12"",""x50:OF"",""x72:rcx"",""x58:r11"",""x59:CF"",""x89:r13""]";
"	; freeing 0x0 (r10, since all are neeed, but this one is just an immediate value.";
"	;-- allocation: [""out1:rdi"",""arg1:r15"",""x2:rdx"",""x91:rax"",""x100:r14b"",""x6:r9"",""x119:bpl"",""x18:r8b"",""x21:rbx"",""x36:sil"",""-0x1:r12"",""x50:OF"",""x72:rcx"",""x58:r11"",""x59:CF"",""x89:r13"",""x88:r10""]";
"	mulx r13, r10, [r15 + 0x08 * 1 ]; x89, x88<- x2 * arg1[1]";
"	";
"";
"	; add:";
"	; r:x77,f:x78<-add(x76,x58,x72)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r15"",""x2:rdx"",""x91:rax"",""x100:r14b"",""x6:r9"",""x119:bpl"",""x18:r8b"",""x21:rbx"",""x36:sil"",""-0x1:r12"",""x50:OF"",""x72:rcx"",""x59:CF"",""x89:r13"",""x88:r10"",""x77:r11""]";
"	;chose -0x1 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r15),x2(rdx),x91(rax),x100(r14b),x6(r9),x119(bpl),x18(r8b),x21(rbx),x36(sil),-0x1(r12),x72(rcx),x89(r13),x88(r10),x77(r11); clobs x77,x78,x76,x58,x72,x58,x59; will spare: -0x1 ";
"	setc r12b; spill CF x59 to reg (r12)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r15"",""x2:rdx"",""x91:rax"",""x100:r14b"",""x6:r9"",""x119:bpl"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:OF"",""x72:rcx"",""x59:r12b"",""x89:r13"",""x88:r10"",""x77:r11""]";
"	;chose x89 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, arg1, x2, x91, x100, x6, x119, x18, x21, x36, x89, x88";
"	; freeing, i.e. spilling x89, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r15),x2(rdx),x91(rax),x100(r14b),x6(r9),x119(bpl),x18(r8b),x21(rbx),x36(sil),x72(rcx),x59(r12b),x89(r13),x88(r10),x77(r11); clobs x77,x78,x76,x58,x72,x58,x59,x59,x76; will spare: x89 ";
"	mov [rsp + 0x08 * 10 ], r13; spilling x89 to mem";
"	movzx r13, byte [rsp + 0x08 * 4 ]; load byte memx76 to register64";
"	clc;";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r15"",""x76:r13"",""x2:rdx"",""x91:rax"",""x100:r14b"",""x6:r9"",""x119:bpl"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:OF"",""x72:rcx"",""x59:r12b"",""x88:r10"",""x77:r11""]";
"	;chose arg1 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, arg1, x2, x91, x100, x6, x119, x18, x21, x36, x88";
"	; freeing, i.e. spilling arg1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r15),x76(r13),x2(rdx),x91(rax),x100(r14b),x6(r9),x119(bpl),x18(r8b),x21(rbx),x36(sil),x72(rcx),x59(r12b),x88(r10),x77(r11); clobs x77,x78,x76,x58,x72,x58,x59,x59,x76,x76,-0x1; will spare: arg1 ";
"	mov [rsp + 0x08 * 0 ], r15; spilling arg1 to mem";
"	mov r15, -0x1 ; moving imm to reg";
"	adcx r13, r15; loading flag";
"	adcx r11, rcx";
"	";
"";
"	; add:";
"	; r:x92,f:x93<-add(0x0,x91,x88)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x76:r13"",""x2:rdx"",""x100:r14b"",""x6:r9"",""x119:bpl"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:OF"",""x72:rcx"",""x59:r12b"",""x88:r10"",""x77:r11"",""-0x1:r15"",""x78:CF"",""x92:rax""]";
"	; freeing x76 (r13) no dependants anymore";
"	seto r13b; spill OF x50 to reg (r13)";
"	inc r15; OF<-0x0, preserve CF 2";
"	adox rax, r10";
"	";
"";
"	; add:";
"	; r:x101,f:x102<-add(x100,x77,x92)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x2:rdx"",""x100:r14b"",""x6:r9"",""x119:bpl"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x72:rcx"",""x59:r12b"",""x88:r10"",""x78:CF"",""x92:rax"",""0x0:r15"",""x93:OF"",""x101:r11""]";
"	; freeing x72 (rcx) no dependants anymore";
"	seto cl; spill OF x93 to reg (rcx)";
"	dec r15; OF<-0x0, preserve CF 3";
"	movzx r14, r14b";
"	adox r14, r15; loading flag";
"	adox r11, rax";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x2:rdx"",""x100:r14b"",""x6:r9"",""x119:bpl"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x88:r10"",""x78:CF"",""x92:rax"",""x93:cl"",""x101:r11"",""-0x1:r15"",""x102:OF""]";
"	; freeing x100 (r14b) no dependants anymore";
"	mov r14, 0xffffffff ; moving imm to reg";
"	;chose >>saved<< 0xffffffff from:x99, 0xffffffff[1] and candidates: x99, 0xffffffff";
"	xchg rdx, r14; 0xffffffff, swapping with x2, which is currently in rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x2:r14"",""x6:r9"",""x119:bpl"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x88:r10"",""x78:CF"",""x92:rax"",""x93:cl"",""x101:r11"",""-0x1:r15"",""x102:OF"",""0xffffffff:rdx""]";
"	; freeing x88 (r10) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x2:r14"",""x6:r9"",""x119:bpl"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x78:CF"",""x92:rax"",""x93:cl"",""x101:r11"",""-0x1:r15"",""x102:OF"",""0xffffffff:rdx"",""x112:r10""]";
"	; freeing x92 (rax) no dependants anymore";
"	;-- allocation: [""out1:rdi"",""x2:r14"",""x6:r9"",""x119:bpl"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x78:CF"",""x93:cl"",""x101:r11"",""-0x1:r15"",""x102:OF"",""0xffffffff:rdx"",""x112:r10"",""x111:rax""]";
"	mulx r10, rax, [rsp + 0x08 * 8 ]; x112, x111<- x99 * 0xffffffff";
"	";
"";
"	; add:";
"	; r:x115,f:x116<-add(0x0,x114,x111)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x2:r14"",""x6:r9"",""x119:bpl"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x78:CF"",""x93:cl"",""x101:r11"",""-0x1:r15"",""x102:OF"",""0xffffffff:rdx"",""x112:r10"",""x111:rax""]";
"	;chose 0xffffffff to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: -0x1, 0xffffffff";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: out1(rdi),x2(r14),x6(r9),x119(bpl),x18(r8b),x21(rbx),x36(sil),x50(r13b),x59(r12b),x93(cl),x101(r11),-0x1(r15),0xffffffff(rdx),x112(r10),x111(rax); clobs x115,x116,0x0,x114,x111,x114; will spare: 0xffffffff ";
"	mov rdx,  [rsp + 0x08 * 6 ]; x115, copying x114 here, cause x114 is needed in a reg for other than x115, namely all: , x115--x116, size: 1";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x2:r14"",""x6:r9"",""x119:bpl"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x78:CF"",""x93:cl"",""x101:r11"",""-0x1:r15"",""x102:OF"",""x112:r10"",""x111:rax"",""x115:rdx""]";
"	;chose -0x1 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: out1(rdi),x2(r14),x6(r9),x119(bpl),x18(r8b),x21(rbx),x36(sil),x50(r13b),x59(r12b),x93(cl),x101(r11),-0x1(r15),x112(r10),x111(rax),x115(rdx); clobs x115,x116,0x0,x114,x111,x114,x115,x102; will spare: -0x1 ";
"	seto r15b; spill OF x102 to reg (r15)";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x2:r14"",""x6:r9"",""x119:bpl"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x78:CF"",""x93:cl"",""x101:r11"",""x102:r15b"",""x112:r10"",""x111:rax"",""x115:rdx""]";
"	;chose x112 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, x2, x6, x119, x18, x21, x36, x50, x59, x93, x101, x112";
"	; freeing, i.e. spilling x112, because I am out of ideas";
"	; allocs: out1(rdi),x2(r14),x6(r9),x119(bpl),x18(r8b),x21(rbx),x36(sil),x50(r13b),x59(r12b),x93(cl),x101(r11),x102(r15b),x112(r10),x111(rax),x115(rdx); clobs x115,x116,0x0,x114,x111,x114,x115,x102,x102,0x0; will spare: x112 ";
"	mov [rsp + 0x08 * 11 ], r10; spilling x112 to mem";
"	mov r10, 0x0 ; moving imm to reg";
"	dec r10; OF<-0x0, preserve CF 3";
"	adox rdx, rax";
"	";
"";
"	; add:";
"	; r:x120,f:x121<-add(x119,x101,x115)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x2:r14"",""x6:r9"",""x119:bpl"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x78:CF"",""x93:cl"",""x102:r15b"",""x111:rax"",""x115:rdx"",""-0x1:r10"",""x116:OF"",""x120:r11""]";
"	; freeing x111 (rax) no dependants anymore";
"	setc al; spill CF x78 to reg (rax)";
"	clc;";
"	movzx rbp, bpl";
"	adcx rbp, r10; loading flag";
"	adcx r11, rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x2:r14"",""x6:r9"",""x119:bpl"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x78:al"",""x93:cl"",""x102:r15b"",""x115:rdx"",""-0x1:r10"",""x116:OF"",""x120:r11"",""x121:CF""]";
"	; freeing x119 (bpl) no dependants anymore";
"	mov rbp, [rsp + 0x08 * 0 ]; load m64 arg1 to register64";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rbp"",""x2:r14"",""x6:r9"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x78:al"",""x93:cl"",""x102:r15b"",""x115:rdx"",""-0x1:r10"",""x116:OF"",""x120:r11"",""x121:CF""]";
"	; freeing x115 (rdx) no dependants anymore";
"	mov rdx, [rbp + 0x08 * 3 ]; load m64 x3 to register64";
"	;-- allocation: [""out1:rdi"",""arg1:rbp"",""x2:r14"",""x6:r9"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x78:al"",""x93:cl"",""x102:r15b"",""-0x1:r10"",""x116:OF"",""x120:r11"",""x121:CF"",""x3:rdx""]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rbp"",""x2:r14"",""x6:r9"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x78:al"",""x93:cl"",""x102:r15b"",""-0x1:r10"",""x116:OF"",""x120:r11"",""x121:CF"",""x3:rdx""]";
"	;chose -0x1 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rbp),x2(r14),x6(r9),x18(r8b),x21(rbx),x36(sil),x50(r13b),x59(r12b),x78(al),x93(cl),x102(r15b),-0x1(r10),x120(r11),x3(rdx); clobs x135,x136,x3,arg1[0],arg1; will spare: -0x1 ";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rbp"",""x2:r14"",""x6:r9"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x78:al"",""x93:cl"",""x102:r15b"",""x116:OF"",""x120:r11"",""x121:CF"",""x3:rdx"",""x136:r10""]";
"	;chose x102 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, x2, x6, x18, x21, x36, x50, x59, x78, x93, x102, x120";
"	; freeing, i.e. spilling x102, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rbp),x2(r14),x6(r9),x18(r8b),x21(rbx),x36(sil),x50(r13b),x59(r12b),x78(al),x93(cl),x102(r15b),x120(r11),x3(rdx),x136(r10); clobs x135,x136,x3,arg1[0],arg1,x136; will spare: x102 ";
"	mov byte [rsp + 0x08 * 12 ], r15b; spilling byte x102 to mem";
"	;-- allocation: [""out1:rdi"",""arg1:rbp"",""x2:r14"",""x6:r9"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x78:al"",""x93:cl"",""x116:OF"",""x120:r11"",""x121:CF"",""x3:rdx"",""x136:r10"",""x135:r15""]";
"	mulx r10, r15, [rbp + 0x08 * 0 ]; x136, x135<- x3 * arg1[0]";
"	";
"";
"	; add:";
"	; r:x144,f:x145<-add(0x0,x120,x135)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rbp"",""x2:r14"",""x6:r9"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x78:al"",""x93:cl"",""x116:OF"",""x121:CF"",""x3:rdx"",""x136:r10"",""x135:r15"",""x144:r11""]";
"	;chose arg1 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, arg1, x2, x6, x18, x21, x36, x50, x59, x78, x93, x3, x136";
"	; freeing, i.e. spilling arg1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rbp),x2(r14),x6(r9),x18(r8b),x21(rbx),x36(sil),x50(r13b),x59(r12b),x78(al),x93(cl),x3(rdx),x136(r10),x135(r15),x144(r11); clobs x144,x145,0x0,x120,x135,x120,x116; will spare: arg1 ";
"	mov [rsp + 0x08 * 0 ], rbp; spilling arg1 to mem";
"	seto bpl; spill OF x116 to reg (rbp)";
"	;chose >>saved<< -0x1 from:0x0, -0x1[1] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x2:r14"",""x6:r9"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x78:al"",""x93:cl"",""x116:bpl"",""x121:CF"",""x3:rdx"",""x136:r10"",""x135:r15"",""x144:r11""]";
"	;chose x2 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, x2, x6, x18, x21, x36, x50, x59, x78, x93, x3, x136";
"	; freeing, i.e. spilling x2, because I am out of ideas";
"	; allocs: out1(rdi),x2(r14),x6(r9),x18(r8b),x21(rbx),x36(sil),x50(r13b),x59(r12b),x78(al),x93(cl),x116(bpl),x3(rdx),x136(r10),x135(r15),x144(r11); clobs x144,x145,0x0,x120,x135,x120,x116,x116,-0x1; will spare: x2 ";
"	mov [rsp + 0x08 * 5 ], r14; spilling x2 to mem";
"	mov r14, -0x1 ; moving imm to reg";
"	inc r14; OF<-0x0, preserve CF 2";
"	adox r11, r15";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x6:r9"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x78:al"",""x93:cl"",""x116:bpl"",""x121:CF"",""x3:rdx"",""x136:r10"",""x135:r15"",""x144:r11"",""0x0:r14"",""x145:OF""]";
"	; freeing x135 (r15) no dependants anymore";
"	mov r15, [rsp + 0x08 * 0 ]; load m64 arg1 to register64";
"	;chose >>saved<< arg1[3] from:x1, arg1[3][1] and candidates: x1, arg1[3]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r15"",""x6:r9"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x78:al"",""x93:cl"",""x116:bpl"",""x121:CF"",""x3:rdx"",""x136:r10"",""x144:r11"",""0x0:r14"",""x145:OF"",""arg1[3]:rdx""]";
"	; freeing 0x0 (r14, since all are neeed, but this one is just an immediate value.";
"	mov r14, rdx; preserving value of x3 into a new reg";
"	mov rdx, [r15 + 0x08 * 3 ]; saving arg1[3] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r15"",""x6:r9"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x78:al"",""x93:cl"",""x116:bpl"",""x121:CF"",""x3:r14"",""x136:r10"",""x144:r11"",""x145:OF"",""arg1[3]:rdx""]";
"	;chose x116 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, x6, x18, x21, x36, x50, x59, x78, x93, x116, x136, x144";
"	; freeing, i.e. spilling x116, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r15),x6(r9),x18(r8b),x21(rbx),x36(sil),x50(r13b),x59(r12b),x78(al),x93(cl),x116(bpl),x3(r14),x136(r10),x144(r11),arg1[3](rdx); clobs x39,x40,x1,arg1[3],arg1,arg1,arg1,x3,x3; will spare: x116 ";
"	mov byte [rsp + 0x08 * 13 ], bpl; spilling byte x116 to mem";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r15"",""x6:r9"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x78:al"",""x93:cl"",""x121:CF"",""x3:r14"",""x136:r10"",""x144:r11"",""x145:OF"",""arg1[3]:rdx"",""x40:rbp""]";
"	;chose x78 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, x6, x18, x21, x36, x50, x59, x78, x93, x136, x144";
"	; freeing, i.e. spilling x78, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r15),x6(r9),x18(r8b),x21(rbx),x36(sil),x50(r13b),x59(r12b),x78(al),x93(cl),x3(r14),x136(r10),x144(r11),arg1[3](rdx),x40(rbp); clobs x39,x40,x1,arg1[3],arg1,arg1,arg1,x3,x3,x40; will spare: x78 ";
"	mov byte [rsp + 0x08 * 14 ], al; spilling byte x78 to mem";
"	;-- allocation: [""out1:rdi"",""arg1:r15"",""x6:r9"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x93:cl"",""x121:CF"",""x3:r14"",""x136:r10"",""x144:r11"",""x145:OF"",""arg1[3]:rdx"",""x40:rbp"",""x39:rax""]";
"	mulx rbp, rax, [rsp + 0x08 * 7 ]; x40, x39<- x1 * arg1[3]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r15"",""x6:r9"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x93:cl"",""x121:CF"",""x3:r14"",""x136:r10"",""x144:r11"",""x145:OF"",""arg1[3]:rdx"",""x40:rbp"",""x39:rax""]";
"	;chose arg1[3] to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: arg1[3]";
"	; freeing, i.e. spilling arg1[3], because I am out of ideas";
"	; allocs: out1(rdi),arg1(r15),x6(r9),x18(r8b),x21(rbx),x36(sil),x50(r13b),x59(r12b),x93(cl),x3(r14),x136(r10),x144(r11),arg1[3](rdx),x40(rbp),x39(rax); clobs x158,x159,x144,0xffffffffffffffff,0xffffffffffffffff; will spare: arg1[3] ";
"	mov rdx, 0xffffffffffffffff ; moving imm to reg";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r15"",""x6:r9"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x93:cl"",""x121:CF"",""x3:r14"",""x136:r10"",""x144:r11"",""x145:OF"",""x40:rbp"",""x39:rax"",""0xffffffffffffffff:rdx""]";
"	;chose arg1 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, arg1, x6, x18, x21, x36, x50, x59, x93, x3, x136, x40, x39";
"	; freeing, i.e. spilling arg1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r15),x6(r9),x18(r8b),x21(rbx),x36(sil),x50(r13b),x59(r12b),x93(cl),x3(r14),x136(r10),x144(r11),x40(rbp),x39(rax),0xffffffffffffffff(rdx); clobs x158,x159,x144,0xffffffffffffffff,0xffffffffffffffff,0xffffffffffffffff; will spare: arg1 ";
"	mov [rsp + 0x08 * 0 ], r15; spilling arg1 to mem";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x6:r9"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x93:cl"",""x121:CF"",""x3:r14"",""x136:r10"",""x144:r11"",""x145:OF"",""x40:rbp"",""x39:rax"",""0xffffffffffffffff:rdx"",""x159:r15""]";
"	;chose x39 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, x6, x18, x21, x36, x50, x59, x93, x3, x136, x40, x39";
"	; freeing, i.e. spilling x39, because I am out of ideas";
"	; allocs: out1(rdi),x6(r9),x18(r8b),x21(rbx),x36(sil),x50(r13b),x59(r12b),x93(cl),x3(r14),x136(r10),x144(r11),x40(rbp),x39(rax),0xffffffffffffffff(rdx),x159(r15); clobs x158,x159,x144,0xffffffffffffffff,0xffffffffffffffff,0xffffffffffffffff,x159; will spare: x39 ";
"	mov [rsp + 0x08 * 15 ], rax; spilling x39 to mem";
"	;-- allocation: [""out1:rdi"",""x6:r9"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x93:cl"",""x121:CF"",""x3:r14"",""x136:r10"",""x144:r11"",""x145:OF"",""x40:rbp"",""0xffffffffffffffff:rdx"",""x159:r15"",""x158:rax""]";
"	mulx r15, rax, r11; x159, x158<- x144 * 0xffffffffffffffff";
"	";
"";
"	; add:";
"	; r:x19,f:_<-add(x18,x6)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x6:r9"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x93:cl"",""x121:CF"",""x3:r14"",""x136:r10"",""x144:r11"",""x145:OF"",""x40:rbp"",""0xffffffffffffffff:rdx"",""x159:r15"",""x158:rax""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: 0xffffffffffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: out1(rdi),x6(r9),x18(r8b),x21(rbx),x36(sil),x50(r13b),x59(r12b),x93(cl),x3(r14),x136(r10),x144(r11),x40(rbp),0xffffffffffffffff(rdx),x159(r15),x158(rax); clobs x19,x18,x6,x18; will spare: 0xffffffffffffffff ";
"	movzx rdx,  r8b; x19, copying x18 here, cause x18 is needed in a reg for other than x19, namely all: , x19, size: 1";
"	lea rdx, [rdx+r9]";
"	";
"";
"	; add:";
"	; r:x37,f:x38<-add(x36,x19,x21)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x6:r9"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x93:cl"",""x121:CF"",""x3:r14"",""x136:r10"",""x144:r11"",""x145:OF"",""x40:rbp"",""x159:r15"",""x158:rax"",""x37:rdx""]";
"	; freeing x6 (r9) no dependants anymore";
"	seto r9b; spill OF x145 to reg (r9)";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x18:r8b"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x93:cl"",""x121:CF"",""x3:r14"",""x136:r10"",""x144:r11"",""x145:r9b"",""x40:rbp"",""x159:r15"",""x158:rax"",""x37:rdx""]";
"	; freeing x18 (r8b) no dependants anymore";
"	mov r8, 0x0 ; moving imm to reg";
"	dec r8; OF<-0x0, preserve CF 3";
"	movzx rsi, sil";
"	adox rsi, r8; loading flag";
"	adox rdx, rbx";
"	";
"";
"	; add:";
"	; r:_,f:x164<-add(0x0,x144,x158)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x21:rbx"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x93:cl"",""x121:CF"",""x3:r14"",""x136:r10"",""x144:r11"",""x145:r9b"",""x40:rbp"",""x159:r15"",""x158:rax"",""x37:rdx"",""-0x1:r8"",""x38:OF""]";
"	; freeing x21 (rbx) no dependants anymore";
"	mov rbx,  r11; _, copying x144 here, cause x144 is needed in a reg for other than _, namely all: , x154--x155, _--x164, x156--x157, size: 3";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x36:sil"",""x50:r13b"",""x59:r12b"",""x93:cl"",""x121:CF"",""x3:r14"",""x136:r10"",""x144:r11"",""x145:r9b"",""x40:rbp"",""x159:r15"",""x158:rax"",""x37:rdx"",""-0x1:r8"",""x38:OF"",""_:rbx""]";
"	; freeing x36 (sil) no dependants anymore";
"	setc sil; spill CF x121 to reg (rsi)";
"	clc;";
"	adcx rbx, rax";
"	";
"";
"	; add:";
"	; r:x51,f:x52<-add(x50,x42,x39)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr m m r";
"	;chose >>saved<< x39 from:x39, x42[0] and candidates: x39, x42";
"	; fr:rbx";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x50:r13b"",""x59:r12b"",""x93:cl"",""x121:sil"",""x3:r14"",""x136:r10"",""x144:r11"",""x145:r9b"",""x40:rbp"",""x159:r15"",""x158:rax"",""x37:rdx"",""-0x1:r8"",""x38:OF"",""x164:CF""]";
"	;chose >>RANDOMLY<< rbx from candidates :rbx[0].";
"	mov rbx, [rsp + 0x08 * 15 ]; load m64 x39 to register64";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x50:r13b"",""x59:r12b"",""x93:cl"",""x121:sil"",""x3:r14"",""x136:r10"",""x144:r11"",""x145:r9b"",""x40:rbp"",""x159:r15"",""x158:rax"",""x37:rdx"",""-0x1:r8"",""x38:OF"",""x164:CF"",""x51:rbx""]";
"	; freeing x158 (rax) no dependants anymore";
"	setc al; spill CF x164 to reg (rax)";
"	clc;";
"	movzx r13, r13b";
"	adcx r13, r8; loading flag";
"	adcx rbx, [rsp + 0x08 * 9 ]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x50:r13b"",""x59:r12b"",""x93:cl"",""x121:sil"",""x3:r14"",""x136:r10"",""x144:r11"",""x145:r9b"",""x40:rbp"",""x159:r15"",""x37:rdx"",""-0x1:r8"",""x38:OF"",""x164:al"",""x51:rbx"",""x52:CF""]";
"	; freeing x50 (r13b) no dependants anymore";
"	mov r13, 0xffffffff00000001 ; moving imm to reg";
"	;chose >>saved<< x54 from:x54, 0xffffffff00000001[0] and candidates: x54, 0xffffffff00000001";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x54:rdx"",""x59:r12b"",""x93:cl"",""x121:sil"",""x3:r14"",""x136:r10"",""x144:r11"",""x145:r9b"",""x40:rbp"",""x159:r15"",""x37:rdx"",""-0x1:r8"",""x38:OF"",""x164:al"",""x51:rbx"",""x52:CF"",""0xffffffff00000001:r13""]";
"	;chose -0x1 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: out1(rdi),x54(rdx),x59(r12b),x93(cl),x121(sil),x3(r14),x136(r10),x144(r11),x145(r9b),x40(rbp),x159(r15),x37(rdx),-0x1(r8),x164(al),x51(rbx),0xffffffff00000001(r13); clobs x64,x65,x54,0xffffffff00000001,0xffffffff00000001,0xffffffff00000001,x37; will spare: -0x1 ";
"	mov r8, rdx; preserving value of x37 into a new reg";
"	mov rdx, [rsp + 0x08 * 1 ]; saving x54 in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x59:r12b"",""x93:cl"",""x121:sil"",""x3:r14"",""x136:r10"",""x144:r11"",""x145:r9b"",""x40:rbp"",""x159:r15"",""x37:r8"",""x38:OF"",""x164:al"",""x51:rbx"",""x52:CF"",""0xffffffff00000001:r13"",""x65:rdx""]";
"	;chose x145 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, x59, x93, x121, x3, x136, x144, x145, x40, x159, x164, x51";
"	; freeing, i.e. spilling x145, because I am out of ideas";
"	; allocs: out1(rdi),x59(r12b),x93(cl),x121(sil),x3(r14),x136(r10),x144(r11),x145(r9b),x40(rbp),x159(r15),x37(r8),x164(al),x51(rbx),0xffffffff00000001(r13),x65(rdx); clobs x64,x65,x54,0xffffffff00000001,0xffffffff00000001,0xffffffff00000001,x37,x37; will spare: x145 ";
"	mov byte [rsp + 0x08 * 16 ], r9b; spilling byte x145 to mem";
"	;-- allocation: [""out1:rdi"",""x59:r12b"",""x93:cl"",""x121:sil"",""x3:r14"",""x136:r10"",""x144:r11"",""x40:rbp"",""x159:r15"",""x37:r8"",""x38:OF"",""x164:al"",""x51:rbx"",""x52:CF"",""0xffffffff00000001:r13"",""x65:rdx"",""x64:r9""]";
"	mulx rdx, r9, r13; x65, x64<- x54 * 0xffffffff00000001";
"	";
"";
"	; add:";
"	; r:x60,f:x61<-add(x59,x37,x51)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x59:r12b"",""x93:cl"",""x121:sil"",""x3:r14"",""x136:r10"",""x144:r11"",""x40:rbp"",""x159:r15"",""x38:OF"",""x164:al"",""x51:rbx"",""x52:CF"",""0xffffffff00000001:r13"",""x65:rdx"",""x64:r9"",""x60:r8""]";
"	;chose 0xffffffff00000001 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: 0xffffffff00000001";
"	; freeing, i.e. spilling 0xffffffff00000001, because I am out of ideas";
"	; allocs: out1(rdi),x59(r12b),x93(cl),x121(sil),x3(r14),x136(r10),x144(r11),x40(rbp),x159(r15),x164(al),x51(rbx),0xffffffff00000001(r13),x65(rdx),x64(r9),x60(r8); clobs x60,x61,x59,x37,x51,x37,x38; will spare: 0xffffffff00000001 ";
"	seto r13b; spill OF x38 to reg (r13)";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x59:r12b"",""x93:cl"",""x121:sil"",""x3:r14"",""x136:r10"",""x144:r11"",""x40:rbp"",""x159:r15"",""x38:r13b"",""x164:al"",""x51:rbx"",""x52:CF"",""x65:rdx"",""x64:r9"",""x60:r8""]";
"	;chose x164 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, x93, x121, x3, x136, x144, x40, x159, x164, x65, x64";
"	; freeing, i.e. spilling x164, because I am out of ideas";
"	; allocs: out1(rdi),x59(r12b),x93(cl),x121(sil),x3(r14),x136(r10),x144(r11),x40(rbp),x159(r15),x38(r13b),x164(al),x51(rbx),x65(rdx),x64(r9),x60(r8); clobs x60,x61,x59,x37,x51,x37,x38,x38,0x0; will spare: x164 ";
"	mov byte [rsp + 0x08 * 17 ], al; spilling byte x164 to mem";
"	mov rax, 0x0 ; moving imm to reg";
"	dec rax; OF<-0x0, preserve CF 3";
"	movzx r12, r12b";
"	adox r12, rax; loading flag";
"	adox r8, rbx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x59:r12b"",""x93:cl"",""x121:sil"",""x3:r14"",""x136:r10"",""x144:r11"",""x40:rbp"",""x159:r15"",""x38:r13b"",""x51:rbx"",""x52:CF"",""x65:rdx"",""x64:r9"",""x60:r8"",""-0x1:rax"",""x61:OF""]";
"	; freeing x59 (r12b) no dependants anymore";
"	mov r12, [rsp + 0x08 * 0 ]; load m64 arg1 to register64";
"	;chose >>saved<< arg1[2] from:x2, arg1[2][1] and candidates: x2, arg1[2]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x93:cl"",""x121:sil"",""x3:r14"",""x136:r10"",""x144:r11"",""x40:rbp"",""x159:r15"",""x38:r13b"",""x51:rbx"",""x52:CF"",""x65:rdx"",""x64:r9"",""x60:r8"",""-0x1:rax"",""x61:OF"",""arg1[2]:rdx""]";
"	; freeing x51 (rbx) no dependants anymore";
"	mov rbx, rdx; preserving value of x65 into a new reg";
"	mov rdx, [r12 + 0x08 * 2 ]; saving arg1[2] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x93:cl"",""x121:sil"",""x3:r14"",""x136:r10"",""x144:r11"",""x40:rbp"",""x159:r15"",""x38:r13b"",""x52:CF"",""x65:rbx"",""x64:r9"",""x60:r8"",""-0x1:rax"",""x61:OF"",""arg1[2]:rdx""]";
"	;chose -0x1 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r12),x93(cl),x121(sil),x3(r14),x136(r10),x144(r11),x40(rbp),x159(r15),x38(r13b),x65(rbx),x64(r9),x60(r8),-0x1(rax),arg1[2](rdx); clobs x86,x87,x2,arg1[2],arg1,arg1,arg1,x65,x65; will spare: -0x1 ";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x93:cl"",""x121:sil"",""x3:r14"",""x136:r10"",""x144:r11"",""x40:rbp"",""x159:r15"",""x38:r13b"",""x52:CF"",""x65:rbx"",""x64:r9"",""x60:r8"",""x61:OF"",""arg1[2]:rdx"",""x87:rax""]";
"	;chose x38 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, x93, x121, x3, x136, x144, x40, x159, x38, x64, x60";
"	; freeing, i.e. spilling x38, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r12),x93(cl),x121(sil),x3(r14),x136(r10),x144(r11),x40(rbp),x159(r15),x38(r13b),x65(rbx),x64(r9),x60(r8),arg1[2](rdx),x87(rax); clobs x86,x87,x2,arg1[2],arg1,arg1,arg1,x65,x65,x87; will spare: x38 ";
"	mov byte [rsp + 0x08 * 18 ], r13b; spilling byte x38 to mem";
"	;-- allocation: [""out1:rdi"",""arg1:r12"",""x93:cl"",""x121:sil"",""x3:r14"",""x136:r10"",""x144:r11"",""x40:rbp"",""x159:r15"",""x52:CF"",""x65:rbx"",""x64:r9"",""x60:r8"",""x61:OF"",""arg1[2]:rdx"",""x87:rax"",""x86:r13""]";
"	mulx rax, r13, [rsp + 0x08 * 5 ]; x87, x86<- x2 * arg1[2]";
"	";
"";
"	; add:";
"	; r:x79,f:x80<-add(x78,x60,x64)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x93:cl"",""x121:sil"",""x3:r14"",""x136:r10"",""x144:r11"",""x40:rbp"",""x159:r15"",""x52:CF"",""x65:rbx"",""x64:r9"",""x61:OF"",""arg1[2]:rdx"",""x87:rax"",""x86:r13"",""x79:r8""]";
"	;chose arg1[2] to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: arg1[2]";
"	; freeing, i.e. spilling arg1[2], because I am out of ideas";
"	; allocs: out1(rdi),arg1(r12),x93(cl),x121(sil),x3(r14),x136(r10),x144(r11),x40(rbp),x159(r15),x65(rbx),x64(r9),arg1[2](rdx),x87(rax),x86(r13),x79(r8); clobs x79,x80,x78,x60,x64,x60,x61; will spare: arg1[2] ";
"	seto dl; spill OF x61 to reg (rdx)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x93:cl"",""x121:sil"",""x3:r14"",""x136:r10"",""x144:r11"",""x40:rbp"",""x159:r15"",""x52:CF"",""x65:rbx"",""x64:r9"",""x61:dl"",""x87:rax"",""x86:r13"",""x79:r8""]";
"	;chose x87 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, arg1, x93, x121, x3, x136, x144, x40, x159, x65, x87, x86";
"	; freeing, i.e. spilling x87, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r12),x93(cl),x121(sil),x3(r14),x136(r10),x144(r11),x40(rbp),x159(r15),x65(rbx),x64(r9),x61(dl),x87(rax),x86(r13),x79(r8); clobs x79,x80,x78,x60,x64,x60,x61,x61,x78; will spare: x87 ";
"	mov [rsp + 0x08 * 19 ], rax; spilling x87 to mem";
"	movzx rax, byte [rsp + 0x08 * 14 ]; load byte memx78 to register64";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x78:rax"",""x93:cl"",""x121:sil"",""x3:r14"",""x136:r10"",""x144:r11"",""x40:rbp"",""x159:r15"",""x52:CF"",""x65:rbx"",""x64:r9"",""x61:dl"",""x86:r13"",""x79:r8""]";
"	;chose arg1 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, arg1, x93, x121, x3, x136, x144, x40, x159, x65, x86";
"	; freeing, i.e. spilling arg1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r12),x78(rax),x93(cl),x121(sil),x3(r14),x136(r10),x144(r11),x40(rbp),x159(r15),x65(rbx),x64(r9),x61(dl),x86(r13),x79(r8); clobs x79,x80,x78,x60,x64,x60,x61,x61,x78,x78,0x0; will spare: arg1 ";
"	mov [rsp + 0x08 * 0 ], r12; spilling arg1 to mem";
"	mov r12, 0x0 ; moving imm to reg";
"	dec r12; OF<-0x0, preserve CF 3";
"	adox rax, r12; loading flag";
"	adox r8, r9";
"	";
"";
"	; add:";
"	; r:x94,f:x95<-add(x93,x89,x86)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x78:rax"",""x93:cl"",""x121:sil"",""x3:r14"",""x136:r10"",""x144:r11"",""x40:rbp"",""x159:r15"",""x52:CF"",""x65:rbx"",""x64:r9"",""x61:dl"",""x79:r8"",""-0x1:r12"",""x80:OF"",""x94:r13""]";
"	; freeing x78 (rax) no dependants anymore";
"	setc al; spill CF x52 to reg (rax)";
"	clc;";
"	movzx rcx, cl";
"	adcx rcx, r12; loading flag";
"	adcx r13, [rsp + 0x08 * 10 ]";
"	";
"";
"	; add:";
"	; r:x103,f:x104<-add(x102,x79,x94)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x93:cl"",""x121:sil"",""x3:r14"",""x136:r10"",""x144:r11"",""x40:rbp"",""x159:r15"",""x52:al"",""x65:rbx"",""x64:r9"",""x61:dl"",""-0x1:r12"",""x80:OF"",""x94:r13"",""x95:CF"",""x103:r8""]";
"	; freeing x93 (cl) no dependants anymore";
"	setc cl; spill CF x95 to reg (rcx)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x121:sil"",""x3:r14"",""x136:r10"",""x144:r11"",""x40:rbp"",""x159:r15"",""x52:al"",""x65:rbx"",""x64:r9"",""x61:dl"",""-0x1:r12"",""x80:OF"",""x94:r13"",""x95:cl"",""x103:r8""]";
"	; freeing x64 (r9) no dependants anymore";
"	movzx r9, byte [rsp + 0x08 * 12 ]; load byte memx102 to register64";
"	clc;";
"	adcx r9, r12; loading flag";
"	adcx r8, r13";
"	";
"";
"	; add:";
"	; r:x117,f:_<-add(x116,x112)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x102:r9"",""x121:sil"",""x3:r14"",""x136:r10"",""x144:r11"",""x40:rbp"",""x159:r15"",""x52:al"",""x65:rbx"",""x61:dl"",""-0x1:r12"",""x80:OF"",""x94:r13"",""x95:cl"",""x103:r8"",""x104:CF""]";
"	; freeing x102 (r9) no dependants anymore";
"	movzx r9, byte [rsp + 0x08 * 13 ]; x117, copying x116 here, cause x116 is needed in a reg for other than x117, namely all: , x117, size: 1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x121:sil"",""x3:r14"",""x136:r10"",""x144:r11"",""x40:rbp"",""x159:r15"",""x52:al"",""x65:rbx"",""x61:dl"",""-0x1:r12"",""x80:OF"",""x94:r13"",""x95:cl"",""x103:r8"",""x104:CF"",""x117:r9""]";
"	; freeing x94 (r13) no dependants anymore";
"	mov r13, [rsp + 0x08 * 11 ]; load m64 x112 to register64";
"	lea r9, [r9+r13]; r8/64 + m8";
"	";
"";
"	; add:";
"	; r:x122,f:x123<-add(x121,x103,x117)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x112:r13"",""x121:sil"",""x3:r14"",""x136:r10"",""x144:r11"",""x40:rbp"",""x159:r15"",""x52:al"",""x65:rbx"",""x61:dl"",""-0x1:r12"",""x80:OF"",""x95:cl"",""x104:CF"",""x117:r9"",""x122:r8""]";
"	; freeing x112 (r13) no dependants anymore";
"	setc r13b; spill CF x104 to reg (r13)";
"	clc;";
"	movzx rsi, sil";
"	adcx rsi, r12; loading flag";
"	adcx r8, r9";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x121:sil"",""x3:r14"",""x136:r10"",""x144:r11"",""x40:rbp"",""x159:r15"",""x52:al"",""x65:rbx"",""x61:dl"",""-0x1:r12"",""x80:OF"",""x95:cl"",""x104:r13b"",""x117:r9"",""x122:r8"",""x123:CF""]";
"	; freeing x121 (sil) no dependants anymore";
"	mov rsi, [rsp + 0x08 * 0 ]; load m64 arg1 to register64";
"	;chose >>saved<< arg1[1] from:x3, arg1[1][1] and candidates: x3, arg1[1]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x3:r14"",""x136:r10"",""x144:r11"",""x40:rbp"",""x159:r15"",""x52:al"",""x65:rbx"",""x61:dl"",""-0x1:r12"",""x80:OF"",""x95:cl"",""x104:r13b"",""x117:r9"",""x122:r8"",""x123:CF"",""arg1[1]:rdx""]";
"	; freeing x117 (r9) no dependants anymore";
"	mov r9b, dl; preserving value of x61 into a new reg";
"	mov rdx, [rsi + 0x08 * 1 ]; saving arg1[1] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x3:r14"",""x136:r10"",""x144:r11"",""x40:rbp"",""x159:r15"",""x52:al"",""x65:rbx"",""x61:r9b"",""-0x1:r12"",""x80:OF"",""x95:cl"",""x104:r13b"",""x122:r8"",""x123:CF"",""arg1[1]:rdx""]";
"	;chose -0x1 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x3(r14),x136(r10),x144(r11),x40(rbp),x159(r15),x52(al),x65(rbx),x61(r9b),-0x1(r12),x95(cl),x104(r13b),x122(r8),arg1[1](rdx); clobs x133,x134,x3,arg1[1],arg1,arg1,arg1,x61,x61; will spare: -0x1 ";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x3:r14"",""x136:r10"",""x144:r11"",""x40:rbp"",""x159:r15"",""x52:al"",""x65:rbx"",""x61:r9b"",""x80:OF"",""x95:cl"",""x104:r13b"",""x122:r8"",""x123:CF"",""arg1[1]:rdx"",""x134:r12""]";
"	;chose x52 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, x136, x144, x40, x159, x52, x65, x95, x104, x122";
"	; freeing, i.e. spilling x52, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x3(r14),x136(r10),x144(r11),x40(rbp),x159(r15),x52(al),x65(rbx),x61(r9b),x95(cl),x104(r13b),x122(r8),arg1[1](rdx),x134(r12); clobs x133,x134,x3,arg1[1],arg1,arg1,arg1,x61,x61,x134; will spare: x52 ";
"	mov byte [rsp + 0x08 * 20 ], al; spilling byte x52 to mem";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x3:r14"",""x136:r10"",""x144:r11"",""x40:rbp"",""x159:r15"",""x65:rbx"",""x61:r9b"",""x80:OF"",""x95:cl"",""x104:r13b"",""x122:r8"",""x123:CF"",""arg1[1]:rdx"",""x134:r12"",""x133:rax""]";
"	mulx r12, rax, r14; x134, x133<- x3 * arg1[1]";
"	";
"";
"	; add:";
"	; r:x137,f:x138<-add(0x0,x136,x133)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x3:r14"",""x144:r11"",""x40:rbp"",""x159:r15"",""x65:rbx"",""x61:r9b"",""x80:OF"",""x95:cl"",""x104:r13b"",""x122:r8"",""x123:CF"",""arg1[1]:rdx"",""x134:r12"",""x133:rax"",""x137:r10""]";
"	;chose arg1[1] to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: arg1[1]";
"	; freeing, i.e. spilling arg1[1], because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x3(r14),x144(r11),x40(rbp),x159(r15),x65(rbx),x61(r9b),x95(cl),x104(r13b),x122(r8),arg1[1](rdx),x134(r12),x133(rax),x137(r10); clobs x137,x138,0x0,x136,x133,x136,x123; will spare: arg1[1] ";
"	setc dl; spill CF x123 to reg (rdx)";
"	clc;";
"	adcx r10, rax";
"	";
"";
"	; add:";
"	; r:x146,f:x147<-add(x145,x122,x137)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x3:r14"",""x144:r11"",""x40:rbp"",""x159:r15"",""x65:rbx"",""x61:r9b"",""x80:OF"",""x95:cl"",""x104:r13b"",""x123:dl"",""x134:r12"",""x133:rax"",""x137:r10"",""x138:CF"",""x146:r8""]";
"	; freeing x133 (rax) no dependants anymore";
"	setc al; spill CF x138 to reg (rax)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x3:r14"",""x144:r11"",""x40:rbp"",""x159:r15"",""x65:rbx"",""x61:r9b"",""x80:OF"",""x95:cl"",""x104:r13b"",""x123:dl"",""x134:r12"",""x137:r10"",""x138:al"",""x146:r8""]";
"	;chose x61 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, arg1, x3, x144, x40, x159, x65, x61, x95, x104, x123, x134";
"	; freeing, i.e. spilling x61, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x3(r14),x144(r11),x40(rbp),x159(r15),x65(rbx),x61(r9b),x95(cl),x104(r13b),x123(dl),x134(r12),x137(r10),x138(al),x146(r8); clobs x146,x147,x145,x122,x137,x122,x138,x138,x145; will spare: x61 ";
"	mov byte [rsp + 0x08 * 21 ], r9b; spilling byte x61 to mem";
"	movzx r9, byte [rsp + 0x08 * 16 ]; load byte memx145 to register64";
"	clc;";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x3:r14"",""x144:r11"",""x145:r9"",""x40:rbp"",""x159:r15"",""x65:rbx"",""x80:OF"",""x95:cl"",""x104:r13b"",""x123:dl"",""x134:r12"",""x137:r10"",""x138:al"",""x146:r8""]";
"	;chose x123 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, arg1, x3, x144, x40, x159, x65, x95, x104, x123, x134";
"	; freeing, i.e. spilling x123, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x3(r14),x144(r11),x145(r9),x40(rbp),x159(r15),x65(rbx),x95(cl),x104(r13b),x123(dl),x134(r12),x137(r10),x138(al),x146(r8); clobs x146,x147,x145,x122,x137,x122,x138,x138,x145,x145,-0x1; will spare: x123 ";
"	mov byte [rsp + 0x08 * 22 ], dl; spilling byte x123 to mem";
"	mov rdx, -0x1 ; moving imm to reg";
"	adcx r9, rdx; loading flag";
"	adcx r8, r10";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x3:r14"",""x144:r11"",""x145:r9"",""x40:rbp"",""x159:r15"",""x65:rbx"",""x80:OF"",""x95:cl"",""x104:r13b"",""x134:r12"",""x137:r10"",""x138:al"",""x146:r8"",""-0x1:rdx"",""x147:CF""]";
"	; freeing x145 (r9) no dependants anymore";
"	mov r9, 0xffffffff ; moving imm to reg";
"	;chose >>saved<< 0xffffffff from:x144, 0xffffffff[1] and candidates: x144, 0xffffffff";
"	mov rdx, r9; 0xffffffff to rdx";
"	; fr:r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x3:r14"",""x144:r11"",""x40:rbp"",""x159:r15"",""x65:rbx"",""x80:OF"",""x95:cl"",""x104:r13b"",""x134:r12"",""x137:r10"",""x138:al"",""x146:r8"",""x147:CF"",""0xffffffff:rdx""]";
"	;chose >>RANDOMLY<< r9 from candidates :r9[0].";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x3:r14"",""x144:r11"",""x40:rbp"",""x159:r15"",""x65:rbx"",""x80:OF"",""x95:cl"",""x104:r13b"",""x134:r12"",""x137:r10"",""x138:al"",""x146:r8"",""x147:CF"",""0xffffffff:rdx"",""x157:r9""]";
"	; freeing x137 (r10) no dependants anymore";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x3:r14"",""x144:r11"",""x40:rbp"",""x159:r15"",""x65:rbx"",""x80:OF"",""x95:cl"",""x104:r13b"",""x134:r12"",""x138:al"",""x146:r8"",""x147:CF"",""0xffffffff:rdx"",""x157:r9"",""x156:r10""]";
"	mulx r9, r10, r11; x157, x156<- x144 * 0xffffffff";
"	";
"";
"	; add:";
"	; r:x160,f:x161<-add(0x0,x159,x156)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x3:r14"",""x144:r11"",""x40:rbp"",""x65:rbx"",""x80:OF"",""x95:cl"",""x104:r13b"",""x134:r12"",""x138:al"",""x146:r8"",""x147:CF"",""0xffffffff:rdx"",""x157:r9"",""x156:r10"",""x160:r15""]";
"	;chose 0xffffffff to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: 0xffffffff";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x3(r14),x144(r11),x40(rbp),x65(rbx),x95(cl),x104(r13b),x134(r12),x138(al),x146(r8),0xffffffff(rdx),x157(r9),x156(r10),x160(r15); clobs x160,x161,0x0,x159,x156,x159,x147; will spare: 0xffffffff ";
"	setc dl; spill CF x147 to reg (rdx)";
"	clc;";
"	adcx r15, r10";
"	";
"";
"	; add:";
"	; r:x165,f:x166<-add(x164,x146,x160)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x3:r14"",""x144:r11"",""x40:rbp"",""x65:rbx"",""x80:OF"",""x95:cl"",""x104:r13b"",""x134:r12"",""x138:al"",""x147:dl"",""x157:r9"",""x156:r10"",""x160:r15"",""x161:CF"",""x165:r8""]";
"	; freeing x156 (r10) no dependants anymore";
"	seto r10b; spill OF x80 to reg (r10)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x3:r14"",""x144:r11"",""x40:rbp"",""x65:rbx"",""x80:r10b"",""x95:cl"",""x104:r13b"",""x134:r12"",""x138:al"",""x147:dl"",""x157:r9"",""x160:r15"",""x161:CF"",""x165:r8""]";
"	;chose arg1 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, arg1, x3, x144, x40, x65, x95, x104, x134, x138, x147, x157";
"	; freeing, i.e. spilling arg1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x3(r14),x144(r11),x40(rbp),x65(rbx),x80(r10b),x95(cl),x104(r13b),x134(r12),x138(al),x147(dl),x157(r9),x160(r15),x165(r8); clobs x165,x166,x164,x146,x160,x146,x80,x80,x164; will spare: arg1 ";
"	mov [rsp + 0x08 * 0 ], rsi; spilling arg1 to mem";
"	movzx rsi, byte [rsp + 0x08 * 17 ]; load byte memx164 to register64";
"	;chose >>saved<< -0x1 from:0x0, -0x1[1] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x3:r14"",""x144:r11"",""x40:rbp"",""x164:rsi"",""x65:rbx"",""x80:r10b"",""x95:cl"",""x104:r13b"",""x134:r12"",""x138:al"",""x147:dl"",""x157:r9"",""x160:r15"",""x161:CF"",""x165:r8""]";
"	;chose x144 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, x3, x144, x40, x65, x95, x104, x134, x138, x147, x157";
"	; freeing, i.e. spilling x144, because I am out of ideas";
"	; allocs: out1(rdi),x3(r14),x144(r11),x40(rbp),x164(rsi),x65(rbx),x80(r10b),x95(cl),x104(r13b),x134(r12),x138(al),x147(dl),x157(r9),x160(r15),x165(r8); clobs x165,x166,x164,x146,x160,x146,x80,x80,x164,x164,-0x1; will spare: x144 ";
"	mov [rsp + 0x08 * 23 ], r11; spilling x144 to mem";
"	mov r11, -0x1 ; moving imm to reg";
"	inc r11; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x3:r14"",""x40:rbp"",""x164:rsi"",""x65:rbx"",""x80:r10b"",""x95:cl"",""x104:r13b"",""x134:r12"",""x138:al"",""x147:dl"",""x157:r9"",""x160:r15"",""x161:CF"",""x165:r8"",""0x0:r11""]";
"	; freeing 0x0 (r11, since all are neeed, but this one is just an immediate value.";
"	mov r11, -0x1 ; moving imm to reg";
"	adox rsi, r11; loading flag";
"	adox r8, r15";
"	";
"";
"	; add:";
"	; r:x53,f:_<-add(x52,x40)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x3:r14"",""x164:rsi"",""x65:rbx"",""x80:r10b"",""x95:cl"",""x104:r13b"",""x134:r12"",""x138:al"",""x147:dl"",""x157:r9"",""x160:r15"",""x161:CF"",""x165:r8"",""-0x1:r11"",""x166:OF"",""x53:rbp""]";
"	; freeing x164 (rsi) no dependants anymore";
"	movzx rsi, byte [rsp + 0x08 * 20 ]; load byte memx52 to register64";
"	lea rbp, [rbp+rsi]; r64+m8";
"	";
"";
"	; sub:";
"	; r:x174,f:x175<-sub(0x0,x165,0xffffffffffffffff)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x3:r14"",""x52:rsi"",""x65:rbx"",""x80:r10b"",""x95:cl"",""x104:r13b"",""x134:r12"",""x138:al"",""x147:dl"",""x157:r9"",""x160:r15"",""x161:CF"",""x165:r8"",""-0x1:r11"",""x166:OF"",""x53:rbp""]";
"	; freeing x52 (rsi) no dependants anymore";
"	setc sil; spill CF x161 to reg (rsi)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x3:r14"",""x65:rbx"",""x80:r10b"",""x95:cl"",""x104:r13b"",""x134:r12"",""x138:al"",""x147:dl"",""x157:r9"",""x160:r15"",""x161:sil"",""x165:r8"",""-0x1:r11"",""x166:OF"",""x53:rbp""]";
"	; freeing x160 (r15) no dependants anymore";
"	seto r15b; spill OF x166 to reg (r15)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x3:r14"",""x65:rbx"",""x80:r10b"",""x95:cl"",""x104:r13b"",""x134:r12"",""x138:al"",""x147:dl"",""x157:r9"",""x161:sil"",""x165:r8"",""-0x1:r11"",""x166:r15b"",""x53:rbp""]";
"	;chose -0x1 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: out1(rdi),x3(r14),x65(rbx),x80(r10b),x95(cl),x104(r13b),x134(r12),x138(al),x147(dl),x157(r9),x161(sil),x165(r8),-0x1(r11),x166(r15b),x53(rbp); clobs x174,x175,0x0,x165,0xffffffffffffffff,x161,x161,x166,x166,x165; will spare: -0x1 ";
"	mov r11,  r8; x174, copying x165 here, cause x165 is needed in a reg for other than x174, namely all: , x184, x174--x175, size: 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x3:r14"",""x65:rbx"",""x80:r10b"",""x95:cl"",""x104:r13b"",""x134:r12"",""x138:al"",""x147:dl"",""x157:r9"",""x161:sil"",""x165:r8"",""x166:r15b"",""x53:rbp"",""x174:r11""]";
"	;chose x80 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, x3, x65, x80, x95, x104, x134, x138, x147, x157, x53";
"	; freeing, i.e. spilling x80, because I am out of ideas";
"	; allocs: out1(rdi),x3(r14),x65(rbx),x80(r10b),x95(cl),x104(r13b),x134(r12),x138(al),x147(dl),x157(r9),x161(sil),x165(r8),x166(r15b),x53(rbp),x174(r11); clobs x174,x175,0x0,x165,0xffffffffffffffff,x161,x161,x166,x166,x165,x174,0xffffffffffffffff; will spare: x80 ";
"	mov byte [rsp + 0x08 * 24 ], r10b; spilling byte x80 to mem";
"	mov r10, 0xffffffffffffffff ; moving imm to reg";
"	sub r11, r10";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x3:r14"",""x65:rbx"",""x95:cl"",""x104:r13b"",""x134:r12"",""x138:al"",""x147:dl"",""x157:r9"",""x161:sil"",""x165:r8"",""x166:r15b"",""x53:rbp"",""x174:r11"",""0xffffffffffffffff:r10"",""x175:CF""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: 0xffffffffffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: out1(rdi),x3(r14),x65(rbx),x95(cl),x104(r13b),x134(r12),x138(al),x147(dl),x157(r9),x161(sil),x165(r8),x166(r15b),x53(rbp),x174(r11),0xffffffffffffffff(r10); clobs x84,x85,x2,arg1[3],arg1,arg1; will spare: 0xffffffffffffffff ";
"	mov r10, [rsp + 0x08 * 0 ]; load m64 arg1 to register64";
"	;chose >>saved<< arg1[3] from:x2, arg1[3][1] and candidates: x2, arg1[3]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r10"",""x3:r14"",""x65:rbx"",""x95:cl"",""x104:r13b"",""x134:r12"",""x138:al"",""x147:dl"",""x157:r9"",""x161:sil"",""x165:r8"",""x166:r15b"",""x53:rbp"",""x174:r11"",""x175:CF"",""arg1[3]:rdx""]";
"	;chose x161 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, x3, x65, x95, x104, x134, x138, x157, x161, x165, x166, x53, x174";
"	; freeing, i.e. spilling x161, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r10),x3(r14),x65(rbx),x95(cl),x104(r13b),x134(r12),x138(al),x147(dl),x157(r9),x161(sil),x165(r8),x166(r15b),x53(rbp),x174(r11),arg1[3](rdx); clobs x84,x85,x2,arg1[3],arg1,arg1,arg1,x147; will spare: x161 ";
"	mov byte [rsp + 0x08 * 25 ], sil; spilling byte x161 to mem";
"	mov sil, dl; preserving value of x147 into a new reg";
"	mov rdx, [r10 + 0x08 * 3 ]; saving arg1[3] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r10"",""x3:r14"",""x65:rbx"",""x95:cl"",""x104:r13b"",""x134:r12"",""x138:al"",""x147:sil"",""x157:r9"",""x165:r8"",""x166:r15b"",""x53:rbp"",""x174:r11"",""x175:CF"",""arg1[3]:rdx""]";
"	;chose x165 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, x3, x65, x95, x104, x134, x138, x157, x165, x166, x53, x174";
"	; freeing, i.e. spilling x165, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r10),x3(r14),x65(rbx),x95(cl),x104(r13b),x134(r12),x138(al),x147(sil),x157(r9),x165(r8),x166(r15b),x53(rbp),x174(r11),arg1[3](rdx); clobs x84,x85,x2,arg1[3],arg1,arg1,arg1,x147,x147; will spare: x165 ";
"	mov [rsp + 0x08 * 26 ], r8; spilling x165 to mem";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r10"",""x3:r14"",""x65:rbx"",""x95:cl"",""x104:r13b"",""x134:r12"",""x138:al"",""x147:sil"",""x157:r9"",""x166:r15b"",""x53:rbp"",""x174:r11"",""x175:CF"",""arg1[3]:rdx"",""x85:r8""]";
"	;chose x3 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, x3, x65, x95, x104, x134, x138, x157, x166, x53, x174";
"	; freeing, i.e. spilling x3, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r10),x3(r14),x65(rbx),x95(cl),x104(r13b),x134(r12),x138(al),x147(sil),x157(r9),x166(r15b),x53(rbp),x174(r11),arg1[3](rdx),x85(r8); clobs x84,x85,x2,arg1[3],arg1,arg1,arg1,x147,x147,x85; will spare: x3 ";
"	mov [rsp + 0x08 * 27 ], r14; spilling x3 to mem";
"	;-- allocation: [""out1:rdi"",""arg1:r10"",""x65:rbx"",""x95:cl"",""x104:r13b"",""x134:r12"",""x138:al"",""x147:sil"",""x157:r9"",""x166:r15b"",""x53:rbp"",""x174:r11"",""x175:CF"",""arg1[3]:rdx"",""x85:r8"",""x84:r14""]";
"	mulx r8, r14, [rsp + 0x08 * 5 ]; x85, x84<- x2 * arg1[3]";
"	";
"";
"	; add:";
"	; r:x62,f:x63<-add(x61,x38,x53)";
"	; CF: ALIVE,OF: KILLED";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r10"",""x65:rbx"",""x95:cl"",""x104:r13b"",""x134:r12"",""x138:al"",""x147:sil"",""x157:r9"",""x166:r15b"",""x174:r11"",""x175:CF"",""arg1[3]:rdx"",""x85:r8"",""x84:r14"",""x62:rbp""]";
"	;chose arg1[3] to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: arg1[3]";
"	; freeing, i.e. spilling arg1[3], because I am out of ideas";
"	; allocs: out1(rdi),arg1(r10),x65(rbx),x95(cl),x104(r13b),x134(r12),x138(al),x147(sil),x157(r9),x166(r15b),x174(r11),arg1[3](rdx),x85(r8),x84(r14),x62(rbp); clobs x62,x63,x61,x38,x53,x53,x61; will spare: arg1[3] ";
"	movzx rdx, byte [rsp + 0x08 * 21 ]; load byte memx61 to register64";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r10"",""x65:rbx"",""x61:rdx"",""x95:cl"",""x104:r13b"",""x134:r12"",""x138:al"",""x147:sil"",""x157:r9"",""x166:r15b"",""x174:r11"",""x175:CF"",""x85:r8"",""x84:r14"",""x62:rbp""]";
"	;chose arg1 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, arg1, x65, x95, x104, x134, x138, x147, x157, x166, x174, x85, x84";
"	; freeing, i.e. spilling arg1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r10),x65(rbx),x61(rdx),x95(cl),x104(r13b),x134(r12),x138(al),x147(sil),x157(r9),x166(r15b),x174(r11),x85(r8),x84(r14),x62(rbp); clobs x62,x63,x61,x38,x53,x53,x61,x61,0x0; will spare: arg1 ";
"	mov [rsp + 0x08 * 0 ], r10; spilling arg1 to mem";
"	mov r10, 0x0 ; moving imm to reg";
"	dec r10; OF<-0x0, preserve CF 3";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x65:rbx"",""x61:rdx"",""x95:cl"",""x104:r13b"",""x134:r12"",""x138:al"",""x147:sil"",""x157:r9"",""x166:r15b"",""x174:r11"",""x175:CF"",""x85:r8"",""x84:r14"",""x62:rbp"",""-0x1:r10""]";
"	;chose x134 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, x65, x95, x104, x134, x138, x147, x157, x166, x174, x85, x84";
"	; freeing, i.e. spilling x134, because I am out of ideas";
"	; allocs: out1(rdi),x65(rbx),x61(rdx),x95(cl),x104(r13b),x134(r12),x138(al),x147(sil),x157(r9),x166(r15b),x174(r11),x85(r8),x84(r14),x62(rbp),-0x1(r10); clobs x62,x63,x61,x38,x53,x53,x61,x61,0x0,0x0,-0x1,x38; will spare: x134 ";
"	mov [rsp + 0x08 * 28 ], r12; spilling x134 to mem";
"	movzx r12, byte [rsp + 0x08 * 18 ]; load byte memx38 to register64";
"	adox rdx, r10; loading flag";
"	adox rbp, r12";
"	";
"";
"	; add:";
"	; r:x96,f:x97<-add(x95,x87,x84)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x38:r12"",""x65:rbx"",""x61:rdx"",""x95:cl"",""x104:r13b"",""x138:al"",""x147:sil"",""x157:r9"",""x166:r15b"",""x174:r11"",""x175:CF"",""x85:r8"",""x62:rbp"",""-0x1:r10"",""x63:OF"",""x96:r14""]";
"	; freeing x38 (r12) no dependants anymore";
"	seto r12b; spill OF x63 to reg (r12)";
"	inc r10; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x65:rbx"",""x61:rdx"",""x95:cl"",""x104:r13b"",""x138:al"",""x147:sil"",""x157:r9"",""x166:r15b"",""x174:r11"",""x175:CF"",""x85:r8"",""x62:rbp"",""x63:r12b"",""x96:r14"",""0x0:r10""]";
"	; freeing x61 (rdx) no dependants anymore";
"	mov rdx, -0x1 ; moving imm to reg";
"	movzx rcx, cl";
"	adox rcx, rdx; loading flag";
"	adox r14, [rsp + 0x08 * 19 ]";
"	";
"";
"	; add:";
"	; r:x81,f:x82<-add(x80,x62,x65)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x65:rbx"",""x95:cl"",""x104:r13b"",""x138:al"",""x147:sil"",""x157:r9"",""x166:r15b"",""x174:r11"",""x175:CF"",""x85:r8"",""x63:r12b"",""x96:r14"",""0x0:r10"",""-0x1:rdx"",""x97:OF"",""x81:rbp""]";
"	; freeing x95 (cl) no dependants anymore";
"	setc cl; spill CF x175 to reg (rcx)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x65:rbx"",""x104:r13b"",""x138:al"",""x147:sil"",""x157:r9"",""x166:r15b"",""x174:r11"",""x175:cl"",""x85:r8"",""x63:r12b"",""x96:r14"",""0x0:r10"",""-0x1:rdx"",""x97:OF"",""x81:rbp""]";
"	; freeing 0x0 (r10, since all are neeed, but this one is just an immediate value.";
"	movzx r10, byte [rsp + 0x08 * 24 ]; load byte memx80 to register64";
"	clc;";
"	adcx r10, rdx; loading flag";
"	adcx rbp, rbx";
"	";
"";
"	; add:";
"	; r:x105,f:x106<-add(x104,x81,x96)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x65:rbx"",""x80:r10"",""x104:r13b"",""x138:al"",""x147:sil"",""x157:r9"",""x166:r15b"",""x174:r11"",""x175:cl"",""x85:r8"",""x63:r12b"",""x96:r14"",""-0x1:rdx"",""x97:OF"",""x82:CF"",""x105:rbp""]";
"	; freeing x65 (rbx) no dependants anymore";
"	setc bl; spill CF x82 to reg (rbx)";
"	clc;";
"	movzx r13, r13b";
"	adcx r13, rdx; loading flag";
"	adcx rbp, r14";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x80:r10"",""x104:r13b"",""x138:al"",""x147:sil"",""x157:r9"",""x166:r15b"",""x174:r11"",""x175:cl"",""x85:r8"",""x63:r12b"",""x96:r14"",""-0x1:rdx"",""x97:OF"",""x82:bl"",""x105:rbp"",""x106:CF""]";
"	; freeing x80 (r10) no dependants anymore";
"	mov r10, 0xffffffff00000001 ; moving imm to reg";
"	;chose >>saved<< x99 from:x99, 0xffffffff00000001[0] and candidates: x99, 0xffffffff00000001";
"	mov rdx, [rsp + 0x08 * 8 ]; x99 to rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x104:r13b"",""x138:al"",""x147:sil"",""x157:r9"",""x166:r15b"",""x174:r11"",""x175:cl"",""x85:r8"",""x63:r12b"",""x96:r14"",""x97:OF"",""x82:bl"",""x105:rbp"",""x106:CF"",""0xffffffff00000001:r10"",""x110:rdx""]";
"	; freeing x104 (r13b) no dependants anymore";
"	;-- allocation: [""out1:rdi"",""x138:al"",""x147:sil"",""x157:r9"",""x166:r15b"",""x174:r11"",""x175:cl"",""x85:r8"",""x63:r12b"",""x96:r14"",""x97:OF"",""x82:bl"",""x105:rbp"",""x106:CF"",""0xffffffff00000001:r10"",""x110:rdx"",""x109:r13""]";
"	mulx rdx, r13, r10; x110, x109<- x99 * 0xffffffff00000001";
"	";
"";
"	; add:";
"	; r:x124,f:x125<-add(x123,x105,x109)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x138:al"",""x147:sil"",""x157:r9"",""x166:r15b"",""x174:r11"",""x175:cl"",""x85:r8"",""x63:r12b"",""x96:r14"",""x97:OF"",""x82:bl"",""x106:CF"",""0xffffffff00000001:r10"",""x110:rdx"",""x109:r13"",""x124:rbp""]";
"	; freeing x96 (r14) no dependants anymore";
"	seto r14b; spill OF x97 to reg (r14)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x138:al"",""x147:sil"",""x157:r9"",""x166:r15b"",""x174:r11"",""x175:cl"",""x85:r8"",""x63:r12b"",""x97:r14b"",""x82:bl"",""x106:CF"",""0xffffffff00000001:r10"",""x110:rdx"",""x109:r13"",""x124:rbp""]";
"	;chose 0xffffffff00000001 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: 0xffffffff00000001";
"	; freeing, i.e. spilling 0xffffffff00000001, because I am out of ideas";
"	; allocs: out1(rdi),x138(al),x147(sil),x157(r9),x166(r15b),x174(r11),x175(cl),x85(r8),x63(r12b),x97(r14b),x82(bl),0xffffffff00000001(r10),x110(rdx),x109(r13),x124(rbp); clobs x124,x125,x123,x105,x109,x105,x97,x97,x123; will spare: 0xffffffff00000001 ";
"	movzx r10, byte [rsp + 0x08 * 22 ]; load byte memx123 to register64";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x123:r10"",""x138:al"",""x147:sil"",""x157:r9"",""x166:r15b"",""x174:r11"",""x175:cl"",""x85:r8"",""x63:r12b"",""x97:r14b"",""x82:bl"",""x106:CF"",""x110:rdx"",""x109:r13"",""x124:rbp""]";
"	;chose x110 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, x138, x147, x157, x166, x174, x175, x85, x63, x82, x110";
"	; freeing, i.e. spilling x110, because I am out of ideas";
"	; allocs: out1(rdi),x123(r10),x138(al),x147(sil),x157(r9),x166(r15b),x174(r11),x175(cl),x85(r8),x63(r12b),x97(r14b),x82(bl),x110(rdx),x109(r13),x124(rbp); clobs x124,x125,x123,x105,x109,x105,x97,x97,x123,x123,0x0; will spare: x110 ";
"	mov [rsp + 0x08 * 29 ], rdx; spilling x110 to mem";
"	mov rdx, 0x0 ; moving imm to reg";
"	dec rdx; OF<-0x0, preserve CF 3";
"	adox r10, rdx; loading flag";
"	adox rbp, r13";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x123:r10"",""x138:al"",""x147:sil"",""x157:r9"",""x166:r15b"",""x174:r11"",""x175:cl"",""x85:r8"",""x63:r12b"",""x97:r14b"",""x82:bl"",""x106:CF"",""x109:r13"",""x124:rbp"",""-0x1:rdx"",""x125:OF""]";
"	; freeing x123 (r10) no dependants anymore";
"	mov r10, [rsp + 0x08 * 0 ]; load m64 arg1 to register64";
"	;chose >>saved<< arg1[2] from:x3, arg1[2][1] and candidates: x3, arg1[2]";
"	mov rdx, [r10 + 0x08 * 2 ]; arg1[2] to rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r10"",""x138:al"",""x147:sil"",""x157:r9"",""x166:r15b"",""x174:r11"",""x175:cl"",""x85:r8"",""x63:r12b"",""x97:r14b"",""x82:bl"",""x106:CF"",""x109:r13"",""x124:rbp"",""x125:OF"",""arg1[2]:rdx""]";
"	; freeing x109 (r13) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r10"",""x138:al"",""x147:sil"",""x157:r9"",""x166:r15b"",""x174:r11"",""x175:cl"",""x85:r8"",""x63:r12b"",""x97:r14b"",""x82:bl"",""x106:CF"",""x124:rbp"",""x125:OF"",""arg1[2]:rdx"",""x132:r13""]";
"	;chose x124 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, x138, x147, x157, x166, x174, x175, x85, x63, x97, x82, x124";
"	; freeing, i.e. spilling x124, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r10),x138(al),x147(sil),x157(r9),x166(r15b),x174(r11),x175(cl),x85(r8),x63(r12b),x97(r14b),x82(bl),x124(rbp),arg1[2](rdx),x132(r13); clobs x131,x132,x3,arg1[2],arg1,arg1,arg1,x132; will spare: x124 ";
"	mov [rsp + 0x08 * 30 ], rbp; spilling x124 to mem";
"	;-- allocation: [""out1:rdi"",""arg1:r10"",""x138:al"",""x147:sil"",""x157:r9"",""x166:r15b"",""x174:r11"",""x175:cl"",""x85:r8"",""x63:r12b"",""x97:r14b"",""x82:bl"",""x106:CF"",""x125:OF"",""arg1[2]:rdx"",""x132:r13"",""x131:rbp""]";
"	mulx r13, rbp, [rsp + 0x08 * 27 ]; x132, x131<- x3 * arg1[2]";
"	";
"";
"	; add:";
"	; r:x139,f:x140<-add(x138,x134,x131)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r10"",""x138:al"",""x147:sil"",""x157:r9"",""x166:r15b"",""x174:r11"",""x175:cl"",""x85:r8"",""x63:r12b"",""x97:r14b"",""x82:bl"",""x106:CF"",""x125:OF"",""arg1[2]:rdx"",""x132:r13"",""x139:rbp""]";
"	;chose arg1[2] to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: arg1[2]";
"	; freeing, i.e. spilling arg1[2], because I am out of ideas";
"	; allocs: out1(rdi),arg1(r10),x138(al),x147(sil),x157(r9),x166(r15b),x174(r11),x175(cl),x85(r8),x63(r12b),x97(r14b),x82(bl),arg1[2](rdx),x132(r13),x139(rbp); clobs x139,x140,x138,x134,x131,x131,x106; will spare: arg1[2] ";
"	setc dl; spill CF x106 to reg (rdx)";
"	clc;";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r10"",""x138:al"",""x147:sil"",""x157:r9"",""x166:r15b"",""x174:r11"",""x175:cl"",""x85:r8"",""x63:r12b"",""x97:r14b"",""x82:bl"",""x106:dl"",""x125:OF"",""x132:r13"",""x139:rbp""]";
"	;chose arg1 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: out1, arg1, x147, x157, x166, x174, x175, x85, x63, x97, x82, x132";
"	; freeing, i.e. spilling arg1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r10),x138(al),x147(sil),x157(r9),x166(r15b),x174(r11),x175(cl),x85(r8),x63(r12b),x97(r14b),x82(bl),x106(dl),x132(r13),x139(rbp); clobs x139,x140,x138,x134,x131,x131,x106,x106,-0x1; will spare: arg1 ";
"	mov [rsp + 0x08 * 0 ], r10; spilling arg1 to mem";
"	mov r10, -0x1 ; moving imm to reg";
"	movzx rax, al";
"	adcx rax, r10; loading flag";
"	adcx rbp, [rsp + 0x08 * 28 ]";
"	";
"";
"	; add:";
"	; r:x148,f:x149<-add(x147,x124,x139)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x138:al"",""x147:sil"",""x157:r9"",""x166:r15b"",""x174:r11"",""x175:cl"",""x85:r8"",""x63:r12b"",""x97:r14b"",""x82:bl"",""x106:dl"",""x125:OF"",""x132:r13"",""-0x1:r10"",""x140:CF"",""x148:rbp""]";
"	; freeing x138 (al) no dependants anymore";
"	setc al; spill CF x140 to reg (rax)";
"	clc;";
"	movzx rsi, sil";
"	adcx rsi, r10; loading flag";
"	adcx rbp, [rsp + 0x08 * 30 ]";
"	";
"";
"	; add:";
"	; r:x162,f:_<-add(x161,x157)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x147:sil"",""x166:r15b"",""x174:r11"",""x175:cl"",""x85:r8"",""x63:r12b"",""x97:r14b"",""x82:bl"",""x106:dl"",""x125:OF"",""x132:r13"",""-0x1:r10"",""x140:al"",""x148:rbp"",""x149:CF"",""x162:r9""]";
"	; freeing x147 (sil) no dependants anymore";
"	movzx rsi, byte [rsp + 0x08 * 25 ]; load byte memx161 to register64";
"	lea r9, [r9+rsi]; r64+m8";
"	";
"";
"	; add:";
"	; r:x167,f:x168<-add(x166,x148,x162)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x161:rsi"",""x166:r15b"",""x174:r11"",""x175:cl"",""x85:r8"",""x63:r12b"",""x97:r14b"",""x82:bl"",""x106:dl"",""x125:OF"",""x132:r13"",""-0x1:r10"",""x140:al"",""x149:CF"",""x162:r9"",""x167:rbp""]";
"	; freeing x161 (rsi) no dependants anymore";
"	seto sil; spill OF x125 to reg (rsi)";
"	inc r10; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x166:r15b"",""x174:r11"",""x175:cl"",""x85:r8"",""x63:r12b"",""x97:r14b"",""x82:bl"",""x106:dl"",""x125:sil"",""x132:r13"",""x140:al"",""x149:CF"",""x162:r9"",""x167:rbp"",""0x0:r10""]";
"	; freeing 0x0 (r10, since all are neeed, but this one is just an immediate value.";
"	mov r10, -0x1 ; moving imm to reg";
"	movzx r15, r15b";
"	adox r15, r10; loading flag";
"	adox rbp, r9";
"	";
"";
"	; add:";
"	; r:x83,f:_<-add(x82,x63)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x166:r15b"",""x174:r11"",""x175:cl"",""x85:r8"",""x63:r12b"",""x97:r14b"",""x82:bl"",""x106:dl"",""x125:sil"",""x132:r13"",""x140:al"",""x149:CF"",""x162:r9"",""x167:rbp"",""-0x1:r10"",""x168:OF""]";
"	; freeing x166 (r15b) no dependants anymore";
"	movzx r15,  bl; x83, copying x82 here, cause x82 is needed in a reg for other than x83, namely all: , x83, size: 1";
"	movzx r12, r12b";
"	lea r15, [r15+r12]";
"	";
"";
"	; add:";
"	; r:x98,f:_<-add(x97,x85)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x174:r11"",""x175:cl"",""x85:r8"",""x63:r12b"",""x97:r14b"",""x82:bl"",""x106:dl"",""x125:sil"",""x132:r13"",""x140:al"",""x149:CF"",""x162:r9"",""x167:rbp"",""-0x1:r10"",""x168:OF"",""x83:r15""]";
"	; freeing x63 (r12b) no dependants anymore";
"	movzx r12,  r14b; x98, copying x97 here, cause x97 is needed in a reg for other than x98, namely all: , x98, size: 1";
"	lea r12, [r12+r8]";
"	";
"";
"	; sub:";
"	; r:x176,f:x177<-sub(x175,x167,0xffffffff)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x174:r11"",""x175:cl"",""x85:r8"",""x97:r14b"",""x82:bl"",""x106:dl"",""x125:sil"",""x132:r13"",""x140:al"",""x149:CF"",""x162:r9"",""x167:rbp"",""-0x1:r10"",""x168:OF"",""x83:r15"",""x98:r12""]";
"	; freeing x85 (r8) no dependants anymore";
"	setc r8b; spill CF x149 to reg (r8)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x174:r11"",""x175:cl"",""x97:r14b"",""x82:bl"",""x106:dl"",""x125:sil"",""x132:r13"",""x140:al"",""x149:r8b"",""x162:r9"",""x167:rbp"",""-0x1:r10"",""x168:OF"",""x83:r15"",""x98:r12""]";
"	; freeing x97 (r14b) no dependants anymore";
"	seto r14b; spill OF x168 to reg (r14)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x174:r11"",""x175:cl"",""x82:bl"",""x106:dl"",""x125:sil"",""x132:r13"",""x140:al"",""x149:r8b"",""x162:r9"",""x167:rbp"",""-0x1:r10"",""x168:r14b"",""x83:r15"",""x98:r12""]";
"	; freeing x82 (bl) no dependants anymore";
"	movzx rbx,  cl; x175, copying x175 here, cause x175 is needed in a reg for other than x175, namely all: , x176--x177, size: 1";
"	add rbx, -0x1";
"	; fr:rbx,rcx";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x174:r11"",""x106:dl"",""x125:sil"",""x132:r13"",""x140:al"",""x149:r8b"",""x162:r9"",""x167:rbp"",""-0x1:r10"",""x168:r14b"",""x83:r15"",""x98:r12"",""x177:CF""]";
"	;chose >>RANDOMLY<< rcx from candidates :rbx, rcx[1].";
"	mov rcx,  rbp; x176, copying x167 here, cause x167 is needed in a reg for other than x176, namely all: , x176--x177, x185, size: 2";
"	; fr:rbx";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x174:r11"",""x106:dl"",""x125:sil"",""x132:r13"",""x140:al"",""x149:r8b"",""x162:r9"",""x167:rbp"",""-0x1:r10"",""x168:r14b"",""x83:r15"",""x98:r12"",""x177:CF"",""x176:rcx""]";
"	;chose >>RANDOMLY<< rbx from candidates :rbx[0].";
"	mov rbx, 0xffffffff ; moving imm to reg";
"	sbb rcx, rbx";
"	";
"";
"	; add:";
"	; r:x107,f:x108<-add(x106,x83,x98)";
"	; CF: ALIVE,OF: KILLED";
"	inc r10; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x174:r11"",""x106:dl"",""x125:sil"",""x132:r13"",""x140:al"",""x149:r8b"",""x162:r9"",""x167:rbp"",""x168:r14b"",""x98:r12"",""x177:CF"",""x176:rcx"",""0xffffffff:rbx"",""x107:r15"",""0x0:r10""]";
"	; freeing x162 (r9) no dependants anymore";
"	mov r9, -0x1 ; moving imm to reg";
"	movzx rdx, dl";
"	adox rdx, r9; loading flag";
"	adox r15, r12";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""x174:r11"",""x106:dl"",""x125:sil"",""x132:r13"",""x140:al"",""x149:r8b"",""x167:rbp"",""x168:r14b"",""x98:r12"",""x177:CF"",""x176:rcx"",""0xffffffff:rbx"",""x107:r15"",""0x0:r10"",""-0x1:r9"",""x108:OF""]";
"	; freeing x106 (dl) no dependants anymore";
"	mov rdx, [rsp + 0x08 * 0 ]; load m64 arg1 to register64";
"	;chose >>saved<< x3 from:x3, arg1[3][0] and candidates: x3, arg1[3]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rdx"",""x3:rdx"",""x174:r11"",""x125:sil"",""x132:r13"",""x140:al"",""x149:r8b"",""x167:rbp"",""x168:r14b"",""x98:r12"",""x177:CF"",""x176:rcx"",""0xffffffff:rbx"",""x107:r15"",""0x0:r10"",""-0x1:r9"",""x108:OF""]";
"	; freeing x98 (r12) no dependants anymore";
"	mov r12, rdx; preserving value of arg1 into a new reg";
"	mov rdx, [rsp + 0x08 * 27 ]; saving x3 in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x174:r11"",""x125:sil"",""x132:r13"",""x140:al"",""x149:r8b"",""x167:rbp"",""x168:r14b"",""x177:CF"",""x176:rcx"",""0xffffffff:rbx"",""x107:r15"",""0x0:r10"",""-0x1:r9"",""x108:OF"",""x130:rdx""]";
"	; freeing 0x0 (r10, since all are neeed, but this one is just an immediate value.";
"	;-- allocation: [""out1:rdi"",""arg1:r12"",""x174:r11"",""x125:sil"",""x132:r13"",""x140:al"",""x149:r8b"",""x167:rbp"",""x168:r14b"",""x177:CF"",""x176:rcx"",""0xffffffff:rbx"",""x107:r15"",""-0x1:r9"",""x108:OF"",""x130:rdx"",""x129:r10""]";
"	mulx rdx, r10, [r12 + 0x08 * 3 ]; x130, x129<- x3 * arg1[3]";
"	";
"";
"	; add:";
"	; r:x126,f:x127<-add(x125,x107,x110)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x174:r11"",""x125:sil"",""x132:r13"",""x140:al"",""x149:r8b"",""x167:rbp"",""x168:r14b"",""x177:CF"",""x176:rcx"",""0xffffffff:rbx"",""-0x1:r9"",""x108:OF"",""x130:rdx"",""x129:r10"",""x126:r15""]";
"	;chose 0xffffffff to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: 0xffffffff, -0x1";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r12),x174(r11),x125(sil),x132(r13),x140(al),x149(r8b),x167(rbp),x168(r14b),x176(rcx),0xffffffff(rbx),-0x1(r9),x130(rdx),x129(r10),x126(r15); clobs x126,x127,x125,x107,x110,x107,x177; will spare: 0xffffffff ";
"	setc bl; spill CF x177 to reg (rbx)";
"	clc;";
"	movzx rsi, sil";
"	adcx rsi, r9; loading flag";
"	adcx r15, [rsp + 0x08 * 29 ]";
"	";
"";
"	; add:";
"	; r:x141,f:x142<-add(x140,x132,x129)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x174:r11"",""x125:sil"",""x140:al"",""x149:r8b"",""x167:rbp"",""x168:r14b"",""x177:bl"",""x176:rcx"",""-0x1:r9"",""x108:OF"",""x130:rdx"",""x129:r10"",""x126:r15"",""x127:CF"",""x141:r13""]";
"	; freeing x125 (sil) no dependants anymore";
"	setc sil; spill CF x127 to reg (rsi)";
"	clc;";
"	movzx rax, al";
"	adcx rax, r9; loading flag";
"	adcx r13, r10";
"	";
"";
"	; add:";
"	; r:x150,f:x151<-add(x149,x126,x141)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x174:r11"",""x140:al"",""x149:r8b"",""x167:rbp"",""x168:r14b"",""x177:bl"",""x176:rcx"",""-0x1:r9"",""x108:OF"",""x130:rdx"",""x129:r10"",""x127:sil"",""x141:r13"",""x142:CF"",""x150:r15""]";
"	; freeing x140 (al) no dependants anymore";
"	seto al; spill OF x108 to reg (rax)";
"	inc r9; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x174:r11"",""x149:r8b"",""x167:rbp"",""x168:r14b"",""x177:bl"",""x176:rcx"",""x108:al"",""x130:rdx"",""x129:r10"",""x127:sil"",""x141:r13"",""x142:CF"",""x150:r15"",""0x0:r9""]";
"	; freeing x129 (r10) no dependants anymore";
"	mov r10, -0x1 ; moving imm to reg";
"	movzx r8, r8b";
"	adox r8, r10; loading flag";
"	adox r15, r13";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x174:r11"",""x149:r8b"",""x167:rbp"",""x168:r14b"",""x177:bl"",""x176:rcx"",""x108:al"",""x130:rdx"",""x127:sil"",""x141:r13"",""x142:CF"",""x150:r15"",""0x0:r9"",""-0x1:r10"",""x151:OF""]";
"	; freeing x149 (r8b) no dependants anymore";
"	mov r8, 0xffffffff00000001 ; moving imm to reg";
"	;chose >>saved<< x144 from:x144, 0xffffffff00000001[0] and candidates: x144, 0xffffffff00000001";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x144:rdx"",""x174:r11"",""x167:rbp"",""x168:r14b"",""x177:bl"",""x176:rcx"",""x108:al"",""x130:rdx"",""x127:sil"",""x141:r13"",""x142:CF"",""x150:r15"",""0x0:r9"",""-0x1:r10"",""x151:OF"",""0xffffffff00000001:r8""]";
"	; freeing x141 (r13) no dependants anymore";
"	mov r13, rdx; preserving value of x130 into a new reg";
"	mov rdx, [rsp + 0x08 * 23 ]; saving x144 in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x174:r11"",""x167:rbp"",""x168:r14b"",""x177:bl"",""x176:rcx"",""x108:al"",""x130:r13"",""x127:sil"",""x142:CF"",""x150:r15"",""0x0:r9"",""-0x1:r10"",""x151:OF"",""0xffffffff00000001:r8"",""x155:rdx""]";
"	; freeing 0x0 (r9, since all are neeed, but this one is just an immediate value.";
"	;-- allocation: [""out1:rdi"",""arg1:r12"",""x174:r11"",""x167:rbp"",""x168:r14b"",""x177:bl"",""x176:rcx"",""x108:al"",""x130:r13"",""x127:sil"",""x142:CF"",""x150:r15"",""-0x1:r10"",""x151:OF"",""0xffffffff00000001:r8"",""x155:rdx"",""x154:r9""]";
"	mulx rdx, r9, r8; x155, x154<- x144 * 0xffffffff00000001";
"	";
"";
"	; add:";
"	; r:x169,f:x170<-add(x168,x150,x154)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x174:r11"",""x167:rbp"",""x168:r14b"",""x177:bl"",""x176:rcx"",""x108:al"",""x130:r13"",""x127:sil"",""x142:CF"",""-0x1:r10"",""x151:OF"",""0xffffffff00000001:r8"",""x155:rdx"",""x154:r9"",""x169:r15""]";
"	;chose 0xffffffff00000001 to spill because list of spills:x16Lx16Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx116Lx38Lx38Lx38Lx38Lx38Lx38Lx38Lx52Lx52Lx52Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110Lx110L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001L0xffffffff00000001Lx87Lx87Lx87Lx87Lx87Lx87Lx87Lx80Lx80Lx80Lx80Lx80Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161Lx161L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffL0xffffffffLx145Lx145Lx145Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx112Lx67Lx67Lx67Lx67Lx67L-0x1Lx164Lx164Lx164Lx164Lx164Lx89Lx89Lx89Lx61Lx61Lx61Lx61Lx61Lx61Lx165Lx165Lx165Lx165Lx165Lx165Lx76Lx76Lx76Lx76Lx76Lx114Lx114Lx114Lx114Lx114Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Lx123Larg1Larg1Larg1Larg1Larg1Larg1Larg1Lx102Lx102Lx102Lx99Lx99Lx99Lx99Lx99Lx2Lx2Lx2Lx2Lx2Lx78Lx78Lx78Lx58Lx58Lx58Lx58Larg1[1]Lx144Lx144Lx124Lx124Lx124Lx39Lx39Lx39Lx39Lx93Lx93Lx93Lx93Lx93Lx93Lx93Larg1[2]Larg1[2]Lx54Lx54Lx109Lx109Lx109Lx109Lx109Lx1Lx1Lx1Lx1Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx3Lx3Lx3Lx42Lx42Lx57Lx57Lx57Lx57Larg1[3]Larg1[3]Lx134Lout1 and candidates: -0x1, 0xffffffff00000001";
"	; freeing, i.e. spilling 0xffffffff00000001, because I am out of ideas";
"	; allocs: out1(rdi),arg1(r12),x174(r11),x167(rbp),x168(r14b),x177(bl),x176(rcx),x108(al),x130(r13),x127(sil),-0x1(r10),0xffffffff00000001(r8),x155(rdx),x154(r9),x169(r15); clobs x169,x170,x168,x150,x154,x150,x142; will spare: 0xffffffff00000001 ";
"	setc r8b; spill CF x142 to reg (r8)";
"	clc;";
"	movzx r14, r14b";
"	adcx r14, r10; loading flag";
"	adcx r15, r9";
"	";
"";
"	; add:";
"	; r:x128,f:_<-add(x127,x108)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x174:r11"",""x167:rbp"",""x168:r14b"",""x177:bl"",""x176:rcx"",""x108:al"",""x130:r13"",""x127:sil"",""x142:r8b"",""-0x1:r10"",""x151:OF"",""x155:rdx"",""x154:r9"",""x169:r15"",""x170:CF""]";
"	; freeing x168 (r14b) no dependants anymore";
"	movzx r14,  sil; x128, copying x127 here, cause x127 is needed in a reg for other than x128, namely all: , x128, size: 1";
"	movzx rax, al";
"	lea r14, [r14+rax]";
"	";
"";
"	; sub:";
"	; r:x178,f:x179<-sub(x177,x169,0x0)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x174:r11"",""x167:rbp"",""x177:bl"",""x176:rcx"",""x108:al"",""x130:r13"",""x127:sil"",""x142:r8b"",""-0x1:r10"",""x151:OF"",""x155:rdx"",""x154:r9"",""x169:r15"",""x170:CF"",""x128:r14""]";
"	; freeing x108 (al) no dependants anymore";
"	setc al; spill CF x170 to reg (rax)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x174:r11"",""x167:rbp"",""x177:bl"",""x176:rcx"",""x130:r13"",""x127:sil"",""x142:r8b"",""-0x1:r10"",""x151:OF"",""x155:rdx"",""x154:r9"",""x169:r15"",""x170:al"",""x128:r14""]";
"	; freeing x127 (sil) no dependants anymore";
"	seto sil; spill OF x151 to reg (rsi)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x174:r11"",""x167:rbp"",""x177:bl"",""x176:rcx"",""x130:r13"",""x142:r8b"",""-0x1:r10"",""x151:sil"",""x155:rdx"",""x154:r9"",""x169:r15"",""x170:al"",""x128:r14""]";
"	; freeing x154 (r9) no dependants anymore";
"	movzx r9,  bl; x177, copying x177 here, cause x177 is needed in a reg for other than x177, namely all: , x178--x179, size: 1";
"	add r9, -0x1";
"	; fr:rbx,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x174:r11"",""x167:rbp"",""x176:rcx"",""x130:r13"",""x142:r8b"",""-0x1:r10"",""x151:sil"",""x155:rdx"",""x169:r15"",""x170:al"",""x128:r14"",""x179:CF""]";
"	;chose >>RANDOMLY<< rbx from candidates :rbx, r9[0].";
"	mov rbx,  r15; x178, copying x169 here, cause x169 is needed in a reg for other than x178, namely all: , x178--x179, x186, size: 2";
"	sbb rbx, 0x00000000";
"	";
"";
"	; add:";
"	; r:x143,f:_<-add(x142,x130)";
"	; CF: ALIVE,OF: KILLED";
"	; fr:r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x174:r11"",""x167:rbp"",""x176:rcx"",""x130:r13"",""x142:r8b"",""-0x1:r10"",""x151:sil"",""x155:rdx"",""x169:r15"",""x170:al"",""x128:r14"",""x179:CF"",""x178:rbx""]";
"	;chose >>RANDOMLY<< r9 from candidates :r9[0].";
"	movzx r9,  r8b; x143, copying x142 here, cause x142 is needed in a reg for other than x143, namely all: , x143, size: 1";
"	lea r9, [r9+r13]";
"	";
"";
"	; add:";
"	; r:x152,f:x153<-add(x151,x128,x143)";
"	; CF: ALIVE,OF: KILLED";
"	inc r10; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x174:r11"",""x167:rbp"",""x176:rcx"",""x130:r13"",""x142:r8b"",""x151:sil"",""x155:rdx"",""x169:r15"",""x170:al"",""x179:CF"",""x178:rbx"",""x143:r9"",""x152:r14"",""0x0:r10""]";
"	; freeing x130 (r13) no dependants anymore";
"	mov r13, -0x1 ; moving imm to reg";
"	movzx rsi, sil";
"	adox rsi, r13; loading flag";
"	adox r14, r9";
"	";
"";
"	; add:";
"	; r:x171,f:x172<-add(x170,x152,x155)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x174:r11"",""x167:rbp"",""x176:rcx"",""x142:r8b"",""x151:sil"",""x155:rdx"",""x169:r15"",""x170:al"",""x179:CF"",""x178:rbx"",""x143:r9"",""0x0:r10"",""-0x1:r13"",""x153:OF"",""x171:r14""]";
"	; freeing x142 (r8b) no dependants anymore";
"	seto r8b; spill OF x153 to reg (r8)";
"	inc r13; OF<-0x0, preserve CF 1";
"	; fr:r10";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x174:r11"",""x167:rbp"",""x176:rcx"",""x151:sil"",""x155:rdx"",""x169:r15"",""x170:al"",""x179:CF"",""x178:rbx"",""x143:r9"",""0x0:r13"",""x153:r8b"",""x171:r14""]";
"	;chose >>RANDOMLY<< r10 from candidates :r10[0].";
"	mov r10, -0x1 ; moving imm to reg";
"	movzx rax, al";
"	adox rax, r10; loading flag";
"	adox r14, rdx";
"	";
"";
"	; add:";
"	; r:x173,f:_<-add(x172,x153)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x174:r11"",""x167:rbp"",""x176:rcx"",""x151:sil"",""x155:rdx"",""x169:r15"",""x170:al"",""x179:CF"",""x178:rbx"",""x143:r9"",""0x0:r13"",""x153:r8b"",""x171:r14"",""-0x1:r10"",""x172:OF""]";
"	; freeing x151 (sil) no dependants anymore";
"	movzx rsi,  r8b; x173, copying x153 here, cause x153 is needed in a reg for other than x173, namely all: , x173, size: 1";
"	adox rsi, r13";
"	";
"";
"	; sub:";
"	; r:x180,f:x181<-sub(x179,x171,0xffffffff00000001)";
"	; CF: ALIVE,OF: KILLED";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x174:r11"",""x167:rbp"",""x176:rcx"",""x155:rdx"",""x169:r15"",""x170:al"",""x178:rbx"",""x143:r9"",""0x0:r13"",""x153:r8b"",""x171:r14"",""-0x1:r10"",""x172:OF"",""x173:rsi"",""x181:CF""]";
"	; freeing x155 (rdx) no dependants anymore";
"	mov rdx,  r14; x180, copying x171 here, cause x171 is needed in a reg for other than x180, namely all: , x187, x180--x181, size: 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x174:r11"",""x167:rbp"",""x176:rcx"",""x169:r15"",""x170:al"",""x178:rbx"",""x143:r9"",""0x0:r13"",""x153:r8b"",""x171:r14"",""-0x1:r10"",""x172:OF"",""x173:rsi"",""x181:CF"",""x180:rdx""]";
"	; freeing x170 (al) no dependants anymore";
"	mov rax, 0xffffffff00000001 ; moving imm to reg";
"	sbb rdx, rax";
"	";
"";
"	; sub:";
"	; r:_,f:x183<-sub(x181,x173,0x0)";
"	; CF: ALIVE,OF: KILLED";
"	sbb rsi, 0x00000000";
"	; the job is: x184 = x183 !== 0 ? x174: x165";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x174:r11"",""x167:rbp"",""x176:rcx"",""x169:r15"",""x178:rbx"",""x143:r9"",""0x0:r13"",""x153:r8b"",""x171:r14"",""-0x1:r10"",""x172:OF"",""x180:rdx"",""0xffffffff00000001:rax"",""x183:CF""]";
"	; freeing x143 (r9) no dependants anymore";
"	setc r9b; spill CF x183 to reg (r9)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:r12"",""x174:r11"",""x167:rbp"",""x176:rcx"",""x169:r15"",""x178:rbx"",""0x0:r13"",""x153:r8b"",""x171:r14"",""-0x1:r10"",""x172:OF"",""x180:rdx"",""0xffffffff00000001:rax"",""x183:r9b""]";
"	; freeing x153 (r8b) no dependants anymore";
"	mov r8, [rsp + 0x08 * 26 ]; load m64 x165 to register64";
"	;-- allocation: [""out1:rdi"",""arg1:r12"",""x165:r8"",""x167:rbp"",""x176:rcx"",""x169:r15"",""x178:rbx"",""0x0:r13"",""x171:r14"",""-0x1:r10"",""x172:OF"",""x180:rdx"",""0xffffffff00000001:rax"",""x183:r9b"",""x184:r11""]";
"	test r9b, r9b; testing x183";
"	cmovnz r11, r8; if !ZF, x184<- x165 (nzVar)";
"	; the job is: x187 = x183 !== 0 ? x180: x171";
"	;-- allocation: [""out1:rdi"",""arg1:r12"",""x165:r8"",""x167:rbp"",""x176:rcx"",""x169:r15"",""x178:rbx"",""0x0:r13"",""x171:r14"",""-0x1:r10"",""x172:OF"",""0xffffffff00000001:rax"",""x183:r9b"",""x184:r11"",""x187:rdx""]";
"	test r9b, r9b; testing x183";
"	cmovnz rdx, r14; if !ZF, x187<- x171 (nzVar)";
"	; the job is: x185 = x183 !== 0 ? x176: x167";
"	;-- allocation: [""out1:rdi"",""arg1:r12"",""x165:r8"",""x167:rbp"",""x169:r15"",""x178:rbx"",""0x0:r13"",""x171:r14"",""-0x1:r10"",""x172:OF"",""0xffffffff00000001:rax"",""x183:r9b"",""x184:r11"",""x187:rdx"",""x185:rcx""]";
"	test r9b, r9b; testing x183";
"	cmovnz rcx, rbp; if !ZF, x185<- x167 (nzVar)";
"	;-- allocation: [""out1:rdi"",""arg1:r12"",""x165:r8"",""x167:rbp"",""x169:r15"",""x178:rbx"",""0x0:r13"",""x171:r14"",""-0x1:r10"",""x172:OF"",""0xffffffff00000001:rax"",""x183:r9b"",""x184:r11"",""x185:rcx"",""x187:rdx""]";
"	mov [rdi + 0x08 * 3 ], rdx; out1[3] = x187";
"	;-- allocation: [""out1:rdi"",""arg1:r12"",""x165:r8"",""x167:rbp"",""x169:r15"",""x178:rbx"",""0x0:r13"",""x171:r14"",""-0x1:r10"",""x172:OF"",""0xffffffff00000001:rax"",""x183:r9b"",""x184:r11"",""x187:rdx"",""x185:rcx""]";
"	mov [rdi + 0x08 * 1 ], rcx; out1[1] = x185";
"	; the job is: x186 = x183 !== 0 ? x178: x169";
"	;-- allocation: [""out1:rdi"",""arg1:r12"",""x165:r8"",""x167:rbp"",""x169:r15"",""0x0:r13"",""x171:r14"",""-0x1:r10"",""x172:OF"",""0xffffffff00000001:rax"",""x183:r9b"",""x184:r11"",""x187:rdx"",""x185:rcx"",""x186:rbx""]";
"	test r9b, r9b; testing x183";
"	cmovnz rbx, r15; if !ZF, x186<- x169 (nzVar)";
"	;-- allocation: [""out1:rdi"",""arg1:r12"",""x165:r8"",""x167:rbp"",""x169:r15"",""0x0:r13"",""x171:r14"",""-0x1:r10"",""x172:OF"",""0xffffffff00000001:rax"",""x183:r9b"",""x187:rdx"",""x185:rcx"",""x186:rbx"",""x184:r11""]";
"	mov [rdi + 0x08 * 0 ], r11; out1[0] = x184";
"	;-- allocation: [""out1:rdi"",""arg1:r12"",""x165:r8"",""x167:rbp"",""x169:r15"",""0x0:r13"",""x171:r14"",""-0x1:r10"",""x172:OF"",""0xffffffff00000001:rax"",""x183:r9b"",""x187:rdx"",""x185:rcx"",""x184:r11"",""x186:rbx""]";
"	mov [rdi + 0x08 * 2 ], rbx; out1[2] = x186";
"	mov rbx, [rsp + 0x08 * 31 ]; restoring from stack";
"	mov rbp, [rsp + 0x08 * 32 ]; restoring from stack";
"	mov r12, [rsp + 0x08 * 33 ]; restoring from stack";
"	mov r13, [rsp + 0x08 * 34 ]; restoring from stack";
"	mov r14, [rsp + 0x08 * 35 ]; restoring from stack";
"	mov r15, [rsp + 0x08 * 36 ]; restoring from stack";
"	add rsp, 0x130 ";
"	ret";
"; cyclecount: 2585.5";
"; seed 6 ";
"; time Needed: 1999256 ms/ 10000 runs";
"; Time Spent By Invoking Make (measure): 1293075 ms";
"; Ratio (time for make measure)/elapsed: 0.6467781014537408";
"; Reverts a mutation because test was slower: 9849";
"; number tried mutation Permutation: 3398";
"; number tried mutation Spill: 3282";
"; number tried mutation Decision: 3320";
"; FailedEvals (cannot swap because of edge to the next node): 2069";
""].
