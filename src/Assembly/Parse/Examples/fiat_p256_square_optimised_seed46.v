Require Import Coq.Strings.String Coq.Lists.List.
Import ListNotations.
Local Open Scope string_scope.
Local Open Scope list_scope.
Example example : list string := [
"SECTION .text";
"	GLOBAL fiat_p256_square_optimised";
"";
"fiat_p256_square_optimised:";
"	sub rsp, 0x78 ";
"	mov [rsp + 0x08 * 8 ], rbx; saving to stack";
"	mov [rsp + 0x08 * 9 ], rbp; saving to stack";
"	mov [rsp + 0x08 * 10 ], r12; saving to stack";
"	mov [rsp + 0x08 * 11 ], r13; saving to stack";
"	mov [rsp + 0x08 * 12 ], r14; saving to stack";
"	mov [rsp + 0x08 * 13 ], r15; saving to stack";
"	; rdi contains out1";
"	; rsi contains arg1";
"	; fr:rax,r10,r11,rbx,rbp,r12,r13,r14,r15,rdx,rcx,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi""]";
"	;chose >>RANDOMLY<< r14 from candidates :rax, r10, r11, rbx, rbp, r12, r13, r14, r15, rdx, rcx, r8, r9[7].";
"	mov r14, [rsi + 0x08 * 2 ]; load m64 x2 to register64";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x2:r14""]";
"	;chose >>saved<< x2 from:x2, arg1[3][0] and candidates: x2, arg1[3]";
"	mov rdx, r14; x2 to rdx";
"	; fr:rax,r10,r11,rbx,rbp,r12,r13,r14,r15,rcx,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x2:rdx""]";
"	;chose >>RANDOMLY<< r13 from candidates :rax, r10, r11, rbx, rbp, r12, r13, r14, r15, rcx, r8, r9[6].";
"	; fr:rax,r10,r11,rbx,rbp,r12,r14,r15,rcx,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x2:rdx"",""x85:r13""]";
"	;chose >>RANDOMLY<< rax from candidates :rax, r10, r11, rbx, rbp, r12, r14, r15, rcx, r8, r9[0].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x2:rdx"",""x85:r13"",""x84:rax""]";
"	mulx r13, rax, [rsi + 0x08 * 3 ]; x85, x84<- x2 * arg1[3]";
"	; fr:r10,r11,rbx,rbp,r12,r14,r15,rcx,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x2:rdx"",""x85:r13"",""x84:rax""]";
"	;chose >>RANDOMLY<< rbp from candidates :r10, r11, rbx, rbp, r12, r14, r15, rcx, r8, r9[3].";
"	; fr:r10,r11,rbx,r12,r14,r15,rcx,r8,r9";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x2:rdx"",""x85:r13"",""x84:rax"",""x89:rbp""]";
"	;chose >>RANDOMLY<< r9 from candidates :r10, r11, rbx, r12, r14, r15, rcx, r8, r9[8].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x2:rdx"",""x85:r13"",""x84:rax"",""x89:rbp"",""x88:r9""]";
"	mulx rbp, r9, [rsi + 0x08 * 1 ]; x89, x88<- x2 * arg1[1]";
"	; fr:r10,r11,rbx,r12,r14,r15,rcx,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x2:rdx"",""x85:r13"",""x84:rax"",""x89:rbp"",""x88:r9""]";
"	;chose >>RANDOMLY<< rcx from candidates :r10, r11, rbx, r12, r14, r15, rcx, r8[6].";
"	; fr:r10,r11,rbx,r12,r14,r15,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x2:rdx"",""x85:r13"",""x84:rax"",""x89:rbp"",""x88:r9"",""x91:rcx""]";
"	;chose >>RANDOMLY<< r11 from candidates :r10, r11, rbx, r12, r14, r15, r8[1].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x2:rdx"",""x85:r13"",""x84:rax"",""x89:rbp"",""x88:r9"",""x91:rcx"",""x90:r11""]";
"	mulx rcx, r11, [rsi + 0x08 * 0 ]; x91, x90<- x2 * arg1[0]";
"	";
"";
"	; add:";
"	; r:x92,f:x93<-add(0x0,x91,x88)";
"	; CF: KILLED,OF: KILLED";
"	;chose >>saved<< c_add from:c_add, c_xor_adx, c_test_adx[0] and candidates: c_add, c_xor_adx, c_test_adx";
"	add rcx, r9; could be done better, if r0 has been u8 as well";
"	; fr:r10,rbx,r12,r14,r15,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x2:rdx"",""x85:r13"",""x84:rax"",""x89:rbp"",""x88:r9"",""x90:r11"",""x92:rcx"",""x93:CF""]";
"	;chose >>RANDOMLY<< r14 from candidates :r10, rbx, r12, r14, r15, r8[3].";
"	mov r14, [rsi + 0x08 * 0 ]; load m64 x4 to register64";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x2:rdx"",""x85:r13"",""x84:rax"",""x89:rbp"",""x88:r9"",""x90:r11"",""x92:rcx"",""x93:CF"",""x4:r14""]";
"	; fr:r10,rbx,r12,r15,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x85:r13"",""x84:rax"",""x89:rbp"",""x88:r9"",""x90:r11"",""x92:rcx"",""x93:CF"",""x4:r14"",""x87:rdx""]";
"	;chose >>RANDOMLY<< r15 from candidates :r10, rbx, r12, r15, r8[3].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x85:r13"",""x84:rax"",""x89:rbp"",""x88:r9"",""x90:r11"",""x92:rcx"",""x93:CF"",""x4:r14"",""x87:rdx"",""x86:r15""]";
"	mulx rdx, r15, [rsi + 0x08 * 2 ]; x87, x86<- x2 * arg1[2]";
"	;chose >>saved<< arg1[0] from:x4, arg1[0][1] and candidates: x4, arg1[0]";
"	; fr:r10,rbx,r12,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x85:r13"",""x84:rax"",""x89:rbp"",""x88:r9"",""x90:r11"",""x92:rcx"",""x93:CF"",""x4:r14"",""x87:rdx"",""x86:r15"",""arg1[0]:rdx""]";
"	;chose >>RANDOMLY<< r10 from candidates :r10, rbx, r12, r8[0].";
"	mov r10, rdx; preserving value of x87 into a new reg";
"	mov rdx, [rsi + 0x08 * 0 ]; saving arg1[0] in rdx.";
"	; fr:rbx,r12,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x85:r13"",""x84:rax"",""x89:rbp"",""x88:r9"",""x90:r11"",""x92:rcx"",""x93:CF"",""x4:r14"",""x87:r10"",""x86:r15"",""arg1[0]:rdx""]";
"	;chose >>RANDOMLY<< r12 from candidates :rbx, r12, r8[1].";
"	; fr:rbx,r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x85:r13"",""x84:rax"",""x89:rbp"",""x88:r9"",""x90:r11"",""x92:rcx"",""x93:CF"",""x4:r14"",""x87:r10"",""x86:r15"",""arg1[0]:rdx"",""x12:r12""]";
"	;chose >>RANDOMLY<< r8 from candidates :rbx, r8[1].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x85:r13"",""x84:rax"",""x89:rbp"",""x88:r9"",""x90:r11"",""x92:rcx"",""x93:CF"",""x4:r14"",""x87:r10"",""x86:r15"",""arg1[0]:rdx"",""x12:r12"",""x11:r8""]";
"	mulx r12, r8, r14; x12, x11<- x4 * arg1[0]";
"	;chose >>saved<< arg1[1] from:x4, arg1[1][1] and candidates: x4, arg1[1]";
"	mov rdx, [rsi + 0x08 * 1 ]; arg1[1] to rdx";
"	; fr:rbx";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x85:r13"",""x84:rax"",""x89:rbp"",""x88:r9"",""x90:r11"",""x92:rcx"",""x93:CF"",""x4:r14"",""x87:r10"",""x86:r15"",""x12:r12"",""x11:r8"",""arg1[1]:rdx""]";
"	;chose >>RANDOMLY<< rbx from candidates :rbx[0].";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x85:r13"",""x84:rax"",""x89:rbp"",""x88:r9"",""x90:r11"",""x92:rcx"",""x93:CF"",""x4:r14"",""x87:r10"",""x86:r15"",""x12:r12"",""x11:r8"",""arg1[1]:rdx"",""x10:rbx""]";
"	; freeing x88 (r9) no dependants anymore";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x85:r13"",""x84:rax"",""x89:rbp"",""x90:r11"",""x92:rcx"",""x93:CF"",""x4:r14"",""x87:r10"",""x86:r15"",""x12:r12"",""x11:r8"",""arg1[1]:rdx"",""x10:rbx"",""x9:r9""]";
"	mulx rbx, r9, r14; x10, x9<- x4 * arg1[1]";
"	";
"";
"	; add:";
"	; r:x94,f:x95<-add(x93,x89,x86)";
"	; CF: ALIVE,OF: KILLED";
"	adcx r15, rbp";
"	";
"";
"	; add:";
"	; r:x96,f:x97<-add(x95,x87,x84)";
"	; CF: ALIVE,OF: KILLED";
"	adcx rax, r10";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x85:r13"",""x89:rbp"",""x90:r11"",""x92:rcx"",""x4:r14"",""x87:r10"",""x12:r12"",""x11:r8"",""arg1[1]:rdx"",""x10:rbx"",""x9:r9"",""x94:r15"",""x97:CF"",""x96:rax""]";
"	; freeing x89 (rbp) no dependants anymore";
"	mov rbp, 0xffffffffffffffff ; moving imm to reg";
"	;chose >>saved<< x11 from:x11, 0xffffffffffffffff[0] and candidates: x11, 0xffffffffffffffff";
"	mov rdx, r8; x11 to rdx";
"	; fr:r8";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x85:r13"",""x90:r11"",""x92:rcx"",""x4:r14"",""x87:r10"",""x12:r12"",""x11:rdx"",""x10:rbx"",""x9:r9"",""x94:r15"",""x97:CF"",""x96:rax"",""0xffffffffffffffff:rbp""]";
"	;chose >>RANDOMLY<< r8 from candidates :r8[0].";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x85:r13"",""x90:r11"",""x92:rcx"",""x4:r14"",""x87:r10"",""x12:r12"",""x11:rdx"",""x10:rbx"",""x9:r9"",""x94:r15"",""x97:CF"",""x96:rax"",""0xffffffffffffffff:rbp"",""x25:r8""]";
"	; freeing x87 (r10) no dependants anymore";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x85:r13"",""x90:r11"",""x92:rcx"",""x4:r14"",""x12:r12"",""x11:rdx"",""x10:rbx"",""x9:r9"",""x94:r15"",""x97:CF"",""x96:rax"",""0xffffffffffffffff:rbp"",""x25:r8"",""x24:r10""]";
"	mulx r8, r10, rbp; x25, x24<- x11 * 0xffffffffffffffff";
"	";
"";
"	; add:";
"	; r:x98,f:_<-add(x97,x85)";
"	; CF: ALIVE,OF: KILLED";
"	adc r13, 0x0";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x90:r11"",""x92:rcx"",""x4:r14"",""x12:r12"",""x11:rdx"",""x10:rbx"",""x9:r9"",""x94:r15"",""x97:CF"",""x96:rax"",""0xffffffffffffffff:rbp"",""x25:r8"",""x24:r10"",""x98:r13""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x94Lx94Lx94Lx94Lx94Lx55Lx55Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx44Lx44Lx44Lx44Lx44Lx44Lx44Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx122Lx122Lx122Lx122Lx122Lx122Lx122Lx71Lx71Lx71Lx71Lx71Lx71Lx71Lx71L0xffffffff00000001L0xffffffff00000001Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx96Lx96Lx96Lx96Lx96Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Larg1[2]Larg1[2]Larg1[2]Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Larg1[3]Larg1[3]L0xffffffffL0xffffffffL0xffffffffL0xffffffffLx16Lx16Lx17Lx17L-0x1L-0x1Lx1Lx76Lx76 and candidates: 0xffffffffffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x90(r11),x92(rcx),x4(r14),x12(r12),x11(rdx),x10(rbx),x9(r9),x94(r15),x96(rax),0xffffffffffffffff(rbp),x25(r8),x24(r10),x98(r13); clobs x22,x23,x11,0xffffffff,0xffffffff; will spare: 0xffffffffffffffff ";
"	mov rbp, 0xffffffff ; moving imm to reg";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x90:r11"",""x92:rcx"",""x4:r14"",""x12:r12"",""x11:rdx"",""x10:rbx"",""x9:r9"",""x94:r15"",""x97:CF"",""x96:rax"",""x25:r8"",""x24:r10"",""x98:r13"",""0xffffffff:rbp""]";
"	;chose x94 to spill because list of spills:x94Lx94Lx94Lx94Lx94Lx55Lx55Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx44Lx44Lx44Lx44Lx44Lx44Lx44Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx122Lx122Lx122Lx122Lx122Lx122Lx122Lx71Lx71Lx71Lx71Lx71Lx71Lx71Lx71L0xffffffff00000001L0xffffffff00000001Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx96Lx96Lx96Lx96Lx96Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Larg1[2]Larg1[2]Larg1[2]Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Larg1[3]Larg1[3]L0xffffffffL0xffffffffL0xffffffffL0xffffffffLx16Lx16Lx17Lx17L-0x1L-0x1Lx1Lx76Lx76 and candidates: out1, arg1, x90, x92, x4, x12, x10, x9, x94, x96, x25, x24, x98";
"	; freeing, i.e. spilling x94, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x90(r11),x92(rcx),x4(r14),x12(r12),x11(rdx),x10(rbx),x9(r9),x94(r15),x96(rax),x25(r8),x24(r10),x98(r13),0xffffffff(rbp); clobs x22,x23,x11,0xffffffff,0xffffffff,0xffffffff; will spare: x94 ";
"	mov [rsp + 0x08 * 0 ], r15; spilling x94 to mem";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x90:r11"",""x92:rcx"",""x4:r14"",""x12:r12"",""x11:rdx"",""x10:rbx"",""x9:r9"",""x97:CF"",""x96:rax"",""x25:r8"",""x24:r10"",""x98:r13"",""0xffffffff:rbp"",""x23:r15""]";
"	;chose x98 to spill because list of spills:x94Lx94Lx94Lx94Lx94Lx55Lx55Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx44Lx44Lx44Lx44Lx44Lx44Lx44Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx122Lx122Lx122Lx122Lx122Lx122Lx122Lx71Lx71Lx71Lx71Lx71Lx71Lx71Lx71L0xffffffff00000001L0xffffffff00000001Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx96Lx96Lx96Lx96Lx96Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Larg1[2]Larg1[2]Larg1[2]Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Larg1[3]Larg1[3]L0xffffffffL0xffffffffL0xffffffffL0xffffffffLx16Lx16Lx17Lx17L-0x1L-0x1Lx1Lx76Lx76 and candidates: out1, arg1, x90, x92, x4, x12, x10, x9, x96, x25, x24, x98";
"	; freeing, i.e. spilling x98, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x90(r11),x92(rcx),x4(r14),x12(r12),x11(rdx),x10(rbx),x9(r9),x96(rax),x25(r8),x24(r10),x98(r13),0xffffffff(rbp),x23(r15); clobs x22,x23,x11,0xffffffff,0xffffffff,0xffffffff,x23; will spare: x98 ";
"	mov [rsp + 0x08 * 1 ], r13; spilling x98 to mem";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x90:r11"",""x92:rcx"",""x4:r14"",""x12:r12"",""x11:rdx"",""x10:rbx"",""x9:r9"",""x97:CF"",""x96:rax"",""x25:r8"",""x24:r10"",""0xffffffff:rbp"",""x23:r15"",""x22:r13""]";
"	mulx r15, r13, rbp; x23, x22<- x11 * 0xffffffff";
"	";
"";
"	; add:";
"	; r:x26,f:x27<-add(0x0,x25,x22)";
"	; CF: KILLED,OF: KILLED";
"	;chose >>saved<< c_test_adx from:c_add, c_xor_adx, c_test_adx[2] and candidates: c_add, c_xor_adx, c_test_adx";
"	test al, al";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	adox r8, r13";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x90:r11"",""x92:rcx"",""x4:r14"",""x12:r12"",""x11:rdx"",""x10:rbx"",""x9:r9"",""x97:CF"",""x96:rax"",""x24:r10"",""0xffffffff:rbp"",""x23:r15"",""x22:r13"",""x26:r8"",""x27:OF""]";
"	; freeing x22 (r13) no dependants anymore";
"	mov r13, [rsi + 0x08 * 1 ]; load m64 x1 to register64";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x90:r11"",""x92:rcx"",""x4:r14"",""x12:r12"",""x11:rdx"",""x10:rbx"",""x9:r9"",""x97:CF"",""x96:rax"",""x24:r10"",""0xffffffff:rbp"",""x23:r15"",""x26:r8"",""x27:OF"",""x1:r13""]";
"	";
"";
"	; add:";
"	; r:_,f:x30<-add(0x0,x11,x24)";
"	; CF: ZERO,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x90:r11"",""x92:rcx"",""x4:r14"",""x12:r12"",""x11:rdx"",""x10:rbx"",""x9:r9"",""x97:CF"",""x96:rax"",""x24:r10"",""0xffffffff:rbp"",""x23:r15"",""x26:r8"",""x27:OF"",""x1:r13""]";
"	;chose 0xffffffff to spill because list of spills:x94Lx94Lx94Lx94Lx94Lx55Lx55Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx44Lx44Lx44Lx44Lx44Lx44Lx44Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx122Lx122Lx122Lx122Lx122Lx122Lx122Lx71Lx71Lx71Lx71Lx71Lx71Lx71Lx71L0xffffffff00000001L0xffffffff00000001Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx96Lx96Lx96Lx96Lx96Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Larg1[2]Larg1[2]Larg1[2]Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Larg1[3]Larg1[3]L0xffffffffL0xffffffffL0xffffffffL0xffffffffLx16Lx16Lx17Lx17L-0x1L-0x1Lx1Lx76Lx76 and candidates: 0xffffffff";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x90(r11),x92(rcx),x4(r14),x12(r12),x11(rdx),x10(rbx),x9(r9),x96(rax),x24(r10),0xffffffff(rbp),x23(r15),x26(r8),x1(r13); clobs _,x30,0x0,x11,x24,x11; will spare: 0xffffffff ";
"	mov rbp,  rdx; _, copying x11 here, cause x11 is needed in a reg for other than _, namely all: , _--x30, x20--x21, size: 2";
"	adcx rbp, r10";
"	";
"";
"	; add:";
"	; r:x13,f:x14<-add(0x0,x12,x9)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:rbp";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x90:r11"",""x92:rcx"",""x4:r14"",""x11:rdx"",""x10:rbx"",""x9:r9"",""x96:rax"",""x24:r10"",""x23:r15"",""x26:r8"",""x27:OF"",""x1:r13"",""x30:CF"",""x13:r12""]";
"	;chose >>RANDOMLY<< rbp from candidates :rbp[0].";
"	seto bpl; spill OF x27 to reg (rbp)";
"	;chose >>saved<< -0x1 from:0x0, -0x1[1] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x90:r11"",""x92:rcx"",""x4:r14"",""x11:rdx"",""x10:rbx"",""x9:r9"",""x96:rax"",""x24:r10"",""x23:r15"",""x26:r8"",""x27:bpl"",""x1:r13"",""x30:CF"",""x13:r12""]";
"	; freeing x24 (r10) no dependants anymore";
"	mov r10, -0x1 ; moving imm to reg";
"	inc r10; OF<-0x0, preserve CF 2";
"	adox r12, r9";
"	;chose >>saved<< arg1[2] from:x4, arg1[2][1] and candidates: x4, arg1[2]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x90:r11"",""x92:rcx"",""x4:r14"",""x11:rdx"",""x10:rbx"",""x9:r9"",""x96:rax"",""x23:r15"",""x26:r8"",""x27:bpl"",""x1:r13"",""x30:CF"",""x13:r12"",""0x0:r10"",""x14:OF"",""arg1[2]:rdx""]";
"	; freeing x9 (r9) no dependants anymore";
"	mov r9, rdx; preserving value of x11 into a new reg";
"	mov rdx, [rsi + 0x08 * 2 ]; saving arg1[2] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x90:r11"",""x92:rcx"",""x4:r14"",""x11:r9"",""x10:rbx"",""x96:rax"",""x23:r15"",""x26:r8"",""x27:bpl"",""x1:r13"",""x30:CF"",""x13:r12"",""0x0:r10"",""x14:OF"",""arg1[2]:rdx""]";
"	; freeing 0x0 (r10, since all are neeed, but this one is just an immediate value.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x90:r11"",""x92:rcx"",""x4:r14"",""x11:r9"",""x10:rbx"",""x96:rax"",""x23:r15"",""x26:r8"",""x27:bpl"",""x1:r13"",""x30:CF"",""x13:r12"",""x14:OF"",""arg1[2]:rdx"",""x8:r10""]";
"	;chose x96 to spill because list of spills:x94Lx94Lx94Lx94Lx94Lx55Lx55Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx44Lx44Lx44Lx44Lx44Lx44Lx44Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx122Lx122Lx122Lx122Lx122Lx122Lx122Lx71Lx71Lx71Lx71Lx71Lx71Lx71Lx71L0xffffffff00000001L0xffffffff00000001Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx96Lx96Lx96Lx96Lx96Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Larg1[2]Larg1[2]Larg1[2]Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Larg1[3]Larg1[3]L0xffffffffL0xffffffffL0xffffffffL0xffffffffLx16Lx16Lx17Lx17L-0x1L-0x1Lx1Lx76Lx76 and candidates: out1, x90, x92, x10, x96, x23, x26, x27, x1, x13";
"	; freeing, i.e. spilling x96, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x90(r11),x92(rcx),x4(r14),x11(r9),x10(rbx),x96(rax),x23(r15),x26(r8),x27(bpl),x1(r13),x13(r12),arg1[2](rdx),x8(r10); clobs x7,x8,x4,arg1[2],arg1,x11,x11,x8; will spare: x96 ";
"	mov [rsp + 0x08 * 2 ], rax; spilling x96 to mem";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x90:r11"",""x92:rcx"",""x4:r14"",""x11:r9"",""x10:rbx"",""x23:r15"",""x26:r8"",""x27:bpl"",""x1:r13"",""x30:CF"",""x13:r12"",""x14:OF"",""arg1[2]:rdx"",""x8:r10"",""x7:rax""]";
"	mulx r10, rax, r14; x8, x7<- x4 * arg1[2]";
"	";
"";
"	; add:";
"	; r:x31,f:x32<-add(x30,x13,x26)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx r8, r12";
"	;chose >>saved<< arg1[0] from:x1, arg1[0][1] and candidates: x1, arg1[0]";
"	mov rdx, [rsi + 0x08 * 0 ]; arg1[0] to rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x90:r11"",""x92:rcx"",""x4:r14"",""x11:r9"",""x10:rbx"",""x23:r15"",""x27:bpl"",""x1:r13"",""x13:r12"",""x14:OF"",""x8:r10"",""x7:rax"",""x32:CF"",""x31:r8"",""arg1[0]:rdx""]";
"	; freeing x13 (r12) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x90:r11"",""x92:rcx"",""x4:r14"",""x11:r9"",""x10:rbx"",""x23:r15"",""x27:bpl"",""x1:r13"",""x14:OF"",""x8:r10"",""x7:rax"",""x32:CF"",""x31:r8"",""arg1[0]:rdx"",""x46:r12""]";
"	;chose x8 to spill because list of spills:x94Lx94Lx94Lx94Lx94Lx55Lx55Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx44Lx44Lx44Lx44Lx44Lx44Lx44Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx122Lx122Lx122Lx122Lx122Lx122Lx122Lx71Lx71Lx71Lx71Lx71Lx71Lx71Lx71L0xffffffff00000001L0xffffffff00000001Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx96Lx96Lx96Lx96Lx96Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Larg1[2]Larg1[2]Larg1[2]Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Larg1[3]Larg1[3]L0xffffffffL0xffffffffL0xffffffffL0xffffffffLx16Lx16Lx17Lx17L-0x1L-0x1Lx1Lx76Lx76 and candidates: out1, x90, x92, x4, x11, x10, x23, x27, x8, x7, x31";
"	; freeing, i.e. spilling x8, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x90(r11),x92(rcx),x4(r14),x11(r9),x10(rbx),x23(r15),x27(bpl),x1(r13),x8(r10),x7(rax),x31(r8),arg1[0](rdx),x46(r12); clobs x45,x46,x1,arg1[0],arg1,x46; will spare: x8 ";
"	mov [rsp + 0x08 * 3 ], r10; spilling x8 to mem";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x90:r11"",""x92:rcx"",""x4:r14"",""x11:r9"",""x10:rbx"",""x23:r15"",""x27:bpl"",""x1:r13"",""x14:OF"",""x7:rax"",""x32:CF"",""x31:r8"",""arg1[0]:rdx"",""x46:r12"",""x45:r10""]";
"	mulx r12, r10, r13; x46, x45<- x1 * arg1[0]";
"	";
"";
"	; add:";
"	; r:x15,f:x16<-add(x14,x10,x7)";
"	; CF: ALIVE,OF: ALIVE";
"	adox rax, rbx";
"	";
"";
"	; add:";
"	; r:x54,f:x55<-add(0x0,x31,x45)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x90:r11"",""x92:rcx"",""x4:r14"",""x11:r9"",""x10:rbx"",""x23:r15"",""x27:bpl"",""x1:r13"",""x32:CF"",""arg1[0]:rdx"",""x46:r12"",""x45:r10"",""x16:OF"",""x15:rax"",""x54:r8""]";
"	; freeing x10 (rbx) no dependants anymore";
"	seto bl; spill OF x16 to reg (rbx)";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x90:r11"",""x92:rcx"",""x4:r14"",""x11:r9"",""x23:r15"",""x27:bpl"",""x1:r13"",""x32:CF"",""arg1[0]:rdx"",""x46:r12"",""x45:r10"",""x16:bl"",""x15:rax"",""x54:r8""]";
"	;chose arg1[0] to spill because list of spills:x94Lx94Lx94Lx94Lx94Lx55Lx55Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx44Lx44Lx44Lx44Lx44Lx44Lx44Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx122Lx122Lx122Lx122Lx122Lx122Lx122Lx71Lx71Lx71Lx71Lx71Lx71Lx71Lx71L0xffffffff00000001L0xffffffff00000001Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx96Lx96Lx96Lx96Lx96Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Larg1[2]Larg1[2]Larg1[2]Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Larg1[3]Larg1[3]L0xffffffffL0xffffffffL0xffffffffL0xffffffffLx16Lx16Lx17Lx17L-0x1L-0x1Lx1Lx76Lx76 and candidates: arg1[0]";
"	; freeing, i.e. spilling arg1[0], because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x90(r11),x92(rcx),x4(r14),x11(r9),x23(r15),x27(bpl),x1(r13),arg1[0](rdx),x46(r12),x45(r10),x16(bl),x15(rax),x54(r8); clobs x54,x55,0x0,x31,x45,x31,x16,x16,0x0; will spare: arg1[0] ";
"	mov rdx, 0x0 ; moving imm to reg";
"	dec rdx; OF<-0x0, preserve CF 3";
"	adox r8, r10";
"	";
"";
"	; add:";
"	; r:x28,f:_<-add(x27,x23)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x90:r11"",""x92:rcx"",""x4:r14"",""x11:r9"",""x23:r15"",""x27:bpl"",""x1:r13"",""x32:CF"",""x46:r12"",""x45:r10"",""x16:bl"",""x15:rax"",""x54:r8"",""-0x1:rdx"",""x55:OF""]";
"	; freeing x45 (r10) no dependants anymore";
"	movzx r10,  bpl; x28, copying x27 here, cause x27 is needed in a reg for other than x28, namely all: , x28, size: 1";
"	lea r10, [r10+r15]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x90:r11"",""x92:rcx"",""x4:r14"",""x11:r9"",""x23:r15"",""x27:bpl"",""x1:r13"",""x32:CF"",""x46:r12"",""x16:bl"",""x15:rax"",""x54:r8"",""-0x1:rdx"",""x55:OF"",""x28:r10""]";
"	; freeing x23 (r15) no dependants anymore";
"	mov r15, 0xffffffffffffffff ; moving imm to reg";
"	;chose >>saved<< 0xffffffffffffffff from:x54, 0xffffffffffffffff[1] and candidates: x54, 0xffffffffffffffff";
"	mov rdx, r15; 0xffffffffffffffff to rdx";
"	; fr:r15";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x90:r11"",""x92:rcx"",""x4:r14"",""x11:r9"",""x27:bpl"",""x1:r13"",""x32:CF"",""x46:r12"",""x16:bl"",""x15:rax"",""x54:r8"",""x55:OF"",""x28:r10"",""0xffffffffffffffff:rdx""]";
"	;chose >>RANDOMLY<< r15 from candidates :r15[0].";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x90:r11"",""x92:rcx"",""x4:r14"",""x11:r9"",""x27:bpl"",""x1:r13"",""x32:CF"",""x46:r12"",""x16:bl"",""x15:rax"",""x54:r8"",""x55:OF"",""x28:r10"",""0xffffffffffffffff:rdx"",""x69:r15""]";
"	; freeing x27 (bpl) no dependants anymore";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x90:r11"",""x92:rcx"",""x4:r14"",""x11:r9"",""x1:r13"",""x32:CF"",""x46:r12"",""x16:bl"",""x15:rax"",""x54:r8"",""x55:OF"",""x28:r10"",""0xffffffffffffffff:rdx"",""x69:r15"",""x68:rbp""]";
"	mulx r15, rbp, r8; x69, x68<- x54 * 0xffffffffffffffff";
"	";
"";
"	; add:";
"	; r:_,f:x74<-add(0x0,x54,x68)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x90:r11"",""x92:rcx"",""x4:r14"",""x11:r9"",""x1:r13"",""x32:CF"",""x46:r12"",""x16:bl"",""x15:rax"",""x54:r8"",""x55:OF"",""x28:r10"",""0xffffffffffffffff:rdx"",""x69:r15"",""x68:rbp""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x94Lx94Lx94Lx94Lx94Lx55Lx55Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx44Lx44Lx44Lx44Lx44Lx44Lx44Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx122Lx122Lx122Lx122Lx122Lx122Lx122Lx71Lx71Lx71Lx71Lx71Lx71Lx71Lx71L0xffffffff00000001L0xffffffff00000001Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx96Lx96Lx96Lx96Lx96Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Larg1[2]Larg1[2]Larg1[2]Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Larg1[3]Larg1[3]L0xffffffffL0xffffffffL0xffffffffL0xffffffffLx16Lx16Lx17Lx17L-0x1L-0x1Lx1Lx76Lx76 and candidates: 0xffffffffffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x90(r11),x92(rcx),x4(r14),x11(r9),x1(r13),x46(r12),x16(bl),x15(rax),x54(r8),x28(r10),0xffffffffffffffff(rdx),x69(r15),x68(rbp); clobs _,x74,0x0,x54,x68,x54; will spare: 0xffffffffffffffff ";
"	mov rdx,  r8; _, copying x54 here, cause x54 is needed in a reg for other than _, namely all: , x66--x67, x64--x65, _--x74, size: 3";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x90:r11"",""x92:rcx"",""x4:r14"",""x11:r9"",""x1:r13"",""x32:CF"",""x46:r12"",""x16:bl"",""x15:rax"",""x54:r8"",""x55:OF"",""x28:r10"",""x69:r15"",""x68:rbp"",""_:rdx""]";
"	;chose x90 to spill because list of spills:x94Lx94Lx94Lx94Lx94Lx55Lx55Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx44Lx44Lx44Lx44Lx44Lx44Lx44Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx122Lx122Lx122Lx122Lx122Lx122Lx122Lx71Lx71Lx71Lx71Lx71Lx71Lx71Lx71L0xffffffff00000001L0xffffffff00000001Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx96Lx96Lx96Lx96Lx96Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Larg1[2]Larg1[2]Larg1[2]Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Larg1[3]Larg1[3]L0xffffffffL0xffffffffL0xffffffffL0xffffffffLx16Lx16Lx17Lx17L-0x1L-0x1Lx1Lx76Lx76 and candidates: out1, arg1, x90, x92, x4, x11, x1, x46, x16, x15, x28, x69";
"	; freeing, i.e. spilling x90, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x90(r11),x92(rcx),x4(r14),x11(r9),x1(r13),x46(r12),x16(bl),x15(rax),x54(r8),x28(r10),x69(r15),x68(rbp),_(rdx); clobs _,x74,0x0,x54,x68,x54,_,x55; will spare: x90 ";
"	mov [rsp + 0x08 * 4 ], r11; spilling x90 to mem";
"	seto r11b; spill OF x55 to reg (r11)";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x4:r14"",""x11:r9"",""x1:r13"",""x32:CF"",""x46:r12"",""x16:bl"",""x15:rax"",""x54:r8"",""x55:r11b"",""x28:r10"",""x69:r15"",""x68:rbp"",""_:rdx""]";
"	;chose x16 to spill because list of spills:x94Lx94Lx94Lx94Lx94Lx55Lx55Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx44Lx44Lx44Lx44Lx44Lx44Lx44Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx122Lx122Lx122Lx122Lx122Lx122Lx122Lx71Lx71Lx71Lx71Lx71Lx71Lx71Lx71L0xffffffff00000001L0xffffffff00000001Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx96Lx96Lx96Lx96Lx96Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Larg1[2]Larg1[2]Larg1[2]Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Larg1[3]Larg1[3]L0xffffffffL0xffffffffL0xffffffffL0xffffffffLx16Lx16Lx17Lx17L-0x1L-0x1Lx1Lx76Lx76 and candidates: out1, arg1, x92, x4, x11, x1, x46, x16, x15, x28, x69";
"	; freeing, i.e. spilling x16, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x92(rcx),x4(r14),x11(r9),x1(r13),x46(r12),x16(bl),x15(rax),x54(r8),x55(r11b),x28(r10),x69(r15),x68(rbp),_(rdx); clobs _,x74,0x0,x54,x68,x54,_,x55,x55,0x0; will spare: x16 ";
"	mov byte [rsp + 0x08 * 5 ], bl; spilling byte x16 to mem";
"	mov rbx, 0x0 ; moving imm to reg";
"	dec rbx; OF<-0x0, preserve CF 3";
"	adox rdx, rbp";
"	;chose >>saved<< arg1[1] from:x1, arg1[1][1] and candidates: x1, arg1[1]";
"	mov rdx, [rsi + 0x08 * 1 ]; arg1[1] to rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x4:r14"",""x11:r9"",""x1:r13"",""x32:CF"",""x46:r12"",""x15:rax"",""x54:r8"",""x55:r11b"",""x28:r10"",""x69:r15"",""x68:rbp"",""-0x1:rbx"",""x74:OF"",""arg1[1]:rdx""]";
"	; freeing x68 (rbp) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x4:r14"",""x11:r9"",""x1:r13"",""x32:CF"",""x46:r12"",""x15:rax"",""x54:r8"",""x55:r11b"",""x28:r10"",""x69:r15"",""-0x1:rbx"",""x74:OF"",""arg1[1]:rdx"",""x44:rbp""]";
"	;chose -0x1 to spill because list of spills:x94Lx94Lx94Lx94Lx94Lx55Lx55Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx44Lx44Lx44Lx44Lx44Lx44Lx44Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx122Lx122Lx122Lx122Lx122Lx122Lx122Lx71Lx71Lx71Lx71Lx71Lx71Lx71Lx71L0xffffffff00000001L0xffffffff00000001Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx96Lx96Lx96Lx96Lx96Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Larg1[2]Larg1[2]Larg1[2]Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Larg1[3]Larg1[3]L0xffffffffL0xffffffffL0xffffffffL0xffffffffLx16Lx16Lx17Lx17L-0x1L-0x1Lx1Lx76Lx76 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x92(rcx),x4(r14),x11(r9),x1(r13),x46(r12),x15(rax),x54(r8),x55(r11b),x28(r10),x69(r15),-0x1(rbx),arg1[1](rdx),x44(rbp); clobs x43,x44,x1,arg1[1],arg1,x44; will spare: -0x1 ";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x4:r14"",""x11:r9"",""x1:r13"",""x32:CF"",""x46:r12"",""x15:rax"",""x54:r8"",""x55:r11b"",""x28:r10"",""x69:r15"",""x74:OF"",""arg1[1]:rdx"",""x44:rbp"",""x43:rbx""]";
"	mulx rbp, rbx, r13; x44, x43<- x1 * arg1[1]";
"	";
"";
"	; add:";
"	; r:x33,f:x34<-add(x32,x15,x28)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx r10, rax";
"	";
"";
"	; add:";
"	; r:x47,f:x48<-add(0x0,x46,x43)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x4:r14"",""x11:r9"",""x1:r13"",""x15:rax"",""x54:r8"",""x55:r11b"",""x69:r15"",""x74:OF"",""arg1[1]:rdx"",""x44:rbp"",""x43:rbx"",""x34:CF"",""x33:r10"",""x47:r12""]";
"	; freeing x15 (rax) no dependants anymore";
"	setc al; spill CF x34 to reg (rax)";
"	clc;";
"	adcx r12, rbx";
"	";
"";
"	; add:";
"	; r:x56,f:x57<-add(x55,x33,x47)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x4:r14"",""x11:r9"",""x1:r13"",""x54:r8"",""x55:r11b"",""x69:r15"",""x74:OF"",""arg1[1]:rdx"",""x44:rbp"",""x43:rbx"",""x34:al"",""x47:r12"",""x48:CF"",""x56:r10""]";
"	; freeing x43 (rbx) no dependants anymore";
"	seto bl; spill OF x74 to reg (rbx)";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x4:r14"",""x11:r9"",""x1:r13"",""x54:r8"",""x55:r11b"",""x69:r15"",""x74:bl"",""arg1[1]:rdx"",""x44:rbp"",""x34:al"",""x47:r12"",""x48:CF"",""x56:r10""]";
"	;chose arg1[1] to spill because list of spills:x94Lx94Lx94Lx94Lx94Lx55Lx55Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx44Lx44Lx44Lx44Lx44Lx44Lx44Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx122Lx122Lx122Lx122Lx122Lx122Lx122Lx71Lx71Lx71Lx71Lx71Lx71Lx71Lx71L0xffffffff00000001L0xffffffff00000001Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx96Lx96Lx96Lx96Lx96Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Larg1[2]Larg1[2]Larg1[2]Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Larg1[3]Larg1[3]L0xffffffffL0xffffffffL0xffffffffL0xffffffffLx16Lx16Lx17Lx17L-0x1L-0x1Lx1Lx76Lx76 and candidates: arg1[1]";
"	; freeing, i.e. spilling arg1[1], because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x92(rcx),x4(r14),x11(r9),x1(r13),x54(r8),x55(r11b),x69(r15),x74(bl),arg1[1](rdx),x44(rbp),x34(al),x47(r12),x56(r10); clobs x56,x57,x55,x33,x47,x33,x74,x74,0x0; will spare: arg1[1] ";
"	mov rdx, 0x0 ; moving imm to reg";
"	dec rdx; OF<-0x0, preserve CF 3";
"	movzx r11, r11b";
"	adox r11, rdx; loading flag";
"	adox r10, r12";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x4:r14"",""x11:r9"",""x1:r13"",""x54:r8"",""x55:r11b"",""x69:r15"",""x74:bl"",""x44:rbp"",""x34:al"",""x47:r12"",""x48:CF"",""x56:r10"",""-0x1:rdx"",""x57:OF""]";
"	; freeing x55 (r11b) no dependants anymore";
"	mov r11, 0xffffffff ; moving imm to reg";
"	;chose >>saved<< 0xffffffff from:x54, 0xffffffff[1] and candidates: x54, 0xffffffff";
"	mov rdx, r11; 0xffffffff to rdx";
"	; fr:r11";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x4:r14"",""x11:r9"",""x1:r13"",""x54:r8"",""x69:r15"",""x74:bl"",""x44:rbp"",""x34:al"",""x47:r12"",""x48:CF"",""x56:r10"",""x57:OF"",""0xffffffff:rdx""]";
"	;chose >>RANDOMLY<< r11 from candidates :r11[0].";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x4:r14"",""x11:r9"",""x1:r13"",""x54:r8"",""x69:r15"",""x74:bl"",""x44:rbp"",""x34:al"",""x47:r12"",""x48:CF"",""x56:r10"",""x57:OF"",""0xffffffff:rdx"",""x67:r11""]";
"	; freeing x47 (r12) no dependants anymore";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x4:r14"",""x11:r9"",""x1:r13"",""x54:r8"",""x69:r15"",""x74:bl"",""x44:rbp"",""x34:al"",""x48:CF"",""x56:r10"",""x57:OF"",""0xffffffff:rdx"",""x67:r11"",""x66:r12""]";
"	mulx r11, r12, r8; x67, x66<- x54 * 0xffffffff";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x4:r14"",""x11:r9"",""x1:r13"",""x54:r8"",""x69:r15"",""x74:bl"",""x44:rbp"",""x34:al"",""x48:CF"",""x56:r10"",""x57:OF"",""0xffffffff:rdx"",""x67:r11"",""x66:r12""]";
"	;chose 0xffffffff to spill because list of spills:x94Lx94Lx94Lx94Lx94Lx55Lx55Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx44Lx44Lx44Lx44Lx44Lx44Lx44Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx122Lx122Lx122Lx122Lx122Lx122Lx122Lx71Lx71Lx71Lx71Lx71Lx71Lx71Lx71L0xffffffff00000001L0xffffffff00000001Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx96Lx96Lx96Lx96Lx96Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Larg1[2]Larg1[2]Larg1[2]Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Larg1[3]Larg1[3]L0xffffffffL0xffffffffL0xffffffffL0xffffffffLx16Lx16Lx17Lx17L-0x1L-0x1Lx1Lx76Lx76 and candidates: 0xffffffff";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x92(rcx),x4(r14),x11(r9),x1(r13),x54(r8),x69(r15),x74(bl),x44(rbp),x34(al),x56(r10),0xffffffff(rdx),x67(r11),x66(r12); clobs x20,x21,x11,0xffffffff00000001,0xffffffff00000001; will spare: 0xffffffff ";
"	mov rdx, 0xffffffff00000001 ; moving imm to reg";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x4:r14"",""x1:r13"",""x54:r8"",""x69:r15"",""x74:bl"",""x44:rbp"",""x34:al"",""x48:CF"",""x56:r10"",""x57:OF"",""x67:r11"",""x66:r12"",""0xffffffff00000001:rdx"",""x21:r9""]";
"	;chose x44 to spill because list of spills:x94Lx94Lx94Lx94Lx94Lx55Lx55Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx44Lx44Lx44Lx44Lx44Lx44Lx44Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx122Lx122Lx122Lx122Lx122Lx122Lx122Lx71Lx71Lx71Lx71Lx71Lx71Lx71Lx71L0xffffffff00000001L0xffffffff00000001Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx96Lx96Lx96Lx96Lx96Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Larg1[2]Larg1[2]Larg1[2]Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Larg1[3]Larg1[3]L0xffffffffL0xffffffffL0xffffffffL0xffffffffLx16Lx16Lx17Lx17L-0x1L-0x1Lx1Lx76Lx76 and candidates: out1, arg1, x92, x4, x1, x54, x69, x74, x44, x34, x56, x67, x66";
"	; freeing, i.e. spilling x44, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x92(rcx),x4(r14),x1(r13),x54(r8),x69(r15),x74(bl),x44(rbp),x34(al),x56(r10),x67(r11),x66(r12),0xffffffff00000001(rdx),x21(r9); clobs x20,x21,x11,0xffffffff00000001,0xffffffff00000001,0xffffffff00000001; will spare: x44 ";
"	mov [rsp + 0x08 * 6 ], rbp; spilling x44 to mem";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x4:r14"",""x1:r13"",""x54:r8"",""x69:r15"",""x74:bl"",""x34:al"",""x48:CF"",""x56:r10"",""x57:OF"",""x67:r11"",""x66:r12"",""0xffffffff00000001:rdx"",""x21:r9"",""x20:rbp""]";
"	mulx r9, rbp, r9; x21, x20<- x11 * 0xffffffff00000001";
"	";
"";
"	; add:";
"	; r:x70,f:x71<-add(0x0,x69,x66)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x4:r14"",""x1:r13"",""x54:r8"",""x74:bl"",""x34:al"",""x48:CF"",""x56:r10"",""x57:OF"",""x67:r11"",""x66:r12"",""0xffffffff00000001:rdx"",""x21:r9"",""x20:rbp"",""x70:r15""]";
"	;chose 0xffffffff00000001 to spill because list of spills:x94Lx94Lx94Lx94Lx94Lx55Lx55Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx44Lx44Lx44Lx44Lx44Lx44Lx44Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx122Lx122Lx122Lx122Lx122Lx122Lx122Lx71Lx71Lx71Lx71Lx71Lx71Lx71Lx71L0xffffffff00000001L0xffffffff00000001Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx96Lx96Lx96Lx96Lx96Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Larg1[2]Larg1[2]Larg1[2]Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Larg1[3]Larg1[3]L0xffffffffL0xffffffffL0xffffffffL0xffffffffLx16Lx16Lx17Lx17L-0x1L-0x1Lx1Lx76Lx76 and candidates: 0xffffffff00000001";
"	; freeing, i.e. spilling 0xffffffff00000001, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x92(rcx),x4(r14),x1(r13),x54(r8),x74(bl),x34(al),x56(r10),x67(r11),x66(r12),0xffffffff00000001(rdx),x21(r9),x20(rbp),x70(r15); clobs x70,x71,0x0,x69,x66,x69,x48; will spare: 0xffffffff00000001 ";
"	setc dl; spill CF x48 to reg (rdx)";
"	clc;";
"	adcx r15, r12";
"	";
"";
"	; add:";
"	; r:x72,f:_<-add(x71,x67)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x4:r14"",""x1:r13"",""x54:r8"",""x74:bl"",""x34:al"",""x48:dl"",""x56:r10"",""x57:OF"",""x66:r12"",""x21:r9"",""x20:rbp"",""x70:r15"",""x71:CF"",""x72:r11""]";
"	; freeing x66 (r12) no dependants anymore";
"	mov r12, 0x0 ; moving imm to reg";
"	adcx r11, r12";
"	;chose >>saved<< arg1[3] from:x4, arg1[3][1] and candidates: x4, arg1[3]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x4:r14"",""x1:r13"",""x54:r8"",""x74:bl"",""x34:al"",""x48:dl"",""x56:r10"",""x57:OF"",""x21:r9"",""x20:rbp"",""x70:r15"",""x71:CF"",""x72:r11"",""0x0:r12"",""arg1[3]:rdx""]";
"	; freeing 0x0 (r12, since all are neeed, but this one is just an immediate value.";
"	mov r12b, dl; preserving value of x48 into a new reg";
"	mov rdx, [rsi + 0x08 * 3 ]; saving arg1[3] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x1:r13"",""x54:r8"",""x74:bl"",""x34:al"",""x48:r12b"",""x56:r10"",""x57:OF"",""x21:r9"",""x20:rbp"",""x70:r15"",""x71:CF"",""x72:r11"",""arg1[3]:rdx"",""x6:r14""]";
"	;chose x1 to spill because list of spills:x94Lx94Lx94Lx94Lx94Lx55Lx55Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx44Lx44Lx44Lx44Lx44Lx44Lx44Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx122Lx122Lx122Lx122Lx122Lx122Lx122Lx71Lx71Lx71Lx71Lx71Lx71Lx71Lx71L0xffffffff00000001L0xffffffff00000001Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx96Lx96Lx96Lx96Lx96Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Larg1[2]Larg1[2]Larg1[2]Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Larg1[3]Larg1[3]L0xffffffffL0xffffffffL0xffffffffL0xffffffffLx16Lx16Lx17Lx17L-0x1L-0x1Lx1Lx76Lx76 and candidates: out1, x92, x1, x54, x74, x34, x56, x21, x20, x70, x72";
"	; freeing, i.e. spilling x1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x92(rcx),x1(r13),x54(r8),x74(bl),x34(al),x48(r12b),x56(r10),x21(r9),x20(rbp),x70(r15),x72(r11),arg1[3](rdx),x6(r14); clobs x5,x6,x4,arg1[3],arg1,x48,x48; will spare: x1 ";
"	mov [rsp + 0x08 * 7 ], r13; spilling x1 to mem";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x54:r8"",""x74:bl"",""x34:al"",""x48:r12b"",""x56:r10"",""x57:OF"",""x21:r9"",""x20:rbp"",""x70:r15"",""x71:CF"",""x72:r11"",""arg1[3]:rdx"",""x6:r14"",""x5:r13""]";
"	mulx r14, r13, r14; x6, x5<- x4 * arg1[3]";
"	";
"";
"	; add:";
"	; r:x75,f:x76<-add(x74,x56,x70)";
"	; CF: KILLED,OF: ALIVE";
"	clc;";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x54:r8"",""x74:bl"",""x34:al"",""x48:r12b"",""x57:OF"",""x21:r9"",""x20:rbp"",""x70:r15"",""x71:CF"",""x72:r11"",""arg1[3]:rdx"",""x6:r14"",""x5:r13"",""x75:r10""]";
"	;chose arg1[3] to spill because list of spills:x94Lx94Lx94Lx94Lx94Lx55Lx55Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx44Lx44Lx44Lx44Lx44Lx44Lx44Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx122Lx122Lx122Lx122Lx122Lx122Lx122Lx71Lx71Lx71Lx71Lx71Lx71Lx71Lx71L0xffffffff00000001L0xffffffff00000001Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx96Lx96Lx96Lx96Lx96Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Larg1[2]Larg1[2]Larg1[2]Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Larg1[3]Larg1[3]L0xffffffffL0xffffffffL0xffffffffL0xffffffffLx16Lx16Lx17Lx17L-0x1L-0x1Lx1Lx76Lx76 and candidates: arg1[3]";
"	; freeing, i.e. spilling arg1[3], because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x92(rcx),x54(r8),x74(bl),x34(al),x48(r12b),x21(r9),x20(rbp),x70(r15),x72(r11),arg1[3](rdx),x6(r14),x5(r13),x75(r10); clobs x75,x76,x74,x56,x70,x56,-0x1; will spare: arg1[3] ";
"	mov rdx, -0x1 ; moving imm to reg";
"	movzx rbx, bl";
"	adcx rbx, rdx; loading flag";
"	adcx r10, r15";
"	";
"";
"	; add:";
"	; r:x17,f:x18<-add(x16,x8,x5)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x54:r8"",""x74:bl"",""x34:al"",""x48:r12b"",""x57:OF"",""x21:r9"",""x20:rbp"",""x70:r15"",""x72:r11"",""x6:r14"",""x75:r10"",""-0x1:rdx"",""x76:CF"",""x17:r13""]";
"	; freeing x74 (bl) no dependants anymore";
"	setc bl; spill CF x76 to reg (rbx)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x54:r8"",""x34:al"",""x48:r12b"",""x57:OF"",""x21:r9"",""x20:rbp"",""x70:r15"",""x72:r11"",""x6:r14"",""x75:r10"",""-0x1:rdx"",""x76:bl"",""x17:r13""]";
"	; freeing x70 (r15) no dependants anymore";
"	movzx r15, byte [rsp + 0x08 * 5 ]; load byte memx16 to register64";
"	clc;";
"	adcx r15, rdx; loading flag";
"	adcx r13, [rsp + 0x08 * 3 ]";
"	";
"";
"	; add:";
"	; r:x19,f:_<-add(x18,x6)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x16:r15"",""x54:r8"",""x34:al"",""x48:r12b"",""x57:OF"",""x21:r9"",""x20:rbp"",""x72:r11"",""x75:r10"",""-0x1:rdx"",""x76:bl"",""x17:r13"",""x18:CF"",""x19:r14""]";
"	; freeing x16 (r15) no dependants anymore";
"	mov r15, 0x0 ; moving imm to reg";
"	adcx r14, r15";
"	";
"";
"	; add:";
"	; r:x35,f:x36<-add(x34,x17,x20)";
"	; CF: KILLED,OF: ALIVE";
"	clc;";
"	movzx rax, al";
"	adcx rax, rdx; loading flag";
"	adcx r13, rbp";
"	;chose >>saved<< arg1[2] from:x1, arg1[2][1] and candidates: x1, arg1[2]";
"	mov rdx, [rsi + 0x08 * 2 ]; arg1[2] to rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x54:r8"",""x34:al"",""x48:r12b"",""x57:OF"",""x21:r9"",""x20:rbp"",""x72:r11"",""x75:r10"",""x76:bl"",""x19:r14"",""0x0:r15"",""x35:r13"",""x36:CF"",""arg1[2]:rdx""]";
"	; freeing x34 (al) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x54:r8"",""x48:r12b"",""x57:OF"",""x21:r9"",""x20:rbp"",""x72:r11"",""x75:r10"",""x76:bl"",""x19:r14"",""0x0:r15"",""x35:r13"",""x36:CF"",""arg1[2]:rdx"",""x42:rax""]";
"	; freeing x20 (rbp) no dependants anymore";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x54:r8"",""x48:r12b"",""x57:OF"",""x21:r9"",""x72:r11"",""x75:r10"",""x76:bl"",""x19:r14"",""0x0:r15"",""x35:r13"",""x36:CF"",""arg1[2]:rdx"",""x42:rax"",""x41:rbp""]";
"	mulx rax, rbp, [rsp + 0x08 * 7 ]; x42, x41<- x1 * arg1[2]";
"	";
"";
"	; add:";
"	; r:x37,f:x38<-add(x36,x19,x21)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx r9, r14";
"	";
"";
"	; add:";
"	; r:x49,f:x50<-add(x48,x44,x41)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x54:r8"",""x48:r12b"",""x57:OF"",""x72:r11"",""x75:r10"",""x76:bl"",""x19:r14"",""0x0:r15"",""x35:r13"",""arg1[2]:rdx"",""x42:rax"",""x38:CF"",""x37:r9"",""x49:rbp""]";
"	; freeing x19 (r14) no dependants anymore";
"	setc r14b; spill CF x38 to reg (r14)";
"	clc;";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x54:r8"",""x48:r12b"",""x57:OF"",""x72:r11"",""x75:r10"",""x76:bl"",""0x0:r15"",""x35:r13"",""arg1[2]:rdx"",""x42:rax"",""x38:r14b"",""x37:r9"",""x49:rbp""]";
"	; freeing 0x0 (r15, since all are neeed, but this one is just an immediate value.";
"	mov r15, -0x1 ; moving imm to reg";
"	movzx r12, r12b";
"	adcx r12, r15; loading flag";
"	adcx rbp, [rsp + 0x08 * 6 ]";
"	;chose >>saved<< arg1[3] from:x1, arg1[3][1] and candidates: x1, arg1[3]";
"	mov rdx, [rsi + 0x08 * 3 ]; arg1[3] to rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x54:r8"",""x48:r12b"",""x57:OF"",""x72:r11"",""x75:r10"",""x76:bl"",""x35:r13"",""x42:rax"",""x38:r14b"",""x37:r9"",""x49:rbp"",""-0x1:r15"",""x50:CF"",""arg1[3]:rdx""]";
"	; freeing x48 (r12b) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x54:r8"",""x57:OF"",""x72:r11"",""x75:r10"",""x76:bl"",""x35:r13"",""x42:rax"",""x38:r14b"",""x37:r9"",""x49:rbp"",""-0x1:r15"",""x50:CF"",""arg1[3]:rdx"",""x40:r12""]";
"	;chose -0x1 to spill because list of spills:x94Lx94Lx94Lx94Lx94Lx55Lx55Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx44Lx44Lx44Lx44Lx44Lx44Lx44Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx122Lx122Lx122Lx122Lx122Lx122Lx122Lx71Lx71Lx71Lx71Lx71Lx71Lx71Lx71L0xffffffff00000001L0xffffffff00000001Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx96Lx96Lx96Lx96Lx96Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Larg1[2]Larg1[2]Larg1[2]Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Larg1[3]Larg1[3]L0xffffffffL0xffffffffL0xffffffffL0xffffffffLx16Lx16Lx17Lx17L-0x1L-0x1Lx1Lx76Lx76 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x92(rcx),x54(r8),x72(r11),x75(r10),x76(bl),x35(r13),x42(rax),x38(r14b),x37(r9),x49(rbp),-0x1(r15),arg1[3](rdx),x40(r12); clobs x39,x40,x1,arg1[3],arg1,x40; will spare: -0x1 ";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x54:r8"",""x57:OF"",""x72:r11"",""x75:r10"",""x76:bl"",""x35:r13"",""x42:rax"",""x38:r14b"",""x37:r9"",""x49:rbp"",""x50:CF"",""arg1[3]:rdx"",""x40:r12"",""x39:r15""]";
"	mulx r12, r15, [rsp + 0x08 * 7 ]; x40, x39<- x1 * arg1[3]";
"	";
"";
"	; add:";
"	; r:x58,f:x59<-add(x57,x35,x49)";
"	; CF: ALIVE,OF: ALIVE";
"	adox rbp, r13";
"	";
"";
"	; add:";
"	; r:x51,f:x52<-add(x50,x42,x39)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx r15, rax";
"	";
"";
"	; add:";
"	; r:x53,f:_<-add(x52,x40)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x54:r8"",""x72:r11"",""x75:r10"",""x76:bl"",""x35:r13"",""x42:rax"",""x38:r14b"",""x37:r9"",""arg1[3]:rdx"",""x59:OF"",""x58:rbp"",""x52:CF"",""x51:r15"",""x53:r12""]";
"	; freeing x35 (r13) no dependants anymore";
"	mov r13, 0x0 ; moving imm to reg";
"	adcx r12, r13";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x54:r8"",""x72:r11"",""x75:r10"",""x76:bl"",""x42:rax"",""x38:r14b"",""x37:r9"",""arg1[3]:rdx"",""x59:OF"",""x58:rbp"",""x52:CF"",""x51:r15"",""x53:r12"",""0x0:r13""]";
"	; freeing x42 (rax) no dependants anymore";
"	mov rax, 0xffffffff00000001 ; moving imm to reg";
"	;chose >>saved<< 0xffffffff00000001 from:x54, 0xffffffff00000001[1] and candidates: x54, 0xffffffff00000001";
"	mov rdx, rax; 0xffffffff00000001 to rdx";
"	; fr:rax";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x72:r11"",""x75:r10"",""x76:bl"",""x38:r14b"",""x37:r9"",""x59:OF"",""x58:rbp"",""x52:CF"",""x51:r15"",""x53:r12"",""0x0:r13"",""0xffffffff00000001:rdx"",""x65:r8""]";
"	;chose >>RANDOMLY<< rax from candidates :rax[0].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x72:r11"",""x75:r10"",""x76:bl"",""x38:r14b"",""x37:r9"",""x59:OF"",""x58:rbp"",""x52:CF"",""x51:r15"",""x53:r12"",""0x0:r13"",""0xffffffff00000001:rdx"",""x65:r8"",""x64:rax""]";
"	mulx r8, rax, r8; x65, x64<- x54 * 0xffffffff00000001";
"	";
"";
"	; add:";
"	; r:x60,f:x61<-add(x59,x37,x51)";
"	; CF: KILLED,OF: ALIVE";
"	adox r15, r9";
"	";
"";
"	; add:";
"	; r:x77,f:x78<-add(x76,x58,x72)";
"	; CF: KILLED,OF: ALIVE";
"	clc;";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x72:r11"",""x75:r10"",""x76:bl"",""x38:r14b"",""x37:r9"",""x52:CF"",""x53:r12"",""0x0:r13"",""0xffffffff00000001:rdx"",""x65:r8"",""x64:rax"",""x61:OF"",""x60:r15"",""x77:rbp""]";
"	; freeing x37 (r9) no dependants anymore";
"	mov r9, -0x1 ; moving imm to reg";
"	movzx rbx, bl";
"	adcx rbx, r9; loading flag";
"	adcx rbp, r11";
"	";
"";
"	; add:";
"	; r:x79,f:x80<-add(x78,x60,x64)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx rax, r15";
"	";
"";
"	; add:";
"	; r:x62,f:x63<-add(x61,x38,x53)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x72:r11"",""x75:r10"",""x76:bl"",""x38:r14b"",""x53:r12"",""0x0:r13"",""0xffffffff00000001:rdx"",""x65:r8"",""x60:r15"",""x77:rbp"",""-0x1:r9"",""x80:CF"",""x79:rax"",""x63:OF""]";
"	; freeing x72 (r11) no dependants anymore";
"	movzx r11,  r14b; x62, copying x38 here, cause x38 is needed in a reg for other than x62, namely all: , x62--x63, size: 1";
"	adox r11, r12";
"	";
"";
"	; add:";
"	; r:x99,f:x100<-add(0x0,x75,x90)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x75:r10"",""x76:bl"",""x38:r14b"",""x53:r12"",""0x0:r13"",""0xffffffff00000001:rdx"",""x65:r8"",""x60:r15"",""x77:rbp"",""-0x1:r9"",""x80:CF"",""x79:rax"",""x63:OF"",""x62:r11""]";
"	; freeing x76 (bl) no dependants anymore";
"	mov rbx,  [rsp + 0x08 * 4 ]; x99, copying x90 here, cause x90 is needed in a reg for other than x99, namely all: , x99--x100, size: 1";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x75:r10"",""x38:r14b"",""x53:r12"",""0x0:r13"",""0xffffffff00000001:rdx"",""x65:r8"",""x60:r15"",""x77:rbp"",""-0x1:r9"",""x80:CF"",""x79:rax"",""x63:OF"",""x62:r11"",""x99:rbx""]";
"	; freeing x38 (r14b) no dependants anymore";
"	seto r14b; spill OF x63 to reg (r14)";
"	inc r9; OF<-0x0, preserve CF 1";
"	adox rbx, r10";
"	";
"";
"	; add:";
"	; r:x81,f:x82<-add(x80,x62,x65)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx r8, r11";
"	; fr:r13";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x75:r10"",""x53:r12"",""0x0:r9"",""0xffffffff00000001:rdx"",""x60:r15"",""x77:rbp"",""x79:rax"",""x63:r14b"",""x62:r11"",""x99:rbx"",""x100:OF"",""x82:CF"",""x81:r8""]";
"	;chose >>RANDOMLY<< r13 from candidates :r13[0].";
"	mov r13, 0xffffffff ; moving imm to reg";
"	;chose >>saved<< x99 from:x99, 0xffffffff[0] and candidates: x99, 0xffffffff";
"	xchg rdx, rbx; x99, swapping with 0xffffffff00000001, which is currently in rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x75:r10"",""x53:r12"",""0x0:r9"",""0xffffffff00000001:rbx"",""x60:r15"",""x77:rbp"",""x79:rax"",""x63:r14b"",""x62:r11"",""x99:rdx"",""x100:OF"",""x82:CF"",""x81:r8"",""0xffffffff:r13""]";
"	; freeing x75 (r10) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""x53:r12"",""0x0:r9"",""0xffffffff00000001:rbx"",""x60:r15"",""x77:rbp"",""x79:rax"",""x63:r14b"",""x62:r11"",""x99:rdx"",""x100:OF"",""x82:CF"",""x81:r8"",""0xffffffff:r13"",""x112:r10""]";
"	; freeing x53 (r12) no dependants anymore";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""0x0:r9"",""0xffffffff00000001:rbx"",""x60:r15"",""x77:rbp"",""x79:rax"",""x63:r14b"",""x62:r11"",""x99:rdx"",""x100:OF"",""x82:CF"",""x81:r8"",""0xffffffff:r13"",""x112:r10"",""x111:r12""]";
"	mulx r10, r12, r13; x112, x111<- x99 * 0xffffffff";
"	";
"";
"	; add:";
"	; r:x83,f:_<-add(x82,x63)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""0x0:r9"",""0xffffffff00000001:rbx"",""x60:r15"",""x77:rbp"",""x79:rax"",""x63:r14b"",""x62:r11"",""x99:rdx"",""x100:OF"",""x82:CF"",""x81:r8"",""0xffffffff:r13"",""x112:r10"",""x111:r12""]";
"	; freeing x60 (r15) no dependants anymore";
"	movzx r15,  r14b; x83, copying x63 here, cause x63 is needed in a reg for other than x83, namely all: , x83, size: 1";
"	adcx r15, r9";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""0x0:r9"",""0xffffffff00000001:rbx"",""x77:rbp"",""x79:rax"",""x63:r14b"",""x62:r11"",""x99:rdx"",""x100:OF"",""x82:CF"",""x81:r8"",""0xffffffff:r13"",""x112:r10"",""x111:r12"",""x83:r15""]";
"	; freeing x63 (r14b) no dependants anymore";
"	mov r14, 0xffffffffffffffff ; moving imm to reg";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""0x0:r9"",""0xffffffff00000001:rbx"",""x77:rbp"",""x79:rax"",""x62:r11"",""x99:rdx"",""x100:OF"",""x82:CF"",""x81:r8"",""0xffffffff:r13"",""x112:r10"",""x111:r12"",""x83:r15"",""0xffffffffffffffff:r14""]";
"	; freeing x62 (r11) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""0x0:r9"",""0xffffffff00000001:rbx"",""x77:rbp"",""x79:rax"",""x99:rdx"",""x100:OF"",""x82:CF"",""x81:r8"",""0xffffffff:r13"",""x112:r10"",""x111:r12"",""x83:r15"",""0xffffffffffffffff:r14"",""x114:r11""]";
"	; freeing 0x0 (r9, since all are neeed, but this one is just an immediate value.";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""0xffffffff00000001:rbx"",""x77:rbp"",""x79:rax"",""x99:rdx"",""x100:OF"",""x82:CF"",""x81:r8"",""0xffffffff:r13"",""x112:r10"",""x111:r12"",""x83:r15"",""0xffffffffffffffff:r14"",""x114:r11"",""x113:r9""]";
"	mulx r11, r9, r14; x114, x113<- x99 * 0xffffffffffffffff";
"	";
"";
"	; add:";
"	; r:x115,f:x116<-add(0x0,x114,x111)";
"	; CF: KILLED,OF: ALIVE";
"	clc;";
"	adcx r11, r12";
"	";
"";
"	; add:";
"	; r:x117,f:_<-add(x116,x112)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x92:rcx"",""0xffffffff00000001:rbx"",""x77:rbp"",""x79:rax"",""x99:rdx"",""x100:OF"",""x81:r8"",""0xffffffff:r13"",""x111:r12"",""x83:r15"",""0xffffffffffffffff:r14"",""x113:r9"",""x115:r11"",""x116:CF"",""x117:r10""]";
"	; freeing x111 (r12) no dependants anymore";
"	mov r12, 0x0 ; moving imm to reg";
"	adcx r10, r12";
"	";
"";
"	; add:";
"	; r:x101,f:x102<-add(x100,x77,x92)";
"	; CF: KILLED,OF: ALIVE";
"	adox rcx, rbp";
"	";
"";
"	; add:";
"	; r:x103,f:x104<-add(x102,x79,x94)";
"	; CF: KILLED,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""0xffffffff00000001:rbx"",""x77:rbp"",""x79:rax"",""x99:rdx"",""x81:r8"",""0xffffffff:r13"",""x83:r15"",""0xffffffffffffffff:r14"",""x113:r9"",""x115:r11"",""x116:CF"",""x117:r10"",""0x0:r12"",""x101:rcx"",""x104:OF""]";
"	; freeing x77 (rbp) no dependants anymore";
"	mov rbp,  [rsp + 0x08 * 0 ]; x103, copying x94 here, cause x94 is needed in a reg for other than x103, namely all: , x103--x104, size: 1";
"	adox rbp, rax";
"	";
"";
"	; add:";
"	; r:_,f:x119<-add(0x0,x99,x113)";
"	; CF: KILLED,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""0xffffffff00000001:rbx"",""x79:rax"",""x99:rdx"",""x81:r8"",""0xffffffff:r13"",""x83:r15"",""0xffffffffffffffff:r14"",""x113:r9"",""x115:r11"",""x116:CF"",""x117:r10"",""0x0:r12"",""x101:rcx"",""x104:OF"",""x103:rbp""]";
"	; freeing x79 (rax) no dependants anymore";
"	mov rax,  rdx; _, copying x99 here, cause x99 is needed in a reg for other than _, namely all: , _--x119, x109--x110, size: 2";
"	clc;";
"	adcx rax, r9";
"	";
"";
"	; add:";
"	; r:x120,f:x121<-add(x119,x101,x115)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx r11, rcx";
"	; fr:rax";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""0xffffffff00000001:rbx"",""x81:r8"",""0xffffffff:r13"",""x83:r15"",""0xffffffffffffffff:r14"",""x113:r9"",""x117:r10"",""0x0:r12"",""x101:rcx"",""x104:OF"",""x103:rbp"",""x121:CF"",""x120:r11"",""x110:rdx""]";
"	;chose >>RANDOMLY<< rax from candidates :rax[0].";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""0xffffffff00000001:rbx"",""x81:r8"",""0xffffffff:r13"",""x83:r15"",""0xffffffffffffffff:r14"",""x113:r9"",""x117:r10"",""0x0:r12"",""x101:rcx"",""x104:OF"",""x103:rbp"",""x121:CF"",""x120:r11"",""x110:rdx"",""x109:rax""]";
"	mulx rdx, rax, rbx; x110, x109<- x99 * 0xffffffff00000001";
"	";
"";
"	; add:";
"	; r:x122,f:x123<-add(x121,x103,x117)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx r10, rbp";
"	";
"";
"	; add:";
"	; r:x105,f:x106<-add(x104,x81,x96)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""0xffffffff00000001:rbx"",""x81:r8"",""0xffffffff:r13"",""x83:r15"",""0xffffffffffffffff:r14"",""x113:r9"",""0x0:r12"",""x101:rcx"",""x103:rbp"",""x120:r11"",""x110:rdx"",""x109:rax"",""x123:CF"",""x122:r10"",""x106:OF""]";
"	; freeing x113 (r9) no dependants anymore";
"	mov r9,  [rsp + 0x08 * 2 ]; x105, copying x96 here, cause x96 is needed in a reg for other than x105, namely all: , x105--x106, size: 1";
"	adox r9, r8";
"	";
"";
"	; add:";
"	; r:x107,f:x108<-add(x106,x83,x98)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""0xffffffff00000001:rbx"",""x81:r8"",""0xffffffff:r13"",""x83:r15"",""0xffffffffffffffff:r14"",""0x0:r12"",""x101:rcx"",""x103:rbp"",""x120:r11"",""x110:rdx"",""x109:rax"",""x123:CF"",""x122:r10"",""x105:r9"",""x108:OF""]";
"	; freeing x81 (r8) no dependants anymore";
"	mov r8,  [rsp + 0x08 * 1 ]; x107, copying x98 here, cause x98 is needed in a reg for other than x107, namely all: , x107--x108, size: 1";
"	adox r8, r15";
"	";
"";
"	; add:";
"	; r:x124,f:x125<-add(x123,x105,x109)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx rax, r9";
"	";
"";
"	; add:";
"	; r:x126,f:x127<-add(x125,x107,x110)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx rdx, r8";
"	";
"";
"	; add:";
"	; r:x128,f:_<-add(x127,x108)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""0xffffffff00000001:rbx"",""0xffffffff:r13"",""x83:r15"",""0xffffffffffffffff:r14"",""0x0:r12"",""x101:rcx"",""x103:rbp"",""x120:r11"",""x122:r10"",""x105:r9"",""x108:OF"",""x107:r8"",""x124:rax"",""x127:CF"",""x126:rdx""]";
"	; freeing x83 (r15) no dependants anymore";
"	seto r15b; spill OF x128 to reg (r15)";
"	adc r15b, 0x0";
"	movzx r15, r15b";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""0xffffffff00000001:rbx"",""0xffffffff:r13"",""0xffffffffffffffff:r14"",""0x0:r12"",""x101:rcx"",""x103:rbp"",""x120:r11"",""x122:r10"",""x105:r9"",""x108:OF"",""x107:r8"",""x124:rax"",""x127:CF"",""x126:rdx"",""x128:r15b""]";
"	; freeing x101 (rcx) no dependants anymore";
"	mov rcx, [rsi + 0x08 * 3 ]; load m64 x3 to register64";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""0xffffffff00000001:rbx"",""0xffffffff:r13"",""0xffffffffffffffff:r14"",""0x0:r12"",""x103:rbp"",""x120:r11"",""x122:r10"",""x105:r9"",""x108:OF"",""x107:r8"",""x124:rax"",""x127:CF"",""x126:rdx"",""x128:r15b"",""x3:rcx""]";
"	;chose >>saved<< arg1[0] from:x3, arg1[0][1] and candidates: x3, arg1[0]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""0xffffffff00000001:rbx"",""0xffffffff:r13"",""0xffffffffffffffff:r14"",""0x0:r12"",""x103:rbp"",""x120:r11"",""x122:r10"",""x105:r9"",""x108:OF"",""x107:r8"",""x124:rax"",""x127:CF"",""x126:rdx"",""x128:r15b"",""x3:rcx"",""arg1[0]:rdx""]";
"	; freeing x103 (rbp) no dependants anymore";
"	mov rbp, rdx; preserving value of x126 into a new reg";
"	mov rdx, [rsi + 0x08 * 0 ]; saving arg1[0] in rdx.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""0xffffffff00000001:rbx"",""0xffffffff:r13"",""0xffffffffffffffff:r14"",""0x0:r12"",""x120:r11"",""x122:r10"",""x105:r9"",""x108:OF"",""x107:r8"",""x124:rax"",""x127:CF"",""x126:rbp"",""x128:r15b"",""x3:rcx"",""arg1[0]:rdx""]";
"	; freeing x105 (r9) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""0xffffffff00000001:rbx"",""0xffffffff:r13"",""0xffffffffffffffff:r14"",""0x0:r12"",""x120:r11"",""x122:r10"",""x108:OF"",""x107:r8"",""x124:rax"",""x127:CF"",""x126:rbp"",""x128:r15b"",""x3:rcx"",""arg1[0]:rdx"",""x136:r9""]";
"	; freeing x107 (r8) no dependants anymore";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""0xffffffff00000001:rbx"",""0xffffffff:r13"",""0xffffffffffffffff:r14"",""0x0:r12"",""x120:r11"",""x122:r10"",""x108:OF"",""x124:rax"",""x127:CF"",""x126:rbp"",""x128:r15b"",""x3:rcx"",""arg1[0]:rdx"",""x136:r9"",""x135:r8""]";
"	mulx r9, r8, rcx; x136, x135<- x3 * arg1[0]";
"	";
"";
"	; add:";
"	; r:x144,f:x145<-add(0x0,x120,x135)";
"	; CF: ZERO,OF: ZERO";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	adox r11, r8";
"	;chose >>saved<< x144 from:x144, 0xffffffffffffffff[0] and candidates: x144, 0xffffffffffffffff";
"	mov rdx, r11; x144 to rdx";
"	; fr:r11";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""0xffffffff00000001:rbx"",""0xffffffff:r13"",""0xffffffffffffffff:r14"",""0x0:r12"",""x122:r10"",""x124:rax"",""x127:CF"",""x126:rbp"",""x128:r15b"",""x3:rcx"",""x136:r9"",""x135:r8"",""x144:rdx"",""x145:OF""]";
"	;chose >>RANDOMLY<< r11 from candidates :r11[0].";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""0xffffffff00000001:rbx"",""0xffffffff:r13"",""0xffffffffffffffff:r14"",""0x0:r12"",""x122:r10"",""x124:rax"",""x127:CF"",""x126:rbp"",""x128:r15b"",""x3:rcx"",""x136:r9"",""x135:r8"",""x144:rdx"",""x145:OF"",""x159:r11""]";
"	; freeing x135 (r8) no dependants anymore";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""0xffffffff00000001:rbx"",""0xffffffff:r13"",""0xffffffffffffffff:r14"",""0x0:r12"",""x122:r10"",""x124:rax"",""x127:CF"",""x126:rbp"",""x128:r15b"",""x3:rcx"",""x136:r9"",""x144:rdx"",""x145:OF"",""x159:r11"",""x158:r8""]";
"	mulx r11, r8, r14; x159, x158<- x144 * 0xffffffffffffffff";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""0xffffffff00000001:rbx"",""0xffffffff:r13"",""0xffffffffffffffff:r14"",""0x0:r12"",""x122:r10"",""x124:rax"",""x127:CF"",""x126:rbp"",""x128:r15b"",""x3:rcx"",""x136:r9"",""x144:rdx"",""x145:OF"",""x159:r11"",""x158:r8""]";
"	; freeing 0x0 (r12, since all are neeed, but this one is just an immediate value.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""0xffffffff00000001:rbx"",""0xffffffff:r13"",""0xffffffffffffffff:r14"",""x122:r10"",""x124:rax"",""x127:CF"",""x126:rbp"",""x128:r15b"",""x3:rcx"",""x136:r9"",""x144:rdx"",""x145:OF"",""x159:r11"",""x158:r8"",""x157:r12""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x94Lx94Lx94Lx94Lx94Lx55Lx55Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx44Lx44Lx44Lx44Lx44Lx44Lx44Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx122Lx122Lx122Lx122Lx122Lx122Lx122Lx71Lx71Lx71Lx71Lx71Lx71Lx71Lx71L0xffffffff00000001L0xffffffff00000001Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx96Lx96Lx96Lx96Lx96Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Larg1[2]Larg1[2]Larg1[2]Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Larg1[3]Larg1[3]L0xffffffffL0xffffffffL0xffffffffL0xffffffffLx16Lx16Lx17Lx17L-0x1L-0x1Lx1Lx76Lx76 and candidates: 0xffffffff00000001, 0xffffffffffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),0xffffffff00000001(rbx),0xffffffff(r13),0xffffffffffffffff(r14),x122(r10),x124(rax),x126(rbp),x128(r15b),x3(rcx),x136(r9),x144(rdx),x159(r11),x158(r8),x157(r12); clobs x156,x157,x144,0xffffffff,x157; will spare: 0xffffffffffffffff ";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""0xffffffff00000001:rbx"",""0xffffffff:r13"",""x122:r10"",""x124:rax"",""x127:CF"",""x126:rbp"",""x128:r15b"",""x3:rcx"",""x136:r9"",""x144:rdx"",""x145:OF"",""x159:r11"",""x158:r8"",""x157:r12"",""x156:r14""]";
"	mulx r12, r14, r13; x157, x156<- x144 * 0xffffffff";
"	";
"";
"	; add:";
"	; r:x160,f:x161<-add(0x0,x159,x156)";
"	; CF: ZERO,OF: ALIVE";
"	adcx r11, r14";
"	";
"";
"	; add:";
"	; r:x162,f:_<-add(x161,x157)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""0xffffffff00000001:rbx"",""0xffffffff:r13"",""x122:r10"",""x124:rax"",""x126:rbp"",""x128:r15b"",""x3:rcx"",""x136:r9"",""x144:rdx"",""x145:OF"",""x158:r8"",""x156:r14"",""x160:r11"",""x161:CF"",""x162:r12""]";
"	; freeing x156 (r14) no dependants anymore";
"	mov r14, 0x0 ; moving imm to reg";
"	adcx r12, r14";
"	;chose >>saved<< x3 from:x3, arg1[1][0] and candidates: x3, arg1[1]";
"	xchg rdx, rcx; x3, swapping with x144, which is currently in rdx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""0xffffffff00000001:rbx"",""0xffffffff:r13"",""x122:r10"",""x124:rax"",""x126:rbp"",""x128:r15b"",""x3:rdx"",""x136:r9"",""x144:rcx"",""x145:OF"",""x158:r8"",""x160:r11"",""x161:CF"",""x162:r12"",""0x0:r14""]";
"	; freeing 0x0 (r14, since all are neeed, but this one is just an immediate value.";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""0xffffffff00000001:rbx"",""0xffffffff:r13"",""x122:r10"",""x124:rax"",""x126:rbp"",""x128:r15b"",""x3:rdx"",""x136:r9"",""x144:rcx"",""x145:OF"",""x158:r8"",""x160:r11"",""x161:CF"",""x162:r12"",""x134:r14""]";
"	;chose 0xffffffff00000001 to spill because list of spills:x94Lx94Lx94Lx94Lx94Lx55Lx55Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx44Lx44Lx44Lx44Lx44Lx44Lx44Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx122Lx122Lx122Lx122Lx122Lx122Lx122Lx71Lx71Lx71Lx71Lx71Lx71Lx71Lx71L0xffffffff00000001L0xffffffff00000001Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx96Lx96Lx96Lx96Lx96Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Larg1[2]Larg1[2]Larg1[2]Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Larg1[3]Larg1[3]L0xffffffffL0xffffffffL0xffffffffL0xffffffffLx16Lx16Lx17Lx17L-0x1L-0x1Lx1Lx76Lx76 and candidates: 0xffffffff00000001, 0xffffffff";
"	; freeing, i.e. spilling 0xffffffff00000001, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),0xffffffff00000001(rbx),0xffffffff(r13),x122(r10),x124(rax),x126(rbp),x128(r15b),x3(rdx),x136(r9),x144(rcx),x158(r8),x160(r11),x162(r12),x134(r14); clobs x133,x134,x3,arg1[1],arg1,x134; will spare: 0xffffffff00000001 ";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""0xffffffff:r13"",""x122:r10"",""x124:rax"",""x126:rbp"",""x128:r15b"",""x3:rdx"",""x136:r9"",""x144:rcx"",""x145:OF"",""x158:r8"",""x160:r11"",""x161:CF"",""x162:r12"",""x134:r14"",""x133:rbx""]";
"	mulx r14, rbx, [rsi + 0x08 * 1 ]; x134, x133<- x3 * arg1[1]";
"	";
"";
"	; add:";
"	; r:_,f:x164<-add(0x0,x144,x158)";
"	; CF: KILLED,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""0xffffffff:r13"",""x122:r10"",""x124:rax"",""x126:rbp"",""x128:r15b"",""x3:rdx"",""x136:r9"",""x144:rcx"",""x145:OF"",""x158:r8"",""x160:r11"",""x161:CF"",""x162:r12"",""x134:r14"",""x133:rbx""]";
"	;chose 0xffffffff to spill because list of spills:x94Lx94Lx94Lx94Lx94Lx55Lx55Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx44Lx44Lx44Lx44Lx44Lx44Lx44Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx122Lx122Lx122Lx122Lx122Lx122Lx122Lx71Lx71Lx71Lx71Lx71Lx71Lx71Lx71L0xffffffff00000001L0xffffffff00000001Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx96Lx96Lx96Lx96Lx96Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Larg1[2]Larg1[2]Larg1[2]Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Larg1[3]Larg1[3]L0xffffffffL0xffffffffL0xffffffffL0xffffffffLx16Lx16Lx17Lx17L-0x1L-0x1Lx1Lx76Lx76 and candidates: 0xffffffff";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),0xffffffff(r13),x122(r10),x124(rax),x126(rbp),x128(r15b),x3(rdx),x136(r9),x144(rcx),x158(r8),x160(r11),x162(r12),x134(r14),x133(rbx); clobs _,x164,0x0,x144,x158,x144; will spare: 0xffffffff ";
"	mov r13,  rcx; _, copying x144 here, cause x144 is needed in a reg for other than _, namely all: , _--x164, x154--x155, size: 2";
"	clc;";
"	adcx r13, r8";
"	";
"";
"	; add:";
"	; r:x137,f:x138<-add(0x0,x136,x133)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< CF from:CF, OF[0] and candidates: CF, OF";
"	; fr:r13";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x122:r10"",""x124:rax"",""x126:rbp"",""x128:r15b"",""x3:rdx"",""x144:rcx"",""x145:OF"",""x158:r8"",""x160:r11"",""x162:r12"",""x134:r14"",""x133:rbx"",""x164:CF"",""x137:r9""]";
"	;chose >>RANDOMLY<< r13 from candidates :r13[0].";
"	setc r13b; spill CF x164 to reg (r13)";
"	clc;";
"	adcx r9, rbx";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x122:r10"",""x124:rax"",""x126:rbp"",""x128:r15b"",""x3:rdx"",""x144:rcx"",""x145:OF"",""x158:r8"",""x160:r11"",""x162:r12"",""x134:r14"",""x133:rbx"",""x164:r13b"",""x137:r9"",""x138:CF""]";
"	; freeing x158 (r8) no dependants anymore";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x122:r10"",""x124:rax"",""x126:rbp"",""x128:r15b"",""x3:rdx"",""x144:rcx"",""x145:OF"",""x160:r11"",""x162:r12"",""x134:r14"",""x133:rbx"",""x164:r13b"",""x137:r9"",""x138:CF"",""x132:r8""]";
"	; freeing x133 (rbx) no dependants anymore";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x122:r10"",""x124:rax"",""x126:rbp"",""x128:r15b"",""x3:rdx"",""x144:rcx"",""x145:OF"",""x160:r11"",""x162:r12"",""x134:r14"",""x164:r13b"",""x137:r9"",""x138:CF"",""x132:r8"",""x131:rbx""]";
"	mulx r8, rbx, [rsi + 0x08 * 2 ]; x132, x131<- x3 * arg1[2]";
"	";
"";
"	; add:";
"	; r:x146,f:x147<-add(x145,x122,x137)";
"	; CF: ALIVE,OF: ALIVE";
"	adox r9, r10";
"	";
"";
"	; add:";
"	; r:x139,f:x140<-add(x138,x134,x131)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx rbx, r14";
"	";
"";
"	; add:";
"	; r:x148,f:x149<-add(x147,x124,x139)";
"	; CF: ALIVE,OF: ALIVE";
"	adox rbx, rax";
"	";
"";
"	; add:";
"	; r:x165,f:x166<-add(x164,x146,x160)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x122:r10"",""x124:rax"",""x126:rbp"",""x128:r15b"",""x3:rdx"",""x144:rcx"",""x160:r11"",""x162:r12"",""x134:r14"",""x164:r13b"",""x132:r8"",""x140:CF"",""x149:OF"",""x148:rbx"",""x165:r9""]";
"	; freeing x122 (r10) no dependants anymore";
"	seto r10b; spill OF x149 to reg (r10)";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x124:rax"",""x126:rbp"",""x128:r15b"",""x3:rdx"",""x144:rcx"",""x160:r11"",""x162:r12"",""x134:r14"",""x164:r13b"",""x132:r8"",""x140:CF"",""x149:r10b"",""x148:rbx"",""x165:r9""]";
"	; freeing x124 (rax) no dependants anymore";
"	mov rax, 0x0 ; moving imm to reg";
"	dec rax; OF<-0x0, preserve CF 3";
"	movzx r13, r13b";
"	adox r13, rax; loading flag";
"	adox r9, r11";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x126:rbp"",""x128:r15b"",""x144:rcx"",""x160:r11"",""x162:r12"",""x134:r14"",""x164:r13b"",""x132:r8"",""x140:CF"",""x149:r10b"",""x148:rbx"",""x165:r9"",""-0x1:rax"",""x166:OF"",""x130:rdx""]";
"	; freeing x160 (r11) no dependants anymore";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x126:rbp"",""x128:r15b"",""x144:rcx"",""x162:r12"",""x134:r14"",""x164:r13b"",""x132:r8"",""x140:CF"",""x149:r10b"",""x148:rbx"",""x165:r9"",""-0x1:rax"",""x166:OF"",""x130:rdx"",""x129:r11""]";
"	mulx rdx, r11, [rsi + 0x08 * 3 ]; x130, x129<- x3 * arg1[3]";
"	";
"";
"	; add:";
"	; r:x167,f:x168<-add(x166,x148,x162)";
"	; CF: ALIVE,OF: ALIVE";
"	adox r12, rbx";
"	";
"";
"	; add:";
"	; r:x141,f:x142<-add(x140,x132,x129)";
"	; CF: ALIVE,OF: ALIVE";
"	adcx r11, r8";
"	";
"";
"	; sub:";
"	; r:x174,f:x175<-sub(0x0,x165,0xffffffffffffffff)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x126:rbp"",""x128:r15b"",""x144:rcx"",""x134:r14"",""x164:r13b"",""x132:r8"",""x149:r10b"",""x148:rbx"",""x165:r9"",""-0x1:rax"",""x130:rdx"",""x168:OF"",""x167:r12"",""x142:CF"",""x141:r11""]";
"	; freeing x134 (r14) no dependants anymore";
"	setc r14b; spill CF x142 to reg (r14)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x126:rbp"",""x128:r15b"",""x144:rcx"",""x164:r13b"",""x132:r8"",""x149:r10b"",""x148:rbx"",""x165:r9"",""-0x1:rax"",""x130:rdx"",""x168:OF"",""x167:r12"",""x142:r14b"",""x141:r11""]";
"	; freeing x164 (r13b) no dependants anymore";
"	seto r13b; spill OF x168 to reg (r13)";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x126:rbp"",""x128:r15b"",""x144:rcx"",""x132:r8"",""x149:r10b"",""x148:rbx"",""x165:r9"",""-0x1:rax"",""x130:rdx"",""x168:r13b"",""x167:r12"",""x142:r14b"",""x141:r11""]";
"	; freeing x132 (r8) no dependants anymore";
"	mov r8,  r9; x174, copying x165 here, cause x165 is needed in a reg for other than x174, namely all: , x174--x175, x184, size: 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x126:rbp"",""x128:r15b"",""x144:rcx"",""x149:r10b"",""x148:rbx"",""x165:r9"",""-0x1:rax"",""x130:rdx"",""x168:r13b"",""x167:r12"",""x142:r14b"",""x141:r11"",""x174:r8""]";
"	; freeing x148 (rbx) no dependants anymore";
"	mov rbx, 0xffffffffffffffff ; moving imm to reg";
"	sub r8, rbx";
"	";
"";
"	; sub:";
"	; r:x176,f:x177<-sub(x175,x167,0xffffffff)";
"	; CF: ALIVE,OF: KILLED";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x126:rbp"",""x128:r15b"",""x144:rcx"",""x149:r10b"",""x165:r9"",""-0x1:rax"",""x130:rdx"",""x168:r13b"",""x167:r12"",""x142:r14b"",""x141:r11"",""x174:r8"",""0xffffffffffffffff:rbx"",""x177:CF""]";
"	;chose 0xffffffffffffffff to spill because list of spills:x94Lx94Lx94Lx94Lx94Lx55Lx55Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx44Lx44Lx44Lx44Lx44Lx44Lx44Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx122Lx122Lx122Lx122Lx122Lx122Lx122Lx71Lx71Lx71Lx71Lx71Lx71Lx71Lx71L0xffffffff00000001L0xffffffff00000001Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx96Lx96Lx96Lx96Lx96Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Larg1[2]Larg1[2]Larg1[2]Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Larg1[3]Larg1[3]L0xffffffffL0xffffffffL0xffffffffL0xffffffffLx16Lx16Lx17Lx17L-0x1L-0x1Lx1Lx76Lx76 and candidates: -0x1, 0xffffffffffffffff";
"	; freeing, i.e. spilling 0xffffffffffffffff, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x126(rbp),x128(r15b),x144(rcx),x149(r10b),x165(r9),-0x1(rax),x130(rdx),x168(r13b),x167(r12),x142(r14b),x141(r11),x174(r8),0xffffffffffffffff(rbx); clobs x176,x177,x175,x167,0xffffffff,x167; will spare: 0xffffffffffffffff ";
"	mov rbx,  r12; x176, copying x167 here, cause x167 is needed in a reg for other than x176, namely all: , x176--x177, x185, size: 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x126:rbp"",""x128:r15b"",""x144:rcx"",""x149:r10b"",""x165:r9"",""-0x1:rax"",""x130:rdx"",""x168:r13b"",""x167:r12"",""x142:r14b"",""x141:r11"",""x174:r8"",""x177:CF"",""x176:rbx""]";
"	;chose -0x1 to spill because list of spills:x94Lx94Lx94Lx94Lx94Lx55Lx55Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx44Lx44Lx44Lx44Lx44Lx44Lx44Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx122Lx122Lx122Lx122Lx122Lx122Lx122Lx71Lx71Lx71Lx71Lx71Lx71Lx71Lx71L0xffffffff00000001L0xffffffff00000001Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx96Lx96Lx96Lx96Lx96Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Larg1[2]Larg1[2]Larg1[2]Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Larg1[3]Larg1[3]L0xffffffffL0xffffffffL0xffffffffL0xffffffffLx16Lx16Lx17Lx17L-0x1L-0x1Lx1Lx76Lx76 and candidates: -0x1";
"	; freeing, i.e. spilling -0x1, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x126(rbp),x128(r15b),x144(rcx),x149(r10b),x165(r9),-0x1(rax),x130(rdx),x168(r13b),x167(r12),x142(r14b),x141(r11),x174(r8),x176(rbx); clobs x176,x177,x175,x167,0xffffffff,x167,x176,0xffffffff; will spare: -0x1 ";
"	mov rax, 0xffffffff ; moving imm to reg";
"	sbb rbx, rax";
"	";
"";
"	; add:";
"	; r:x143,f:_<-add(x142,x130)";
"	; CF: ALIVE,OF: KILLED";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x126:rbp"",""x128:r15b"",""x144:rcx"",""x149:r10b"",""x165:r9"",""x130:rdx"",""x168:r13b"",""x167:r12"",""x142:r14b"",""x141:r11"",""x174:r8"",""x177:CF"",""x176:rbx"",""0xffffffff:rax""]";
"	;chose 0xffffffff to spill because list of spills:x94Lx94Lx94Lx94Lx94Lx55Lx55Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx44Lx44Lx44Lx44Lx44Lx44Lx44Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx122Lx122Lx122Lx122Lx122Lx122Lx122Lx71Lx71Lx71Lx71Lx71Lx71Lx71Lx71L0xffffffff00000001L0xffffffff00000001Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx96Lx96Lx96Lx96Lx96Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Larg1[2]Larg1[2]Larg1[2]Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Larg1[3]Larg1[3]L0xffffffffL0xffffffffL0xffffffffL0xffffffffLx16Lx16Lx17Lx17L-0x1L-0x1Lx1Lx76Lx76 and candidates: 0xffffffff";
"	; freeing, i.e. spilling 0xffffffff, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x126(rbp),x128(r15b),x144(rcx),x149(r10b),x165(r9),x130(rdx),x168(r13b),x167(r12),x142(r14b),x141(r11),x174(r8),x176(rbx),0xffffffff(rax); clobs x143,x142,x130,x142; will spare: 0xffffffff ";
"	movzx rax,  r14b; x143, copying x142 here, cause x142 is needed in a reg for other than x143, namely all: , x143, size: 1";
"	lea rax, [rax+rdx]";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x126:rbp"",""x128:r15b"",""x144:rcx"",""x149:r10b"",""x165:r9"",""x130:rdx"",""x168:r13b"",""x167:r12"",""x142:r14b"",""x141:r11"",""x174:r8"",""x177:CF"",""x176:rbx"",""x143:rax""]";
"	; freeing x130 (rdx) no dependants anymore";
"	mov rdx, 0xffffffff00000001 ; moving imm to reg";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x126:rbp"",""x128:r15b"",""x149:r10b"",""x165:r9"",""x168:r13b"",""x167:r12"",""x142:r14b"",""x141:r11"",""x174:r8"",""x177:CF"",""x176:rbx"",""x143:rax"",""0xffffffff00000001:rdx"",""x155:rcx""]";
"	; freeing x142 (r14b) no dependants anymore";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x126:rbp"",""x128:r15b"",""x149:r10b"",""x165:r9"",""x168:r13b"",""x167:r12"",""x141:r11"",""x174:r8"",""x177:CF"",""x176:rbx"",""x143:rax"",""0xffffffff00000001:rdx"",""x155:rcx"",""x154:r14""]";
"	mulx rcx, r14, rcx; x155, x154<- x144 * 0xffffffff00000001";
"	";
"";
"	; add:";
"	; r:x150,f:x151<-add(x149,x126,x141)";
"	; CF: ALIVE,OF: KILLED";
"	;chose >>saved<< 0x0 from:0x0, -0x1[0] and candidates: 0x0, -0x1";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x128:r15b"",""x149:r10b"",""x165:r9"",""x168:r13b"",""x167:r12"",""x141:r11"",""x174:r8"",""x177:CF"",""x176:rbx"",""x143:rax"",""0xffffffff00000001:rdx"",""x155:rcx"",""x154:r14"",""x150:rbp""]";
"	;chose 0xffffffff00000001 to spill because list of spills:x94Lx94Lx94Lx94Lx94Lx55Lx55Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx8Lx44Lx44Lx44Lx44Lx44Lx44Lx44Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14Lx14L0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffL0xffffffffffffffffLx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx98Lx122Lx122Lx122Lx122Lx122Lx122Lx122Lx71Lx71Lx71Lx71Lx71Lx71Lx71Lx71L0xffffffff00000001L0xffffffff00000001Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Larg1[0]Lx96Lx96Lx96Lx96Lx96Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Larg1[1]Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx5Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Lx126Larg1[2]Larg1[2]Larg1[2]Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Lx90Larg1[3]Larg1[3]L0xffffffffL0xffffffffL0xffffffffL0xffffffffLx16Lx16Lx17Lx17L-0x1L-0x1Lx1Lx76Lx76 and candidates: 0xffffffff00000001";
"	; freeing, i.e. spilling 0xffffffff00000001, because I am out of ideas";
"	; allocs: out1(rdi),arg1(rsi),x128(r15b),x149(r10b),x165(r9),x168(r13b),x167(r12),x141(r11),x174(r8),x176(rbx),x143(rax),0xffffffff00000001(rdx),x155(rcx),x154(r14),x150(rbp); clobs x150,x151,x149,x126,x141,x126,0x0; will spare: 0xffffffff00000001 ";
"	mov rdx, 0x0 ; moving imm to reg";
"	dec rdx; OF<-0x0, preserve CF 3";
"	movzx r10, r10b";
"	adox r10, rdx; loading flag";
"	adox rbp, r11";
"	";
"";
"	; add:";
"	; r:x152,f:x153<-add(x151,x128,x143)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x128:r15b"",""x149:r10b"",""x165:r9"",""x168:r13b"",""x167:r12"",""x141:r11"",""x174:r8"",""x177:CF"",""x176:rbx"",""x143:rax"",""x155:rcx"",""x154:r14"",""x150:rbp"",""-0x1:rdx"",""x153:OF""]";
"	; freeing x149 (r10b) no dependants anymore";
"	movzx r10,  r15b; x152, copying x128 here, cause x128 is needed in a reg for other than x152, namely all: , x152--x153, size: 1";
"	adox r10, rax";
"	";
"";
"	; add:";
"	; r:x169,f:x170<-add(x168,x150,x154)";
"	; CF: ALIVE,OF: ALIVE";
"	;chose >>saved<< OF from:CF, OF[1] and candidates: CF, OF";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x128:r15b"",""x165:r9"",""x168:r13b"",""x167:r12"",""x141:r11"",""x174:r8"",""x177:CF"",""x176:rbx"",""x143:rax"",""x155:rcx"",""x154:r14"",""-0x1:rdx"",""x153:OF"",""x152:r10"",""x169:rbp""]";
"	; freeing x128 (r15b) no dependants anymore";
"	seto r15b; spill OF x153 to reg (r15)";
"	inc rdx; OF<-0x0, preserve CF 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x165:r9"",""x168:r13b"",""x167:r12"",""x141:r11"",""x174:r8"",""x177:CF"",""x176:rbx"",""x143:rax"",""x155:rcx"",""x154:r14"",""x153:r15b"",""x152:r10"",""x169:rbp"",""0x0:rdx""]";
"	; freeing x141 (r11) no dependants anymore";
"	mov r11, -0x1 ; moving imm to reg";
"	movzx r13, r13b";
"	adox r13, r11; loading flag";
"	adox rbp, r14";
"	";
"";
"	; add:";
"	; r:x171,f:x172<-add(x170,x152,x155)";
"	; CF: ALIVE,OF: ALIVE";
"	adox rcx, r10";
"	";
"";
"	; add:";
"	; r:x173,f:_<-add(x172,x153)";
"	; CF: ALIVE,OF: ALIVE";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x165:r9"",""x168:r13b"",""x167:r12"",""x174:r8"",""x177:CF"",""x176:rbx"",""x143:rax"",""x154:r14"",""x153:r15b"",""x152:r10"",""x169:rbp"",""0x0:rdx"",""-0x1:r11"",""x172:OF"",""x171:rcx""]";
"	; freeing x168 (r13b) no dependants anymore";
"	movzx r13,  r15b; x173, copying x153 here, cause x153 is needed in a reg for other than x173, namely all: , x173, size: 1";
"	adox r13, rdx";
"	";
"";
"	; sub:";
"	; r:x178,f:x179<-sub(x177,x169,0x0)";
"	; CF: ALIVE,OF: KILLED";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x165:r9"",""x167:r12"",""x174:r8"",""x176:rbx"",""x143:rax"",""x154:r14"",""x153:r15b"",""x152:r10"",""x169:rbp"",""0x0:rdx"",""-0x1:r11"",""x172:OF"",""x171:rcx"",""x173:r13"",""x179:CF""]";
"	; freeing x143 (rax) no dependants anymore";
"	mov rax,  rbp; x178, copying x169 here, cause x169 is needed in a reg for other than x178, namely all: , x186, x178--x179, size: 2";
"	sbb rax, 0x00000000";
"	";
"";
"	; sub:";
"	; r:x180,f:x181<-sub(x179,x171,0xffffffff00000001)";
"	; CF: ALIVE,OF: KILLED";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x165:r9"",""x167:r12"",""x174:r8"",""x176:rbx"",""x154:r14"",""x153:r15b"",""x152:r10"",""x169:rbp"",""0x0:rdx"",""-0x1:r11"",""x172:OF"",""x171:rcx"",""x173:r13"",""x178:rax"",""x181:CF""]";
"	; freeing x154 (r14) no dependants anymore";
"	mov r14,  rcx; x180, copying x171 here, cause x171 is needed in a reg for other than x180, namely all: , x187, x180--x181, size: 2";
"	; fr:";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x165:r9"",""x167:r12"",""x174:r8"",""x176:rbx"",""x153:r15b"",""x152:r10"",""x169:rbp"",""0x0:rdx"",""-0x1:r11"",""x172:OF"",""x171:rcx"",""x173:r13"",""x178:rax"",""x181:CF"",""x180:r14""]";
"	; freeing x153 (r15b) no dependants anymore";
"	mov r15, 0xffffffff00000001 ; moving imm to reg";
"	sbb r14, r15";
"	";
"";
"	; sub:";
"	; r:_,f:x183<-sub(x181,x173,0x0)";
"	; CF: ALIVE,OF: KILLED";
"	sbb r13, 0x00000000";
"	; the job is: x184 = x183 !== 0 ? x174: x165";
"	; fr:r13";
"	; allocatedR: ;-- allocation: [""out1:rdi"",""arg1:rsi"",""x165:r9"",""x167:r12"",""x174:r8"",""x176:rbx"",""x152:r10"",""x169:rbp"",""0x0:rdx"",""-0x1:r11"",""x172:OF"",""x171:rcx"",""x178:rax"",""x180:r14"",""0xffffffff00000001:r15"",""x183:CF""]";
"	;chose >>RANDOMLY<< r13 from candidates :r13[0].";
"	setc r13b; spill CF x183 to reg (r13)";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x165:r9"",""x167:r12"",""x176:rbx"",""x152:r10"",""x169:rbp"",""0x0:rdx"",""-0x1:r11"",""x172:OF"",""x171:rcx"",""x178:rax"",""x180:r14"",""0xffffffff00000001:r15"",""x183:r13b"",""x184:r8""]";
"	test r13b, r13b; testing x183";
"	cmovnz r8, r9; if !ZF, x184<- x165 (nzVar)";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x165:r9"",""x167:r12"",""x176:rbx"",""x152:r10"",""x169:rbp"",""0x0:rdx"",""-0x1:r11"",""x172:OF"",""x171:rcx"",""x178:rax"",""x180:r14"",""0xffffffff00000001:r15"",""x183:r13b"",""x184:r8""]";
"	mov [rdi + 0x08 * 0 ], r8; out1[0] = x184";
"	; the job is: x185 = x183 !== 0 ? x176: x167";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x165:r9"",""x167:r12"",""x152:r10"",""x169:rbp"",""0x0:rdx"",""-0x1:r11"",""x172:OF"",""x171:rcx"",""x178:rax"",""x180:r14"",""0xffffffff00000001:r15"",""x183:r13b"",""x184:r8"",""x185:rbx""]";
"	test r13b, r13b; testing x183";
"	cmovnz rbx, r12; if !ZF, x185<- x167 (nzVar)";
"	; the job is: x186 = x183 !== 0 ? x178: x169";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x165:r9"",""x167:r12"",""x152:r10"",""x169:rbp"",""0x0:rdx"",""-0x1:r11"",""x172:OF"",""x171:rcx"",""x180:r14"",""0xffffffff00000001:r15"",""x183:r13b"",""x184:r8"",""x185:rbx"",""x186:rax""]";
"	test r13b, r13b; testing x183";
"	cmovnz rax, rbp; if !ZF, x186<- x169 (nzVar)";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x165:r9"",""x167:r12"",""x152:r10"",""x169:rbp"",""0x0:rdx"",""-0x1:r11"",""x172:OF"",""x171:rcx"",""x180:r14"",""0xffffffff00000001:r15"",""x183:r13b"",""x184:r8"",""x185:rbx"",""x186:rax""]";
"	mov [rdi + 0x08 * 2 ], rax; out1[2] = x186";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x165:r9"",""x167:r12"",""x152:r10"",""x169:rbp"",""0x0:rdx"",""-0x1:r11"",""x172:OF"",""x171:rcx"",""x180:r14"",""0xffffffff00000001:r15"",""x183:r13b"",""x184:r8"",""x186:rax"",""x185:rbx""]";
"	mov [rdi + 0x08 * 1 ], rbx; out1[1] = x185";
"	; the job is: x187 = x183 !== 0 ? x180: x171";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x165:r9"",""x167:r12"",""x152:r10"",""x169:rbp"",""0x0:rdx"",""-0x1:r11"",""x172:OF"",""x171:rcx"",""0xffffffff00000001:r15"",""x183:r13b"",""x184:r8"",""x186:rax"",""x185:rbx"",""x187:r14""]";
"	test r13b, r13b; testing x183";
"	cmovnz r14, rcx; if !ZF, x187<- x171 (nzVar)";
"	;-- allocation: [""out1:rdi"",""arg1:rsi"",""x165:r9"",""x167:r12"",""x152:r10"",""x169:rbp"",""0x0:rdx"",""-0x1:r11"",""x172:OF"",""x171:rcx"",""0xffffffff00000001:r15"",""x183:r13b"",""x184:r8"",""x186:rax"",""x185:rbx"",""x187:r14""]";
"	mov [rdi + 0x08 * 3 ], r14; out1[3] = x187";
"	mov rbx, [rsp + 0x08 * 8 ]; restoring from stack";
"	mov rbp, [rsp + 0x08 * 9 ]; restoring from stack";
"	mov r12, [rsp + 0x08 * 10 ]; restoring from stack";
"	mov r13, [rsp + 0x08 * 11 ]; restoring from stack";
"	mov r14, [rsp + 0x08 * 12 ]; restoring from stack";
"	mov r15, [rsp + 0x08 * 13 ]; restoring from stack";
"	add rsp, 0x78 ";
"	ret";
"; cyclecount: 1514";
"; seed 46 ";
"; time Needed: 1669008 ms/ 10000 runs";
"; Time Spent By Invoking Make (measure): 1197310 ms";
"; Ratio (time for make measure)/elapsed: 0.7173782270666168";
"; Reverts a mutation because test was slower: 7565";
"; number tried mutation Permutation: 3275";
"; number tried mutation Spill: 3330";
"; number tried mutation Decision: 3395";
"; FailedEvals (cannot swap because of edge to the next node): 1833";
""].
