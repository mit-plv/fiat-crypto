λ x x0 : word64 * word64 * word64 * word64 * word64,
Interp-η
(λ var : Syntax.base_type → Type,
 λ '(x10, x11, x9, x7, x5, (x18, x19, x17, x15, x13))%core,
 uint64_t x20 = 0xffffffffffffe + x10 - x18;
 uint64_t x21 = 0xffffffffffffe + x11 - x19;
 uint64_t x22 = 0xffffffffffffe + x9 - x17;
 uint64_t x23 = 0xffffffffffffe + x7 - x15;
 uint64_t x24 = 0xfffffffffffda + x5 - x13;
 uint64_t x25 = x24 >> 0x33;
 uint64_t x26 = x24 & 0x7ffffffffffff;
 uint64_t x27 = x25 + x23;
 uint64_t x28 = x27 >> 0x33;
 uint64_t x29 = x27 & 0x7ffffffffffff;
 uint64_t x30 = x28 + x22;
 uint64_t x31 = x30 >> 0x33;
 uint64_t x32 = x30 & 0x7ffffffffffff;
 uint64_t x33 = x31 + x21;
 uint64_t x34 = x33 >> 0x33;
 uint64_t x35 = x33 & 0x7ffffffffffff;
 uint64_t x36 = x34 + x20;
 uint64_t x37 = x36 >> 0x33;
 uint64_t x38 = x36 & 0x7ffffffffffff;
 uint64_t x39 = x26 + 0x13 * x37;
 bool x40 = (bool) (x39 >> 0x33);
 uint64_t x41 = x39 & 0x7ffffffffffff;
 uint64_t x42 = x40 + x29;
 bool x43 = (bool) (x42 >> 0x33);
 uint64_t x44 = x42 & 0x7ffffffffffff;
 return (Return x38, Return x35, x43 + x32, Return x44, Return x41))
(x, x0)%core
     : word64 * word64 * word64 * word64 * word64 → word64 * word64 * word64 * word64 * word64 → ReturnType (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)
