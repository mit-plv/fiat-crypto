λ x x0 : word64 * word64 * word64 * word64,
Interp-η
(λ var : Syntax.base_type → Type,
 λ '(x8, x9, x7, x5, (x14, x15, x13, x11))%core,
 uint64_t x17, uint8_t/*bool*/ x18 = subborrow_u64(0x0, x5, x11);
 uint64_t x20, uint8_t/*bool*/ x21 = subborrow_u64(x18, x7, x13);
 uint64_t x23, uint8_t/*bool*/ x24 = subborrow_u64(x21, x9, x15);
 uint64_t x26, uint8_t/*bool*/ x27 = subborrow_u64(x24, x8, x14);
 uint64_t x28 = cmovznz64(x27, 0x0, 0xffffffffffffffffL);
 uint64_t x29 = (x28 & 0xffffffffffffffffL);
 uint64_t x31, uint8_t/*bool*/ x32 = addcarryx_u64(0x0, x17, x29);
 uint64_t x33 = (x28 & 0xffffffff);
 uint64_t x35, uint8_t/*bool*/ x36 = addcarryx_u64(x32, x20, x33);
 uint64_t x38, uint8_t/*bool*/ x39 = addcarryx_u64(x36, x23, 0x0);
 uint64_t x40 = (x28 & 0xffffffff00000001L);
 uint64_t x42, uint8_t/*bool*/ _ = addcarryx_u64(x39, x26, x40);
 (Return x42, Return x38, Return x35, Return x31))
(x, x0)%core
     : word64 * word64 * word64 * word64 → word64 * word64 * word64 * word64 → ReturnType (uint64_t * uint64_t * uint64_t * uint64_t)
