λ x x0 : word64 * word64 * word64 * word64 * word64, Interp-η
  λ var : Syntax.base_type → Type, (λ x1 : var (Syntax.TWord 6) * var (Syntax.TWord 6) * var (Syntax.TWord 6) * var (Syntax.TWord 6) * var (Syntax.TWord 6) * (var (Syntax.TWord 6) * var (Syntax.TWord 6) * var (Syntax.TWord 6) * var (Syntax.TWord 6) * var (Syntax.TWord 6)), let (H, H0) := x1 in
                                    let (H1, H2) := H in
                                    let (H3, H4) := H1 in
                                    let (H5, H6) := H3 in
                                    let (H7, H8) := H5 in
                                    let (H9, H10) := H0 in
                                    let (H11, H12) := H9 in
                                    let (H13, H14) := H11 in
                                    let (H15, H16) := H13 in
                                    (((uint64_t)H7 + H15), ((uint64_t)H8 + H16), ((uint64_t)H6 + H14), ((uint64_t)H4 + H12), ((uint64_t)H2 + H10)))%expr
  (x, x0)%core
     : word64 * word64 * word64 * word64 * word64 → word64 * word64 * word64 * word64 * word64 → ReturnType (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)
