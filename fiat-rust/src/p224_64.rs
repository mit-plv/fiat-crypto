/* Autogenerated: src/ExtractionOCaml/word_by_word_montgomery --lang=Rust p224 '2^224 - 2^96 + 1' 64 mul square add sub opp from_montgomery nonzero selectznz to_bytes from_bytes */
/* curve description: p224 */
/* requested operations: mul, square, add, sub, opp, from_montgomery, nonzero, selectznz, to_bytes, from_bytes */
/* m = 0xffffffffffffffffffffffffffffffff000000000000000000000001 (from "2^224 - 2^96 + 1") */
/* machine_wordsize = 64 (from "64") */
/*                                                                    */
/* NOTE: In addition to the bounds specified above each function, all */
/*   functions synthesized for this Montgomery arithmetic require the */
/*   input to be strictly less than the prime modulus (m), and also   */
/*   require the input to be in the unique saturated representation.  */
/*   All functions also ensure that these two properties are true of  */
/*   return values.                                                   */

#![allow(unused_parens)]
#[allow(non_camel_case_types)]

pub type fiat_p224_u1 = u8;
pub type fiat_p224_i1 = i8;
pub type fiat_p224_u2 = u8;
pub type fiat_p224_i2 = i8;


/*
 * The function fiat_p224_addcarryx_u64 is an addition with carry.
 * Postconditions:
 *   out1 = (arg1 + arg2 + arg3) mod 2^64
 *   out2 = ⌊(arg1 + arg2 + arg3) / 2^64⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 *   arg3: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 *   out2: [0x0 ~> 0x1]
 */
#[inline]
pub fn fiat_p224_addcarryx_u64(out1: &mut u64, out2: &mut fiat_p224_u1, arg1: fiat_p224_u1, arg2: u64, arg3: u64) -> () {
  let x1: u128 = (((arg1 as u128) + (arg2 as u128)) + (arg3 as u128));
  let x2: u64 = ((x1 & (0xffffffffffffffff as u128)) as u64);
  let x3: fiat_p224_u1 = ((x1 >> 64) as fiat_p224_u1);
  *out1 = x2;
  *out2 = x3;
}

/*
 * The function fiat_p224_subborrowx_u64 is a subtraction with borrow.
 * Postconditions:
 *   out1 = (-arg1 + arg2 + -arg3) mod 2^64
 *   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^64⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 *   arg3: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 *   out2: [0x0 ~> 0x1]
 */
#[inline]
pub fn fiat_p224_subborrowx_u64(out1: &mut u64, out2: &mut fiat_p224_u1, arg1: fiat_p224_u1, arg2: u64, arg3: u64) -> () {
  let x1: i128 = (((arg2 as i128) - (arg1 as i128)) - (arg3 as i128));
  let x2: fiat_p224_i1 = ((x1 >> 64) as fiat_p224_i1);
  let x3: u64 = ((x1 & (0xffffffffffffffff as i128)) as u64);
  *out1 = x3;
  *out2 = (((0x0 as fiat_p224_i2) - (x2 as fiat_p224_i2)) as fiat_p224_u1);
}

/*
 * The function fiat_p224_mulx_u64 is a multiplication, returning the full double-width result.
 * Postconditions:
 *   out1 = (arg1 * arg2) mod 2^64
 *   out2 = ⌊arg1 * arg2 / 2^64⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0xffffffffffffffff]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 *   out2: [0x0 ~> 0xffffffffffffffff]
 */
#[inline]
pub fn fiat_p224_mulx_u64(out1: &mut u64, out2: &mut u64, arg1: u64, arg2: u64) -> () {
  let x1: u128 = ((arg1 as u128) * (arg2 as u128));
  let x2: u64 = ((x1 & (0xffffffffffffffff as u128)) as u64);
  let x3: u64 = ((x1 >> 64) as u64);
  *out1 = x2;
  *out2 = x3;
}

/*
 * The function fiat_p224_cmovznz_u64 is a single-word conditional move.
 * Postconditions:
 *   out1 = (if arg1 = 0 then arg2 else arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 *   arg3: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 */
#[inline]
pub fn fiat_p224_cmovznz_u64(out1: &mut u64, arg1: fiat_p224_u1, arg2: u64, arg3: u64) -> () {
  let x1: fiat_p224_u1 = (!(!arg1));
  let x2: u64 = ((((((0x0 as fiat_p224_i2) - (x1 as fiat_p224_i2)) as fiat_p224_i1) as i128) & (0xffffffffffffffff as i128)) as u64);
  let x3: u64 = ((x2 & arg3) | ((!x2) & arg2));
  *out1 = x3;
}

/*
 * The function fiat_p224_mul multiplies two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_p224_mul(out1: &mut [u64; 4], arg1: &[u64; 4], arg2: &[u64; 4]) -> () {
  let x1: u64 = (arg1[1]);
  let x2: u64 = (arg1[2]);
  let x3: u64 = (arg1[3]);
  let x4: u64 = (arg1[0]);
  let mut x5: u64 = 0;
  let mut x6: u64 = 0;
  fiat_p224_mulx_u64(&mut x5, &mut x6, x4, (arg2[3]));
  let mut x7: u64 = 0;
  let mut x8: u64 = 0;
  fiat_p224_mulx_u64(&mut x7, &mut x8, x4, (arg2[2]));
  let mut x9: u64 = 0;
  let mut x10: u64 = 0;
  fiat_p224_mulx_u64(&mut x9, &mut x10, x4, (arg2[1]));
  let mut x11: u64 = 0;
  let mut x12: u64 = 0;
  fiat_p224_mulx_u64(&mut x11, &mut x12, x4, (arg2[0]));
  let mut x13: u64 = 0;
  let mut x14: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x13, &mut x14, 0x0, x12, x9);
  let mut x15: u64 = 0;
  let mut x16: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x15, &mut x16, x14, x10, x7);
  let mut x17: u64 = 0;
  let mut x18: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x17, &mut x18, x16, x8, x5);
  let x19: u64 = ((x18 as u64) + x6);
  let mut x20: u64 = 0;
  let mut x21: u64 = 0;
  fiat_p224_mulx_u64(&mut x20, &mut x21, x11, 0xffffffffffffffff);
  let mut x22: u64 = 0;
  let mut x23: u64 = 0;
  fiat_p224_mulx_u64(&mut x22, &mut x23, x20, 0xffffffff);
  let mut x24: u64 = 0;
  let mut x25: u64 = 0;
  fiat_p224_mulx_u64(&mut x24, &mut x25, x20, 0xffffffffffffffff);
  let mut x26: u64 = 0;
  let mut x27: u64 = 0;
  fiat_p224_mulx_u64(&mut x26, &mut x27, x20, 0xffffffff00000000);
  let mut x28: u64 = 0;
  let mut x29: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x28, &mut x29, 0x0, x27, x24);
  let mut x30: u64 = 0;
  let mut x31: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x30, &mut x31, x29, x25, x22);
  let x32: u64 = ((x31 as u64) + x23);
  let mut x33: u64 = 0;
  let mut x34: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x33, &mut x34, 0x0, x11, x20);
  let mut x35: u64 = 0;
  let mut x36: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x35, &mut x36, x34, x13, x26);
  let mut x37: u64 = 0;
  let mut x38: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x37, &mut x38, x36, x15, x28);
  let mut x39: u64 = 0;
  let mut x40: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x39, &mut x40, x38, x17, x30);
  let mut x41: u64 = 0;
  let mut x42: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x41, &mut x42, x40, x19, x32);
  let mut x43: u64 = 0;
  let mut x44: u64 = 0;
  fiat_p224_mulx_u64(&mut x43, &mut x44, x1, (arg2[3]));
  let mut x45: u64 = 0;
  let mut x46: u64 = 0;
  fiat_p224_mulx_u64(&mut x45, &mut x46, x1, (arg2[2]));
  let mut x47: u64 = 0;
  let mut x48: u64 = 0;
  fiat_p224_mulx_u64(&mut x47, &mut x48, x1, (arg2[1]));
  let mut x49: u64 = 0;
  let mut x50: u64 = 0;
  fiat_p224_mulx_u64(&mut x49, &mut x50, x1, (arg2[0]));
  let mut x51: u64 = 0;
  let mut x52: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x51, &mut x52, 0x0, x50, x47);
  let mut x53: u64 = 0;
  let mut x54: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x53, &mut x54, x52, x48, x45);
  let mut x55: u64 = 0;
  let mut x56: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x55, &mut x56, x54, x46, x43);
  let x57: u64 = ((x56 as u64) + x44);
  let mut x58: u64 = 0;
  let mut x59: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x58, &mut x59, 0x0, x35, x49);
  let mut x60: u64 = 0;
  let mut x61: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x60, &mut x61, x59, x37, x51);
  let mut x62: u64 = 0;
  let mut x63: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x62, &mut x63, x61, x39, x53);
  let mut x64: u64 = 0;
  let mut x65: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x64, &mut x65, x63, x41, x55);
  let mut x66: u64 = 0;
  let mut x67: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x66, &mut x67, x65, (x42 as u64), x57);
  let mut x68: u64 = 0;
  let mut x69: u64 = 0;
  fiat_p224_mulx_u64(&mut x68, &mut x69, x58, 0xffffffffffffffff);
  let mut x70: u64 = 0;
  let mut x71: u64 = 0;
  fiat_p224_mulx_u64(&mut x70, &mut x71, x68, 0xffffffff);
  let mut x72: u64 = 0;
  let mut x73: u64 = 0;
  fiat_p224_mulx_u64(&mut x72, &mut x73, x68, 0xffffffffffffffff);
  let mut x74: u64 = 0;
  let mut x75: u64 = 0;
  fiat_p224_mulx_u64(&mut x74, &mut x75, x68, 0xffffffff00000000);
  let mut x76: u64 = 0;
  let mut x77: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x76, &mut x77, 0x0, x75, x72);
  let mut x78: u64 = 0;
  let mut x79: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x78, &mut x79, x77, x73, x70);
  let x80: u64 = ((x79 as u64) + x71);
  let mut x81: u64 = 0;
  let mut x82: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x81, &mut x82, 0x0, x58, x68);
  let mut x83: u64 = 0;
  let mut x84: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x83, &mut x84, x82, x60, x74);
  let mut x85: u64 = 0;
  let mut x86: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x85, &mut x86, x84, x62, x76);
  let mut x87: u64 = 0;
  let mut x88: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x87, &mut x88, x86, x64, x78);
  let mut x89: u64 = 0;
  let mut x90: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x89, &mut x90, x88, x66, x80);
  let x91: u64 = ((x90 as u64) + (x67 as u64));
  let mut x92: u64 = 0;
  let mut x93: u64 = 0;
  fiat_p224_mulx_u64(&mut x92, &mut x93, x2, (arg2[3]));
  let mut x94: u64 = 0;
  let mut x95: u64 = 0;
  fiat_p224_mulx_u64(&mut x94, &mut x95, x2, (arg2[2]));
  let mut x96: u64 = 0;
  let mut x97: u64 = 0;
  fiat_p224_mulx_u64(&mut x96, &mut x97, x2, (arg2[1]));
  let mut x98: u64 = 0;
  let mut x99: u64 = 0;
  fiat_p224_mulx_u64(&mut x98, &mut x99, x2, (arg2[0]));
  let mut x100: u64 = 0;
  let mut x101: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x100, &mut x101, 0x0, x99, x96);
  let mut x102: u64 = 0;
  let mut x103: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x102, &mut x103, x101, x97, x94);
  let mut x104: u64 = 0;
  let mut x105: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x104, &mut x105, x103, x95, x92);
  let x106: u64 = ((x105 as u64) + x93);
  let mut x107: u64 = 0;
  let mut x108: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x107, &mut x108, 0x0, x83, x98);
  let mut x109: u64 = 0;
  let mut x110: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x109, &mut x110, x108, x85, x100);
  let mut x111: u64 = 0;
  let mut x112: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x111, &mut x112, x110, x87, x102);
  let mut x113: u64 = 0;
  let mut x114: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x113, &mut x114, x112, x89, x104);
  let mut x115: u64 = 0;
  let mut x116: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x115, &mut x116, x114, x91, x106);
  let mut x117: u64 = 0;
  let mut x118: u64 = 0;
  fiat_p224_mulx_u64(&mut x117, &mut x118, x107, 0xffffffffffffffff);
  let mut x119: u64 = 0;
  let mut x120: u64 = 0;
  fiat_p224_mulx_u64(&mut x119, &mut x120, x117, 0xffffffff);
  let mut x121: u64 = 0;
  let mut x122: u64 = 0;
  fiat_p224_mulx_u64(&mut x121, &mut x122, x117, 0xffffffffffffffff);
  let mut x123: u64 = 0;
  let mut x124: u64 = 0;
  fiat_p224_mulx_u64(&mut x123, &mut x124, x117, 0xffffffff00000000);
  let mut x125: u64 = 0;
  let mut x126: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x125, &mut x126, 0x0, x124, x121);
  let mut x127: u64 = 0;
  let mut x128: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x127, &mut x128, x126, x122, x119);
  let x129: u64 = ((x128 as u64) + x120);
  let mut x130: u64 = 0;
  let mut x131: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x130, &mut x131, 0x0, x107, x117);
  let mut x132: u64 = 0;
  let mut x133: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x132, &mut x133, x131, x109, x123);
  let mut x134: u64 = 0;
  let mut x135: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x134, &mut x135, x133, x111, x125);
  let mut x136: u64 = 0;
  let mut x137: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x136, &mut x137, x135, x113, x127);
  let mut x138: u64 = 0;
  let mut x139: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x138, &mut x139, x137, x115, x129);
  let x140: u64 = ((x139 as u64) + (x116 as u64));
  let mut x141: u64 = 0;
  let mut x142: u64 = 0;
  fiat_p224_mulx_u64(&mut x141, &mut x142, x3, (arg2[3]));
  let mut x143: u64 = 0;
  let mut x144: u64 = 0;
  fiat_p224_mulx_u64(&mut x143, &mut x144, x3, (arg2[2]));
  let mut x145: u64 = 0;
  let mut x146: u64 = 0;
  fiat_p224_mulx_u64(&mut x145, &mut x146, x3, (arg2[1]));
  let mut x147: u64 = 0;
  let mut x148: u64 = 0;
  fiat_p224_mulx_u64(&mut x147, &mut x148, x3, (arg2[0]));
  let mut x149: u64 = 0;
  let mut x150: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x149, &mut x150, 0x0, x148, x145);
  let mut x151: u64 = 0;
  let mut x152: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x151, &mut x152, x150, x146, x143);
  let mut x153: u64 = 0;
  let mut x154: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x153, &mut x154, x152, x144, x141);
  let x155: u64 = ((x154 as u64) + x142);
  let mut x156: u64 = 0;
  let mut x157: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x156, &mut x157, 0x0, x132, x147);
  let mut x158: u64 = 0;
  let mut x159: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x158, &mut x159, x157, x134, x149);
  let mut x160: u64 = 0;
  let mut x161: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x160, &mut x161, x159, x136, x151);
  let mut x162: u64 = 0;
  let mut x163: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x162, &mut x163, x161, x138, x153);
  let mut x164: u64 = 0;
  let mut x165: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x164, &mut x165, x163, x140, x155);
  let mut x166: u64 = 0;
  let mut x167: u64 = 0;
  fiat_p224_mulx_u64(&mut x166, &mut x167, x156, 0xffffffffffffffff);
  let mut x168: u64 = 0;
  let mut x169: u64 = 0;
  fiat_p224_mulx_u64(&mut x168, &mut x169, x166, 0xffffffff);
  let mut x170: u64 = 0;
  let mut x171: u64 = 0;
  fiat_p224_mulx_u64(&mut x170, &mut x171, x166, 0xffffffffffffffff);
  let mut x172: u64 = 0;
  let mut x173: u64 = 0;
  fiat_p224_mulx_u64(&mut x172, &mut x173, x166, 0xffffffff00000000);
  let mut x174: u64 = 0;
  let mut x175: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x174, &mut x175, 0x0, x173, x170);
  let mut x176: u64 = 0;
  let mut x177: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x176, &mut x177, x175, x171, x168);
  let x178: u64 = ((x177 as u64) + x169);
  let mut x179: u64 = 0;
  let mut x180: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x179, &mut x180, 0x0, x156, x166);
  let mut x181: u64 = 0;
  let mut x182: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x181, &mut x182, x180, x158, x172);
  let mut x183: u64 = 0;
  let mut x184: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x183, &mut x184, x182, x160, x174);
  let mut x185: u64 = 0;
  let mut x186: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x185, &mut x186, x184, x162, x176);
  let mut x187: u64 = 0;
  let mut x188: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x187, &mut x188, x186, x164, x178);
  let x189: u64 = ((x188 as u64) + (x165 as u64));
  let mut x190: u64 = 0;
  let mut x191: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x190, &mut x191, 0x0, x181, (0x1 as u64));
  let mut x192: u64 = 0;
  let mut x193: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x192, &mut x193, x191, x183, 0xffffffff00000000);
  let mut x194: u64 = 0;
  let mut x195: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x194, &mut x195, x193, x185, 0xffffffffffffffff);
  let mut x196: u64 = 0;
  let mut x197: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x196, &mut x197, x195, x187, 0xffffffff);
  let mut x198: u64 = 0;
  let mut x199: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x198, &mut x199, x197, x189, (0x0 as u64));
  let mut x200: u64 = 0;
  fiat_p224_cmovznz_u64(&mut x200, x199, x190, x181);
  let mut x201: u64 = 0;
  fiat_p224_cmovznz_u64(&mut x201, x199, x192, x183);
  let mut x202: u64 = 0;
  fiat_p224_cmovznz_u64(&mut x202, x199, x194, x185);
  let mut x203: u64 = 0;
  fiat_p224_cmovznz_u64(&mut x203, x199, x196, x187);
  out1[0] = x200;
  out1[1] = x201;
  out1[2] = x202;
  out1[3] = x203;
}

/*
 * The function fiat_p224_square squares a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_p224_square(out1: &mut [u64; 4], arg1: &[u64; 4]) -> () {
  let x1: u64 = (arg1[1]);
  let x2: u64 = (arg1[2]);
  let x3: u64 = (arg1[3]);
  let x4: u64 = (arg1[0]);
  let mut x5: u64 = 0;
  let mut x6: u64 = 0;
  fiat_p224_mulx_u64(&mut x5, &mut x6, x4, (arg1[3]));
  let mut x7: u64 = 0;
  let mut x8: u64 = 0;
  fiat_p224_mulx_u64(&mut x7, &mut x8, x4, (arg1[2]));
  let mut x9: u64 = 0;
  let mut x10: u64 = 0;
  fiat_p224_mulx_u64(&mut x9, &mut x10, x4, (arg1[1]));
  let mut x11: u64 = 0;
  let mut x12: u64 = 0;
  fiat_p224_mulx_u64(&mut x11, &mut x12, x4, (arg1[0]));
  let mut x13: u64 = 0;
  let mut x14: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x13, &mut x14, 0x0, x12, x9);
  let mut x15: u64 = 0;
  let mut x16: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x15, &mut x16, x14, x10, x7);
  let mut x17: u64 = 0;
  let mut x18: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x17, &mut x18, x16, x8, x5);
  let x19: u64 = ((x18 as u64) + x6);
  let mut x20: u64 = 0;
  let mut x21: u64 = 0;
  fiat_p224_mulx_u64(&mut x20, &mut x21, x11, 0xffffffffffffffff);
  let mut x22: u64 = 0;
  let mut x23: u64 = 0;
  fiat_p224_mulx_u64(&mut x22, &mut x23, x20, 0xffffffff);
  let mut x24: u64 = 0;
  let mut x25: u64 = 0;
  fiat_p224_mulx_u64(&mut x24, &mut x25, x20, 0xffffffffffffffff);
  let mut x26: u64 = 0;
  let mut x27: u64 = 0;
  fiat_p224_mulx_u64(&mut x26, &mut x27, x20, 0xffffffff00000000);
  let mut x28: u64 = 0;
  let mut x29: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x28, &mut x29, 0x0, x27, x24);
  let mut x30: u64 = 0;
  let mut x31: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x30, &mut x31, x29, x25, x22);
  let x32: u64 = ((x31 as u64) + x23);
  let mut x33: u64 = 0;
  let mut x34: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x33, &mut x34, 0x0, x11, x20);
  let mut x35: u64 = 0;
  let mut x36: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x35, &mut x36, x34, x13, x26);
  let mut x37: u64 = 0;
  let mut x38: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x37, &mut x38, x36, x15, x28);
  let mut x39: u64 = 0;
  let mut x40: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x39, &mut x40, x38, x17, x30);
  let mut x41: u64 = 0;
  let mut x42: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x41, &mut x42, x40, x19, x32);
  let mut x43: u64 = 0;
  let mut x44: u64 = 0;
  fiat_p224_mulx_u64(&mut x43, &mut x44, x1, (arg1[3]));
  let mut x45: u64 = 0;
  let mut x46: u64 = 0;
  fiat_p224_mulx_u64(&mut x45, &mut x46, x1, (arg1[2]));
  let mut x47: u64 = 0;
  let mut x48: u64 = 0;
  fiat_p224_mulx_u64(&mut x47, &mut x48, x1, (arg1[1]));
  let mut x49: u64 = 0;
  let mut x50: u64 = 0;
  fiat_p224_mulx_u64(&mut x49, &mut x50, x1, (arg1[0]));
  let mut x51: u64 = 0;
  let mut x52: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x51, &mut x52, 0x0, x50, x47);
  let mut x53: u64 = 0;
  let mut x54: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x53, &mut x54, x52, x48, x45);
  let mut x55: u64 = 0;
  let mut x56: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x55, &mut x56, x54, x46, x43);
  let x57: u64 = ((x56 as u64) + x44);
  let mut x58: u64 = 0;
  let mut x59: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x58, &mut x59, 0x0, x35, x49);
  let mut x60: u64 = 0;
  let mut x61: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x60, &mut x61, x59, x37, x51);
  let mut x62: u64 = 0;
  let mut x63: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x62, &mut x63, x61, x39, x53);
  let mut x64: u64 = 0;
  let mut x65: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x64, &mut x65, x63, x41, x55);
  let mut x66: u64 = 0;
  let mut x67: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x66, &mut x67, x65, (x42 as u64), x57);
  let mut x68: u64 = 0;
  let mut x69: u64 = 0;
  fiat_p224_mulx_u64(&mut x68, &mut x69, x58, 0xffffffffffffffff);
  let mut x70: u64 = 0;
  let mut x71: u64 = 0;
  fiat_p224_mulx_u64(&mut x70, &mut x71, x68, 0xffffffff);
  let mut x72: u64 = 0;
  let mut x73: u64 = 0;
  fiat_p224_mulx_u64(&mut x72, &mut x73, x68, 0xffffffffffffffff);
  let mut x74: u64 = 0;
  let mut x75: u64 = 0;
  fiat_p224_mulx_u64(&mut x74, &mut x75, x68, 0xffffffff00000000);
  let mut x76: u64 = 0;
  let mut x77: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x76, &mut x77, 0x0, x75, x72);
  let mut x78: u64 = 0;
  let mut x79: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x78, &mut x79, x77, x73, x70);
  let x80: u64 = ((x79 as u64) + x71);
  let mut x81: u64 = 0;
  let mut x82: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x81, &mut x82, 0x0, x58, x68);
  let mut x83: u64 = 0;
  let mut x84: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x83, &mut x84, x82, x60, x74);
  let mut x85: u64 = 0;
  let mut x86: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x85, &mut x86, x84, x62, x76);
  let mut x87: u64 = 0;
  let mut x88: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x87, &mut x88, x86, x64, x78);
  let mut x89: u64 = 0;
  let mut x90: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x89, &mut x90, x88, x66, x80);
  let x91: u64 = ((x90 as u64) + (x67 as u64));
  let mut x92: u64 = 0;
  let mut x93: u64 = 0;
  fiat_p224_mulx_u64(&mut x92, &mut x93, x2, (arg1[3]));
  let mut x94: u64 = 0;
  let mut x95: u64 = 0;
  fiat_p224_mulx_u64(&mut x94, &mut x95, x2, (arg1[2]));
  let mut x96: u64 = 0;
  let mut x97: u64 = 0;
  fiat_p224_mulx_u64(&mut x96, &mut x97, x2, (arg1[1]));
  let mut x98: u64 = 0;
  let mut x99: u64 = 0;
  fiat_p224_mulx_u64(&mut x98, &mut x99, x2, (arg1[0]));
  let mut x100: u64 = 0;
  let mut x101: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x100, &mut x101, 0x0, x99, x96);
  let mut x102: u64 = 0;
  let mut x103: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x102, &mut x103, x101, x97, x94);
  let mut x104: u64 = 0;
  let mut x105: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x104, &mut x105, x103, x95, x92);
  let x106: u64 = ((x105 as u64) + x93);
  let mut x107: u64 = 0;
  let mut x108: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x107, &mut x108, 0x0, x83, x98);
  let mut x109: u64 = 0;
  let mut x110: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x109, &mut x110, x108, x85, x100);
  let mut x111: u64 = 0;
  let mut x112: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x111, &mut x112, x110, x87, x102);
  let mut x113: u64 = 0;
  let mut x114: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x113, &mut x114, x112, x89, x104);
  let mut x115: u64 = 0;
  let mut x116: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x115, &mut x116, x114, x91, x106);
  let mut x117: u64 = 0;
  let mut x118: u64 = 0;
  fiat_p224_mulx_u64(&mut x117, &mut x118, x107, 0xffffffffffffffff);
  let mut x119: u64 = 0;
  let mut x120: u64 = 0;
  fiat_p224_mulx_u64(&mut x119, &mut x120, x117, 0xffffffff);
  let mut x121: u64 = 0;
  let mut x122: u64 = 0;
  fiat_p224_mulx_u64(&mut x121, &mut x122, x117, 0xffffffffffffffff);
  let mut x123: u64 = 0;
  let mut x124: u64 = 0;
  fiat_p224_mulx_u64(&mut x123, &mut x124, x117, 0xffffffff00000000);
  let mut x125: u64 = 0;
  let mut x126: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x125, &mut x126, 0x0, x124, x121);
  let mut x127: u64 = 0;
  let mut x128: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x127, &mut x128, x126, x122, x119);
  let x129: u64 = ((x128 as u64) + x120);
  let mut x130: u64 = 0;
  let mut x131: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x130, &mut x131, 0x0, x107, x117);
  let mut x132: u64 = 0;
  let mut x133: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x132, &mut x133, x131, x109, x123);
  let mut x134: u64 = 0;
  let mut x135: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x134, &mut x135, x133, x111, x125);
  let mut x136: u64 = 0;
  let mut x137: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x136, &mut x137, x135, x113, x127);
  let mut x138: u64 = 0;
  let mut x139: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x138, &mut x139, x137, x115, x129);
  let x140: u64 = ((x139 as u64) + (x116 as u64));
  let mut x141: u64 = 0;
  let mut x142: u64 = 0;
  fiat_p224_mulx_u64(&mut x141, &mut x142, x3, (arg1[3]));
  let mut x143: u64 = 0;
  let mut x144: u64 = 0;
  fiat_p224_mulx_u64(&mut x143, &mut x144, x3, (arg1[2]));
  let mut x145: u64 = 0;
  let mut x146: u64 = 0;
  fiat_p224_mulx_u64(&mut x145, &mut x146, x3, (arg1[1]));
  let mut x147: u64 = 0;
  let mut x148: u64 = 0;
  fiat_p224_mulx_u64(&mut x147, &mut x148, x3, (arg1[0]));
  let mut x149: u64 = 0;
  let mut x150: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x149, &mut x150, 0x0, x148, x145);
  let mut x151: u64 = 0;
  let mut x152: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x151, &mut x152, x150, x146, x143);
  let mut x153: u64 = 0;
  let mut x154: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x153, &mut x154, x152, x144, x141);
  let x155: u64 = ((x154 as u64) + x142);
  let mut x156: u64 = 0;
  let mut x157: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x156, &mut x157, 0x0, x132, x147);
  let mut x158: u64 = 0;
  let mut x159: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x158, &mut x159, x157, x134, x149);
  let mut x160: u64 = 0;
  let mut x161: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x160, &mut x161, x159, x136, x151);
  let mut x162: u64 = 0;
  let mut x163: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x162, &mut x163, x161, x138, x153);
  let mut x164: u64 = 0;
  let mut x165: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x164, &mut x165, x163, x140, x155);
  let mut x166: u64 = 0;
  let mut x167: u64 = 0;
  fiat_p224_mulx_u64(&mut x166, &mut x167, x156, 0xffffffffffffffff);
  let mut x168: u64 = 0;
  let mut x169: u64 = 0;
  fiat_p224_mulx_u64(&mut x168, &mut x169, x166, 0xffffffff);
  let mut x170: u64 = 0;
  let mut x171: u64 = 0;
  fiat_p224_mulx_u64(&mut x170, &mut x171, x166, 0xffffffffffffffff);
  let mut x172: u64 = 0;
  let mut x173: u64 = 0;
  fiat_p224_mulx_u64(&mut x172, &mut x173, x166, 0xffffffff00000000);
  let mut x174: u64 = 0;
  let mut x175: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x174, &mut x175, 0x0, x173, x170);
  let mut x176: u64 = 0;
  let mut x177: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x176, &mut x177, x175, x171, x168);
  let x178: u64 = ((x177 as u64) + x169);
  let mut x179: u64 = 0;
  let mut x180: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x179, &mut x180, 0x0, x156, x166);
  let mut x181: u64 = 0;
  let mut x182: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x181, &mut x182, x180, x158, x172);
  let mut x183: u64 = 0;
  let mut x184: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x183, &mut x184, x182, x160, x174);
  let mut x185: u64 = 0;
  let mut x186: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x185, &mut x186, x184, x162, x176);
  let mut x187: u64 = 0;
  let mut x188: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x187, &mut x188, x186, x164, x178);
  let x189: u64 = ((x188 as u64) + (x165 as u64));
  let mut x190: u64 = 0;
  let mut x191: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x190, &mut x191, 0x0, x181, (0x1 as u64));
  let mut x192: u64 = 0;
  let mut x193: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x192, &mut x193, x191, x183, 0xffffffff00000000);
  let mut x194: u64 = 0;
  let mut x195: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x194, &mut x195, x193, x185, 0xffffffffffffffff);
  let mut x196: u64 = 0;
  let mut x197: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x196, &mut x197, x195, x187, 0xffffffff);
  let mut x198: u64 = 0;
  let mut x199: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x198, &mut x199, x197, x189, (0x0 as u64));
  let mut x200: u64 = 0;
  fiat_p224_cmovznz_u64(&mut x200, x199, x190, x181);
  let mut x201: u64 = 0;
  fiat_p224_cmovznz_u64(&mut x201, x199, x192, x183);
  let mut x202: u64 = 0;
  fiat_p224_cmovznz_u64(&mut x202, x199, x194, x185);
  let mut x203: u64 = 0;
  fiat_p224_cmovznz_u64(&mut x203, x199, x196, x187);
  out1[0] = x200;
  out1[1] = x201;
  out1[2] = x202;
  out1[3] = x203;
}

/*
 * The function fiat_p224_add adds two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_p224_add(out1: &mut [u64; 4], arg1: &[u64; 4], arg2: &[u64; 4]) -> () {
  let mut x1: u64 = 0;
  let mut x2: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x1, &mut x2, 0x0, (arg1[0]), (arg2[0]));
  let mut x3: u64 = 0;
  let mut x4: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x3, &mut x4, x2, (arg1[1]), (arg2[1]));
  let mut x5: u64 = 0;
  let mut x6: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x5, &mut x6, x4, (arg1[2]), (arg2[2]));
  let mut x7: u64 = 0;
  let mut x8: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x7, &mut x8, x6, (arg1[3]), (arg2[3]));
  let mut x9: u64 = 0;
  let mut x10: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x9, &mut x10, 0x0, x1, (0x1 as u64));
  let mut x11: u64 = 0;
  let mut x12: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x11, &mut x12, x10, x3, 0xffffffff00000000);
  let mut x13: u64 = 0;
  let mut x14: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x13, &mut x14, x12, x5, 0xffffffffffffffff);
  let mut x15: u64 = 0;
  let mut x16: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x15, &mut x16, x14, x7, 0xffffffff);
  let mut x17: u64 = 0;
  let mut x18: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x17, &mut x18, x16, (x8 as u64), (0x0 as u64));
  let mut x19: u64 = 0;
  fiat_p224_cmovznz_u64(&mut x19, x18, x9, x1);
  let mut x20: u64 = 0;
  fiat_p224_cmovznz_u64(&mut x20, x18, x11, x3);
  let mut x21: u64 = 0;
  fiat_p224_cmovznz_u64(&mut x21, x18, x13, x5);
  let mut x22: u64 = 0;
  fiat_p224_cmovznz_u64(&mut x22, x18, x15, x7);
  out1[0] = x19;
  out1[1] = x20;
  out1[2] = x21;
  out1[3] = x22;
}

/*
 * The function fiat_p224_sub subtracts two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_p224_sub(out1: &mut [u64; 4], arg1: &[u64; 4], arg2: &[u64; 4]) -> () {
  let mut x1: u64 = 0;
  let mut x2: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x1, &mut x2, 0x0, (arg1[0]), (arg2[0]));
  let mut x3: u64 = 0;
  let mut x4: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x3, &mut x4, x2, (arg1[1]), (arg2[1]));
  let mut x5: u64 = 0;
  let mut x6: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x5, &mut x6, x4, (arg1[2]), (arg2[2]));
  let mut x7: u64 = 0;
  let mut x8: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x7, &mut x8, x6, (arg1[3]), (arg2[3]));
  let mut x9: u64 = 0;
  fiat_p224_cmovznz_u64(&mut x9, x8, (0x0 as u64), 0xffffffffffffffff);
  let mut x10: u64 = 0;
  let mut x11: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x10, &mut x11, 0x0, x1, (((x9 & (0x1 as u64)) as fiat_p224_u1) as u64));
  let mut x12: u64 = 0;
  let mut x13: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x12, &mut x13, x11, x3, (x9 & 0xffffffff00000000));
  let mut x14: u64 = 0;
  let mut x15: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x14, &mut x15, x13, x5, (x9 & 0xffffffffffffffff));
  let mut x16: u64 = 0;
  let mut x17: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x16, &mut x17, x15, x7, (x9 & 0xffffffff));
  out1[0] = x10;
  out1[1] = x12;
  out1[2] = x14;
  out1[3] = x16;
}

/*
 * The function fiat_p224_opp negates a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_p224_opp(out1: &mut [u64; 4], arg1: &[u64; 4]) -> () {
  let mut x1: u64 = 0;
  let mut x2: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x1, &mut x2, 0x0, (0x0 as u64), (arg1[0]));
  let mut x3: u64 = 0;
  let mut x4: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x3, &mut x4, x2, (0x0 as u64), (arg1[1]));
  let mut x5: u64 = 0;
  let mut x6: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x5, &mut x6, x4, (0x0 as u64), (arg1[2]));
  let mut x7: u64 = 0;
  let mut x8: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x7, &mut x8, x6, (0x0 as u64), (arg1[3]));
  let mut x9: u64 = 0;
  fiat_p224_cmovznz_u64(&mut x9, x8, (0x0 as u64), 0xffffffffffffffff);
  let mut x10: u64 = 0;
  let mut x11: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x10, &mut x11, 0x0, x1, (((x9 & (0x1 as u64)) as fiat_p224_u1) as u64));
  let mut x12: u64 = 0;
  let mut x13: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x12, &mut x13, x11, x3, (x9 & 0xffffffff00000000));
  let mut x14: u64 = 0;
  let mut x15: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x14, &mut x15, x13, x5, (x9 & 0xffffffffffffffff));
  let mut x16: u64 = 0;
  let mut x17: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x16, &mut x17, x15, x7, (x9 & 0xffffffff));
  out1[0] = x10;
  out1[1] = x12;
  out1[2] = x14;
  out1[3] = x16;
}

/*
 * The function fiat_p224_from_montgomery translates a field element out of the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = (eval arg1 * ((2^64)⁻¹ mod m)^4) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_p224_from_montgomery(out1: &mut [u64; 4], arg1: &[u64; 4]) -> () {
  let x1: u64 = (arg1[0]);
  let mut x2: u64 = 0;
  let mut x3: u64 = 0;
  fiat_p224_mulx_u64(&mut x2, &mut x3, x1, 0xffffffffffffffff);
  let mut x4: u64 = 0;
  let mut x5: u64 = 0;
  fiat_p224_mulx_u64(&mut x4, &mut x5, x2, 0xffffffff);
  let mut x6: u64 = 0;
  let mut x7: u64 = 0;
  fiat_p224_mulx_u64(&mut x6, &mut x7, x2, 0xffffffffffffffff);
  let mut x8: u64 = 0;
  let mut x9: u64 = 0;
  fiat_p224_mulx_u64(&mut x8, &mut x9, x2, 0xffffffff00000000);
  let mut x10: u64 = 0;
  let mut x11: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x10, &mut x11, 0x0, x9, x6);
  let mut x12: u64 = 0;
  let mut x13: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x12, &mut x13, x11, x7, x4);
  let mut x14: u64 = 0;
  let mut x15: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x14, &mut x15, 0x0, x1, x2);
  let mut x16: u64 = 0;
  let mut x17: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x16, &mut x17, x15, (0x0 as u64), x8);
  let mut x18: u64 = 0;
  let mut x19: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x18, &mut x19, x17, (0x0 as u64), x10);
  let mut x20: u64 = 0;
  let mut x21: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x20, &mut x21, x19, (0x0 as u64), x12);
  let mut x22: u64 = 0;
  let mut x23: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x22, &mut x23, 0x0, x16, (arg1[1]));
  let mut x24: u64 = 0;
  let mut x25: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x24, &mut x25, x23, x18, (0x0 as u64));
  let mut x26: u64 = 0;
  let mut x27: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x26, &mut x27, x25, x20, (0x0 as u64));
  let mut x28: u64 = 0;
  let mut x29: u64 = 0;
  fiat_p224_mulx_u64(&mut x28, &mut x29, x22, 0xffffffffffffffff);
  let mut x30: u64 = 0;
  let mut x31: u64 = 0;
  fiat_p224_mulx_u64(&mut x30, &mut x31, x28, 0xffffffff);
  let mut x32: u64 = 0;
  let mut x33: u64 = 0;
  fiat_p224_mulx_u64(&mut x32, &mut x33, x28, 0xffffffffffffffff);
  let mut x34: u64 = 0;
  let mut x35: u64 = 0;
  fiat_p224_mulx_u64(&mut x34, &mut x35, x28, 0xffffffff00000000);
  let mut x36: u64 = 0;
  let mut x37: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x36, &mut x37, 0x0, x35, x32);
  let mut x38: u64 = 0;
  let mut x39: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x38, &mut x39, x37, x33, x30);
  let mut x40: u64 = 0;
  let mut x41: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x40, &mut x41, 0x0, x22, x28);
  let mut x42: u64 = 0;
  let mut x43: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x42, &mut x43, x41, x24, x34);
  let mut x44: u64 = 0;
  let mut x45: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x44, &mut x45, x43, x26, x36);
  let mut x46: u64 = 0;
  let mut x47: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x46, &mut x47, x45, ((x27 as u64) + ((x21 as u64) + ((x13 as u64) + x5))), x38);
  let mut x48: u64 = 0;
  let mut x49: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x48, &mut x49, 0x0, x42, (arg1[2]));
  let mut x50: u64 = 0;
  let mut x51: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x50, &mut x51, x49, x44, (0x0 as u64));
  let mut x52: u64 = 0;
  let mut x53: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x52, &mut x53, x51, x46, (0x0 as u64));
  let mut x54: u64 = 0;
  let mut x55: u64 = 0;
  fiat_p224_mulx_u64(&mut x54, &mut x55, x48, 0xffffffffffffffff);
  let mut x56: u64 = 0;
  let mut x57: u64 = 0;
  fiat_p224_mulx_u64(&mut x56, &mut x57, x54, 0xffffffff);
  let mut x58: u64 = 0;
  let mut x59: u64 = 0;
  fiat_p224_mulx_u64(&mut x58, &mut x59, x54, 0xffffffffffffffff);
  let mut x60: u64 = 0;
  let mut x61: u64 = 0;
  fiat_p224_mulx_u64(&mut x60, &mut x61, x54, 0xffffffff00000000);
  let mut x62: u64 = 0;
  let mut x63: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x62, &mut x63, 0x0, x61, x58);
  let mut x64: u64 = 0;
  let mut x65: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x64, &mut x65, x63, x59, x56);
  let mut x66: u64 = 0;
  let mut x67: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x66, &mut x67, 0x0, x48, x54);
  let mut x68: u64 = 0;
  let mut x69: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x68, &mut x69, x67, x50, x60);
  let mut x70: u64 = 0;
  let mut x71: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x70, &mut x71, x69, x52, x62);
  let mut x72: u64 = 0;
  let mut x73: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x72, &mut x73, x71, ((x53 as u64) + ((x47 as u64) + ((x39 as u64) + x31))), x64);
  let mut x74: u64 = 0;
  let mut x75: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x74, &mut x75, 0x0, x68, (arg1[3]));
  let mut x76: u64 = 0;
  let mut x77: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x76, &mut x77, x75, x70, (0x0 as u64));
  let mut x78: u64 = 0;
  let mut x79: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x78, &mut x79, x77, x72, (0x0 as u64));
  let mut x80: u64 = 0;
  let mut x81: u64 = 0;
  fiat_p224_mulx_u64(&mut x80, &mut x81, x74, 0xffffffffffffffff);
  let mut x82: u64 = 0;
  let mut x83: u64 = 0;
  fiat_p224_mulx_u64(&mut x82, &mut x83, x80, 0xffffffff);
  let mut x84: u64 = 0;
  let mut x85: u64 = 0;
  fiat_p224_mulx_u64(&mut x84, &mut x85, x80, 0xffffffffffffffff);
  let mut x86: u64 = 0;
  let mut x87: u64 = 0;
  fiat_p224_mulx_u64(&mut x86, &mut x87, x80, 0xffffffff00000000);
  let mut x88: u64 = 0;
  let mut x89: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x88, &mut x89, 0x0, x87, x84);
  let mut x90: u64 = 0;
  let mut x91: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x90, &mut x91, x89, x85, x82);
  let mut x92: u64 = 0;
  let mut x93: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x92, &mut x93, 0x0, x74, x80);
  let mut x94: u64 = 0;
  let mut x95: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x94, &mut x95, x93, x76, x86);
  let mut x96: u64 = 0;
  let mut x97: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x96, &mut x97, x95, x78, x88);
  let mut x98: u64 = 0;
  let mut x99: fiat_p224_u1 = 0;
  fiat_p224_addcarryx_u64(&mut x98, &mut x99, x97, ((x79 as u64) + ((x73 as u64) + ((x65 as u64) + x57))), x90);
  let x100: u64 = ((x99 as u64) + ((x91 as u64) + x83));
  let mut x101: u64 = 0;
  let mut x102: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x101, &mut x102, 0x0, x94, (0x1 as u64));
  let mut x103: u64 = 0;
  let mut x104: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x103, &mut x104, x102, x96, 0xffffffff00000000);
  let mut x105: u64 = 0;
  let mut x106: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x105, &mut x106, x104, x98, 0xffffffffffffffff);
  let mut x107: u64 = 0;
  let mut x108: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x107, &mut x108, x106, x100, 0xffffffff);
  let mut x109: u64 = 0;
  let mut x110: fiat_p224_u1 = 0;
  fiat_p224_subborrowx_u64(&mut x109, &mut x110, x108, (0x0 as u64), (0x0 as u64));
  let mut x111: u64 = 0;
  fiat_p224_cmovznz_u64(&mut x111, x110, x101, x94);
  let mut x112: u64 = 0;
  fiat_p224_cmovznz_u64(&mut x112, x110, x103, x96);
  let mut x113: u64 = 0;
  fiat_p224_cmovznz_u64(&mut x113, x110, x105, x98);
  let mut x114: u64 = 0;
  fiat_p224_cmovznz_u64(&mut x114, x110, x107, x100);
  out1[0] = x111;
  out1[1] = x112;
  out1[2] = x113;
  out1[3] = x114;
}

/*
 * The function fiat_p224_nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 */
#[inline]
pub fn fiat_p224_nonzero(out1: &mut u64, arg1: &[u64; 4]) -> () {
  let x1: u64 = ((arg1[0]) | ((arg1[1]) | ((arg1[2]) | ((arg1[3]) | (0x0 as u64)))));
  *out1 = x1;
}

/*
 * The function fiat_p224_selectznz is a multi-limb conditional select.
 * Postconditions:
 *   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_p224_selectznz(out1: &mut [u64; 4], arg1: fiat_p224_u1, arg2: &[u64; 4], arg3: &[u64; 4]) -> () {
  let mut x1: u64 = 0;
  fiat_p224_cmovznz_u64(&mut x1, arg1, (arg2[0]), (arg3[0]));
  let mut x2: u64 = 0;
  fiat_p224_cmovznz_u64(&mut x2, arg1, (arg2[1]), (arg3[1]));
  let mut x3: u64 = 0;
  fiat_p224_cmovznz_u64(&mut x3, arg1, (arg2[2]), (arg3[2]));
  let mut x4: u64 = 0;
  fiat_p224_cmovznz_u64(&mut x4, arg1, (arg2[3]), (arg3[3]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
}

/*
 * The function fiat_p224_to_bytes serializes a field element in the Montgomery domain to bytes in little-endian order.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..31]
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0x0], [0x0 ~> 0x0], [0x0 ~> 0x0], [0x0 ~> 0x0]]
 */
#[inline]
pub fn fiat_p224_to_bytes(out1: &mut [u8; 32], arg1: &[u64; 4]) -> () {
  let x1: u64 = (arg1[3]);
  let x2: u64 = (arg1[2]);
  let x3: u64 = (arg1[1]);
  let x4: u64 = (arg1[0]);
  let x5: u64 = (x4 >> 8);
  let x6: u8 = ((x4 & (0xff as u64)) as u8);
  let x7: u64 = (x5 >> 8);
  let x8: u8 = ((x5 & (0xff as u64)) as u8);
  let x9: u64 = (x7 >> 8);
  let x10: u8 = ((x7 & (0xff as u64)) as u8);
  let x11: u64 = (x9 >> 8);
  let x12: u8 = ((x9 & (0xff as u64)) as u8);
  let x13: u64 = (x11 >> 8);
  let x14: u8 = ((x11 & (0xff as u64)) as u8);
  let x15: u64 = (x13 >> 8);
  let x16: u8 = ((x13 & (0xff as u64)) as u8);
  let x17: u8 = ((x15 >> 8) as u8);
  let x18: u8 = ((x15 & (0xff as u64)) as u8);
  let x19: u8 = (x17 & 0xff);
  let x20: u64 = (x3 >> 8);
  let x21: u8 = ((x3 & (0xff as u64)) as u8);
  let x22: u64 = (x20 >> 8);
  let x23: u8 = ((x20 & (0xff as u64)) as u8);
  let x24: u64 = (x22 >> 8);
  let x25: u8 = ((x22 & (0xff as u64)) as u8);
  let x26: u64 = (x24 >> 8);
  let x27: u8 = ((x24 & (0xff as u64)) as u8);
  let x28: u64 = (x26 >> 8);
  let x29: u8 = ((x26 & (0xff as u64)) as u8);
  let x30: u64 = (x28 >> 8);
  let x31: u8 = ((x28 & (0xff as u64)) as u8);
  let x32: u8 = ((x30 >> 8) as u8);
  let x33: u8 = ((x30 & (0xff as u64)) as u8);
  let x34: u8 = (x32 & 0xff);
  let x35: u64 = (x2 >> 8);
  let x36: u8 = ((x2 & (0xff as u64)) as u8);
  let x37: u64 = (x35 >> 8);
  let x38: u8 = ((x35 & (0xff as u64)) as u8);
  let x39: u64 = (x37 >> 8);
  let x40: u8 = ((x37 & (0xff as u64)) as u8);
  let x41: u64 = (x39 >> 8);
  let x42: u8 = ((x39 & (0xff as u64)) as u8);
  let x43: u64 = (x41 >> 8);
  let x44: u8 = ((x41 & (0xff as u64)) as u8);
  let x45: u64 = (x43 >> 8);
  let x46: u8 = ((x43 & (0xff as u64)) as u8);
  let x47: u8 = ((x45 >> 8) as u8);
  let x48: u8 = ((x45 & (0xff as u64)) as u8);
  let x49: u8 = (x47 & 0xff);
  let x50: u64 = (x1 >> 8);
  let x51: u8 = ((x1 & (0xff as u64)) as u8);
  let x52: u64 = (x50 >> 8);
  let x53: u8 = ((x50 & (0xff as u64)) as u8);
  let x54: u8 = ((x52 >> 8) as u8);
  let x55: u8 = ((x52 & (0xff as u64)) as u8);
  let x56: u8 = (x54 & 0xff);
  out1[0] = x6;
  out1[1] = x8;
  out1[2] = x10;
  out1[3] = x12;
  out1[4] = x14;
  out1[5] = x16;
  out1[6] = x18;
  out1[7] = x19;
  out1[8] = x21;
  out1[9] = x23;
  out1[10] = x25;
  out1[11] = x27;
  out1[12] = x29;
  out1[13] = x31;
  out1[14] = x33;
  out1[15] = x34;
  out1[16] = x36;
  out1[17] = x38;
  out1[18] = x40;
  out1[19] = x42;
  out1[20] = x44;
  out1[21] = x46;
  out1[22] = x48;
  out1[23] = x49;
  out1[24] = x51;
  out1[25] = x53;
  out1[26] = x55;
  out1[27] = x56;
  out1[28] = (0x0 as u8);
  out1[29] = (0x0 as u8);
  out1[30] = (0x0 as u8);
  out1[31] = (0x0 as u8);
}

/*
 * The function fiat_p224_from_bytes deserializes a field element in the Montgomery domain from bytes in little-endian order.
 * Preconditions:
 *   0 ≤ bytes_eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = bytes_eval arg1 mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0x0], [0x0 ~> 0x0], [0x0 ~> 0x0], [0x0 ~> 0x0]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffff]]
 */
#[inline]
pub fn fiat_p224_from_bytes(out1: &mut [u64; 4], arg1: &[u8; 32]) -> () {
  let x1: u64 = (((arg1[27]) as u64) << 24);
  let x2: u64 = (((arg1[26]) as u64) << 16);
  let x3: u64 = (((arg1[25]) as u64) << 8);
  let x4: u8 = (arg1[24]);
  let x5: u64 = (((arg1[23]) as u64) << 56);
  let x6: u64 = (((arg1[22]) as u64) << 48);
  let x7: u64 = (((arg1[21]) as u64) << 40);
  let x8: u64 = (((arg1[20]) as u64) << 32);
  let x9: u64 = (((arg1[19]) as u64) << 24);
  let x10: u64 = (((arg1[18]) as u64) << 16);
  let x11: u64 = (((arg1[17]) as u64) << 8);
  let x12: u8 = (arg1[16]);
  let x13: u64 = (((arg1[15]) as u64) << 56);
  let x14: u64 = (((arg1[14]) as u64) << 48);
  let x15: u64 = (((arg1[13]) as u64) << 40);
  let x16: u64 = (((arg1[12]) as u64) << 32);
  let x17: u64 = (((arg1[11]) as u64) << 24);
  let x18: u64 = (((arg1[10]) as u64) << 16);
  let x19: u64 = (((arg1[9]) as u64) << 8);
  let x20: u8 = (arg1[8]);
  let x21: u64 = (((arg1[7]) as u64) << 56);
  let x22: u64 = (((arg1[6]) as u64) << 48);
  let x23: u64 = (((arg1[5]) as u64) << 40);
  let x24: u64 = (((arg1[4]) as u64) << 32);
  let x25: u64 = (((arg1[3]) as u64) << 24);
  let x26: u64 = (((arg1[2]) as u64) << 16);
  let x27: u64 = (((arg1[1]) as u64) << 8);
  let x28: u8 = (arg1[0]);
  let x29: u64 = ((x28 as u64) + (x27 + (x26 + (x25 + (x24 + (x23 + (x22 + x21)))))));
  let x30: u64 = (x29 & 0xffffffffffffffff);
  let x31: u64 = ((x4 as u64) + (x3 + (x2 + x1)));
  let x32: u64 = ((x12 as u64) + (x11 + (x10 + (x9 + (x8 + (x7 + (x6 + x5)))))));
  let x33: u64 = ((x20 as u64) + (x19 + (x18 + (x17 + (x16 + (x15 + (x14 + x13)))))));
  let x34: u64 = (x33 & 0xffffffffffffffff);
  let x35: u64 = (x32 & 0xffffffffffffffff);
  out1[0] = x30;
  out1[1] = x34;
  out1[2] = x35;
  out1[3] = x31;
}

