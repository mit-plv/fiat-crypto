/* Autogenerated: src/ExtractionOCaml/unsaturated_solinas --lang=Rust p521 18 '2^521 - 1' 32 */
/* curve description: p521 */
/* requested operations: (all) */
/* n = 18 (from "18") */
/* s-c = 2^521 - [(1, 1)] (from "2^521 - 1") */
/* machine_wordsize = 32 (from "32") */

/* Computed values: */
/* carry_chain = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0, 1] */

#![allow(unused_parens)]
#[allow(non_camel_case_types)]

pub type fiat_p521_u1 = u8;
pub type fiat_p521_i1 = i8;
pub type fiat_p521_u2 = u8;
pub type fiat_p521_i2 = i8;
pub type fiat_p521_u128 = u128;
pub type fiat_p521_i128 = i128;


/*
 * The function fiat_p521_addcarryx_u28 is an addition with carry.
 * Postconditions:
 *   out1 = (arg1 + arg2 + arg3) mod 2^28
 *   out2 = ⌊(arg1 + arg2 + arg3) / 2^28⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xfffffff]
 *   arg3: [0x0 ~> 0xfffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xfffffff]
 *   out2: [0x0 ~> 0x1]
 */
#[inline]
pub fn fiat_p521_addcarryx_u28(out1: &mut u32, out2: &mut fiat_p521_u1, arg1: fiat_p521_u1, arg2: u32, arg3: u32) -> () {
  let x1: u32 = (((arg1 as u32) + arg2) + arg3);
  let x2: u32 = (x1 & 0xfffffff);
  let x3: fiat_p521_u1 = ((x1 >> 28) as fiat_p521_u1);
  *out1 = x2;
  *out2 = x3;
}

/*
 * The function fiat_p521_subborrowx_u28 is a subtraction with borrow.
 * Postconditions:
 *   out1 = (-arg1 + arg2 + -arg3) mod 2^28
 *   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^28⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xfffffff]
 *   arg3: [0x0 ~> 0xfffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xfffffff]
 *   out2: [0x0 ~> 0x1]
 */
#[inline]
pub fn fiat_p521_subborrowx_u28(out1: &mut u32, out2: &mut fiat_p521_u1, arg1: fiat_p521_u1, arg2: u32, arg3: u32) -> () {
  let x1: i32 = ((((((arg2 as i64) - (arg1 as i64)) as i32) as i64) - (arg3 as i64)) as i32);
  let x2: fiat_p521_i1 = ((x1 >> 28) as fiat_p521_i1);
  let x3: u32 = (((x1 as i64) & (0xfffffff as i64)) as u32);
  *out1 = x3;
  *out2 = (((0x0 as fiat_p521_i2) - (x2 as fiat_p521_i2)) as fiat_p521_u1);
}

/*
 * The function fiat_p521_addcarryx_u29 is an addition with carry.
 * Postconditions:
 *   out1 = (arg1 + arg2 + arg3) mod 2^29
 *   out2 = ⌊(arg1 + arg2 + arg3) / 2^29⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0x1fffffff]
 *   arg3: [0x0 ~> 0x1fffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0x1fffffff]
 *   out2: [0x0 ~> 0x1]
 */
#[inline]
pub fn fiat_p521_addcarryx_u29(out1: &mut u32, out2: &mut fiat_p521_u1, arg1: fiat_p521_u1, arg2: u32, arg3: u32) -> () {
  let x1: u32 = (((arg1 as u32) + arg2) + arg3);
  let x2: u32 = (x1 & 0x1fffffff);
  let x3: fiat_p521_u1 = ((x1 >> 29) as fiat_p521_u1);
  *out1 = x2;
  *out2 = x3;
}

/*
 * The function fiat_p521_subborrowx_u29 is a subtraction with borrow.
 * Postconditions:
 *   out1 = (-arg1 + arg2 + -arg3) mod 2^29
 *   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^29⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0x1fffffff]
 *   arg3: [0x0 ~> 0x1fffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0x1fffffff]
 *   out2: [0x0 ~> 0x1]
 */
#[inline]
pub fn fiat_p521_subborrowx_u29(out1: &mut u32, out2: &mut fiat_p521_u1, arg1: fiat_p521_u1, arg2: u32, arg3: u32) -> () {
  let x1: i32 = ((((((arg2 as i64) - (arg1 as i64)) as i32) as i64) - (arg3 as i64)) as i32);
  let x2: fiat_p521_i1 = ((x1 >> 29) as fiat_p521_i1);
  let x3: u32 = (((x1 as i64) & (0x1fffffff as i64)) as u32);
  *out1 = x3;
  *out2 = (((0x0 as fiat_p521_i2) - (x2 as fiat_p521_i2)) as fiat_p521_u1);
}

/*
 * The function fiat_p521_cmovznz_u32 is a single-word conditional move.
 * Postconditions:
 *   out1 = (if arg1 = 0 then arg2 else arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffff]
 *   arg3: [0x0 ~> 0xffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffff]
 */
#[inline]
pub fn fiat_p521_cmovznz_u32(out1: &mut u32, arg1: fiat_p521_u1, arg2: u32, arg3: u32) -> () {
  let x1: fiat_p521_u1 = (!(!arg1));
  let x2: u32 = ((((((0x0 as fiat_p521_i2) - (x1 as fiat_p521_i2)) as fiat_p521_i1) as i64) & (0xffffffff as i64)) as u32);
  let x3: u32 = ((x2 & arg3) | ((!x2) & arg2));
  *out1 = x3;
}

/*
 * The function fiat_p521_carry_mul multiplies two field elements and reduces the result.
 * Postconditions:
 *   eval out1 mod m = (eval arg1 * eval arg2) mod m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x34cccccb]]
 *   arg2: [[0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x34cccccb]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x11999999]]
 */
#[inline]
pub fn fiat_p521_carry_mul(out1: &mut [u32; 18], arg1: &[u32; 18], arg2: &[u32; 18]) -> () {
  let x1: u64 = (((arg1[17]) as u64) * (((arg2[17]) * (0x2 as u32)) as u64));
  let x2: u64 = (((arg1[17]) as u64) * (((arg2[16]) * (0x2 as u32)) as u64));
  let x3: u64 = (((arg1[17]) as u64) * (((arg2[15]) * (0x2 as u32)) as u64));
  let x4: u64 = (((arg1[17]) as u64) * (((arg2[14]) * (0x2 as u32)) as u64));
  let x5: u64 = (((arg1[17]) as u64) * (((arg2[13]) * (0x2 as u32)) as u64));
  let x6: u64 = (((arg1[17]) as u64) * (((arg2[12]) * (0x2 as u32)) as u64));
  let x7: u64 = (((arg1[17]) as u64) * (((arg2[11]) * (0x2 as u32)) as u64));
  let x8: u64 = (((arg1[17]) as u64) * (((arg2[10]) * (0x2 as u32)) as u64));
  let x9: u64 = (((arg1[17]) as u64) * (((arg2[9]) * (0x2 as u32)) as u64));
  let x10: u64 = (((arg1[17]) as u64) * (((arg2[8]) * (0x2 as u32)) as u64));
  let x11: u64 = (((arg1[17]) as u64) * (((arg2[7]) * (0x2 as u32)) as u64));
  let x12: u64 = (((arg1[17]) as u64) * (((arg2[6]) * (0x2 as u32)) as u64));
  let x13: u64 = (((arg1[17]) as u64) * (((arg2[5]) * (0x2 as u32)) as u64));
  let x14: u64 = (((arg1[17]) as u64) * (((arg2[4]) * (0x2 as u32)) as u64));
  let x15: u64 = (((arg1[17]) as u64) * (((arg2[3]) * (0x2 as u32)) as u64));
  let x16: u64 = (((arg1[17]) as u64) * (((arg2[2]) * (0x2 as u32)) as u64));
  let x17: u64 = (((arg1[17]) as u64) * (((arg2[1]) * (0x2 as u32)) as u64));
  let x18: u64 = (((arg1[16]) as u64) * (((arg2[17]) * (0x2 as u32)) as u64));
  let x19: u64 = (((arg1[16]) as u64) * (((arg2[16]) * (0x2 as u32)) as u64));
  let x20: u64 = (((arg1[16]) as u64) * (((arg2[15]) * (0x2 as u32)) as u64));
  let x21: u64 = (((arg1[16]) as u64) * (((arg2[14]) * (0x2 as u32)) as u64));
  let x22: u64 = (((arg1[16]) as u64) * (((arg2[13]) * (0x2 as u32)) as u64));
  let x23: u64 = (((arg1[16]) as u64) * (((arg2[12]) * (0x2 as u32)) as u64));
  let x24: u64 = (((arg1[16]) as u64) * (((arg2[11]) * (0x2 as u32)) as u64));
  let x25: u64 = (((arg1[16]) as u64) * (((arg2[10]) * (0x2 as u32)) as u64));
  let x26: u64 = (((arg1[16]) as u64) * (((arg2[9]) * (0x2 as u32)) as u64));
  let x27: u64 = (((arg1[16]) as u64) * (((arg2[8]) * (0x2 as u32)) as u64));
  let x28: u64 = (((arg1[16]) as u64) * (((arg2[7]) * (0x2 as u32)) as u64));
  let x29: u64 = (((arg1[16]) as u64) * (((arg2[6]) * (0x2 as u32)) as u64));
  let x30: u64 = (((arg1[16]) as u64) * (((arg2[5]) * (0x2 as u32)) as u64));
  let x31: u64 = (((arg1[16]) as u64) * (((arg2[4]) * (0x2 as u32)) as u64));
  let x32: u64 = (((arg1[16]) as u64) * (((arg2[3]) * (0x2 as u32)) as u64));
  let x33: u64 = (((arg1[16]) as u64) * (((arg2[2]) * (0x2 as u32)) as u64));
  let x34: u64 = (((arg1[15]) as u64) * (((arg2[17]) * (0x2 as u32)) as u64));
  let x35: u64 = (((arg1[15]) as u64) * (((arg2[16]) * (0x2 as u32)) as u64));
  let x36: u64 = (((arg1[15]) as u64) * (((arg2[15]) * (0x2 as u32)) as u64));
  let x37: u64 = (((arg1[15]) as u64) * (((arg2[14]) * (0x2 as u32)) as u64));
  let x38: u64 = (((arg1[15]) as u64) * (((arg2[13]) * (0x2 as u32)) as u64));
  let x39: u64 = (((arg1[15]) as u64) * (((arg2[12]) * (0x2 as u32)) as u64));
  let x40: u64 = (((arg1[15]) as u64) * (((arg2[11]) * (0x2 as u32)) as u64));
  let x41: u64 = (((arg1[15]) as u64) * (((arg2[10]) * (0x2 as u32)) as u64));
  let x42: u64 = (((arg1[15]) as u64) * (((arg2[9]) * (0x2 as u32)) as u64));
  let x43: u64 = (((arg1[15]) as u64) * (((arg2[8]) * (0x2 as u32)) as u64));
  let x44: u64 = (((arg1[15]) as u64) * (((arg2[7]) * (0x2 as u32)) as u64));
  let x45: u64 = (((arg1[15]) as u64) * (((arg2[6]) * (0x2 as u32)) as u64));
  let x46: u64 = (((arg1[15]) as u64) * (((arg2[5]) * (0x2 as u32)) as u64));
  let x47: u64 = (((arg1[15]) as u64) * (((arg2[4]) * (0x2 as u32)) as u64));
  let x48: u64 = (((arg1[15]) as u64) * (((arg2[3]) * (0x2 as u32)) as u64));
  let x49: u64 = (((arg1[14]) as u64) * (((arg2[17]) * (0x2 as u32)) as u64));
  let x50: u64 = (((arg1[14]) as u64) * (((arg2[16]) * (0x2 as u32)) as u64));
  let x51: u64 = (((arg1[14]) as u64) * (((arg2[15]) * (0x2 as u32)) as u64));
  let x52: u64 = (((arg1[14]) as u64) * (((arg2[14]) * (0x2 as u32)) as u64));
  let x53: u64 = (((arg1[14]) as u64) * (((arg2[13]) * (0x2 as u32)) as u64));
  let x54: u64 = (((arg1[14]) as u64) * (((arg2[12]) * (0x2 as u32)) as u64));
  let x55: u64 = (((arg1[14]) as u64) * (((arg2[11]) * (0x2 as u32)) as u64));
  let x56: u64 = (((arg1[14]) as u64) * (((arg2[10]) * (0x2 as u32)) as u64));
  let x57: u64 = (((arg1[14]) as u64) * (((arg2[9]) * (0x2 as u32)) as u64));
  let x58: u64 = (((arg1[14]) as u64) * (((arg2[8]) * (0x2 as u32)) as u64));
  let x59: u64 = (((arg1[14]) as u64) * (((arg2[7]) * (0x2 as u32)) as u64));
  let x60: u64 = (((arg1[14]) as u64) * (((arg2[6]) * (0x2 as u32)) as u64));
  let x61: u64 = (((arg1[14]) as u64) * (((arg2[5]) * (0x2 as u32)) as u64));
  let x62: u64 = (((arg1[14]) as u64) * (((arg2[4]) * (0x2 as u32)) as u64));
  let x63: u64 = (((arg1[13]) as u64) * (((arg2[17]) * (0x2 as u32)) as u64));
  let x64: u64 = (((arg1[13]) as u64) * (((arg2[16]) * (0x2 as u32)) as u64));
  let x65: u64 = (((arg1[13]) as u64) * (((arg2[15]) * (0x2 as u32)) as u64));
  let x66: u64 = (((arg1[13]) as u64) * (((arg2[14]) * (0x2 as u32)) as u64));
  let x67: u64 = (((arg1[13]) as u64) * (((arg2[13]) * (0x2 as u32)) as u64));
  let x68: u64 = (((arg1[13]) as u64) * (((arg2[12]) * (0x2 as u32)) as u64));
  let x69: u64 = (((arg1[13]) as u64) * (((arg2[11]) * (0x2 as u32)) as u64));
  let x70: u64 = (((arg1[13]) as u64) * (((arg2[10]) * (0x2 as u32)) as u64));
  let x71: u64 = (((arg1[13]) as u64) * (((arg2[9]) * (0x2 as u32)) as u64));
  let x72: u64 = (((arg1[13]) as u64) * (((arg2[8]) * (0x2 as u32)) as u64));
  let x73: u64 = (((arg1[13]) as u64) * (((arg2[7]) * (0x2 as u32)) as u64));
  let x74: u64 = (((arg1[13]) as u64) * (((arg2[6]) * (0x2 as u32)) as u64));
  let x75: u64 = (((arg1[13]) as u64) * (((arg2[5]) * (0x2 as u32)) as u64));
  let x76: u64 = (((arg1[12]) as u64) * (((arg2[17]) * (0x2 as u32)) as u64));
  let x77: u64 = (((arg1[12]) as u64) * (((arg2[16]) * (0x2 as u32)) as u64));
  let x78: u64 = (((arg1[12]) as u64) * (((arg2[15]) * (0x2 as u32)) as u64));
  let x79: u64 = (((arg1[12]) as u64) * (((arg2[14]) * (0x2 as u32)) as u64));
  let x80: u64 = (((arg1[12]) as u64) * (((arg2[13]) * (0x2 as u32)) as u64));
  let x81: u64 = (((arg1[12]) as u64) * (((arg2[12]) * (0x2 as u32)) as u64));
  let x82: u64 = (((arg1[12]) as u64) * (((arg2[11]) * (0x2 as u32)) as u64));
  let x83: u64 = (((arg1[12]) as u64) * (((arg2[10]) * (0x2 as u32)) as u64));
  let x84: u64 = (((arg1[12]) as u64) * (((arg2[9]) * (0x2 as u32)) as u64));
  let x85: u64 = (((arg1[12]) as u64) * (((arg2[8]) * (0x2 as u32)) as u64));
  let x86: u64 = (((arg1[12]) as u64) * (((arg2[7]) * (0x2 as u32)) as u64));
  let x87: u64 = (((arg1[12]) as u64) * (((arg2[6]) * (0x2 as u32)) as u64));
  let x88: u64 = (((arg1[11]) as u64) * (((arg2[17]) * (0x2 as u32)) as u64));
  let x89: u64 = (((arg1[11]) as u64) * (((arg2[16]) * (0x2 as u32)) as u64));
  let x90: u64 = (((arg1[11]) as u64) * (((arg2[15]) * (0x2 as u32)) as u64));
  let x91: u64 = (((arg1[11]) as u64) * (((arg2[14]) * (0x2 as u32)) as u64));
  let x92: u64 = (((arg1[11]) as u64) * (((arg2[13]) * (0x2 as u32)) as u64));
  let x93: u64 = (((arg1[11]) as u64) * (((arg2[12]) * (0x2 as u32)) as u64));
  let x94: u64 = (((arg1[11]) as u64) * (((arg2[11]) * (0x2 as u32)) as u64));
  let x95: u64 = (((arg1[11]) as u64) * (((arg2[10]) * (0x2 as u32)) as u64));
  let x96: u64 = (((arg1[11]) as u64) * (((arg2[9]) * (0x2 as u32)) as u64));
  let x97: u64 = (((arg1[11]) as u64) * (((arg2[8]) * (0x2 as u32)) as u64));
  let x98: u64 = (((arg1[11]) as u64) * (((arg2[7]) * (0x2 as u32)) as u64));
  let x99: u64 = (((arg1[10]) as u64) * (((arg2[17]) * (0x2 as u32)) as u64));
  let x100: u64 = (((arg1[10]) as u64) * (((arg2[16]) * (0x2 as u32)) as u64));
  let x101: u64 = (((arg1[10]) as u64) * (((arg2[15]) * (0x2 as u32)) as u64));
  let x102: u64 = (((arg1[10]) as u64) * (((arg2[14]) * (0x2 as u32)) as u64));
  let x103: u64 = (((arg1[10]) as u64) * (((arg2[13]) * (0x2 as u32)) as u64));
  let x104: u64 = (((arg1[10]) as u64) * (((arg2[12]) * (0x2 as u32)) as u64));
  let x105: u64 = (((arg1[10]) as u64) * (((arg2[11]) * (0x2 as u32)) as u64));
  let x106: u64 = (((arg1[10]) as u64) * (((arg2[10]) * (0x2 as u32)) as u64));
  let x107: u64 = (((arg1[10]) as u64) * (((arg2[9]) * (0x2 as u32)) as u64));
  let x108: u64 = (((arg1[10]) as u64) * (((arg2[8]) * (0x2 as u32)) as u64));
  let x109: u64 = (((arg1[9]) as u64) * (((arg2[17]) * (0x2 as u32)) as u64));
  let x110: u64 = (((arg1[9]) as u64) * (((arg2[16]) * (0x2 as u32)) as u64));
  let x111: u64 = (((arg1[9]) as u64) * (((arg2[15]) * (0x2 as u32)) as u64));
  let x112: u64 = (((arg1[9]) as u64) * (((arg2[14]) * (0x2 as u32)) as u64));
  let x113: u64 = (((arg1[9]) as u64) * (((arg2[13]) * (0x2 as u32)) as u64));
  let x114: u64 = (((arg1[9]) as u64) * (((arg2[12]) * (0x2 as u32)) as u64));
  let x115: u64 = (((arg1[9]) as u64) * (((arg2[11]) * (0x2 as u32)) as u64));
  let x116: u64 = (((arg1[9]) as u64) * (((arg2[10]) * (0x2 as u32)) as u64));
  let x117: u64 = (((arg1[9]) as u64) * (((arg2[9]) * (0x2 as u32)) as u64));
  let x118: u64 = (((arg1[8]) as u64) * (((arg2[17]) * (0x2 as u32)) as u64));
  let x119: u64 = (((arg1[8]) as u64) * (((arg2[16]) * (0x2 as u32)) as u64));
  let x120: u64 = (((arg1[8]) as u64) * (((arg2[15]) * (0x2 as u32)) as u64));
  let x121: u64 = (((arg1[8]) as u64) * (((arg2[14]) * (0x2 as u32)) as u64));
  let x122: u64 = (((arg1[8]) as u64) * (((arg2[13]) * (0x2 as u32)) as u64));
  let x123: u64 = (((arg1[8]) as u64) * (((arg2[12]) * (0x2 as u32)) as u64));
  let x124: u64 = (((arg1[8]) as u64) * (((arg2[11]) * (0x2 as u32)) as u64));
  let x125: u64 = (((arg1[8]) as u64) * (((arg2[10]) * (0x2 as u32)) as u64));
  let x126: u64 = (((arg1[7]) as u64) * (((arg2[17]) * (0x2 as u32)) as u64));
  let x127: u64 = (((arg1[7]) as u64) * (((arg2[16]) * (0x2 as u32)) as u64));
  let x128: u64 = (((arg1[7]) as u64) * (((arg2[15]) * (0x2 as u32)) as u64));
  let x129: u64 = (((arg1[7]) as u64) * (((arg2[14]) * (0x2 as u32)) as u64));
  let x130: u64 = (((arg1[7]) as u64) * (((arg2[13]) * (0x2 as u32)) as u64));
  let x131: u64 = (((arg1[7]) as u64) * (((arg2[12]) * (0x2 as u32)) as u64));
  let x132: u64 = (((arg1[7]) as u64) * (((arg2[11]) * (0x2 as u32)) as u64));
  let x133: u64 = (((arg1[6]) as u64) * (((arg2[17]) * (0x2 as u32)) as u64));
  let x134: u64 = (((arg1[6]) as u64) * (((arg2[16]) * (0x2 as u32)) as u64));
  let x135: u64 = (((arg1[6]) as u64) * (((arg2[15]) * (0x2 as u32)) as u64));
  let x136: u64 = (((arg1[6]) as u64) * (((arg2[14]) * (0x2 as u32)) as u64));
  let x137: u64 = (((arg1[6]) as u64) * (((arg2[13]) * (0x2 as u32)) as u64));
  let x138: u64 = (((arg1[6]) as u64) * (((arg2[12]) * (0x2 as u32)) as u64));
  let x139: u64 = (((arg1[5]) as u64) * (((arg2[17]) * (0x2 as u32)) as u64));
  let x140: u64 = (((arg1[5]) as u64) * (((arg2[16]) * (0x2 as u32)) as u64));
  let x141: u64 = (((arg1[5]) as u64) * (((arg2[15]) * (0x2 as u32)) as u64));
  let x142: u64 = (((arg1[5]) as u64) * (((arg2[14]) * (0x2 as u32)) as u64));
  let x143: u64 = (((arg1[5]) as u64) * (((arg2[13]) * (0x2 as u32)) as u64));
  let x144: u64 = (((arg1[4]) as u64) * (((arg2[17]) * (0x2 as u32)) as u64));
  let x145: u64 = (((arg1[4]) as u64) * (((arg2[16]) * (0x2 as u32)) as u64));
  let x146: u64 = (((arg1[4]) as u64) * (((arg2[15]) * (0x2 as u32)) as u64));
  let x147: u64 = (((arg1[4]) as u64) * (((arg2[14]) * (0x2 as u32)) as u64));
  let x148: u64 = (((arg1[3]) as u64) * (((arg2[17]) * (0x2 as u32)) as u64));
  let x149: u64 = (((arg1[3]) as u64) * (((arg2[16]) * (0x2 as u32)) as u64));
  let x150: u64 = (((arg1[3]) as u64) * (((arg2[15]) * (0x2 as u32)) as u64));
  let x151: u64 = (((arg1[2]) as u64) * (((arg2[17]) * (0x2 as u32)) as u64));
  let x152: u64 = (((arg1[2]) as u64) * (((arg2[16]) * (0x2 as u32)) as u64));
  let x153: u64 = (((arg1[1]) as u64) * (((arg2[17]) * (0x2 as u32)) as u64));
  let x154: u64 = (((arg1[17]) as u64) * ((arg2[0]) as u64));
  let x155: u64 = (((arg1[16]) as u64) * ((arg2[1]) as u64));
  let x156: u64 = (((arg1[16]) as u64) * ((arg2[0]) as u64));
  let x157: u64 = (((arg1[15]) as u64) * ((arg2[2]) as u64));
  let x158: u64 = (((arg1[15]) as u64) * ((arg2[1]) as u64));
  let x159: u64 = (((arg1[15]) as u64) * ((arg2[0]) as u64));
  let x160: u64 = (((arg1[14]) as u64) * ((arg2[3]) as u64));
  let x161: u64 = (((arg1[14]) as u64) * ((arg2[2]) as u64));
  let x162: u64 = (((arg1[14]) as u64) * ((arg2[1]) as u64));
  let x163: u64 = (((arg1[14]) as u64) * ((arg2[0]) as u64));
  let x164: u64 = (((arg1[13]) as u64) * ((arg2[4]) as u64));
  let x165: u64 = (((arg1[13]) as u64) * ((arg2[3]) as u64));
  let x166: u64 = (((arg1[13]) as u64) * ((arg2[2]) as u64));
  let x167: u64 = (((arg1[13]) as u64) * ((arg2[1]) as u64));
  let x168: u64 = (((arg1[13]) as u64) * ((arg2[0]) as u64));
  let x169: u64 = (((arg1[12]) as u64) * ((arg2[5]) as u64));
  let x170: u64 = (((arg1[12]) as u64) * ((arg2[4]) as u64));
  let x171: u64 = (((arg1[12]) as u64) * ((arg2[3]) as u64));
  let x172: u64 = (((arg1[12]) as u64) * ((arg2[2]) as u64));
  let x173: u64 = (((arg1[12]) as u64) * ((arg2[1]) as u64));
  let x174: u64 = (((arg1[12]) as u64) * ((arg2[0]) as u64));
  let x175: u64 = (((arg1[11]) as u64) * ((arg2[6]) as u64));
  let x176: u64 = (((arg1[11]) as u64) * ((arg2[5]) as u64));
  let x177: u64 = (((arg1[11]) as u64) * ((arg2[4]) as u64));
  let x178: u64 = (((arg1[11]) as u64) * ((arg2[3]) as u64));
  let x179: u64 = (((arg1[11]) as u64) * ((arg2[2]) as u64));
  let x180: u64 = (((arg1[11]) as u64) * ((arg2[1]) as u64));
  let x181: u64 = (((arg1[11]) as u64) * ((arg2[0]) as u64));
  let x182: u64 = (((arg1[10]) as u64) * ((arg2[7]) as u64));
  let x183: u64 = (((arg1[10]) as u64) * ((arg2[6]) as u64));
  let x184: u64 = (((arg1[10]) as u64) * ((arg2[5]) as u64));
  let x185: u64 = (((arg1[10]) as u64) * ((arg2[4]) as u64));
  let x186: u64 = (((arg1[10]) as u64) * ((arg2[3]) as u64));
  let x187: u64 = (((arg1[10]) as u64) * ((arg2[2]) as u64));
  let x188: u64 = (((arg1[10]) as u64) * ((arg2[1]) as u64));
  let x189: u64 = (((arg1[10]) as u64) * ((arg2[0]) as u64));
  let x190: u64 = (((arg1[9]) as u64) * ((arg2[8]) as u64));
  let x191: u64 = (((arg1[9]) as u64) * ((arg2[7]) as u64));
  let x192: u64 = (((arg1[9]) as u64) * ((arg2[6]) as u64));
  let x193: u64 = (((arg1[9]) as u64) * ((arg2[5]) as u64));
  let x194: u64 = (((arg1[9]) as u64) * ((arg2[4]) as u64));
  let x195: u64 = (((arg1[9]) as u64) * ((arg2[3]) as u64));
  let x196: u64 = (((arg1[9]) as u64) * ((arg2[2]) as u64));
  let x197: u64 = (((arg1[9]) as u64) * ((arg2[1]) as u64));
  let x198: u64 = (((arg1[9]) as u64) * ((arg2[0]) as u64));
  let x199: u64 = (((arg1[8]) as u64) * ((arg2[9]) as u64));
  let x200: u64 = (((arg1[8]) as u64) * ((arg2[8]) as u64));
  let x201: u64 = (((arg1[8]) as u64) * ((arg2[7]) as u64));
  let x202: u64 = (((arg1[8]) as u64) * ((arg2[6]) as u64));
  let x203: u64 = (((arg1[8]) as u64) * ((arg2[5]) as u64));
  let x204: u64 = (((arg1[8]) as u64) * ((arg2[4]) as u64));
  let x205: u64 = (((arg1[8]) as u64) * ((arg2[3]) as u64));
  let x206: u64 = (((arg1[8]) as u64) * ((arg2[2]) as u64));
  let x207: u64 = (((arg1[8]) as u64) * ((arg2[1]) as u64));
  let x208: u64 = (((arg1[8]) as u64) * ((arg2[0]) as u64));
  let x209: u64 = (((arg1[7]) as u64) * ((arg2[10]) as u64));
  let x210: u64 = (((arg1[7]) as u64) * ((arg2[9]) as u64));
  let x211: u64 = (((arg1[7]) as u64) * ((arg2[8]) as u64));
  let x212: u64 = (((arg1[7]) as u64) * ((arg2[7]) as u64));
  let x213: u64 = (((arg1[7]) as u64) * ((arg2[6]) as u64));
  let x214: u64 = (((arg1[7]) as u64) * ((arg2[5]) as u64));
  let x215: u64 = (((arg1[7]) as u64) * ((arg2[4]) as u64));
  let x216: u64 = (((arg1[7]) as u64) * ((arg2[3]) as u64));
  let x217: u64 = (((arg1[7]) as u64) * ((arg2[2]) as u64));
  let x218: u64 = (((arg1[7]) as u64) * ((arg2[1]) as u64));
  let x219: u64 = (((arg1[7]) as u64) * ((arg2[0]) as u64));
  let x220: u64 = (((arg1[6]) as u64) * ((arg2[11]) as u64));
  let x221: u64 = (((arg1[6]) as u64) * ((arg2[10]) as u64));
  let x222: u64 = (((arg1[6]) as u64) * ((arg2[9]) as u64));
  let x223: u64 = (((arg1[6]) as u64) * ((arg2[8]) as u64));
  let x224: u64 = (((arg1[6]) as u64) * ((arg2[7]) as u64));
  let x225: u64 = (((arg1[6]) as u64) * ((arg2[6]) as u64));
  let x226: u64 = (((arg1[6]) as u64) * ((arg2[5]) as u64));
  let x227: u64 = (((arg1[6]) as u64) * ((arg2[4]) as u64));
  let x228: u64 = (((arg1[6]) as u64) * ((arg2[3]) as u64));
  let x229: u64 = (((arg1[6]) as u64) * ((arg2[2]) as u64));
  let x230: u64 = (((arg1[6]) as u64) * ((arg2[1]) as u64));
  let x231: u64 = (((arg1[6]) as u64) * ((arg2[0]) as u64));
  let x232: u64 = (((arg1[5]) as u64) * ((arg2[12]) as u64));
  let x233: u64 = (((arg1[5]) as u64) * ((arg2[11]) as u64));
  let x234: u64 = (((arg1[5]) as u64) * ((arg2[10]) as u64));
  let x235: u64 = (((arg1[5]) as u64) * ((arg2[9]) as u64));
  let x236: u64 = (((arg1[5]) as u64) * ((arg2[8]) as u64));
  let x237: u64 = (((arg1[5]) as u64) * ((arg2[7]) as u64));
  let x238: u64 = (((arg1[5]) as u64) * ((arg2[6]) as u64));
  let x239: u64 = (((arg1[5]) as u64) * ((arg2[5]) as u64));
  let x240: u64 = (((arg1[5]) as u64) * ((arg2[4]) as u64));
  let x241: u64 = (((arg1[5]) as u64) * ((arg2[3]) as u64));
  let x242: u64 = (((arg1[5]) as u64) * ((arg2[2]) as u64));
  let x243: u64 = (((arg1[5]) as u64) * ((arg2[1]) as u64));
  let x244: u64 = (((arg1[5]) as u64) * ((arg2[0]) as u64));
  let x245: u64 = (((arg1[4]) as u64) * ((arg2[13]) as u64));
  let x246: u64 = (((arg1[4]) as u64) * ((arg2[12]) as u64));
  let x247: u64 = (((arg1[4]) as u64) * ((arg2[11]) as u64));
  let x248: u64 = (((arg1[4]) as u64) * ((arg2[10]) as u64));
  let x249: u64 = (((arg1[4]) as u64) * ((arg2[9]) as u64));
  let x250: u64 = (((arg1[4]) as u64) * ((arg2[8]) as u64));
  let x251: u64 = (((arg1[4]) as u64) * ((arg2[7]) as u64));
  let x252: u64 = (((arg1[4]) as u64) * ((arg2[6]) as u64));
  let x253: u64 = (((arg1[4]) as u64) * ((arg2[5]) as u64));
  let x254: u64 = (((arg1[4]) as u64) * ((arg2[4]) as u64));
  let x255: u64 = (((arg1[4]) as u64) * ((arg2[3]) as u64));
  let x256: u64 = (((arg1[4]) as u64) * ((arg2[2]) as u64));
  let x257: u64 = (((arg1[4]) as u64) * ((arg2[1]) as u64));
  let x258: u64 = (((arg1[4]) as u64) * ((arg2[0]) as u64));
  let x259: u64 = (((arg1[3]) as u64) * ((arg2[14]) as u64));
  let x260: u64 = (((arg1[3]) as u64) * ((arg2[13]) as u64));
  let x261: u64 = (((arg1[3]) as u64) * ((arg2[12]) as u64));
  let x262: u64 = (((arg1[3]) as u64) * ((arg2[11]) as u64));
  let x263: u64 = (((arg1[3]) as u64) * ((arg2[10]) as u64));
  let x264: u64 = (((arg1[3]) as u64) * ((arg2[9]) as u64));
  let x265: u64 = (((arg1[3]) as u64) * ((arg2[8]) as u64));
  let x266: u64 = (((arg1[3]) as u64) * ((arg2[7]) as u64));
  let x267: u64 = (((arg1[3]) as u64) * ((arg2[6]) as u64));
  let x268: u64 = (((arg1[3]) as u64) * ((arg2[5]) as u64));
  let x269: u64 = (((arg1[3]) as u64) * ((arg2[4]) as u64));
  let x270: u64 = (((arg1[3]) as u64) * ((arg2[3]) as u64));
  let x271: u64 = (((arg1[3]) as u64) * ((arg2[2]) as u64));
  let x272: u64 = (((arg1[3]) as u64) * ((arg2[1]) as u64));
  let x273: u64 = (((arg1[3]) as u64) * ((arg2[0]) as u64));
  let x274: u64 = (((arg1[2]) as u64) * ((arg2[15]) as u64));
  let x275: u64 = (((arg1[2]) as u64) * ((arg2[14]) as u64));
  let x276: u64 = (((arg1[2]) as u64) * ((arg2[13]) as u64));
  let x277: u64 = (((arg1[2]) as u64) * ((arg2[12]) as u64));
  let x278: u64 = (((arg1[2]) as u64) * ((arg2[11]) as u64));
  let x279: u64 = (((arg1[2]) as u64) * ((arg2[10]) as u64));
  let x280: u64 = (((arg1[2]) as u64) * ((arg2[9]) as u64));
  let x281: u64 = (((arg1[2]) as u64) * ((arg2[8]) as u64));
  let x282: u64 = (((arg1[2]) as u64) * ((arg2[7]) as u64));
  let x283: u64 = (((arg1[2]) as u64) * ((arg2[6]) as u64));
  let x284: u64 = (((arg1[2]) as u64) * ((arg2[5]) as u64));
  let x285: u64 = (((arg1[2]) as u64) * ((arg2[4]) as u64));
  let x286: u64 = (((arg1[2]) as u64) * ((arg2[3]) as u64));
  let x287: u64 = (((arg1[2]) as u64) * ((arg2[2]) as u64));
  let x288: u64 = (((arg1[2]) as u64) * ((arg2[1]) as u64));
  let x289: u64 = (((arg1[2]) as u64) * ((arg2[0]) as u64));
  let x290: u64 = (((arg1[1]) as u64) * ((arg2[16]) as u64));
  let x291: u64 = (((arg1[1]) as u64) * ((arg2[15]) as u64));
  let x292: u64 = (((arg1[1]) as u64) * ((arg2[14]) as u64));
  let x293: u64 = (((arg1[1]) as u64) * ((arg2[13]) as u64));
  let x294: u64 = (((arg1[1]) as u64) * ((arg2[12]) as u64));
  let x295: u64 = (((arg1[1]) as u64) * ((arg2[11]) as u64));
  let x296: u64 = (((arg1[1]) as u64) * ((arg2[10]) as u64));
  let x297: u64 = (((arg1[1]) as u64) * ((arg2[9]) as u64));
  let x298: u64 = (((arg1[1]) as u64) * ((arg2[8]) as u64));
  let x299: u64 = (((arg1[1]) as u64) * ((arg2[7]) as u64));
  let x300: u64 = (((arg1[1]) as u64) * ((arg2[6]) as u64));
  let x301: u64 = (((arg1[1]) as u64) * ((arg2[5]) as u64));
  let x302: u64 = (((arg1[1]) as u64) * ((arg2[4]) as u64));
  let x303: u64 = (((arg1[1]) as u64) * ((arg2[3]) as u64));
  let x304: u64 = (((arg1[1]) as u64) * ((arg2[2]) as u64));
  let x305: u64 = (((arg1[1]) as u64) * ((arg2[1]) as u64));
  let x306: u64 = (((arg1[1]) as u64) * ((arg2[0]) as u64));
  let x307: u64 = (((arg1[0]) as u64) * ((arg2[17]) as u64));
  let x308: u64 = (((arg1[0]) as u64) * ((arg2[16]) as u64));
  let x309: u64 = (((arg1[0]) as u64) * ((arg2[15]) as u64));
  let x310: u64 = (((arg1[0]) as u64) * ((arg2[14]) as u64));
  let x311: u64 = (((arg1[0]) as u64) * ((arg2[13]) as u64));
  let x312: u64 = (((arg1[0]) as u64) * ((arg2[12]) as u64));
  let x313: u64 = (((arg1[0]) as u64) * ((arg2[11]) as u64));
  let x314: u64 = (((arg1[0]) as u64) * ((arg2[10]) as u64));
  let x315: u64 = (((arg1[0]) as u64) * ((arg2[9]) as u64));
  let x316: u64 = (((arg1[0]) as u64) * ((arg2[8]) as u64));
  let x317: u64 = (((arg1[0]) as u64) * ((arg2[7]) as u64));
  let x318: u64 = (((arg1[0]) as u64) * ((arg2[6]) as u64));
  let x319: u64 = (((arg1[0]) as u64) * ((arg2[5]) as u64));
  let x320: u64 = (((arg1[0]) as u64) * ((arg2[4]) as u64));
  let x321: u64 = (((arg1[0]) as u64) * ((arg2[3]) as u64));
  let x322: u64 = (((arg1[0]) as u64) * ((arg2[2]) as u64));
  let x323: u64 = (((arg1[0]) as u64) * ((arg2[1]) as u64));
  let x324: u64 = (((arg1[0]) as u64) * ((arg2[0]) as u64));
  let x325: fiat_p521_u128 = ((x324 as fiat_p521_u128) + ((x153 as fiat_p521_u128) + ((x152 as fiat_p521_u128) + ((x150 as fiat_p521_u128) + ((x147 as fiat_p521_u128) + ((x143 as fiat_p521_u128) + ((x138 as fiat_p521_u128) + ((x132 as fiat_p521_u128) + ((x125 as fiat_p521_u128) + ((x117 as fiat_p521_u128) + ((x108 as fiat_p521_u128) + ((x98 as fiat_p521_u128) + ((x87 as fiat_p521_u128) + ((x75 as fiat_p521_u128) + ((x62 as fiat_p521_u128) + ((x48 + (x33 + x17)) as fiat_p521_u128))))))))))))))));
  let x326: u64 = ((x325 >> 29) as u64);
  let x327: u32 = ((x325 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x328: fiat_p521_u128 = ((x307 as fiat_p521_u128) + ((x290 as fiat_p521_u128) + ((x274 as fiat_p521_u128) + ((x259 as fiat_p521_u128) + ((x245 as fiat_p521_u128) + ((x232 as fiat_p521_u128) + ((x220 as fiat_p521_u128) + ((x209 as fiat_p521_u128) + ((x199 as fiat_p521_u128) + ((x190 as fiat_p521_u128) + ((x182 as fiat_p521_u128) + ((x175 as fiat_p521_u128) + ((x169 + (x164 + (x160 + (x157 + (x155 + x154))))) as fiat_p521_u128)))))))))))));
  let x329: fiat_p521_u128 = ((x308 as fiat_p521_u128) + ((x291 as fiat_p521_u128) + ((x275 as fiat_p521_u128) + ((x260 as fiat_p521_u128) + ((x246 as fiat_p521_u128) + ((x233 as fiat_p521_u128) + ((x221 as fiat_p521_u128) + ((x210 as fiat_p521_u128) + ((x200 as fiat_p521_u128) + ((x191 as fiat_p521_u128) + ((x183 as fiat_p521_u128) + ((x176 as fiat_p521_u128) + ((x170 + (x165 + (x161 + (x158 + (x156 + x1))))) as fiat_p521_u128)))))))))))));
  let x330: fiat_p521_u128 = ((x309 as fiat_p521_u128) + ((x292 as fiat_p521_u128) + ((x276 as fiat_p521_u128) + ((x261 as fiat_p521_u128) + ((x247 as fiat_p521_u128) + ((x234 as fiat_p521_u128) + ((x222 as fiat_p521_u128) + ((x211 as fiat_p521_u128) + ((x201 as fiat_p521_u128) + ((x192 as fiat_p521_u128) + ((x184 as fiat_p521_u128) + ((x177 as fiat_p521_u128) + ((x171 as fiat_p521_u128) + ((x166 + (x162 + (x159 + (x18 + x2)))) as fiat_p521_u128))))))))))))));
  let x331: fiat_p521_u128 = ((x310 as fiat_p521_u128) + ((x293 as fiat_p521_u128) + ((x277 as fiat_p521_u128) + ((x262 as fiat_p521_u128) + ((x248 as fiat_p521_u128) + ((x235 as fiat_p521_u128) + ((x223 as fiat_p521_u128) + ((x212 as fiat_p521_u128) + ((x202 as fiat_p521_u128) + ((x193 as fiat_p521_u128) + ((x185 as fiat_p521_u128) + ((x178 as fiat_p521_u128) + ((x172 as fiat_p521_u128) + ((x167 as fiat_p521_u128) + ((x163 + (x34 + (x19 + x3))) as fiat_p521_u128)))))))))))))));
  let x332: fiat_p521_u128 = ((x311 as fiat_p521_u128) + ((x294 as fiat_p521_u128) + ((x278 as fiat_p521_u128) + ((x263 as fiat_p521_u128) + ((x249 as fiat_p521_u128) + ((x236 as fiat_p521_u128) + ((x224 as fiat_p521_u128) + ((x213 as fiat_p521_u128) + ((x203 as fiat_p521_u128) + ((x194 as fiat_p521_u128) + ((x186 as fiat_p521_u128) + ((x179 as fiat_p521_u128) + ((x173 as fiat_p521_u128) + ((x168 as fiat_p521_u128) + ((x49 as fiat_p521_u128) + ((x35 + (x20 + x4)) as fiat_p521_u128))))))))))))))));
  let x333: fiat_p521_u128 = ((x312 as fiat_p521_u128) + ((x295 as fiat_p521_u128) + ((x279 as fiat_p521_u128) + ((x264 as fiat_p521_u128) + ((x250 as fiat_p521_u128) + ((x237 as fiat_p521_u128) + ((x225 as fiat_p521_u128) + ((x214 as fiat_p521_u128) + ((x204 as fiat_p521_u128) + ((x195 as fiat_p521_u128) + ((x187 as fiat_p521_u128) + ((x180 as fiat_p521_u128) + ((x174 as fiat_p521_u128) + ((x63 as fiat_p521_u128) + ((x50 as fiat_p521_u128) + ((x36 + (x21 + x5)) as fiat_p521_u128))))))))))))))));
  let x334: fiat_p521_u128 = ((x313 as fiat_p521_u128) + ((x296 as fiat_p521_u128) + ((x280 as fiat_p521_u128) + ((x265 as fiat_p521_u128) + ((x251 as fiat_p521_u128) + ((x238 as fiat_p521_u128) + ((x226 as fiat_p521_u128) + ((x215 as fiat_p521_u128) + ((x205 as fiat_p521_u128) + ((x196 as fiat_p521_u128) + ((x188 as fiat_p521_u128) + ((x181 as fiat_p521_u128) + ((x76 as fiat_p521_u128) + ((x64 as fiat_p521_u128) + ((x51 as fiat_p521_u128) + ((x37 + (x22 + x6)) as fiat_p521_u128))))))))))))))));
  let x335: fiat_p521_u128 = ((x314 as fiat_p521_u128) + ((x297 as fiat_p521_u128) + ((x281 as fiat_p521_u128) + ((x266 as fiat_p521_u128) + ((x252 as fiat_p521_u128) + ((x239 as fiat_p521_u128) + ((x227 as fiat_p521_u128) + ((x216 as fiat_p521_u128) + ((x206 as fiat_p521_u128) + ((x197 as fiat_p521_u128) + ((x189 as fiat_p521_u128) + ((x88 as fiat_p521_u128) + ((x77 as fiat_p521_u128) + ((x65 as fiat_p521_u128) + ((x52 as fiat_p521_u128) + ((x38 + (x23 + x7)) as fiat_p521_u128))))))))))))))));
  let x336: fiat_p521_u128 = ((x315 as fiat_p521_u128) + ((x298 as fiat_p521_u128) + ((x282 as fiat_p521_u128) + ((x267 as fiat_p521_u128) + ((x253 as fiat_p521_u128) + ((x240 as fiat_p521_u128) + ((x228 as fiat_p521_u128) + ((x217 as fiat_p521_u128) + ((x207 as fiat_p521_u128) + ((x198 as fiat_p521_u128) + ((x99 as fiat_p521_u128) + ((x89 as fiat_p521_u128) + ((x78 as fiat_p521_u128) + ((x66 as fiat_p521_u128) + ((x53 as fiat_p521_u128) + ((x39 + (x24 + x8)) as fiat_p521_u128))))))))))))))));
  let x337: fiat_p521_u128 = ((x316 as fiat_p521_u128) + ((x299 as fiat_p521_u128) + ((x283 as fiat_p521_u128) + ((x268 as fiat_p521_u128) + ((x254 as fiat_p521_u128) + ((x241 as fiat_p521_u128) + ((x229 as fiat_p521_u128) + ((x218 as fiat_p521_u128) + ((x208 as fiat_p521_u128) + ((x109 as fiat_p521_u128) + ((x100 as fiat_p521_u128) + ((x90 as fiat_p521_u128) + ((x79 as fiat_p521_u128) + ((x67 as fiat_p521_u128) + ((x54 as fiat_p521_u128) + ((x40 + (x25 + x9)) as fiat_p521_u128))))))))))))))));
  let x338: fiat_p521_u128 = ((x317 as fiat_p521_u128) + ((x300 as fiat_p521_u128) + ((x284 as fiat_p521_u128) + ((x269 as fiat_p521_u128) + ((x255 as fiat_p521_u128) + ((x242 as fiat_p521_u128) + ((x230 as fiat_p521_u128) + ((x219 as fiat_p521_u128) + ((x118 as fiat_p521_u128) + ((x110 as fiat_p521_u128) + ((x101 as fiat_p521_u128) + ((x91 as fiat_p521_u128) + ((x80 as fiat_p521_u128) + ((x68 as fiat_p521_u128) + ((x55 as fiat_p521_u128) + ((x41 + (x26 + x10)) as fiat_p521_u128))))))))))))))));
  let x339: fiat_p521_u128 = ((x318 as fiat_p521_u128) + ((x301 as fiat_p521_u128) + ((x285 as fiat_p521_u128) + ((x270 as fiat_p521_u128) + ((x256 as fiat_p521_u128) + ((x243 as fiat_p521_u128) + ((x231 as fiat_p521_u128) + ((x126 as fiat_p521_u128) + ((x119 as fiat_p521_u128) + ((x111 as fiat_p521_u128) + ((x102 as fiat_p521_u128) + ((x92 as fiat_p521_u128) + ((x81 as fiat_p521_u128) + ((x69 as fiat_p521_u128) + ((x56 as fiat_p521_u128) + ((x42 + (x27 + x11)) as fiat_p521_u128))))))))))))))));
  let x340: fiat_p521_u128 = ((x319 as fiat_p521_u128) + ((x302 as fiat_p521_u128) + ((x286 as fiat_p521_u128) + ((x271 as fiat_p521_u128) + ((x257 as fiat_p521_u128) + ((x244 as fiat_p521_u128) + ((x133 as fiat_p521_u128) + ((x127 as fiat_p521_u128) + ((x120 as fiat_p521_u128) + ((x112 as fiat_p521_u128) + ((x103 as fiat_p521_u128) + ((x93 as fiat_p521_u128) + ((x82 as fiat_p521_u128) + ((x70 as fiat_p521_u128) + ((x57 as fiat_p521_u128) + ((x43 + (x28 + x12)) as fiat_p521_u128))))))))))))))));
  let x341: fiat_p521_u128 = ((x320 as fiat_p521_u128) + ((x303 as fiat_p521_u128) + ((x287 as fiat_p521_u128) + ((x272 as fiat_p521_u128) + ((x258 as fiat_p521_u128) + ((x139 as fiat_p521_u128) + ((x134 as fiat_p521_u128) + ((x128 as fiat_p521_u128) + ((x121 as fiat_p521_u128) + ((x113 as fiat_p521_u128) + ((x104 as fiat_p521_u128) + ((x94 as fiat_p521_u128) + ((x83 as fiat_p521_u128) + ((x71 as fiat_p521_u128) + ((x58 as fiat_p521_u128) + ((x44 + (x29 + x13)) as fiat_p521_u128))))))))))))))));
  let x342: fiat_p521_u128 = ((x321 as fiat_p521_u128) + ((x304 as fiat_p521_u128) + ((x288 as fiat_p521_u128) + ((x273 as fiat_p521_u128) + ((x144 as fiat_p521_u128) + ((x140 as fiat_p521_u128) + ((x135 as fiat_p521_u128) + ((x129 as fiat_p521_u128) + ((x122 as fiat_p521_u128) + ((x114 as fiat_p521_u128) + ((x105 as fiat_p521_u128) + ((x95 as fiat_p521_u128) + ((x84 as fiat_p521_u128) + ((x72 as fiat_p521_u128) + ((x59 as fiat_p521_u128) + ((x45 + (x30 + x14)) as fiat_p521_u128))))))))))))))));
  let x343: fiat_p521_u128 = ((x322 as fiat_p521_u128) + ((x305 as fiat_p521_u128) + ((x289 as fiat_p521_u128) + ((x148 as fiat_p521_u128) + ((x145 as fiat_p521_u128) + ((x141 as fiat_p521_u128) + ((x136 as fiat_p521_u128) + ((x130 as fiat_p521_u128) + ((x123 as fiat_p521_u128) + ((x115 as fiat_p521_u128) + ((x106 as fiat_p521_u128) + ((x96 as fiat_p521_u128) + ((x85 as fiat_p521_u128) + ((x73 as fiat_p521_u128) + ((x60 as fiat_p521_u128) + ((x46 + (x31 + x15)) as fiat_p521_u128))))))))))))))));
  let x344: fiat_p521_u128 = ((x323 as fiat_p521_u128) + ((x306 as fiat_p521_u128) + ((x151 as fiat_p521_u128) + ((x149 as fiat_p521_u128) + ((x146 as fiat_p521_u128) + ((x142 as fiat_p521_u128) + ((x137 as fiat_p521_u128) + ((x131 as fiat_p521_u128) + ((x124 as fiat_p521_u128) + ((x116 as fiat_p521_u128) + ((x107 as fiat_p521_u128) + ((x97 as fiat_p521_u128) + ((x86 as fiat_p521_u128) + ((x74 as fiat_p521_u128) + ((x61 as fiat_p521_u128) + ((x47 + (x32 + x16)) as fiat_p521_u128))))))))))))))));
  let x345: fiat_p521_u128 = ((x326 as fiat_p521_u128) + x344);
  let x346: u64 = ((x345 >> 29) as u64);
  let x347: u32 = ((x345 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x348: fiat_p521_u128 = ((x346 as fiat_p521_u128) + x343);
  let x349: u64 = ((x348 >> 29) as u64);
  let x350: u32 = ((x348 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x351: fiat_p521_u128 = ((x349 as fiat_p521_u128) + x342);
  let x352: u64 = ((x351 >> 29) as u64);
  let x353: u32 = ((x351 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x354: fiat_p521_u128 = ((x352 as fiat_p521_u128) + x341);
  let x355: u64 = ((x354 >> 29) as u64);
  let x356: u32 = ((x354 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x357: fiat_p521_u128 = ((x355 as fiat_p521_u128) + x340);
  let x358: u64 = ((x357 >> 29) as u64);
  let x359: u32 = ((x357 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x360: fiat_p521_u128 = ((x358 as fiat_p521_u128) + x339);
  let x361: u64 = ((x360 >> 29) as u64);
  let x362: u32 = ((x360 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x363: fiat_p521_u128 = ((x361 as fiat_p521_u128) + x338);
  let x364: u64 = ((x363 >> 29) as u64);
  let x365: u32 = ((x363 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x366: fiat_p521_u128 = ((x364 as fiat_p521_u128) + x337);
  let x367: u64 = ((x366 >> 29) as u64);
  let x368: u32 = ((x366 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x369: fiat_p521_u128 = ((x367 as fiat_p521_u128) + x336);
  let x370: u64 = ((x369 >> 29) as u64);
  let x371: u32 = ((x369 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x372: fiat_p521_u128 = ((x370 as fiat_p521_u128) + x335);
  let x373: u64 = ((x372 >> 29) as u64);
  let x374: u32 = ((x372 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x375: fiat_p521_u128 = ((x373 as fiat_p521_u128) + x334);
  let x376: u64 = ((x375 >> 29) as u64);
  let x377: u32 = ((x375 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x378: fiat_p521_u128 = ((x376 as fiat_p521_u128) + x333);
  let x379: u64 = ((x378 >> 29) as u64);
  let x380: u32 = ((x378 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x381: fiat_p521_u128 = ((x379 as fiat_p521_u128) + x332);
  let x382: u64 = ((x381 >> 29) as u64);
  let x383: u32 = ((x381 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x384: fiat_p521_u128 = ((x382 as fiat_p521_u128) + x331);
  let x385: u64 = ((x384 >> 29) as u64);
  let x386: u32 = ((x384 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x387: fiat_p521_u128 = ((x385 as fiat_p521_u128) + x330);
  let x388: u64 = ((x387 >> 29) as u64);
  let x389: u32 = ((x387 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x390: fiat_p521_u128 = ((x388 as fiat_p521_u128) + x329);
  let x391: u64 = ((x390 >> 29) as u64);
  let x392: u32 = ((x390 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x393: fiat_p521_u128 = ((x391 as fiat_p521_u128) + x328);
  let x394: u64 = ((x393 >> 28) as u64);
  let x395: u32 = ((x393 & (0xfffffff as fiat_p521_u128)) as u32);
  let x396: u64 = ((x327 as u64) + x394);
  let x397: u32 = ((x396 >> 29) as u32);
  let x398: u32 = ((x396 & (0x1fffffff as u64)) as u32);
  let x399: u32 = (x397 + x347);
  let x400: fiat_p521_u1 = ((x399 >> 29) as fiat_p521_u1);
  let x401: u32 = (x399 & 0x1fffffff);
  let x402: u32 = ((x400 as u32) + x350);
  out1[0] = x398;
  out1[1] = x401;
  out1[2] = x402;
  out1[3] = x353;
  out1[4] = x356;
  out1[5] = x359;
  out1[6] = x362;
  out1[7] = x365;
  out1[8] = x368;
  out1[9] = x371;
  out1[10] = x374;
  out1[11] = x377;
  out1[12] = x380;
  out1[13] = x383;
  out1[14] = x386;
  out1[15] = x389;
  out1[16] = x392;
  out1[17] = x395;
}

/*
 * The function fiat_p521_carry_square squares a field element and reduces the result.
 * Postconditions:
 *   eval out1 mod m = (eval arg1 * eval arg1) mod m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x34cccccb]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x11999999]]
 */
#[inline]
pub fn fiat_p521_carry_square(out1: &mut [u32; 18], arg1: &[u32; 18]) -> () {
  let x1: u32 = (arg1[17]);
  let x2: u32 = (x1 * (0x2 as u32));
  let x3: u32 = ((arg1[17]) * (0x2 as u32));
  let x4: u32 = (arg1[16]);
  let x5: u32 = (x4 * (0x2 as u32));
  let x6: u32 = ((arg1[16]) * (0x2 as u32));
  let x7: u32 = (arg1[15]);
  let x8: u32 = (x7 * (0x2 as u32));
  let x9: u32 = ((arg1[15]) * (0x2 as u32));
  let x10: u32 = (arg1[14]);
  let x11: u32 = (x10 * (0x2 as u32));
  let x12: u32 = ((arg1[14]) * (0x2 as u32));
  let x13: u32 = (arg1[13]);
  let x14: u32 = (x13 * (0x2 as u32));
  let x15: u32 = ((arg1[13]) * (0x2 as u32));
  let x16: u32 = (arg1[12]);
  let x17: u32 = (x16 * (0x2 as u32));
  let x18: u32 = ((arg1[12]) * (0x2 as u32));
  let x19: u32 = (arg1[11]);
  let x20: u32 = (x19 * (0x2 as u32));
  let x21: u32 = ((arg1[11]) * (0x2 as u32));
  let x22: u32 = (arg1[10]);
  let x23: u32 = (x22 * (0x2 as u32));
  let x24: u32 = ((arg1[10]) * (0x2 as u32));
  let x25: u32 = (arg1[9]);
  let x26: u32 = ((arg1[9]) * (0x2 as u32));
  let x27: u32 = ((arg1[8]) * (0x2 as u32));
  let x28: u32 = ((arg1[7]) * (0x2 as u32));
  let x29: u32 = ((arg1[6]) * (0x2 as u32));
  let x30: u32 = ((arg1[5]) * (0x2 as u32));
  let x31: u32 = ((arg1[4]) * (0x2 as u32));
  let x32: u32 = ((arg1[3]) * (0x2 as u32));
  let x33: u32 = ((arg1[2]) * (0x2 as u32));
  let x34: u32 = ((arg1[1]) * (0x2 as u32));
  let x35: u64 = (((arg1[17]) as u64) * ((x1 * (0x2 as u32)) as u64));
  let x36: u64 = (((arg1[16]) as u64) * ((x2 * (0x2 as u32)) as u64));
  let x37: u64 = (((arg1[16]) as u64) * ((x4 * (0x2 as u32)) as u64));
  let x38: u64 = (((arg1[15]) as u64) * ((x2 * (0x2 as u32)) as u64));
  let x39: u64 = (((arg1[15]) as u64) * ((x5 as u64) * (0x2 as u64)));
  let x40: u64 = (((arg1[15]) as u64) * ((x7 * (0x2 as u32)) as u64));
  let x41: u64 = (((arg1[14]) as u64) * ((x2 * (0x2 as u32)) as u64));
  let x42: u64 = (((arg1[14]) as u64) * ((x5 as u64) * (0x2 as u64)));
  let x43: u64 = (((arg1[14]) as u64) * ((x8 as u64) * (0x2 as u64)));
  let x44: u64 = (((arg1[14]) as u64) * ((x10 * (0x2 as u32)) as u64));
  let x45: u64 = (((arg1[13]) as u64) * ((x2 * (0x2 as u32)) as u64));
  let x46: u64 = (((arg1[13]) as u64) * ((x5 as u64) * (0x2 as u64)));
  let x47: u64 = (((arg1[13]) as u64) * ((x8 as u64) * (0x2 as u64)));
  let x48: u64 = (((arg1[13]) as u64) * ((x11 as u64) * (0x2 as u64)));
  let x49: u64 = (((arg1[13]) as u64) * ((x13 * (0x2 as u32)) as u64));
  let x50: u64 = (((arg1[12]) as u64) * ((x2 * (0x2 as u32)) as u64));
  let x51: u64 = (((arg1[12]) as u64) * ((x5 as u64) * (0x2 as u64)));
  let x52: u64 = (((arg1[12]) as u64) * ((x8 as u64) * (0x2 as u64)));
  let x53: u64 = (((arg1[12]) as u64) * ((x11 as u64) * (0x2 as u64)));
  let x54: u64 = (((arg1[12]) as u64) * ((x14 as u64) * (0x2 as u64)));
  let x55: u64 = (((arg1[12]) as u64) * ((x16 * (0x2 as u32)) as u64));
  let x56: u64 = (((arg1[11]) as u64) * ((x2 * (0x2 as u32)) as u64));
  let x57: u64 = (((arg1[11]) as u64) * ((x5 as u64) * (0x2 as u64)));
  let x58: u64 = (((arg1[11]) as u64) * ((x8 as u64) * (0x2 as u64)));
  let x59: u64 = (((arg1[11]) as u64) * ((x11 as u64) * (0x2 as u64)));
  let x60: u64 = (((arg1[11]) as u64) * ((x14 as u64) * (0x2 as u64)));
  let x61: u64 = (((arg1[11]) as u64) * ((x17 as u64) * (0x2 as u64)));
  let x62: u64 = (((arg1[11]) as u64) * ((x19 * (0x2 as u32)) as u64));
  let x63: u64 = (((arg1[10]) as u64) * ((x2 * (0x2 as u32)) as u64));
  let x64: u64 = (((arg1[10]) as u64) * ((x5 as u64) * (0x2 as u64)));
  let x65: u64 = (((arg1[10]) as u64) * ((x8 as u64) * (0x2 as u64)));
  let x66: u64 = (((arg1[10]) as u64) * ((x11 as u64) * (0x2 as u64)));
  let x67: u64 = (((arg1[10]) as u64) * ((x14 as u64) * (0x2 as u64)));
  let x68: u64 = (((arg1[10]) as u64) * ((x17 as u64) * (0x2 as u64)));
  let x69: u64 = (((arg1[10]) as u64) * ((x20 as u64) * (0x2 as u64)));
  let x70: u64 = (((arg1[10]) as u64) * ((x22 * (0x2 as u32)) as u64));
  let x71: u64 = (((arg1[9]) as u64) * ((x2 * (0x2 as u32)) as u64));
  let x72: u64 = (((arg1[9]) as u64) * ((x5 as u64) * (0x2 as u64)));
  let x73: u64 = (((arg1[9]) as u64) * ((x8 as u64) * (0x2 as u64)));
  let x74: u64 = (((arg1[9]) as u64) * ((x11 as u64) * (0x2 as u64)));
  let x75: u64 = (((arg1[9]) as u64) * ((x14 as u64) * (0x2 as u64)));
  let x76: u64 = (((arg1[9]) as u64) * ((x17 as u64) * (0x2 as u64)));
  let x77: u64 = (((arg1[9]) as u64) * ((x20 as u64) * (0x2 as u64)));
  let x78: u64 = (((arg1[9]) as u64) * ((x23 as u64) * (0x2 as u64)));
  let x79: u64 = (((arg1[9]) as u64) * ((x25 * (0x2 as u32)) as u64));
  let x80: u64 = (((arg1[8]) as u64) * ((x2 * (0x2 as u32)) as u64));
  let x81: u64 = (((arg1[8]) as u64) * ((x5 as u64) * (0x2 as u64)));
  let x82: u64 = (((arg1[8]) as u64) * ((x8 as u64) * (0x2 as u64)));
  let x83: u64 = (((arg1[8]) as u64) * ((x11 as u64) * (0x2 as u64)));
  let x84: u64 = (((arg1[8]) as u64) * ((x14 as u64) * (0x2 as u64)));
  let x85: u64 = (((arg1[8]) as u64) * ((x17 as u64) * (0x2 as u64)));
  let x86: u64 = (((arg1[8]) as u64) * ((x20 as u64) * (0x2 as u64)));
  let x87: u64 = (((arg1[8]) as u64) * ((x23 as u64) * (0x2 as u64)));
  let x88: u64 = (((arg1[8]) as u64) * (x26 as u64));
  let x89: u64 = (((arg1[8]) as u64) * ((arg1[8]) as u64));
  let x90: u64 = (((arg1[7]) as u64) * ((x2 * (0x2 as u32)) as u64));
  let x91: u64 = (((arg1[7]) as u64) * ((x5 as u64) * (0x2 as u64)));
  let x92: u64 = (((arg1[7]) as u64) * ((x8 as u64) * (0x2 as u64)));
  let x93: u64 = (((arg1[7]) as u64) * ((x11 as u64) * (0x2 as u64)));
  let x94: u64 = (((arg1[7]) as u64) * ((x14 as u64) * (0x2 as u64)));
  let x95: u64 = (((arg1[7]) as u64) * ((x17 as u64) * (0x2 as u64)));
  let x96: u64 = (((arg1[7]) as u64) * ((x20 as u64) * (0x2 as u64)));
  let x97: u64 = (((arg1[7]) as u64) * (x24 as u64));
  let x98: u64 = (((arg1[7]) as u64) * (x26 as u64));
  let x99: u64 = (((arg1[7]) as u64) * (x27 as u64));
  let x100: u64 = (((arg1[7]) as u64) * ((arg1[7]) as u64));
  let x101: u64 = (((arg1[6]) as u64) * ((x2 * (0x2 as u32)) as u64));
  let x102: u64 = (((arg1[6]) as u64) * ((x5 as u64) * (0x2 as u64)));
  let x103: u64 = (((arg1[6]) as u64) * ((x8 as u64) * (0x2 as u64)));
  let x104: u64 = (((arg1[6]) as u64) * ((x11 as u64) * (0x2 as u64)));
  let x105: u64 = (((arg1[6]) as u64) * ((x14 as u64) * (0x2 as u64)));
  let x106: u64 = (((arg1[6]) as u64) * ((x17 as u64) * (0x2 as u64)));
  let x107: u64 = (((arg1[6]) as u64) * (x21 as u64));
  let x108: u64 = (((arg1[6]) as u64) * (x24 as u64));
  let x109: u64 = (((arg1[6]) as u64) * (x26 as u64));
  let x110: u64 = (((arg1[6]) as u64) * (x27 as u64));
  let x111: u64 = (((arg1[6]) as u64) * (x28 as u64));
  let x112: u64 = (((arg1[6]) as u64) * ((arg1[6]) as u64));
  let x113: u64 = (((arg1[5]) as u64) * ((x2 * (0x2 as u32)) as u64));
  let x114: u64 = (((arg1[5]) as u64) * ((x5 as u64) * (0x2 as u64)));
  let x115: u64 = (((arg1[5]) as u64) * ((x8 as u64) * (0x2 as u64)));
  let x116: u64 = (((arg1[5]) as u64) * ((x11 as u64) * (0x2 as u64)));
  let x117: u64 = (((arg1[5]) as u64) * ((x14 as u64) * (0x2 as u64)));
  let x118: u64 = (((arg1[5]) as u64) * (x18 as u64));
  let x119: u64 = (((arg1[5]) as u64) * (x21 as u64));
  let x120: u64 = (((arg1[5]) as u64) * (x24 as u64));
  let x121: u64 = (((arg1[5]) as u64) * (x26 as u64));
  let x122: u64 = (((arg1[5]) as u64) * (x27 as u64));
  let x123: u64 = (((arg1[5]) as u64) * (x28 as u64));
  let x124: u64 = (((arg1[5]) as u64) * (x29 as u64));
  let x125: u64 = (((arg1[5]) as u64) * ((arg1[5]) as u64));
  let x126: u64 = (((arg1[4]) as u64) * ((x2 * (0x2 as u32)) as u64));
  let x127: u64 = (((arg1[4]) as u64) * ((x5 as u64) * (0x2 as u64)));
  let x128: u64 = (((arg1[4]) as u64) * ((x8 as u64) * (0x2 as u64)));
  let x129: u64 = (((arg1[4]) as u64) * ((x11 as u64) * (0x2 as u64)));
  let x130: u64 = (((arg1[4]) as u64) * (x15 as u64));
  let x131: u64 = (((arg1[4]) as u64) * (x18 as u64));
  let x132: u64 = (((arg1[4]) as u64) * (x21 as u64));
  let x133: u64 = (((arg1[4]) as u64) * (x24 as u64));
  let x134: u64 = (((arg1[4]) as u64) * (x26 as u64));
  let x135: u64 = (((arg1[4]) as u64) * (x27 as u64));
  let x136: u64 = (((arg1[4]) as u64) * (x28 as u64));
  let x137: u64 = (((arg1[4]) as u64) * (x29 as u64));
  let x138: u64 = (((arg1[4]) as u64) * (x30 as u64));
  let x139: u64 = (((arg1[4]) as u64) * ((arg1[4]) as u64));
  let x140: u64 = (((arg1[3]) as u64) * ((x2 * (0x2 as u32)) as u64));
  let x141: u64 = (((arg1[3]) as u64) * ((x5 as u64) * (0x2 as u64)));
  let x142: u64 = (((arg1[3]) as u64) * ((x8 as u64) * (0x2 as u64)));
  let x143: u64 = (((arg1[3]) as u64) * (x12 as u64));
  let x144: u64 = (((arg1[3]) as u64) * (x15 as u64));
  let x145: u64 = (((arg1[3]) as u64) * (x18 as u64));
  let x146: u64 = (((arg1[3]) as u64) * (x21 as u64));
  let x147: u64 = (((arg1[3]) as u64) * (x24 as u64));
  let x148: u64 = (((arg1[3]) as u64) * (x26 as u64));
  let x149: u64 = (((arg1[3]) as u64) * (x27 as u64));
  let x150: u64 = (((arg1[3]) as u64) * (x28 as u64));
  let x151: u64 = (((arg1[3]) as u64) * (x29 as u64));
  let x152: u64 = (((arg1[3]) as u64) * (x30 as u64));
  let x153: u64 = (((arg1[3]) as u64) * (x31 as u64));
  let x154: u64 = (((arg1[3]) as u64) * ((arg1[3]) as u64));
  let x155: u64 = (((arg1[2]) as u64) * ((x2 * (0x2 as u32)) as u64));
  let x156: u64 = (((arg1[2]) as u64) * ((x5 as u64) * (0x2 as u64)));
  let x157: u64 = (((arg1[2]) as u64) * (x9 as u64));
  let x158: u64 = (((arg1[2]) as u64) * (x12 as u64));
  let x159: u64 = (((arg1[2]) as u64) * (x15 as u64));
  let x160: u64 = (((arg1[2]) as u64) * (x18 as u64));
  let x161: u64 = (((arg1[2]) as u64) * (x21 as u64));
  let x162: u64 = (((arg1[2]) as u64) * (x24 as u64));
  let x163: u64 = (((arg1[2]) as u64) * (x26 as u64));
  let x164: u64 = (((arg1[2]) as u64) * (x27 as u64));
  let x165: u64 = (((arg1[2]) as u64) * (x28 as u64));
  let x166: u64 = (((arg1[2]) as u64) * (x29 as u64));
  let x167: u64 = (((arg1[2]) as u64) * (x30 as u64));
  let x168: u64 = (((arg1[2]) as u64) * (x31 as u64));
  let x169: u64 = (((arg1[2]) as u64) * (x32 as u64));
  let x170: u64 = (((arg1[2]) as u64) * ((arg1[2]) as u64));
  let x171: u64 = (((arg1[1]) as u64) * ((x2 * (0x2 as u32)) as u64));
  let x172: u64 = (((arg1[1]) as u64) * (x6 as u64));
  let x173: u64 = (((arg1[1]) as u64) * (x9 as u64));
  let x174: u64 = (((arg1[1]) as u64) * (x12 as u64));
  let x175: u64 = (((arg1[1]) as u64) * (x15 as u64));
  let x176: u64 = (((arg1[1]) as u64) * (x18 as u64));
  let x177: u64 = (((arg1[1]) as u64) * (x21 as u64));
  let x178: u64 = (((arg1[1]) as u64) * (x24 as u64));
  let x179: u64 = (((arg1[1]) as u64) * (x26 as u64));
  let x180: u64 = (((arg1[1]) as u64) * (x27 as u64));
  let x181: u64 = (((arg1[1]) as u64) * (x28 as u64));
  let x182: u64 = (((arg1[1]) as u64) * (x29 as u64));
  let x183: u64 = (((arg1[1]) as u64) * (x30 as u64));
  let x184: u64 = (((arg1[1]) as u64) * (x31 as u64));
  let x185: u64 = (((arg1[1]) as u64) * (x32 as u64));
  let x186: u64 = (((arg1[1]) as u64) * (x33 as u64));
  let x187: u64 = (((arg1[1]) as u64) * ((arg1[1]) as u64));
  let x188: u64 = (((arg1[0]) as u64) * (x3 as u64));
  let x189: u64 = (((arg1[0]) as u64) * (x6 as u64));
  let x190: u64 = (((arg1[0]) as u64) * (x9 as u64));
  let x191: u64 = (((arg1[0]) as u64) * (x12 as u64));
  let x192: u64 = (((arg1[0]) as u64) * (x15 as u64));
  let x193: u64 = (((arg1[0]) as u64) * (x18 as u64));
  let x194: u64 = (((arg1[0]) as u64) * (x21 as u64));
  let x195: u64 = (((arg1[0]) as u64) * (x24 as u64));
  let x196: u64 = (((arg1[0]) as u64) * (x26 as u64));
  let x197: u64 = (((arg1[0]) as u64) * (x27 as u64));
  let x198: u64 = (((arg1[0]) as u64) * (x28 as u64));
  let x199: u64 = (((arg1[0]) as u64) * (x29 as u64));
  let x200: u64 = (((arg1[0]) as u64) * (x30 as u64));
  let x201: u64 = (((arg1[0]) as u64) * (x31 as u64));
  let x202: u64 = (((arg1[0]) as u64) * (x32 as u64));
  let x203: u64 = (((arg1[0]) as u64) * (x33 as u64));
  let x204: u64 = (((arg1[0]) as u64) * (x34 as u64));
  let x205: u64 = (((arg1[0]) as u64) * ((arg1[0]) as u64));
  let x206: fiat_p521_u128 = ((x205 as fiat_p521_u128) + ((x171 as fiat_p521_u128) + ((x156 as fiat_p521_u128) + ((x142 as fiat_p521_u128) + ((x129 as fiat_p521_u128) + ((x117 as fiat_p521_u128) + ((x106 as fiat_p521_u128) + ((x96 as fiat_p521_u128) + ((x87 as fiat_p521_u128) + (x79 as fiat_p521_u128))))))))));
  let x207: u64 = ((x206 >> 29) as u64);
  let x208: u32 = ((x206 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x209: fiat_p521_u128 = ((x188 as fiat_p521_u128) + ((x172 as fiat_p521_u128) + ((x157 as fiat_p521_u128) + ((x143 as fiat_p521_u128) + ((x130 as fiat_p521_u128) + ((x118 as fiat_p521_u128) + ((x107 as fiat_p521_u128) + ((x97 + x88) as fiat_p521_u128))))))));
  let x210: fiat_p521_u128 = ((x189 as fiat_p521_u128) + ((x173 as fiat_p521_u128) + ((x158 as fiat_p521_u128) + ((x144 as fiat_p521_u128) + ((x131 as fiat_p521_u128) + ((x119 as fiat_p521_u128) + ((x108 + (x98 + (x89 + x35))) as fiat_p521_u128)))))));
  let x211: fiat_p521_u128 = ((x190 as fiat_p521_u128) + ((x174 as fiat_p521_u128) + ((x159 as fiat_p521_u128) + ((x145 as fiat_p521_u128) + ((x132 as fiat_p521_u128) + ((x120 as fiat_p521_u128) + ((x109 as fiat_p521_u128) + ((x99 + x36) as fiat_p521_u128))))))));
  let x212: fiat_p521_u128 = ((x191 as fiat_p521_u128) + ((x175 as fiat_p521_u128) + ((x160 as fiat_p521_u128) + ((x146 as fiat_p521_u128) + ((x133 as fiat_p521_u128) + ((x121 as fiat_p521_u128) + ((x110 as fiat_p521_u128) + ((x100 + (x38 + x37)) as fiat_p521_u128))))))));
  let x213: fiat_p521_u128 = ((x192 as fiat_p521_u128) + ((x176 as fiat_p521_u128) + ((x161 as fiat_p521_u128) + ((x147 as fiat_p521_u128) + ((x134 as fiat_p521_u128) + ((x122 as fiat_p521_u128) + ((x111 as fiat_p521_u128) + ((x41 as fiat_p521_u128) + (x39 as fiat_p521_u128)))))))));
  let x214: fiat_p521_u128 = ((x193 as fiat_p521_u128) + ((x177 as fiat_p521_u128) + ((x162 as fiat_p521_u128) + ((x148 as fiat_p521_u128) + ((x135 as fiat_p521_u128) + ((x123 as fiat_p521_u128) + ((x112 as fiat_p521_u128) + ((x45 as fiat_p521_u128) + ((x42 as fiat_p521_u128) + (x40 as fiat_p521_u128))))))))));
  let x215: fiat_p521_u128 = ((x194 as fiat_p521_u128) + ((x178 as fiat_p521_u128) + ((x163 as fiat_p521_u128) + ((x149 as fiat_p521_u128) + ((x136 as fiat_p521_u128) + ((x124 as fiat_p521_u128) + ((x50 as fiat_p521_u128) + ((x46 as fiat_p521_u128) + (x43 as fiat_p521_u128)))))))));
  let x216: fiat_p521_u128 = ((x195 as fiat_p521_u128) + ((x179 as fiat_p521_u128) + ((x164 as fiat_p521_u128) + ((x150 as fiat_p521_u128) + ((x137 as fiat_p521_u128) + ((x125 as fiat_p521_u128) + ((x56 as fiat_p521_u128) + ((x51 as fiat_p521_u128) + ((x47 as fiat_p521_u128) + (x44 as fiat_p521_u128))))))))));
  let x217: fiat_p521_u128 = ((x196 as fiat_p521_u128) + ((x180 as fiat_p521_u128) + ((x165 as fiat_p521_u128) + ((x151 as fiat_p521_u128) + ((x138 as fiat_p521_u128) + ((x63 as fiat_p521_u128) + ((x57 as fiat_p521_u128) + ((x52 as fiat_p521_u128) + (x48 as fiat_p521_u128)))))))));
  let x218: fiat_p521_u128 = ((x197 as fiat_p521_u128) + ((x181 as fiat_p521_u128) + ((x166 as fiat_p521_u128) + ((x152 as fiat_p521_u128) + ((x139 as fiat_p521_u128) + ((x71 as fiat_p521_u128) + ((x64 as fiat_p521_u128) + ((x58 as fiat_p521_u128) + ((x53 as fiat_p521_u128) + (x49 as fiat_p521_u128))))))))));
  let x219: fiat_p521_u128 = ((x198 as fiat_p521_u128) + ((x182 as fiat_p521_u128) + ((x167 as fiat_p521_u128) + ((x153 as fiat_p521_u128) + ((x80 as fiat_p521_u128) + ((x72 as fiat_p521_u128) + ((x65 as fiat_p521_u128) + ((x59 as fiat_p521_u128) + (x54 as fiat_p521_u128)))))))));
  let x220: fiat_p521_u128 = ((x199 as fiat_p521_u128) + ((x183 as fiat_p521_u128) + ((x168 as fiat_p521_u128) + ((x154 as fiat_p521_u128) + ((x90 as fiat_p521_u128) + ((x81 as fiat_p521_u128) + ((x73 as fiat_p521_u128) + ((x66 as fiat_p521_u128) + ((x60 as fiat_p521_u128) + (x55 as fiat_p521_u128))))))))));
  let x221: fiat_p521_u128 = ((x200 as fiat_p521_u128) + ((x184 as fiat_p521_u128) + ((x169 as fiat_p521_u128) + ((x101 as fiat_p521_u128) + ((x91 as fiat_p521_u128) + ((x82 as fiat_p521_u128) + ((x74 as fiat_p521_u128) + ((x67 as fiat_p521_u128) + (x61 as fiat_p521_u128)))))))));
  let x222: fiat_p521_u128 = ((x201 as fiat_p521_u128) + ((x185 as fiat_p521_u128) + ((x170 as fiat_p521_u128) + ((x113 as fiat_p521_u128) + ((x102 as fiat_p521_u128) + ((x92 as fiat_p521_u128) + ((x83 as fiat_p521_u128) + ((x75 as fiat_p521_u128) + ((x68 as fiat_p521_u128) + (x62 as fiat_p521_u128))))))))));
  let x223: fiat_p521_u128 = ((x202 as fiat_p521_u128) + ((x186 as fiat_p521_u128) + ((x126 as fiat_p521_u128) + ((x114 as fiat_p521_u128) + ((x103 as fiat_p521_u128) + ((x93 as fiat_p521_u128) + ((x84 as fiat_p521_u128) + ((x76 as fiat_p521_u128) + (x69 as fiat_p521_u128)))))))));
  let x224: fiat_p521_u128 = ((x203 as fiat_p521_u128) + ((x187 as fiat_p521_u128) + ((x140 as fiat_p521_u128) + ((x127 as fiat_p521_u128) + ((x115 as fiat_p521_u128) + ((x104 as fiat_p521_u128) + ((x94 as fiat_p521_u128) + ((x85 as fiat_p521_u128) + ((x77 as fiat_p521_u128) + (x70 as fiat_p521_u128))))))))));
  let x225: fiat_p521_u128 = ((x204 as fiat_p521_u128) + ((x155 as fiat_p521_u128) + ((x141 as fiat_p521_u128) + ((x128 as fiat_p521_u128) + ((x116 as fiat_p521_u128) + ((x105 as fiat_p521_u128) + ((x95 as fiat_p521_u128) + ((x86 as fiat_p521_u128) + (x78 as fiat_p521_u128)))))))));
  let x226: fiat_p521_u128 = ((x207 as fiat_p521_u128) + x225);
  let x227: u64 = ((x226 >> 29) as u64);
  let x228: u32 = ((x226 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x229: fiat_p521_u128 = ((x227 as fiat_p521_u128) + x224);
  let x230: u64 = ((x229 >> 29) as u64);
  let x231: u32 = ((x229 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x232: fiat_p521_u128 = ((x230 as fiat_p521_u128) + x223);
  let x233: u64 = ((x232 >> 29) as u64);
  let x234: u32 = ((x232 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x235: fiat_p521_u128 = ((x233 as fiat_p521_u128) + x222);
  let x236: u64 = ((x235 >> 29) as u64);
  let x237: u32 = ((x235 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x238: fiat_p521_u128 = ((x236 as fiat_p521_u128) + x221);
  let x239: u64 = ((x238 >> 29) as u64);
  let x240: u32 = ((x238 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x241: fiat_p521_u128 = ((x239 as fiat_p521_u128) + x220);
  let x242: u64 = ((x241 >> 29) as u64);
  let x243: u32 = ((x241 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x244: fiat_p521_u128 = ((x242 as fiat_p521_u128) + x219);
  let x245: u64 = ((x244 >> 29) as u64);
  let x246: u32 = ((x244 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x247: fiat_p521_u128 = ((x245 as fiat_p521_u128) + x218);
  let x248: u64 = ((x247 >> 29) as u64);
  let x249: u32 = ((x247 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x250: fiat_p521_u128 = ((x248 as fiat_p521_u128) + x217);
  let x251: u64 = ((x250 >> 29) as u64);
  let x252: u32 = ((x250 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x253: fiat_p521_u128 = ((x251 as fiat_p521_u128) + x216);
  let x254: u64 = ((x253 >> 29) as u64);
  let x255: u32 = ((x253 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x256: fiat_p521_u128 = ((x254 as fiat_p521_u128) + x215);
  let x257: u64 = ((x256 >> 29) as u64);
  let x258: u32 = ((x256 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x259: fiat_p521_u128 = ((x257 as fiat_p521_u128) + x214);
  let x260: u64 = ((x259 >> 29) as u64);
  let x261: u32 = ((x259 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x262: fiat_p521_u128 = ((x260 as fiat_p521_u128) + x213);
  let x263: u64 = ((x262 >> 29) as u64);
  let x264: u32 = ((x262 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x265: fiat_p521_u128 = ((x263 as fiat_p521_u128) + x212);
  let x266: u64 = ((x265 >> 29) as u64);
  let x267: u32 = ((x265 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x268: fiat_p521_u128 = ((x266 as fiat_p521_u128) + x211);
  let x269: u64 = ((x268 >> 29) as u64);
  let x270: u32 = ((x268 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x271: fiat_p521_u128 = ((x269 as fiat_p521_u128) + x210);
  let x272: u64 = ((x271 >> 29) as u64);
  let x273: u32 = ((x271 & (0x1fffffff as fiat_p521_u128)) as u32);
  let x274: fiat_p521_u128 = ((x272 as fiat_p521_u128) + x209);
  let x275: u64 = ((x274 >> 28) as u64);
  let x276: u32 = ((x274 & (0xfffffff as fiat_p521_u128)) as u32);
  let x277: u64 = ((x208 as u64) + x275);
  let x278: u32 = ((x277 >> 29) as u32);
  let x279: u32 = ((x277 & (0x1fffffff as u64)) as u32);
  let x280: u32 = (x278 + x228);
  let x281: fiat_p521_u1 = ((x280 >> 29) as fiat_p521_u1);
  let x282: u32 = (x280 & 0x1fffffff);
  let x283: u32 = ((x281 as u32) + x231);
  out1[0] = x279;
  out1[1] = x282;
  out1[2] = x283;
  out1[3] = x234;
  out1[4] = x237;
  out1[5] = x240;
  out1[6] = x243;
  out1[7] = x246;
  out1[8] = x249;
  out1[9] = x252;
  out1[10] = x255;
  out1[11] = x258;
  out1[12] = x261;
  out1[13] = x264;
  out1[14] = x267;
  out1[15] = x270;
  out1[16] = x273;
  out1[17] = x276;
}

/*
 * The function fiat_p521_carry reduces a field element.
 * Postconditions:
 *   eval out1 mod m = eval arg1 mod m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x34cccccb]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x11999999]]
 */
#[inline]
pub fn fiat_p521_carry(out1: &mut [u32; 18], arg1: &[u32; 18]) -> () {
  let x1: u32 = (arg1[0]);
  let x2: u32 = ((x1 >> 29) + (arg1[1]));
  let x3: u32 = ((x2 >> 29) + (arg1[2]));
  let x4: u32 = ((x3 >> 29) + (arg1[3]));
  let x5: u32 = ((x4 >> 29) + (arg1[4]));
  let x6: u32 = ((x5 >> 29) + (arg1[5]));
  let x7: u32 = ((x6 >> 29) + (arg1[6]));
  let x8: u32 = ((x7 >> 29) + (arg1[7]));
  let x9: u32 = ((x8 >> 29) + (arg1[8]));
  let x10: u32 = ((x9 >> 29) + (arg1[9]));
  let x11: u32 = ((x10 >> 29) + (arg1[10]));
  let x12: u32 = ((x11 >> 29) + (arg1[11]));
  let x13: u32 = ((x12 >> 29) + (arg1[12]));
  let x14: u32 = ((x13 >> 29) + (arg1[13]));
  let x15: u32 = ((x14 >> 29) + (arg1[14]));
  let x16: u32 = ((x15 >> 29) + (arg1[15]));
  let x17: u32 = ((x16 >> 29) + (arg1[16]));
  let x18: u32 = ((x17 >> 29) + (arg1[17]));
  let x19: u32 = ((x1 & 0x1fffffff) + (x18 >> 28));
  let x20: u32 = ((((x19 >> 29) as fiat_p521_u1) as u32) + (x2 & 0x1fffffff));
  let x21: u32 = (x19 & 0x1fffffff);
  let x22: u32 = (x20 & 0x1fffffff);
  let x23: u32 = ((((x20 >> 29) as fiat_p521_u1) as u32) + (x3 & 0x1fffffff));
  let x24: u32 = (x4 & 0x1fffffff);
  let x25: u32 = (x5 & 0x1fffffff);
  let x26: u32 = (x6 & 0x1fffffff);
  let x27: u32 = (x7 & 0x1fffffff);
  let x28: u32 = (x8 & 0x1fffffff);
  let x29: u32 = (x9 & 0x1fffffff);
  let x30: u32 = (x10 & 0x1fffffff);
  let x31: u32 = (x11 & 0x1fffffff);
  let x32: u32 = (x12 & 0x1fffffff);
  let x33: u32 = (x13 & 0x1fffffff);
  let x34: u32 = (x14 & 0x1fffffff);
  let x35: u32 = (x15 & 0x1fffffff);
  let x36: u32 = (x16 & 0x1fffffff);
  let x37: u32 = (x17 & 0x1fffffff);
  let x38: u32 = (x18 & 0xfffffff);
  out1[0] = x21;
  out1[1] = x22;
  out1[2] = x23;
  out1[3] = x24;
  out1[4] = x25;
  out1[5] = x26;
  out1[6] = x27;
  out1[7] = x28;
  out1[8] = x29;
  out1[9] = x30;
  out1[10] = x31;
  out1[11] = x32;
  out1[12] = x33;
  out1[13] = x34;
  out1[14] = x35;
  out1[15] = x36;
  out1[16] = x37;
  out1[17] = x38;
}

/*
 * The function fiat_p521_add adds two field elements.
 * Postconditions:
 *   eval out1 mod m = (eval arg1 + eval arg2) mod m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x11999999]]
 *   arg2: [[0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x11999999]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x34cccccb]]
 */
#[inline]
pub fn fiat_p521_add(out1: &mut [u32; 18], arg1: &[u32; 18], arg2: &[u32; 18]) -> () {
  let x1: u32 = ((arg1[0]) + (arg2[0]));
  let x2: u32 = ((arg1[1]) + (arg2[1]));
  let x3: u32 = ((arg1[2]) + (arg2[2]));
  let x4: u32 = ((arg1[3]) + (arg2[3]));
  let x5: u32 = ((arg1[4]) + (arg2[4]));
  let x6: u32 = ((arg1[5]) + (arg2[5]));
  let x7: u32 = ((arg1[6]) + (arg2[6]));
  let x8: u32 = ((arg1[7]) + (arg2[7]));
  let x9: u32 = ((arg1[8]) + (arg2[8]));
  let x10: u32 = ((arg1[9]) + (arg2[9]));
  let x11: u32 = ((arg1[10]) + (arg2[10]));
  let x12: u32 = ((arg1[11]) + (arg2[11]));
  let x13: u32 = ((arg1[12]) + (arg2[12]));
  let x14: u32 = ((arg1[13]) + (arg2[13]));
  let x15: u32 = ((arg1[14]) + (arg2[14]));
  let x16: u32 = ((arg1[15]) + (arg2[15]));
  let x17: u32 = ((arg1[16]) + (arg2[16]));
  let x18: u32 = ((arg1[17]) + (arg2[17]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
  out1[4] = x5;
  out1[5] = x6;
  out1[6] = x7;
  out1[7] = x8;
  out1[8] = x9;
  out1[9] = x10;
  out1[10] = x11;
  out1[11] = x12;
  out1[12] = x13;
  out1[13] = x14;
  out1[14] = x15;
  out1[15] = x16;
  out1[16] = x17;
  out1[17] = x18;
}

/*
 * The function fiat_p521_sub subtracts two field elements.
 * Postconditions:
 *   eval out1 mod m = (eval arg1 - eval arg2) mod m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x11999999]]
 *   arg2: [[0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x11999999]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x34cccccb]]
 */
#[inline]
pub fn fiat_p521_sub(out1: &mut [u32; 18], arg1: &[u32; 18], arg2: &[u32; 18]) -> () {
  let x1: u32 = ((0x3ffffffe + (arg1[0])) - (arg2[0]));
  let x2: u32 = ((0x3ffffffe + (arg1[1])) - (arg2[1]));
  let x3: u32 = ((0x3ffffffe + (arg1[2])) - (arg2[2]));
  let x4: u32 = ((0x3ffffffe + (arg1[3])) - (arg2[3]));
  let x5: u32 = ((0x3ffffffe + (arg1[4])) - (arg2[4]));
  let x6: u32 = ((0x3ffffffe + (arg1[5])) - (arg2[5]));
  let x7: u32 = ((0x3ffffffe + (arg1[6])) - (arg2[6]));
  let x8: u32 = ((0x3ffffffe + (arg1[7])) - (arg2[7]));
  let x9: u32 = ((0x3ffffffe + (arg1[8])) - (arg2[8]));
  let x10: u32 = ((0x3ffffffe + (arg1[9])) - (arg2[9]));
  let x11: u32 = ((0x3ffffffe + (arg1[10])) - (arg2[10]));
  let x12: u32 = ((0x3ffffffe + (arg1[11])) - (arg2[11]));
  let x13: u32 = ((0x3ffffffe + (arg1[12])) - (arg2[12]));
  let x14: u32 = ((0x3ffffffe + (arg1[13])) - (arg2[13]));
  let x15: u32 = ((0x3ffffffe + (arg1[14])) - (arg2[14]));
  let x16: u32 = ((0x3ffffffe + (arg1[15])) - (arg2[15]));
  let x17: u32 = ((0x3ffffffe + (arg1[16])) - (arg2[16]));
  let x18: u32 = ((0x1ffffffe + (arg1[17])) - (arg2[17]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
  out1[4] = x5;
  out1[5] = x6;
  out1[6] = x7;
  out1[7] = x8;
  out1[8] = x9;
  out1[9] = x10;
  out1[10] = x11;
  out1[11] = x12;
  out1[12] = x13;
  out1[13] = x14;
  out1[14] = x15;
  out1[15] = x16;
  out1[16] = x17;
  out1[17] = x18;
}

/*
 * The function fiat_p521_opp negates a field element.
 * Postconditions:
 *   eval out1 mod m = -eval arg1 mod m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x11999999]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x69999999], [0x0 ~> 0x34cccccb]]
 */
#[inline]
pub fn fiat_p521_opp(out1: &mut [u32; 18], arg1: &[u32; 18]) -> () {
  let x1: u32 = (0x3ffffffe - (arg1[0]));
  let x2: u32 = (0x3ffffffe - (arg1[1]));
  let x3: u32 = (0x3ffffffe - (arg1[2]));
  let x4: u32 = (0x3ffffffe - (arg1[3]));
  let x5: u32 = (0x3ffffffe - (arg1[4]));
  let x6: u32 = (0x3ffffffe - (arg1[5]));
  let x7: u32 = (0x3ffffffe - (arg1[6]));
  let x8: u32 = (0x3ffffffe - (arg1[7]));
  let x9: u32 = (0x3ffffffe - (arg1[8]));
  let x10: u32 = (0x3ffffffe - (arg1[9]));
  let x11: u32 = (0x3ffffffe - (arg1[10]));
  let x12: u32 = (0x3ffffffe - (arg1[11]));
  let x13: u32 = (0x3ffffffe - (arg1[12]));
  let x14: u32 = (0x3ffffffe - (arg1[13]));
  let x15: u32 = (0x3ffffffe - (arg1[14]));
  let x16: u32 = (0x3ffffffe - (arg1[15]));
  let x17: u32 = (0x3ffffffe - (arg1[16]));
  let x18: u32 = (0x1ffffffe - (arg1[17]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
  out1[4] = x5;
  out1[5] = x6;
  out1[6] = x7;
  out1[7] = x8;
  out1[8] = x9;
  out1[9] = x10;
  out1[10] = x11;
  out1[11] = x12;
  out1[12] = x13;
  out1[13] = x14;
  out1[14] = x15;
  out1[15] = x16;
  out1[16] = x17;
  out1[17] = x18;
}

/*
 * The function fiat_p521_selectznz is a multi-limb conditional select.
 * Postconditions:
 *   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 *   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
#[inline]
pub fn fiat_p521_selectznz(out1: &mut [u32; 18], arg1: fiat_p521_u1, arg2: &[u32; 18], arg3: &[u32; 18]) -> () {
  let mut x1: u32 = 0;
  fiat_p521_cmovznz_u32(&mut x1, arg1, (arg2[0]), (arg3[0]));
  let mut x2: u32 = 0;
  fiat_p521_cmovznz_u32(&mut x2, arg1, (arg2[1]), (arg3[1]));
  let mut x3: u32 = 0;
  fiat_p521_cmovznz_u32(&mut x3, arg1, (arg2[2]), (arg3[2]));
  let mut x4: u32 = 0;
  fiat_p521_cmovznz_u32(&mut x4, arg1, (arg2[3]), (arg3[3]));
  let mut x5: u32 = 0;
  fiat_p521_cmovznz_u32(&mut x5, arg1, (arg2[4]), (arg3[4]));
  let mut x6: u32 = 0;
  fiat_p521_cmovznz_u32(&mut x6, arg1, (arg2[5]), (arg3[5]));
  let mut x7: u32 = 0;
  fiat_p521_cmovznz_u32(&mut x7, arg1, (arg2[6]), (arg3[6]));
  let mut x8: u32 = 0;
  fiat_p521_cmovznz_u32(&mut x8, arg1, (arg2[7]), (arg3[7]));
  let mut x9: u32 = 0;
  fiat_p521_cmovznz_u32(&mut x9, arg1, (arg2[8]), (arg3[8]));
  let mut x10: u32 = 0;
  fiat_p521_cmovznz_u32(&mut x10, arg1, (arg2[9]), (arg3[9]));
  let mut x11: u32 = 0;
  fiat_p521_cmovznz_u32(&mut x11, arg1, (arg2[10]), (arg3[10]));
  let mut x12: u32 = 0;
  fiat_p521_cmovznz_u32(&mut x12, arg1, (arg2[11]), (arg3[11]));
  let mut x13: u32 = 0;
  fiat_p521_cmovznz_u32(&mut x13, arg1, (arg2[12]), (arg3[12]));
  let mut x14: u32 = 0;
  fiat_p521_cmovznz_u32(&mut x14, arg1, (arg2[13]), (arg3[13]));
  let mut x15: u32 = 0;
  fiat_p521_cmovznz_u32(&mut x15, arg1, (arg2[14]), (arg3[14]));
  let mut x16: u32 = 0;
  fiat_p521_cmovznz_u32(&mut x16, arg1, (arg2[15]), (arg3[15]));
  let mut x17: u32 = 0;
  fiat_p521_cmovznz_u32(&mut x17, arg1, (arg2[16]), (arg3[16]));
  let mut x18: u32 = 0;
  fiat_p521_cmovznz_u32(&mut x18, arg1, (arg2[17]), (arg3[17]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
  out1[4] = x5;
  out1[5] = x6;
  out1[6] = x7;
  out1[7] = x8;
  out1[8] = x9;
  out1[9] = x10;
  out1[10] = x11;
  out1[11] = x12;
  out1[12] = x13;
  out1[13] = x14;
  out1[14] = x15;
  out1[15] = x16;
  out1[16] = x17;
  out1[17] = x18;
}

/*
 * The function fiat_p521_to_bytes serializes a field element to bytes in little-endian order.
 * Postconditions:
 *   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..65]
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x11999999]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0x1]]
 */
#[inline]
pub fn fiat_p521_to_bytes(out1: &mut [u8; 66], arg1: &[u32; 18]) -> () {
  let mut x1: u32 = 0;
  let mut x2: fiat_p521_u1 = 0;
  fiat_p521_subborrowx_u29(&mut x1, &mut x2, 0x0, (arg1[0]), 0x1fffffff);
  let mut x3: u32 = 0;
  let mut x4: fiat_p521_u1 = 0;
  fiat_p521_subborrowx_u29(&mut x3, &mut x4, x2, (arg1[1]), 0x1fffffff);
  let mut x5: u32 = 0;
  let mut x6: fiat_p521_u1 = 0;
  fiat_p521_subborrowx_u29(&mut x5, &mut x6, x4, (arg1[2]), 0x1fffffff);
  let mut x7: u32 = 0;
  let mut x8: fiat_p521_u1 = 0;
  fiat_p521_subborrowx_u29(&mut x7, &mut x8, x6, (arg1[3]), 0x1fffffff);
  let mut x9: u32 = 0;
  let mut x10: fiat_p521_u1 = 0;
  fiat_p521_subborrowx_u29(&mut x9, &mut x10, x8, (arg1[4]), 0x1fffffff);
  let mut x11: u32 = 0;
  let mut x12: fiat_p521_u1 = 0;
  fiat_p521_subborrowx_u29(&mut x11, &mut x12, x10, (arg1[5]), 0x1fffffff);
  let mut x13: u32 = 0;
  let mut x14: fiat_p521_u1 = 0;
  fiat_p521_subborrowx_u29(&mut x13, &mut x14, x12, (arg1[6]), 0x1fffffff);
  let mut x15: u32 = 0;
  let mut x16: fiat_p521_u1 = 0;
  fiat_p521_subborrowx_u29(&mut x15, &mut x16, x14, (arg1[7]), 0x1fffffff);
  let mut x17: u32 = 0;
  let mut x18: fiat_p521_u1 = 0;
  fiat_p521_subborrowx_u29(&mut x17, &mut x18, x16, (arg1[8]), 0x1fffffff);
  let mut x19: u32 = 0;
  let mut x20: fiat_p521_u1 = 0;
  fiat_p521_subborrowx_u29(&mut x19, &mut x20, x18, (arg1[9]), 0x1fffffff);
  let mut x21: u32 = 0;
  let mut x22: fiat_p521_u1 = 0;
  fiat_p521_subborrowx_u29(&mut x21, &mut x22, x20, (arg1[10]), 0x1fffffff);
  let mut x23: u32 = 0;
  let mut x24: fiat_p521_u1 = 0;
  fiat_p521_subborrowx_u29(&mut x23, &mut x24, x22, (arg1[11]), 0x1fffffff);
  let mut x25: u32 = 0;
  let mut x26: fiat_p521_u1 = 0;
  fiat_p521_subborrowx_u29(&mut x25, &mut x26, x24, (arg1[12]), 0x1fffffff);
  let mut x27: u32 = 0;
  let mut x28: fiat_p521_u1 = 0;
  fiat_p521_subborrowx_u29(&mut x27, &mut x28, x26, (arg1[13]), 0x1fffffff);
  let mut x29: u32 = 0;
  let mut x30: fiat_p521_u1 = 0;
  fiat_p521_subborrowx_u29(&mut x29, &mut x30, x28, (arg1[14]), 0x1fffffff);
  let mut x31: u32 = 0;
  let mut x32: fiat_p521_u1 = 0;
  fiat_p521_subborrowx_u29(&mut x31, &mut x32, x30, (arg1[15]), 0x1fffffff);
  let mut x33: u32 = 0;
  let mut x34: fiat_p521_u1 = 0;
  fiat_p521_subborrowx_u29(&mut x33, &mut x34, x32, (arg1[16]), 0x1fffffff);
  let mut x35: u32 = 0;
  let mut x36: fiat_p521_u1 = 0;
  fiat_p521_subborrowx_u28(&mut x35, &mut x36, x34, (arg1[17]), 0xfffffff);
  let mut x37: u32 = 0;
  fiat_p521_cmovznz_u32(&mut x37, x36, (0x0 as u32), 0xffffffff);
  let mut x38: u32 = 0;
  let mut x39: fiat_p521_u1 = 0;
  fiat_p521_addcarryx_u29(&mut x38, &mut x39, 0x0, x1, (x37 & 0x1fffffff));
  let mut x40: u32 = 0;
  let mut x41: fiat_p521_u1 = 0;
  fiat_p521_addcarryx_u29(&mut x40, &mut x41, x39, x3, (x37 & 0x1fffffff));
  let mut x42: u32 = 0;
  let mut x43: fiat_p521_u1 = 0;
  fiat_p521_addcarryx_u29(&mut x42, &mut x43, x41, x5, (x37 & 0x1fffffff));
  let mut x44: u32 = 0;
  let mut x45: fiat_p521_u1 = 0;
  fiat_p521_addcarryx_u29(&mut x44, &mut x45, x43, x7, (x37 & 0x1fffffff));
  let mut x46: u32 = 0;
  let mut x47: fiat_p521_u1 = 0;
  fiat_p521_addcarryx_u29(&mut x46, &mut x47, x45, x9, (x37 & 0x1fffffff));
  let mut x48: u32 = 0;
  let mut x49: fiat_p521_u1 = 0;
  fiat_p521_addcarryx_u29(&mut x48, &mut x49, x47, x11, (x37 & 0x1fffffff));
  let mut x50: u32 = 0;
  let mut x51: fiat_p521_u1 = 0;
  fiat_p521_addcarryx_u29(&mut x50, &mut x51, x49, x13, (x37 & 0x1fffffff));
  let mut x52: u32 = 0;
  let mut x53: fiat_p521_u1 = 0;
  fiat_p521_addcarryx_u29(&mut x52, &mut x53, x51, x15, (x37 & 0x1fffffff));
  let mut x54: u32 = 0;
  let mut x55: fiat_p521_u1 = 0;
  fiat_p521_addcarryx_u29(&mut x54, &mut x55, x53, x17, (x37 & 0x1fffffff));
  let mut x56: u32 = 0;
  let mut x57: fiat_p521_u1 = 0;
  fiat_p521_addcarryx_u29(&mut x56, &mut x57, x55, x19, (x37 & 0x1fffffff));
  let mut x58: u32 = 0;
  let mut x59: fiat_p521_u1 = 0;
  fiat_p521_addcarryx_u29(&mut x58, &mut x59, x57, x21, (x37 & 0x1fffffff));
  let mut x60: u32 = 0;
  let mut x61: fiat_p521_u1 = 0;
  fiat_p521_addcarryx_u29(&mut x60, &mut x61, x59, x23, (x37 & 0x1fffffff));
  let mut x62: u32 = 0;
  let mut x63: fiat_p521_u1 = 0;
  fiat_p521_addcarryx_u29(&mut x62, &mut x63, x61, x25, (x37 & 0x1fffffff));
  let mut x64: u32 = 0;
  let mut x65: fiat_p521_u1 = 0;
  fiat_p521_addcarryx_u29(&mut x64, &mut x65, x63, x27, (x37 & 0x1fffffff));
  let mut x66: u32 = 0;
  let mut x67: fiat_p521_u1 = 0;
  fiat_p521_addcarryx_u29(&mut x66, &mut x67, x65, x29, (x37 & 0x1fffffff));
  let mut x68: u32 = 0;
  let mut x69: fiat_p521_u1 = 0;
  fiat_p521_addcarryx_u29(&mut x68, &mut x69, x67, x31, (x37 & 0x1fffffff));
  let mut x70: u32 = 0;
  let mut x71: fiat_p521_u1 = 0;
  fiat_p521_addcarryx_u29(&mut x70, &mut x71, x69, x33, (x37 & 0x1fffffff));
  let mut x72: u32 = 0;
  let mut x73: fiat_p521_u1 = 0;
  fiat_p521_addcarryx_u28(&mut x72, &mut x73, x71, x35, (x37 & 0xfffffff));
  let x74: u64 = ((x72 as u64) << 5);
  let x75: u32 = (x68 << 3);
  let x76: u64 = ((x66 as u64) << 6);
  let x77: u32 = (x64 * (0x2 as u32));
  let x78: u64 = ((x62 as u64) << 4);
  let x79: u64 = ((x60 as u64) << 7);
  let x80: u32 = (x58 << 2);
  let x81: u64 = ((x56 as u64) << 5);
  let x82: u32 = (x52 << 3);
  let x83: u64 = ((x50 as u64) << 6);
  let x84: u32 = (x48 * (0x2 as u32));
  let x85: u64 = ((x46 as u64) << 4);
  let x86: u64 = ((x44 as u64) << 7);
  let x87: u32 = (x42 << 2);
  let x88: u64 = ((x40 as u64) << 5);
  let x89: u32 = (x38 >> 8);
  let x90: u8 = ((x38 & (0xff as u32)) as u8);
  let x91: u32 = (x89 >> 8);
  let x92: u8 = ((x89 & (0xff as u32)) as u8);
  let x93: u8 = ((x91 >> 8) as u8);
  let x94: u8 = ((x91 & (0xff as u32)) as u8);
  let x95: u64 = ((x93 as u64) + x88);
  let x96: u32 = ((x95 >> 8) as u32);
  let x97: u8 = ((x95 & (0xff as u64)) as u8);
  let x98: u32 = (x96 >> 8);
  let x99: u8 = ((x96 & (0xff as u32)) as u8);
  let x100: u32 = (x98 >> 8);
  let x101: u8 = ((x98 & (0xff as u32)) as u8);
  let x102: u8 = ((x100 >> 8) as u8);
  let x103: u8 = ((x100 & (0xff as u32)) as u8);
  let x104: u32 = ((x102 as u32) + x87);
  let x105: u32 = (x104 >> 8);
  let x106: u8 = ((x104 & (0xff as u32)) as u8);
  let x107: u32 = (x105 >> 8);
  let x108: u8 = ((x105 & (0xff as u32)) as u8);
  let x109: u8 = ((x107 >> 8) as u8);
  let x110: u8 = ((x107 & (0xff as u32)) as u8);
  let x111: u64 = ((x109 as u64) + x86);
  let x112: u32 = ((x111 >> 8) as u32);
  let x113: u8 = ((x111 & (0xff as u64)) as u8);
  let x114: u32 = (x112 >> 8);
  let x115: u8 = ((x112 & (0xff as u32)) as u8);
  let x116: u32 = (x114 >> 8);
  let x117: u8 = ((x114 & (0xff as u32)) as u8);
  let x118: u8 = ((x116 >> 8) as u8);
  let x119: u8 = ((x116 & (0xff as u32)) as u8);
  let x120: u64 = ((x118 as u64) + x85);
  let x121: u32 = ((x120 >> 8) as u32);
  let x122: u8 = ((x120 & (0xff as u64)) as u8);
  let x123: u32 = (x121 >> 8);
  let x124: u8 = ((x121 & (0xff as u32)) as u8);
  let x125: u32 = (x123 >> 8);
  let x126: u8 = ((x123 & (0xff as u32)) as u8);
  let x127: fiat_p521_u1 = ((x125 >> 8) as fiat_p521_u1);
  let x128: u8 = ((x125 & (0xff as u32)) as u8);
  let x129: u32 = ((x127 as u32) + x84);
  let x130: u32 = (x129 >> 8);
  let x131: u8 = ((x129 & (0xff as u32)) as u8);
  let x132: u32 = (x130 >> 8);
  let x133: u8 = ((x130 & (0xff as u32)) as u8);
  let x134: u8 = ((x132 >> 8) as u8);
  let x135: u8 = ((x132 & (0xff as u32)) as u8);
  let x136: u64 = ((x134 as u64) + x83);
  let x137: u32 = ((x136 >> 8) as u32);
  let x138: u8 = ((x136 & (0xff as u64)) as u8);
  let x139: u32 = (x137 >> 8);
  let x140: u8 = ((x137 & (0xff as u32)) as u8);
  let x141: u32 = (x139 >> 8);
  let x142: u8 = ((x139 & (0xff as u32)) as u8);
  let x143: u8 = ((x141 >> 8) as u8);
  let x144: u8 = ((x141 & (0xff as u32)) as u8);
  let x145: u32 = ((x143 as u32) + x82);
  let x146: u32 = (x145 >> 8);
  let x147: u8 = ((x145 & (0xff as u32)) as u8);
  let x148: u32 = (x146 >> 8);
  let x149: u8 = ((x146 & (0xff as u32)) as u8);
  let x150: u8 = ((x148 >> 8) as u8);
  let x151: u8 = ((x148 & (0xff as u32)) as u8);
  let x152: u8 = (x150 & 0xff);
  let x153: u32 = (x54 >> 8);
  let x154: u8 = ((x54 & (0xff as u32)) as u8);
  let x155: u32 = (x153 >> 8);
  let x156: u8 = ((x153 & (0xff as u32)) as u8);
  let x157: u8 = ((x155 >> 8) as u8);
  let x158: u8 = ((x155 & (0xff as u32)) as u8);
  let x159: u64 = ((x157 as u64) + x81);
  let x160: u32 = ((x159 >> 8) as u32);
  let x161: u8 = ((x159 & (0xff as u64)) as u8);
  let x162: u32 = (x160 >> 8);
  let x163: u8 = ((x160 & (0xff as u32)) as u8);
  let x164: u32 = (x162 >> 8);
  let x165: u8 = ((x162 & (0xff as u32)) as u8);
  let x166: u8 = ((x164 >> 8) as u8);
  let x167: u8 = ((x164 & (0xff as u32)) as u8);
  let x168: u32 = ((x166 as u32) + x80);
  let x169: u32 = (x168 >> 8);
  let x170: u8 = ((x168 & (0xff as u32)) as u8);
  let x171: u32 = (x169 >> 8);
  let x172: u8 = ((x169 & (0xff as u32)) as u8);
  let x173: u8 = ((x171 >> 8) as u8);
  let x174: u8 = ((x171 & (0xff as u32)) as u8);
  let x175: u64 = ((x173 as u64) + x79);
  let x176: u32 = ((x175 >> 8) as u32);
  let x177: u8 = ((x175 & (0xff as u64)) as u8);
  let x178: u32 = (x176 >> 8);
  let x179: u8 = ((x176 & (0xff as u32)) as u8);
  let x180: u32 = (x178 >> 8);
  let x181: u8 = ((x178 & (0xff as u32)) as u8);
  let x182: u8 = ((x180 >> 8) as u8);
  let x183: u8 = ((x180 & (0xff as u32)) as u8);
  let x184: u64 = ((x182 as u64) + x78);
  let x185: u32 = ((x184 >> 8) as u32);
  let x186: u8 = ((x184 & (0xff as u64)) as u8);
  let x187: u32 = (x185 >> 8);
  let x188: u8 = ((x185 & (0xff as u32)) as u8);
  let x189: u32 = (x187 >> 8);
  let x190: u8 = ((x187 & (0xff as u32)) as u8);
  let x191: fiat_p521_u1 = ((x189 >> 8) as fiat_p521_u1);
  let x192: u8 = ((x189 & (0xff as u32)) as u8);
  let x193: u32 = ((x191 as u32) + x77);
  let x194: u32 = (x193 >> 8);
  let x195: u8 = ((x193 & (0xff as u32)) as u8);
  let x196: u32 = (x194 >> 8);
  let x197: u8 = ((x194 & (0xff as u32)) as u8);
  let x198: u8 = ((x196 >> 8) as u8);
  let x199: u8 = ((x196 & (0xff as u32)) as u8);
  let x200: u64 = ((x198 as u64) + x76);
  let x201: u32 = ((x200 >> 8) as u32);
  let x202: u8 = ((x200 & (0xff as u64)) as u8);
  let x203: u32 = (x201 >> 8);
  let x204: u8 = ((x201 & (0xff as u32)) as u8);
  let x205: u32 = (x203 >> 8);
  let x206: u8 = ((x203 & (0xff as u32)) as u8);
  let x207: u8 = ((x205 >> 8) as u8);
  let x208: u8 = ((x205 & (0xff as u32)) as u8);
  let x209: u32 = ((x207 as u32) + x75);
  let x210: u32 = (x209 >> 8);
  let x211: u8 = ((x209 & (0xff as u32)) as u8);
  let x212: u32 = (x210 >> 8);
  let x213: u8 = ((x210 & (0xff as u32)) as u8);
  let x214: u8 = ((x212 >> 8) as u8);
  let x215: u8 = ((x212 & (0xff as u32)) as u8);
  let x216: u8 = (x214 & 0xff);
  let x217: u32 = (x70 >> 8);
  let x218: u8 = ((x70 & (0xff as u32)) as u8);
  let x219: u32 = (x217 >> 8);
  let x220: u8 = ((x217 & (0xff as u32)) as u8);
  let x221: u8 = ((x219 >> 8) as u8);
  let x222: u8 = ((x219 & (0xff as u32)) as u8);
  let x223: u64 = ((x221 as u64) + x74);
  let x224: u32 = ((x223 >> 8) as u32);
  let x225: u8 = ((x223 & (0xff as u64)) as u8);
  let x226: u32 = (x224 >> 8);
  let x227: u8 = ((x224 & (0xff as u32)) as u8);
  let x228: u32 = (x226 >> 8);
  let x229: u8 = ((x226 & (0xff as u32)) as u8);
  let x230: fiat_p521_u1 = ((x228 >> 8) as fiat_p521_u1);
  let x231: u8 = ((x228 & (0xff as u32)) as u8);
  out1[0] = x90;
  out1[1] = x92;
  out1[2] = x94;
  out1[3] = x97;
  out1[4] = x99;
  out1[5] = x101;
  out1[6] = x103;
  out1[7] = x106;
  out1[8] = x108;
  out1[9] = x110;
  out1[10] = x113;
  out1[11] = x115;
  out1[12] = x117;
  out1[13] = x119;
  out1[14] = x122;
  out1[15] = x124;
  out1[16] = x126;
  out1[17] = x128;
  out1[18] = x131;
  out1[19] = x133;
  out1[20] = x135;
  out1[21] = x138;
  out1[22] = x140;
  out1[23] = x142;
  out1[24] = x144;
  out1[25] = x147;
  out1[26] = x149;
  out1[27] = x151;
  out1[28] = x152;
  out1[29] = x154;
  out1[30] = x156;
  out1[31] = x158;
  out1[32] = x161;
  out1[33] = x163;
  out1[34] = x165;
  out1[35] = x167;
  out1[36] = x170;
  out1[37] = x172;
  out1[38] = x174;
  out1[39] = x177;
  out1[40] = x179;
  out1[41] = x181;
  out1[42] = x183;
  out1[43] = x186;
  out1[44] = x188;
  out1[45] = x190;
  out1[46] = x192;
  out1[47] = x195;
  out1[48] = x197;
  out1[49] = x199;
  out1[50] = x202;
  out1[51] = x204;
  out1[52] = x206;
  out1[53] = x208;
  out1[54] = x211;
  out1[55] = x213;
  out1[56] = x215;
  out1[57] = x216;
  out1[58] = x218;
  out1[59] = x220;
  out1[60] = x222;
  out1[61] = x225;
  out1[62] = x227;
  out1[63] = x229;
  out1[64] = x231;
  out1[65] = (x230 as u8);
}

/*
 * The function fiat_p521_from_bytes deserializes a field element from bytes in little-endian order.
 * Postconditions:
 *   eval out1 mod m = bytes_eval arg1 mod m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0x1]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x23333333], [0x0 ~> 0x11999999]]
 */
#[inline]
pub fn fiat_p521_from_bytes(out1: &mut [u32; 18], arg1: &[u8; 66]) -> () {
  let x1: u32 = ((((arg1[65]) as fiat_p521_u1) as u32) << 27);
  let x2: u32 = (((arg1[64]) as u32) << 19);
  let x3: u32 = (((arg1[63]) as u32) << 11);
  let x4: u32 = (((arg1[62]) as u32) << 3);
  let x5: u32 = (((arg1[61]) as u32) << 24);
  let x6: u32 = (((arg1[60]) as u32) << 16);
  let x7: u32 = (((arg1[59]) as u32) << 8);
  let x8: u8 = (arg1[58]);
  let x9: u32 = (((arg1[57]) as u32) << 21);
  let x10: u32 = (((arg1[56]) as u32) << 13);
  let x11: u32 = (((arg1[55]) as u32) << 5);
  let x12: u64 = (((arg1[54]) as u64) << 26);
  let x13: u32 = (((arg1[53]) as u32) << 18);
  let x14: u32 = (((arg1[52]) as u32) << 10);
  let x15: u32 = (((arg1[51]) as u32) << 2);
  let x16: u32 = (((arg1[50]) as u32) << 23);
  let x17: u32 = (((arg1[49]) as u32) << 15);
  let x18: u32 = (((arg1[48]) as u32) << 7);
  let x19: u64 = (((arg1[47]) as u64) << 28);
  let x20: u32 = (((arg1[46]) as u32) << 20);
  let x21: u32 = (((arg1[45]) as u32) << 12);
  let x22: u32 = (((arg1[44]) as u32) << 4);
  let x23: u64 = (((arg1[43]) as u64) << 25);
  let x24: u32 = (((arg1[42]) as u32) << 17);
  let x25: u32 = (((arg1[41]) as u32) << 9);
  let x26: u32 = (((arg1[40]) as u32) * (0x2 as u32));
  let x27: u32 = (((arg1[39]) as u32) << 22);
  let x28: u32 = (((arg1[38]) as u32) << 14);
  let x29: u32 = (((arg1[37]) as u32) << 6);
  let x30: u64 = (((arg1[36]) as u64) << 27);
  let x31: u32 = (((arg1[35]) as u32) << 19);
  let x32: u32 = (((arg1[34]) as u32) << 11);
  let x33: u32 = (((arg1[33]) as u32) << 3);
  let x34: u32 = (((arg1[32]) as u32) << 24);
  let x35: u32 = (((arg1[31]) as u32) << 16);
  let x36: u32 = (((arg1[30]) as u32) << 8);
  let x37: u8 = (arg1[29]);
  let x38: u32 = (((arg1[28]) as u32) << 21);
  let x39: u32 = (((arg1[27]) as u32) << 13);
  let x40: u32 = (((arg1[26]) as u32) << 5);
  let x41: u64 = (((arg1[25]) as u64) << 26);
  let x42: u32 = (((arg1[24]) as u32) << 18);
  let x43: u32 = (((arg1[23]) as u32) << 10);
  let x44: u32 = (((arg1[22]) as u32) << 2);
  let x45: u32 = (((arg1[21]) as u32) << 23);
  let x46: u32 = (((arg1[20]) as u32) << 15);
  let x47: u32 = (((arg1[19]) as u32) << 7);
  let x48: u64 = (((arg1[18]) as u64) << 28);
  let x49: u32 = (((arg1[17]) as u32) << 20);
  let x50: u32 = (((arg1[16]) as u32) << 12);
  let x51: u32 = (((arg1[15]) as u32) << 4);
  let x52: u64 = (((arg1[14]) as u64) << 25);
  let x53: u32 = (((arg1[13]) as u32) << 17);
  let x54: u32 = (((arg1[12]) as u32) << 9);
  let x55: u32 = (((arg1[11]) as u32) * (0x2 as u32));
  let x56: u32 = (((arg1[10]) as u32) << 22);
  let x57: u32 = (((arg1[9]) as u32) << 14);
  let x58: u32 = (((arg1[8]) as u32) << 6);
  let x59: u64 = (((arg1[7]) as u64) << 27);
  let x60: u32 = (((arg1[6]) as u32) << 19);
  let x61: u32 = (((arg1[5]) as u32) << 11);
  let x62: u32 = (((arg1[4]) as u32) << 3);
  let x63: u32 = (((arg1[3]) as u32) << 24);
  let x64: u32 = (((arg1[2]) as u32) << 16);
  let x65: u32 = (((arg1[1]) as u32) << 8);
  let x66: u8 = (arg1[0]);
  let x67: u32 = ((x66 as u32) + (x65 + (x64 + x63)));
  let x68: u8 = ((x67 >> 29) as u8);
  let x69: u32 = (x67 & 0x1fffffff);
  let x70: u32 = (x4 + (x3 + (x2 + x1)));
  let x71: u32 = ((x8 as u32) + (x7 + (x6 + x5)));
  let x72: u32 = (x11 + (x10 + x9));
  let x73: u64 = ((x15 as u64) + ((x14 as u64) + ((x13 as u64) + x12)));
  let x74: u32 = (x18 + (x17 + x16));
  let x75: u64 = ((x22 as u64) + ((x21 as u64) + ((x20 as u64) + x19)));
  let x76: u64 = ((x26 as u64) + ((x25 as u64) + ((x24 as u64) + x23)));
  let x77: u32 = (x29 + (x28 + x27));
  let x78: u64 = ((x33 as u64) + ((x32 as u64) + ((x31 as u64) + x30)));
  let x79: u32 = ((x37 as u32) + (x36 + (x35 + x34)));
  let x80: u32 = (x40 + (x39 + x38));
  let x81: u64 = ((x44 as u64) + ((x43 as u64) + ((x42 as u64) + x41)));
  let x82: u32 = (x47 + (x46 + x45));
  let x83: u64 = ((x51 as u64) + ((x50 as u64) + ((x49 as u64) + x48)));
  let x84: u64 = ((x55 as u64) + ((x54 as u64) + ((x53 as u64) + x52)));
  let x85: u32 = (x58 + (x57 + x56));
  let x86: u64 = ((x62 as u64) + ((x61 as u64) + ((x60 as u64) + x59)));
  let x87: u64 = ((x68 as u64) + x86);
  let x88: u8 = ((x87 >> 29) as u8);
  let x89: u32 = ((x87 & (0x1fffffff as u64)) as u32);
  let x90: u32 = ((x88 as u32) + x85);
  let x91: fiat_p521_u1 = ((x90 >> 29) as fiat_p521_u1);
  let x92: u32 = (x90 & 0x1fffffff);
  let x93: u64 = ((x91 as u64) + x84);
  let x94: u8 = ((x93 >> 29) as u8);
  let x95: u32 = ((x93 & (0x1fffffff as u64)) as u32);
  let x96: u64 = ((x94 as u64) + x83);
  let x97: u8 = ((x96 >> 29) as u8);
  let x98: u32 = ((x96 & (0x1fffffff as u64)) as u32);
  let x99: u32 = ((x97 as u32) + x82);
  let x100: u8 = ((x99 >> 29) as u8);
  let x101: u32 = (x99 & 0x1fffffff);
  let x102: u64 = ((x100 as u64) + x81);
  let x103: u8 = ((x102 >> 29) as u8);
  let x104: u32 = ((x102 & (0x1fffffff as u64)) as u32);
  let x105: u32 = ((x103 as u32) + x80);
  let x106: u32 = (x105 & 0x1fffffff);
  let x107: u8 = ((x79 >> 29) as u8);
  let x108: u32 = (x79 & 0x1fffffff);
  let x109: u64 = ((x107 as u64) + x78);
  let x110: u8 = ((x109 >> 29) as u8);
  let x111: u32 = ((x109 & (0x1fffffff as u64)) as u32);
  let x112: u32 = ((x110 as u32) + x77);
  let x113: fiat_p521_u1 = ((x112 >> 29) as fiat_p521_u1);
  let x114: u32 = (x112 & 0x1fffffff);
  let x115: u64 = ((x113 as u64) + x76);
  let x116: u8 = ((x115 >> 29) as u8);
  let x117: u32 = ((x115 & (0x1fffffff as u64)) as u32);
  let x118: u64 = ((x116 as u64) + x75);
  let x119: u8 = ((x118 >> 29) as u8);
  let x120: u32 = ((x118 & (0x1fffffff as u64)) as u32);
  let x121: u32 = ((x119 as u32) + x74);
  let x122: u8 = ((x121 >> 29) as u8);
  let x123: u32 = (x121 & 0x1fffffff);
  let x124: u64 = ((x122 as u64) + x73);
  let x125: u8 = ((x124 >> 29) as u8);
  let x126: u32 = ((x124 & (0x1fffffff as u64)) as u32);
  let x127: u32 = ((x125 as u32) + x72);
  let x128: u32 = (x127 & 0x1fffffff);
  let x129: u8 = ((x71 >> 29) as u8);
  let x130: u32 = (x71 & 0x1fffffff);
  let x131: u32 = ((x129 as u32) + x70);
  out1[0] = x69;
  out1[1] = x89;
  out1[2] = x92;
  out1[3] = x95;
  out1[4] = x98;
  out1[5] = x101;
  out1[6] = x104;
  out1[7] = x106;
  out1[8] = x108;
  out1[9] = x111;
  out1[10] = x114;
  out1[11] = x117;
  out1[12] = x120;
  out1[13] = x123;
  out1[14] = x126;
  out1[15] = x128;
  out1[16] = x130;
  out1[17] = x131;
}

