/* Autogenerated: src/ExtractionOCaml/word_by_word_montgomery --lang=Rust p256 '2^256 - 2^224 + 2^192 + 2^96 - 1' 32 */
/* curve description: p256 */
/* requested operations: (all) */
/* m = 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff (from "2^256 - 2^224 + 2^192 + 2^96 - 1") */
/* machine_wordsize = 32 (from "32") */
/*                                                                    */
/* NOTE: In addition to the bounds specified above each function, all */
/*   functions synthesized for this Montgomery arithmetic require the */
/*   input to be strictly less than the prime modulus (m), and also   */
/*   require the input to be in the unique saturated representation.  */
/*   All functions also ensure that these two properties are true of  */
/*   return values.                                                   */

#![allow(unused_parens)]
#[allow(non_camel_case_types)]

pub type fiat_p256_u1 = u8;
pub type fiat_p256_i1 = i8;
pub type fiat_p256_u2 = u8;
pub type fiat_p256_i2 = i8;


/*
 * The function fiat_p256_addcarryx_u32 is an addition with carry.
 * Postconditions:
 *   out1 = (arg1 + arg2 + arg3) mod 2^32
 *   out2 = ⌊(arg1 + arg2 + arg3) / 2^32⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffff]
 *   arg3: [0x0 ~> 0xffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffff]
 *   out2: [0x0 ~> 0x1]
 */
#[inline]
pub fn fiat_p256_addcarryx_u32(out1: &mut u32, out2: &mut fiat_p256_u1, arg1: fiat_p256_u1, arg2: u32, arg3: u32) -> () {
  let x1: u64 = (((arg1 as u64) + (arg2 as u64)) + (arg3 as u64));
  let x2: u32 = ((x1 & (0xffffffff as u64)) as u32);
  let x3: fiat_p256_u1 = ((x1 >> 32) as fiat_p256_u1);
  *out1 = x2;
  *out2 = x3;
}

/*
 * The function fiat_p256_subborrowx_u32 is a subtraction with borrow.
 * Postconditions:
 *   out1 = (-arg1 + arg2 + -arg3) mod 2^32
 *   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^32⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffff]
 *   arg3: [0x0 ~> 0xffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffff]
 *   out2: [0x0 ~> 0x1]
 */
#[inline]
pub fn fiat_p256_subborrowx_u32(out1: &mut u32, out2: &mut fiat_p256_u1, arg1: fiat_p256_u1, arg2: u32, arg3: u32) -> () {
  let x1: i64 = (((arg2 as i64) - (arg1 as i64)) - (arg3 as i64));
  let x2: fiat_p256_i1 = ((x1 >> 32) as fiat_p256_i1);
  let x3: u32 = ((x1 & (0xffffffff as i64)) as u32);
  *out1 = x3;
  *out2 = (((0x0 as fiat_p256_i2) - (x2 as fiat_p256_i2)) as fiat_p256_u1);
}

/*
 * The function fiat_p256_mulx_u32 is a multiplication, returning the full double-width result.
 * Postconditions:
 *   out1 = (arg1 * arg2) mod 2^32
 *   out2 = ⌊arg1 * arg2 / 2^32⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0xffffffff]
 *   arg2: [0x0 ~> 0xffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffff]
 *   out2: [0x0 ~> 0xffffffff]
 */
#[inline]
pub fn fiat_p256_mulx_u32(out1: &mut u32, out2: &mut u32, arg1: u32, arg2: u32) -> () {
  let x1: u64 = ((arg1 as u64) * (arg2 as u64));
  let x2: u32 = ((x1 & (0xffffffff as u64)) as u32);
  let x3: u32 = ((x1 >> 32) as u32);
  *out1 = x2;
  *out2 = x3;
}

/*
 * The function fiat_p256_cmovznz_u32 is a single-word conditional move.
 * Postconditions:
 *   out1 = (if arg1 = 0 then arg2 else arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffff]
 *   arg3: [0x0 ~> 0xffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffff]
 */
#[inline]
pub fn fiat_p256_cmovznz_u32(out1: &mut u32, arg1: fiat_p256_u1, arg2: u32, arg3: u32) -> () {
  let x1: fiat_p256_u1 = (!(!arg1));
  let x2: u32 = ((((((0x0 as fiat_p256_i2) - (x1 as fiat_p256_i2)) as fiat_p256_i1) as i64) & (0xffffffff as i64)) as u32);
  let x3: u32 = ((x2 & arg3) | ((!x2) & arg2));
  *out1 = x3;
}

/*
 * The function fiat_p256_mul multiplies two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 *   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
#[inline]
pub fn fiat_p256_mul(out1: &mut [u32; 8], arg1: &[u32; 8], arg2: &[u32; 8]) -> () {
  let x1: u32 = (arg1[1]);
  let x2: u32 = (arg1[2]);
  let x3: u32 = (arg1[3]);
  let x4: u32 = (arg1[4]);
  let x5: u32 = (arg1[5]);
  let x6: u32 = (arg1[6]);
  let x7: u32 = (arg1[7]);
  let x8: u32 = (arg1[0]);
  let mut x9: u32 = 0;
  let mut x10: u32 = 0;
  fiat_p256_mulx_u32(&mut x9, &mut x10, x8, (arg2[7]));
  let mut x11: u32 = 0;
  let mut x12: u32 = 0;
  fiat_p256_mulx_u32(&mut x11, &mut x12, x8, (arg2[6]));
  let mut x13: u32 = 0;
  let mut x14: u32 = 0;
  fiat_p256_mulx_u32(&mut x13, &mut x14, x8, (arg2[5]));
  let mut x15: u32 = 0;
  let mut x16: u32 = 0;
  fiat_p256_mulx_u32(&mut x15, &mut x16, x8, (arg2[4]));
  let mut x17: u32 = 0;
  let mut x18: u32 = 0;
  fiat_p256_mulx_u32(&mut x17, &mut x18, x8, (arg2[3]));
  let mut x19: u32 = 0;
  let mut x20: u32 = 0;
  fiat_p256_mulx_u32(&mut x19, &mut x20, x8, (arg2[2]));
  let mut x21: u32 = 0;
  let mut x22: u32 = 0;
  fiat_p256_mulx_u32(&mut x21, &mut x22, x8, (arg2[1]));
  let mut x23: u32 = 0;
  let mut x24: u32 = 0;
  fiat_p256_mulx_u32(&mut x23, &mut x24, x8, (arg2[0]));
  let mut x25: u32 = 0;
  let mut x26: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x25, &mut x26, 0x0, x24, x21);
  let mut x27: u32 = 0;
  let mut x28: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x27, &mut x28, x26, x22, x19);
  let mut x29: u32 = 0;
  let mut x30: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x29, &mut x30, x28, x20, x17);
  let mut x31: u32 = 0;
  let mut x32: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x31, &mut x32, x30, x18, x15);
  let mut x33: u32 = 0;
  let mut x34: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x33, &mut x34, x32, x16, x13);
  let mut x35: u32 = 0;
  let mut x36: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x35, &mut x36, x34, x14, x11);
  let mut x37: u32 = 0;
  let mut x38: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x37, &mut x38, x36, x12, x9);
  let mut x39: u32 = 0;
  let mut x40: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x39, &mut x40, x38, x10, (0x0 as u32));
  let mut x41: u32 = 0;
  let mut x42: u32 = 0;
  fiat_p256_mulx_u32(&mut x41, &mut x42, x23, 0xffffffff);
  let mut x43: u32 = 0;
  let mut x44: u32 = 0;
  fiat_p256_mulx_u32(&mut x43, &mut x44, x23, 0xffffffff);
  let mut x45: u32 = 0;
  let mut x46: u32 = 0;
  fiat_p256_mulx_u32(&mut x45, &mut x46, x23, 0xffffffff);
  let mut x47: u32 = 0;
  let mut x48: u32 = 0;
  fiat_p256_mulx_u32(&mut x47, &mut x48, x23, 0xffffffff);
  let mut x49: u32 = 0;
  let mut x50: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x49, &mut x50, 0x0, x48, x45);
  let mut x51: u32 = 0;
  let mut x52: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x51, &mut x52, x50, x46, x43);
  let mut x53: u32 = 0;
  let mut x54: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x53, &mut x54, x52, x44, (0x0 as u32));
  let mut x55: u32 = 0;
  let mut x56: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x55, &mut x56, 0x0, x23, x47);
  let mut x57: u32 = 0;
  let mut x58: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x57, &mut x58, x56, x25, x49);
  let mut x59: u32 = 0;
  let mut x60: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x59, &mut x60, x58, x27, x51);
  let mut x61: u32 = 0;
  let mut x62: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x61, &mut x62, x60, x29, x53);
  let mut x63: u32 = 0;
  let mut x64: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x63, &mut x64, x62, x31, (0x0 as u32));
  let mut x65: u32 = 0;
  let mut x66: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x65, &mut x66, x64, x33, (0x0 as u32));
  let mut x67: u32 = 0;
  let mut x68: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x67, &mut x68, x66, x35, x23);
  let mut x69: u32 = 0;
  let mut x70: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x69, &mut x70, x68, x37, x41);
  let mut x71: u32 = 0;
  let mut x72: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x71, &mut x72, x70, x39, x42);
  let mut x73: u32 = 0;
  let mut x74: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x73, &mut x74, x72, (0x0 as u32), (0x0 as u32));
  let mut x75: u32 = 0;
  let mut x76: u32 = 0;
  fiat_p256_mulx_u32(&mut x75, &mut x76, x1, (arg2[7]));
  let mut x77: u32 = 0;
  let mut x78: u32 = 0;
  fiat_p256_mulx_u32(&mut x77, &mut x78, x1, (arg2[6]));
  let mut x79: u32 = 0;
  let mut x80: u32 = 0;
  fiat_p256_mulx_u32(&mut x79, &mut x80, x1, (arg2[5]));
  let mut x81: u32 = 0;
  let mut x82: u32 = 0;
  fiat_p256_mulx_u32(&mut x81, &mut x82, x1, (arg2[4]));
  let mut x83: u32 = 0;
  let mut x84: u32 = 0;
  fiat_p256_mulx_u32(&mut x83, &mut x84, x1, (arg2[3]));
  let mut x85: u32 = 0;
  let mut x86: u32 = 0;
  fiat_p256_mulx_u32(&mut x85, &mut x86, x1, (arg2[2]));
  let mut x87: u32 = 0;
  let mut x88: u32 = 0;
  fiat_p256_mulx_u32(&mut x87, &mut x88, x1, (arg2[1]));
  let mut x89: u32 = 0;
  let mut x90: u32 = 0;
  fiat_p256_mulx_u32(&mut x89, &mut x90, x1, (arg2[0]));
  let mut x91: u32 = 0;
  let mut x92: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x91, &mut x92, 0x0, x90, x87);
  let mut x93: u32 = 0;
  let mut x94: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x93, &mut x94, x92, x88, x85);
  let mut x95: u32 = 0;
  let mut x96: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x95, &mut x96, x94, x86, x83);
  let mut x97: u32 = 0;
  let mut x98: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x97, &mut x98, x96, x84, x81);
  let mut x99: u32 = 0;
  let mut x100: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x99, &mut x100, x98, x82, x79);
  let mut x101: u32 = 0;
  let mut x102: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x101, &mut x102, x100, x80, x77);
  let mut x103: u32 = 0;
  let mut x104: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x103, &mut x104, x102, x78, x75);
  let mut x105: u32 = 0;
  let mut x106: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x105, &mut x106, x104, x76, (0x0 as u32));
  let mut x107: u32 = 0;
  let mut x108: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x107, &mut x108, 0x0, x57, x89);
  let mut x109: u32 = 0;
  let mut x110: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x109, &mut x110, x108, x59, x91);
  let mut x111: u32 = 0;
  let mut x112: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x111, &mut x112, x110, x61, x93);
  let mut x113: u32 = 0;
  let mut x114: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x113, &mut x114, x112, x63, x95);
  let mut x115: u32 = 0;
  let mut x116: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x115, &mut x116, x114, x65, x97);
  let mut x117: u32 = 0;
  let mut x118: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x117, &mut x118, x116, x67, x99);
  let mut x119: u32 = 0;
  let mut x120: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x119, &mut x120, x118, x69, x101);
  let mut x121: u32 = 0;
  let mut x122: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x121, &mut x122, x120, x71, x103);
  let mut x123: u32 = 0;
  let mut x124: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x123, &mut x124, x122, ((x73 as fiat_p256_u1) as u32), x105);
  let mut x125: u32 = 0;
  let mut x126: u32 = 0;
  fiat_p256_mulx_u32(&mut x125, &mut x126, x107, 0xffffffff);
  let mut x127: u32 = 0;
  let mut x128: u32 = 0;
  fiat_p256_mulx_u32(&mut x127, &mut x128, x107, 0xffffffff);
  let mut x129: u32 = 0;
  let mut x130: u32 = 0;
  fiat_p256_mulx_u32(&mut x129, &mut x130, x107, 0xffffffff);
  let mut x131: u32 = 0;
  let mut x132: u32 = 0;
  fiat_p256_mulx_u32(&mut x131, &mut x132, x107, 0xffffffff);
  let mut x133: u32 = 0;
  let mut x134: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x133, &mut x134, 0x0, x132, x129);
  let mut x135: u32 = 0;
  let mut x136: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x135, &mut x136, x134, x130, x127);
  let mut x137: u32 = 0;
  let mut x138: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x137, &mut x138, x136, x128, (0x0 as u32));
  let mut x139: u32 = 0;
  let mut x140: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x139, &mut x140, 0x0, x107, x131);
  let mut x141: u32 = 0;
  let mut x142: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x141, &mut x142, x140, x109, x133);
  let mut x143: u32 = 0;
  let mut x144: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x143, &mut x144, x142, x111, x135);
  let mut x145: u32 = 0;
  let mut x146: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x145, &mut x146, x144, x113, x137);
  let mut x147: u32 = 0;
  let mut x148: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x147, &mut x148, x146, x115, (0x0 as u32));
  let mut x149: u32 = 0;
  let mut x150: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x149, &mut x150, x148, x117, (0x0 as u32));
  let mut x151: u32 = 0;
  let mut x152: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x151, &mut x152, x150, x119, x107);
  let mut x153: u32 = 0;
  let mut x154: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x153, &mut x154, x152, x121, x125);
  let mut x155: u32 = 0;
  let mut x156: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x155, &mut x156, x154, x123, x126);
  let mut x157: u32 = 0;
  let mut x158: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x157, &mut x158, x156, (x124 as u32), (0x0 as u32));
  let mut x159: u32 = 0;
  let mut x160: u32 = 0;
  fiat_p256_mulx_u32(&mut x159, &mut x160, x2, (arg2[7]));
  let mut x161: u32 = 0;
  let mut x162: u32 = 0;
  fiat_p256_mulx_u32(&mut x161, &mut x162, x2, (arg2[6]));
  let mut x163: u32 = 0;
  let mut x164: u32 = 0;
  fiat_p256_mulx_u32(&mut x163, &mut x164, x2, (arg2[5]));
  let mut x165: u32 = 0;
  let mut x166: u32 = 0;
  fiat_p256_mulx_u32(&mut x165, &mut x166, x2, (arg2[4]));
  let mut x167: u32 = 0;
  let mut x168: u32 = 0;
  fiat_p256_mulx_u32(&mut x167, &mut x168, x2, (arg2[3]));
  let mut x169: u32 = 0;
  let mut x170: u32 = 0;
  fiat_p256_mulx_u32(&mut x169, &mut x170, x2, (arg2[2]));
  let mut x171: u32 = 0;
  let mut x172: u32 = 0;
  fiat_p256_mulx_u32(&mut x171, &mut x172, x2, (arg2[1]));
  let mut x173: u32 = 0;
  let mut x174: u32 = 0;
  fiat_p256_mulx_u32(&mut x173, &mut x174, x2, (arg2[0]));
  let mut x175: u32 = 0;
  let mut x176: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x175, &mut x176, 0x0, x174, x171);
  let mut x177: u32 = 0;
  let mut x178: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x177, &mut x178, x176, x172, x169);
  let mut x179: u32 = 0;
  let mut x180: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x179, &mut x180, x178, x170, x167);
  let mut x181: u32 = 0;
  let mut x182: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x181, &mut x182, x180, x168, x165);
  let mut x183: u32 = 0;
  let mut x184: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x183, &mut x184, x182, x166, x163);
  let mut x185: u32 = 0;
  let mut x186: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x185, &mut x186, x184, x164, x161);
  let mut x187: u32 = 0;
  let mut x188: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x187, &mut x188, x186, x162, x159);
  let mut x189: u32 = 0;
  let mut x190: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x189, &mut x190, x188, x160, (0x0 as u32));
  let mut x191: u32 = 0;
  let mut x192: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x191, &mut x192, 0x0, x141, x173);
  let mut x193: u32 = 0;
  let mut x194: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x193, &mut x194, x192, x143, x175);
  let mut x195: u32 = 0;
  let mut x196: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x195, &mut x196, x194, x145, x177);
  let mut x197: u32 = 0;
  let mut x198: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x197, &mut x198, x196, x147, x179);
  let mut x199: u32 = 0;
  let mut x200: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x199, &mut x200, x198, x149, x181);
  let mut x201: u32 = 0;
  let mut x202: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x201, &mut x202, x200, x151, x183);
  let mut x203: u32 = 0;
  let mut x204: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x203, &mut x204, x202, x153, x185);
  let mut x205: u32 = 0;
  let mut x206: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x205, &mut x206, x204, x155, x187);
  let mut x207: u32 = 0;
  let mut x208: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x207, &mut x208, x206, x157, x189);
  let mut x209: u32 = 0;
  let mut x210: u32 = 0;
  fiat_p256_mulx_u32(&mut x209, &mut x210, x191, 0xffffffff);
  let mut x211: u32 = 0;
  let mut x212: u32 = 0;
  fiat_p256_mulx_u32(&mut x211, &mut x212, x191, 0xffffffff);
  let mut x213: u32 = 0;
  let mut x214: u32 = 0;
  fiat_p256_mulx_u32(&mut x213, &mut x214, x191, 0xffffffff);
  let mut x215: u32 = 0;
  let mut x216: u32 = 0;
  fiat_p256_mulx_u32(&mut x215, &mut x216, x191, 0xffffffff);
  let mut x217: u32 = 0;
  let mut x218: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x217, &mut x218, 0x0, x216, x213);
  let mut x219: u32 = 0;
  let mut x220: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x219, &mut x220, x218, x214, x211);
  let mut x221: u32 = 0;
  let mut x222: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x221, &mut x222, x220, x212, (0x0 as u32));
  let mut x223: u32 = 0;
  let mut x224: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x223, &mut x224, 0x0, x191, x215);
  let mut x225: u32 = 0;
  let mut x226: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x225, &mut x226, x224, x193, x217);
  let mut x227: u32 = 0;
  let mut x228: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x227, &mut x228, x226, x195, x219);
  let mut x229: u32 = 0;
  let mut x230: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x229, &mut x230, x228, x197, x221);
  let mut x231: u32 = 0;
  let mut x232: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x231, &mut x232, x230, x199, (0x0 as u32));
  let mut x233: u32 = 0;
  let mut x234: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x233, &mut x234, x232, x201, (0x0 as u32));
  let mut x235: u32 = 0;
  let mut x236: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x235, &mut x236, x234, x203, x191);
  let mut x237: u32 = 0;
  let mut x238: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x237, &mut x238, x236, x205, x209);
  let mut x239: u32 = 0;
  let mut x240: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x239, &mut x240, x238, x207, x210);
  let mut x241: u32 = 0;
  let mut x242: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x241, &mut x242, x240, (x208 as u32), (0x0 as u32));
  let mut x243: u32 = 0;
  let mut x244: u32 = 0;
  fiat_p256_mulx_u32(&mut x243, &mut x244, x3, (arg2[7]));
  let mut x245: u32 = 0;
  let mut x246: u32 = 0;
  fiat_p256_mulx_u32(&mut x245, &mut x246, x3, (arg2[6]));
  let mut x247: u32 = 0;
  let mut x248: u32 = 0;
  fiat_p256_mulx_u32(&mut x247, &mut x248, x3, (arg2[5]));
  let mut x249: u32 = 0;
  let mut x250: u32 = 0;
  fiat_p256_mulx_u32(&mut x249, &mut x250, x3, (arg2[4]));
  let mut x251: u32 = 0;
  let mut x252: u32 = 0;
  fiat_p256_mulx_u32(&mut x251, &mut x252, x3, (arg2[3]));
  let mut x253: u32 = 0;
  let mut x254: u32 = 0;
  fiat_p256_mulx_u32(&mut x253, &mut x254, x3, (arg2[2]));
  let mut x255: u32 = 0;
  let mut x256: u32 = 0;
  fiat_p256_mulx_u32(&mut x255, &mut x256, x3, (arg2[1]));
  let mut x257: u32 = 0;
  let mut x258: u32 = 0;
  fiat_p256_mulx_u32(&mut x257, &mut x258, x3, (arg2[0]));
  let mut x259: u32 = 0;
  let mut x260: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x259, &mut x260, 0x0, x258, x255);
  let mut x261: u32 = 0;
  let mut x262: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x261, &mut x262, x260, x256, x253);
  let mut x263: u32 = 0;
  let mut x264: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x263, &mut x264, x262, x254, x251);
  let mut x265: u32 = 0;
  let mut x266: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x265, &mut x266, x264, x252, x249);
  let mut x267: u32 = 0;
  let mut x268: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x267, &mut x268, x266, x250, x247);
  let mut x269: u32 = 0;
  let mut x270: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x269, &mut x270, x268, x248, x245);
  let mut x271: u32 = 0;
  let mut x272: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x271, &mut x272, x270, x246, x243);
  let mut x273: u32 = 0;
  let mut x274: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x273, &mut x274, x272, x244, (0x0 as u32));
  let mut x275: u32 = 0;
  let mut x276: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x275, &mut x276, 0x0, x225, x257);
  let mut x277: u32 = 0;
  let mut x278: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x277, &mut x278, x276, x227, x259);
  let mut x279: u32 = 0;
  let mut x280: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x279, &mut x280, x278, x229, x261);
  let mut x281: u32 = 0;
  let mut x282: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x281, &mut x282, x280, x231, x263);
  let mut x283: u32 = 0;
  let mut x284: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x283, &mut x284, x282, x233, x265);
  let mut x285: u32 = 0;
  let mut x286: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x285, &mut x286, x284, x235, x267);
  let mut x287: u32 = 0;
  let mut x288: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x287, &mut x288, x286, x237, x269);
  let mut x289: u32 = 0;
  let mut x290: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x289, &mut x290, x288, x239, x271);
  let mut x291: u32 = 0;
  let mut x292: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x291, &mut x292, x290, x241, x273);
  let mut x293: u32 = 0;
  let mut x294: u32 = 0;
  fiat_p256_mulx_u32(&mut x293, &mut x294, x275, 0xffffffff);
  let mut x295: u32 = 0;
  let mut x296: u32 = 0;
  fiat_p256_mulx_u32(&mut x295, &mut x296, x275, 0xffffffff);
  let mut x297: u32 = 0;
  let mut x298: u32 = 0;
  fiat_p256_mulx_u32(&mut x297, &mut x298, x275, 0xffffffff);
  let mut x299: u32 = 0;
  let mut x300: u32 = 0;
  fiat_p256_mulx_u32(&mut x299, &mut x300, x275, 0xffffffff);
  let mut x301: u32 = 0;
  let mut x302: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x301, &mut x302, 0x0, x300, x297);
  let mut x303: u32 = 0;
  let mut x304: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x303, &mut x304, x302, x298, x295);
  let mut x305: u32 = 0;
  let mut x306: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x305, &mut x306, x304, x296, (0x0 as u32));
  let mut x307: u32 = 0;
  let mut x308: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x307, &mut x308, 0x0, x275, x299);
  let mut x309: u32 = 0;
  let mut x310: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x309, &mut x310, x308, x277, x301);
  let mut x311: u32 = 0;
  let mut x312: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x311, &mut x312, x310, x279, x303);
  let mut x313: u32 = 0;
  let mut x314: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x313, &mut x314, x312, x281, x305);
  let mut x315: u32 = 0;
  let mut x316: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x315, &mut x316, x314, x283, (0x0 as u32));
  let mut x317: u32 = 0;
  let mut x318: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x317, &mut x318, x316, x285, (0x0 as u32));
  let mut x319: u32 = 0;
  let mut x320: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x319, &mut x320, x318, x287, x275);
  let mut x321: u32 = 0;
  let mut x322: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x321, &mut x322, x320, x289, x293);
  let mut x323: u32 = 0;
  let mut x324: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x323, &mut x324, x322, x291, x294);
  let mut x325: u32 = 0;
  let mut x326: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x325, &mut x326, x324, (x292 as u32), (0x0 as u32));
  let mut x327: u32 = 0;
  let mut x328: u32 = 0;
  fiat_p256_mulx_u32(&mut x327, &mut x328, x4, (arg2[7]));
  let mut x329: u32 = 0;
  let mut x330: u32 = 0;
  fiat_p256_mulx_u32(&mut x329, &mut x330, x4, (arg2[6]));
  let mut x331: u32 = 0;
  let mut x332: u32 = 0;
  fiat_p256_mulx_u32(&mut x331, &mut x332, x4, (arg2[5]));
  let mut x333: u32 = 0;
  let mut x334: u32 = 0;
  fiat_p256_mulx_u32(&mut x333, &mut x334, x4, (arg2[4]));
  let mut x335: u32 = 0;
  let mut x336: u32 = 0;
  fiat_p256_mulx_u32(&mut x335, &mut x336, x4, (arg2[3]));
  let mut x337: u32 = 0;
  let mut x338: u32 = 0;
  fiat_p256_mulx_u32(&mut x337, &mut x338, x4, (arg2[2]));
  let mut x339: u32 = 0;
  let mut x340: u32 = 0;
  fiat_p256_mulx_u32(&mut x339, &mut x340, x4, (arg2[1]));
  let mut x341: u32 = 0;
  let mut x342: u32 = 0;
  fiat_p256_mulx_u32(&mut x341, &mut x342, x4, (arg2[0]));
  let mut x343: u32 = 0;
  let mut x344: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x343, &mut x344, 0x0, x342, x339);
  let mut x345: u32 = 0;
  let mut x346: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x345, &mut x346, x344, x340, x337);
  let mut x347: u32 = 0;
  let mut x348: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x347, &mut x348, x346, x338, x335);
  let mut x349: u32 = 0;
  let mut x350: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x349, &mut x350, x348, x336, x333);
  let mut x351: u32 = 0;
  let mut x352: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x351, &mut x352, x350, x334, x331);
  let mut x353: u32 = 0;
  let mut x354: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x353, &mut x354, x352, x332, x329);
  let mut x355: u32 = 0;
  let mut x356: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x355, &mut x356, x354, x330, x327);
  let mut x357: u32 = 0;
  let mut x358: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x357, &mut x358, x356, x328, (0x0 as u32));
  let mut x359: u32 = 0;
  let mut x360: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x359, &mut x360, 0x0, x309, x341);
  let mut x361: u32 = 0;
  let mut x362: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x361, &mut x362, x360, x311, x343);
  let mut x363: u32 = 0;
  let mut x364: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x363, &mut x364, x362, x313, x345);
  let mut x365: u32 = 0;
  let mut x366: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x365, &mut x366, x364, x315, x347);
  let mut x367: u32 = 0;
  let mut x368: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x367, &mut x368, x366, x317, x349);
  let mut x369: u32 = 0;
  let mut x370: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x369, &mut x370, x368, x319, x351);
  let mut x371: u32 = 0;
  let mut x372: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x371, &mut x372, x370, x321, x353);
  let mut x373: u32 = 0;
  let mut x374: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x373, &mut x374, x372, x323, x355);
  let mut x375: u32 = 0;
  let mut x376: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x375, &mut x376, x374, x325, x357);
  let mut x377: u32 = 0;
  let mut x378: u32 = 0;
  fiat_p256_mulx_u32(&mut x377, &mut x378, x359, 0xffffffff);
  let mut x379: u32 = 0;
  let mut x380: u32 = 0;
  fiat_p256_mulx_u32(&mut x379, &mut x380, x359, 0xffffffff);
  let mut x381: u32 = 0;
  let mut x382: u32 = 0;
  fiat_p256_mulx_u32(&mut x381, &mut x382, x359, 0xffffffff);
  let mut x383: u32 = 0;
  let mut x384: u32 = 0;
  fiat_p256_mulx_u32(&mut x383, &mut x384, x359, 0xffffffff);
  let mut x385: u32 = 0;
  let mut x386: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x385, &mut x386, 0x0, x384, x381);
  let mut x387: u32 = 0;
  let mut x388: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x387, &mut x388, x386, x382, x379);
  let mut x389: u32 = 0;
  let mut x390: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x389, &mut x390, x388, x380, (0x0 as u32));
  let mut x391: u32 = 0;
  let mut x392: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x391, &mut x392, 0x0, x359, x383);
  let mut x393: u32 = 0;
  let mut x394: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x393, &mut x394, x392, x361, x385);
  let mut x395: u32 = 0;
  let mut x396: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x395, &mut x396, x394, x363, x387);
  let mut x397: u32 = 0;
  let mut x398: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x397, &mut x398, x396, x365, x389);
  let mut x399: u32 = 0;
  let mut x400: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x399, &mut x400, x398, x367, (0x0 as u32));
  let mut x401: u32 = 0;
  let mut x402: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x401, &mut x402, x400, x369, (0x0 as u32));
  let mut x403: u32 = 0;
  let mut x404: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x403, &mut x404, x402, x371, x359);
  let mut x405: u32 = 0;
  let mut x406: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x405, &mut x406, x404, x373, x377);
  let mut x407: u32 = 0;
  let mut x408: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x407, &mut x408, x406, x375, x378);
  let mut x409: u32 = 0;
  let mut x410: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x409, &mut x410, x408, (x376 as u32), (0x0 as u32));
  let mut x411: u32 = 0;
  let mut x412: u32 = 0;
  fiat_p256_mulx_u32(&mut x411, &mut x412, x5, (arg2[7]));
  let mut x413: u32 = 0;
  let mut x414: u32 = 0;
  fiat_p256_mulx_u32(&mut x413, &mut x414, x5, (arg2[6]));
  let mut x415: u32 = 0;
  let mut x416: u32 = 0;
  fiat_p256_mulx_u32(&mut x415, &mut x416, x5, (arg2[5]));
  let mut x417: u32 = 0;
  let mut x418: u32 = 0;
  fiat_p256_mulx_u32(&mut x417, &mut x418, x5, (arg2[4]));
  let mut x419: u32 = 0;
  let mut x420: u32 = 0;
  fiat_p256_mulx_u32(&mut x419, &mut x420, x5, (arg2[3]));
  let mut x421: u32 = 0;
  let mut x422: u32 = 0;
  fiat_p256_mulx_u32(&mut x421, &mut x422, x5, (arg2[2]));
  let mut x423: u32 = 0;
  let mut x424: u32 = 0;
  fiat_p256_mulx_u32(&mut x423, &mut x424, x5, (arg2[1]));
  let mut x425: u32 = 0;
  let mut x426: u32 = 0;
  fiat_p256_mulx_u32(&mut x425, &mut x426, x5, (arg2[0]));
  let mut x427: u32 = 0;
  let mut x428: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x427, &mut x428, 0x0, x426, x423);
  let mut x429: u32 = 0;
  let mut x430: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x429, &mut x430, x428, x424, x421);
  let mut x431: u32 = 0;
  let mut x432: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x431, &mut x432, x430, x422, x419);
  let mut x433: u32 = 0;
  let mut x434: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x433, &mut x434, x432, x420, x417);
  let mut x435: u32 = 0;
  let mut x436: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x435, &mut x436, x434, x418, x415);
  let mut x437: u32 = 0;
  let mut x438: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x437, &mut x438, x436, x416, x413);
  let mut x439: u32 = 0;
  let mut x440: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x439, &mut x440, x438, x414, x411);
  let mut x441: u32 = 0;
  let mut x442: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x441, &mut x442, x440, x412, (0x0 as u32));
  let mut x443: u32 = 0;
  let mut x444: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x443, &mut x444, 0x0, x393, x425);
  let mut x445: u32 = 0;
  let mut x446: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x445, &mut x446, x444, x395, x427);
  let mut x447: u32 = 0;
  let mut x448: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x447, &mut x448, x446, x397, x429);
  let mut x449: u32 = 0;
  let mut x450: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x449, &mut x450, x448, x399, x431);
  let mut x451: u32 = 0;
  let mut x452: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x451, &mut x452, x450, x401, x433);
  let mut x453: u32 = 0;
  let mut x454: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x453, &mut x454, x452, x403, x435);
  let mut x455: u32 = 0;
  let mut x456: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x455, &mut x456, x454, x405, x437);
  let mut x457: u32 = 0;
  let mut x458: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x457, &mut x458, x456, x407, x439);
  let mut x459: u32 = 0;
  let mut x460: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x459, &mut x460, x458, x409, x441);
  let mut x461: u32 = 0;
  let mut x462: u32 = 0;
  fiat_p256_mulx_u32(&mut x461, &mut x462, x443, 0xffffffff);
  let mut x463: u32 = 0;
  let mut x464: u32 = 0;
  fiat_p256_mulx_u32(&mut x463, &mut x464, x443, 0xffffffff);
  let mut x465: u32 = 0;
  let mut x466: u32 = 0;
  fiat_p256_mulx_u32(&mut x465, &mut x466, x443, 0xffffffff);
  let mut x467: u32 = 0;
  let mut x468: u32 = 0;
  fiat_p256_mulx_u32(&mut x467, &mut x468, x443, 0xffffffff);
  let mut x469: u32 = 0;
  let mut x470: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x469, &mut x470, 0x0, x468, x465);
  let mut x471: u32 = 0;
  let mut x472: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x471, &mut x472, x470, x466, x463);
  let mut x473: u32 = 0;
  let mut x474: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x473, &mut x474, x472, x464, (0x0 as u32));
  let mut x475: u32 = 0;
  let mut x476: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x475, &mut x476, 0x0, x443, x467);
  let mut x477: u32 = 0;
  let mut x478: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x477, &mut x478, x476, x445, x469);
  let mut x479: u32 = 0;
  let mut x480: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x479, &mut x480, x478, x447, x471);
  let mut x481: u32 = 0;
  let mut x482: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x481, &mut x482, x480, x449, x473);
  let mut x483: u32 = 0;
  let mut x484: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x483, &mut x484, x482, x451, (0x0 as u32));
  let mut x485: u32 = 0;
  let mut x486: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x485, &mut x486, x484, x453, (0x0 as u32));
  let mut x487: u32 = 0;
  let mut x488: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x487, &mut x488, x486, x455, x443);
  let mut x489: u32 = 0;
  let mut x490: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x489, &mut x490, x488, x457, x461);
  let mut x491: u32 = 0;
  let mut x492: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x491, &mut x492, x490, x459, x462);
  let mut x493: u32 = 0;
  let mut x494: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x493, &mut x494, x492, (x460 as u32), (0x0 as u32));
  let mut x495: u32 = 0;
  let mut x496: u32 = 0;
  fiat_p256_mulx_u32(&mut x495, &mut x496, x6, (arg2[7]));
  let mut x497: u32 = 0;
  let mut x498: u32 = 0;
  fiat_p256_mulx_u32(&mut x497, &mut x498, x6, (arg2[6]));
  let mut x499: u32 = 0;
  let mut x500: u32 = 0;
  fiat_p256_mulx_u32(&mut x499, &mut x500, x6, (arg2[5]));
  let mut x501: u32 = 0;
  let mut x502: u32 = 0;
  fiat_p256_mulx_u32(&mut x501, &mut x502, x6, (arg2[4]));
  let mut x503: u32 = 0;
  let mut x504: u32 = 0;
  fiat_p256_mulx_u32(&mut x503, &mut x504, x6, (arg2[3]));
  let mut x505: u32 = 0;
  let mut x506: u32 = 0;
  fiat_p256_mulx_u32(&mut x505, &mut x506, x6, (arg2[2]));
  let mut x507: u32 = 0;
  let mut x508: u32 = 0;
  fiat_p256_mulx_u32(&mut x507, &mut x508, x6, (arg2[1]));
  let mut x509: u32 = 0;
  let mut x510: u32 = 0;
  fiat_p256_mulx_u32(&mut x509, &mut x510, x6, (arg2[0]));
  let mut x511: u32 = 0;
  let mut x512: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x511, &mut x512, 0x0, x510, x507);
  let mut x513: u32 = 0;
  let mut x514: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x513, &mut x514, x512, x508, x505);
  let mut x515: u32 = 0;
  let mut x516: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x515, &mut x516, x514, x506, x503);
  let mut x517: u32 = 0;
  let mut x518: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x517, &mut x518, x516, x504, x501);
  let mut x519: u32 = 0;
  let mut x520: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x519, &mut x520, x518, x502, x499);
  let mut x521: u32 = 0;
  let mut x522: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x521, &mut x522, x520, x500, x497);
  let mut x523: u32 = 0;
  let mut x524: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x523, &mut x524, x522, x498, x495);
  let mut x525: u32 = 0;
  let mut x526: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x525, &mut x526, x524, x496, (0x0 as u32));
  let mut x527: u32 = 0;
  let mut x528: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x527, &mut x528, 0x0, x477, x509);
  let mut x529: u32 = 0;
  let mut x530: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x529, &mut x530, x528, x479, x511);
  let mut x531: u32 = 0;
  let mut x532: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x531, &mut x532, x530, x481, x513);
  let mut x533: u32 = 0;
  let mut x534: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x533, &mut x534, x532, x483, x515);
  let mut x535: u32 = 0;
  let mut x536: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x535, &mut x536, x534, x485, x517);
  let mut x537: u32 = 0;
  let mut x538: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x537, &mut x538, x536, x487, x519);
  let mut x539: u32 = 0;
  let mut x540: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x539, &mut x540, x538, x489, x521);
  let mut x541: u32 = 0;
  let mut x542: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x541, &mut x542, x540, x491, x523);
  let mut x543: u32 = 0;
  let mut x544: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x543, &mut x544, x542, x493, x525);
  let mut x545: u32 = 0;
  let mut x546: u32 = 0;
  fiat_p256_mulx_u32(&mut x545, &mut x546, x527, 0xffffffff);
  let mut x547: u32 = 0;
  let mut x548: u32 = 0;
  fiat_p256_mulx_u32(&mut x547, &mut x548, x527, 0xffffffff);
  let mut x549: u32 = 0;
  let mut x550: u32 = 0;
  fiat_p256_mulx_u32(&mut x549, &mut x550, x527, 0xffffffff);
  let mut x551: u32 = 0;
  let mut x552: u32 = 0;
  fiat_p256_mulx_u32(&mut x551, &mut x552, x527, 0xffffffff);
  let mut x553: u32 = 0;
  let mut x554: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x553, &mut x554, 0x0, x552, x549);
  let mut x555: u32 = 0;
  let mut x556: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x555, &mut x556, x554, x550, x547);
  let mut x557: u32 = 0;
  let mut x558: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x557, &mut x558, x556, x548, (0x0 as u32));
  let mut x559: u32 = 0;
  let mut x560: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x559, &mut x560, 0x0, x527, x551);
  let mut x561: u32 = 0;
  let mut x562: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x561, &mut x562, x560, x529, x553);
  let mut x563: u32 = 0;
  let mut x564: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x563, &mut x564, x562, x531, x555);
  let mut x565: u32 = 0;
  let mut x566: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x565, &mut x566, x564, x533, x557);
  let mut x567: u32 = 0;
  let mut x568: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x567, &mut x568, x566, x535, (0x0 as u32));
  let mut x569: u32 = 0;
  let mut x570: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x569, &mut x570, x568, x537, (0x0 as u32));
  let mut x571: u32 = 0;
  let mut x572: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x571, &mut x572, x570, x539, x527);
  let mut x573: u32 = 0;
  let mut x574: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x573, &mut x574, x572, x541, x545);
  let mut x575: u32 = 0;
  let mut x576: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x575, &mut x576, x574, x543, x546);
  let mut x577: u32 = 0;
  let mut x578: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x577, &mut x578, x576, (x544 as u32), (0x0 as u32));
  let mut x579: u32 = 0;
  let mut x580: u32 = 0;
  fiat_p256_mulx_u32(&mut x579, &mut x580, x7, (arg2[7]));
  let mut x581: u32 = 0;
  let mut x582: u32 = 0;
  fiat_p256_mulx_u32(&mut x581, &mut x582, x7, (arg2[6]));
  let mut x583: u32 = 0;
  let mut x584: u32 = 0;
  fiat_p256_mulx_u32(&mut x583, &mut x584, x7, (arg2[5]));
  let mut x585: u32 = 0;
  let mut x586: u32 = 0;
  fiat_p256_mulx_u32(&mut x585, &mut x586, x7, (arg2[4]));
  let mut x587: u32 = 0;
  let mut x588: u32 = 0;
  fiat_p256_mulx_u32(&mut x587, &mut x588, x7, (arg2[3]));
  let mut x589: u32 = 0;
  let mut x590: u32 = 0;
  fiat_p256_mulx_u32(&mut x589, &mut x590, x7, (arg2[2]));
  let mut x591: u32 = 0;
  let mut x592: u32 = 0;
  fiat_p256_mulx_u32(&mut x591, &mut x592, x7, (arg2[1]));
  let mut x593: u32 = 0;
  let mut x594: u32 = 0;
  fiat_p256_mulx_u32(&mut x593, &mut x594, x7, (arg2[0]));
  let mut x595: u32 = 0;
  let mut x596: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x595, &mut x596, 0x0, x594, x591);
  let mut x597: u32 = 0;
  let mut x598: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x597, &mut x598, x596, x592, x589);
  let mut x599: u32 = 0;
  let mut x600: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x599, &mut x600, x598, x590, x587);
  let mut x601: u32 = 0;
  let mut x602: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x601, &mut x602, x600, x588, x585);
  let mut x603: u32 = 0;
  let mut x604: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x603, &mut x604, x602, x586, x583);
  let mut x605: u32 = 0;
  let mut x606: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x605, &mut x606, x604, x584, x581);
  let mut x607: u32 = 0;
  let mut x608: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x607, &mut x608, x606, x582, x579);
  let mut x609: u32 = 0;
  let mut x610: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x609, &mut x610, x608, x580, (0x0 as u32));
  let mut x611: u32 = 0;
  let mut x612: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x611, &mut x612, 0x0, x561, x593);
  let mut x613: u32 = 0;
  let mut x614: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x613, &mut x614, x612, x563, x595);
  let mut x615: u32 = 0;
  let mut x616: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x615, &mut x616, x614, x565, x597);
  let mut x617: u32 = 0;
  let mut x618: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x617, &mut x618, x616, x567, x599);
  let mut x619: u32 = 0;
  let mut x620: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x619, &mut x620, x618, x569, x601);
  let mut x621: u32 = 0;
  let mut x622: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x621, &mut x622, x620, x571, x603);
  let mut x623: u32 = 0;
  let mut x624: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x623, &mut x624, x622, x573, x605);
  let mut x625: u32 = 0;
  let mut x626: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x625, &mut x626, x624, x575, x607);
  let mut x627: u32 = 0;
  let mut x628: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x627, &mut x628, x626, x577, x609);
  let mut x629: u32 = 0;
  let mut x630: u32 = 0;
  fiat_p256_mulx_u32(&mut x629, &mut x630, x611, 0xffffffff);
  let mut x631: u32 = 0;
  let mut x632: u32 = 0;
  fiat_p256_mulx_u32(&mut x631, &mut x632, x611, 0xffffffff);
  let mut x633: u32 = 0;
  let mut x634: u32 = 0;
  fiat_p256_mulx_u32(&mut x633, &mut x634, x611, 0xffffffff);
  let mut x635: u32 = 0;
  let mut x636: u32 = 0;
  fiat_p256_mulx_u32(&mut x635, &mut x636, x611, 0xffffffff);
  let mut x637: u32 = 0;
  let mut x638: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x637, &mut x638, 0x0, x636, x633);
  let mut x639: u32 = 0;
  let mut x640: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x639, &mut x640, x638, x634, x631);
  let mut x641: u32 = 0;
  let mut x642: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x641, &mut x642, x640, x632, (0x0 as u32));
  let mut x643: u32 = 0;
  let mut x644: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x643, &mut x644, 0x0, x611, x635);
  let mut x645: u32 = 0;
  let mut x646: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x645, &mut x646, x644, x613, x637);
  let mut x647: u32 = 0;
  let mut x648: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x647, &mut x648, x646, x615, x639);
  let mut x649: u32 = 0;
  let mut x650: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x649, &mut x650, x648, x617, x641);
  let mut x651: u32 = 0;
  let mut x652: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x651, &mut x652, x650, x619, (0x0 as u32));
  let mut x653: u32 = 0;
  let mut x654: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x653, &mut x654, x652, x621, (0x0 as u32));
  let mut x655: u32 = 0;
  let mut x656: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x655, &mut x656, x654, x623, x611);
  let mut x657: u32 = 0;
  let mut x658: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x657, &mut x658, x656, x625, x629);
  let mut x659: u32 = 0;
  let mut x660: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x659, &mut x660, x658, x627, x630);
  let mut x661: u32 = 0;
  let mut x662: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x661, &mut x662, x660, (x628 as u32), (0x0 as u32));
  let mut x663: u32 = 0;
  let mut x664: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x663, &mut x664, 0x0, x645, 0xffffffff);
  let mut x665: u32 = 0;
  let mut x666: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x665, &mut x666, x664, x647, 0xffffffff);
  let mut x667: u32 = 0;
  let mut x668: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x667, &mut x668, x666, x649, 0xffffffff);
  let mut x669: u32 = 0;
  let mut x670: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x669, &mut x670, x668, x651, (0x0 as u32));
  let mut x671: u32 = 0;
  let mut x672: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x671, &mut x672, x670, x653, (0x0 as u32));
  let mut x673: u32 = 0;
  let mut x674: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x673, &mut x674, x672, x655, (0x0 as u32));
  let mut x675: u32 = 0;
  let mut x676: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x675, &mut x676, x674, x657, (0x1 as u32));
  let mut x677: u32 = 0;
  let mut x678: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x677, &mut x678, x676, x659, 0xffffffff);
  let mut x679: u32 = 0;
  let mut x680: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x679, &mut x680, x678, x661, (0x0 as u32));
  let mut x681: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x681, x680, x663, x645);
  let mut x682: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x682, x680, x665, x647);
  let mut x683: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x683, x680, x667, x649);
  let mut x684: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x684, x680, x669, x651);
  let mut x685: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x685, x680, x671, x653);
  let mut x686: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x686, x680, x673, x655);
  let mut x687: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x687, x680, x675, x657);
  let mut x688: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x688, x680, x677, x659);
  out1[0] = x681;
  out1[1] = x682;
  out1[2] = x683;
  out1[3] = x684;
  out1[4] = x685;
  out1[5] = x686;
  out1[6] = x687;
  out1[7] = x688;
}

/*
 * The function fiat_p256_square squares a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
#[inline]
pub fn fiat_p256_square(out1: &mut [u32; 8], arg1: &[u32; 8]) -> () {
  let x1: u32 = (arg1[1]);
  let x2: u32 = (arg1[2]);
  let x3: u32 = (arg1[3]);
  let x4: u32 = (arg1[4]);
  let x5: u32 = (arg1[5]);
  let x6: u32 = (arg1[6]);
  let x7: u32 = (arg1[7]);
  let x8: u32 = (arg1[0]);
  let mut x9: u32 = 0;
  let mut x10: u32 = 0;
  fiat_p256_mulx_u32(&mut x9, &mut x10, x8, (arg1[7]));
  let mut x11: u32 = 0;
  let mut x12: u32 = 0;
  fiat_p256_mulx_u32(&mut x11, &mut x12, x8, (arg1[6]));
  let mut x13: u32 = 0;
  let mut x14: u32 = 0;
  fiat_p256_mulx_u32(&mut x13, &mut x14, x8, (arg1[5]));
  let mut x15: u32 = 0;
  let mut x16: u32 = 0;
  fiat_p256_mulx_u32(&mut x15, &mut x16, x8, (arg1[4]));
  let mut x17: u32 = 0;
  let mut x18: u32 = 0;
  fiat_p256_mulx_u32(&mut x17, &mut x18, x8, (arg1[3]));
  let mut x19: u32 = 0;
  let mut x20: u32 = 0;
  fiat_p256_mulx_u32(&mut x19, &mut x20, x8, (arg1[2]));
  let mut x21: u32 = 0;
  let mut x22: u32 = 0;
  fiat_p256_mulx_u32(&mut x21, &mut x22, x8, (arg1[1]));
  let mut x23: u32 = 0;
  let mut x24: u32 = 0;
  fiat_p256_mulx_u32(&mut x23, &mut x24, x8, (arg1[0]));
  let mut x25: u32 = 0;
  let mut x26: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x25, &mut x26, 0x0, x24, x21);
  let mut x27: u32 = 0;
  let mut x28: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x27, &mut x28, x26, x22, x19);
  let mut x29: u32 = 0;
  let mut x30: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x29, &mut x30, x28, x20, x17);
  let mut x31: u32 = 0;
  let mut x32: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x31, &mut x32, x30, x18, x15);
  let mut x33: u32 = 0;
  let mut x34: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x33, &mut x34, x32, x16, x13);
  let mut x35: u32 = 0;
  let mut x36: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x35, &mut x36, x34, x14, x11);
  let mut x37: u32 = 0;
  let mut x38: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x37, &mut x38, x36, x12, x9);
  let mut x39: u32 = 0;
  let mut x40: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x39, &mut x40, x38, x10, (0x0 as u32));
  let mut x41: u32 = 0;
  let mut x42: u32 = 0;
  fiat_p256_mulx_u32(&mut x41, &mut x42, x23, 0xffffffff);
  let mut x43: u32 = 0;
  let mut x44: u32 = 0;
  fiat_p256_mulx_u32(&mut x43, &mut x44, x23, 0xffffffff);
  let mut x45: u32 = 0;
  let mut x46: u32 = 0;
  fiat_p256_mulx_u32(&mut x45, &mut x46, x23, 0xffffffff);
  let mut x47: u32 = 0;
  let mut x48: u32 = 0;
  fiat_p256_mulx_u32(&mut x47, &mut x48, x23, 0xffffffff);
  let mut x49: u32 = 0;
  let mut x50: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x49, &mut x50, 0x0, x48, x45);
  let mut x51: u32 = 0;
  let mut x52: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x51, &mut x52, x50, x46, x43);
  let mut x53: u32 = 0;
  let mut x54: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x53, &mut x54, x52, x44, (0x0 as u32));
  let mut x55: u32 = 0;
  let mut x56: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x55, &mut x56, 0x0, x23, x47);
  let mut x57: u32 = 0;
  let mut x58: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x57, &mut x58, x56, x25, x49);
  let mut x59: u32 = 0;
  let mut x60: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x59, &mut x60, x58, x27, x51);
  let mut x61: u32 = 0;
  let mut x62: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x61, &mut x62, x60, x29, x53);
  let mut x63: u32 = 0;
  let mut x64: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x63, &mut x64, x62, x31, (0x0 as u32));
  let mut x65: u32 = 0;
  let mut x66: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x65, &mut x66, x64, x33, (0x0 as u32));
  let mut x67: u32 = 0;
  let mut x68: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x67, &mut x68, x66, x35, x23);
  let mut x69: u32 = 0;
  let mut x70: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x69, &mut x70, x68, x37, x41);
  let mut x71: u32 = 0;
  let mut x72: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x71, &mut x72, x70, x39, x42);
  let mut x73: u32 = 0;
  let mut x74: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x73, &mut x74, x72, (0x0 as u32), (0x0 as u32));
  let mut x75: u32 = 0;
  let mut x76: u32 = 0;
  fiat_p256_mulx_u32(&mut x75, &mut x76, x1, (arg1[7]));
  let mut x77: u32 = 0;
  let mut x78: u32 = 0;
  fiat_p256_mulx_u32(&mut x77, &mut x78, x1, (arg1[6]));
  let mut x79: u32 = 0;
  let mut x80: u32 = 0;
  fiat_p256_mulx_u32(&mut x79, &mut x80, x1, (arg1[5]));
  let mut x81: u32 = 0;
  let mut x82: u32 = 0;
  fiat_p256_mulx_u32(&mut x81, &mut x82, x1, (arg1[4]));
  let mut x83: u32 = 0;
  let mut x84: u32 = 0;
  fiat_p256_mulx_u32(&mut x83, &mut x84, x1, (arg1[3]));
  let mut x85: u32 = 0;
  let mut x86: u32 = 0;
  fiat_p256_mulx_u32(&mut x85, &mut x86, x1, (arg1[2]));
  let mut x87: u32 = 0;
  let mut x88: u32 = 0;
  fiat_p256_mulx_u32(&mut x87, &mut x88, x1, (arg1[1]));
  let mut x89: u32 = 0;
  let mut x90: u32 = 0;
  fiat_p256_mulx_u32(&mut x89, &mut x90, x1, (arg1[0]));
  let mut x91: u32 = 0;
  let mut x92: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x91, &mut x92, 0x0, x90, x87);
  let mut x93: u32 = 0;
  let mut x94: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x93, &mut x94, x92, x88, x85);
  let mut x95: u32 = 0;
  let mut x96: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x95, &mut x96, x94, x86, x83);
  let mut x97: u32 = 0;
  let mut x98: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x97, &mut x98, x96, x84, x81);
  let mut x99: u32 = 0;
  let mut x100: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x99, &mut x100, x98, x82, x79);
  let mut x101: u32 = 0;
  let mut x102: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x101, &mut x102, x100, x80, x77);
  let mut x103: u32 = 0;
  let mut x104: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x103, &mut x104, x102, x78, x75);
  let mut x105: u32 = 0;
  let mut x106: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x105, &mut x106, x104, x76, (0x0 as u32));
  let mut x107: u32 = 0;
  let mut x108: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x107, &mut x108, 0x0, x57, x89);
  let mut x109: u32 = 0;
  let mut x110: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x109, &mut x110, x108, x59, x91);
  let mut x111: u32 = 0;
  let mut x112: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x111, &mut x112, x110, x61, x93);
  let mut x113: u32 = 0;
  let mut x114: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x113, &mut x114, x112, x63, x95);
  let mut x115: u32 = 0;
  let mut x116: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x115, &mut x116, x114, x65, x97);
  let mut x117: u32 = 0;
  let mut x118: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x117, &mut x118, x116, x67, x99);
  let mut x119: u32 = 0;
  let mut x120: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x119, &mut x120, x118, x69, x101);
  let mut x121: u32 = 0;
  let mut x122: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x121, &mut x122, x120, x71, x103);
  let mut x123: u32 = 0;
  let mut x124: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x123, &mut x124, x122, ((x73 as fiat_p256_u1) as u32), x105);
  let mut x125: u32 = 0;
  let mut x126: u32 = 0;
  fiat_p256_mulx_u32(&mut x125, &mut x126, x107, 0xffffffff);
  let mut x127: u32 = 0;
  let mut x128: u32 = 0;
  fiat_p256_mulx_u32(&mut x127, &mut x128, x107, 0xffffffff);
  let mut x129: u32 = 0;
  let mut x130: u32 = 0;
  fiat_p256_mulx_u32(&mut x129, &mut x130, x107, 0xffffffff);
  let mut x131: u32 = 0;
  let mut x132: u32 = 0;
  fiat_p256_mulx_u32(&mut x131, &mut x132, x107, 0xffffffff);
  let mut x133: u32 = 0;
  let mut x134: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x133, &mut x134, 0x0, x132, x129);
  let mut x135: u32 = 0;
  let mut x136: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x135, &mut x136, x134, x130, x127);
  let mut x137: u32 = 0;
  let mut x138: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x137, &mut x138, x136, x128, (0x0 as u32));
  let mut x139: u32 = 0;
  let mut x140: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x139, &mut x140, 0x0, x107, x131);
  let mut x141: u32 = 0;
  let mut x142: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x141, &mut x142, x140, x109, x133);
  let mut x143: u32 = 0;
  let mut x144: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x143, &mut x144, x142, x111, x135);
  let mut x145: u32 = 0;
  let mut x146: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x145, &mut x146, x144, x113, x137);
  let mut x147: u32 = 0;
  let mut x148: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x147, &mut x148, x146, x115, (0x0 as u32));
  let mut x149: u32 = 0;
  let mut x150: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x149, &mut x150, x148, x117, (0x0 as u32));
  let mut x151: u32 = 0;
  let mut x152: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x151, &mut x152, x150, x119, x107);
  let mut x153: u32 = 0;
  let mut x154: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x153, &mut x154, x152, x121, x125);
  let mut x155: u32 = 0;
  let mut x156: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x155, &mut x156, x154, x123, x126);
  let mut x157: u32 = 0;
  let mut x158: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x157, &mut x158, x156, (x124 as u32), (0x0 as u32));
  let mut x159: u32 = 0;
  let mut x160: u32 = 0;
  fiat_p256_mulx_u32(&mut x159, &mut x160, x2, (arg1[7]));
  let mut x161: u32 = 0;
  let mut x162: u32 = 0;
  fiat_p256_mulx_u32(&mut x161, &mut x162, x2, (arg1[6]));
  let mut x163: u32 = 0;
  let mut x164: u32 = 0;
  fiat_p256_mulx_u32(&mut x163, &mut x164, x2, (arg1[5]));
  let mut x165: u32 = 0;
  let mut x166: u32 = 0;
  fiat_p256_mulx_u32(&mut x165, &mut x166, x2, (arg1[4]));
  let mut x167: u32 = 0;
  let mut x168: u32 = 0;
  fiat_p256_mulx_u32(&mut x167, &mut x168, x2, (arg1[3]));
  let mut x169: u32 = 0;
  let mut x170: u32 = 0;
  fiat_p256_mulx_u32(&mut x169, &mut x170, x2, (arg1[2]));
  let mut x171: u32 = 0;
  let mut x172: u32 = 0;
  fiat_p256_mulx_u32(&mut x171, &mut x172, x2, (arg1[1]));
  let mut x173: u32 = 0;
  let mut x174: u32 = 0;
  fiat_p256_mulx_u32(&mut x173, &mut x174, x2, (arg1[0]));
  let mut x175: u32 = 0;
  let mut x176: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x175, &mut x176, 0x0, x174, x171);
  let mut x177: u32 = 0;
  let mut x178: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x177, &mut x178, x176, x172, x169);
  let mut x179: u32 = 0;
  let mut x180: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x179, &mut x180, x178, x170, x167);
  let mut x181: u32 = 0;
  let mut x182: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x181, &mut x182, x180, x168, x165);
  let mut x183: u32 = 0;
  let mut x184: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x183, &mut x184, x182, x166, x163);
  let mut x185: u32 = 0;
  let mut x186: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x185, &mut x186, x184, x164, x161);
  let mut x187: u32 = 0;
  let mut x188: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x187, &mut x188, x186, x162, x159);
  let mut x189: u32 = 0;
  let mut x190: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x189, &mut x190, x188, x160, (0x0 as u32));
  let mut x191: u32 = 0;
  let mut x192: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x191, &mut x192, 0x0, x141, x173);
  let mut x193: u32 = 0;
  let mut x194: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x193, &mut x194, x192, x143, x175);
  let mut x195: u32 = 0;
  let mut x196: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x195, &mut x196, x194, x145, x177);
  let mut x197: u32 = 0;
  let mut x198: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x197, &mut x198, x196, x147, x179);
  let mut x199: u32 = 0;
  let mut x200: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x199, &mut x200, x198, x149, x181);
  let mut x201: u32 = 0;
  let mut x202: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x201, &mut x202, x200, x151, x183);
  let mut x203: u32 = 0;
  let mut x204: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x203, &mut x204, x202, x153, x185);
  let mut x205: u32 = 0;
  let mut x206: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x205, &mut x206, x204, x155, x187);
  let mut x207: u32 = 0;
  let mut x208: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x207, &mut x208, x206, x157, x189);
  let mut x209: u32 = 0;
  let mut x210: u32 = 0;
  fiat_p256_mulx_u32(&mut x209, &mut x210, x191, 0xffffffff);
  let mut x211: u32 = 0;
  let mut x212: u32 = 0;
  fiat_p256_mulx_u32(&mut x211, &mut x212, x191, 0xffffffff);
  let mut x213: u32 = 0;
  let mut x214: u32 = 0;
  fiat_p256_mulx_u32(&mut x213, &mut x214, x191, 0xffffffff);
  let mut x215: u32 = 0;
  let mut x216: u32 = 0;
  fiat_p256_mulx_u32(&mut x215, &mut x216, x191, 0xffffffff);
  let mut x217: u32 = 0;
  let mut x218: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x217, &mut x218, 0x0, x216, x213);
  let mut x219: u32 = 0;
  let mut x220: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x219, &mut x220, x218, x214, x211);
  let mut x221: u32 = 0;
  let mut x222: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x221, &mut x222, x220, x212, (0x0 as u32));
  let mut x223: u32 = 0;
  let mut x224: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x223, &mut x224, 0x0, x191, x215);
  let mut x225: u32 = 0;
  let mut x226: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x225, &mut x226, x224, x193, x217);
  let mut x227: u32 = 0;
  let mut x228: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x227, &mut x228, x226, x195, x219);
  let mut x229: u32 = 0;
  let mut x230: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x229, &mut x230, x228, x197, x221);
  let mut x231: u32 = 0;
  let mut x232: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x231, &mut x232, x230, x199, (0x0 as u32));
  let mut x233: u32 = 0;
  let mut x234: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x233, &mut x234, x232, x201, (0x0 as u32));
  let mut x235: u32 = 0;
  let mut x236: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x235, &mut x236, x234, x203, x191);
  let mut x237: u32 = 0;
  let mut x238: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x237, &mut x238, x236, x205, x209);
  let mut x239: u32 = 0;
  let mut x240: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x239, &mut x240, x238, x207, x210);
  let mut x241: u32 = 0;
  let mut x242: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x241, &mut x242, x240, (x208 as u32), (0x0 as u32));
  let mut x243: u32 = 0;
  let mut x244: u32 = 0;
  fiat_p256_mulx_u32(&mut x243, &mut x244, x3, (arg1[7]));
  let mut x245: u32 = 0;
  let mut x246: u32 = 0;
  fiat_p256_mulx_u32(&mut x245, &mut x246, x3, (arg1[6]));
  let mut x247: u32 = 0;
  let mut x248: u32 = 0;
  fiat_p256_mulx_u32(&mut x247, &mut x248, x3, (arg1[5]));
  let mut x249: u32 = 0;
  let mut x250: u32 = 0;
  fiat_p256_mulx_u32(&mut x249, &mut x250, x3, (arg1[4]));
  let mut x251: u32 = 0;
  let mut x252: u32 = 0;
  fiat_p256_mulx_u32(&mut x251, &mut x252, x3, (arg1[3]));
  let mut x253: u32 = 0;
  let mut x254: u32 = 0;
  fiat_p256_mulx_u32(&mut x253, &mut x254, x3, (arg1[2]));
  let mut x255: u32 = 0;
  let mut x256: u32 = 0;
  fiat_p256_mulx_u32(&mut x255, &mut x256, x3, (arg1[1]));
  let mut x257: u32 = 0;
  let mut x258: u32 = 0;
  fiat_p256_mulx_u32(&mut x257, &mut x258, x3, (arg1[0]));
  let mut x259: u32 = 0;
  let mut x260: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x259, &mut x260, 0x0, x258, x255);
  let mut x261: u32 = 0;
  let mut x262: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x261, &mut x262, x260, x256, x253);
  let mut x263: u32 = 0;
  let mut x264: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x263, &mut x264, x262, x254, x251);
  let mut x265: u32 = 0;
  let mut x266: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x265, &mut x266, x264, x252, x249);
  let mut x267: u32 = 0;
  let mut x268: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x267, &mut x268, x266, x250, x247);
  let mut x269: u32 = 0;
  let mut x270: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x269, &mut x270, x268, x248, x245);
  let mut x271: u32 = 0;
  let mut x272: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x271, &mut x272, x270, x246, x243);
  let mut x273: u32 = 0;
  let mut x274: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x273, &mut x274, x272, x244, (0x0 as u32));
  let mut x275: u32 = 0;
  let mut x276: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x275, &mut x276, 0x0, x225, x257);
  let mut x277: u32 = 0;
  let mut x278: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x277, &mut x278, x276, x227, x259);
  let mut x279: u32 = 0;
  let mut x280: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x279, &mut x280, x278, x229, x261);
  let mut x281: u32 = 0;
  let mut x282: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x281, &mut x282, x280, x231, x263);
  let mut x283: u32 = 0;
  let mut x284: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x283, &mut x284, x282, x233, x265);
  let mut x285: u32 = 0;
  let mut x286: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x285, &mut x286, x284, x235, x267);
  let mut x287: u32 = 0;
  let mut x288: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x287, &mut x288, x286, x237, x269);
  let mut x289: u32 = 0;
  let mut x290: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x289, &mut x290, x288, x239, x271);
  let mut x291: u32 = 0;
  let mut x292: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x291, &mut x292, x290, x241, x273);
  let mut x293: u32 = 0;
  let mut x294: u32 = 0;
  fiat_p256_mulx_u32(&mut x293, &mut x294, x275, 0xffffffff);
  let mut x295: u32 = 0;
  let mut x296: u32 = 0;
  fiat_p256_mulx_u32(&mut x295, &mut x296, x275, 0xffffffff);
  let mut x297: u32 = 0;
  let mut x298: u32 = 0;
  fiat_p256_mulx_u32(&mut x297, &mut x298, x275, 0xffffffff);
  let mut x299: u32 = 0;
  let mut x300: u32 = 0;
  fiat_p256_mulx_u32(&mut x299, &mut x300, x275, 0xffffffff);
  let mut x301: u32 = 0;
  let mut x302: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x301, &mut x302, 0x0, x300, x297);
  let mut x303: u32 = 0;
  let mut x304: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x303, &mut x304, x302, x298, x295);
  let mut x305: u32 = 0;
  let mut x306: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x305, &mut x306, x304, x296, (0x0 as u32));
  let mut x307: u32 = 0;
  let mut x308: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x307, &mut x308, 0x0, x275, x299);
  let mut x309: u32 = 0;
  let mut x310: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x309, &mut x310, x308, x277, x301);
  let mut x311: u32 = 0;
  let mut x312: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x311, &mut x312, x310, x279, x303);
  let mut x313: u32 = 0;
  let mut x314: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x313, &mut x314, x312, x281, x305);
  let mut x315: u32 = 0;
  let mut x316: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x315, &mut x316, x314, x283, (0x0 as u32));
  let mut x317: u32 = 0;
  let mut x318: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x317, &mut x318, x316, x285, (0x0 as u32));
  let mut x319: u32 = 0;
  let mut x320: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x319, &mut x320, x318, x287, x275);
  let mut x321: u32 = 0;
  let mut x322: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x321, &mut x322, x320, x289, x293);
  let mut x323: u32 = 0;
  let mut x324: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x323, &mut x324, x322, x291, x294);
  let mut x325: u32 = 0;
  let mut x326: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x325, &mut x326, x324, (x292 as u32), (0x0 as u32));
  let mut x327: u32 = 0;
  let mut x328: u32 = 0;
  fiat_p256_mulx_u32(&mut x327, &mut x328, x4, (arg1[7]));
  let mut x329: u32 = 0;
  let mut x330: u32 = 0;
  fiat_p256_mulx_u32(&mut x329, &mut x330, x4, (arg1[6]));
  let mut x331: u32 = 0;
  let mut x332: u32 = 0;
  fiat_p256_mulx_u32(&mut x331, &mut x332, x4, (arg1[5]));
  let mut x333: u32 = 0;
  let mut x334: u32 = 0;
  fiat_p256_mulx_u32(&mut x333, &mut x334, x4, (arg1[4]));
  let mut x335: u32 = 0;
  let mut x336: u32 = 0;
  fiat_p256_mulx_u32(&mut x335, &mut x336, x4, (arg1[3]));
  let mut x337: u32 = 0;
  let mut x338: u32 = 0;
  fiat_p256_mulx_u32(&mut x337, &mut x338, x4, (arg1[2]));
  let mut x339: u32 = 0;
  let mut x340: u32 = 0;
  fiat_p256_mulx_u32(&mut x339, &mut x340, x4, (arg1[1]));
  let mut x341: u32 = 0;
  let mut x342: u32 = 0;
  fiat_p256_mulx_u32(&mut x341, &mut x342, x4, (arg1[0]));
  let mut x343: u32 = 0;
  let mut x344: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x343, &mut x344, 0x0, x342, x339);
  let mut x345: u32 = 0;
  let mut x346: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x345, &mut x346, x344, x340, x337);
  let mut x347: u32 = 0;
  let mut x348: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x347, &mut x348, x346, x338, x335);
  let mut x349: u32 = 0;
  let mut x350: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x349, &mut x350, x348, x336, x333);
  let mut x351: u32 = 0;
  let mut x352: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x351, &mut x352, x350, x334, x331);
  let mut x353: u32 = 0;
  let mut x354: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x353, &mut x354, x352, x332, x329);
  let mut x355: u32 = 0;
  let mut x356: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x355, &mut x356, x354, x330, x327);
  let mut x357: u32 = 0;
  let mut x358: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x357, &mut x358, x356, x328, (0x0 as u32));
  let mut x359: u32 = 0;
  let mut x360: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x359, &mut x360, 0x0, x309, x341);
  let mut x361: u32 = 0;
  let mut x362: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x361, &mut x362, x360, x311, x343);
  let mut x363: u32 = 0;
  let mut x364: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x363, &mut x364, x362, x313, x345);
  let mut x365: u32 = 0;
  let mut x366: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x365, &mut x366, x364, x315, x347);
  let mut x367: u32 = 0;
  let mut x368: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x367, &mut x368, x366, x317, x349);
  let mut x369: u32 = 0;
  let mut x370: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x369, &mut x370, x368, x319, x351);
  let mut x371: u32 = 0;
  let mut x372: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x371, &mut x372, x370, x321, x353);
  let mut x373: u32 = 0;
  let mut x374: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x373, &mut x374, x372, x323, x355);
  let mut x375: u32 = 0;
  let mut x376: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x375, &mut x376, x374, x325, x357);
  let mut x377: u32 = 0;
  let mut x378: u32 = 0;
  fiat_p256_mulx_u32(&mut x377, &mut x378, x359, 0xffffffff);
  let mut x379: u32 = 0;
  let mut x380: u32 = 0;
  fiat_p256_mulx_u32(&mut x379, &mut x380, x359, 0xffffffff);
  let mut x381: u32 = 0;
  let mut x382: u32 = 0;
  fiat_p256_mulx_u32(&mut x381, &mut x382, x359, 0xffffffff);
  let mut x383: u32 = 0;
  let mut x384: u32 = 0;
  fiat_p256_mulx_u32(&mut x383, &mut x384, x359, 0xffffffff);
  let mut x385: u32 = 0;
  let mut x386: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x385, &mut x386, 0x0, x384, x381);
  let mut x387: u32 = 0;
  let mut x388: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x387, &mut x388, x386, x382, x379);
  let mut x389: u32 = 0;
  let mut x390: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x389, &mut x390, x388, x380, (0x0 as u32));
  let mut x391: u32 = 0;
  let mut x392: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x391, &mut x392, 0x0, x359, x383);
  let mut x393: u32 = 0;
  let mut x394: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x393, &mut x394, x392, x361, x385);
  let mut x395: u32 = 0;
  let mut x396: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x395, &mut x396, x394, x363, x387);
  let mut x397: u32 = 0;
  let mut x398: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x397, &mut x398, x396, x365, x389);
  let mut x399: u32 = 0;
  let mut x400: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x399, &mut x400, x398, x367, (0x0 as u32));
  let mut x401: u32 = 0;
  let mut x402: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x401, &mut x402, x400, x369, (0x0 as u32));
  let mut x403: u32 = 0;
  let mut x404: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x403, &mut x404, x402, x371, x359);
  let mut x405: u32 = 0;
  let mut x406: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x405, &mut x406, x404, x373, x377);
  let mut x407: u32 = 0;
  let mut x408: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x407, &mut x408, x406, x375, x378);
  let mut x409: u32 = 0;
  let mut x410: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x409, &mut x410, x408, (x376 as u32), (0x0 as u32));
  let mut x411: u32 = 0;
  let mut x412: u32 = 0;
  fiat_p256_mulx_u32(&mut x411, &mut x412, x5, (arg1[7]));
  let mut x413: u32 = 0;
  let mut x414: u32 = 0;
  fiat_p256_mulx_u32(&mut x413, &mut x414, x5, (arg1[6]));
  let mut x415: u32 = 0;
  let mut x416: u32 = 0;
  fiat_p256_mulx_u32(&mut x415, &mut x416, x5, (arg1[5]));
  let mut x417: u32 = 0;
  let mut x418: u32 = 0;
  fiat_p256_mulx_u32(&mut x417, &mut x418, x5, (arg1[4]));
  let mut x419: u32 = 0;
  let mut x420: u32 = 0;
  fiat_p256_mulx_u32(&mut x419, &mut x420, x5, (arg1[3]));
  let mut x421: u32 = 0;
  let mut x422: u32 = 0;
  fiat_p256_mulx_u32(&mut x421, &mut x422, x5, (arg1[2]));
  let mut x423: u32 = 0;
  let mut x424: u32 = 0;
  fiat_p256_mulx_u32(&mut x423, &mut x424, x5, (arg1[1]));
  let mut x425: u32 = 0;
  let mut x426: u32 = 0;
  fiat_p256_mulx_u32(&mut x425, &mut x426, x5, (arg1[0]));
  let mut x427: u32 = 0;
  let mut x428: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x427, &mut x428, 0x0, x426, x423);
  let mut x429: u32 = 0;
  let mut x430: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x429, &mut x430, x428, x424, x421);
  let mut x431: u32 = 0;
  let mut x432: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x431, &mut x432, x430, x422, x419);
  let mut x433: u32 = 0;
  let mut x434: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x433, &mut x434, x432, x420, x417);
  let mut x435: u32 = 0;
  let mut x436: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x435, &mut x436, x434, x418, x415);
  let mut x437: u32 = 0;
  let mut x438: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x437, &mut x438, x436, x416, x413);
  let mut x439: u32 = 0;
  let mut x440: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x439, &mut x440, x438, x414, x411);
  let mut x441: u32 = 0;
  let mut x442: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x441, &mut x442, x440, x412, (0x0 as u32));
  let mut x443: u32 = 0;
  let mut x444: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x443, &mut x444, 0x0, x393, x425);
  let mut x445: u32 = 0;
  let mut x446: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x445, &mut x446, x444, x395, x427);
  let mut x447: u32 = 0;
  let mut x448: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x447, &mut x448, x446, x397, x429);
  let mut x449: u32 = 0;
  let mut x450: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x449, &mut x450, x448, x399, x431);
  let mut x451: u32 = 0;
  let mut x452: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x451, &mut x452, x450, x401, x433);
  let mut x453: u32 = 0;
  let mut x454: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x453, &mut x454, x452, x403, x435);
  let mut x455: u32 = 0;
  let mut x456: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x455, &mut x456, x454, x405, x437);
  let mut x457: u32 = 0;
  let mut x458: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x457, &mut x458, x456, x407, x439);
  let mut x459: u32 = 0;
  let mut x460: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x459, &mut x460, x458, x409, x441);
  let mut x461: u32 = 0;
  let mut x462: u32 = 0;
  fiat_p256_mulx_u32(&mut x461, &mut x462, x443, 0xffffffff);
  let mut x463: u32 = 0;
  let mut x464: u32 = 0;
  fiat_p256_mulx_u32(&mut x463, &mut x464, x443, 0xffffffff);
  let mut x465: u32 = 0;
  let mut x466: u32 = 0;
  fiat_p256_mulx_u32(&mut x465, &mut x466, x443, 0xffffffff);
  let mut x467: u32 = 0;
  let mut x468: u32 = 0;
  fiat_p256_mulx_u32(&mut x467, &mut x468, x443, 0xffffffff);
  let mut x469: u32 = 0;
  let mut x470: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x469, &mut x470, 0x0, x468, x465);
  let mut x471: u32 = 0;
  let mut x472: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x471, &mut x472, x470, x466, x463);
  let mut x473: u32 = 0;
  let mut x474: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x473, &mut x474, x472, x464, (0x0 as u32));
  let mut x475: u32 = 0;
  let mut x476: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x475, &mut x476, 0x0, x443, x467);
  let mut x477: u32 = 0;
  let mut x478: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x477, &mut x478, x476, x445, x469);
  let mut x479: u32 = 0;
  let mut x480: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x479, &mut x480, x478, x447, x471);
  let mut x481: u32 = 0;
  let mut x482: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x481, &mut x482, x480, x449, x473);
  let mut x483: u32 = 0;
  let mut x484: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x483, &mut x484, x482, x451, (0x0 as u32));
  let mut x485: u32 = 0;
  let mut x486: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x485, &mut x486, x484, x453, (0x0 as u32));
  let mut x487: u32 = 0;
  let mut x488: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x487, &mut x488, x486, x455, x443);
  let mut x489: u32 = 0;
  let mut x490: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x489, &mut x490, x488, x457, x461);
  let mut x491: u32 = 0;
  let mut x492: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x491, &mut x492, x490, x459, x462);
  let mut x493: u32 = 0;
  let mut x494: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x493, &mut x494, x492, (x460 as u32), (0x0 as u32));
  let mut x495: u32 = 0;
  let mut x496: u32 = 0;
  fiat_p256_mulx_u32(&mut x495, &mut x496, x6, (arg1[7]));
  let mut x497: u32 = 0;
  let mut x498: u32 = 0;
  fiat_p256_mulx_u32(&mut x497, &mut x498, x6, (arg1[6]));
  let mut x499: u32 = 0;
  let mut x500: u32 = 0;
  fiat_p256_mulx_u32(&mut x499, &mut x500, x6, (arg1[5]));
  let mut x501: u32 = 0;
  let mut x502: u32 = 0;
  fiat_p256_mulx_u32(&mut x501, &mut x502, x6, (arg1[4]));
  let mut x503: u32 = 0;
  let mut x504: u32 = 0;
  fiat_p256_mulx_u32(&mut x503, &mut x504, x6, (arg1[3]));
  let mut x505: u32 = 0;
  let mut x506: u32 = 0;
  fiat_p256_mulx_u32(&mut x505, &mut x506, x6, (arg1[2]));
  let mut x507: u32 = 0;
  let mut x508: u32 = 0;
  fiat_p256_mulx_u32(&mut x507, &mut x508, x6, (arg1[1]));
  let mut x509: u32 = 0;
  let mut x510: u32 = 0;
  fiat_p256_mulx_u32(&mut x509, &mut x510, x6, (arg1[0]));
  let mut x511: u32 = 0;
  let mut x512: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x511, &mut x512, 0x0, x510, x507);
  let mut x513: u32 = 0;
  let mut x514: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x513, &mut x514, x512, x508, x505);
  let mut x515: u32 = 0;
  let mut x516: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x515, &mut x516, x514, x506, x503);
  let mut x517: u32 = 0;
  let mut x518: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x517, &mut x518, x516, x504, x501);
  let mut x519: u32 = 0;
  let mut x520: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x519, &mut x520, x518, x502, x499);
  let mut x521: u32 = 0;
  let mut x522: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x521, &mut x522, x520, x500, x497);
  let mut x523: u32 = 0;
  let mut x524: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x523, &mut x524, x522, x498, x495);
  let mut x525: u32 = 0;
  let mut x526: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x525, &mut x526, x524, x496, (0x0 as u32));
  let mut x527: u32 = 0;
  let mut x528: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x527, &mut x528, 0x0, x477, x509);
  let mut x529: u32 = 0;
  let mut x530: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x529, &mut x530, x528, x479, x511);
  let mut x531: u32 = 0;
  let mut x532: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x531, &mut x532, x530, x481, x513);
  let mut x533: u32 = 0;
  let mut x534: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x533, &mut x534, x532, x483, x515);
  let mut x535: u32 = 0;
  let mut x536: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x535, &mut x536, x534, x485, x517);
  let mut x537: u32 = 0;
  let mut x538: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x537, &mut x538, x536, x487, x519);
  let mut x539: u32 = 0;
  let mut x540: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x539, &mut x540, x538, x489, x521);
  let mut x541: u32 = 0;
  let mut x542: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x541, &mut x542, x540, x491, x523);
  let mut x543: u32 = 0;
  let mut x544: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x543, &mut x544, x542, x493, x525);
  let mut x545: u32 = 0;
  let mut x546: u32 = 0;
  fiat_p256_mulx_u32(&mut x545, &mut x546, x527, 0xffffffff);
  let mut x547: u32 = 0;
  let mut x548: u32 = 0;
  fiat_p256_mulx_u32(&mut x547, &mut x548, x527, 0xffffffff);
  let mut x549: u32 = 0;
  let mut x550: u32 = 0;
  fiat_p256_mulx_u32(&mut x549, &mut x550, x527, 0xffffffff);
  let mut x551: u32 = 0;
  let mut x552: u32 = 0;
  fiat_p256_mulx_u32(&mut x551, &mut x552, x527, 0xffffffff);
  let mut x553: u32 = 0;
  let mut x554: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x553, &mut x554, 0x0, x552, x549);
  let mut x555: u32 = 0;
  let mut x556: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x555, &mut x556, x554, x550, x547);
  let mut x557: u32 = 0;
  let mut x558: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x557, &mut x558, x556, x548, (0x0 as u32));
  let mut x559: u32 = 0;
  let mut x560: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x559, &mut x560, 0x0, x527, x551);
  let mut x561: u32 = 0;
  let mut x562: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x561, &mut x562, x560, x529, x553);
  let mut x563: u32 = 0;
  let mut x564: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x563, &mut x564, x562, x531, x555);
  let mut x565: u32 = 0;
  let mut x566: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x565, &mut x566, x564, x533, x557);
  let mut x567: u32 = 0;
  let mut x568: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x567, &mut x568, x566, x535, (0x0 as u32));
  let mut x569: u32 = 0;
  let mut x570: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x569, &mut x570, x568, x537, (0x0 as u32));
  let mut x571: u32 = 0;
  let mut x572: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x571, &mut x572, x570, x539, x527);
  let mut x573: u32 = 0;
  let mut x574: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x573, &mut x574, x572, x541, x545);
  let mut x575: u32 = 0;
  let mut x576: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x575, &mut x576, x574, x543, x546);
  let mut x577: u32 = 0;
  let mut x578: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x577, &mut x578, x576, (x544 as u32), (0x0 as u32));
  let mut x579: u32 = 0;
  let mut x580: u32 = 0;
  fiat_p256_mulx_u32(&mut x579, &mut x580, x7, (arg1[7]));
  let mut x581: u32 = 0;
  let mut x582: u32 = 0;
  fiat_p256_mulx_u32(&mut x581, &mut x582, x7, (arg1[6]));
  let mut x583: u32 = 0;
  let mut x584: u32 = 0;
  fiat_p256_mulx_u32(&mut x583, &mut x584, x7, (arg1[5]));
  let mut x585: u32 = 0;
  let mut x586: u32 = 0;
  fiat_p256_mulx_u32(&mut x585, &mut x586, x7, (arg1[4]));
  let mut x587: u32 = 0;
  let mut x588: u32 = 0;
  fiat_p256_mulx_u32(&mut x587, &mut x588, x7, (arg1[3]));
  let mut x589: u32 = 0;
  let mut x590: u32 = 0;
  fiat_p256_mulx_u32(&mut x589, &mut x590, x7, (arg1[2]));
  let mut x591: u32 = 0;
  let mut x592: u32 = 0;
  fiat_p256_mulx_u32(&mut x591, &mut x592, x7, (arg1[1]));
  let mut x593: u32 = 0;
  let mut x594: u32 = 0;
  fiat_p256_mulx_u32(&mut x593, &mut x594, x7, (arg1[0]));
  let mut x595: u32 = 0;
  let mut x596: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x595, &mut x596, 0x0, x594, x591);
  let mut x597: u32 = 0;
  let mut x598: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x597, &mut x598, x596, x592, x589);
  let mut x599: u32 = 0;
  let mut x600: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x599, &mut x600, x598, x590, x587);
  let mut x601: u32 = 0;
  let mut x602: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x601, &mut x602, x600, x588, x585);
  let mut x603: u32 = 0;
  let mut x604: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x603, &mut x604, x602, x586, x583);
  let mut x605: u32 = 0;
  let mut x606: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x605, &mut x606, x604, x584, x581);
  let mut x607: u32 = 0;
  let mut x608: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x607, &mut x608, x606, x582, x579);
  let mut x609: u32 = 0;
  let mut x610: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x609, &mut x610, x608, x580, (0x0 as u32));
  let mut x611: u32 = 0;
  let mut x612: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x611, &mut x612, 0x0, x561, x593);
  let mut x613: u32 = 0;
  let mut x614: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x613, &mut x614, x612, x563, x595);
  let mut x615: u32 = 0;
  let mut x616: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x615, &mut x616, x614, x565, x597);
  let mut x617: u32 = 0;
  let mut x618: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x617, &mut x618, x616, x567, x599);
  let mut x619: u32 = 0;
  let mut x620: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x619, &mut x620, x618, x569, x601);
  let mut x621: u32 = 0;
  let mut x622: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x621, &mut x622, x620, x571, x603);
  let mut x623: u32 = 0;
  let mut x624: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x623, &mut x624, x622, x573, x605);
  let mut x625: u32 = 0;
  let mut x626: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x625, &mut x626, x624, x575, x607);
  let mut x627: u32 = 0;
  let mut x628: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x627, &mut x628, x626, x577, x609);
  let mut x629: u32 = 0;
  let mut x630: u32 = 0;
  fiat_p256_mulx_u32(&mut x629, &mut x630, x611, 0xffffffff);
  let mut x631: u32 = 0;
  let mut x632: u32 = 0;
  fiat_p256_mulx_u32(&mut x631, &mut x632, x611, 0xffffffff);
  let mut x633: u32 = 0;
  let mut x634: u32 = 0;
  fiat_p256_mulx_u32(&mut x633, &mut x634, x611, 0xffffffff);
  let mut x635: u32 = 0;
  let mut x636: u32 = 0;
  fiat_p256_mulx_u32(&mut x635, &mut x636, x611, 0xffffffff);
  let mut x637: u32 = 0;
  let mut x638: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x637, &mut x638, 0x0, x636, x633);
  let mut x639: u32 = 0;
  let mut x640: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x639, &mut x640, x638, x634, x631);
  let mut x641: u32 = 0;
  let mut x642: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x641, &mut x642, x640, x632, (0x0 as u32));
  let mut x643: u32 = 0;
  let mut x644: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x643, &mut x644, 0x0, x611, x635);
  let mut x645: u32 = 0;
  let mut x646: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x645, &mut x646, x644, x613, x637);
  let mut x647: u32 = 0;
  let mut x648: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x647, &mut x648, x646, x615, x639);
  let mut x649: u32 = 0;
  let mut x650: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x649, &mut x650, x648, x617, x641);
  let mut x651: u32 = 0;
  let mut x652: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x651, &mut x652, x650, x619, (0x0 as u32));
  let mut x653: u32 = 0;
  let mut x654: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x653, &mut x654, x652, x621, (0x0 as u32));
  let mut x655: u32 = 0;
  let mut x656: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x655, &mut x656, x654, x623, x611);
  let mut x657: u32 = 0;
  let mut x658: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x657, &mut x658, x656, x625, x629);
  let mut x659: u32 = 0;
  let mut x660: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x659, &mut x660, x658, x627, x630);
  let mut x661: u32 = 0;
  let mut x662: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x661, &mut x662, x660, (x628 as u32), (0x0 as u32));
  let mut x663: u32 = 0;
  let mut x664: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x663, &mut x664, 0x0, x645, 0xffffffff);
  let mut x665: u32 = 0;
  let mut x666: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x665, &mut x666, x664, x647, 0xffffffff);
  let mut x667: u32 = 0;
  let mut x668: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x667, &mut x668, x666, x649, 0xffffffff);
  let mut x669: u32 = 0;
  let mut x670: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x669, &mut x670, x668, x651, (0x0 as u32));
  let mut x671: u32 = 0;
  let mut x672: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x671, &mut x672, x670, x653, (0x0 as u32));
  let mut x673: u32 = 0;
  let mut x674: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x673, &mut x674, x672, x655, (0x0 as u32));
  let mut x675: u32 = 0;
  let mut x676: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x675, &mut x676, x674, x657, (0x1 as u32));
  let mut x677: u32 = 0;
  let mut x678: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x677, &mut x678, x676, x659, 0xffffffff);
  let mut x679: u32 = 0;
  let mut x680: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x679, &mut x680, x678, x661, (0x0 as u32));
  let mut x681: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x681, x680, x663, x645);
  let mut x682: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x682, x680, x665, x647);
  let mut x683: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x683, x680, x667, x649);
  let mut x684: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x684, x680, x669, x651);
  let mut x685: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x685, x680, x671, x653);
  let mut x686: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x686, x680, x673, x655);
  let mut x687: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x687, x680, x675, x657);
  let mut x688: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x688, x680, x677, x659);
  out1[0] = x681;
  out1[1] = x682;
  out1[2] = x683;
  out1[3] = x684;
  out1[4] = x685;
  out1[5] = x686;
  out1[6] = x687;
  out1[7] = x688;
}

/*
 * The function fiat_p256_add adds two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 *   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
#[inline]
pub fn fiat_p256_add(out1: &mut [u32; 8], arg1: &[u32; 8], arg2: &[u32; 8]) -> () {
  let mut x1: u32 = 0;
  let mut x2: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1, &mut x2, 0x0, (arg1[0]), (arg2[0]));
  let mut x3: u32 = 0;
  let mut x4: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3, &mut x4, x2, (arg1[1]), (arg2[1]));
  let mut x5: u32 = 0;
  let mut x6: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x5, &mut x6, x4, (arg1[2]), (arg2[2]));
  let mut x7: u32 = 0;
  let mut x8: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x7, &mut x8, x6, (arg1[3]), (arg2[3]));
  let mut x9: u32 = 0;
  let mut x10: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x9, &mut x10, x8, (arg1[4]), (arg2[4]));
  let mut x11: u32 = 0;
  let mut x12: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x11, &mut x12, x10, (arg1[5]), (arg2[5]));
  let mut x13: u32 = 0;
  let mut x14: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x13, &mut x14, x12, (arg1[6]), (arg2[6]));
  let mut x15: u32 = 0;
  let mut x16: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x15, &mut x16, x14, (arg1[7]), (arg2[7]));
  let mut x17: u32 = 0;
  let mut x18: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x17, &mut x18, 0x0, x1, 0xffffffff);
  let mut x19: u32 = 0;
  let mut x20: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x19, &mut x20, x18, x3, 0xffffffff);
  let mut x21: u32 = 0;
  let mut x22: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x21, &mut x22, x20, x5, 0xffffffff);
  let mut x23: u32 = 0;
  let mut x24: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x23, &mut x24, x22, x7, (0x0 as u32));
  let mut x25: u32 = 0;
  let mut x26: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x25, &mut x26, x24, x9, (0x0 as u32));
  let mut x27: u32 = 0;
  let mut x28: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x27, &mut x28, x26, x11, (0x0 as u32));
  let mut x29: u32 = 0;
  let mut x30: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x29, &mut x30, x28, x13, (0x1 as u32));
  let mut x31: u32 = 0;
  let mut x32: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x31, &mut x32, x30, x15, 0xffffffff);
  let mut x33: u32 = 0;
  let mut x34: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x33, &mut x34, x32, (x16 as u32), (0x0 as u32));
  let mut x35: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x35, x34, x17, x1);
  let mut x36: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x36, x34, x19, x3);
  let mut x37: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x37, x34, x21, x5);
  let mut x38: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x38, x34, x23, x7);
  let mut x39: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x39, x34, x25, x9);
  let mut x40: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x40, x34, x27, x11);
  let mut x41: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x41, x34, x29, x13);
  let mut x42: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x42, x34, x31, x15);
  out1[0] = x35;
  out1[1] = x36;
  out1[2] = x37;
  out1[3] = x38;
  out1[4] = x39;
  out1[5] = x40;
  out1[6] = x41;
  out1[7] = x42;
}

/*
 * The function fiat_p256_sub subtracts two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 *   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
#[inline]
pub fn fiat_p256_sub(out1: &mut [u32; 8], arg1: &[u32; 8], arg2: &[u32; 8]) -> () {
  let mut x1: u32 = 0;
  let mut x2: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1, &mut x2, 0x0, (arg1[0]), (arg2[0]));
  let mut x3: u32 = 0;
  let mut x4: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x3, &mut x4, x2, (arg1[1]), (arg2[1]));
  let mut x5: u32 = 0;
  let mut x6: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x5, &mut x6, x4, (arg1[2]), (arg2[2]));
  let mut x7: u32 = 0;
  let mut x8: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x7, &mut x8, x6, (arg1[3]), (arg2[3]));
  let mut x9: u32 = 0;
  let mut x10: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x9, &mut x10, x8, (arg1[4]), (arg2[4]));
  let mut x11: u32 = 0;
  let mut x12: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x11, &mut x12, x10, (arg1[5]), (arg2[5]));
  let mut x13: u32 = 0;
  let mut x14: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x13, &mut x14, x12, (arg1[6]), (arg2[6]));
  let mut x15: u32 = 0;
  let mut x16: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x15, &mut x16, x14, (arg1[7]), (arg2[7]));
  let mut x17: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x17, x16, (0x0 as u32), 0xffffffff);
  let mut x18: u32 = 0;
  let mut x19: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x18, &mut x19, 0x0, x1, (x17 & 0xffffffff));
  let mut x20: u32 = 0;
  let mut x21: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x20, &mut x21, x19, x3, (x17 & 0xffffffff));
  let mut x22: u32 = 0;
  let mut x23: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x22, &mut x23, x21, x5, (x17 & 0xffffffff));
  let mut x24: u32 = 0;
  let mut x25: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x24, &mut x25, x23, x7, (0x0 as u32));
  let mut x26: u32 = 0;
  let mut x27: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x26, &mut x27, x25, x9, (0x0 as u32));
  let mut x28: u32 = 0;
  let mut x29: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x28, &mut x29, x27, x11, (0x0 as u32));
  let mut x30: u32 = 0;
  let mut x31: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x30, &mut x31, x29, x13, (((x17 & (0x1 as u32)) as fiat_p256_u1) as u32));
  let mut x32: u32 = 0;
  let mut x33: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x32, &mut x33, x31, x15, (x17 & 0xffffffff));
  out1[0] = x18;
  out1[1] = x20;
  out1[2] = x22;
  out1[3] = x24;
  out1[4] = x26;
  out1[5] = x28;
  out1[6] = x30;
  out1[7] = x32;
}

/*
 * The function fiat_p256_opp negates a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
#[inline]
pub fn fiat_p256_opp(out1: &mut [u32; 8], arg1: &[u32; 8]) -> () {
  let mut x1: u32 = 0;
  let mut x2: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1, &mut x2, 0x0, (0x0 as u32), (arg1[0]));
  let mut x3: u32 = 0;
  let mut x4: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x3, &mut x4, x2, (0x0 as u32), (arg1[1]));
  let mut x5: u32 = 0;
  let mut x6: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x5, &mut x6, x4, (0x0 as u32), (arg1[2]));
  let mut x7: u32 = 0;
  let mut x8: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x7, &mut x8, x6, (0x0 as u32), (arg1[3]));
  let mut x9: u32 = 0;
  let mut x10: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x9, &mut x10, x8, (0x0 as u32), (arg1[4]));
  let mut x11: u32 = 0;
  let mut x12: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x11, &mut x12, x10, (0x0 as u32), (arg1[5]));
  let mut x13: u32 = 0;
  let mut x14: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x13, &mut x14, x12, (0x0 as u32), (arg1[6]));
  let mut x15: u32 = 0;
  let mut x16: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x15, &mut x16, x14, (0x0 as u32), (arg1[7]));
  let mut x17: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x17, x16, (0x0 as u32), 0xffffffff);
  let mut x18: u32 = 0;
  let mut x19: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x18, &mut x19, 0x0, x1, (x17 & 0xffffffff));
  let mut x20: u32 = 0;
  let mut x21: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x20, &mut x21, x19, x3, (x17 & 0xffffffff));
  let mut x22: u32 = 0;
  let mut x23: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x22, &mut x23, x21, x5, (x17 & 0xffffffff));
  let mut x24: u32 = 0;
  let mut x25: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x24, &mut x25, x23, x7, (0x0 as u32));
  let mut x26: u32 = 0;
  let mut x27: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x26, &mut x27, x25, x9, (0x0 as u32));
  let mut x28: u32 = 0;
  let mut x29: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x28, &mut x29, x27, x11, (0x0 as u32));
  let mut x30: u32 = 0;
  let mut x31: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x30, &mut x31, x29, x13, (((x17 & (0x1 as u32)) as fiat_p256_u1) as u32));
  let mut x32: u32 = 0;
  let mut x33: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x32, &mut x33, x31, x15, (x17 & 0xffffffff));
  out1[0] = x18;
  out1[1] = x20;
  out1[2] = x22;
  out1[3] = x24;
  out1[4] = x26;
  out1[5] = x28;
  out1[6] = x30;
  out1[7] = x32;
}

/*
 * The function fiat_p256_from_montgomery translates a field element out of the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = (eval arg1 * ((2^32)⁻¹ mod m)^8) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
#[inline]
pub fn fiat_p256_from_montgomery(out1: &mut [u32; 8], arg1: &[u32; 8]) -> () {
  let x1: u32 = (arg1[0]);
  let mut x2: u32 = 0;
  let mut x3: u32 = 0;
  fiat_p256_mulx_u32(&mut x2, &mut x3, x1, 0xffffffff);
  let mut x4: u32 = 0;
  let mut x5: u32 = 0;
  fiat_p256_mulx_u32(&mut x4, &mut x5, x1, 0xffffffff);
  let mut x6: u32 = 0;
  let mut x7: u32 = 0;
  fiat_p256_mulx_u32(&mut x6, &mut x7, x1, 0xffffffff);
  let mut x8: u32 = 0;
  let mut x9: u32 = 0;
  fiat_p256_mulx_u32(&mut x8, &mut x9, x1, 0xffffffff);
  let mut x10: u32 = 0;
  let mut x11: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x10, &mut x11, 0x0, x9, x6);
  let mut x12: u32 = 0;
  let mut x13: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x12, &mut x13, x11, x7, x4);
  let mut x14: u32 = 0;
  let mut x15: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x14, &mut x15, 0x0, x1, x8);
  let mut x16: u32 = 0;
  let mut x17: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x16, &mut x17, x15, (0x0 as u32), x10);
  let mut x18: u32 = 0;
  let mut x19: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x18, &mut x19, x17, (0x0 as u32), x12);
  let mut x20: u32 = 0;
  let mut x21: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x20, &mut x21, x13, x5, (0x0 as u32));
  let mut x22: u32 = 0;
  let mut x23: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x22, &mut x23, x19, (0x0 as u32), x20);
  let mut x24: u32 = 0;
  let mut x25: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x24, &mut x25, 0x0, x16, (arg1[1]));
  let mut x26: u32 = 0;
  let mut x27: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x26, &mut x27, x25, x18, (0x0 as u32));
  let mut x28: u32 = 0;
  let mut x29: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x28, &mut x29, x27, x22, (0x0 as u32));
  let mut x30: u32 = 0;
  let mut x31: u32 = 0;
  fiat_p256_mulx_u32(&mut x30, &mut x31, x24, 0xffffffff);
  let mut x32: u32 = 0;
  let mut x33: u32 = 0;
  fiat_p256_mulx_u32(&mut x32, &mut x33, x24, 0xffffffff);
  let mut x34: u32 = 0;
  let mut x35: u32 = 0;
  fiat_p256_mulx_u32(&mut x34, &mut x35, x24, 0xffffffff);
  let mut x36: u32 = 0;
  let mut x37: u32 = 0;
  fiat_p256_mulx_u32(&mut x36, &mut x37, x24, 0xffffffff);
  let mut x38: u32 = 0;
  let mut x39: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x38, &mut x39, 0x0, x37, x34);
  let mut x40: u32 = 0;
  let mut x41: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x40, &mut x41, x39, x35, x32);
  let mut x42: u32 = 0;
  let mut x43: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x42, &mut x43, 0x0, x24, x36);
  let mut x44: u32 = 0;
  let mut x45: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x44, &mut x45, x43, x26, x38);
  let mut x46: u32 = 0;
  let mut x47: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x46, &mut x47, x45, x28, x40);
  let mut x48: u32 = 0;
  let mut x49: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x48, &mut x49, x41, x33, (0x0 as u32));
  let mut x50: u32 = 0;
  let mut x51: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x50, &mut x51, x23, (0x0 as u32), (0x0 as u32));
  let mut x52: u32 = 0;
  let mut x53: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x52, &mut x53, x29, ((x50 as fiat_p256_u1) as u32), (0x0 as u32));
  let mut x54: u32 = 0;
  let mut x55: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x54, &mut x55, x47, x52, x48);
  let mut x56: u32 = 0;
  let mut x57: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x56, &mut x57, 0x0, x2, x24);
  let mut x58: u32 = 0;
  let mut x59: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x58, &mut x59, x57, x3, x30);
  let mut x60: u32 = 0;
  let mut x61: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x60, &mut x61, 0x0, x44, (arg1[2]));
  let mut x62: u32 = 0;
  let mut x63: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x62, &mut x63, x61, x46, (0x0 as u32));
  let mut x64: u32 = 0;
  let mut x65: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x64, &mut x65, x63, x54, (0x0 as u32));
  let mut x66: u32 = 0;
  let mut x67: u32 = 0;
  fiat_p256_mulx_u32(&mut x66, &mut x67, x60, 0xffffffff);
  let mut x68: u32 = 0;
  let mut x69: u32 = 0;
  fiat_p256_mulx_u32(&mut x68, &mut x69, x60, 0xffffffff);
  let mut x70: u32 = 0;
  let mut x71: u32 = 0;
  fiat_p256_mulx_u32(&mut x70, &mut x71, x60, 0xffffffff);
  let mut x72: u32 = 0;
  let mut x73: u32 = 0;
  fiat_p256_mulx_u32(&mut x72, &mut x73, x60, 0xffffffff);
  let mut x74: u32 = 0;
  let mut x75: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x74, &mut x75, 0x0, x73, x70);
  let mut x76: u32 = 0;
  let mut x77: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x76, &mut x77, x75, x71, x68);
  let mut x78: u32 = 0;
  let mut x79: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x78, &mut x79, 0x0, x60, x72);
  let mut x80: u32 = 0;
  let mut x81: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x80, &mut x81, x79, x62, x74);
  let mut x82: u32 = 0;
  let mut x83: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x82, &mut x83, x81, x64, x76);
  let mut x84: u32 = 0;
  let mut x85: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x84, &mut x85, x77, x69, (0x0 as u32));
  let mut x86: u32 = 0;
  let mut x87: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x86, &mut x87, x55, (0x0 as u32), (0x0 as u32));
  let mut x88: u32 = 0;
  let mut x89: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x88, &mut x89, x65, ((x86 as fiat_p256_u1) as u32), (0x0 as u32));
  let mut x90: u32 = 0;
  let mut x91: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x90, &mut x91, x83, x88, x84);
  let mut x92: u32 = 0;
  let mut x93: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x92, &mut x93, x91, x1, (0x0 as u32));
  let mut x94: u32 = 0;
  let mut x95: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x94, &mut x95, x93, x56, (0x0 as u32));
  let mut x96: u32 = 0;
  let mut x97: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x96, &mut x97, x95, x58, x60);
  let mut x98: u32 = 0;
  let mut x99: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x98, &mut x99, x59, (0x0 as u32), x31);
  let mut x100: u32 = 0;
  let mut x101: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x100, &mut x101, x97, x98, x66);
  let mut x102: u32 = 0;
  let mut x103: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x102, &mut x103, 0x0, x80, (arg1[3]));
  let mut x104: u32 = 0;
  let mut x105: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x104, &mut x105, x103, x82, (0x0 as u32));
  let mut x106: u32 = 0;
  let mut x107: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x106, &mut x107, x105, x90, (0x0 as u32));
  let mut x108: u32 = 0;
  let mut x109: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x108, &mut x109, x107, x92, (0x0 as u32));
  let mut x110: u32 = 0;
  let mut x111: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x110, &mut x111, x109, x94, (0x0 as u32));
  let mut x112: u32 = 0;
  let mut x113: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x112, &mut x113, x111, x96, (0x0 as u32));
  let mut x114: u32 = 0;
  let mut x115: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x114, &mut x115, x113, x100, (0x0 as u32));
  let mut x116: u32 = 0;
  let mut x117: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x116, &mut x117, x101, (0x0 as u32), x67);
  let mut x118: u32 = 0;
  let mut x119: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x118, &mut x119, x115, x116, (0x0 as u32));
  let mut x120: u32 = 0;
  let mut x121: u32 = 0;
  fiat_p256_mulx_u32(&mut x120, &mut x121, x102, 0xffffffff);
  let mut x122: u32 = 0;
  let mut x123: u32 = 0;
  fiat_p256_mulx_u32(&mut x122, &mut x123, x102, 0xffffffff);
  let mut x124: u32 = 0;
  let mut x125: u32 = 0;
  fiat_p256_mulx_u32(&mut x124, &mut x125, x102, 0xffffffff);
  let mut x126: u32 = 0;
  let mut x127: u32 = 0;
  fiat_p256_mulx_u32(&mut x126, &mut x127, x102, 0xffffffff);
  let mut x128: u32 = 0;
  let mut x129: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x128, &mut x129, 0x0, x127, x124);
  let mut x130: u32 = 0;
  let mut x131: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x130, &mut x131, x129, x125, x122);
  let mut x132: u32 = 0;
  let mut x133: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x132, &mut x133, 0x0, x102, x126);
  let mut x134: u32 = 0;
  let mut x135: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x134, &mut x135, x133, x104, x128);
  let mut x136: u32 = 0;
  let mut x137: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x136, &mut x137, x135, x106, x130);
  let mut x138: u32 = 0;
  let mut x139: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x138, &mut x139, x131, x123, (0x0 as u32));
  let mut x140: u32 = 0;
  let mut x141: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x140, &mut x141, x137, x108, x138);
  let mut x142: u32 = 0;
  let mut x143: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x142, &mut x143, x141, x110, (0x0 as u32));
  let mut x144: u32 = 0;
  let mut x145: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x144, &mut x145, x143, x112, (0x0 as u32));
  let mut x146: u32 = 0;
  let mut x147: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x146, &mut x147, x145, x114, x102);
  let mut x148: u32 = 0;
  let mut x149: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x148, &mut x149, x147, x118, x120);
  let mut x150: u32 = 0;
  let mut x151: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x150, &mut x151, x119, (0x0 as u32), (0x0 as u32));
  let mut x152: u32 = 0;
  let mut x153: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x152, &mut x153, x149, ((x150 as fiat_p256_u1) as u32), x121);
  let mut x154: u32 = 0;
  let mut x155: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x154, &mut x155, 0x0, x134, (arg1[4]));
  let mut x156: u32 = 0;
  let mut x157: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x156, &mut x157, x155, x136, (0x0 as u32));
  let mut x158: u32 = 0;
  let mut x159: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x158, &mut x159, x157, x140, (0x0 as u32));
  let mut x160: u32 = 0;
  let mut x161: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x160, &mut x161, x159, x142, (0x0 as u32));
  let mut x162: u32 = 0;
  let mut x163: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x162, &mut x163, x161, x144, (0x0 as u32));
  let mut x164: u32 = 0;
  let mut x165: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x164, &mut x165, x163, x146, (0x0 as u32));
  let mut x166: u32 = 0;
  let mut x167: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x166, &mut x167, x165, x148, (0x0 as u32));
  let mut x168: u32 = 0;
  let mut x169: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x168, &mut x169, x167, x152, (0x0 as u32));
  let mut x170: u32 = 0;
  let mut x171: u32 = 0;
  fiat_p256_mulx_u32(&mut x170, &mut x171, x154, 0xffffffff);
  let mut x172: u32 = 0;
  let mut x173: u32 = 0;
  fiat_p256_mulx_u32(&mut x172, &mut x173, x154, 0xffffffff);
  let mut x174: u32 = 0;
  let mut x175: u32 = 0;
  fiat_p256_mulx_u32(&mut x174, &mut x175, x154, 0xffffffff);
  let mut x176: u32 = 0;
  let mut x177: u32 = 0;
  fiat_p256_mulx_u32(&mut x176, &mut x177, x154, 0xffffffff);
  let mut x178: u32 = 0;
  let mut x179: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x178, &mut x179, 0x0, x177, x174);
  let mut x180: u32 = 0;
  let mut x181: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x180, &mut x181, x179, x175, x172);
  let mut x182: u32 = 0;
  let mut x183: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x182, &mut x183, 0x0, x154, x176);
  let mut x184: u32 = 0;
  let mut x185: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x184, &mut x185, x183, x156, x178);
  let mut x186: u32 = 0;
  let mut x187: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x186, &mut x187, x185, x158, x180);
  let mut x188: u32 = 0;
  let mut x189: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x188, &mut x189, x181, x173, (0x0 as u32));
  let mut x190: u32 = 0;
  let mut x191: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x190, &mut x191, x187, x160, x188);
  let mut x192: u32 = 0;
  let mut x193: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x192, &mut x193, x191, x162, (0x0 as u32));
  let mut x194: u32 = 0;
  let mut x195: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x194, &mut x195, x193, x164, (0x0 as u32));
  let mut x196: u32 = 0;
  let mut x197: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x196, &mut x197, x195, x166, x154);
  let mut x198: u32 = 0;
  let mut x199: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x198, &mut x199, x197, x168, x170);
  let mut x200: u32 = 0;
  let mut x201: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x200, &mut x201, x153, (0x0 as u32), (0x0 as u32));
  let mut x202: u32 = 0;
  let mut x203: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x202, &mut x203, x169, ((x200 as fiat_p256_u1) as u32), (0x0 as u32));
  let mut x204: u32 = 0;
  let mut x205: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x204, &mut x205, x199, x202, x171);
  let mut x206: u32 = 0;
  let mut x207: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x206, &mut x207, 0x0, x184, (arg1[5]));
  let mut x208: u32 = 0;
  let mut x209: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x208, &mut x209, x207, x186, (0x0 as u32));
  let mut x210: u32 = 0;
  let mut x211: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x210, &mut x211, x209, x190, (0x0 as u32));
  let mut x212: u32 = 0;
  let mut x213: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x212, &mut x213, x211, x192, (0x0 as u32));
  let mut x214: u32 = 0;
  let mut x215: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x214, &mut x215, x213, x194, (0x0 as u32));
  let mut x216: u32 = 0;
  let mut x217: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x216, &mut x217, x215, x196, (0x0 as u32));
  let mut x218: u32 = 0;
  let mut x219: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x218, &mut x219, x217, x198, (0x0 as u32));
  let mut x220: u32 = 0;
  let mut x221: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x220, &mut x221, x219, x204, (0x0 as u32));
  let mut x222: u32 = 0;
  let mut x223: u32 = 0;
  fiat_p256_mulx_u32(&mut x222, &mut x223, x206, 0xffffffff);
  let mut x224: u32 = 0;
  let mut x225: u32 = 0;
  fiat_p256_mulx_u32(&mut x224, &mut x225, x206, 0xffffffff);
  let mut x226: u32 = 0;
  let mut x227: u32 = 0;
  fiat_p256_mulx_u32(&mut x226, &mut x227, x206, 0xffffffff);
  let mut x228: u32 = 0;
  let mut x229: u32 = 0;
  fiat_p256_mulx_u32(&mut x228, &mut x229, x206, 0xffffffff);
  let mut x230: u32 = 0;
  let mut x231: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x230, &mut x231, 0x0, x229, x226);
  let mut x232: u32 = 0;
  let mut x233: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x232, &mut x233, x231, x227, x224);
  let mut x234: u32 = 0;
  let mut x235: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x234, &mut x235, 0x0, x206, x228);
  let mut x236: u32 = 0;
  let mut x237: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x236, &mut x237, x235, x208, x230);
  let mut x238: u32 = 0;
  let mut x239: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x238, &mut x239, x237, x210, x232);
  let mut x240: u32 = 0;
  let mut x241: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x240, &mut x241, x233, x225, (0x0 as u32));
  let mut x242: u32 = 0;
  let mut x243: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x242, &mut x243, x239, x212, x240);
  let mut x244: u32 = 0;
  let mut x245: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x244, &mut x245, x243, x214, (0x0 as u32));
  let mut x246: u32 = 0;
  let mut x247: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x246, &mut x247, x245, x216, (0x0 as u32));
  let mut x248: u32 = 0;
  let mut x249: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x248, &mut x249, x247, x218, x206);
  let mut x250: u32 = 0;
  let mut x251: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x250, &mut x251, x249, x220, x222);
  let mut x252: u32 = 0;
  let mut x253: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x252, &mut x253, x205, (0x0 as u32), (0x0 as u32));
  let mut x254: u32 = 0;
  let mut x255: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x254, &mut x255, x221, ((x252 as fiat_p256_u1) as u32), (0x0 as u32));
  let mut x256: u32 = 0;
  let mut x257: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x256, &mut x257, x251, x254, x223);
  let mut x258: u32 = 0;
  let mut x259: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x258, &mut x259, 0x0, x236, (arg1[6]));
  let mut x260: u32 = 0;
  let mut x261: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x260, &mut x261, x259, x238, (0x0 as u32));
  let mut x262: u32 = 0;
  let mut x263: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x262, &mut x263, x261, x242, (0x0 as u32));
  let mut x264: u32 = 0;
  let mut x265: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x264, &mut x265, x263, x244, (0x0 as u32));
  let mut x266: u32 = 0;
  let mut x267: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x266, &mut x267, x265, x246, (0x0 as u32));
  let mut x268: u32 = 0;
  let mut x269: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x268, &mut x269, x267, x248, (0x0 as u32));
  let mut x270: u32 = 0;
  let mut x271: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x270, &mut x271, x269, x250, (0x0 as u32));
  let mut x272: u32 = 0;
  let mut x273: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x272, &mut x273, x271, x256, (0x0 as u32));
  let mut x274: u32 = 0;
  let mut x275: u32 = 0;
  fiat_p256_mulx_u32(&mut x274, &mut x275, x258, 0xffffffff);
  let mut x276: u32 = 0;
  let mut x277: u32 = 0;
  fiat_p256_mulx_u32(&mut x276, &mut x277, x258, 0xffffffff);
  let mut x278: u32 = 0;
  let mut x279: u32 = 0;
  fiat_p256_mulx_u32(&mut x278, &mut x279, x258, 0xffffffff);
  let mut x280: u32 = 0;
  let mut x281: u32 = 0;
  fiat_p256_mulx_u32(&mut x280, &mut x281, x258, 0xffffffff);
  let mut x282: u32 = 0;
  let mut x283: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x282, &mut x283, 0x0, x281, x278);
  let mut x284: u32 = 0;
  let mut x285: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x284, &mut x285, x283, x279, x276);
  let mut x286: u32 = 0;
  let mut x287: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x286, &mut x287, 0x0, x258, x280);
  let mut x288: u32 = 0;
  let mut x289: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x288, &mut x289, x287, x260, x282);
  let mut x290: u32 = 0;
  let mut x291: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x290, &mut x291, x289, x262, x284);
  let mut x292: u32 = 0;
  let mut x293: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x292, &mut x293, x285, x277, (0x0 as u32));
  let mut x294: u32 = 0;
  let mut x295: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x294, &mut x295, x291, x264, x292);
  let mut x296: u32 = 0;
  let mut x297: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x296, &mut x297, x295, x266, (0x0 as u32));
  let mut x298: u32 = 0;
  let mut x299: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x298, &mut x299, x297, x268, (0x0 as u32));
  let mut x300: u32 = 0;
  let mut x301: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x300, &mut x301, x299, x270, x258);
  let mut x302: u32 = 0;
  let mut x303: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x302, &mut x303, x301, x272, x274);
  let mut x304: u32 = 0;
  let mut x305: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x304, &mut x305, x257, (0x0 as u32), (0x0 as u32));
  let mut x306: u32 = 0;
  let mut x307: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x306, &mut x307, x273, ((x304 as fiat_p256_u1) as u32), (0x0 as u32));
  let mut x308: u32 = 0;
  let mut x309: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x308, &mut x309, x303, x306, x275);
  let mut x310: u32 = 0;
  let mut x311: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x310, &mut x311, 0x0, x288, (arg1[7]));
  let mut x312: u32 = 0;
  let mut x313: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x312, &mut x313, x311, x290, (0x0 as u32));
  let mut x314: u32 = 0;
  let mut x315: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x314, &mut x315, x313, x294, (0x0 as u32));
  let mut x316: u32 = 0;
  let mut x317: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x316, &mut x317, x315, x296, (0x0 as u32));
  let mut x318: u32 = 0;
  let mut x319: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x318, &mut x319, x317, x298, (0x0 as u32));
  let mut x320: u32 = 0;
  let mut x321: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x320, &mut x321, x319, x300, (0x0 as u32));
  let mut x322: u32 = 0;
  let mut x323: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x322, &mut x323, x321, x302, (0x0 as u32));
  let mut x324: u32 = 0;
  let mut x325: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x324, &mut x325, x323, x308, (0x0 as u32));
  let mut x326: u32 = 0;
  let mut x327: u32 = 0;
  fiat_p256_mulx_u32(&mut x326, &mut x327, x310, 0xffffffff);
  let mut x328: u32 = 0;
  let mut x329: u32 = 0;
  fiat_p256_mulx_u32(&mut x328, &mut x329, x310, 0xffffffff);
  let mut x330: u32 = 0;
  let mut x331: u32 = 0;
  fiat_p256_mulx_u32(&mut x330, &mut x331, x310, 0xffffffff);
  let mut x332: u32 = 0;
  let mut x333: u32 = 0;
  fiat_p256_mulx_u32(&mut x332, &mut x333, x310, 0xffffffff);
  let mut x334: u32 = 0;
  let mut x335: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x334, &mut x335, 0x0, x333, x330);
  let mut x336: u32 = 0;
  let mut x337: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x336, &mut x337, x335, x331, x328);
  let mut x338: u32 = 0;
  let mut x339: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x338, &mut x339, 0x0, x310, x332);
  let mut x340: u32 = 0;
  let mut x341: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x340, &mut x341, x339, x312, x334);
  let mut x342: u32 = 0;
  let mut x343: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x342, &mut x343, x341, x314, x336);
  let mut x344: u32 = 0;
  let mut x345: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x344, &mut x345, x337, x329, (0x0 as u32));
  let mut x346: u32 = 0;
  let mut x347: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x346, &mut x347, x343, x316, x344);
  let mut x348: u32 = 0;
  let mut x349: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x348, &mut x349, x347, x318, (0x0 as u32));
  let mut x350: u32 = 0;
  let mut x351: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x350, &mut x351, x349, x320, (0x0 as u32));
  let mut x352: u32 = 0;
  let mut x353: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x352, &mut x353, x351, x322, x310);
  let mut x354: u32 = 0;
  let mut x355: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x354, &mut x355, x353, x324, x326);
  let mut x356: u32 = 0;
  let mut x357: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x356, &mut x357, x309, (0x0 as u32), (0x0 as u32));
  let mut x358: u32 = 0;
  let mut x359: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x358, &mut x359, x325, ((x356 as fiat_p256_u1) as u32), (0x0 as u32));
  let mut x360: u32 = 0;
  let mut x361: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x360, &mut x361, x355, x358, x327);
  let mut x362: u32 = 0;
  let mut x363: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x362, &mut x363, 0x0, x340, 0xffffffff);
  let mut x364: u32 = 0;
  let mut x365: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x364, &mut x365, x363, x342, 0xffffffff);
  let mut x366: u32 = 0;
  let mut x367: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x366, &mut x367, x365, x346, 0xffffffff);
  let mut x368: u32 = 0;
  let mut x369: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x368, &mut x369, x367, x348, (0x0 as u32));
  let mut x370: u32 = 0;
  let mut x371: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x370, &mut x371, x369, x350, (0x0 as u32));
  let mut x372: u32 = 0;
  let mut x373: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x372, &mut x373, x371, x352, (0x0 as u32));
  let mut x374: u32 = 0;
  let mut x375: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x374, &mut x375, x373, x354, (0x1 as u32));
  let mut x376: u32 = 0;
  let mut x377: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x376, &mut x377, x375, x360, 0xffffffff);
  let mut x378: u32 = 0;
  let mut x379: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x378, &mut x379, x361, (0x0 as u32), (0x0 as u32));
  let mut x380: u32 = 0;
  let mut x381: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x380, &mut x381, x377, ((x378 as fiat_p256_u1) as u32), (0x0 as u32));
  let mut x382: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x382, x381, x362, x340);
  let mut x383: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x383, x381, x364, x342);
  let mut x384: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x384, x381, x366, x346);
  let mut x385: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x385, x381, x368, x348);
  let mut x386: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x386, x381, x370, x350);
  let mut x387: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x387, x381, x372, x352);
  let mut x388: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x388, x381, x374, x354);
  let mut x389: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x389, x381, x376, x360);
  out1[0] = x382;
  out1[1] = x383;
  out1[2] = x384;
  out1[3] = x385;
  out1[4] = x386;
  out1[5] = x387;
  out1[6] = x388;
  out1[7] = x389;
}

/*
 * The function fiat_p256_nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffff]
 */
#[inline]
pub fn fiat_p256_nonzero(out1: &mut u32, arg1: &[u32; 8]) -> () {
  let x1: u32 = ((arg1[0]) | ((arg1[1]) | ((arg1[2]) | ((arg1[3]) | ((arg1[4]) | ((arg1[5]) | ((arg1[6]) | ((arg1[7]) | (0x0 as u32)))))))));
  *out1 = x1;
}

/*
 * The function fiat_p256_selectznz is a multi-limb conditional select.
 * Postconditions:
 *   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 *   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
#[inline]
pub fn fiat_p256_selectznz(out1: &mut [u32; 8], arg1: fiat_p256_u1, arg2: &[u32; 8], arg3: &[u32; 8]) -> () {
  let mut x1: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1, arg1, (arg2[0]), (arg3[0]));
  let mut x2: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x2, arg1, (arg2[1]), (arg3[1]));
  let mut x3: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x3, arg1, (arg2[2]), (arg3[2]));
  let mut x4: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4, arg1, (arg2[3]), (arg3[3]));
  let mut x5: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x5, arg1, (arg2[4]), (arg3[4]));
  let mut x6: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x6, arg1, (arg2[5]), (arg3[5]));
  let mut x7: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x7, arg1, (arg2[6]), (arg3[6]));
  let mut x8: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x8, arg1, (arg2[7]), (arg3[7]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
  out1[4] = x5;
  out1[5] = x6;
  out1[6] = x7;
  out1[7] = x8;
}

/*
 * The function fiat_p256_to_bytes serializes a field element in the Montgomery domain to bytes in little-endian order.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..31]
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
 */
#[inline]
pub fn fiat_p256_to_bytes(out1: &mut [u8; 32], arg1: &[u32; 8]) -> () {
  let x1: u32 = (arg1[7]);
  let x2: u32 = (arg1[6]);
  let x3: u32 = (arg1[5]);
  let x4: u32 = (arg1[4]);
  let x5: u32 = (arg1[3]);
  let x6: u32 = (arg1[2]);
  let x7: u32 = (arg1[1]);
  let x8: u32 = (arg1[0]);
  let x9: u32 = (x8 >> 8);
  let x10: u8 = ((x8 & (0xff as u32)) as u8);
  let x11: u32 = (x9 >> 8);
  let x12: u8 = ((x9 & (0xff as u32)) as u8);
  let x13: u8 = ((x11 >> 8) as u8);
  let x14: u8 = ((x11 & (0xff as u32)) as u8);
  let x15: u8 = (x13 & 0xff);
  let x16: u32 = (x7 >> 8);
  let x17: u8 = ((x7 & (0xff as u32)) as u8);
  let x18: u32 = (x16 >> 8);
  let x19: u8 = ((x16 & (0xff as u32)) as u8);
  let x20: u8 = ((x18 >> 8) as u8);
  let x21: u8 = ((x18 & (0xff as u32)) as u8);
  let x22: u8 = (x20 & 0xff);
  let x23: u32 = (x6 >> 8);
  let x24: u8 = ((x6 & (0xff as u32)) as u8);
  let x25: u32 = (x23 >> 8);
  let x26: u8 = ((x23 & (0xff as u32)) as u8);
  let x27: u8 = ((x25 >> 8) as u8);
  let x28: u8 = ((x25 & (0xff as u32)) as u8);
  let x29: u8 = (x27 & 0xff);
  let x30: u32 = (x5 >> 8);
  let x31: u8 = ((x5 & (0xff as u32)) as u8);
  let x32: u32 = (x30 >> 8);
  let x33: u8 = ((x30 & (0xff as u32)) as u8);
  let x34: u8 = ((x32 >> 8) as u8);
  let x35: u8 = ((x32 & (0xff as u32)) as u8);
  let x36: u8 = (x34 & 0xff);
  let x37: u32 = (x4 >> 8);
  let x38: u8 = ((x4 & (0xff as u32)) as u8);
  let x39: u32 = (x37 >> 8);
  let x40: u8 = ((x37 & (0xff as u32)) as u8);
  let x41: u8 = ((x39 >> 8) as u8);
  let x42: u8 = ((x39 & (0xff as u32)) as u8);
  let x43: u8 = (x41 & 0xff);
  let x44: u32 = (x3 >> 8);
  let x45: u8 = ((x3 & (0xff as u32)) as u8);
  let x46: u32 = (x44 >> 8);
  let x47: u8 = ((x44 & (0xff as u32)) as u8);
  let x48: u8 = ((x46 >> 8) as u8);
  let x49: u8 = ((x46 & (0xff as u32)) as u8);
  let x50: u8 = (x48 & 0xff);
  let x51: u32 = (x2 >> 8);
  let x52: u8 = ((x2 & (0xff as u32)) as u8);
  let x53: u32 = (x51 >> 8);
  let x54: u8 = ((x51 & (0xff as u32)) as u8);
  let x55: u8 = ((x53 >> 8) as u8);
  let x56: u8 = ((x53 & (0xff as u32)) as u8);
  let x57: u8 = (x55 & 0xff);
  let x58: u32 = (x1 >> 8);
  let x59: u8 = ((x1 & (0xff as u32)) as u8);
  let x60: u32 = (x58 >> 8);
  let x61: u8 = ((x58 & (0xff as u32)) as u8);
  let x62: u8 = ((x60 >> 8) as u8);
  let x63: u8 = ((x60 & (0xff as u32)) as u8);
  out1[0] = x10;
  out1[1] = x12;
  out1[2] = x14;
  out1[3] = x15;
  out1[4] = x17;
  out1[5] = x19;
  out1[6] = x21;
  out1[7] = x22;
  out1[8] = x24;
  out1[9] = x26;
  out1[10] = x28;
  out1[11] = x29;
  out1[12] = x31;
  out1[13] = x33;
  out1[14] = x35;
  out1[15] = x36;
  out1[16] = x38;
  out1[17] = x40;
  out1[18] = x42;
  out1[19] = x43;
  out1[20] = x45;
  out1[21] = x47;
  out1[22] = x49;
  out1[23] = x50;
  out1[24] = x52;
  out1[25] = x54;
  out1[26] = x56;
  out1[27] = x57;
  out1[28] = x59;
  out1[29] = x61;
  out1[30] = x63;
  out1[31] = x62;
}

/*
 * The function fiat_p256_from_bytes deserializes a field element in the Montgomery domain from bytes in little-endian order.
 * Preconditions:
 *   0 ≤ bytes_eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = bytes_eval arg1 mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
#[inline]
pub fn fiat_p256_from_bytes(out1: &mut [u32; 8], arg1: &[u8; 32]) -> () {
  let x1: u32 = (((arg1[31]) as u32) << 24);
  let x2: u32 = (((arg1[30]) as u32) << 16);
  let x3: u32 = (((arg1[29]) as u32) << 8);
  let x4: u8 = (arg1[28]);
  let x5: u32 = (((arg1[27]) as u32) << 24);
  let x6: u32 = (((arg1[26]) as u32) << 16);
  let x7: u32 = (((arg1[25]) as u32) << 8);
  let x8: u8 = (arg1[24]);
  let x9: u32 = (((arg1[23]) as u32) << 24);
  let x10: u32 = (((arg1[22]) as u32) << 16);
  let x11: u32 = (((arg1[21]) as u32) << 8);
  let x12: u8 = (arg1[20]);
  let x13: u32 = (((arg1[19]) as u32) << 24);
  let x14: u32 = (((arg1[18]) as u32) << 16);
  let x15: u32 = (((arg1[17]) as u32) << 8);
  let x16: u8 = (arg1[16]);
  let x17: u32 = (((arg1[15]) as u32) << 24);
  let x18: u32 = (((arg1[14]) as u32) << 16);
  let x19: u32 = (((arg1[13]) as u32) << 8);
  let x20: u8 = (arg1[12]);
  let x21: u32 = (((arg1[11]) as u32) << 24);
  let x22: u32 = (((arg1[10]) as u32) << 16);
  let x23: u32 = (((arg1[9]) as u32) << 8);
  let x24: u8 = (arg1[8]);
  let x25: u32 = (((arg1[7]) as u32) << 24);
  let x26: u32 = (((arg1[6]) as u32) << 16);
  let x27: u32 = (((arg1[5]) as u32) << 8);
  let x28: u8 = (arg1[4]);
  let x29: u32 = (((arg1[3]) as u32) << 24);
  let x30: u32 = (((arg1[2]) as u32) << 16);
  let x31: u32 = (((arg1[1]) as u32) << 8);
  let x32: u8 = (arg1[0]);
  let x33: u32 = ((x32 as u32) + (x31 + (x30 + x29)));
  let x34: u32 = (x33 & 0xffffffff);
  let x35: u32 = ((x4 as u32) + (x3 + (x2 + x1)));
  let x36: u32 = ((x8 as u32) + (x7 + (x6 + x5)));
  let x37: u32 = ((x12 as u32) + (x11 + (x10 + x9)));
  let x38: u32 = ((x16 as u32) + (x15 + (x14 + x13)));
  let x39: u32 = ((x20 as u32) + (x19 + (x18 + x17)));
  let x40: u32 = ((x24 as u32) + (x23 + (x22 + x21)));
  let x41: u32 = ((x28 as u32) + (x27 + (x26 + x25)));
  let x42: u32 = (x41 & 0xffffffff);
  let x43: u32 = (x40 & 0xffffffff);
  let x44: u32 = (x39 & 0xffffffff);
  let x45: u32 = (x38 & 0xffffffff);
  let x46: u32 = (x37 & 0xffffffff);
  let x47: u32 = (x36 & 0xffffffff);
  out1[0] = x34;
  out1[1] = x42;
  out1[2] = x43;
  out1[3] = x44;
  out1[4] = x45;
  out1[5] = x46;
  out1[6] = x47;
  out1[7] = x35;
}

