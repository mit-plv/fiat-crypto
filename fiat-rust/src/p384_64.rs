/* Autogenerated: src/ExtractionOCaml/word_by_word_montgomery --lang=Rust p384 '2^384 - 2^128 - 2^96 + 2^32 - 1' 64 */
/* curve description: p384 */
/* requested operations: (all) */
/* m = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff (from "2^384 - 2^128 - 2^96 + 2^32 - 1") */
/* machine_wordsize = 64 (from "64") */
/*                                                                    */
/* NOTE: In addition to the bounds specified above each function, all */
/*   functions synthesized for this Montgomery arithmetic require the */
/*   input to be strictly less than the prime modulus (m), and also   */
/*   require the input to be in the unique saturated representation.  */
/*   All functions also ensure that these two properties are true of  */
/*   return values.                                                   */

#![allow(unused_parens)]
#[allow(non_camel_case_types)]

pub type fiat_p384_u1 = u8;
pub type fiat_p384_i1 = i8;
pub type fiat_p384_u2 = u8;
pub type fiat_p384_i2 = i8;
pub type fiat_p384_u128 = u128;
pub type fiat_p384_i128 = i128;


/*
 * The function fiat_p384_addcarryx_u64 is an addition with carry.
 * Postconditions:
 *   out1 = (arg1 + arg2 + arg3) mod 2^64
 *   out2 = ⌊(arg1 + arg2 + arg3) / 2^64⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 *   arg3: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 *   out2: [0x0 ~> 0x1]
 */
#[inline]
pub fn fiat_p384_addcarryx_u64(out1: &mut u64, out2: &mut fiat_p384_u1, arg1: fiat_p384_u1, arg2: u64, arg3: u64) -> () {
  let x1: fiat_p384_u128 = (((arg1 as fiat_p384_u128) + (arg2 as fiat_p384_u128)) + (arg3 as fiat_p384_u128));
  let x2: u64 = ((x1 & (0xffffffffffffffff as fiat_p384_u128)) as u64);
  let x3: fiat_p384_u1 = ((x1 >> 64) as fiat_p384_u1);
  *out1 = x2;
  *out2 = x3;
}

/*
 * The function fiat_p384_subborrowx_u64 is a subtraction with borrow.
 * Postconditions:
 *   out1 = (-arg1 + arg2 + -arg3) mod 2^64
 *   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^64⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 *   arg3: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 *   out2: [0x0 ~> 0x1]
 */
#[inline]
pub fn fiat_p384_subborrowx_u64(out1: &mut u64, out2: &mut fiat_p384_u1, arg1: fiat_p384_u1, arg2: u64, arg3: u64) -> () {
  let x1: fiat_p384_i128 = (((arg2 as fiat_p384_i128) - (arg1 as fiat_p384_i128)) - (arg3 as fiat_p384_i128));
  let x2: fiat_p384_i1 = ((x1 >> 64) as fiat_p384_i1);
  let x3: u64 = ((x1 & (0xffffffffffffffff as fiat_p384_i128)) as u64);
  *out1 = x3;
  *out2 = (((0x0 as fiat_p384_i2) - (x2 as fiat_p384_i2)) as fiat_p384_u1);
}

/*
 * The function fiat_p384_mulx_u64 is a multiplication, returning the full double-width result.
 * Postconditions:
 *   out1 = (arg1 * arg2) mod 2^64
 *   out2 = ⌊arg1 * arg2 / 2^64⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0xffffffffffffffff]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 *   out2: [0x0 ~> 0xffffffffffffffff]
 */
#[inline]
pub fn fiat_p384_mulx_u64(out1: &mut u64, out2: &mut u64, arg1: u64, arg2: u64) -> () {
  let x1: fiat_p384_u128 = ((arg1 as fiat_p384_u128) * (arg2 as fiat_p384_u128));
  let x2: u64 = ((x1 & (0xffffffffffffffff as fiat_p384_u128)) as u64);
  let x3: u64 = ((x1 >> 64) as u64);
  *out1 = x2;
  *out2 = x3;
}

/*
 * The function fiat_p384_cmovznz_u64 is a single-word conditional move.
 * Postconditions:
 *   out1 = (if arg1 = 0 then arg2 else arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 *   arg3: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 */
#[inline]
pub fn fiat_p384_cmovznz_u64(out1: &mut u64, arg1: fiat_p384_u1, arg2: u64, arg3: u64) -> () {
  let x1: fiat_p384_u1 = (!(!arg1));
  let x2: u64 = ((((((0x0 as fiat_p384_i2) - (x1 as fiat_p384_i2)) as fiat_p384_i1) as fiat_p384_i128) & (0xffffffffffffffff as fiat_p384_i128)) as u64);
  let x3: u64 = ((x2 & arg3) | ((!x2) & arg2));
  *out1 = x3;
}

/*
 * The function fiat_p384_mul multiplies two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_p384_mul(out1: &mut [u64; 6], arg1: &[u64; 6], arg2: &[u64; 6]) -> () {
  let x1: u64 = (arg1[1]);
  let x2: u64 = (arg1[2]);
  let x3: u64 = (arg1[3]);
  let x4: u64 = (arg1[4]);
  let x5: u64 = (arg1[5]);
  let x6: u64 = (arg1[0]);
  let mut x7: u64 = 0;
  let mut x8: u64 = 0;
  fiat_p384_mulx_u64(&mut x7, &mut x8, x6, (arg2[5]));
  let mut x9: u64 = 0;
  let mut x10: u64 = 0;
  fiat_p384_mulx_u64(&mut x9, &mut x10, x6, (arg2[4]));
  let mut x11: u64 = 0;
  let mut x12: u64 = 0;
  fiat_p384_mulx_u64(&mut x11, &mut x12, x6, (arg2[3]));
  let mut x13: u64 = 0;
  let mut x14: u64 = 0;
  fiat_p384_mulx_u64(&mut x13, &mut x14, x6, (arg2[2]));
  let mut x15: u64 = 0;
  let mut x16: u64 = 0;
  fiat_p384_mulx_u64(&mut x15, &mut x16, x6, (arg2[1]));
  let mut x17: u64 = 0;
  let mut x18: u64 = 0;
  fiat_p384_mulx_u64(&mut x17, &mut x18, x6, (arg2[0]));
  let mut x19: u64 = 0;
  let mut x20: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x19, &mut x20, 0x0, x18, x15);
  let mut x21: u64 = 0;
  let mut x22: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x21, &mut x22, x20, x16, x13);
  let mut x23: u64 = 0;
  let mut x24: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x23, &mut x24, x22, x14, x11);
  let mut x25: u64 = 0;
  let mut x26: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x25, &mut x26, x24, x12, x9);
  let mut x27: u64 = 0;
  let mut x28: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x27, &mut x28, x26, x10, x7);
  let mut x29: u64 = 0;
  let mut x30: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x29, &mut x30, x28, x8, (0x0 as u64));
  let mut x31: u64 = 0;
  let mut x32: u64 = 0;
  fiat_p384_mulx_u64(&mut x31, &mut x32, x17, 0x100000001);
  let mut x33: u64 = 0;
  let mut x34: u64 = 0;
  fiat_p384_mulx_u64(&mut x33, &mut x34, x31, 0xffffffffffffffff);
  let mut x35: u64 = 0;
  let mut x36: u64 = 0;
  fiat_p384_mulx_u64(&mut x35, &mut x36, x31, 0xffffffffffffffff);
  let mut x37: u64 = 0;
  let mut x38: u64 = 0;
  fiat_p384_mulx_u64(&mut x37, &mut x38, x31, 0xffffffffffffffff);
  let mut x39: u64 = 0;
  let mut x40: u64 = 0;
  fiat_p384_mulx_u64(&mut x39, &mut x40, x31, 0xfffffffffffffffe);
  let mut x41: u64 = 0;
  let mut x42: u64 = 0;
  fiat_p384_mulx_u64(&mut x41, &mut x42, x31, 0xffffffff00000000);
  let mut x43: u64 = 0;
  let mut x44: u64 = 0;
  fiat_p384_mulx_u64(&mut x43, &mut x44, x31, 0xffffffff);
  let mut x45: u64 = 0;
  let mut x46: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x45, &mut x46, 0x0, x44, x41);
  let mut x47: u64 = 0;
  let mut x48: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x47, &mut x48, x46, x42, x39);
  let mut x49: u64 = 0;
  let mut x50: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x49, &mut x50, x48, x40, x37);
  let mut x51: u64 = 0;
  let mut x52: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x51, &mut x52, x50, x38, x35);
  let mut x53: u64 = 0;
  let mut x54: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x53, &mut x54, x52, x36, x33);
  let mut x55: u64 = 0;
  let mut x56: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x55, &mut x56, x54, x34, (0x0 as u64));
  let mut x57: u64 = 0;
  let mut x58: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x57, &mut x58, 0x0, x17, x43);
  let mut x59: u64 = 0;
  let mut x60: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x59, &mut x60, x58, x19, x45);
  let mut x61: u64 = 0;
  let mut x62: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x61, &mut x62, x60, x21, x47);
  let mut x63: u64 = 0;
  let mut x64: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x63, &mut x64, x62, x23, x49);
  let mut x65: u64 = 0;
  let mut x66: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x65, &mut x66, x64, x25, x51);
  let mut x67: u64 = 0;
  let mut x68: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x67, &mut x68, x66, x27, x53);
  let mut x69: u64 = 0;
  let mut x70: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x69, &mut x70, x68, x29, x55);
  let mut x71: u64 = 0;
  let mut x72: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x71, &mut x72, x70, (0x0 as u64), (0x0 as u64));
  let mut x73: u64 = 0;
  let mut x74: u64 = 0;
  fiat_p384_mulx_u64(&mut x73, &mut x74, x1, (arg2[5]));
  let mut x75: u64 = 0;
  let mut x76: u64 = 0;
  fiat_p384_mulx_u64(&mut x75, &mut x76, x1, (arg2[4]));
  let mut x77: u64 = 0;
  let mut x78: u64 = 0;
  fiat_p384_mulx_u64(&mut x77, &mut x78, x1, (arg2[3]));
  let mut x79: u64 = 0;
  let mut x80: u64 = 0;
  fiat_p384_mulx_u64(&mut x79, &mut x80, x1, (arg2[2]));
  let mut x81: u64 = 0;
  let mut x82: u64 = 0;
  fiat_p384_mulx_u64(&mut x81, &mut x82, x1, (arg2[1]));
  let mut x83: u64 = 0;
  let mut x84: u64 = 0;
  fiat_p384_mulx_u64(&mut x83, &mut x84, x1, (arg2[0]));
  let mut x85: u64 = 0;
  let mut x86: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x85, &mut x86, 0x0, x84, x81);
  let mut x87: u64 = 0;
  let mut x88: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x87, &mut x88, x86, x82, x79);
  let mut x89: u64 = 0;
  let mut x90: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x89, &mut x90, x88, x80, x77);
  let mut x91: u64 = 0;
  let mut x92: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x91, &mut x92, x90, x78, x75);
  let mut x93: u64 = 0;
  let mut x94: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x93, &mut x94, x92, x76, x73);
  let mut x95: u64 = 0;
  let mut x96: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x95, &mut x96, x94, x74, (0x0 as u64));
  let mut x97: u64 = 0;
  let mut x98: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x97, &mut x98, 0x0, x59, x83);
  let mut x99: u64 = 0;
  let mut x100: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x99, &mut x100, x98, x61, x85);
  let mut x101: u64 = 0;
  let mut x102: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x101, &mut x102, x100, x63, x87);
  let mut x103: u64 = 0;
  let mut x104: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x103, &mut x104, x102, x65, x89);
  let mut x105: u64 = 0;
  let mut x106: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x105, &mut x106, x104, x67, x91);
  let mut x107: u64 = 0;
  let mut x108: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x107, &mut x108, x106, x69, x93);
  let mut x109: u64 = 0;
  let mut x110: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x109, &mut x110, x108, ((x71 as fiat_p384_u1) as u64), x95);
  let mut x111: u64 = 0;
  let mut x112: u64 = 0;
  fiat_p384_mulx_u64(&mut x111, &mut x112, x97, 0x100000001);
  let mut x113: u64 = 0;
  let mut x114: u64 = 0;
  fiat_p384_mulx_u64(&mut x113, &mut x114, x111, 0xffffffffffffffff);
  let mut x115: u64 = 0;
  let mut x116: u64 = 0;
  fiat_p384_mulx_u64(&mut x115, &mut x116, x111, 0xffffffffffffffff);
  let mut x117: u64 = 0;
  let mut x118: u64 = 0;
  fiat_p384_mulx_u64(&mut x117, &mut x118, x111, 0xffffffffffffffff);
  let mut x119: u64 = 0;
  let mut x120: u64 = 0;
  fiat_p384_mulx_u64(&mut x119, &mut x120, x111, 0xfffffffffffffffe);
  let mut x121: u64 = 0;
  let mut x122: u64 = 0;
  fiat_p384_mulx_u64(&mut x121, &mut x122, x111, 0xffffffff00000000);
  let mut x123: u64 = 0;
  let mut x124: u64 = 0;
  fiat_p384_mulx_u64(&mut x123, &mut x124, x111, 0xffffffff);
  let mut x125: u64 = 0;
  let mut x126: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x125, &mut x126, 0x0, x124, x121);
  let mut x127: u64 = 0;
  let mut x128: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x127, &mut x128, x126, x122, x119);
  let mut x129: u64 = 0;
  let mut x130: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x129, &mut x130, x128, x120, x117);
  let mut x131: u64 = 0;
  let mut x132: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x131, &mut x132, x130, x118, x115);
  let mut x133: u64 = 0;
  let mut x134: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x133, &mut x134, x132, x116, x113);
  let mut x135: u64 = 0;
  let mut x136: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x135, &mut x136, x134, x114, (0x0 as u64));
  let mut x137: u64 = 0;
  let mut x138: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x137, &mut x138, 0x0, x97, x123);
  let mut x139: u64 = 0;
  let mut x140: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x139, &mut x140, x138, x99, x125);
  let mut x141: u64 = 0;
  let mut x142: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x141, &mut x142, x140, x101, x127);
  let mut x143: u64 = 0;
  let mut x144: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x143, &mut x144, x142, x103, x129);
  let mut x145: u64 = 0;
  let mut x146: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x145, &mut x146, x144, x105, x131);
  let mut x147: u64 = 0;
  let mut x148: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x147, &mut x148, x146, x107, x133);
  let mut x149: u64 = 0;
  let mut x150: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x149, &mut x150, x148, x109, x135);
  let mut x151: u64 = 0;
  let mut x152: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x151, &mut x152, x150, (x110 as u64), (0x0 as u64));
  let mut x153: u64 = 0;
  let mut x154: u64 = 0;
  fiat_p384_mulx_u64(&mut x153, &mut x154, x2, (arg2[5]));
  let mut x155: u64 = 0;
  let mut x156: u64 = 0;
  fiat_p384_mulx_u64(&mut x155, &mut x156, x2, (arg2[4]));
  let mut x157: u64 = 0;
  let mut x158: u64 = 0;
  fiat_p384_mulx_u64(&mut x157, &mut x158, x2, (arg2[3]));
  let mut x159: u64 = 0;
  let mut x160: u64 = 0;
  fiat_p384_mulx_u64(&mut x159, &mut x160, x2, (arg2[2]));
  let mut x161: u64 = 0;
  let mut x162: u64 = 0;
  fiat_p384_mulx_u64(&mut x161, &mut x162, x2, (arg2[1]));
  let mut x163: u64 = 0;
  let mut x164: u64 = 0;
  fiat_p384_mulx_u64(&mut x163, &mut x164, x2, (arg2[0]));
  let mut x165: u64 = 0;
  let mut x166: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x165, &mut x166, 0x0, x164, x161);
  let mut x167: u64 = 0;
  let mut x168: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x167, &mut x168, x166, x162, x159);
  let mut x169: u64 = 0;
  let mut x170: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x169, &mut x170, x168, x160, x157);
  let mut x171: u64 = 0;
  let mut x172: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x171, &mut x172, x170, x158, x155);
  let mut x173: u64 = 0;
  let mut x174: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x173, &mut x174, x172, x156, x153);
  let mut x175: u64 = 0;
  let mut x176: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x175, &mut x176, x174, x154, (0x0 as u64));
  let mut x177: u64 = 0;
  let mut x178: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x177, &mut x178, 0x0, x139, x163);
  let mut x179: u64 = 0;
  let mut x180: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x179, &mut x180, x178, x141, x165);
  let mut x181: u64 = 0;
  let mut x182: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x181, &mut x182, x180, x143, x167);
  let mut x183: u64 = 0;
  let mut x184: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x183, &mut x184, x182, x145, x169);
  let mut x185: u64 = 0;
  let mut x186: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x185, &mut x186, x184, x147, x171);
  let mut x187: u64 = 0;
  let mut x188: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x187, &mut x188, x186, x149, x173);
  let mut x189: u64 = 0;
  let mut x190: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x189, &mut x190, x188, x151, x175);
  let mut x191: u64 = 0;
  let mut x192: u64 = 0;
  fiat_p384_mulx_u64(&mut x191, &mut x192, x177, 0x100000001);
  let mut x193: u64 = 0;
  let mut x194: u64 = 0;
  fiat_p384_mulx_u64(&mut x193, &mut x194, x191, 0xffffffffffffffff);
  let mut x195: u64 = 0;
  let mut x196: u64 = 0;
  fiat_p384_mulx_u64(&mut x195, &mut x196, x191, 0xffffffffffffffff);
  let mut x197: u64 = 0;
  let mut x198: u64 = 0;
  fiat_p384_mulx_u64(&mut x197, &mut x198, x191, 0xffffffffffffffff);
  let mut x199: u64 = 0;
  let mut x200: u64 = 0;
  fiat_p384_mulx_u64(&mut x199, &mut x200, x191, 0xfffffffffffffffe);
  let mut x201: u64 = 0;
  let mut x202: u64 = 0;
  fiat_p384_mulx_u64(&mut x201, &mut x202, x191, 0xffffffff00000000);
  let mut x203: u64 = 0;
  let mut x204: u64 = 0;
  fiat_p384_mulx_u64(&mut x203, &mut x204, x191, 0xffffffff);
  let mut x205: u64 = 0;
  let mut x206: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x205, &mut x206, 0x0, x204, x201);
  let mut x207: u64 = 0;
  let mut x208: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x207, &mut x208, x206, x202, x199);
  let mut x209: u64 = 0;
  let mut x210: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x209, &mut x210, x208, x200, x197);
  let mut x211: u64 = 0;
  let mut x212: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x211, &mut x212, x210, x198, x195);
  let mut x213: u64 = 0;
  let mut x214: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x213, &mut x214, x212, x196, x193);
  let mut x215: u64 = 0;
  let mut x216: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x215, &mut x216, x214, x194, (0x0 as u64));
  let mut x217: u64 = 0;
  let mut x218: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x217, &mut x218, 0x0, x177, x203);
  let mut x219: u64 = 0;
  let mut x220: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x219, &mut x220, x218, x179, x205);
  let mut x221: u64 = 0;
  let mut x222: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x221, &mut x222, x220, x181, x207);
  let mut x223: u64 = 0;
  let mut x224: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x223, &mut x224, x222, x183, x209);
  let mut x225: u64 = 0;
  let mut x226: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x225, &mut x226, x224, x185, x211);
  let mut x227: u64 = 0;
  let mut x228: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x227, &mut x228, x226, x187, x213);
  let mut x229: u64 = 0;
  let mut x230: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x229, &mut x230, x228, x189, x215);
  let mut x231: u64 = 0;
  let mut x232: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x231, &mut x232, x230, (x190 as u64), (0x0 as u64));
  let mut x233: u64 = 0;
  let mut x234: u64 = 0;
  fiat_p384_mulx_u64(&mut x233, &mut x234, x3, (arg2[5]));
  let mut x235: u64 = 0;
  let mut x236: u64 = 0;
  fiat_p384_mulx_u64(&mut x235, &mut x236, x3, (arg2[4]));
  let mut x237: u64 = 0;
  let mut x238: u64 = 0;
  fiat_p384_mulx_u64(&mut x237, &mut x238, x3, (arg2[3]));
  let mut x239: u64 = 0;
  let mut x240: u64 = 0;
  fiat_p384_mulx_u64(&mut x239, &mut x240, x3, (arg2[2]));
  let mut x241: u64 = 0;
  let mut x242: u64 = 0;
  fiat_p384_mulx_u64(&mut x241, &mut x242, x3, (arg2[1]));
  let mut x243: u64 = 0;
  let mut x244: u64 = 0;
  fiat_p384_mulx_u64(&mut x243, &mut x244, x3, (arg2[0]));
  let mut x245: u64 = 0;
  let mut x246: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x245, &mut x246, 0x0, x244, x241);
  let mut x247: u64 = 0;
  let mut x248: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x247, &mut x248, x246, x242, x239);
  let mut x249: u64 = 0;
  let mut x250: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x249, &mut x250, x248, x240, x237);
  let mut x251: u64 = 0;
  let mut x252: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x251, &mut x252, x250, x238, x235);
  let mut x253: u64 = 0;
  let mut x254: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x253, &mut x254, x252, x236, x233);
  let mut x255: u64 = 0;
  let mut x256: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x255, &mut x256, x254, x234, (0x0 as u64));
  let mut x257: u64 = 0;
  let mut x258: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x257, &mut x258, 0x0, x219, x243);
  let mut x259: u64 = 0;
  let mut x260: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x259, &mut x260, x258, x221, x245);
  let mut x261: u64 = 0;
  let mut x262: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x261, &mut x262, x260, x223, x247);
  let mut x263: u64 = 0;
  let mut x264: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x263, &mut x264, x262, x225, x249);
  let mut x265: u64 = 0;
  let mut x266: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x265, &mut x266, x264, x227, x251);
  let mut x267: u64 = 0;
  let mut x268: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x267, &mut x268, x266, x229, x253);
  let mut x269: u64 = 0;
  let mut x270: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x269, &mut x270, x268, x231, x255);
  let mut x271: u64 = 0;
  let mut x272: u64 = 0;
  fiat_p384_mulx_u64(&mut x271, &mut x272, x257, 0x100000001);
  let mut x273: u64 = 0;
  let mut x274: u64 = 0;
  fiat_p384_mulx_u64(&mut x273, &mut x274, x271, 0xffffffffffffffff);
  let mut x275: u64 = 0;
  let mut x276: u64 = 0;
  fiat_p384_mulx_u64(&mut x275, &mut x276, x271, 0xffffffffffffffff);
  let mut x277: u64 = 0;
  let mut x278: u64 = 0;
  fiat_p384_mulx_u64(&mut x277, &mut x278, x271, 0xffffffffffffffff);
  let mut x279: u64 = 0;
  let mut x280: u64 = 0;
  fiat_p384_mulx_u64(&mut x279, &mut x280, x271, 0xfffffffffffffffe);
  let mut x281: u64 = 0;
  let mut x282: u64 = 0;
  fiat_p384_mulx_u64(&mut x281, &mut x282, x271, 0xffffffff00000000);
  let mut x283: u64 = 0;
  let mut x284: u64 = 0;
  fiat_p384_mulx_u64(&mut x283, &mut x284, x271, 0xffffffff);
  let mut x285: u64 = 0;
  let mut x286: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x285, &mut x286, 0x0, x284, x281);
  let mut x287: u64 = 0;
  let mut x288: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x287, &mut x288, x286, x282, x279);
  let mut x289: u64 = 0;
  let mut x290: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x289, &mut x290, x288, x280, x277);
  let mut x291: u64 = 0;
  let mut x292: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x291, &mut x292, x290, x278, x275);
  let mut x293: u64 = 0;
  let mut x294: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x293, &mut x294, x292, x276, x273);
  let mut x295: u64 = 0;
  let mut x296: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x295, &mut x296, x294, x274, (0x0 as u64));
  let mut x297: u64 = 0;
  let mut x298: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x297, &mut x298, 0x0, x257, x283);
  let mut x299: u64 = 0;
  let mut x300: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x299, &mut x300, x298, x259, x285);
  let mut x301: u64 = 0;
  let mut x302: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x301, &mut x302, x300, x261, x287);
  let mut x303: u64 = 0;
  let mut x304: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x303, &mut x304, x302, x263, x289);
  let mut x305: u64 = 0;
  let mut x306: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x305, &mut x306, x304, x265, x291);
  let mut x307: u64 = 0;
  let mut x308: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x307, &mut x308, x306, x267, x293);
  let mut x309: u64 = 0;
  let mut x310: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x309, &mut x310, x308, x269, x295);
  let mut x311: u64 = 0;
  let mut x312: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x311, &mut x312, x310, (x270 as u64), (0x0 as u64));
  let mut x313: u64 = 0;
  let mut x314: u64 = 0;
  fiat_p384_mulx_u64(&mut x313, &mut x314, x4, (arg2[5]));
  let mut x315: u64 = 0;
  let mut x316: u64 = 0;
  fiat_p384_mulx_u64(&mut x315, &mut x316, x4, (arg2[4]));
  let mut x317: u64 = 0;
  let mut x318: u64 = 0;
  fiat_p384_mulx_u64(&mut x317, &mut x318, x4, (arg2[3]));
  let mut x319: u64 = 0;
  let mut x320: u64 = 0;
  fiat_p384_mulx_u64(&mut x319, &mut x320, x4, (arg2[2]));
  let mut x321: u64 = 0;
  let mut x322: u64 = 0;
  fiat_p384_mulx_u64(&mut x321, &mut x322, x4, (arg2[1]));
  let mut x323: u64 = 0;
  let mut x324: u64 = 0;
  fiat_p384_mulx_u64(&mut x323, &mut x324, x4, (arg2[0]));
  let mut x325: u64 = 0;
  let mut x326: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x325, &mut x326, 0x0, x324, x321);
  let mut x327: u64 = 0;
  let mut x328: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x327, &mut x328, x326, x322, x319);
  let mut x329: u64 = 0;
  let mut x330: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x329, &mut x330, x328, x320, x317);
  let mut x331: u64 = 0;
  let mut x332: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x331, &mut x332, x330, x318, x315);
  let mut x333: u64 = 0;
  let mut x334: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x333, &mut x334, x332, x316, x313);
  let mut x335: u64 = 0;
  let mut x336: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x335, &mut x336, x334, x314, (0x0 as u64));
  let mut x337: u64 = 0;
  let mut x338: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x337, &mut x338, 0x0, x299, x323);
  let mut x339: u64 = 0;
  let mut x340: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x339, &mut x340, x338, x301, x325);
  let mut x341: u64 = 0;
  let mut x342: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x341, &mut x342, x340, x303, x327);
  let mut x343: u64 = 0;
  let mut x344: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x343, &mut x344, x342, x305, x329);
  let mut x345: u64 = 0;
  let mut x346: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x345, &mut x346, x344, x307, x331);
  let mut x347: u64 = 0;
  let mut x348: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x347, &mut x348, x346, x309, x333);
  let mut x349: u64 = 0;
  let mut x350: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x349, &mut x350, x348, x311, x335);
  let mut x351: u64 = 0;
  let mut x352: u64 = 0;
  fiat_p384_mulx_u64(&mut x351, &mut x352, x337, 0x100000001);
  let mut x353: u64 = 0;
  let mut x354: u64 = 0;
  fiat_p384_mulx_u64(&mut x353, &mut x354, x351, 0xffffffffffffffff);
  let mut x355: u64 = 0;
  let mut x356: u64 = 0;
  fiat_p384_mulx_u64(&mut x355, &mut x356, x351, 0xffffffffffffffff);
  let mut x357: u64 = 0;
  let mut x358: u64 = 0;
  fiat_p384_mulx_u64(&mut x357, &mut x358, x351, 0xffffffffffffffff);
  let mut x359: u64 = 0;
  let mut x360: u64 = 0;
  fiat_p384_mulx_u64(&mut x359, &mut x360, x351, 0xfffffffffffffffe);
  let mut x361: u64 = 0;
  let mut x362: u64 = 0;
  fiat_p384_mulx_u64(&mut x361, &mut x362, x351, 0xffffffff00000000);
  let mut x363: u64 = 0;
  let mut x364: u64 = 0;
  fiat_p384_mulx_u64(&mut x363, &mut x364, x351, 0xffffffff);
  let mut x365: u64 = 0;
  let mut x366: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x365, &mut x366, 0x0, x364, x361);
  let mut x367: u64 = 0;
  let mut x368: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x367, &mut x368, x366, x362, x359);
  let mut x369: u64 = 0;
  let mut x370: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x369, &mut x370, x368, x360, x357);
  let mut x371: u64 = 0;
  let mut x372: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x371, &mut x372, x370, x358, x355);
  let mut x373: u64 = 0;
  let mut x374: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x373, &mut x374, x372, x356, x353);
  let mut x375: u64 = 0;
  let mut x376: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x375, &mut x376, x374, x354, (0x0 as u64));
  let mut x377: u64 = 0;
  let mut x378: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x377, &mut x378, 0x0, x337, x363);
  let mut x379: u64 = 0;
  let mut x380: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x379, &mut x380, x378, x339, x365);
  let mut x381: u64 = 0;
  let mut x382: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x381, &mut x382, x380, x341, x367);
  let mut x383: u64 = 0;
  let mut x384: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x383, &mut x384, x382, x343, x369);
  let mut x385: u64 = 0;
  let mut x386: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x385, &mut x386, x384, x345, x371);
  let mut x387: u64 = 0;
  let mut x388: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x387, &mut x388, x386, x347, x373);
  let mut x389: u64 = 0;
  let mut x390: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x389, &mut x390, x388, x349, x375);
  let mut x391: u64 = 0;
  let mut x392: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x391, &mut x392, x390, (x350 as u64), (0x0 as u64));
  let mut x393: u64 = 0;
  let mut x394: u64 = 0;
  fiat_p384_mulx_u64(&mut x393, &mut x394, x5, (arg2[5]));
  let mut x395: u64 = 0;
  let mut x396: u64 = 0;
  fiat_p384_mulx_u64(&mut x395, &mut x396, x5, (arg2[4]));
  let mut x397: u64 = 0;
  let mut x398: u64 = 0;
  fiat_p384_mulx_u64(&mut x397, &mut x398, x5, (arg2[3]));
  let mut x399: u64 = 0;
  let mut x400: u64 = 0;
  fiat_p384_mulx_u64(&mut x399, &mut x400, x5, (arg2[2]));
  let mut x401: u64 = 0;
  let mut x402: u64 = 0;
  fiat_p384_mulx_u64(&mut x401, &mut x402, x5, (arg2[1]));
  let mut x403: u64 = 0;
  let mut x404: u64 = 0;
  fiat_p384_mulx_u64(&mut x403, &mut x404, x5, (arg2[0]));
  let mut x405: u64 = 0;
  let mut x406: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x405, &mut x406, 0x0, x404, x401);
  let mut x407: u64 = 0;
  let mut x408: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x407, &mut x408, x406, x402, x399);
  let mut x409: u64 = 0;
  let mut x410: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x409, &mut x410, x408, x400, x397);
  let mut x411: u64 = 0;
  let mut x412: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x411, &mut x412, x410, x398, x395);
  let mut x413: u64 = 0;
  let mut x414: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x413, &mut x414, x412, x396, x393);
  let mut x415: u64 = 0;
  let mut x416: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x415, &mut x416, x414, x394, (0x0 as u64));
  let mut x417: u64 = 0;
  let mut x418: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x417, &mut x418, 0x0, x379, x403);
  let mut x419: u64 = 0;
  let mut x420: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x419, &mut x420, x418, x381, x405);
  let mut x421: u64 = 0;
  let mut x422: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x421, &mut x422, x420, x383, x407);
  let mut x423: u64 = 0;
  let mut x424: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x423, &mut x424, x422, x385, x409);
  let mut x425: u64 = 0;
  let mut x426: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x425, &mut x426, x424, x387, x411);
  let mut x427: u64 = 0;
  let mut x428: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x427, &mut x428, x426, x389, x413);
  let mut x429: u64 = 0;
  let mut x430: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x429, &mut x430, x428, x391, x415);
  let mut x431: u64 = 0;
  let mut x432: u64 = 0;
  fiat_p384_mulx_u64(&mut x431, &mut x432, x417, 0x100000001);
  let mut x433: u64 = 0;
  let mut x434: u64 = 0;
  fiat_p384_mulx_u64(&mut x433, &mut x434, x431, 0xffffffffffffffff);
  let mut x435: u64 = 0;
  let mut x436: u64 = 0;
  fiat_p384_mulx_u64(&mut x435, &mut x436, x431, 0xffffffffffffffff);
  let mut x437: u64 = 0;
  let mut x438: u64 = 0;
  fiat_p384_mulx_u64(&mut x437, &mut x438, x431, 0xffffffffffffffff);
  let mut x439: u64 = 0;
  let mut x440: u64 = 0;
  fiat_p384_mulx_u64(&mut x439, &mut x440, x431, 0xfffffffffffffffe);
  let mut x441: u64 = 0;
  let mut x442: u64 = 0;
  fiat_p384_mulx_u64(&mut x441, &mut x442, x431, 0xffffffff00000000);
  let mut x443: u64 = 0;
  let mut x444: u64 = 0;
  fiat_p384_mulx_u64(&mut x443, &mut x444, x431, 0xffffffff);
  let mut x445: u64 = 0;
  let mut x446: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x445, &mut x446, 0x0, x444, x441);
  let mut x447: u64 = 0;
  let mut x448: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x447, &mut x448, x446, x442, x439);
  let mut x449: u64 = 0;
  let mut x450: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x449, &mut x450, x448, x440, x437);
  let mut x451: u64 = 0;
  let mut x452: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x451, &mut x452, x450, x438, x435);
  let mut x453: u64 = 0;
  let mut x454: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x453, &mut x454, x452, x436, x433);
  let mut x455: u64 = 0;
  let mut x456: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x455, &mut x456, x454, x434, (0x0 as u64));
  let mut x457: u64 = 0;
  let mut x458: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x457, &mut x458, 0x0, x417, x443);
  let mut x459: u64 = 0;
  let mut x460: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x459, &mut x460, x458, x419, x445);
  let mut x461: u64 = 0;
  let mut x462: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x461, &mut x462, x460, x421, x447);
  let mut x463: u64 = 0;
  let mut x464: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x463, &mut x464, x462, x423, x449);
  let mut x465: u64 = 0;
  let mut x466: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x465, &mut x466, x464, x425, x451);
  let mut x467: u64 = 0;
  let mut x468: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x467, &mut x468, x466, x427, x453);
  let mut x469: u64 = 0;
  let mut x470: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x469, &mut x470, x468, x429, x455);
  let mut x471: u64 = 0;
  let mut x472: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x471, &mut x472, x470, (x430 as u64), (0x0 as u64));
  let mut x473: u64 = 0;
  let mut x474: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x473, &mut x474, 0x0, x459, (0xffffffff as u64));
  let mut x475: u64 = 0;
  let mut x476: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x475, &mut x476, x474, x461, 0xffffffff00000000);
  let mut x477: u64 = 0;
  let mut x478: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x477, &mut x478, x476, x463, 0xfffffffffffffffe);
  let mut x479: u64 = 0;
  let mut x480: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x479, &mut x480, x478, x465, 0xffffffffffffffff);
  let mut x481: u64 = 0;
  let mut x482: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x481, &mut x482, x480, x467, 0xffffffffffffffff);
  let mut x483: u64 = 0;
  let mut x484: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x483, &mut x484, x482, x469, 0xffffffffffffffff);
  let mut x485: u64 = 0;
  let mut x486: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x485, &mut x486, x484, x471, (0x0 as u64));
  let mut x487: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x487, x486, x473, x459);
  let mut x488: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x488, x486, x475, x461);
  let mut x489: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x489, x486, x477, x463);
  let mut x490: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x490, x486, x479, x465);
  let mut x491: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x491, x486, x481, x467);
  let mut x492: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x492, x486, x483, x469);
  out1[0] = x487;
  out1[1] = x488;
  out1[2] = x489;
  out1[3] = x490;
  out1[4] = x491;
  out1[5] = x492;
}

/*
 * The function fiat_p384_square squares a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_p384_square(out1: &mut [u64; 6], arg1: &[u64; 6]) -> () {
  let x1: u64 = (arg1[1]);
  let x2: u64 = (arg1[2]);
  let x3: u64 = (arg1[3]);
  let x4: u64 = (arg1[4]);
  let x5: u64 = (arg1[5]);
  let x6: u64 = (arg1[0]);
  let mut x7: u64 = 0;
  let mut x8: u64 = 0;
  fiat_p384_mulx_u64(&mut x7, &mut x8, x6, (arg1[5]));
  let mut x9: u64 = 0;
  let mut x10: u64 = 0;
  fiat_p384_mulx_u64(&mut x9, &mut x10, x6, (arg1[4]));
  let mut x11: u64 = 0;
  let mut x12: u64 = 0;
  fiat_p384_mulx_u64(&mut x11, &mut x12, x6, (arg1[3]));
  let mut x13: u64 = 0;
  let mut x14: u64 = 0;
  fiat_p384_mulx_u64(&mut x13, &mut x14, x6, (arg1[2]));
  let mut x15: u64 = 0;
  let mut x16: u64 = 0;
  fiat_p384_mulx_u64(&mut x15, &mut x16, x6, (arg1[1]));
  let mut x17: u64 = 0;
  let mut x18: u64 = 0;
  fiat_p384_mulx_u64(&mut x17, &mut x18, x6, (arg1[0]));
  let mut x19: u64 = 0;
  let mut x20: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x19, &mut x20, 0x0, x18, x15);
  let mut x21: u64 = 0;
  let mut x22: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x21, &mut x22, x20, x16, x13);
  let mut x23: u64 = 0;
  let mut x24: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x23, &mut x24, x22, x14, x11);
  let mut x25: u64 = 0;
  let mut x26: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x25, &mut x26, x24, x12, x9);
  let mut x27: u64 = 0;
  let mut x28: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x27, &mut x28, x26, x10, x7);
  let mut x29: u64 = 0;
  let mut x30: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x29, &mut x30, x28, x8, (0x0 as u64));
  let mut x31: u64 = 0;
  let mut x32: u64 = 0;
  fiat_p384_mulx_u64(&mut x31, &mut x32, x17, 0x100000001);
  let mut x33: u64 = 0;
  let mut x34: u64 = 0;
  fiat_p384_mulx_u64(&mut x33, &mut x34, x31, 0xffffffffffffffff);
  let mut x35: u64 = 0;
  let mut x36: u64 = 0;
  fiat_p384_mulx_u64(&mut x35, &mut x36, x31, 0xffffffffffffffff);
  let mut x37: u64 = 0;
  let mut x38: u64 = 0;
  fiat_p384_mulx_u64(&mut x37, &mut x38, x31, 0xffffffffffffffff);
  let mut x39: u64 = 0;
  let mut x40: u64 = 0;
  fiat_p384_mulx_u64(&mut x39, &mut x40, x31, 0xfffffffffffffffe);
  let mut x41: u64 = 0;
  let mut x42: u64 = 0;
  fiat_p384_mulx_u64(&mut x41, &mut x42, x31, 0xffffffff00000000);
  let mut x43: u64 = 0;
  let mut x44: u64 = 0;
  fiat_p384_mulx_u64(&mut x43, &mut x44, x31, 0xffffffff);
  let mut x45: u64 = 0;
  let mut x46: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x45, &mut x46, 0x0, x44, x41);
  let mut x47: u64 = 0;
  let mut x48: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x47, &mut x48, x46, x42, x39);
  let mut x49: u64 = 0;
  let mut x50: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x49, &mut x50, x48, x40, x37);
  let mut x51: u64 = 0;
  let mut x52: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x51, &mut x52, x50, x38, x35);
  let mut x53: u64 = 0;
  let mut x54: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x53, &mut x54, x52, x36, x33);
  let mut x55: u64 = 0;
  let mut x56: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x55, &mut x56, x54, x34, (0x0 as u64));
  let mut x57: u64 = 0;
  let mut x58: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x57, &mut x58, 0x0, x17, x43);
  let mut x59: u64 = 0;
  let mut x60: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x59, &mut x60, x58, x19, x45);
  let mut x61: u64 = 0;
  let mut x62: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x61, &mut x62, x60, x21, x47);
  let mut x63: u64 = 0;
  let mut x64: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x63, &mut x64, x62, x23, x49);
  let mut x65: u64 = 0;
  let mut x66: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x65, &mut x66, x64, x25, x51);
  let mut x67: u64 = 0;
  let mut x68: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x67, &mut x68, x66, x27, x53);
  let mut x69: u64 = 0;
  let mut x70: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x69, &mut x70, x68, x29, x55);
  let mut x71: u64 = 0;
  let mut x72: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x71, &mut x72, x70, (0x0 as u64), (0x0 as u64));
  let mut x73: u64 = 0;
  let mut x74: u64 = 0;
  fiat_p384_mulx_u64(&mut x73, &mut x74, x1, (arg1[5]));
  let mut x75: u64 = 0;
  let mut x76: u64 = 0;
  fiat_p384_mulx_u64(&mut x75, &mut x76, x1, (arg1[4]));
  let mut x77: u64 = 0;
  let mut x78: u64 = 0;
  fiat_p384_mulx_u64(&mut x77, &mut x78, x1, (arg1[3]));
  let mut x79: u64 = 0;
  let mut x80: u64 = 0;
  fiat_p384_mulx_u64(&mut x79, &mut x80, x1, (arg1[2]));
  let mut x81: u64 = 0;
  let mut x82: u64 = 0;
  fiat_p384_mulx_u64(&mut x81, &mut x82, x1, (arg1[1]));
  let mut x83: u64 = 0;
  let mut x84: u64 = 0;
  fiat_p384_mulx_u64(&mut x83, &mut x84, x1, (arg1[0]));
  let mut x85: u64 = 0;
  let mut x86: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x85, &mut x86, 0x0, x84, x81);
  let mut x87: u64 = 0;
  let mut x88: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x87, &mut x88, x86, x82, x79);
  let mut x89: u64 = 0;
  let mut x90: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x89, &mut x90, x88, x80, x77);
  let mut x91: u64 = 0;
  let mut x92: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x91, &mut x92, x90, x78, x75);
  let mut x93: u64 = 0;
  let mut x94: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x93, &mut x94, x92, x76, x73);
  let mut x95: u64 = 0;
  let mut x96: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x95, &mut x96, x94, x74, (0x0 as u64));
  let mut x97: u64 = 0;
  let mut x98: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x97, &mut x98, 0x0, x59, x83);
  let mut x99: u64 = 0;
  let mut x100: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x99, &mut x100, x98, x61, x85);
  let mut x101: u64 = 0;
  let mut x102: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x101, &mut x102, x100, x63, x87);
  let mut x103: u64 = 0;
  let mut x104: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x103, &mut x104, x102, x65, x89);
  let mut x105: u64 = 0;
  let mut x106: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x105, &mut x106, x104, x67, x91);
  let mut x107: u64 = 0;
  let mut x108: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x107, &mut x108, x106, x69, x93);
  let mut x109: u64 = 0;
  let mut x110: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x109, &mut x110, x108, ((x71 as fiat_p384_u1) as u64), x95);
  let mut x111: u64 = 0;
  let mut x112: u64 = 0;
  fiat_p384_mulx_u64(&mut x111, &mut x112, x97, 0x100000001);
  let mut x113: u64 = 0;
  let mut x114: u64 = 0;
  fiat_p384_mulx_u64(&mut x113, &mut x114, x111, 0xffffffffffffffff);
  let mut x115: u64 = 0;
  let mut x116: u64 = 0;
  fiat_p384_mulx_u64(&mut x115, &mut x116, x111, 0xffffffffffffffff);
  let mut x117: u64 = 0;
  let mut x118: u64 = 0;
  fiat_p384_mulx_u64(&mut x117, &mut x118, x111, 0xffffffffffffffff);
  let mut x119: u64 = 0;
  let mut x120: u64 = 0;
  fiat_p384_mulx_u64(&mut x119, &mut x120, x111, 0xfffffffffffffffe);
  let mut x121: u64 = 0;
  let mut x122: u64 = 0;
  fiat_p384_mulx_u64(&mut x121, &mut x122, x111, 0xffffffff00000000);
  let mut x123: u64 = 0;
  let mut x124: u64 = 0;
  fiat_p384_mulx_u64(&mut x123, &mut x124, x111, 0xffffffff);
  let mut x125: u64 = 0;
  let mut x126: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x125, &mut x126, 0x0, x124, x121);
  let mut x127: u64 = 0;
  let mut x128: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x127, &mut x128, x126, x122, x119);
  let mut x129: u64 = 0;
  let mut x130: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x129, &mut x130, x128, x120, x117);
  let mut x131: u64 = 0;
  let mut x132: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x131, &mut x132, x130, x118, x115);
  let mut x133: u64 = 0;
  let mut x134: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x133, &mut x134, x132, x116, x113);
  let mut x135: u64 = 0;
  let mut x136: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x135, &mut x136, x134, x114, (0x0 as u64));
  let mut x137: u64 = 0;
  let mut x138: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x137, &mut x138, 0x0, x97, x123);
  let mut x139: u64 = 0;
  let mut x140: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x139, &mut x140, x138, x99, x125);
  let mut x141: u64 = 0;
  let mut x142: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x141, &mut x142, x140, x101, x127);
  let mut x143: u64 = 0;
  let mut x144: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x143, &mut x144, x142, x103, x129);
  let mut x145: u64 = 0;
  let mut x146: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x145, &mut x146, x144, x105, x131);
  let mut x147: u64 = 0;
  let mut x148: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x147, &mut x148, x146, x107, x133);
  let mut x149: u64 = 0;
  let mut x150: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x149, &mut x150, x148, x109, x135);
  let mut x151: u64 = 0;
  let mut x152: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x151, &mut x152, x150, (x110 as u64), (0x0 as u64));
  let mut x153: u64 = 0;
  let mut x154: u64 = 0;
  fiat_p384_mulx_u64(&mut x153, &mut x154, x2, (arg1[5]));
  let mut x155: u64 = 0;
  let mut x156: u64 = 0;
  fiat_p384_mulx_u64(&mut x155, &mut x156, x2, (arg1[4]));
  let mut x157: u64 = 0;
  let mut x158: u64 = 0;
  fiat_p384_mulx_u64(&mut x157, &mut x158, x2, (arg1[3]));
  let mut x159: u64 = 0;
  let mut x160: u64 = 0;
  fiat_p384_mulx_u64(&mut x159, &mut x160, x2, (arg1[2]));
  let mut x161: u64 = 0;
  let mut x162: u64 = 0;
  fiat_p384_mulx_u64(&mut x161, &mut x162, x2, (arg1[1]));
  let mut x163: u64 = 0;
  let mut x164: u64 = 0;
  fiat_p384_mulx_u64(&mut x163, &mut x164, x2, (arg1[0]));
  let mut x165: u64 = 0;
  let mut x166: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x165, &mut x166, 0x0, x164, x161);
  let mut x167: u64 = 0;
  let mut x168: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x167, &mut x168, x166, x162, x159);
  let mut x169: u64 = 0;
  let mut x170: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x169, &mut x170, x168, x160, x157);
  let mut x171: u64 = 0;
  let mut x172: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x171, &mut x172, x170, x158, x155);
  let mut x173: u64 = 0;
  let mut x174: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x173, &mut x174, x172, x156, x153);
  let mut x175: u64 = 0;
  let mut x176: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x175, &mut x176, x174, x154, (0x0 as u64));
  let mut x177: u64 = 0;
  let mut x178: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x177, &mut x178, 0x0, x139, x163);
  let mut x179: u64 = 0;
  let mut x180: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x179, &mut x180, x178, x141, x165);
  let mut x181: u64 = 0;
  let mut x182: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x181, &mut x182, x180, x143, x167);
  let mut x183: u64 = 0;
  let mut x184: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x183, &mut x184, x182, x145, x169);
  let mut x185: u64 = 0;
  let mut x186: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x185, &mut x186, x184, x147, x171);
  let mut x187: u64 = 0;
  let mut x188: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x187, &mut x188, x186, x149, x173);
  let mut x189: u64 = 0;
  let mut x190: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x189, &mut x190, x188, x151, x175);
  let mut x191: u64 = 0;
  let mut x192: u64 = 0;
  fiat_p384_mulx_u64(&mut x191, &mut x192, x177, 0x100000001);
  let mut x193: u64 = 0;
  let mut x194: u64 = 0;
  fiat_p384_mulx_u64(&mut x193, &mut x194, x191, 0xffffffffffffffff);
  let mut x195: u64 = 0;
  let mut x196: u64 = 0;
  fiat_p384_mulx_u64(&mut x195, &mut x196, x191, 0xffffffffffffffff);
  let mut x197: u64 = 0;
  let mut x198: u64 = 0;
  fiat_p384_mulx_u64(&mut x197, &mut x198, x191, 0xffffffffffffffff);
  let mut x199: u64 = 0;
  let mut x200: u64 = 0;
  fiat_p384_mulx_u64(&mut x199, &mut x200, x191, 0xfffffffffffffffe);
  let mut x201: u64 = 0;
  let mut x202: u64 = 0;
  fiat_p384_mulx_u64(&mut x201, &mut x202, x191, 0xffffffff00000000);
  let mut x203: u64 = 0;
  let mut x204: u64 = 0;
  fiat_p384_mulx_u64(&mut x203, &mut x204, x191, 0xffffffff);
  let mut x205: u64 = 0;
  let mut x206: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x205, &mut x206, 0x0, x204, x201);
  let mut x207: u64 = 0;
  let mut x208: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x207, &mut x208, x206, x202, x199);
  let mut x209: u64 = 0;
  let mut x210: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x209, &mut x210, x208, x200, x197);
  let mut x211: u64 = 0;
  let mut x212: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x211, &mut x212, x210, x198, x195);
  let mut x213: u64 = 0;
  let mut x214: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x213, &mut x214, x212, x196, x193);
  let mut x215: u64 = 0;
  let mut x216: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x215, &mut x216, x214, x194, (0x0 as u64));
  let mut x217: u64 = 0;
  let mut x218: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x217, &mut x218, 0x0, x177, x203);
  let mut x219: u64 = 0;
  let mut x220: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x219, &mut x220, x218, x179, x205);
  let mut x221: u64 = 0;
  let mut x222: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x221, &mut x222, x220, x181, x207);
  let mut x223: u64 = 0;
  let mut x224: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x223, &mut x224, x222, x183, x209);
  let mut x225: u64 = 0;
  let mut x226: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x225, &mut x226, x224, x185, x211);
  let mut x227: u64 = 0;
  let mut x228: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x227, &mut x228, x226, x187, x213);
  let mut x229: u64 = 0;
  let mut x230: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x229, &mut x230, x228, x189, x215);
  let mut x231: u64 = 0;
  let mut x232: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x231, &mut x232, x230, (x190 as u64), (0x0 as u64));
  let mut x233: u64 = 0;
  let mut x234: u64 = 0;
  fiat_p384_mulx_u64(&mut x233, &mut x234, x3, (arg1[5]));
  let mut x235: u64 = 0;
  let mut x236: u64 = 0;
  fiat_p384_mulx_u64(&mut x235, &mut x236, x3, (arg1[4]));
  let mut x237: u64 = 0;
  let mut x238: u64 = 0;
  fiat_p384_mulx_u64(&mut x237, &mut x238, x3, (arg1[3]));
  let mut x239: u64 = 0;
  let mut x240: u64 = 0;
  fiat_p384_mulx_u64(&mut x239, &mut x240, x3, (arg1[2]));
  let mut x241: u64 = 0;
  let mut x242: u64 = 0;
  fiat_p384_mulx_u64(&mut x241, &mut x242, x3, (arg1[1]));
  let mut x243: u64 = 0;
  let mut x244: u64 = 0;
  fiat_p384_mulx_u64(&mut x243, &mut x244, x3, (arg1[0]));
  let mut x245: u64 = 0;
  let mut x246: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x245, &mut x246, 0x0, x244, x241);
  let mut x247: u64 = 0;
  let mut x248: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x247, &mut x248, x246, x242, x239);
  let mut x249: u64 = 0;
  let mut x250: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x249, &mut x250, x248, x240, x237);
  let mut x251: u64 = 0;
  let mut x252: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x251, &mut x252, x250, x238, x235);
  let mut x253: u64 = 0;
  let mut x254: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x253, &mut x254, x252, x236, x233);
  let mut x255: u64 = 0;
  let mut x256: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x255, &mut x256, x254, x234, (0x0 as u64));
  let mut x257: u64 = 0;
  let mut x258: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x257, &mut x258, 0x0, x219, x243);
  let mut x259: u64 = 0;
  let mut x260: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x259, &mut x260, x258, x221, x245);
  let mut x261: u64 = 0;
  let mut x262: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x261, &mut x262, x260, x223, x247);
  let mut x263: u64 = 0;
  let mut x264: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x263, &mut x264, x262, x225, x249);
  let mut x265: u64 = 0;
  let mut x266: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x265, &mut x266, x264, x227, x251);
  let mut x267: u64 = 0;
  let mut x268: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x267, &mut x268, x266, x229, x253);
  let mut x269: u64 = 0;
  let mut x270: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x269, &mut x270, x268, x231, x255);
  let mut x271: u64 = 0;
  let mut x272: u64 = 0;
  fiat_p384_mulx_u64(&mut x271, &mut x272, x257, 0x100000001);
  let mut x273: u64 = 0;
  let mut x274: u64 = 0;
  fiat_p384_mulx_u64(&mut x273, &mut x274, x271, 0xffffffffffffffff);
  let mut x275: u64 = 0;
  let mut x276: u64 = 0;
  fiat_p384_mulx_u64(&mut x275, &mut x276, x271, 0xffffffffffffffff);
  let mut x277: u64 = 0;
  let mut x278: u64 = 0;
  fiat_p384_mulx_u64(&mut x277, &mut x278, x271, 0xffffffffffffffff);
  let mut x279: u64 = 0;
  let mut x280: u64 = 0;
  fiat_p384_mulx_u64(&mut x279, &mut x280, x271, 0xfffffffffffffffe);
  let mut x281: u64 = 0;
  let mut x282: u64 = 0;
  fiat_p384_mulx_u64(&mut x281, &mut x282, x271, 0xffffffff00000000);
  let mut x283: u64 = 0;
  let mut x284: u64 = 0;
  fiat_p384_mulx_u64(&mut x283, &mut x284, x271, 0xffffffff);
  let mut x285: u64 = 0;
  let mut x286: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x285, &mut x286, 0x0, x284, x281);
  let mut x287: u64 = 0;
  let mut x288: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x287, &mut x288, x286, x282, x279);
  let mut x289: u64 = 0;
  let mut x290: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x289, &mut x290, x288, x280, x277);
  let mut x291: u64 = 0;
  let mut x292: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x291, &mut x292, x290, x278, x275);
  let mut x293: u64 = 0;
  let mut x294: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x293, &mut x294, x292, x276, x273);
  let mut x295: u64 = 0;
  let mut x296: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x295, &mut x296, x294, x274, (0x0 as u64));
  let mut x297: u64 = 0;
  let mut x298: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x297, &mut x298, 0x0, x257, x283);
  let mut x299: u64 = 0;
  let mut x300: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x299, &mut x300, x298, x259, x285);
  let mut x301: u64 = 0;
  let mut x302: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x301, &mut x302, x300, x261, x287);
  let mut x303: u64 = 0;
  let mut x304: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x303, &mut x304, x302, x263, x289);
  let mut x305: u64 = 0;
  let mut x306: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x305, &mut x306, x304, x265, x291);
  let mut x307: u64 = 0;
  let mut x308: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x307, &mut x308, x306, x267, x293);
  let mut x309: u64 = 0;
  let mut x310: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x309, &mut x310, x308, x269, x295);
  let mut x311: u64 = 0;
  let mut x312: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x311, &mut x312, x310, (x270 as u64), (0x0 as u64));
  let mut x313: u64 = 0;
  let mut x314: u64 = 0;
  fiat_p384_mulx_u64(&mut x313, &mut x314, x4, (arg1[5]));
  let mut x315: u64 = 0;
  let mut x316: u64 = 0;
  fiat_p384_mulx_u64(&mut x315, &mut x316, x4, (arg1[4]));
  let mut x317: u64 = 0;
  let mut x318: u64 = 0;
  fiat_p384_mulx_u64(&mut x317, &mut x318, x4, (arg1[3]));
  let mut x319: u64 = 0;
  let mut x320: u64 = 0;
  fiat_p384_mulx_u64(&mut x319, &mut x320, x4, (arg1[2]));
  let mut x321: u64 = 0;
  let mut x322: u64 = 0;
  fiat_p384_mulx_u64(&mut x321, &mut x322, x4, (arg1[1]));
  let mut x323: u64 = 0;
  let mut x324: u64 = 0;
  fiat_p384_mulx_u64(&mut x323, &mut x324, x4, (arg1[0]));
  let mut x325: u64 = 0;
  let mut x326: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x325, &mut x326, 0x0, x324, x321);
  let mut x327: u64 = 0;
  let mut x328: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x327, &mut x328, x326, x322, x319);
  let mut x329: u64 = 0;
  let mut x330: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x329, &mut x330, x328, x320, x317);
  let mut x331: u64 = 0;
  let mut x332: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x331, &mut x332, x330, x318, x315);
  let mut x333: u64 = 0;
  let mut x334: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x333, &mut x334, x332, x316, x313);
  let mut x335: u64 = 0;
  let mut x336: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x335, &mut x336, x334, x314, (0x0 as u64));
  let mut x337: u64 = 0;
  let mut x338: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x337, &mut x338, 0x0, x299, x323);
  let mut x339: u64 = 0;
  let mut x340: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x339, &mut x340, x338, x301, x325);
  let mut x341: u64 = 0;
  let mut x342: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x341, &mut x342, x340, x303, x327);
  let mut x343: u64 = 0;
  let mut x344: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x343, &mut x344, x342, x305, x329);
  let mut x345: u64 = 0;
  let mut x346: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x345, &mut x346, x344, x307, x331);
  let mut x347: u64 = 0;
  let mut x348: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x347, &mut x348, x346, x309, x333);
  let mut x349: u64 = 0;
  let mut x350: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x349, &mut x350, x348, x311, x335);
  let mut x351: u64 = 0;
  let mut x352: u64 = 0;
  fiat_p384_mulx_u64(&mut x351, &mut x352, x337, 0x100000001);
  let mut x353: u64 = 0;
  let mut x354: u64 = 0;
  fiat_p384_mulx_u64(&mut x353, &mut x354, x351, 0xffffffffffffffff);
  let mut x355: u64 = 0;
  let mut x356: u64 = 0;
  fiat_p384_mulx_u64(&mut x355, &mut x356, x351, 0xffffffffffffffff);
  let mut x357: u64 = 0;
  let mut x358: u64 = 0;
  fiat_p384_mulx_u64(&mut x357, &mut x358, x351, 0xffffffffffffffff);
  let mut x359: u64 = 0;
  let mut x360: u64 = 0;
  fiat_p384_mulx_u64(&mut x359, &mut x360, x351, 0xfffffffffffffffe);
  let mut x361: u64 = 0;
  let mut x362: u64 = 0;
  fiat_p384_mulx_u64(&mut x361, &mut x362, x351, 0xffffffff00000000);
  let mut x363: u64 = 0;
  let mut x364: u64 = 0;
  fiat_p384_mulx_u64(&mut x363, &mut x364, x351, 0xffffffff);
  let mut x365: u64 = 0;
  let mut x366: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x365, &mut x366, 0x0, x364, x361);
  let mut x367: u64 = 0;
  let mut x368: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x367, &mut x368, x366, x362, x359);
  let mut x369: u64 = 0;
  let mut x370: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x369, &mut x370, x368, x360, x357);
  let mut x371: u64 = 0;
  let mut x372: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x371, &mut x372, x370, x358, x355);
  let mut x373: u64 = 0;
  let mut x374: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x373, &mut x374, x372, x356, x353);
  let mut x375: u64 = 0;
  let mut x376: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x375, &mut x376, x374, x354, (0x0 as u64));
  let mut x377: u64 = 0;
  let mut x378: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x377, &mut x378, 0x0, x337, x363);
  let mut x379: u64 = 0;
  let mut x380: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x379, &mut x380, x378, x339, x365);
  let mut x381: u64 = 0;
  let mut x382: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x381, &mut x382, x380, x341, x367);
  let mut x383: u64 = 0;
  let mut x384: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x383, &mut x384, x382, x343, x369);
  let mut x385: u64 = 0;
  let mut x386: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x385, &mut x386, x384, x345, x371);
  let mut x387: u64 = 0;
  let mut x388: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x387, &mut x388, x386, x347, x373);
  let mut x389: u64 = 0;
  let mut x390: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x389, &mut x390, x388, x349, x375);
  let mut x391: u64 = 0;
  let mut x392: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x391, &mut x392, x390, (x350 as u64), (0x0 as u64));
  let mut x393: u64 = 0;
  let mut x394: u64 = 0;
  fiat_p384_mulx_u64(&mut x393, &mut x394, x5, (arg1[5]));
  let mut x395: u64 = 0;
  let mut x396: u64 = 0;
  fiat_p384_mulx_u64(&mut x395, &mut x396, x5, (arg1[4]));
  let mut x397: u64 = 0;
  let mut x398: u64 = 0;
  fiat_p384_mulx_u64(&mut x397, &mut x398, x5, (arg1[3]));
  let mut x399: u64 = 0;
  let mut x400: u64 = 0;
  fiat_p384_mulx_u64(&mut x399, &mut x400, x5, (arg1[2]));
  let mut x401: u64 = 0;
  let mut x402: u64 = 0;
  fiat_p384_mulx_u64(&mut x401, &mut x402, x5, (arg1[1]));
  let mut x403: u64 = 0;
  let mut x404: u64 = 0;
  fiat_p384_mulx_u64(&mut x403, &mut x404, x5, (arg1[0]));
  let mut x405: u64 = 0;
  let mut x406: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x405, &mut x406, 0x0, x404, x401);
  let mut x407: u64 = 0;
  let mut x408: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x407, &mut x408, x406, x402, x399);
  let mut x409: u64 = 0;
  let mut x410: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x409, &mut x410, x408, x400, x397);
  let mut x411: u64 = 0;
  let mut x412: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x411, &mut x412, x410, x398, x395);
  let mut x413: u64 = 0;
  let mut x414: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x413, &mut x414, x412, x396, x393);
  let mut x415: u64 = 0;
  let mut x416: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x415, &mut x416, x414, x394, (0x0 as u64));
  let mut x417: u64 = 0;
  let mut x418: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x417, &mut x418, 0x0, x379, x403);
  let mut x419: u64 = 0;
  let mut x420: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x419, &mut x420, x418, x381, x405);
  let mut x421: u64 = 0;
  let mut x422: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x421, &mut x422, x420, x383, x407);
  let mut x423: u64 = 0;
  let mut x424: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x423, &mut x424, x422, x385, x409);
  let mut x425: u64 = 0;
  let mut x426: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x425, &mut x426, x424, x387, x411);
  let mut x427: u64 = 0;
  let mut x428: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x427, &mut x428, x426, x389, x413);
  let mut x429: u64 = 0;
  let mut x430: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x429, &mut x430, x428, x391, x415);
  let mut x431: u64 = 0;
  let mut x432: u64 = 0;
  fiat_p384_mulx_u64(&mut x431, &mut x432, x417, 0x100000001);
  let mut x433: u64 = 0;
  let mut x434: u64 = 0;
  fiat_p384_mulx_u64(&mut x433, &mut x434, x431, 0xffffffffffffffff);
  let mut x435: u64 = 0;
  let mut x436: u64 = 0;
  fiat_p384_mulx_u64(&mut x435, &mut x436, x431, 0xffffffffffffffff);
  let mut x437: u64 = 0;
  let mut x438: u64 = 0;
  fiat_p384_mulx_u64(&mut x437, &mut x438, x431, 0xffffffffffffffff);
  let mut x439: u64 = 0;
  let mut x440: u64 = 0;
  fiat_p384_mulx_u64(&mut x439, &mut x440, x431, 0xfffffffffffffffe);
  let mut x441: u64 = 0;
  let mut x442: u64 = 0;
  fiat_p384_mulx_u64(&mut x441, &mut x442, x431, 0xffffffff00000000);
  let mut x443: u64 = 0;
  let mut x444: u64 = 0;
  fiat_p384_mulx_u64(&mut x443, &mut x444, x431, 0xffffffff);
  let mut x445: u64 = 0;
  let mut x446: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x445, &mut x446, 0x0, x444, x441);
  let mut x447: u64 = 0;
  let mut x448: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x447, &mut x448, x446, x442, x439);
  let mut x449: u64 = 0;
  let mut x450: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x449, &mut x450, x448, x440, x437);
  let mut x451: u64 = 0;
  let mut x452: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x451, &mut x452, x450, x438, x435);
  let mut x453: u64 = 0;
  let mut x454: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x453, &mut x454, x452, x436, x433);
  let mut x455: u64 = 0;
  let mut x456: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x455, &mut x456, x454, x434, (0x0 as u64));
  let mut x457: u64 = 0;
  let mut x458: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x457, &mut x458, 0x0, x417, x443);
  let mut x459: u64 = 0;
  let mut x460: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x459, &mut x460, x458, x419, x445);
  let mut x461: u64 = 0;
  let mut x462: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x461, &mut x462, x460, x421, x447);
  let mut x463: u64 = 0;
  let mut x464: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x463, &mut x464, x462, x423, x449);
  let mut x465: u64 = 0;
  let mut x466: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x465, &mut x466, x464, x425, x451);
  let mut x467: u64 = 0;
  let mut x468: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x467, &mut x468, x466, x427, x453);
  let mut x469: u64 = 0;
  let mut x470: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x469, &mut x470, x468, x429, x455);
  let mut x471: u64 = 0;
  let mut x472: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x471, &mut x472, x470, (x430 as u64), (0x0 as u64));
  let mut x473: u64 = 0;
  let mut x474: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x473, &mut x474, 0x0, x459, (0xffffffff as u64));
  let mut x475: u64 = 0;
  let mut x476: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x475, &mut x476, x474, x461, 0xffffffff00000000);
  let mut x477: u64 = 0;
  let mut x478: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x477, &mut x478, x476, x463, 0xfffffffffffffffe);
  let mut x479: u64 = 0;
  let mut x480: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x479, &mut x480, x478, x465, 0xffffffffffffffff);
  let mut x481: u64 = 0;
  let mut x482: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x481, &mut x482, x480, x467, 0xffffffffffffffff);
  let mut x483: u64 = 0;
  let mut x484: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x483, &mut x484, x482, x469, 0xffffffffffffffff);
  let mut x485: u64 = 0;
  let mut x486: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x485, &mut x486, x484, x471, (0x0 as u64));
  let mut x487: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x487, x486, x473, x459);
  let mut x488: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x488, x486, x475, x461);
  let mut x489: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x489, x486, x477, x463);
  let mut x490: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x490, x486, x479, x465);
  let mut x491: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x491, x486, x481, x467);
  let mut x492: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x492, x486, x483, x469);
  out1[0] = x487;
  out1[1] = x488;
  out1[2] = x489;
  out1[3] = x490;
  out1[4] = x491;
  out1[5] = x492;
}

/*
 * The function fiat_p384_add adds two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_p384_add(out1: &mut [u64; 6], arg1: &[u64; 6], arg2: &[u64; 6]) -> () {
  let mut x1: u64 = 0;
  let mut x2: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x1, &mut x2, 0x0, (arg1[0]), (arg2[0]));
  let mut x3: u64 = 0;
  let mut x4: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x3, &mut x4, x2, (arg1[1]), (arg2[1]));
  let mut x5: u64 = 0;
  let mut x6: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x5, &mut x6, x4, (arg1[2]), (arg2[2]));
  let mut x7: u64 = 0;
  let mut x8: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x7, &mut x8, x6, (arg1[3]), (arg2[3]));
  let mut x9: u64 = 0;
  let mut x10: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x9, &mut x10, x8, (arg1[4]), (arg2[4]));
  let mut x11: u64 = 0;
  let mut x12: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x11, &mut x12, x10, (arg1[5]), (arg2[5]));
  let mut x13: u64 = 0;
  let mut x14: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x13, &mut x14, 0x0, x1, (0xffffffff as u64));
  let mut x15: u64 = 0;
  let mut x16: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x15, &mut x16, x14, x3, 0xffffffff00000000);
  let mut x17: u64 = 0;
  let mut x18: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x17, &mut x18, x16, x5, 0xfffffffffffffffe);
  let mut x19: u64 = 0;
  let mut x20: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x19, &mut x20, x18, x7, 0xffffffffffffffff);
  let mut x21: u64 = 0;
  let mut x22: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x21, &mut x22, x20, x9, 0xffffffffffffffff);
  let mut x23: u64 = 0;
  let mut x24: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x23, &mut x24, x22, x11, 0xffffffffffffffff);
  let mut x25: u64 = 0;
  let mut x26: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x25, &mut x26, x24, (x12 as u64), (0x0 as u64));
  let mut x27: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x27, x26, x13, x1);
  let mut x28: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x28, x26, x15, x3);
  let mut x29: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x29, x26, x17, x5);
  let mut x30: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x30, x26, x19, x7);
  let mut x31: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x31, x26, x21, x9);
  let mut x32: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x32, x26, x23, x11);
  out1[0] = x27;
  out1[1] = x28;
  out1[2] = x29;
  out1[3] = x30;
  out1[4] = x31;
  out1[5] = x32;
}

/*
 * The function fiat_p384_sub subtracts two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_p384_sub(out1: &mut [u64; 6], arg1: &[u64; 6], arg2: &[u64; 6]) -> () {
  let mut x1: u64 = 0;
  let mut x2: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x1, &mut x2, 0x0, (arg1[0]), (arg2[0]));
  let mut x3: u64 = 0;
  let mut x4: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x3, &mut x4, x2, (arg1[1]), (arg2[1]));
  let mut x5: u64 = 0;
  let mut x6: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x5, &mut x6, x4, (arg1[2]), (arg2[2]));
  let mut x7: u64 = 0;
  let mut x8: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x7, &mut x8, x6, (arg1[3]), (arg2[3]));
  let mut x9: u64 = 0;
  let mut x10: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x9, &mut x10, x8, (arg1[4]), (arg2[4]));
  let mut x11: u64 = 0;
  let mut x12: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x11, &mut x12, x10, (arg1[5]), (arg2[5]));
  let mut x13: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x13, x12, (0x0 as u64), 0xffffffffffffffff);
  let mut x14: u64 = 0;
  let mut x15: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x14, &mut x15, 0x0, x1, (x13 & (0xffffffff as u64)));
  let mut x16: u64 = 0;
  let mut x17: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x16, &mut x17, x15, x3, (x13 & 0xffffffff00000000));
  let mut x18: u64 = 0;
  let mut x19: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x18, &mut x19, x17, x5, (x13 & 0xfffffffffffffffe));
  let mut x20: u64 = 0;
  let mut x21: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x20, &mut x21, x19, x7, (x13 & 0xffffffffffffffff));
  let mut x22: u64 = 0;
  let mut x23: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x22, &mut x23, x21, x9, (x13 & 0xffffffffffffffff));
  let mut x24: u64 = 0;
  let mut x25: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x24, &mut x25, x23, x11, (x13 & 0xffffffffffffffff));
  out1[0] = x14;
  out1[1] = x16;
  out1[2] = x18;
  out1[3] = x20;
  out1[4] = x22;
  out1[5] = x24;
}

/*
 * The function fiat_p384_opp negates a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_p384_opp(out1: &mut [u64; 6], arg1: &[u64; 6]) -> () {
  let mut x1: u64 = 0;
  let mut x2: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x1, &mut x2, 0x0, (0x0 as u64), (arg1[0]));
  let mut x3: u64 = 0;
  let mut x4: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x3, &mut x4, x2, (0x0 as u64), (arg1[1]));
  let mut x5: u64 = 0;
  let mut x6: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x5, &mut x6, x4, (0x0 as u64), (arg1[2]));
  let mut x7: u64 = 0;
  let mut x8: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x7, &mut x8, x6, (0x0 as u64), (arg1[3]));
  let mut x9: u64 = 0;
  let mut x10: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x9, &mut x10, x8, (0x0 as u64), (arg1[4]));
  let mut x11: u64 = 0;
  let mut x12: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x11, &mut x12, x10, (0x0 as u64), (arg1[5]));
  let mut x13: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x13, x12, (0x0 as u64), 0xffffffffffffffff);
  let mut x14: u64 = 0;
  let mut x15: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x14, &mut x15, 0x0, x1, (x13 & (0xffffffff as u64)));
  let mut x16: u64 = 0;
  let mut x17: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x16, &mut x17, x15, x3, (x13 & 0xffffffff00000000));
  let mut x18: u64 = 0;
  let mut x19: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x18, &mut x19, x17, x5, (x13 & 0xfffffffffffffffe));
  let mut x20: u64 = 0;
  let mut x21: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x20, &mut x21, x19, x7, (x13 & 0xffffffffffffffff));
  let mut x22: u64 = 0;
  let mut x23: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x22, &mut x23, x21, x9, (x13 & 0xffffffffffffffff));
  let mut x24: u64 = 0;
  let mut x25: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x24, &mut x25, x23, x11, (x13 & 0xffffffffffffffff));
  out1[0] = x14;
  out1[1] = x16;
  out1[2] = x18;
  out1[3] = x20;
  out1[4] = x22;
  out1[5] = x24;
}

/*
 * The function fiat_p384_from_montgomery translates a field element out of the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = (eval arg1 * ((2^64)⁻¹ mod m)^6) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_p384_from_montgomery(out1: &mut [u64; 6], arg1: &[u64; 6]) -> () {
  let x1: u64 = (arg1[0]);
  let mut x2: u64 = 0;
  let mut x3: u64 = 0;
  fiat_p384_mulx_u64(&mut x2, &mut x3, x1, 0x100000001);
  let mut x4: u64 = 0;
  let mut x5: u64 = 0;
  fiat_p384_mulx_u64(&mut x4, &mut x5, x2, 0xffffffffffffffff);
  let mut x6: u64 = 0;
  let mut x7: u64 = 0;
  fiat_p384_mulx_u64(&mut x6, &mut x7, x2, 0xffffffffffffffff);
  let mut x8: u64 = 0;
  let mut x9: u64 = 0;
  fiat_p384_mulx_u64(&mut x8, &mut x9, x2, 0xffffffffffffffff);
  let mut x10: u64 = 0;
  let mut x11: u64 = 0;
  fiat_p384_mulx_u64(&mut x10, &mut x11, x2, 0xfffffffffffffffe);
  let mut x12: u64 = 0;
  let mut x13: u64 = 0;
  fiat_p384_mulx_u64(&mut x12, &mut x13, x2, 0xffffffff00000000);
  let mut x14: u64 = 0;
  let mut x15: u64 = 0;
  fiat_p384_mulx_u64(&mut x14, &mut x15, x2, 0xffffffff);
  let mut x16: u64 = 0;
  let mut x17: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x16, &mut x17, 0x0, x15, x12);
  let mut x18: u64 = 0;
  let mut x19: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x18, &mut x19, x17, x13, x10);
  let mut x20: u64 = 0;
  let mut x21: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x20, &mut x21, x19, x11, x8);
  let mut x22: u64 = 0;
  let mut x23: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x22, &mut x23, x21, x9, x6);
  let mut x24: u64 = 0;
  let mut x25: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x24, &mut x25, x23, x7, x4);
  let mut x26: u64 = 0;
  let mut x27: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x26, &mut x27, 0x0, x1, x14);
  let mut x28: u64 = 0;
  let mut x29: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x28, &mut x29, x27, (0x0 as u64), x16);
  let mut x30: u64 = 0;
  let mut x31: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x30, &mut x31, x29, (0x0 as u64), x18);
  let mut x32: u64 = 0;
  let mut x33: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x32, &mut x33, x31, (0x0 as u64), x20);
  let mut x34: u64 = 0;
  let mut x35: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x34, &mut x35, x33, (0x0 as u64), x22);
  let mut x36: u64 = 0;
  let mut x37: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x36, &mut x37, x35, (0x0 as u64), x24);
  let mut x38: u64 = 0;
  let mut x39: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x38, &mut x39, x25, x5, (0x0 as u64));
  let mut x40: u64 = 0;
  let mut x41: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x40, &mut x41, x37, (0x0 as u64), x38);
  let mut x42: u64 = 0;
  let mut x43: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x42, &mut x43, 0x0, x28, (arg1[1]));
  let mut x44: u64 = 0;
  let mut x45: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x44, &mut x45, x43, x30, (0x0 as u64));
  let mut x46: u64 = 0;
  let mut x47: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x46, &mut x47, x45, x32, (0x0 as u64));
  let mut x48: u64 = 0;
  let mut x49: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x48, &mut x49, x47, x34, (0x0 as u64));
  let mut x50: u64 = 0;
  let mut x51: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x50, &mut x51, x49, x36, (0x0 as u64));
  let mut x52: u64 = 0;
  let mut x53: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x52, &mut x53, x51, x40, (0x0 as u64));
  let mut x54: u64 = 0;
  let mut x55: u64 = 0;
  fiat_p384_mulx_u64(&mut x54, &mut x55, x42, 0x100000001);
  let mut x56: u64 = 0;
  let mut x57: u64 = 0;
  fiat_p384_mulx_u64(&mut x56, &mut x57, x54, 0xffffffffffffffff);
  let mut x58: u64 = 0;
  let mut x59: u64 = 0;
  fiat_p384_mulx_u64(&mut x58, &mut x59, x54, 0xffffffffffffffff);
  let mut x60: u64 = 0;
  let mut x61: u64 = 0;
  fiat_p384_mulx_u64(&mut x60, &mut x61, x54, 0xffffffffffffffff);
  let mut x62: u64 = 0;
  let mut x63: u64 = 0;
  fiat_p384_mulx_u64(&mut x62, &mut x63, x54, 0xfffffffffffffffe);
  let mut x64: u64 = 0;
  let mut x65: u64 = 0;
  fiat_p384_mulx_u64(&mut x64, &mut x65, x54, 0xffffffff00000000);
  let mut x66: u64 = 0;
  let mut x67: u64 = 0;
  fiat_p384_mulx_u64(&mut x66, &mut x67, x54, 0xffffffff);
  let mut x68: u64 = 0;
  let mut x69: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x68, &mut x69, 0x0, x67, x64);
  let mut x70: u64 = 0;
  let mut x71: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x70, &mut x71, x69, x65, x62);
  let mut x72: u64 = 0;
  let mut x73: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x72, &mut x73, x71, x63, x60);
  let mut x74: u64 = 0;
  let mut x75: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x74, &mut x75, x73, x61, x58);
  let mut x76: u64 = 0;
  let mut x77: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x76, &mut x77, x75, x59, x56);
  let mut x78: u64 = 0;
  let mut x79: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x78, &mut x79, 0x0, x42, x66);
  let mut x80: u64 = 0;
  let mut x81: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x80, &mut x81, x79, x44, x68);
  let mut x82: u64 = 0;
  let mut x83: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x82, &mut x83, x81, x46, x70);
  let mut x84: u64 = 0;
  let mut x85: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x84, &mut x85, x83, x48, x72);
  let mut x86: u64 = 0;
  let mut x87: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x86, &mut x87, x85, x50, x74);
  let mut x88: u64 = 0;
  let mut x89: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x88, &mut x89, x87, x52, x76);
  let mut x90: u64 = 0;
  let mut x91: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x90, &mut x91, x77, x57, (0x0 as u64));
  let mut x92: u64 = 0;
  let mut x93: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x92, &mut x93, x41, (0x0 as u64), (0x0 as u64));
  let mut x94: u64 = 0;
  let mut x95: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x94, &mut x95, x53, ((x92 as fiat_p384_u1) as u64), (0x0 as u64));
  let mut x96: u64 = 0;
  let mut x97: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x96, &mut x97, x89, x94, x90);
  let mut x98: u64 = 0;
  let mut x99: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x98, &mut x99, 0x0, x80, (arg1[2]));
  let mut x100: u64 = 0;
  let mut x101: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x100, &mut x101, x99, x82, (0x0 as u64));
  let mut x102: u64 = 0;
  let mut x103: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x102, &mut x103, x101, x84, (0x0 as u64));
  let mut x104: u64 = 0;
  let mut x105: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x104, &mut x105, x103, x86, (0x0 as u64));
  let mut x106: u64 = 0;
  let mut x107: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x106, &mut x107, x105, x88, (0x0 as u64));
  let mut x108: u64 = 0;
  let mut x109: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x108, &mut x109, x107, x96, (0x0 as u64));
  let mut x110: u64 = 0;
  let mut x111: u64 = 0;
  fiat_p384_mulx_u64(&mut x110, &mut x111, x98, 0x100000001);
  let mut x112: u64 = 0;
  let mut x113: u64 = 0;
  fiat_p384_mulx_u64(&mut x112, &mut x113, x110, 0xffffffffffffffff);
  let mut x114: u64 = 0;
  let mut x115: u64 = 0;
  fiat_p384_mulx_u64(&mut x114, &mut x115, x110, 0xffffffffffffffff);
  let mut x116: u64 = 0;
  let mut x117: u64 = 0;
  fiat_p384_mulx_u64(&mut x116, &mut x117, x110, 0xffffffffffffffff);
  let mut x118: u64 = 0;
  let mut x119: u64 = 0;
  fiat_p384_mulx_u64(&mut x118, &mut x119, x110, 0xfffffffffffffffe);
  let mut x120: u64 = 0;
  let mut x121: u64 = 0;
  fiat_p384_mulx_u64(&mut x120, &mut x121, x110, 0xffffffff00000000);
  let mut x122: u64 = 0;
  let mut x123: u64 = 0;
  fiat_p384_mulx_u64(&mut x122, &mut x123, x110, 0xffffffff);
  let mut x124: u64 = 0;
  let mut x125: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x124, &mut x125, 0x0, x123, x120);
  let mut x126: u64 = 0;
  let mut x127: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x126, &mut x127, x125, x121, x118);
  let mut x128: u64 = 0;
  let mut x129: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x128, &mut x129, x127, x119, x116);
  let mut x130: u64 = 0;
  let mut x131: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x130, &mut x131, x129, x117, x114);
  let mut x132: u64 = 0;
  let mut x133: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x132, &mut x133, x131, x115, x112);
  let mut x134: u64 = 0;
  let mut x135: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x134, &mut x135, 0x0, x98, x122);
  let mut x136: u64 = 0;
  let mut x137: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x136, &mut x137, x135, x100, x124);
  let mut x138: u64 = 0;
  let mut x139: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x138, &mut x139, x137, x102, x126);
  let mut x140: u64 = 0;
  let mut x141: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x140, &mut x141, x139, x104, x128);
  let mut x142: u64 = 0;
  let mut x143: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x142, &mut x143, x141, x106, x130);
  let mut x144: u64 = 0;
  let mut x145: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x144, &mut x145, x143, x108, x132);
  let mut x146: u64 = 0;
  let mut x147: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x146, &mut x147, x133, x113, (0x0 as u64));
  let mut x148: u64 = 0;
  let mut x149: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x148, &mut x149, x97, (0x0 as u64), (0x0 as u64));
  let mut x150: u64 = 0;
  let mut x151: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x150, &mut x151, x109, ((x148 as fiat_p384_u1) as u64), (0x0 as u64));
  let mut x152: u64 = 0;
  let mut x153: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x152, &mut x153, x145, x150, x146);
  let mut x154: u64 = 0;
  let mut x155: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x154, &mut x155, 0x0, x136, (arg1[3]));
  let mut x156: u64 = 0;
  let mut x157: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x156, &mut x157, x155, x138, (0x0 as u64));
  let mut x158: u64 = 0;
  let mut x159: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x158, &mut x159, x157, x140, (0x0 as u64));
  let mut x160: u64 = 0;
  let mut x161: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x160, &mut x161, x159, x142, (0x0 as u64));
  let mut x162: u64 = 0;
  let mut x163: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x162, &mut x163, x161, x144, (0x0 as u64));
  let mut x164: u64 = 0;
  let mut x165: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x164, &mut x165, x163, x152, (0x0 as u64));
  let mut x166: u64 = 0;
  let mut x167: u64 = 0;
  fiat_p384_mulx_u64(&mut x166, &mut x167, x154, 0x100000001);
  let mut x168: u64 = 0;
  let mut x169: u64 = 0;
  fiat_p384_mulx_u64(&mut x168, &mut x169, x166, 0xffffffffffffffff);
  let mut x170: u64 = 0;
  let mut x171: u64 = 0;
  fiat_p384_mulx_u64(&mut x170, &mut x171, x166, 0xffffffffffffffff);
  let mut x172: u64 = 0;
  let mut x173: u64 = 0;
  fiat_p384_mulx_u64(&mut x172, &mut x173, x166, 0xffffffffffffffff);
  let mut x174: u64 = 0;
  let mut x175: u64 = 0;
  fiat_p384_mulx_u64(&mut x174, &mut x175, x166, 0xfffffffffffffffe);
  let mut x176: u64 = 0;
  let mut x177: u64 = 0;
  fiat_p384_mulx_u64(&mut x176, &mut x177, x166, 0xffffffff00000000);
  let mut x178: u64 = 0;
  let mut x179: u64 = 0;
  fiat_p384_mulx_u64(&mut x178, &mut x179, x166, 0xffffffff);
  let mut x180: u64 = 0;
  let mut x181: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x180, &mut x181, 0x0, x179, x176);
  let mut x182: u64 = 0;
  let mut x183: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x182, &mut x183, x181, x177, x174);
  let mut x184: u64 = 0;
  let mut x185: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x184, &mut x185, x183, x175, x172);
  let mut x186: u64 = 0;
  let mut x187: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x186, &mut x187, x185, x173, x170);
  let mut x188: u64 = 0;
  let mut x189: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x188, &mut x189, x187, x171, x168);
  let mut x190: u64 = 0;
  let mut x191: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x190, &mut x191, 0x0, x154, x178);
  let mut x192: u64 = 0;
  let mut x193: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x192, &mut x193, x191, x156, x180);
  let mut x194: u64 = 0;
  let mut x195: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x194, &mut x195, x193, x158, x182);
  let mut x196: u64 = 0;
  let mut x197: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x196, &mut x197, x195, x160, x184);
  let mut x198: u64 = 0;
  let mut x199: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x198, &mut x199, x197, x162, x186);
  let mut x200: u64 = 0;
  let mut x201: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x200, &mut x201, x199, x164, x188);
  let mut x202: u64 = 0;
  let mut x203: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x202, &mut x203, x189, x169, (0x0 as u64));
  let mut x204: u64 = 0;
  let mut x205: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x204, &mut x205, x153, (0x0 as u64), (0x0 as u64));
  let mut x206: u64 = 0;
  let mut x207: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x206, &mut x207, x165, ((x204 as fiat_p384_u1) as u64), (0x0 as u64));
  let mut x208: u64 = 0;
  let mut x209: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x208, &mut x209, x201, x206, x202);
  let mut x210: u64 = 0;
  let mut x211: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x210, &mut x211, 0x0, x192, (arg1[4]));
  let mut x212: u64 = 0;
  let mut x213: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x212, &mut x213, x211, x194, (0x0 as u64));
  let mut x214: u64 = 0;
  let mut x215: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x214, &mut x215, x213, x196, (0x0 as u64));
  let mut x216: u64 = 0;
  let mut x217: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x216, &mut x217, x215, x198, (0x0 as u64));
  let mut x218: u64 = 0;
  let mut x219: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x218, &mut x219, x217, x200, (0x0 as u64));
  let mut x220: u64 = 0;
  let mut x221: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x220, &mut x221, x219, x208, (0x0 as u64));
  let mut x222: u64 = 0;
  let mut x223: u64 = 0;
  fiat_p384_mulx_u64(&mut x222, &mut x223, x210, 0x100000001);
  let mut x224: u64 = 0;
  let mut x225: u64 = 0;
  fiat_p384_mulx_u64(&mut x224, &mut x225, x222, 0xffffffffffffffff);
  let mut x226: u64 = 0;
  let mut x227: u64 = 0;
  fiat_p384_mulx_u64(&mut x226, &mut x227, x222, 0xffffffffffffffff);
  let mut x228: u64 = 0;
  let mut x229: u64 = 0;
  fiat_p384_mulx_u64(&mut x228, &mut x229, x222, 0xffffffffffffffff);
  let mut x230: u64 = 0;
  let mut x231: u64 = 0;
  fiat_p384_mulx_u64(&mut x230, &mut x231, x222, 0xfffffffffffffffe);
  let mut x232: u64 = 0;
  let mut x233: u64 = 0;
  fiat_p384_mulx_u64(&mut x232, &mut x233, x222, 0xffffffff00000000);
  let mut x234: u64 = 0;
  let mut x235: u64 = 0;
  fiat_p384_mulx_u64(&mut x234, &mut x235, x222, 0xffffffff);
  let mut x236: u64 = 0;
  let mut x237: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x236, &mut x237, 0x0, x235, x232);
  let mut x238: u64 = 0;
  let mut x239: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x238, &mut x239, x237, x233, x230);
  let mut x240: u64 = 0;
  let mut x241: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x240, &mut x241, x239, x231, x228);
  let mut x242: u64 = 0;
  let mut x243: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x242, &mut x243, x241, x229, x226);
  let mut x244: u64 = 0;
  let mut x245: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x244, &mut x245, x243, x227, x224);
  let mut x246: u64 = 0;
  let mut x247: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x246, &mut x247, 0x0, x210, x234);
  let mut x248: u64 = 0;
  let mut x249: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x248, &mut x249, x247, x212, x236);
  let mut x250: u64 = 0;
  let mut x251: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x250, &mut x251, x249, x214, x238);
  let mut x252: u64 = 0;
  let mut x253: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x252, &mut x253, x251, x216, x240);
  let mut x254: u64 = 0;
  let mut x255: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x254, &mut x255, x253, x218, x242);
  let mut x256: u64 = 0;
  let mut x257: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x256, &mut x257, x255, x220, x244);
  let mut x258: u64 = 0;
  let mut x259: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x258, &mut x259, x245, x225, (0x0 as u64));
  let mut x260: u64 = 0;
  let mut x261: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x260, &mut x261, x209, (0x0 as u64), (0x0 as u64));
  let mut x262: u64 = 0;
  let mut x263: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x262, &mut x263, x221, ((x260 as fiat_p384_u1) as u64), (0x0 as u64));
  let mut x264: u64 = 0;
  let mut x265: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x264, &mut x265, x257, x262, x258);
  let mut x266: u64 = 0;
  let mut x267: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x266, &mut x267, 0x0, x248, (arg1[5]));
  let mut x268: u64 = 0;
  let mut x269: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x268, &mut x269, x267, x250, (0x0 as u64));
  let mut x270: u64 = 0;
  let mut x271: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x270, &mut x271, x269, x252, (0x0 as u64));
  let mut x272: u64 = 0;
  let mut x273: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x272, &mut x273, x271, x254, (0x0 as u64));
  let mut x274: u64 = 0;
  let mut x275: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x274, &mut x275, x273, x256, (0x0 as u64));
  let mut x276: u64 = 0;
  let mut x277: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x276, &mut x277, x275, x264, (0x0 as u64));
  let mut x278: u64 = 0;
  let mut x279: u64 = 0;
  fiat_p384_mulx_u64(&mut x278, &mut x279, x266, 0x100000001);
  let mut x280: u64 = 0;
  let mut x281: u64 = 0;
  fiat_p384_mulx_u64(&mut x280, &mut x281, x278, 0xffffffffffffffff);
  let mut x282: u64 = 0;
  let mut x283: u64 = 0;
  fiat_p384_mulx_u64(&mut x282, &mut x283, x278, 0xffffffffffffffff);
  let mut x284: u64 = 0;
  let mut x285: u64 = 0;
  fiat_p384_mulx_u64(&mut x284, &mut x285, x278, 0xffffffffffffffff);
  let mut x286: u64 = 0;
  let mut x287: u64 = 0;
  fiat_p384_mulx_u64(&mut x286, &mut x287, x278, 0xfffffffffffffffe);
  let mut x288: u64 = 0;
  let mut x289: u64 = 0;
  fiat_p384_mulx_u64(&mut x288, &mut x289, x278, 0xffffffff00000000);
  let mut x290: u64 = 0;
  let mut x291: u64 = 0;
  fiat_p384_mulx_u64(&mut x290, &mut x291, x278, 0xffffffff);
  let mut x292: u64 = 0;
  let mut x293: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x292, &mut x293, 0x0, x291, x288);
  let mut x294: u64 = 0;
  let mut x295: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x294, &mut x295, x293, x289, x286);
  let mut x296: u64 = 0;
  let mut x297: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x296, &mut x297, x295, x287, x284);
  let mut x298: u64 = 0;
  let mut x299: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x298, &mut x299, x297, x285, x282);
  let mut x300: u64 = 0;
  let mut x301: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x300, &mut x301, x299, x283, x280);
  let mut x302: u64 = 0;
  let mut x303: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x302, &mut x303, 0x0, x266, x290);
  let mut x304: u64 = 0;
  let mut x305: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x304, &mut x305, x303, x268, x292);
  let mut x306: u64 = 0;
  let mut x307: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x306, &mut x307, x305, x270, x294);
  let mut x308: u64 = 0;
  let mut x309: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x308, &mut x309, x307, x272, x296);
  let mut x310: u64 = 0;
  let mut x311: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x310, &mut x311, x309, x274, x298);
  let mut x312: u64 = 0;
  let mut x313: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x312, &mut x313, x311, x276, x300);
  let mut x314: u64 = 0;
  let mut x315: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x314, &mut x315, x301, x281, (0x0 as u64));
  let mut x316: u64 = 0;
  let mut x317: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x316, &mut x317, x265, (0x0 as u64), (0x0 as u64));
  let mut x318: u64 = 0;
  let mut x319: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x318, &mut x319, x277, ((x316 as fiat_p384_u1) as u64), (0x0 as u64));
  let mut x320: u64 = 0;
  let mut x321: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x320, &mut x321, x313, x318, x314);
  let mut x322: u64 = 0;
  let mut x323: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x322, &mut x323, 0x0, x304, (0xffffffff as u64));
  let mut x324: u64 = 0;
  let mut x325: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x324, &mut x325, x323, x306, 0xffffffff00000000);
  let mut x326: u64 = 0;
  let mut x327: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x326, &mut x327, x325, x308, 0xfffffffffffffffe);
  let mut x328: u64 = 0;
  let mut x329: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x328, &mut x329, x327, x310, 0xffffffffffffffff);
  let mut x330: u64 = 0;
  let mut x331: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x330, &mut x331, x329, x312, 0xffffffffffffffff);
  let mut x332: u64 = 0;
  let mut x333: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x332, &mut x333, x331, x320, 0xffffffffffffffff);
  let mut x334: u64 = 0;
  let mut x335: fiat_p384_u1 = 0;
  fiat_p384_addcarryx_u64(&mut x334, &mut x335, x321, (0x0 as u64), (0x0 as u64));
  let mut x336: u64 = 0;
  let mut x337: fiat_p384_u1 = 0;
  fiat_p384_subborrowx_u64(&mut x336, &mut x337, x333, ((x334 as fiat_p384_u1) as u64), (0x0 as u64));
  let mut x338: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x338, x337, x322, x304);
  let mut x339: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x339, x337, x324, x306);
  let mut x340: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x340, x337, x326, x308);
  let mut x341: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x341, x337, x328, x310);
  let mut x342: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x342, x337, x330, x312);
  let mut x343: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x343, x337, x332, x320);
  out1[0] = x338;
  out1[1] = x339;
  out1[2] = x340;
  out1[3] = x341;
  out1[4] = x342;
  out1[5] = x343;
}

/*
 * The function fiat_p384_nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 */
#[inline]
pub fn fiat_p384_nonzero(out1: &mut u64, arg1: &[u64; 6]) -> () {
  let x1: u64 = ((arg1[0]) | ((arg1[1]) | ((arg1[2]) | ((arg1[3]) | ((arg1[4]) | ((arg1[5]) | (0x0 as u64)))))));
  *out1 = x1;
}

/*
 * The function fiat_p384_selectznz is a multi-limb conditional select.
 * Postconditions:
 *   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_p384_selectznz(out1: &mut [u64; 6], arg1: fiat_p384_u1, arg2: &[u64; 6], arg3: &[u64; 6]) -> () {
  let mut x1: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x1, arg1, (arg2[0]), (arg3[0]));
  let mut x2: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x2, arg1, (arg2[1]), (arg3[1]));
  let mut x3: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x3, arg1, (arg2[2]), (arg3[2]));
  let mut x4: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x4, arg1, (arg2[3]), (arg3[3]));
  let mut x5: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x5, arg1, (arg2[4]), (arg3[4]));
  let mut x6: u64 = 0;
  fiat_p384_cmovznz_u64(&mut x6, arg1, (arg2[5]), (arg3[5]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
  out1[4] = x5;
  out1[5] = x6;
}

/*
 * The function fiat_p384_to_bytes serializes a field element in the Montgomery domain to bytes in little-endian order.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..47]
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
 */
#[inline]
pub fn fiat_p384_to_bytes(out1: &mut [u8; 48], arg1: &[u64; 6]) -> () {
  let x1: u64 = (arg1[5]);
  let x2: u64 = (arg1[4]);
  let x3: u64 = (arg1[3]);
  let x4: u64 = (arg1[2]);
  let x5: u64 = (arg1[1]);
  let x6: u64 = (arg1[0]);
  let x7: u64 = (x6 >> 8);
  let x8: u8 = ((x6 & (0xff as u64)) as u8);
  let x9: u64 = (x7 >> 8);
  let x10: u8 = ((x7 & (0xff as u64)) as u8);
  let x11: u64 = (x9 >> 8);
  let x12: u8 = ((x9 & (0xff as u64)) as u8);
  let x13: u64 = (x11 >> 8);
  let x14: u8 = ((x11 & (0xff as u64)) as u8);
  let x15: u64 = (x13 >> 8);
  let x16: u8 = ((x13 & (0xff as u64)) as u8);
  let x17: u64 = (x15 >> 8);
  let x18: u8 = ((x15 & (0xff as u64)) as u8);
  let x19: u8 = ((x17 >> 8) as u8);
  let x20: u8 = ((x17 & (0xff as u64)) as u8);
  let x21: u8 = (x19 & 0xff);
  let x22: u64 = (x5 >> 8);
  let x23: u8 = ((x5 & (0xff as u64)) as u8);
  let x24: u64 = (x22 >> 8);
  let x25: u8 = ((x22 & (0xff as u64)) as u8);
  let x26: u64 = (x24 >> 8);
  let x27: u8 = ((x24 & (0xff as u64)) as u8);
  let x28: u64 = (x26 >> 8);
  let x29: u8 = ((x26 & (0xff as u64)) as u8);
  let x30: u64 = (x28 >> 8);
  let x31: u8 = ((x28 & (0xff as u64)) as u8);
  let x32: u64 = (x30 >> 8);
  let x33: u8 = ((x30 & (0xff as u64)) as u8);
  let x34: u8 = ((x32 >> 8) as u8);
  let x35: u8 = ((x32 & (0xff as u64)) as u8);
  let x36: u8 = (x34 & 0xff);
  let x37: u64 = (x4 >> 8);
  let x38: u8 = ((x4 & (0xff as u64)) as u8);
  let x39: u64 = (x37 >> 8);
  let x40: u8 = ((x37 & (0xff as u64)) as u8);
  let x41: u64 = (x39 >> 8);
  let x42: u8 = ((x39 & (0xff as u64)) as u8);
  let x43: u64 = (x41 >> 8);
  let x44: u8 = ((x41 & (0xff as u64)) as u8);
  let x45: u64 = (x43 >> 8);
  let x46: u8 = ((x43 & (0xff as u64)) as u8);
  let x47: u64 = (x45 >> 8);
  let x48: u8 = ((x45 & (0xff as u64)) as u8);
  let x49: u8 = ((x47 >> 8) as u8);
  let x50: u8 = ((x47 & (0xff as u64)) as u8);
  let x51: u8 = (x49 & 0xff);
  let x52: u64 = (x3 >> 8);
  let x53: u8 = ((x3 & (0xff as u64)) as u8);
  let x54: u64 = (x52 >> 8);
  let x55: u8 = ((x52 & (0xff as u64)) as u8);
  let x56: u64 = (x54 >> 8);
  let x57: u8 = ((x54 & (0xff as u64)) as u8);
  let x58: u64 = (x56 >> 8);
  let x59: u8 = ((x56 & (0xff as u64)) as u8);
  let x60: u64 = (x58 >> 8);
  let x61: u8 = ((x58 & (0xff as u64)) as u8);
  let x62: u64 = (x60 >> 8);
  let x63: u8 = ((x60 & (0xff as u64)) as u8);
  let x64: u8 = ((x62 >> 8) as u8);
  let x65: u8 = ((x62 & (0xff as u64)) as u8);
  let x66: u8 = (x64 & 0xff);
  let x67: u64 = (x2 >> 8);
  let x68: u8 = ((x2 & (0xff as u64)) as u8);
  let x69: u64 = (x67 >> 8);
  let x70: u8 = ((x67 & (0xff as u64)) as u8);
  let x71: u64 = (x69 >> 8);
  let x72: u8 = ((x69 & (0xff as u64)) as u8);
  let x73: u64 = (x71 >> 8);
  let x74: u8 = ((x71 & (0xff as u64)) as u8);
  let x75: u64 = (x73 >> 8);
  let x76: u8 = ((x73 & (0xff as u64)) as u8);
  let x77: u64 = (x75 >> 8);
  let x78: u8 = ((x75 & (0xff as u64)) as u8);
  let x79: u8 = ((x77 >> 8) as u8);
  let x80: u8 = ((x77 & (0xff as u64)) as u8);
  let x81: u8 = (x79 & 0xff);
  let x82: u64 = (x1 >> 8);
  let x83: u8 = ((x1 & (0xff as u64)) as u8);
  let x84: u64 = (x82 >> 8);
  let x85: u8 = ((x82 & (0xff as u64)) as u8);
  let x86: u64 = (x84 >> 8);
  let x87: u8 = ((x84 & (0xff as u64)) as u8);
  let x88: u64 = (x86 >> 8);
  let x89: u8 = ((x86 & (0xff as u64)) as u8);
  let x90: u64 = (x88 >> 8);
  let x91: u8 = ((x88 & (0xff as u64)) as u8);
  let x92: u64 = (x90 >> 8);
  let x93: u8 = ((x90 & (0xff as u64)) as u8);
  let x94: u8 = ((x92 >> 8) as u8);
  let x95: u8 = ((x92 & (0xff as u64)) as u8);
  out1[0] = x8;
  out1[1] = x10;
  out1[2] = x12;
  out1[3] = x14;
  out1[4] = x16;
  out1[5] = x18;
  out1[6] = x20;
  out1[7] = x21;
  out1[8] = x23;
  out1[9] = x25;
  out1[10] = x27;
  out1[11] = x29;
  out1[12] = x31;
  out1[13] = x33;
  out1[14] = x35;
  out1[15] = x36;
  out1[16] = x38;
  out1[17] = x40;
  out1[18] = x42;
  out1[19] = x44;
  out1[20] = x46;
  out1[21] = x48;
  out1[22] = x50;
  out1[23] = x51;
  out1[24] = x53;
  out1[25] = x55;
  out1[26] = x57;
  out1[27] = x59;
  out1[28] = x61;
  out1[29] = x63;
  out1[30] = x65;
  out1[31] = x66;
  out1[32] = x68;
  out1[33] = x70;
  out1[34] = x72;
  out1[35] = x74;
  out1[36] = x76;
  out1[37] = x78;
  out1[38] = x80;
  out1[39] = x81;
  out1[40] = x83;
  out1[41] = x85;
  out1[42] = x87;
  out1[43] = x89;
  out1[44] = x91;
  out1[45] = x93;
  out1[46] = x95;
  out1[47] = x94;
}

/*
 * The function fiat_p384_from_bytes deserializes a field element in the Montgomery domain from bytes in little-endian order.
 * Preconditions:
 *   0 ≤ bytes_eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = bytes_eval arg1 mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_p384_from_bytes(out1: &mut [u64; 6], arg1: &[u8; 48]) -> () {
  let x1: u64 = (((arg1[47]) as u64) << 56);
  let x2: u64 = (((arg1[46]) as u64) << 48);
  let x3: u64 = (((arg1[45]) as u64) << 40);
  let x4: u64 = (((arg1[44]) as u64) << 32);
  let x5: u64 = (((arg1[43]) as u64) << 24);
  let x6: u64 = (((arg1[42]) as u64) << 16);
  let x7: u64 = (((arg1[41]) as u64) << 8);
  let x8: u8 = (arg1[40]);
  let x9: u64 = (((arg1[39]) as u64) << 56);
  let x10: u64 = (((arg1[38]) as u64) << 48);
  let x11: u64 = (((arg1[37]) as u64) << 40);
  let x12: u64 = (((arg1[36]) as u64) << 32);
  let x13: u64 = (((arg1[35]) as u64) << 24);
  let x14: u64 = (((arg1[34]) as u64) << 16);
  let x15: u64 = (((arg1[33]) as u64) << 8);
  let x16: u8 = (arg1[32]);
  let x17: u64 = (((arg1[31]) as u64) << 56);
  let x18: u64 = (((arg1[30]) as u64) << 48);
  let x19: u64 = (((arg1[29]) as u64) << 40);
  let x20: u64 = (((arg1[28]) as u64) << 32);
  let x21: u64 = (((arg1[27]) as u64) << 24);
  let x22: u64 = (((arg1[26]) as u64) << 16);
  let x23: u64 = (((arg1[25]) as u64) << 8);
  let x24: u8 = (arg1[24]);
  let x25: u64 = (((arg1[23]) as u64) << 56);
  let x26: u64 = (((arg1[22]) as u64) << 48);
  let x27: u64 = (((arg1[21]) as u64) << 40);
  let x28: u64 = (((arg1[20]) as u64) << 32);
  let x29: u64 = (((arg1[19]) as u64) << 24);
  let x30: u64 = (((arg1[18]) as u64) << 16);
  let x31: u64 = (((arg1[17]) as u64) << 8);
  let x32: u8 = (arg1[16]);
  let x33: u64 = (((arg1[15]) as u64) << 56);
  let x34: u64 = (((arg1[14]) as u64) << 48);
  let x35: u64 = (((arg1[13]) as u64) << 40);
  let x36: u64 = (((arg1[12]) as u64) << 32);
  let x37: u64 = (((arg1[11]) as u64) << 24);
  let x38: u64 = (((arg1[10]) as u64) << 16);
  let x39: u64 = (((arg1[9]) as u64) << 8);
  let x40: u8 = (arg1[8]);
  let x41: u64 = (((arg1[7]) as u64) << 56);
  let x42: u64 = (((arg1[6]) as u64) << 48);
  let x43: u64 = (((arg1[5]) as u64) << 40);
  let x44: u64 = (((arg1[4]) as u64) << 32);
  let x45: u64 = (((arg1[3]) as u64) << 24);
  let x46: u64 = (((arg1[2]) as u64) << 16);
  let x47: u64 = (((arg1[1]) as u64) << 8);
  let x48: u8 = (arg1[0]);
  let x49: u64 = ((x48 as u64) + (x47 + (x46 + (x45 + (x44 + (x43 + (x42 + x41)))))));
  let x50: u64 = (x49 & 0xffffffffffffffff);
  let x51: u64 = ((x8 as u64) + (x7 + (x6 + (x5 + (x4 + (x3 + (x2 + x1)))))));
  let x52: u64 = ((x16 as u64) + (x15 + (x14 + (x13 + (x12 + (x11 + (x10 + x9)))))));
  let x53: u64 = ((x24 as u64) + (x23 + (x22 + (x21 + (x20 + (x19 + (x18 + x17)))))));
  let x54: u64 = ((x32 as u64) + (x31 + (x30 + (x29 + (x28 + (x27 + (x26 + x25)))))));
  let x55: u64 = ((x40 as u64) + (x39 + (x38 + (x37 + (x36 + (x35 + (x34 + x33)))))));
  let x56: u64 = (x55 & 0xffffffffffffffff);
  let x57: u64 = (x54 & 0xffffffffffffffff);
  let x58: u64 = (x53 & 0xffffffffffffffff);
  let x59: u64 = (x52 & 0xffffffffffffffff);
  out1[0] = x50;
  out1[1] = x56;
  out1[2] = x57;
  out1[3] = x58;
  out1[4] = x59;
  out1[5] = x51;
}

