/* Autogenerated: src/ExtractionOCaml/word_by_word_montgomery --lang=Rust secp256k1 '2^256 - 2^32 - 977' 64 */
/* curve description: secp256k1 */
/* requested operations: (all) */
/* m = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f (from "2^256 - 2^32 - 977") */
/* machine_wordsize = 64 (from "64") */
/*                                                                    */
/* NOTE: In addition to the bounds specified above each function, all */
/*   functions synthesized for this Montgomery arithmetic require the */
/*   input to be strictly less than the prime modulus (m), and also   */
/*   require the input to be in the unique saturated representation.  */
/*   All functions also ensure that these two properties are true of  */
/*   return values.                                                   */

#![allow(unused_parens)]
#[allow(non_camel_case_types)]

pub type fiat_secp256k1_u1 = u8;
pub type fiat_secp256k1_i1 = i8;
pub type fiat_secp256k1_u2 = u8;
pub type fiat_secp256k1_i2 = i8;
pub type fiat_secp256k1_u128 = u128;
pub type fiat_secp256k1_i128 = i128;


/*
 * The function fiat_secp256k1_addcarryx_u64 is an addition with carry.
 * Postconditions:
 *   out1 = (arg1 + arg2 + arg3) mod 2^64
 *   out2 = ⌊(arg1 + arg2 + arg3) / 2^64⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 *   arg3: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 *   out2: [0x0 ~> 0x1]
 */
#[inline]
pub fn fiat_secp256k1_addcarryx_u64(out1: &mut u64, out2: &mut fiat_secp256k1_u1, arg1: fiat_secp256k1_u1, arg2: u64, arg3: u64) -> () {
  let x1: fiat_secp256k1_u128 = (((arg1 as fiat_secp256k1_u128) + (arg2 as fiat_secp256k1_u128)) + (arg3 as fiat_secp256k1_u128));
  let x2: u64 = ((x1 & (0xffffffffffffffff as fiat_secp256k1_u128)) as u64);
  let x3: fiat_secp256k1_u1 = ((x1 >> 64) as fiat_secp256k1_u1);
  *out1 = x2;
  *out2 = x3;
}

/*
 * The function fiat_secp256k1_subborrowx_u64 is a subtraction with borrow.
 * Postconditions:
 *   out1 = (-arg1 + arg2 + -arg3) mod 2^64
 *   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^64⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 *   arg3: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 *   out2: [0x0 ~> 0x1]
 */
#[inline]
pub fn fiat_secp256k1_subborrowx_u64(out1: &mut u64, out2: &mut fiat_secp256k1_u1, arg1: fiat_secp256k1_u1, arg2: u64, arg3: u64) -> () {
  let x1: fiat_secp256k1_i128 = (((arg2 as fiat_secp256k1_i128) - (arg1 as fiat_secp256k1_i128)) - (arg3 as fiat_secp256k1_i128));
  let x2: fiat_secp256k1_i1 = ((x1 >> 64) as fiat_secp256k1_i1);
  let x3: u64 = ((x1 & (0xffffffffffffffff as fiat_secp256k1_i128)) as u64);
  *out1 = x3;
  *out2 = (((0x0 as fiat_secp256k1_i2) - (x2 as fiat_secp256k1_i2)) as fiat_secp256k1_u1);
}

/*
 * The function fiat_secp256k1_mulx_u64 is a multiplication, returning the full double-width result.
 * Postconditions:
 *   out1 = (arg1 * arg2) mod 2^64
 *   out2 = ⌊arg1 * arg2 / 2^64⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0xffffffffffffffff]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 *   out2: [0x0 ~> 0xffffffffffffffff]
 */
#[inline]
pub fn fiat_secp256k1_mulx_u64(out1: &mut u64, out2: &mut u64, arg1: u64, arg2: u64) -> () {
  let x1: fiat_secp256k1_u128 = ((arg1 as fiat_secp256k1_u128) * (arg2 as fiat_secp256k1_u128));
  let x2: u64 = ((x1 & (0xffffffffffffffff as fiat_secp256k1_u128)) as u64);
  let x3: u64 = ((x1 >> 64) as u64);
  *out1 = x2;
  *out2 = x3;
}

/*
 * The function fiat_secp256k1_cmovznz_u64 is a single-word conditional move.
 * Postconditions:
 *   out1 = (if arg1 = 0 then arg2 else arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 *   arg3: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 */
#[inline]
pub fn fiat_secp256k1_cmovznz_u64(out1: &mut u64, arg1: fiat_secp256k1_u1, arg2: u64, arg3: u64) -> () {
  let x1: fiat_secp256k1_u1 = (!(!arg1));
  let x2: u64 = ((((((0x0 as fiat_secp256k1_i2) - (x1 as fiat_secp256k1_i2)) as fiat_secp256k1_i1) as fiat_secp256k1_i128) & (0xffffffffffffffff as fiat_secp256k1_i128)) as u64);
  let x3: u64 = ((x2 & arg3) | ((!x2) & arg2));
  *out1 = x3;
}

/*
 * The function fiat_secp256k1_mul multiplies two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_secp256k1_mul(out1: &mut [u64; 4], arg1: &[u64; 4], arg2: &[u64; 4]) -> () {
  let x1: u64 = (arg1[1]);
  let x2: u64 = (arg1[2]);
  let x3: u64 = (arg1[3]);
  let x4: u64 = (arg1[0]);
  let mut x5: u64 = 0;
  let mut x6: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x5, &mut x6, x4, (arg2[3]));
  let mut x7: u64 = 0;
  let mut x8: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x7, &mut x8, x4, (arg2[2]));
  let mut x9: u64 = 0;
  let mut x10: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x9, &mut x10, x4, (arg2[1]));
  let mut x11: u64 = 0;
  let mut x12: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x11, &mut x12, x4, (arg2[0]));
  let mut x13: u64 = 0;
  let mut x14: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x13, &mut x14, 0x0, x12, x9);
  let mut x15: u64 = 0;
  let mut x16: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x15, &mut x16, x14, x10, x7);
  let mut x17: u64 = 0;
  let mut x18: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x17, &mut x18, x16, x8, x5);
  let mut x19: u64 = 0;
  let mut x20: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x19, &mut x20, x18, x6, (0x0 as u64));
  let mut x21: u64 = 0;
  let mut x22: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x21, &mut x22, x11, 0xd838091dd2253531);
  let mut x23: u64 = 0;
  let mut x24: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x23, &mut x24, x21, 0xffffffffffffffff);
  let mut x25: u64 = 0;
  let mut x26: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x25, &mut x26, x21, 0xffffffffffffffff);
  let mut x27: u64 = 0;
  let mut x28: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x27, &mut x28, x21, 0xffffffffffffffff);
  let mut x29: u64 = 0;
  let mut x30: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x29, &mut x30, x21, 0xfffffffefffffc2f);
  let mut x31: u64 = 0;
  let mut x32: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x31, &mut x32, 0x0, x30, x27);
  let mut x33: u64 = 0;
  let mut x34: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x33, &mut x34, x32, x28, x25);
  let mut x35: u64 = 0;
  let mut x36: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x35, &mut x36, x34, x26, x23);
  let mut x37: u64 = 0;
  let mut x38: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x37, &mut x38, x36, x24, (0x0 as u64));
  let mut x39: u64 = 0;
  let mut x40: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x39, &mut x40, 0x0, x11, x29);
  let mut x41: u64 = 0;
  let mut x42: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x41, &mut x42, x40, x13, x31);
  let mut x43: u64 = 0;
  let mut x44: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x43, &mut x44, x42, x15, x33);
  let mut x45: u64 = 0;
  let mut x46: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x45, &mut x46, x44, x17, x35);
  let mut x47: u64 = 0;
  let mut x48: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x47, &mut x48, x46, x19, x37);
  let mut x49: u64 = 0;
  let mut x50: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x49, &mut x50, x48, (0x0 as u64), (0x0 as u64));
  let mut x51: u64 = 0;
  let mut x52: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x51, &mut x52, x1, (arg2[3]));
  let mut x53: u64 = 0;
  let mut x54: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x53, &mut x54, x1, (arg2[2]));
  let mut x55: u64 = 0;
  let mut x56: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x55, &mut x56, x1, (arg2[1]));
  let mut x57: u64 = 0;
  let mut x58: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x57, &mut x58, x1, (arg2[0]));
  let mut x59: u64 = 0;
  let mut x60: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x59, &mut x60, 0x0, x58, x55);
  let mut x61: u64 = 0;
  let mut x62: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x61, &mut x62, x60, x56, x53);
  let mut x63: u64 = 0;
  let mut x64: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x63, &mut x64, x62, x54, x51);
  let mut x65: u64 = 0;
  let mut x66: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x65, &mut x66, x64, x52, (0x0 as u64));
  let mut x67: u64 = 0;
  let mut x68: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x67, &mut x68, 0x0, x41, x57);
  let mut x69: u64 = 0;
  let mut x70: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x69, &mut x70, x68, x43, x59);
  let mut x71: u64 = 0;
  let mut x72: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x71, &mut x72, x70, x45, x61);
  let mut x73: u64 = 0;
  let mut x74: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x73, &mut x74, x72, x47, x63);
  let mut x75: u64 = 0;
  let mut x76: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x75, &mut x76, x74, ((x49 as fiat_secp256k1_u1) as u64), x65);
  let mut x77: u64 = 0;
  let mut x78: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x77, &mut x78, x67, 0xd838091dd2253531);
  let mut x79: u64 = 0;
  let mut x80: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x79, &mut x80, x77, 0xffffffffffffffff);
  let mut x81: u64 = 0;
  let mut x82: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x81, &mut x82, x77, 0xffffffffffffffff);
  let mut x83: u64 = 0;
  let mut x84: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x83, &mut x84, x77, 0xffffffffffffffff);
  let mut x85: u64 = 0;
  let mut x86: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x85, &mut x86, x77, 0xfffffffefffffc2f);
  let mut x87: u64 = 0;
  let mut x88: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x87, &mut x88, 0x0, x86, x83);
  let mut x89: u64 = 0;
  let mut x90: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x89, &mut x90, x88, x84, x81);
  let mut x91: u64 = 0;
  let mut x92: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x91, &mut x92, x90, x82, x79);
  let mut x93: u64 = 0;
  let mut x94: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x93, &mut x94, x92, x80, (0x0 as u64));
  let mut x95: u64 = 0;
  let mut x96: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x95, &mut x96, 0x0, x67, x85);
  let mut x97: u64 = 0;
  let mut x98: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x97, &mut x98, x96, x69, x87);
  let mut x99: u64 = 0;
  let mut x100: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x99, &mut x100, x98, x71, x89);
  let mut x101: u64 = 0;
  let mut x102: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x101, &mut x102, x100, x73, x91);
  let mut x103: u64 = 0;
  let mut x104: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x103, &mut x104, x102, x75, x93);
  let mut x105: u64 = 0;
  let mut x106: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x105, &mut x106, x104, (x76 as u64), (0x0 as u64));
  let mut x107: u64 = 0;
  let mut x108: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x107, &mut x108, x2, (arg2[3]));
  let mut x109: u64 = 0;
  let mut x110: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x109, &mut x110, x2, (arg2[2]));
  let mut x111: u64 = 0;
  let mut x112: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x111, &mut x112, x2, (arg2[1]));
  let mut x113: u64 = 0;
  let mut x114: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x113, &mut x114, x2, (arg2[0]));
  let mut x115: u64 = 0;
  let mut x116: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x115, &mut x116, 0x0, x114, x111);
  let mut x117: u64 = 0;
  let mut x118: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x117, &mut x118, x116, x112, x109);
  let mut x119: u64 = 0;
  let mut x120: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x119, &mut x120, x118, x110, x107);
  let mut x121: u64 = 0;
  let mut x122: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x121, &mut x122, x120, x108, (0x0 as u64));
  let mut x123: u64 = 0;
  let mut x124: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x123, &mut x124, 0x0, x97, x113);
  let mut x125: u64 = 0;
  let mut x126: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x125, &mut x126, x124, x99, x115);
  let mut x127: u64 = 0;
  let mut x128: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x127, &mut x128, x126, x101, x117);
  let mut x129: u64 = 0;
  let mut x130: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x129, &mut x130, x128, x103, x119);
  let mut x131: u64 = 0;
  let mut x132: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x131, &mut x132, x130, x105, x121);
  let mut x133: u64 = 0;
  let mut x134: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x133, &mut x134, x123, 0xd838091dd2253531);
  let mut x135: u64 = 0;
  let mut x136: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x135, &mut x136, x133, 0xffffffffffffffff);
  let mut x137: u64 = 0;
  let mut x138: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x137, &mut x138, x133, 0xffffffffffffffff);
  let mut x139: u64 = 0;
  let mut x140: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x139, &mut x140, x133, 0xffffffffffffffff);
  let mut x141: u64 = 0;
  let mut x142: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x141, &mut x142, x133, 0xfffffffefffffc2f);
  let mut x143: u64 = 0;
  let mut x144: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x143, &mut x144, 0x0, x142, x139);
  let mut x145: u64 = 0;
  let mut x146: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x145, &mut x146, x144, x140, x137);
  let mut x147: u64 = 0;
  let mut x148: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x147, &mut x148, x146, x138, x135);
  let mut x149: u64 = 0;
  let mut x150: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x149, &mut x150, x148, x136, (0x0 as u64));
  let mut x151: u64 = 0;
  let mut x152: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x151, &mut x152, 0x0, x123, x141);
  let mut x153: u64 = 0;
  let mut x154: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x153, &mut x154, x152, x125, x143);
  let mut x155: u64 = 0;
  let mut x156: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x155, &mut x156, x154, x127, x145);
  let mut x157: u64 = 0;
  let mut x158: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x157, &mut x158, x156, x129, x147);
  let mut x159: u64 = 0;
  let mut x160: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x159, &mut x160, x158, x131, x149);
  let mut x161: u64 = 0;
  let mut x162: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x161, &mut x162, x160, (x132 as u64), (0x0 as u64));
  let mut x163: u64 = 0;
  let mut x164: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x163, &mut x164, x3, (arg2[3]));
  let mut x165: u64 = 0;
  let mut x166: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x165, &mut x166, x3, (arg2[2]));
  let mut x167: u64 = 0;
  let mut x168: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x167, &mut x168, x3, (arg2[1]));
  let mut x169: u64 = 0;
  let mut x170: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x169, &mut x170, x3, (arg2[0]));
  let mut x171: u64 = 0;
  let mut x172: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x171, &mut x172, 0x0, x170, x167);
  let mut x173: u64 = 0;
  let mut x174: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x173, &mut x174, x172, x168, x165);
  let mut x175: u64 = 0;
  let mut x176: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x175, &mut x176, x174, x166, x163);
  let mut x177: u64 = 0;
  let mut x178: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x177, &mut x178, x176, x164, (0x0 as u64));
  let mut x179: u64 = 0;
  let mut x180: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x179, &mut x180, 0x0, x153, x169);
  let mut x181: u64 = 0;
  let mut x182: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x181, &mut x182, x180, x155, x171);
  let mut x183: u64 = 0;
  let mut x184: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x183, &mut x184, x182, x157, x173);
  let mut x185: u64 = 0;
  let mut x186: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x185, &mut x186, x184, x159, x175);
  let mut x187: u64 = 0;
  let mut x188: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x187, &mut x188, x186, x161, x177);
  let mut x189: u64 = 0;
  let mut x190: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x189, &mut x190, x179, 0xd838091dd2253531);
  let mut x191: u64 = 0;
  let mut x192: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x191, &mut x192, x189, 0xffffffffffffffff);
  let mut x193: u64 = 0;
  let mut x194: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x193, &mut x194, x189, 0xffffffffffffffff);
  let mut x195: u64 = 0;
  let mut x196: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x195, &mut x196, x189, 0xffffffffffffffff);
  let mut x197: u64 = 0;
  let mut x198: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x197, &mut x198, x189, 0xfffffffefffffc2f);
  let mut x199: u64 = 0;
  let mut x200: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x199, &mut x200, 0x0, x198, x195);
  let mut x201: u64 = 0;
  let mut x202: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x201, &mut x202, x200, x196, x193);
  let mut x203: u64 = 0;
  let mut x204: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x203, &mut x204, x202, x194, x191);
  let mut x205: u64 = 0;
  let mut x206: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x205, &mut x206, x204, x192, (0x0 as u64));
  let mut x207: u64 = 0;
  let mut x208: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x207, &mut x208, 0x0, x179, x197);
  let mut x209: u64 = 0;
  let mut x210: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x209, &mut x210, x208, x181, x199);
  let mut x211: u64 = 0;
  let mut x212: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x211, &mut x212, x210, x183, x201);
  let mut x213: u64 = 0;
  let mut x214: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x213, &mut x214, x212, x185, x203);
  let mut x215: u64 = 0;
  let mut x216: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x215, &mut x216, x214, x187, x205);
  let mut x217: u64 = 0;
  let mut x218: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x217, &mut x218, x216, (x188 as u64), (0x0 as u64));
  let mut x219: u64 = 0;
  let mut x220: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x219, &mut x220, 0x0, x209, 0xfffffffefffffc2f);
  let mut x221: u64 = 0;
  let mut x222: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x221, &mut x222, x220, x211, 0xffffffffffffffff);
  let mut x223: u64 = 0;
  let mut x224: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x223, &mut x224, x222, x213, 0xffffffffffffffff);
  let mut x225: u64 = 0;
  let mut x226: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x225, &mut x226, x224, x215, 0xffffffffffffffff);
  let mut x227: u64 = 0;
  let mut x228: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x227, &mut x228, x226, x217, (0x0 as u64));
  let mut x229: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x229, x228, x219, x209);
  let mut x230: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x230, x228, x221, x211);
  let mut x231: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x231, x228, x223, x213);
  let mut x232: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x232, x228, x225, x215);
  out1[0] = x229;
  out1[1] = x230;
  out1[2] = x231;
  out1[3] = x232;
}

/*
 * The function fiat_secp256k1_square squares a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_secp256k1_square(out1: &mut [u64; 4], arg1: &[u64; 4]) -> () {
  let x1: u64 = (arg1[1]);
  let x2: u64 = (arg1[2]);
  let x3: u64 = (arg1[3]);
  let x4: u64 = (arg1[0]);
  let mut x5: u64 = 0;
  let mut x6: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x5, &mut x6, x4, (arg1[3]));
  let mut x7: u64 = 0;
  let mut x8: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x7, &mut x8, x4, (arg1[2]));
  let mut x9: u64 = 0;
  let mut x10: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x9, &mut x10, x4, (arg1[1]));
  let mut x11: u64 = 0;
  let mut x12: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x11, &mut x12, x4, (arg1[0]));
  let mut x13: u64 = 0;
  let mut x14: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x13, &mut x14, 0x0, x12, x9);
  let mut x15: u64 = 0;
  let mut x16: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x15, &mut x16, x14, x10, x7);
  let mut x17: u64 = 0;
  let mut x18: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x17, &mut x18, x16, x8, x5);
  let mut x19: u64 = 0;
  let mut x20: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x19, &mut x20, x18, x6, (0x0 as u64));
  let mut x21: u64 = 0;
  let mut x22: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x21, &mut x22, x11, 0xd838091dd2253531);
  let mut x23: u64 = 0;
  let mut x24: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x23, &mut x24, x21, 0xffffffffffffffff);
  let mut x25: u64 = 0;
  let mut x26: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x25, &mut x26, x21, 0xffffffffffffffff);
  let mut x27: u64 = 0;
  let mut x28: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x27, &mut x28, x21, 0xffffffffffffffff);
  let mut x29: u64 = 0;
  let mut x30: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x29, &mut x30, x21, 0xfffffffefffffc2f);
  let mut x31: u64 = 0;
  let mut x32: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x31, &mut x32, 0x0, x30, x27);
  let mut x33: u64 = 0;
  let mut x34: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x33, &mut x34, x32, x28, x25);
  let mut x35: u64 = 0;
  let mut x36: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x35, &mut x36, x34, x26, x23);
  let mut x37: u64 = 0;
  let mut x38: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x37, &mut x38, x36, x24, (0x0 as u64));
  let mut x39: u64 = 0;
  let mut x40: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x39, &mut x40, 0x0, x11, x29);
  let mut x41: u64 = 0;
  let mut x42: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x41, &mut x42, x40, x13, x31);
  let mut x43: u64 = 0;
  let mut x44: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x43, &mut x44, x42, x15, x33);
  let mut x45: u64 = 0;
  let mut x46: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x45, &mut x46, x44, x17, x35);
  let mut x47: u64 = 0;
  let mut x48: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x47, &mut x48, x46, x19, x37);
  let mut x49: u64 = 0;
  let mut x50: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x49, &mut x50, x48, (0x0 as u64), (0x0 as u64));
  let mut x51: u64 = 0;
  let mut x52: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x51, &mut x52, x1, (arg1[3]));
  let mut x53: u64 = 0;
  let mut x54: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x53, &mut x54, x1, (arg1[2]));
  let mut x55: u64 = 0;
  let mut x56: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x55, &mut x56, x1, (arg1[1]));
  let mut x57: u64 = 0;
  let mut x58: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x57, &mut x58, x1, (arg1[0]));
  let mut x59: u64 = 0;
  let mut x60: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x59, &mut x60, 0x0, x58, x55);
  let mut x61: u64 = 0;
  let mut x62: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x61, &mut x62, x60, x56, x53);
  let mut x63: u64 = 0;
  let mut x64: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x63, &mut x64, x62, x54, x51);
  let mut x65: u64 = 0;
  let mut x66: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x65, &mut x66, x64, x52, (0x0 as u64));
  let mut x67: u64 = 0;
  let mut x68: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x67, &mut x68, 0x0, x41, x57);
  let mut x69: u64 = 0;
  let mut x70: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x69, &mut x70, x68, x43, x59);
  let mut x71: u64 = 0;
  let mut x72: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x71, &mut x72, x70, x45, x61);
  let mut x73: u64 = 0;
  let mut x74: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x73, &mut x74, x72, x47, x63);
  let mut x75: u64 = 0;
  let mut x76: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x75, &mut x76, x74, ((x49 as fiat_secp256k1_u1) as u64), x65);
  let mut x77: u64 = 0;
  let mut x78: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x77, &mut x78, x67, 0xd838091dd2253531);
  let mut x79: u64 = 0;
  let mut x80: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x79, &mut x80, x77, 0xffffffffffffffff);
  let mut x81: u64 = 0;
  let mut x82: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x81, &mut x82, x77, 0xffffffffffffffff);
  let mut x83: u64 = 0;
  let mut x84: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x83, &mut x84, x77, 0xffffffffffffffff);
  let mut x85: u64 = 0;
  let mut x86: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x85, &mut x86, x77, 0xfffffffefffffc2f);
  let mut x87: u64 = 0;
  let mut x88: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x87, &mut x88, 0x0, x86, x83);
  let mut x89: u64 = 0;
  let mut x90: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x89, &mut x90, x88, x84, x81);
  let mut x91: u64 = 0;
  let mut x92: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x91, &mut x92, x90, x82, x79);
  let mut x93: u64 = 0;
  let mut x94: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x93, &mut x94, x92, x80, (0x0 as u64));
  let mut x95: u64 = 0;
  let mut x96: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x95, &mut x96, 0x0, x67, x85);
  let mut x97: u64 = 0;
  let mut x98: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x97, &mut x98, x96, x69, x87);
  let mut x99: u64 = 0;
  let mut x100: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x99, &mut x100, x98, x71, x89);
  let mut x101: u64 = 0;
  let mut x102: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x101, &mut x102, x100, x73, x91);
  let mut x103: u64 = 0;
  let mut x104: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x103, &mut x104, x102, x75, x93);
  let mut x105: u64 = 0;
  let mut x106: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x105, &mut x106, x104, (x76 as u64), (0x0 as u64));
  let mut x107: u64 = 0;
  let mut x108: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x107, &mut x108, x2, (arg1[3]));
  let mut x109: u64 = 0;
  let mut x110: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x109, &mut x110, x2, (arg1[2]));
  let mut x111: u64 = 0;
  let mut x112: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x111, &mut x112, x2, (arg1[1]));
  let mut x113: u64 = 0;
  let mut x114: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x113, &mut x114, x2, (arg1[0]));
  let mut x115: u64 = 0;
  let mut x116: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x115, &mut x116, 0x0, x114, x111);
  let mut x117: u64 = 0;
  let mut x118: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x117, &mut x118, x116, x112, x109);
  let mut x119: u64 = 0;
  let mut x120: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x119, &mut x120, x118, x110, x107);
  let mut x121: u64 = 0;
  let mut x122: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x121, &mut x122, x120, x108, (0x0 as u64));
  let mut x123: u64 = 0;
  let mut x124: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x123, &mut x124, 0x0, x97, x113);
  let mut x125: u64 = 0;
  let mut x126: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x125, &mut x126, x124, x99, x115);
  let mut x127: u64 = 0;
  let mut x128: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x127, &mut x128, x126, x101, x117);
  let mut x129: u64 = 0;
  let mut x130: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x129, &mut x130, x128, x103, x119);
  let mut x131: u64 = 0;
  let mut x132: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x131, &mut x132, x130, x105, x121);
  let mut x133: u64 = 0;
  let mut x134: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x133, &mut x134, x123, 0xd838091dd2253531);
  let mut x135: u64 = 0;
  let mut x136: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x135, &mut x136, x133, 0xffffffffffffffff);
  let mut x137: u64 = 0;
  let mut x138: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x137, &mut x138, x133, 0xffffffffffffffff);
  let mut x139: u64 = 0;
  let mut x140: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x139, &mut x140, x133, 0xffffffffffffffff);
  let mut x141: u64 = 0;
  let mut x142: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x141, &mut x142, x133, 0xfffffffefffffc2f);
  let mut x143: u64 = 0;
  let mut x144: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x143, &mut x144, 0x0, x142, x139);
  let mut x145: u64 = 0;
  let mut x146: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x145, &mut x146, x144, x140, x137);
  let mut x147: u64 = 0;
  let mut x148: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x147, &mut x148, x146, x138, x135);
  let mut x149: u64 = 0;
  let mut x150: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x149, &mut x150, x148, x136, (0x0 as u64));
  let mut x151: u64 = 0;
  let mut x152: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x151, &mut x152, 0x0, x123, x141);
  let mut x153: u64 = 0;
  let mut x154: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x153, &mut x154, x152, x125, x143);
  let mut x155: u64 = 0;
  let mut x156: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x155, &mut x156, x154, x127, x145);
  let mut x157: u64 = 0;
  let mut x158: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x157, &mut x158, x156, x129, x147);
  let mut x159: u64 = 0;
  let mut x160: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x159, &mut x160, x158, x131, x149);
  let mut x161: u64 = 0;
  let mut x162: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x161, &mut x162, x160, (x132 as u64), (0x0 as u64));
  let mut x163: u64 = 0;
  let mut x164: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x163, &mut x164, x3, (arg1[3]));
  let mut x165: u64 = 0;
  let mut x166: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x165, &mut x166, x3, (arg1[2]));
  let mut x167: u64 = 0;
  let mut x168: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x167, &mut x168, x3, (arg1[1]));
  let mut x169: u64 = 0;
  let mut x170: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x169, &mut x170, x3, (arg1[0]));
  let mut x171: u64 = 0;
  let mut x172: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x171, &mut x172, 0x0, x170, x167);
  let mut x173: u64 = 0;
  let mut x174: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x173, &mut x174, x172, x168, x165);
  let mut x175: u64 = 0;
  let mut x176: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x175, &mut x176, x174, x166, x163);
  let mut x177: u64 = 0;
  let mut x178: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x177, &mut x178, x176, x164, (0x0 as u64));
  let mut x179: u64 = 0;
  let mut x180: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x179, &mut x180, 0x0, x153, x169);
  let mut x181: u64 = 0;
  let mut x182: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x181, &mut x182, x180, x155, x171);
  let mut x183: u64 = 0;
  let mut x184: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x183, &mut x184, x182, x157, x173);
  let mut x185: u64 = 0;
  let mut x186: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x185, &mut x186, x184, x159, x175);
  let mut x187: u64 = 0;
  let mut x188: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x187, &mut x188, x186, x161, x177);
  let mut x189: u64 = 0;
  let mut x190: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x189, &mut x190, x179, 0xd838091dd2253531);
  let mut x191: u64 = 0;
  let mut x192: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x191, &mut x192, x189, 0xffffffffffffffff);
  let mut x193: u64 = 0;
  let mut x194: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x193, &mut x194, x189, 0xffffffffffffffff);
  let mut x195: u64 = 0;
  let mut x196: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x195, &mut x196, x189, 0xffffffffffffffff);
  let mut x197: u64 = 0;
  let mut x198: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x197, &mut x198, x189, 0xfffffffefffffc2f);
  let mut x199: u64 = 0;
  let mut x200: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x199, &mut x200, 0x0, x198, x195);
  let mut x201: u64 = 0;
  let mut x202: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x201, &mut x202, x200, x196, x193);
  let mut x203: u64 = 0;
  let mut x204: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x203, &mut x204, x202, x194, x191);
  let mut x205: u64 = 0;
  let mut x206: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x205, &mut x206, x204, x192, (0x0 as u64));
  let mut x207: u64 = 0;
  let mut x208: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x207, &mut x208, 0x0, x179, x197);
  let mut x209: u64 = 0;
  let mut x210: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x209, &mut x210, x208, x181, x199);
  let mut x211: u64 = 0;
  let mut x212: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x211, &mut x212, x210, x183, x201);
  let mut x213: u64 = 0;
  let mut x214: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x213, &mut x214, x212, x185, x203);
  let mut x215: u64 = 0;
  let mut x216: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x215, &mut x216, x214, x187, x205);
  let mut x217: u64 = 0;
  let mut x218: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x217, &mut x218, x216, (x188 as u64), (0x0 as u64));
  let mut x219: u64 = 0;
  let mut x220: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x219, &mut x220, 0x0, x209, 0xfffffffefffffc2f);
  let mut x221: u64 = 0;
  let mut x222: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x221, &mut x222, x220, x211, 0xffffffffffffffff);
  let mut x223: u64 = 0;
  let mut x224: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x223, &mut x224, x222, x213, 0xffffffffffffffff);
  let mut x225: u64 = 0;
  let mut x226: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x225, &mut x226, x224, x215, 0xffffffffffffffff);
  let mut x227: u64 = 0;
  let mut x228: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x227, &mut x228, x226, x217, (0x0 as u64));
  let mut x229: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x229, x228, x219, x209);
  let mut x230: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x230, x228, x221, x211);
  let mut x231: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x231, x228, x223, x213);
  let mut x232: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x232, x228, x225, x215);
  out1[0] = x229;
  out1[1] = x230;
  out1[2] = x231;
  out1[3] = x232;
}

/*
 * The function fiat_secp256k1_add adds two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_secp256k1_add(out1: &mut [u64; 4], arg1: &[u64; 4], arg2: &[u64; 4]) -> () {
  let mut x1: u64 = 0;
  let mut x2: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1, &mut x2, 0x0, (arg1[0]), (arg2[0]));
  let mut x3: u64 = 0;
  let mut x4: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x3, &mut x4, x2, (arg1[1]), (arg2[1]));
  let mut x5: u64 = 0;
  let mut x6: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x5, &mut x6, x4, (arg1[2]), (arg2[2]));
  let mut x7: u64 = 0;
  let mut x8: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x7, &mut x8, x6, (arg1[3]), (arg2[3]));
  let mut x9: u64 = 0;
  let mut x10: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x9, &mut x10, 0x0, x1, 0xfffffffefffffc2f);
  let mut x11: u64 = 0;
  let mut x12: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x11, &mut x12, x10, x3, 0xffffffffffffffff);
  let mut x13: u64 = 0;
  let mut x14: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x13, &mut x14, x12, x5, 0xffffffffffffffff);
  let mut x15: u64 = 0;
  let mut x16: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x15, &mut x16, x14, x7, 0xffffffffffffffff);
  let mut x17: u64 = 0;
  let mut x18: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x17, &mut x18, x16, (x8 as u64), (0x0 as u64));
  let mut x19: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x19, x18, x9, x1);
  let mut x20: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x20, x18, x11, x3);
  let mut x21: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x21, x18, x13, x5);
  let mut x22: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x22, x18, x15, x7);
  out1[0] = x19;
  out1[1] = x20;
  out1[2] = x21;
  out1[3] = x22;
}

/*
 * The function fiat_secp256k1_sub subtracts two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_secp256k1_sub(out1: &mut [u64; 4], arg1: &[u64; 4], arg2: &[u64; 4]) -> () {
  let mut x1: u64 = 0;
  let mut x2: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1, &mut x2, 0x0, (arg1[0]), (arg2[0]));
  let mut x3: u64 = 0;
  let mut x4: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x3, &mut x4, x2, (arg1[1]), (arg2[1]));
  let mut x5: u64 = 0;
  let mut x6: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x5, &mut x6, x4, (arg1[2]), (arg2[2]));
  let mut x7: u64 = 0;
  let mut x8: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x7, &mut x8, x6, (arg1[3]), (arg2[3]));
  let mut x9: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x9, x8, (0x0 as u64), 0xffffffffffffffff);
  let mut x10: u64 = 0;
  let mut x11: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x10, &mut x11, 0x0, x1, (x9 & 0xfffffffefffffc2f));
  let mut x12: u64 = 0;
  let mut x13: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x12, &mut x13, x11, x3, (x9 & 0xffffffffffffffff));
  let mut x14: u64 = 0;
  let mut x15: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x14, &mut x15, x13, x5, (x9 & 0xffffffffffffffff));
  let mut x16: u64 = 0;
  let mut x17: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x16, &mut x17, x15, x7, (x9 & 0xffffffffffffffff));
  out1[0] = x10;
  out1[1] = x12;
  out1[2] = x14;
  out1[3] = x16;
}

/*
 * The function fiat_secp256k1_opp negates a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_secp256k1_opp(out1: &mut [u64; 4], arg1: &[u64; 4]) -> () {
  let mut x1: u64 = 0;
  let mut x2: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1, &mut x2, 0x0, (0x0 as u64), (arg1[0]));
  let mut x3: u64 = 0;
  let mut x4: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x3, &mut x4, x2, (0x0 as u64), (arg1[1]));
  let mut x5: u64 = 0;
  let mut x6: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x5, &mut x6, x4, (0x0 as u64), (arg1[2]));
  let mut x7: u64 = 0;
  let mut x8: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x7, &mut x8, x6, (0x0 as u64), (arg1[3]));
  let mut x9: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x9, x8, (0x0 as u64), 0xffffffffffffffff);
  let mut x10: u64 = 0;
  let mut x11: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x10, &mut x11, 0x0, x1, (x9 & 0xfffffffefffffc2f));
  let mut x12: u64 = 0;
  let mut x13: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x12, &mut x13, x11, x3, (x9 & 0xffffffffffffffff));
  let mut x14: u64 = 0;
  let mut x15: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x14, &mut x15, x13, x5, (x9 & 0xffffffffffffffff));
  let mut x16: u64 = 0;
  let mut x17: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x16, &mut x17, x15, x7, (x9 & 0xffffffffffffffff));
  out1[0] = x10;
  out1[1] = x12;
  out1[2] = x14;
  out1[3] = x16;
}

/*
 * The function fiat_secp256k1_from_montgomery translates a field element out of the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = (eval arg1 * ((2^64)⁻¹ mod m)^4) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_secp256k1_from_montgomery(out1: &mut [u64; 4], arg1: &[u64; 4]) -> () {
  let x1: u64 = (arg1[0]);
  let mut x2: u64 = 0;
  let mut x3: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x2, &mut x3, x1, 0xd838091dd2253531);
  let mut x4: u64 = 0;
  let mut x5: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x4, &mut x5, x2, 0xffffffffffffffff);
  let mut x6: u64 = 0;
  let mut x7: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x6, &mut x7, x2, 0xffffffffffffffff);
  let mut x8: u64 = 0;
  let mut x9: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x8, &mut x9, x2, 0xffffffffffffffff);
  let mut x10: u64 = 0;
  let mut x11: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x10, &mut x11, x2, 0xfffffffefffffc2f);
  let mut x12: u64 = 0;
  let mut x13: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x12, &mut x13, 0x0, x11, x8);
  let mut x14: u64 = 0;
  let mut x15: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x14, &mut x15, x13, x9, x6);
  let mut x16: u64 = 0;
  let mut x17: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x16, &mut x17, x15, x7, x4);
  let mut x18: u64 = 0;
  let mut x19: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x18, &mut x19, 0x0, x1, x10);
  let mut x20: u64 = 0;
  let mut x21: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x20, &mut x21, x19, (0x0 as u64), x12);
  let mut x22: u64 = 0;
  let mut x23: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x22, &mut x23, x21, (0x0 as u64), x14);
  let mut x24: u64 = 0;
  let mut x25: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x24, &mut x25, x23, (0x0 as u64), x16);
  let mut x26: u64 = 0;
  let mut x27: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x26, &mut x27, x17, x5, (0x0 as u64));
  let mut x28: u64 = 0;
  let mut x29: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x28, &mut x29, x25, (0x0 as u64), x26);
  let mut x30: u64 = 0;
  let mut x31: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x30, &mut x31, 0x0, x20, (arg1[1]));
  let mut x32: u64 = 0;
  let mut x33: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x32, &mut x33, x31, x22, (0x0 as u64));
  let mut x34: u64 = 0;
  let mut x35: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x34, &mut x35, x33, x24, (0x0 as u64));
  let mut x36: u64 = 0;
  let mut x37: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x36, &mut x37, x35, x28, (0x0 as u64));
  let mut x38: u64 = 0;
  let mut x39: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x38, &mut x39, x30, 0xd838091dd2253531);
  let mut x40: u64 = 0;
  let mut x41: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x40, &mut x41, x38, 0xffffffffffffffff);
  let mut x42: u64 = 0;
  let mut x43: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x42, &mut x43, x38, 0xffffffffffffffff);
  let mut x44: u64 = 0;
  let mut x45: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x44, &mut x45, x38, 0xffffffffffffffff);
  let mut x46: u64 = 0;
  let mut x47: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x46, &mut x47, x38, 0xfffffffefffffc2f);
  let mut x48: u64 = 0;
  let mut x49: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x48, &mut x49, 0x0, x47, x44);
  let mut x50: u64 = 0;
  let mut x51: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x50, &mut x51, x49, x45, x42);
  let mut x52: u64 = 0;
  let mut x53: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x52, &mut x53, x51, x43, x40);
  let mut x54: u64 = 0;
  let mut x55: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x54, &mut x55, 0x0, x30, x46);
  let mut x56: u64 = 0;
  let mut x57: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x56, &mut x57, x55, x32, x48);
  let mut x58: u64 = 0;
  let mut x59: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x58, &mut x59, x57, x34, x50);
  let mut x60: u64 = 0;
  let mut x61: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x60, &mut x61, x59, x36, x52);
  let mut x62: u64 = 0;
  let mut x63: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x62, &mut x63, x53, x41, (0x0 as u64));
  let mut x64: u64 = 0;
  let mut x65: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x64, &mut x65, x29, (0x0 as u64), (0x0 as u64));
  let mut x66: u64 = 0;
  let mut x67: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x66, &mut x67, x37, ((x64 as fiat_secp256k1_u1) as u64), (0x0 as u64));
  let mut x68: u64 = 0;
  let mut x69: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x68, &mut x69, x61, x66, x62);
  let mut x70: u64 = 0;
  let mut x71: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x70, &mut x71, 0x0, x56, (arg1[2]));
  let mut x72: u64 = 0;
  let mut x73: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x72, &mut x73, x71, x58, (0x0 as u64));
  let mut x74: u64 = 0;
  let mut x75: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x74, &mut x75, x73, x60, (0x0 as u64));
  let mut x76: u64 = 0;
  let mut x77: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x76, &mut x77, x75, x68, (0x0 as u64));
  let mut x78: u64 = 0;
  let mut x79: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x78, &mut x79, x70, 0xd838091dd2253531);
  let mut x80: u64 = 0;
  let mut x81: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x80, &mut x81, x78, 0xffffffffffffffff);
  let mut x82: u64 = 0;
  let mut x83: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x82, &mut x83, x78, 0xffffffffffffffff);
  let mut x84: u64 = 0;
  let mut x85: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x84, &mut x85, x78, 0xffffffffffffffff);
  let mut x86: u64 = 0;
  let mut x87: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x86, &mut x87, x78, 0xfffffffefffffc2f);
  let mut x88: u64 = 0;
  let mut x89: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x88, &mut x89, 0x0, x87, x84);
  let mut x90: u64 = 0;
  let mut x91: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x90, &mut x91, x89, x85, x82);
  let mut x92: u64 = 0;
  let mut x93: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x92, &mut x93, x91, x83, x80);
  let mut x94: u64 = 0;
  let mut x95: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x94, &mut x95, 0x0, x70, x86);
  let mut x96: u64 = 0;
  let mut x97: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x96, &mut x97, x95, x72, x88);
  let mut x98: u64 = 0;
  let mut x99: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x98, &mut x99, x97, x74, x90);
  let mut x100: u64 = 0;
  let mut x101: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x100, &mut x101, x99, x76, x92);
  let mut x102: u64 = 0;
  let mut x103: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x102, &mut x103, x93, x81, (0x0 as u64));
  let mut x104: u64 = 0;
  let mut x105: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x104, &mut x105, x69, (0x0 as u64), (0x0 as u64));
  let mut x106: u64 = 0;
  let mut x107: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x106, &mut x107, x77, ((x104 as fiat_secp256k1_u1) as u64), (0x0 as u64));
  let mut x108: u64 = 0;
  let mut x109: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x108, &mut x109, x101, x106, x102);
  let mut x110: u64 = 0;
  let mut x111: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x110, &mut x111, 0x0, x96, (arg1[3]));
  let mut x112: u64 = 0;
  let mut x113: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x112, &mut x113, x111, x98, (0x0 as u64));
  let mut x114: u64 = 0;
  let mut x115: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x114, &mut x115, x113, x100, (0x0 as u64));
  let mut x116: u64 = 0;
  let mut x117: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x116, &mut x117, x115, x108, (0x0 as u64));
  let mut x118: u64 = 0;
  let mut x119: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x118, &mut x119, x110, 0xd838091dd2253531);
  let mut x120: u64 = 0;
  let mut x121: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x120, &mut x121, x118, 0xffffffffffffffff);
  let mut x122: u64 = 0;
  let mut x123: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x122, &mut x123, x118, 0xffffffffffffffff);
  let mut x124: u64 = 0;
  let mut x125: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x124, &mut x125, x118, 0xffffffffffffffff);
  let mut x126: u64 = 0;
  let mut x127: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x126, &mut x127, x118, 0xfffffffefffffc2f);
  let mut x128: u64 = 0;
  let mut x129: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x128, &mut x129, 0x0, x127, x124);
  let mut x130: u64 = 0;
  let mut x131: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x130, &mut x131, x129, x125, x122);
  let mut x132: u64 = 0;
  let mut x133: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x132, &mut x133, x131, x123, x120);
  let mut x134: u64 = 0;
  let mut x135: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x134, &mut x135, 0x0, x110, x126);
  let mut x136: u64 = 0;
  let mut x137: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x136, &mut x137, x135, x112, x128);
  let mut x138: u64 = 0;
  let mut x139: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x138, &mut x139, x137, x114, x130);
  let mut x140: u64 = 0;
  let mut x141: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x140, &mut x141, x139, x116, x132);
  let mut x142: u64 = 0;
  let mut x143: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x142, &mut x143, x133, x121, (0x0 as u64));
  let mut x144: u64 = 0;
  let mut x145: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x144, &mut x145, x109, (0x0 as u64), (0x0 as u64));
  let mut x146: u64 = 0;
  let mut x147: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x146, &mut x147, x117, ((x144 as fiat_secp256k1_u1) as u64), (0x0 as u64));
  let mut x148: u64 = 0;
  let mut x149: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x148, &mut x149, x141, x146, x142);
  let mut x150: u64 = 0;
  let mut x151: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x150, &mut x151, 0x0, x136, 0xfffffffefffffc2f);
  let mut x152: u64 = 0;
  let mut x153: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x152, &mut x153, x151, x138, 0xffffffffffffffff);
  let mut x154: u64 = 0;
  let mut x155: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x154, &mut x155, x153, x140, 0xffffffffffffffff);
  let mut x156: u64 = 0;
  let mut x157: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x156, &mut x157, x155, x148, 0xffffffffffffffff);
  let mut x158: u64 = 0;
  let mut x159: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x158, &mut x159, x149, (0x0 as u64), (0x0 as u64));
  let mut x160: u64 = 0;
  let mut x161: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x160, &mut x161, x157, ((x158 as fiat_secp256k1_u1) as u64), (0x0 as u64));
  let mut x162: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x162, x161, x150, x136);
  let mut x163: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x163, x161, x152, x138);
  let mut x164: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x164, x161, x154, x140);
  let mut x165: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x165, x161, x156, x148);
  out1[0] = x162;
  out1[1] = x163;
  out1[2] = x164;
  out1[3] = x165;
}

/*
 * The function fiat_secp256k1_nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 */
#[inline]
pub fn fiat_secp256k1_nonzero(out1: &mut u64, arg1: &[u64; 4]) -> () {
  let x1: u64 = ((arg1[0]) | ((arg1[1]) | ((arg1[2]) | ((arg1[3]) | (0x0 as u64)))));
  *out1 = x1;
}

/*
 * The function fiat_secp256k1_selectznz is a multi-limb conditional select.
 * Postconditions:
 *   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_secp256k1_selectznz(out1: &mut [u64; 4], arg1: fiat_secp256k1_u1, arg2: &[u64; 4], arg3: &[u64; 4]) -> () {
  let mut x1: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1, arg1, (arg2[0]), (arg3[0]));
  let mut x2: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x2, arg1, (arg2[1]), (arg3[1]));
  let mut x3: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x3, arg1, (arg2[2]), (arg3[2]));
  let mut x4: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x4, arg1, (arg2[3]), (arg3[3]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
}

/*
 * The function fiat_secp256k1_to_bytes serializes a field element in the Montgomery domain to bytes in little-endian order.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..31]
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
 */
#[inline]
pub fn fiat_secp256k1_to_bytes(out1: &mut [u8; 32], arg1: &[u64; 4]) -> () {
  let x1: u64 = (arg1[3]);
  let x2: u64 = (arg1[2]);
  let x3: u64 = (arg1[1]);
  let x4: u64 = (arg1[0]);
  let x5: u64 = (x4 >> 8);
  let x6: u8 = ((x4 & (0xff as u64)) as u8);
  let x7: u64 = (x5 >> 8);
  let x8: u8 = ((x5 & (0xff as u64)) as u8);
  let x9: u64 = (x7 >> 8);
  let x10: u8 = ((x7 & (0xff as u64)) as u8);
  let x11: u64 = (x9 >> 8);
  let x12: u8 = ((x9 & (0xff as u64)) as u8);
  let x13: u64 = (x11 >> 8);
  let x14: u8 = ((x11 & (0xff as u64)) as u8);
  let x15: u64 = (x13 >> 8);
  let x16: u8 = ((x13 & (0xff as u64)) as u8);
  let x17: u8 = ((x15 >> 8) as u8);
  let x18: u8 = ((x15 & (0xff as u64)) as u8);
  let x19: u8 = (x17 & 0xff);
  let x20: u64 = (x3 >> 8);
  let x21: u8 = ((x3 & (0xff as u64)) as u8);
  let x22: u64 = (x20 >> 8);
  let x23: u8 = ((x20 & (0xff as u64)) as u8);
  let x24: u64 = (x22 >> 8);
  let x25: u8 = ((x22 & (0xff as u64)) as u8);
  let x26: u64 = (x24 >> 8);
  let x27: u8 = ((x24 & (0xff as u64)) as u8);
  let x28: u64 = (x26 >> 8);
  let x29: u8 = ((x26 & (0xff as u64)) as u8);
  let x30: u64 = (x28 >> 8);
  let x31: u8 = ((x28 & (0xff as u64)) as u8);
  let x32: u8 = ((x30 >> 8) as u8);
  let x33: u8 = ((x30 & (0xff as u64)) as u8);
  let x34: u8 = (x32 & 0xff);
  let x35: u64 = (x2 >> 8);
  let x36: u8 = ((x2 & (0xff as u64)) as u8);
  let x37: u64 = (x35 >> 8);
  let x38: u8 = ((x35 & (0xff as u64)) as u8);
  let x39: u64 = (x37 >> 8);
  let x40: u8 = ((x37 & (0xff as u64)) as u8);
  let x41: u64 = (x39 >> 8);
  let x42: u8 = ((x39 & (0xff as u64)) as u8);
  let x43: u64 = (x41 >> 8);
  let x44: u8 = ((x41 & (0xff as u64)) as u8);
  let x45: u64 = (x43 >> 8);
  let x46: u8 = ((x43 & (0xff as u64)) as u8);
  let x47: u8 = ((x45 >> 8) as u8);
  let x48: u8 = ((x45 & (0xff as u64)) as u8);
  let x49: u8 = (x47 & 0xff);
  let x50: u64 = (x1 >> 8);
  let x51: u8 = ((x1 & (0xff as u64)) as u8);
  let x52: u64 = (x50 >> 8);
  let x53: u8 = ((x50 & (0xff as u64)) as u8);
  let x54: u64 = (x52 >> 8);
  let x55: u8 = ((x52 & (0xff as u64)) as u8);
  let x56: u64 = (x54 >> 8);
  let x57: u8 = ((x54 & (0xff as u64)) as u8);
  let x58: u64 = (x56 >> 8);
  let x59: u8 = ((x56 & (0xff as u64)) as u8);
  let x60: u64 = (x58 >> 8);
  let x61: u8 = ((x58 & (0xff as u64)) as u8);
  let x62: u8 = ((x60 >> 8) as u8);
  let x63: u8 = ((x60 & (0xff as u64)) as u8);
  out1[0] = x6;
  out1[1] = x8;
  out1[2] = x10;
  out1[3] = x12;
  out1[4] = x14;
  out1[5] = x16;
  out1[6] = x18;
  out1[7] = x19;
  out1[8] = x21;
  out1[9] = x23;
  out1[10] = x25;
  out1[11] = x27;
  out1[12] = x29;
  out1[13] = x31;
  out1[14] = x33;
  out1[15] = x34;
  out1[16] = x36;
  out1[17] = x38;
  out1[18] = x40;
  out1[19] = x42;
  out1[20] = x44;
  out1[21] = x46;
  out1[22] = x48;
  out1[23] = x49;
  out1[24] = x51;
  out1[25] = x53;
  out1[26] = x55;
  out1[27] = x57;
  out1[28] = x59;
  out1[29] = x61;
  out1[30] = x63;
  out1[31] = x62;
}

/*
 * The function fiat_secp256k1_from_bytes deserializes a field element in the Montgomery domain from bytes in little-endian order.
 * Preconditions:
 *   0 ≤ bytes_eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = bytes_eval arg1 mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_secp256k1_from_bytes(out1: &mut [u64; 4], arg1: &[u8; 32]) -> () {
  let x1: u64 = (((arg1[31]) as u64) << 56);
  let x2: u64 = (((arg1[30]) as u64) << 48);
  let x3: u64 = (((arg1[29]) as u64) << 40);
  let x4: u64 = (((arg1[28]) as u64) << 32);
  let x5: u64 = (((arg1[27]) as u64) << 24);
  let x6: u64 = (((arg1[26]) as u64) << 16);
  let x7: u64 = (((arg1[25]) as u64) << 8);
  let x8: u8 = (arg1[24]);
  let x9: u64 = (((arg1[23]) as u64) << 56);
  let x10: u64 = (((arg1[22]) as u64) << 48);
  let x11: u64 = (((arg1[21]) as u64) << 40);
  let x12: u64 = (((arg1[20]) as u64) << 32);
  let x13: u64 = (((arg1[19]) as u64) << 24);
  let x14: u64 = (((arg1[18]) as u64) << 16);
  let x15: u64 = (((arg1[17]) as u64) << 8);
  let x16: u8 = (arg1[16]);
  let x17: u64 = (((arg1[15]) as u64) << 56);
  let x18: u64 = (((arg1[14]) as u64) << 48);
  let x19: u64 = (((arg1[13]) as u64) << 40);
  let x20: u64 = (((arg1[12]) as u64) << 32);
  let x21: u64 = (((arg1[11]) as u64) << 24);
  let x22: u64 = (((arg1[10]) as u64) << 16);
  let x23: u64 = (((arg1[9]) as u64) << 8);
  let x24: u8 = (arg1[8]);
  let x25: u64 = (((arg1[7]) as u64) << 56);
  let x26: u64 = (((arg1[6]) as u64) << 48);
  let x27: u64 = (((arg1[5]) as u64) << 40);
  let x28: u64 = (((arg1[4]) as u64) << 32);
  let x29: u64 = (((arg1[3]) as u64) << 24);
  let x30: u64 = (((arg1[2]) as u64) << 16);
  let x31: u64 = (((arg1[1]) as u64) << 8);
  let x32: u8 = (arg1[0]);
  let x33: u64 = ((x32 as u64) + (x31 + (x30 + (x29 + (x28 + (x27 + (x26 + x25)))))));
  let x34: u64 = (x33 & 0xffffffffffffffff);
  let x35: u64 = ((x8 as u64) + (x7 + (x6 + (x5 + (x4 + (x3 + (x2 + x1)))))));
  let x36: u64 = ((x16 as u64) + (x15 + (x14 + (x13 + (x12 + (x11 + (x10 + x9)))))));
  let x37: u64 = ((x24 as u64) + (x23 + (x22 + (x21 + (x20 + (x19 + (x18 + x17)))))));
  let x38: u64 = (x37 & 0xffffffffffffffff);
  let x39: u64 = (x36 & 0xffffffffffffffff);
  out1[0] = x34;
  out1[1] = x38;
  out1[2] = x39;
  out1[3] = x35;
}

