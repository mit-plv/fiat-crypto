/* Autogenerated: src/ExtractionOCaml/word_by_word_montgomery --lang=Rust secp256k1 '2^256 - 2^32 - 977' 32 mul square add sub opp from_montgomery nonzero selectznz to_bytes from_bytes */
/* curve description: secp256k1 */
/* requested operations: mul, square, add, sub, opp, from_montgomery, nonzero, selectznz, to_bytes, from_bytes */
/* m = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f (from "2^256 - 2^32 - 977") */
/* machine_wordsize = 32 (from "32") */
/*                                                                    */
/* NOTE: In addition to the bounds specified above each function, all */
/*   functions synthesized for this Montgomery arithmetic require the */
/*   input to be strictly less than the prime modulus (m), and also   */
/*   require the input to be in the unique saturated representation.  */
/*   All functions also ensure that these two properties are true of  */
/*   return values.                                                   */

#![allow(unused_parens)]
#[allow(non_camel_case_types)]

pub type fiat_secp256k1_u1 = u8;
pub type fiat_secp256k1_i1 = i8;
pub type fiat_secp256k1_u2 = u8;
pub type fiat_secp256k1_i2 = i8;


/*
 * The function fiat_secp256k1_addcarryx_u32 is an addition with carry.
 * Postconditions:
 *   out1 = (arg1 + arg2 + arg3) mod 2^32
 *   out2 = ⌊(arg1 + arg2 + arg3) / 2^32⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffff]
 *   arg3: [0x0 ~> 0xffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffff]
 *   out2: [0x0 ~> 0x1]
 */
#[inline]
pub fn fiat_secp256k1_addcarryx_u32(out1: &mut u32, out2: &mut fiat_secp256k1_u1, arg1: fiat_secp256k1_u1, arg2: u32, arg3: u32) -> () {
  let x1: u64 = (((arg1 as u64) + (arg2 as u64)) + (arg3 as u64));
  let x2: u32 = ((x1 & (0xffffffff as u64)) as u32);
  let x3: fiat_secp256k1_u1 = ((x1 >> 32) as fiat_secp256k1_u1);
  *out1 = x2;
  *out2 = x3;
}

/*
 * The function fiat_secp256k1_subborrowx_u32 is a subtraction with borrow.
 * Postconditions:
 *   out1 = (-arg1 + arg2 + -arg3) mod 2^32
 *   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^32⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffff]
 *   arg3: [0x0 ~> 0xffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffff]
 *   out2: [0x0 ~> 0x1]
 */
#[inline]
pub fn fiat_secp256k1_subborrowx_u32(out1: &mut u32, out2: &mut fiat_secp256k1_u1, arg1: fiat_secp256k1_u1, arg2: u32, arg3: u32) -> () {
  let x1: i64 = (((arg2 as i64) - (arg1 as i64)) - (arg3 as i64));
  let x2: fiat_secp256k1_i1 = ((x1 >> 32) as fiat_secp256k1_i1);
  let x3: u32 = ((x1 & (0xffffffff as i64)) as u32);
  *out1 = x3;
  *out2 = (((0x0 as fiat_secp256k1_i2) - (x2 as fiat_secp256k1_i2)) as fiat_secp256k1_u1);
}

/*
 * The function fiat_secp256k1_mulx_u32 is a multiplication, returning the full double-width result.
 * Postconditions:
 *   out1 = (arg1 * arg2) mod 2^32
 *   out2 = ⌊arg1 * arg2 / 2^32⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0xffffffff]
 *   arg2: [0x0 ~> 0xffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffff]
 *   out2: [0x0 ~> 0xffffffff]
 */
#[inline]
pub fn fiat_secp256k1_mulx_u32(out1: &mut u32, out2: &mut u32, arg1: u32, arg2: u32) -> () {
  let x1: u64 = ((arg1 as u64) * (arg2 as u64));
  let x2: u32 = ((x1 & (0xffffffff as u64)) as u32);
  let x3: u32 = ((x1 >> 32) as u32);
  *out1 = x2;
  *out2 = x3;
}

/*
 * The function fiat_secp256k1_cmovznz_u32 is a single-word conditional move.
 * Postconditions:
 *   out1 = (if arg1 = 0 then arg2 else arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffff]
 *   arg3: [0x0 ~> 0xffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffff]
 */
#[inline]
pub fn fiat_secp256k1_cmovznz_u32(out1: &mut u32, arg1: fiat_secp256k1_u1, arg2: u32, arg3: u32) -> () {
  let x1: fiat_secp256k1_u1 = (!(!arg1));
  let x2: u32 = ((((((0x0 as fiat_secp256k1_i2) - (x1 as fiat_secp256k1_i2)) as fiat_secp256k1_i1) as i64) & (0xffffffff as i64)) as u32);
  let x3: u32 = ((x2 & arg3) | ((!x2) & arg2));
  *out1 = x3;
}

/*
 * The function fiat_secp256k1_mul multiplies two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 *   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
#[inline]
pub fn fiat_secp256k1_mul(out1: &mut [u32; 8], arg1: &[u32; 8], arg2: &[u32; 8]) -> () {
  let x1: u32 = (arg1[1]);
  let x2: u32 = (arg1[2]);
  let x3: u32 = (arg1[3]);
  let x4: u32 = (arg1[4]);
  let x5: u32 = (arg1[5]);
  let x6: u32 = (arg1[6]);
  let x7: u32 = (arg1[7]);
  let x8: u32 = (arg1[0]);
  let mut x9: u32 = 0;
  let mut x10: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x9, &mut x10, x8, (arg2[7]));
  let mut x11: u32 = 0;
  let mut x12: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x11, &mut x12, x8, (arg2[6]));
  let mut x13: u32 = 0;
  let mut x14: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x13, &mut x14, x8, (arg2[5]));
  let mut x15: u32 = 0;
  let mut x16: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x15, &mut x16, x8, (arg2[4]));
  let mut x17: u32 = 0;
  let mut x18: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x17, &mut x18, x8, (arg2[3]));
  let mut x19: u32 = 0;
  let mut x20: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x19, &mut x20, x8, (arg2[2]));
  let mut x21: u32 = 0;
  let mut x22: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x21, &mut x22, x8, (arg2[1]));
  let mut x23: u32 = 0;
  let mut x24: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x23, &mut x24, x8, (arg2[0]));
  let mut x25: u32 = 0;
  let mut x26: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x25, &mut x26, 0x0, x24, x21);
  let mut x27: u32 = 0;
  let mut x28: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x27, &mut x28, x26, x22, x19);
  let mut x29: u32 = 0;
  let mut x30: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x29, &mut x30, x28, x20, x17);
  let mut x31: u32 = 0;
  let mut x32: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x31, &mut x32, x30, x18, x15);
  let mut x33: u32 = 0;
  let mut x34: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x33, &mut x34, x32, x16, x13);
  let mut x35: u32 = 0;
  let mut x36: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x35, &mut x36, x34, x14, x11);
  let mut x37: u32 = 0;
  let mut x38: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x37, &mut x38, x36, x12, x9);
  let x39: u32 = ((x38 as u32) + x10);
  let mut x40: u32 = 0;
  let mut x41: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x40, &mut x41, x23, 0xd2253531);
  let mut x42: u32 = 0;
  let mut x43: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x42, &mut x43, x40, 0xffffffff);
  let mut x44: u32 = 0;
  let mut x45: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x44, &mut x45, x40, 0xffffffff);
  let mut x46: u32 = 0;
  let mut x47: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x46, &mut x47, x40, 0xffffffff);
  let mut x48: u32 = 0;
  let mut x49: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x48, &mut x49, x40, 0xffffffff);
  let mut x50: u32 = 0;
  let mut x51: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x50, &mut x51, x40, 0xffffffff);
  let mut x52: u32 = 0;
  let mut x53: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x52, &mut x53, x40, 0xffffffff);
  let mut x54: u32 = 0;
  let mut x55: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x54, &mut x55, x40, 0xfffffffe);
  let mut x56: u32 = 0;
  let mut x57: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x56, &mut x57, x40, 0xfffffc2f);
  let mut x58: u32 = 0;
  let mut x59: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x58, &mut x59, 0x0, x57, x54);
  let mut x60: u32 = 0;
  let mut x61: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x60, &mut x61, x59, x55, x52);
  let mut x62: u32 = 0;
  let mut x63: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x62, &mut x63, x61, x53, x50);
  let mut x64: u32 = 0;
  let mut x65: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x64, &mut x65, x63, x51, x48);
  let mut x66: u32 = 0;
  let mut x67: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x66, &mut x67, x65, x49, x46);
  let mut x68: u32 = 0;
  let mut x69: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x68, &mut x69, x67, x47, x44);
  let mut x70: u32 = 0;
  let mut x71: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x70, &mut x71, x69, x45, x42);
  let x72: u32 = ((x71 as u32) + x43);
  let mut x73: u32 = 0;
  let mut x74: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x73, &mut x74, 0x0, x23, x56);
  let mut x75: u32 = 0;
  let mut x76: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x75, &mut x76, x74, x25, x58);
  let mut x77: u32 = 0;
  let mut x78: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x77, &mut x78, x76, x27, x60);
  let mut x79: u32 = 0;
  let mut x80: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x79, &mut x80, x78, x29, x62);
  let mut x81: u32 = 0;
  let mut x82: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x81, &mut x82, x80, x31, x64);
  let mut x83: u32 = 0;
  let mut x84: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x83, &mut x84, x82, x33, x66);
  let mut x85: u32 = 0;
  let mut x86: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x85, &mut x86, x84, x35, x68);
  let mut x87: u32 = 0;
  let mut x88: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x87, &mut x88, x86, x37, x70);
  let mut x89: u32 = 0;
  let mut x90: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x89, &mut x90, x88, x39, x72);
  let mut x91: u32 = 0;
  let mut x92: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x91, &mut x92, x1, (arg2[7]));
  let mut x93: u32 = 0;
  let mut x94: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x93, &mut x94, x1, (arg2[6]));
  let mut x95: u32 = 0;
  let mut x96: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x95, &mut x96, x1, (arg2[5]));
  let mut x97: u32 = 0;
  let mut x98: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x97, &mut x98, x1, (arg2[4]));
  let mut x99: u32 = 0;
  let mut x100: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x99, &mut x100, x1, (arg2[3]));
  let mut x101: u32 = 0;
  let mut x102: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x101, &mut x102, x1, (arg2[2]));
  let mut x103: u32 = 0;
  let mut x104: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x103, &mut x104, x1, (arg2[1]));
  let mut x105: u32 = 0;
  let mut x106: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x105, &mut x106, x1, (arg2[0]));
  let mut x107: u32 = 0;
  let mut x108: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x107, &mut x108, 0x0, x106, x103);
  let mut x109: u32 = 0;
  let mut x110: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x109, &mut x110, x108, x104, x101);
  let mut x111: u32 = 0;
  let mut x112: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x111, &mut x112, x110, x102, x99);
  let mut x113: u32 = 0;
  let mut x114: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x113, &mut x114, x112, x100, x97);
  let mut x115: u32 = 0;
  let mut x116: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x115, &mut x116, x114, x98, x95);
  let mut x117: u32 = 0;
  let mut x118: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x117, &mut x118, x116, x96, x93);
  let mut x119: u32 = 0;
  let mut x120: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x119, &mut x120, x118, x94, x91);
  let x121: u32 = ((x120 as u32) + x92);
  let mut x122: u32 = 0;
  let mut x123: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x122, &mut x123, 0x0, x75, x105);
  let mut x124: u32 = 0;
  let mut x125: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x124, &mut x125, x123, x77, x107);
  let mut x126: u32 = 0;
  let mut x127: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x126, &mut x127, x125, x79, x109);
  let mut x128: u32 = 0;
  let mut x129: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x128, &mut x129, x127, x81, x111);
  let mut x130: u32 = 0;
  let mut x131: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x130, &mut x131, x129, x83, x113);
  let mut x132: u32 = 0;
  let mut x133: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x132, &mut x133, x131, x85, x115);
  let mut x134: u32 = 0;
  let mut x135: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x134, &mut x135, x133, x87, x117);
  let mut x136: u32 = 0;
  let mut x137: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x136, &mut x137, x135, x89, x119);
  let mut x138: u32 = 0;
  let mut x139: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x138, &mut x139, x137, (x90 as u32), x121);
  let mut x140: u32 = 0;
  let mut x141: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x140, &mut x141, x122, 0xd2253531);
  let mut x142: u32 = 0;
  let mut x143: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x142, &mut x143, x140, 0xffffffff);
  let mut x144: u32 = 0;
  let mut x145: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x144, &mut x145, x140, 0xffffffff);
  let mut x146: u32 = 0;
  let mut x147: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x146, &mut x147, x140, 0xffffffff);
  let mut x148: u32 = 0;
  let mut x149: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x148, &mut x149, x140, 0xffffffff);
  let mut x150: u32 = 0;
  let mut x151: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x150, &mut x151, x140, 0xffffffff);
  let mut x152: u32 = 0;
  let mut x153: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x152, &mut x153, x140, 0xffffffff);
  let mut x154: u32 = 0;
  let mut x155: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x154, &mut x155, x140, 0xfffffffe);
  let mut x156: u32 = 0;
  let mut x157: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x156, &mut x157, x140, 0xfffffc2f);
  let mut x158: u32 = 0;
  let mut x159: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x158, &mut x159, 0x0, x157, x154);
  let mut x160: u32 = 0;
  let mut x161: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x160, &mut x161, x159, x155, x152);
  let mut x162: u32 = 0;
  let mut x163: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x162, &mut x163, x161, x153, x150);
  let mut x164: u32 = 0;
  let mut x165: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x164, &mut x165, x163, x151, x148);
  let mut x166: u32 = 0;
  let mut x167: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x166, &mut x167, x165, x149, x146);
  let mut x168: u32 = 0;
  let mut x169: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x168, &mut x169, x167, x147, x144);
  let mut x170: u32 = 0;
  let mut x171: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x170, &mut x171, x169, x145, x142);
  let x172: u32 = ((x171 as u32) + x143);
  let mut x173: u32 = 0;
  let mut x174: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x173, &mut x174, 0x0, x122, x156);
  let mut x175: u32 = 0;
  let mut x176: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x175, &mut x176, x174, x124, x158);
  let mut x177: u32 = 0;
  let mut x178: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x177, &mut x178, x176, x126, x160);
  let mut x179: u32 = 0;
  let mut x180: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x179, &mut x180, x178, x128, x162);
  let mut x181: u32 = 0;
  let mut x182: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x181, &mut x182, x180, x130, x164);
  let mut x183: u32 = 0;
  let mut x184: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x183, &mut x184, x182, x132, x166);
  let mut x185: u32 = 0;
  let mut x186: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x185, &mut x186, x184, x134, x168);
  let mut x187: u32 = 0;
  let mut x188: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x187, &mut x188, x186, x136, x170);
  let mut x189: u32 = 0;
  let mut x190: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x189, &mut x190, x188, x138, x172);
  let x191: u32 = ((x190 as u32) + (x139 as u32));
  let mut x192: u32 = 0;
  let mut x193: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x192, &mut x193, x2, (arg2[7]));
  let mut x194: u32 = 0;
  let mut x195: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x194, &mut x195, x2, (arg2[6]));
  let mut x196: u32 = 0;
  let mut x197: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x196, &mut x197, x2, (arg2[5]));
  let mut x198: u32 = 0;
  let mut x199: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x198, &mut x199, x2, (arg2[4]));
  let mut x200: u32 = 0;
  let mut x201: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x200, &mut x201, x2, (arg2[3]));
  let mut x202: u32 = 0;
  let mut x203: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x202, &mut x203, x2, (arg2[2]));
  let mut x204: u32 = 0;
  let mut x205: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x204, &mut x205, x2, (arg2[1]));
  let mut x206: u32 = 0;
  let mut x207: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x206, &mut x207, x2, (arg2[0]));
  let mut x208: u32 = 0;
  let mut x209: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x208, &mut x209, 0x0, x207, x204);
  let mut x210: u32 = 0;
  let mut x211: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x210, &mut x211, x209, x205, x202);
  let mut x212: u32 = 0;
  let mut x213: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x212, &mut x213, x211, x203, x200);
  let mut x214: u32 = 0;
  let mut x215: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x214, &mut x215, x213, x201, x198);
  let mut x216: u32 = 0;
  let mut x217: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x216, &mut x217, x215, x199, x196);
  let mut x218: u32 = 0;
  let mut x219: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x218, &mut x219, x217, x197, x194);
  let mut x220: u32 = 0;
  let mut x221: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x220, &mut x221, x219, x195, x192);
  let x222: u32 = ((x221 as u32) + x193);
  let mut x223: u32 = 0;
  let mut x224: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x223, &mut x224, 0x0, x175, x206);
  let mut x225: u32 = 0;
  let mut x226: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x225, &mut x226, x224, x177, x208);
  let mut x227: u32 = 0;
  let mut x228: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x227, &mut x228, x226, x179, x210);
  let mut x229: u32 = 0;
  let mut x230: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x229, &mut x230, x228, x181, x212);
  let mut x231: u32 = 0;
  let mut x232: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x231, &mut x232, x230, x183, x214);
  let mut x233: u32 = 0;
  let mut x234: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x233, &mut x234, x232, x185, x216);
  let mut x235: u32 = 0;
  let mut x236: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x235, &mut x236, x234, x187, x218);
  let mut x237: u32 = 0;
  let mut x238: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x237, &mut x238, x236, x189, x220);
  let mut x239: u32 = 0;
  let mut x240: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x239, &mut x240, x238, x191, x222);
  let mut x241: u32 = 0;
  let mut x242: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x241, &mut x242, x223, 0xd2253531);
  let mut x243: u32 = 0;
  let mut x244: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x243, &mut x244, x241, 0xffffffff);
  let mut x245: u32 = 0;
  let mut x246: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x245, &mut x246, x241, 0xffffffff);
  let mut x247: u32 = 0;
  let mut x248: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x247, &mut x248, x241, 0xffffffff);
  let mut x249: u32 = 0;
  let mut x250: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x249, &mut x250, x241, 0xffffffff);
  let mut x251: u32 = 0;
  let mut x252: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x251, &mut x252, x241, 0xffffffff);
  let mut x253: u32 = 0;
  let mut x254: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x253, &mut x254, x241, 0xffffffff);
  let mut x255: u32 = 0;
  let mut x256: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x255, &mut x256, x241, 0xfffffffe);
  let mut x257: u32 = 0;
  let mut x258: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x257, &mut x258, x241, 0xfffffc2f);
  let mut x259: u32 = 0;
  let mut x260: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x259, &mut x260, 0x0, x258, x255);
  let mut x261: u32 = 0;
  let mut x262: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x261, &mut x262, x260, x256, x253);
  let mut x263: u32 = 0;
  let mut x264: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x263, &mut x264, x262, x254, x251);
  let mut x265: u32 = 0;
  let mut x266: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x265, &mut x266, x264, x252, x249);
  let mut x267: u32 = 0;
  let mut x268: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x267, &mut x268, x266, x250, x247);
  let mut x269: u32 = 0;
  let mut x270: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x269, &mut x270, x268, x248, x245);
  let mut x271: u32 = 0;
  let mut x272: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x271, &mut x272, x270, x246, x243);
  let x273: u32 = ((x272 as u32) + x244);
  let mut x274: u32 = 0;
  let mut x275: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x274, &mut x275, 0x0, x223, x257);
  let mut x276: u32 = 0;
  let mut x277: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x276, &mut x277, x275, x225, x259);
  let mut x278: u32 = 0;
  let mut x279: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x278, &mut x279, x277, x227, x261);
  let mut x280: u32 = 0;
  let mut x281: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x280, &mut x281, x279, x229, x263);
  let mut x282: u32 = 0;
  let mut x283: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x282, &mut x283, x281, x231, x265);
  let mut x284: u32 = 0;
  let mut x285: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x284, &mut x285, x283, x233, x267);
  let mut x286: u32 = 0;
  let mut x287: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x286, &mut x287, x285, x235, x269);
  let mut x288: u32 = 0;
  let mut x289: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x288, &mut x289, x287, x237, x271);
  let mut x290: u32 = 0;
  let mut x291: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x290, &mut x291, x289, x239, x273);
  let x292: u32 = ((x291 as u32) + (x240 as u32));
  let mut x293: u32 = 0;
  let mut x294: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x293, &mut x294, x3, (arg2[7]));
  let mut x295: u32 = 0;
  let mut x296: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x295, &mut x296, x3, (arg2[6]));
  let mut x297: u32 = 0;
  let mut x298: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x297, &mut x298, x3, (arg2[5]));
  let mut x299: u32 = 0;
  let mut x300: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x299, &mut x300, x3, (arg2[4]));
  let mut x301: u32 = 0;
  let mut x302: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x301, &mut x302, x3, (arg2[3]));
  let mut x303: u32 = 0;
  let mut x304: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x303, &mut x304, x3, (arg2[2]));
  let mut x305: u32 = 0;
  let mut x306: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x305, &mut x306, x3, (arg2[1]));
  let mut x307: u32 = 0;
  let mut x308: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x307, &mut x308, x3, (arg2[0]));
  let mut x309: u32 = 0;
  let mut x310: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x309, &mut x310, 0x0, x308, x305);
  let mut x311: u32 = 0;
  let mut x312: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x311, &mut x312, x310, x306, x303);
  let mut x313: u32 = 0;
  let mut x314: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x313, &mut x314, x312, x304, x301);
  let mut x315: u32 = 0;
  let mut x316: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x315, &mut x316, x314, x302, x299);
  let mut x317: u32 = 0;
  let mut x318: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x317, &mut x318, x316, x300, x297);
  let mut x319: u32 = 0;
  let mut x320: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x319, &mut x320, x318, x298, x295);
  let mut x321: u32 = 0;
  let mut x322: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x321, &mut x322, x320, x296, x293);
  let x323: u32 = ((x322 as u32) + x294);
  let mut x324: u32 = 0;
  let mut x325: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x324, &mut x325, 0x0, x276, x307);
  let mut x326: u32 = 0;
  let mut x327: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x326, &mut x327, x325, x278, x309);
  let mut x328: u32 = 0;
  let mut x329: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x328, &mut x329, x327, x280, x311);
  let mut x330: u32 = 0;
  let mut x331: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x330, &mut x331, x329, x282, x313);
  let mut x332: u32 = 0;
  let mut x333: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x332, &mut x333, x331, x284, x315);
  let mut x334: u32 = 0;
  let mut x335: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x334, &mut x335, x333, x286, x317);
  let mut x336: u32 = 0;
  let mut x337: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x336, &mut x337, x335, x288, x319);
  let mut x338: u32 = 0;
  let mut x339: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x338, &mut x339, x337, x290, x321);
  let mut x340: u32 = 0;
  let mut x341: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x340, &mut x341, x339, x292, x323);
  let mut x342: u32 = 0;
  let mut x343: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x342, &mut x343, x324, 0xd2253531);
  let mut x344: u32 = 0;
  let mut x345: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x344, &mut x345, x342, 0xffffffff);
  let mut x346: u32 = 0;
  let mut x347: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x346, &mut x347, x342, 0xffffffff);
  let mut x348: u32 = 0;
  let mut x349: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x348, &mut x349, x342, 0xffffffff);
  let mut x350: u32 = 0;
  let mut x351: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x350, &mut x351, x342, 0xffffffff);
  let mut x352: u32 = 0;
  let mut x353: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x352, &mut x353, x342, 0xffffffff);
  let mut x354: u32 = 0;
  let mut x355: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x354, &mut x355, x342, 0xffffffff);
  let mut x356: u32 = 0;
  let mut x357: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x356, &mut x357, x342, 0xfffffffe);
  let mut x358: u32 = 0;
  let mut x359: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x358, &mut x359, x342, 0xfffffc2f);
  let mut x360: u32 = 0;
  let mut x361: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x360, &mut x361, 0x0, x359, x356);
  let mut x362: u32 = 0;
  let mut x363: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x362, &mut x363, x361, x357, x354);
  let mut x364: u32 = 0;
  let mut x365: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x364, &mut x365, x363, x355, x352);
  let mut x366: u32 = 0;
  let mut x367: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x366, &mut x367, x365, x353, x350);
  let mut x368: u32 = 0;
  let mut x369: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x368, &mut x369, x367, x351, x348);
  let mut x370: u32 = 0;
  let mut x371: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x370, &mut x371, x369, x349, x346);
  let mut x372: u32 = 0;
  let mut x373: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x372, &mut x373, x371, x347, x344);
  let x374: u32 = ((x373 as u32) + x345);
  let mut x375: u32 = 0;
  let mut x376: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x375, &mut x376, 0x0, x324, x358);
  let mut x377: u32 = 0;
  let mut x378: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x377, &mut x378, x376, x326, x360);
  let mut x379: u32 = 0;
  let mut x380: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x379, &mut x380, x378, x328, x362);
  let mut x381: u32 = 0;
  let mut x382: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x381, &mut x382, x380, x330, x364);
  let mut x383: u32 = 0;
  let mut x384: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x383, &mut x384, x382, x332, x366);
  let mut x385: u32 = 0;
  let mut x386: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x385, &mut x386, x384, x334, x368);
  let mut x387: u32 = 0;
  let mut x388: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x387, &mut x388, x386, x336, x370);
  let mut x389: u32 = 0;
  let mut x390: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x389, &mut x390, x388, x338, x372);
  let mut x391: u32 = 0;
  let mut x392: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x391, &mut x392, x390, x340, x374);
  let x393: u32 = ((x392 as u32) + (x341 as u32));
  let mut x394: u32 = 0;
  let mut x395: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x394, &mut x395, x4, (arg2[7]));
  let mut x396: u32 = 0;
  let mut x397: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x396, &mut x397, x4, (arg2[6]));
  let mut x398: u32 = 0;
  let mut x399: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x398, &mut x399, x4, (arg2[5]));
  let mut x400: u32 = 0;
  let mut x401: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x400, &mut x401, x4, (arg2[4]));
  let mut x402: u32 = 0;
  let mut x403: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x402, &mut x403, x4, (arg2[3]));
  let mut x404: u32 = 0;
  let mut x405: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x404, &mut x405, x4, (arg2[2]));
  let mut x406: u32 = 0;
  let mut x407: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x406, &mut x407, x4, (arg2[1]));
  let mut x408: u32 = 0;
  let mut x409: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x408, &mut x409, x4, (arg2[0]));
  let mut x410: u32 = 0;
  let mut x411: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x410, &mut x411, 0x0, x409, x406);
  let mut x412: u32 = 0;
  let mut x413: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x412, &mut x413, x411, x407, x404);
  let mut x414: u32 = 0;
  let mut x415: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x414, &mut x415, x413, x405, x402);
  let mut x416: u32 = 0;
  let mut x417: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x416, &mut x417, x415, x403, x400);
  let mut x418: u32 = 0;
  let mut x419: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x418, &mut x419, x417, x401, x398);
  let mut x420: u32 = 0;
  let mut x421: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x420, &mut x421, x419, x399, x396);
  let mut x422: u32 = 0;
  let mut x423: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x422, &mut x423, x421, x397, x394);
  let x424: u32 = ((x423 as u32) + x395);
  let mut x425: u32 = 0;
  let mut x426: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x425, &mut x426, 0x0, x377, x408);
  let mut x427: u32 = 0;
  let mut x428: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x427, &mut x428, x426, x379, x410);
  let mut x429: u32 = 0;
  let mut x430: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x429, &mut x430, x428, x381, x412);
  let mut x431: u32 = 0;
  let mut x432: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x431, &mut x432, x430, x383, x414);
  let mut x433: u32 = 0;
  let mut x434: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x433, &mut x434, x432, x385, x416);
  let mut x435: u32 = 0;
  let mut x436: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x435, &mut x436, x434, x387, x418);
  let mut x437: u32 = 0;
  let mut x438: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x437, &mut x438, x436, x389, x420);
  let mut x439: u32 = 0;
  let mut x440: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x439, &mut x440, x438, x391, x422);
  let mut x441: u32 = 0;
  let mut x442: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x441, &mut x442, x440, x393, x424);
  let mut x443: u32 = 0;
  let mut x444: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x443, &mut x444, x425, 0xd2253531);
  let mut x445: u32 = 0;
  let mut x446: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x445, &mut x446, x443, 0xffffffff);
  let mut x447: u32 = 0;
  let mut x448: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x447, &mut x448, x443, 0xffffffff);
  let mut x449: u32 = 0;
  let mut x450: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x449, &mut x450, x443, 0xffffffff);
  let mut x451: u32 = 0;
  let mut x452: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x451, &mut x452, x443, 0xffffffff);
  let mut x453: u32 = 0;
  let mut x454: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x453, &mut x454, x443, 0xffffffff);
  let mut x455: u32 = 0;
  let mut x456: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x455, &mut x456, x443, 0xffffffff);
  let mut x457: u32 = 0;
  let mut x458: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x457, &mut x458, x443, 0xfffffffe);
  let mut x459: u32 = 0;
  let mut x460: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x459, &mut x460, x443, 0xfffffc2f);
  let mut x461: u32 = 0;
  let mut x462: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x461, &mut x462, 0x0, x460, x457);
  let mut x463: u32 = 0;
  let mut x464: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x463, &mut x464, x462, x458, x455);
  let mut x465: u32 = 0;
  let mut x466: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x465, &mut x466, x464, x456, x453);
  let mut x467: u32 = 0;
  let mut x468: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x467, &mut x468, x466, x454, x451);
  let mut x469: u32 = 0;
  let mut x470: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x469, &mut x470, x468, x452, x449);
  let mut x471: u32 = 0;
  let mut x472: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x471, &mut x472, x470, x450, x447);
  let mut x473: u32 = 0;
  let mut x474: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x473, &mut x474, x472, x448, x445);
  let x475: u32 = ((x474 as u32) + x446);
  let mut x476: u32 = 0;
  let mut x477: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x476, &mut x477, 0x0, x425, x459);
  let mut x478: u32 = 0;
  let mut x479: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x478, &mut x479, x477, x427, x461);
  let mut x480: u32 = 0;
  let mut x481: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x480, &mut x481, x479, x429, x463);
  let mut x482: u32 = 0;
  let mut x483: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x482, &mut x483, x481, x431, x465);
  let mut x484: u32 = 0;
  let mut x485: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x484, &mut x485, x483, x433, x467);
  let mut x486: u32 = 0;
  let mut x487: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x486, &mut x487, x485, x435, x469);
  let mut x488: u32 = 0;
  let mut x489: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x488, &mut x489, x487, x437, x471);
  let mut x490: u32 = 0;
  let mut x491: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x490, &mut x491, x489, x439, x473);
  let mut x492: u32 = 0;
  let mut x493: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x492, &mut x493, x491, x441, x475);
  let x494: u32 = ((x493 as u32) + (x442 as u32));
  let mut x495: u32 = 0;
  let mut x496: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x495, &mut x496, x5, (arg2[7]));
  let mut x497: u32 = 0;
  let mut x498: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x497, &mut x498, x5, (arg2[6]));
  let mut x499: u32 = 0;
  let mut x500: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x499, &mut x500, x5, (arg2[5]));
  let mut x501: u32 = 0;
  let mut x502: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x501, &mut x502, x5, (arg2[4]));
  let mut x503: u32 = 0;
  let mut x504: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x503, &mut x504, x5, (arg2[3]));
  let mut x505: u32 = 0;
  let mut x506: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x505, &mut x506, x5, (arg2[2]));
  let mut x507: u32 = 0;
  let mut x508: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x507, &mut x508, x5, (arg2[1]));
  let mut x509: u32 = 0;
  let mut x510: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x509, &mut x510, x5, (arg2[0]));
  let mut x511: u32 = 0;
  let mut x512: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x511, &mut x512, 0x0, x510, x507);
  let mut x513: u32 = 0;
  let mut x514: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x513, &mut x514, x512, x508, x505);
  let mut x515: u32 = 0;
  let mut x516: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x515, &mut x516, x514, x506, x503);
  let mut x517: u32 = 0;
  let mut x518: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x517, &mut x518, x516, x504, x501);
  let mut x519: u32 = 0;
  let mut x520: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x519, &mut x520, x518, x502, x499);
  let mut x521: u32 = 0;
  let mut x522: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x521, &mut x522, x520, x500, x497);
  let mut x523: u32 = 0;
  let mut x524: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x523, &mut x524, x522, x498, x495);
  let x525: u32 = ((x524 as u32) + x496);
  let mut x526: u32 = 0;
  let mut x527: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x526, &mut x527, 0x0, x478, x509);
  let mut x528: u32 = 0;
  let mut x529: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x528, &mut x529, x527, x480, x511);
  let mut x530: u32 = 0;
  let mut x531: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x530, &mut x531, x529, x482, x513);
  let mut x532: u32 = 0;
  let mut x533: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x532, &mut x533, x531, x484, x515);
  let mut x534: u32 = 0;
  let mut x535: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x534, &mut x535, x533, x486, x517);
  let mut x536: u32 = 0;
  let mut x537: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x536, &mut x537, x535, x488, x519);
  let mut x538: u32 = 0;
  let mut x539: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x538, &mut x539, x537, x490, x521);
  let mut x540: u32 = 0;
  let mut x541: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x540, &mut x541, x539, x492, x523);
  let mut x542: u32 = 0;
  let mut x543: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x542, &mut x543, x541, x494, x525);
  let mut x544: u32 = 0;
  let mut x545: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x544, &mut x545, x526, 0xd2253531);
  let mut x546: u32 = 0;
  let mut x547: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x546, &mut x547, x544, 0xffffffff);
  let mut x548: u32 = 0;
  let mut x549: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x548, &mut x549, x544, 0xffffffff);
  let mut x550: u32 = 0;
  let mut x551: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x550, &mut x551, x544, 0xffffffff);
  let mut x552: u32 = 0;
  let mut x553: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x552, &mut x553, x544, 0xffffffff);
  let mut x554: u32 = 0;
  let mut x555: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x554, &mut x555, x544, 0xffffffff);
  let mut x556: u32 = 0;
  let mut x557: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x556, &mut x557, x544, 0xffffffff);
  let mut x558: u32 = 0;
  let mut x559: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x558, &mut x559, x544, 0xfffffffe);
  let mut x560: u32 = 0;
  let mut x561: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x560, &mut x561, x544, 0xfffffc2f);
  let mut x562: u32 = 0;
  let mut x563: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x562, &mut x563, 0x0, x561, x558);
  let mut x564: u32 = 0;
  let mut x565: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x564, &mut x565, x563, x559, x556);
  let mut x566: u32 = 0;
  let mut x567: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x566, &mut x567, x565, x557, x554);
  let mut x568: u32 = 0;
  let mut x569: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x568, &mut x569, x567, x555, x552);
  let mut x570: u32 = 0;
  let mut x571: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x570, &mut x571, x569, x553, x550);
  let mut x572: u32 = 0;
  let mut x573: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x572, &mut x573, x571, x551, x548);
  let mut x574: u32 = 0;
  let mut x575: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x574, &mut x575, x573, x549, x546);
  let x576: u32 = ((x575 as u32) + x547);
  let mut x577: u32 = 0;
  let mut x578: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x577, &mut x578, 0x0, x526, x560);
  let mut x579: u32 = 0;
  let mut x580: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x579, &mut x580, x578, x528, x562);
  let mut x581: u32 = 0;
  let mut x582: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x581, &mut x582, x580, x530, x564);
  let mut x583: u32 = 0;
  let mut x584: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x583, &mut x584, x582, x532, x566);
  let mut x585: u32 = 0;
  let mut x586: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x585, &mut x586, x584, x534, x568);
  let mut x587: u32 = 0;
  let mut x588: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x587, &mut x588, x586, x536, x570);
  let mut x589: u32 = 0;
  let mut x590: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x589, &mut x590, x588, x538, x572);
  let mut x591: u32 = 0;
  let mut x592: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x591, &mut x592, x590, x540, x574);
  let mut x593: u32 = 0;
  let mut x594: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x593, &mut x594, x592, x542, x576);
  let x595: u32 = ((x594 as u32) + (x543 as u32));
  let mut x596: u32 = 0;
  let mut x597: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x596, &mut x597, x6, (arg2[7]));
  let mut x598: u32 = 0;
  let mut x599: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x598, &mut x599, x6, (arg2[6]));
  let mut x600: u32 = 0;
  let mut x601: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x600, &mut x601, x6, (arg2[5]));
  let mut x602: u32 = 0;
  let mut x603: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x602, &mut x603, x6, (arg2[4]));
  let mut x604: u32 = 0;
  let mut x605: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x604, &mut x605, x6, (arg2[3]));
  let mut x606: u32 = 0;
  let mut x607: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x606, &mut x607, x6, (arg2[2]));
  let mut x608: u32 = 0;
  let mut x609: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x608, &mut x609, x6, (arg2[1]));
  let mut x610: u32 = 0;
  let mut x611: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x610, &mut x611, x6, (arg2[0]));
  let mut x612: u32 = 0;
  let mut x613: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x612, &mut x613, 0x0, x611, x608);
  let mut x614: u32 = 0;
  let mut x615: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x614, &mut x615, x613, x609, x606);
  let mut x616: u32 = 0;
  let mut x617: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x616, &mut x617, x615, x607, x604);
  let mut x618: u32 = 0;
  let mut x619: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x618, &mut x619, x617, x605, x602);
  let mut x620: u32 = 0;
  let mut x621: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x620, &mut x621, x619, x603, x600);
  let mut x622: u32 = 0;
  let mut x623: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x622, &mut x623, x621, x601, x598);
  let mut x624: u32 = 0;
  let mut x625: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x624, &mut x625, x623, x599, x596);
  let x626: u32 = ((x625 as u32) + x597);
  let mut x627: u32 = 0;
  let mut x628: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x627, &mut x628, 0x0, x579, x610);
  let mut x629: u32 = 0;
  let mut x630: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x629, &mut x630, x628, x581, x612);
  let mut x631: u32 = 0;
  let mut x632: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x631, &mut x632, x630, x583, x614);
  let mut x633: u32 = 0;
  let mut x634: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x633, &mut x634, x632, x585, x616);
  let mut x635: u32 = 0;
  let mut x636: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x635, &mut x636, x634, x587, x618);
  let mut x637: u32 = 0;
  let mut x638: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x637, &mut x638, x636, x589, x620);
  let mut x639: u32 = 0;
  let mut x640: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x639, &mut x640, x638, x591, x622);
  let mut x641: u32 = 0;
  let mut x642: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x641, &mut x642, x640, x593, x624);
  let mut x643: u32 = 0;
  let mut x644: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x643, &mut x644, x642, x595, x626);
  let mut x645: u32 = 0;
  let mut x646: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x645, &mut x646, x627, 0xd2253531);
  let mut x647: u32 = 0;
  let mut x648: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x647, &mut x648, x645, 0xffffffff);
  let mut x649: u32 = 0;
  let mut x650: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x649, &mut x650, x645, 0xffffffff);
  let mut x651: u32 = 0;
  let mut x652: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x651, &mut x652, x645, 0xffffffff);
  let mut x653: u32 = 0;
  let mut x654: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x653, &mut x654, x645, 0xffffffff);
  let mut x655: u32 = 0;
  let mut x656: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x655, &mut x656, x645, 0xffffffff);
  let mut x657: u32 = 0;
  let mut x658: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x657, &mut x658, x645, 0xffffffff);
  let mut x659: u32 = 0;
  let mut x660: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x659, &mut x660, x645, 0xfffffffe);
  let mut x661: u32 = 0;
  let mut x662: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x661, &mut x662, x645, 0xfffffc2f);
  let mut x663: u32 = 0;
  let mut x664: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x663, &mut x664, 0x0, x662, x659);
  let mut x665: u32 = 0;
  let mut x666: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x665, &mut x666, x664, x660, x657);
  let mut x667: u32 = 0;
  let mut x668: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x667, &mut x668, x666, x658, x655);
  let mut x669: u32 = 0;
  let mut x670: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x669, &mut x670, x668, x656, x653);
  let mut x671: u32 = 0;
  let mut x672: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x671, &mut x672, x670, x654, x651);
  let mut x673: u32 = 0;
  let mut x674: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x673, &mut x674, x672, x652, x649);
  let mut x675: u32 = 0;
  let mut x676: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x675, &mut x676, x674, x650, x647);
  let x677: u32 = ((x676 as u32) + x648);
  let mut x678: u32 = 0;
  let mut x679: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x678, &mut x679, 0x0, x627, x661);
  let mut x680: u32 = 0;
  let mut x681: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x680, &mut x681, x679, x629, x663);
  let mut x682: u32 = 0;
  let mut x683: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x682, &mut x683, x681, x631, x665);
  let mut x684: u32 = 0;
  let mut x685: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x684, &mut x685, x683, x633, x667);
  let mut x686: u32 = 0;
  let mut x687: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x686, &mut x687, x685, x635, x669);
  let mut x688: u32 = 0;
  let mut x689: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x688, &mut x689, x687, x637, x671);
  let mut x690: u32 = 0;
  let mut x691: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x690, &mut x691, x689, x639, x673);
  let mut x692: u32 = 0;
  let mut x693: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x692, &mut x693, x691, x641, x675);
  let mut x694: u32 = 0;
  let mut x695: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x694, &mut x695, x693, x643, x677);
  let x696: u32 = ((x695 as u32) + (x644 as u32));
  let mut x697: u32 = 0;
  let mut x698: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x697, &mut x698, x7, (arg2[7]));
  let mut x699: u32 = 0;
  let mut x700: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x699, &mut x700, x7, (arg2[6]));
  let mut x701: u32 = 0;
  let mut x702: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x701, &mut x702, x7, (arg2[5]));
  let mut x703: u32 = 0;
  let mut x704: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x703, &mut x704, x7, (arg2[4]));
  let mut x705: u32 = 0;
  let mut x706: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x705, &mut x706, x7, (arg2[3]));
  let mut x707: u32 = 0;
  let mut x708: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x707, &mut x708, x7, (arg2[2]));
  let mut x709: u32 = 0;
  let mut x710: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x709, &mut x710, x7, (arg2[1]));
  let mut x711: u32 = 0;
  let mut x712: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x711, &mut x712, x7, (arg2[0]));
  let mut x713: u32 = 0;
  let mut x714: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x713, &mut x714, 0x0, x712, x709);
  let mut x715: u32 = 0;
  let mut x716: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x715, &mut x716, x714, x710, x707);
  let mut x717: u32 = 0;
  let mut x718: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x717, &mut x718, x716, x708, x705);
  let mut x719: u32 = 0;
  let mut x720: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x719, &mut x720, x718, x706, x703);
  let mut x721: u32 = 0;
  let mut x722: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x721, &mut x722, x720, x704, x701);
  let mut x723: u32 = 0;
  let mut x724: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x723, &mut x724, x722, x702, x699);
  let mut x725: u32 = 0;
  let mut x726: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x725, &mut x726, x724, x700, x697);
  let x727: u32 = ((x726 as u32) + x698);
  let mut x728: u32 = 0;
  let mut x729: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x728, &mut x729, 0x0, x680, x711);
  let mut x730: u32 = 0;
  let mut x731: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x730, &mut x731, x729, x682, x713);
  let mut x732: u32 = 0;
  let mut x733: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x732, &mut x733, x731, x684, x715);
  let mut x734: u32 = 0;
  let mut x735: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x734, &mut x735, x733, x686, x717);
  let mut x736: u32 = 0;
  let mut x737: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x736, &mut x737, x735, x688, x719);
  let mut x738: u32 = 0;
  let mut x739: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x738, &mut x739, x737, x690, x721);
  let mut x740: u32 = 0;
  let mut x741: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x740, &mut x741, x739, x692, x723);
  let mut x742: u32 = 0;
  let mut x743: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x742, &mut x743, x741, x694, x725);
  let mut x744: u32 = 0;
  let mut x745: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x744, &mut x745, x743, x696, x727);
  let mut x746: u32 = 0;
  let mut x747: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x746, &mut x747, x728, 0xd2253531);
  let mut x748: u32 = 0;
  let mut x749: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x748, &mut x749, x746, 0xffffffff);
  let mut x750: u32 = 0;
  let mut x751: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x750, &mut x751, x746, 0xffffffff);
  let mut x752: u32 = 0;
  let mut x753: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x752, &mut x753, x746, 0xffffffff);
  let mut x754: u32 = 0;
  let mut x755: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x754, &mut x755, x746, 0xffffffff);
  let mut x756: u32 = 0;
  let mut x757: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x756, &mut x757, x746, 0xffffffff);
  let mut x758: u32 = 0;
  let mut x759: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x758, &mut x759, x746, 0xffffffff);
  let mut x760: u32 = 0;
  let mut x761: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x760, &mut x761, x746, 0xfffffffe);
  let mut x762: u32 = 0;
  let mut x763: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x762, &mut x763, x746, 0xfffffc2f);
  let mut x764: u32 = 0;
  let mut x765: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x764, &mut x765, 0x0, x763, x760);
  let mut x766: u32 = 0;
  let mut x767: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x766, &mut x767, x765, x761, x758);
  let mut x768: u32 = 0;
  let mut x769: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x768, &mut x769, x767, x759, x756);
  let mut x770: u32 = 0;
  let mut x771: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x770, &mut x771, x769, x757, x754);
  let mut x772: u32 = 0;
  let mut x773: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x772, &mut x773, x771, x755, x752);
  let mut x774: u32 = 0;
  let mut x775: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x774, &mut x775, x773, x753, x750);
  let mut x776: u32 = 0;
  let mut x777: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x776, &mut x777, x775, x751, x748);
  let x778: u32 = ((x777 as u32) + x749);
  let mut x779: u32 = 0;
  let mut x780: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x779, &mut x780, 0x0, x728, x762);
  let mut x781: u32 = 0;
  let mut x782: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x781, &mut x782, x780, x730, x764);
  let mut x783: u32 = 0;
  let mut x784: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x783, &mut x784, x782, x732, x766);
  let mut x785: u32 = 0;
  let mut x786: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x785, &mut x786, x784, x734, x768);
  let mut x787: u32 = 0;
  let mut x788: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x787, &mut x788, x786, x736, x770);
  let mut x789: u32 = 0;
  let mut x790: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x789, &mut x790, x788, x738, x772);
  let mut x791: u32 = 0;
  let mut x792: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x791, &mut x792, x790, x740, x774);
  let mut x793: u32 = 0;
  let mut x794: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x793, &mut x794, x792, x742, x776);
  let mut x795: u32 = 0;
  let mut x796: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x795, &mut x796, x794, x744, x778);
  let x797: u32 = ((x796 as u32) + (x745 as u32));
  let mut x798: u32 = 0;
  let mut x799: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x798, &mut x799, 0x0, x781, 0xfffffc2f);
  let mut x800: u32 = 0;
  let mut x801: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x800, &mut x801, x799, x783, 0xfffffffe);
  let mut x802: u32 = 0;
  let mut x803: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x802, &mut x803, x801, x785, 0xffffffff);
  let mut x804: u32 = 0;
  let mut x805: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x804, &mut x805, x803, x787, 0xffffffff);
  let mut x806: u32 = 0;
  let mut x807: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x806, &mut x807, x805, x789, 0xffffffff);
  let mut x808: u32 = 0;
  let mut x809: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x808, &mut x809, x807, x791, 0xffffffff);
  let mut x810: u32 = 0;
  let mut x811: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x810, &mut x811, x809, x793, 0xffffffff);
  let mut x812: u32 = 0;
  let mut x813: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x812, &mut x813, x811, x795, 0xffffffff);
  let mut x814: u32 = 0;
  let mut x815: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x814, &mut x815, x813, x797, (0x0 as u32));
  let mut x816: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x816, x815, x798, x781);
  let mut x817: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x817, x815, x800, x783);
  let mut x818: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x818, x815, x802, x785);
  let mut x819: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x819, x815, x804, x787);
  let mut x820: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x820, x815, x806, x789);
  let mut x821: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x821, x815, x808, x791);
  let mut x822: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x822, x815, x810, x793);
  let mut x823: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x823, x815, x812, x795);
  out1[0] = x816;
  out1[1] = x817;
  out1[2] = x818;
  out1[3] = x819;
  out1[4] = x820;
  out1[5] = x821;
  out1[6] = x822;
  out1[7] = x823;
}

/*
 * The function fiat_secp256k1_square squares a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
#[inline]
pub fn fiat_secp256k1_square(out1: &mut [u32; 8], arg1: &[u32; 8]) -> () {
  let x1: u32 = (arg1[1]);
  let x2: u32 = (arg1[2]);
  let x3: u32 = (arg1[3]);
  let x4: u32 = (arg1[4]);
  let x5: u32 = (arg1[5]);
  let x6: u32 = (arg1[6]);
  let x7: u32 = (arg1[7]);
  let x8: u32 = (arg1[0]);
  let mut x9: u32 = 0;
  let mut x10: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x9, &mut x10, x8, (arg1[7]));
  let mut x11: u32 = 0;
  let mut x12: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x11, &mut x12, x8, (arg1[6]));
  let mut x13: u32 = 0;
  let mut x14: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x13, &mut x14, x8, (arg1[5]));
  let mut x15: u32 = 0;
  let mut x16: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x15, &mut x16, x8, (arg1[4]));
  let mut x17: u32 = 0;
  let mut x18: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x17, &mut x18, x8, (arg1[3]));
  let mut x19: u32 = 0;
  let mut x20: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x19, &mut x20, x8, (arg1[2]));
  let mut x21: u32 = 0;
  let mut x22: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x21, &mut x22, x8, (arg1[1]));
  let mut x23: u32 = 0;
  let mut x24: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x23, &mut x24, x8, (arg1[0]));
  let mut x25: u32 = 0;
  let mut x26: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x25, &mut x26, 0x0, x24, x21);
  let mut x27: u32 = 0;
  let mut x28: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x27, &mut x28, x26, x22, x19);
  let mut x29: u32 = 0;
  let mut x30: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x29, &mut x30, x28, x20, x17);
  let mut x31: u32 = 0;
  let mut x32: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x31, &mut x32, x30, x18, x15);
  let mut x33: u32 = 0;
  let mut x34: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x33, &mut x34, x32, x16, x13);
  let mut x35: u32 = 0;
  let mut x36: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x35, &mut x36, x34, x14, x11);
  let mut x37: u32 = 0;
  let mut x38: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x37, &mut x38, x36, x12, x9);
  let x39: u32 = ((x38 as u32) + x10);
  let mut x40: u32 = 0;
  let mut x41: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x40, &mut x41, x23, 0xd2253531);
  let mut x42: u32 = 0;
  let mut x43: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x42, &mut x43, x40, 0xffffffff);
  let mut x44: u32 = 0;
  let mut x45: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x44, &mut x45, x40, 0xffffffff);
  let mut x46: u32 = 0;
  let mut x47: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x46, &mut x47, x40, 0xffffffff);
  let mut x48: u32 = 0;
  let mut x49: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x48, &mut x49, x40, 0xffffffff);
  let mut x50: u32 = 0;
  let mut x51: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x50, &mut x51, x40, 0xffffffff);
  let mut x52: u32 = 0;
  let mut x53: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x52, &mut x53, x40, 0xffffffff);
  let mut x54: u32 = 0;
  let mut x55: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x54, &mut x55, x40, 0xfffffffe);
  let mut x56: u32 = 0;
  let mut x57: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x56, &mut x57, x40, 0xfffffc2f);
  let mut x58: u32 = 0;
  let mut x59: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x58, &mut x59, 0x0, x57, x54);
  let mut x60: u32 = 0;
  let mut x61: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x60, &mut x61, x59, x55, x52);
  let mut x62: u32 = 0;
  let mut x63: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x62, &mut x63, x61, x53, x50);
  let mut x64: u32 = 0;
  let mut x65: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x64, &mut x65, x63, x51, x48);
  let mut x66: u32 = 0;
  let mut x67: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x66, &mut x67, x65, x49, x46);
  let mut x68: u32 = 0;
  let mut x69: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x68, &mut x69, x67, x47, x44);
  let mut x70: u32 = 0;
  let mut x71: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x70, &mut x71, x69, x45, x42);
  let x72: u32 = ((x71 as u32) + x43);
  let mut x73: u32 = 0;
  let mut x74: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x73, &mut x74, 0x0, x23, x56);
  let mut x75: u32 = 0;
  let mut x76: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x75, &mut x76, x74, x25, x58);
  let mut x77: u32 = 0;
  let mut x78: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x77, &mut x78, x76, x27, x60);
  let mut x79: u32 = 0;
  let mut x80: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x79, &mut x80, x78, x29, x62);
  let mut x81: u32 = 0;
  let mut x82: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x81, &mut x82, x80, x31, x64);
  let mut x83: u32 = 0;
  let mut x84: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x83, &mut x84, x82, x33, x66);
  let mut x85: u32 = 0;
  let mut x86: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x85, &mut x86, x84, x35, x68);
  let mut x87: u32 = 0;
  let mut x88: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x87, &mut x88, x86, x37, x70);
  let mut x89: u32 = 0;
  let mut x90: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x89, &mut x90, x88, x39, x72);
  let mut x91: u32 = 0;
  let mut x92: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x91, &mut x92, x1, (arg1[7]));
  let mut x93: u32 = 0;
  let mut x94: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x93, &mut x94, x1, (arg1[6]));
  let mut x95: u32 = 0;
  let mut x96: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x95, &mut x96, x1, (arg1[5]));
  let mut x97: u32 = 0;
  let mut x98: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x97, &mut x98, x1, (arg1[4]));
  let mut x99: u32 = 0;
  let mut x100: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x99, &mut x100, x1, (arg1[3]));
  let mut x101: u32 = 0;
  let mut x102: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x101, &mut x102, x1, (arg1[2]));
  let mut x103: u32 = 0;
  let mut x104: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x103, &mut x104, x1, (arg1[1]));
  let mut x105: u32 = 0;
  let mut x106: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x105, &mut x106, x1, (arg1[0]));
  let mut x107: u32 = 0;
  let mut x108: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x107, &mut x108, 0x0, x106, x103);
  let mut x109: u32 = 0;
  let mut x110: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x109, &mut x110, x108, x104, x101);
  let mut x111: u32 = 0;
  let mut x112: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x111, &mut x112, x110, x102, x99);
  let mut x113: u32 = 0;
  let mut x114: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x113, &mut x114, x112, x100, x97);
  let mut x115: u32 = 0;
  let mut x116: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x115, &mut x116, x114, x98, x95);
  let mut x117: u32 = 0;
  let mut x118: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x117, &mut x118, x116, x96, x93);
  let mut x119: u32 = 0;
  let mut x120: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x119, &mut x120, x118, x94, x91);
  let x121: u32 = ((x120 as u32) + x92);
  let mut x122: u32 = 0;
  let mut x123: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x122, &mut x123, 0x0, x75, x105);
  let mut x124: u32 = 0;
  let mut x125: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x124, &mut x125, x123, x77, x107);
  let mut x126: u32 = 0;
  let mut x127: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x126, &mut x127, x125, x79, x109);
  let mut x128: u32 = 0;
  let mut x129: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x128, &mut x129, x127, x81, x111);
  let mut x130: u32 = 0;
  let mut x131: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x130, &mut x131, x129, x83, x113);
  let mut x132: u32 = 0;
  let mut x133: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x132, &mut x133, x131, x85, x115);
  let mut x134: u32 = 0;
  let mut x135: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x134, &mut x135, x133, x87, x117);
  let mut x136: u32 = 0;
  let mut x137: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x136, &mut x137, x135, x89, x119);
  let mut x138: u32 = 0;
  let mut x139: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x138, &mut x139, x137, (x90 as u32), x121);
  let mut x140: u32 = 0;
  let mut x141: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x140, &mut x141, x122, 0xd2253531);
  let mut x142: u32 = 0;
  let mut x143: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x142, &mut x143, x140, 0xffffffff);
  let mut x144: u32 = 0;
  let mut x145: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x144, &mut x145, x140, 0xffffffff);
  let mut x146: u32 = 0;
  let mut x147: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x146, &mut x147, x140, 0xffffffff);
  let mut x148: u32 = 0;
  let mut x149: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x148, &mut x149, x140, 0xffffffff);
  let mut x150: u32 = 0;
  let mut x151: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x150, &mut x151, x140, 0xffffffff);
  let mut x152: u32 = 0;
  let mut x153: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x152, &mut x153, x140, 0xffffffff);
  let mut x154: u32 = 0;
  let mut x155: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x154, &mut x155, x140, 0xfffffffe);
  let mut x156: u32 = 0;
  let mut x157: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x156, &mut x157, x140, 0xfffffc2f);
  let mut x158: u32 = 0;
  let mut x159: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x158, &mut x159, 0x0, x157, x154);
  let mut x160: u32 = 0;
  let mut x161: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x160, &mut x161, x159, x155, x152);
  let mut x162: u32 = 0;
  let mut x163: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x162, &mut x163, x161, x153, x150);
  let mut x164: u32 = 0;
  let mut x165: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x164, &mut x165, x163, x151, x148);
  let mut x166: u32 = 0;
  let mut x167: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x166, &mut x167, x165, x149, x146);
  let mut x168: u32 = 0;
  let mut x169: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x168, &mut x169, x167, x147, x144);
  let mut x170: u32 = 0;
  let mut x171: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x170, &mut x171, x169, x145, x142);
  let x172: u32 = ((x171 as u32) + x143);
  let mut x173: u32 = 0;
  let mut x174: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x173, &mut x174, 0x0, x122, x156);
  let mut x175: u32 = 0;
  let mut x176: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x175, &mut x176, x174, x124, x158);
  let mut x177: u32 = 0;
  let mut x178: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x177, &mut x178, x176, x126, x160);
  let mut x179: u32 = 0;
  let mut x180: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x179, &mut x180, x178, x128, x162);
  let mut x181: u32 = 0;
  let mut x182: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x181, &mut x182, x180, x130, x164);
  let mut x183: u32 = 0;
  let mut x184: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x183, &mut x184, x182, x132, x166);
  let mut x185: u32 = 0;
  let mut x186: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x185, &mut x186, x184, x134, x168);
  let mut x187: u32 = 0;
  let mut x188: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x187, &mut x188, x186, x136, x170);
  let mut x189: u32 = 0;
  let mut x190: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x189, &mut x190, x188, x138, x172);
  let x191: u32 = ((x190 as u32) + (x139 as u32));
  let mut x192: u32 = 0;
  let mut x193: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x192, &mut x193, x2, (arg1[7]));
  let mut x194: u32 = 0;
  let mut x195: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x194, &mut x195, x2, (arg1[6]));
  let mut x196: u32 = 0;
  let mut x197: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x196, &mut x197, x2, (arg1[5]));
  let mut x198: u32 = 0;
  let mut x199: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x198, &mut x199, x2, (arg1[4]));
  let mut x200: u32 = 0;
  let mut x201: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x200, &mut x201, x2, (arg1[3]));
  let mut x202: u32 = 0;
  let mut x203: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x202, &mut x203, x2, (arg1[2]));
  let mut x204: u32 = 0;
  let mut x205: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x204, &mut x205, x2, (arg1[1]));
  let mut x206: u32 = 0;
  let mut x207: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x206, &mut x207, x2, (arg1[0]));
  let mut x208: u32 = 0;
  let mut x209: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x208, &mut x209, 0x0, x207, x204);
  let mut x210: u32 = 0;
  let mut x211: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x210, &mut x211, x209, x205, x202);
  let mut x212: u32 = 0;
  let mut x213: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x212, &mut x213, x211, x203, x200);
  let mut x214: u32 = 0;
  let mut x215: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x214, &mut x215, x213, x201, x198);
  let mut x216: u32 = 0;
  let mut x217: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x216, &mut x217, x215, x199, x196);
  let mut x218: u32 = 0;
  let mut x219: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x218, &mut x219, x217, x197, x194);
  let mut x220: u32 = 0;
  let mut x221: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x220, &mut x221, x219, x195, x192);
  let x222: u32 = ((x221 as u32) + x193);
  let mut x223: u32 = 0;
  let mut x224: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x223, &mut x224, 0x0, x175, x206);
  let mut x225: u32 = 0;
  let mut x226: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x225, &mut x226, x224, x177, x208);
  let mut x227: u32 = 0;
  let mut x228: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x227, &mut x228, x226, x179, x210);
  let mut x229: u32 = 0;
  let mut x230: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x229, &mut x230, x228, x181, x212);
  let mut x231: u32 = 0;
  let mut x232: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x231, &mut x232, x230, x183, x214);
  let mut x233: u32 = 0;
  let mut x234: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x233, &mut x234, x232, x185, x216);
  let mut x235: u32 = 0;
  let mut x236: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x235, &mut x236, x234, x187, x218);
  let mut x237: u32 = 0;
  let mut x238: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x237, &mut x238, x236, x189, x220);
  let mut x239: u32 = 0;
  let mut x240: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x239, &mut x240, x238, x191, x222);
  let mut x241: u32 = 0;
  let mut x242: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x241, &mut x242, x223, 0xd2253531);
  let mut x243: u32 = 0;
  let mut x244: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x243, &mut x244, x241, 0xffffffff);
  let mut x245: u32 = 0;
  let mut x246: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x245, &mut x246, x241, 0xffffffff);
  let mut x247: u32 = 0;
  let mut x248: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x247, &mut x248, x241, 0xffffffff);
  let mut x249: u32 = 0;
  let mut x250: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x249, &mut x250, x241, 0xffffffff);
  let mut x251: u32 = 0;
  let mut x252: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x251, &mut x252, x241, 0xffffffff);
  let mut x253: u32 = 0;
  let mut x254: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x253, &mut x254, x241, 0xffffffff);
  let mut x255: u32 = 0;
  let mut x256: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x255, &mut x256, x241, 0xfffffffe);
  let mut x257: u32 = 0;
  let mut x258: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x257, &mut x258, x241, 0xfffffc2f);
  let mut x259: u32 = 0;
  let mut x260: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x259, &mut x260, 0x0, x258, x255);
  let mut x261: u32 = 0;
  let mut x262: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x261, &mut x262, x260, x256, x253);
  let mut x263: u32 = 0;
  let mut x264: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x263, &mut x264, x262, x254, x251);
  let mut x265: u32 = 0;
  let mut x266: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x265, &mut x266, x264, x252, x249);
  let mut x267: u32 = 0;
  let mut x268: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x267, &mut x268, x266, x250, x247);
  let mut x269: u32 = 0;
  let mut x270: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x269, &mut x270, x268, x248, x245);
  let mut x271: u32 = 0;
  let mut x272: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x271, &mut x272, x270, x246, x243);
  let x273: u32 = ((x272 as u32) + x244);
  let mut x274: u32 = 0;
  let mut x275: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x274, &mut x275, 0x0, x223, x257);
  let mut x276: u32 = 0;
  let mut x277: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x276, &mut x277, x275, x225, x259);
  let mut x278: u32 = 0;
  let mut x279: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x278, &mut x279, x277, x227, x261);
  let mut x280: u32 = 0;
  let mut x281: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x280, &mut x281, x279, x229, x263);
  let mut x282: u32 = 0;
  let mut x283: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x282, &mut x283, x281, x231, x265);
  let mut x284: u32 = 0;
  let mut x285: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x284, &mut x285, x283, x233, x267);
  let mut x286: u32 = 0;
  let mut x287: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x286, &mut x287, x285, x235, x269);
  let mut x288: u32 = 0;
  let mut x289: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x288, &mut x289, x287, x237, x271);
  let mut x290: u32 = 0;
  let mut x291: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x290, &mut x291, x289, x239, x273);
  let x292: u32 = ((x291 as u32) + (x240 as u32));
  let mut x293: u32 = 0;
  let mut x294: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x293, &mut x294, x3, (arg1[7]));
  let mut x295: u32 = 0;
  let mut x296: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x295, &mut x296, x3, (arg1[6]));
  let mut x297: u32 = 0;
  let mut x298: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x297, &mut x298, x3, (arg1[5]));
  let mut x299: u32 = 0;
  let mut x300: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x299, &mut x300, x3, (arg1[4]));
  let mut x301: u32 = 0;
  let mut x302: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x301, &mut x302, x3, (arg1[3]));
  let mut x303: u32 = 0;
  let mut x304: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x303, &mut x304, x3, (arg1[2]));
  let mut x305: u32 = 0;
  let mut x306: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x305, &mut x306, x3, (arg1[1]));
  let mut x307: u32 = 0;
  let mut x308: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x307, &mut x308, x3, (arg1[0]));
  let mut x309: u32 = 0;
  let mut x310: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x309, &mut x310, 0x0, x308, x305);
  let mut x311: u32 = 0;
  let mut x312: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x311, &mut x312, x310, x306, x303);
  let mut x313: u32 = 0;
  let mut x314: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x313, &mut x314, x312, x304, x301);
  let mut x315: u32 = 0;
  let mut x316: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x315, &mut x316, x314, x302, x299);
  let mut x317: u32 = 0;
  let mut x318: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x317, &mut x318, x316, x300, x297);
  let mut x319: u32 = 0;
  let mut x320: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x319, &mut x320, x318, x298, x295);
  let mut x321: u32 = 0;
  let mut x322: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x321, &mut x322, x320, x296, x293);
  let x323: u32 = ((x322 as u32) + x294);
  let mut x324: u32 = 0;
  let mut x325: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x324, &mut x325, 0x0, x276, x307);
  let mut x326: u32 = 0;
  let mut x327: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x326, &mut x327, x325, x278, x309);
  let mut x328: u32 = 0;
  let mut x329: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x328, &mut x329, x327, x280, x311);
  let mut x330: u32 = 0;
  let mut x331: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x330, &mut x331, x329, x282, x313);
  let mut x332: u32 = 0;
  let mut x333: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x332, &mut x333, x331, x284, x315);
  let mut x334: u32 = 0;
  let mut x335: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x334, &mut x335, x333, x286, x317);
  let mut x336: u32 = 0;
  let mut x337: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x336, &mut x337, x335, x288, x319);
  let mut x338: u32 = 0;
  let mut x339: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x338, &mut x339, x337, x290, x321);
  let mut x340: u32 = 0;
  let mut x341: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x340, &mut x341, x339, x292, x323);
  let mut x342: u32 = 0;
  let mut x343: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x342, &mut x343, x324, 0xd2253531);
  let mut x344: u32 = 0;
  let mut x345: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x344, &mut x345, x342, 0xffffffff);
  let mut x346: u32 = 0;
  let mut x347: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x346, &mut x347, x342, 0xffffffff);
  let mut x348: u32 = 0;
  let mut x349: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x348, &mut x349, x342, 0xffffffff);
  let mut x350: u32 = 0;
  let mut x351: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x350, &mut x351, x342, 0xffffffff);
  let mut x352: u32 = 0;
  let mut x353: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x352, &mut x353, x342, 0xffffffff);
  let mut x354: u32 = 0;
  let mut x355: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x354, &mut x355, x342, 0xffffffff);
  let mut x356: u32 = 0;
  let mut x357: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x356, &mut x357, x342, 0xfffffffe);
  let mut x358: u32 = 0;
  let mut x359: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x358, &mut x359, x342, 0xfffffc2f);
  let mut x360: u32 = 0;
  let mut x361: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x360, &mut x361, 0x0, x359, x356);
  let mut x362: u32 = 0;
  let mut x363: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x362, &mut x363, x361, x357, x354);
  let mut x364: u32 = 0;
  let mut x365: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x364, &mut x365, x363, x355, x352);
  let mut x366: u32 = 0;
  let mut x367: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x366, &mut x367, x365, x353, x350);
  let mut x368: u32 = 0;
  let mut x369: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x368, &mut x369, x367, x351, x348);
  let mut x370: u32 = 0;
  let mut x371: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x370, &mut x371, x369, x349, x346);
  let mut x372: u32 = 0;
  let mut x373: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x372, &mut x373, x371, x347, x344);
  let x374: u32 = ((x373 as u32) + x345);
  let mut x375: u32 = 0;
  let mut x376: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x375, &mut x376, 0x0, x324, x358);
  let mut x377: u32 = 0;
  let mut x378: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x377, &mut x378, x376, x326, x360);
  let mut x379: u32 = 0;
  let mut x380: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x379, &mut x380, x378, x328, x362);
  let mut x381: u32 = 0;
  let mut x382: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x381, &mut x382, x380, x330, x364);
  let mut x383: u32 = 0;
  let mut x384: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x383, &mut x384, x382, x332, x366);
  let mut x385: u32 = 0;
  let mut x386: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x385, &mut x386, x384, x334, x368);
  let mut x387: u32 = 0;
  let mut x388: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x387, &mut x388, x386, x336, x370);
  let mut x389: u32 = 0;
  let mut x390: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x389, &mut x390, x388, x338, x372);
  let mut x391: u32 = 0;
  let mut x392: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x391, &mut x392, x390, x340, x374);
  let x393: u32 = ((x392 as u32) + (x341 as u32));
  let mut x394: u32 = 0;
  let mut x395: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x394, &mut x395, x4, (arg1[7]));
  let mut x396: u32 = 0;
  let mut x397: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x396, &mut x397, x4, (arg1[6]));
  let mut x398: u32 = 0;
  let mut x399: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x398, &mut x399, x4, (arg1[5]));
  let mut x400: u32 = 0;
  let mut x401: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x400, &mut x401, x4, (arg1[4]));
  let mut x402: u32 = 0;
  let mut x403: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x402, &mut x403, x4, (arg1[3]));
  let mut x404: u32 = 0;
  let mut x405: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x404, &mut x405, x4, (arg1[2]));
  let mut x406: u32 = 0;
  let mut x407: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x406, &mut x407, x4, (arg1[1]));
  let mut x408: u32 = 0;
  let mut x409: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x408, &mut x409, x4, (arg1[0]));
  let mut x410: u32 = 0;
  let mut x411: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x410, &mut x411, 0x0, x409, x406);
  let mut x412: u32 = 0;
  let mut x413: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x412, &mut x413, x411, x407, x404);
  let mut x414: u32 = 0;
  let mut x415: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x414, &mut x415, x413, x405, x402);
  let mut x416: u32 = 0;
  let mut x417: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x416, &mut x417, x415, x403, x400);
  let mut x418: u32 = 0;
  let mut x419: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x418, &mut x419, x417, x401, x398);
  let mut x420: u32 = 0;
  let mut x421: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x420, &mut x421, x419, x399, x396);
  let mut x422: u32 = 0;
  let mut x423: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x422, &mut x423, x421, x397, x394);
  let x424: u32 = ((x423 as u32) + x395);
  let mut x425: u32 = 0;
  let mut x426: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x425, &mut x426, 0x0, x377, x408);
  let mut x427: u32 = 0;
  let mut x428: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x427, &mut x428, x426, x379, x410);
  let mut x429: u32 = 0;
  let mut x430: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x429, &mut x430, x428, x381, x412);
  let mut x431: u32 = 0;
  let mut x432: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x431, &mut x432, x430, x383, x414);
  let mut x433: u32 = 0;
  let mut x434: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x433, &mut x434, x432, x385, x416);
  let mut x435: u32 = 0;
  let mut x436: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x435, &mut x436, x434, x387, x418);
  let mut x437: u32 = 0;
  let mut x438: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x437, &mut x438, x436, x389, x420);
  let mut x439: u32 = 0;
  let mut x440: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x439, &mut x440, x438, x391, x422);
  let mut x441: u32 = 0;
  let mut x442: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x441, &mut x442, x440, x393, x424);
  let mut x443: u32 = 0;
  let mut x444: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x443, &mut x444, x425, 0xd2253531);
  let mut x445: u32 = 0;
  let mut x446: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x445, &mut x446, x443, 0xffffffff);
  let mut x447: u32 = 0;
  let mut x448: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x447, &mut x448, x443, 0xffffffff);
  let mut x449: u32 = 0;
  let mut x450: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x449, &mut x450, x443, 0xffffffff);
  let mut x451: u32 = 0;
  let mut x452: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x451, &mut x452, x443, 0xffffffff);
  let mut x453: u32 = 0;
  let mut x454: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x453, &mut x454, x443, 0xffffffff);
  let mut x455: u32 = 0;
  let mut x456: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x455, &mut x456, x443, 0xffffffff);
  let mut x457: u32 = 0;
  let mut x458: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x457, &mut x458, x443, 0xfffffffe);
  let mut x459: u32 = 0;
  let mut x460: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x459, &mut x460, x443, 0xfffffc2f);
  let mut x461: u32 = 0;
  let mut x462: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x461, &mut x462, 0x0, x460, x457);
  let mut x463: u32 = 0;
  let mut x464: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x463, &mut x464, x462, x458, x455);
  let mut x465: u32 = 0;
  let mut x466: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x465, &mut x466, x464, x456, x453);
  let mut x467: u32 = 0;
  let mut x468: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x467, &mut x468, x466, x454, x451);
  let mut x469: u32 = 0;
  let mut x470: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x469, &mut x470, x468, x452, x449);
  let mut x471: u32 = 0;
  let mut x472: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x471, &mut x472, x470, x450, x447);
  let mut x473: u32 = 0;
  let mut x474: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x473, &mut x474, x472, x448, x445);
  let x475: u32 = ((x474 as u32) + x446);
  let mut x476: u32 = 0;
  let mut x477: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x476, &mut x477, 0x0, x425, x459);
  let mut x478: u32 = 0;
  let mut x479: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x478, &mut x479, x477, x427, x461);
  let mut x480: u32 = 0;
  let mut x481: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x480, &mut x481, x479, x429, x463);
  let mut x482: u32 = 0;
  let mut x483: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x482, &mut x483, x481, x431, x465);
  let mut x484: u32 = 0;
  let mut x485: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x484, &mut x485, x483, x433, x467);
  let mut x486: u32 = 0;
  let mut x487: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x486, &mut x487, x485, x435, x469);
  let mut x488: u32 = 0;
  let mut x489: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x488, &mut x489, x487, x437, x471);
  let mut x490: u32 = 0;
  let mut x491: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x490, &mut x491, x489, x439, x473);
  let mut x492: u32 = 0;
  let mut x493: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x492, &mut x493, x491, x441, x475);
  let x494: u32 = ((x493 as u32) + (x442 as u32));
  let mut x495: u32 = 0;
  let mut x496: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x495, &mut x496, x5, (arg1[7]));
  let mut x497: u32 = 0;
  let mut x498: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x497, &mut x498, x5, (arg1[6]));
  let mut x499: u32 = 0;
  let mut x500: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x499, &mut x500, x5, (arg1[5]));
  let mut x501: u32 = 0;
  let mut x502: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x501, &mut x502, x5, (arg1[4]));
  let mut x503: u32 = 0;
  let mut x504: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x503, &mut x504, x5, (arg1[3]));
  let mut x505: u32 = 0;
  let mut x506: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x505, &mut x506, x5, (arg1[2]));
  let mut x507: u32 = 0;
  let mut x508: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x507, &mut x508, x5, (arg1[1]));
  let mut x509: u32 = 0;
  let mut x510: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x509, &mut x510, x5, (arg1[0]));
  let mut x511: u32 = 0;
  let mut x512: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x511, &mut x512, 0x0, x510, x507);
  let mut x513: u32 = 0;
  let mut x514: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x513, &mut x514, x512, x508, x505);
  let mut x515: u32 = 0;
  let mut x516: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x515, &mut x516, x514, x506, x503);
  let mut x517: u32 = 0;
  let mut x518: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x517, &mut x518, x516, x504, x501);
  let mut x519: u32 = 0;
  let mut x520: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x519, &mut x520, x518, x502, x499);
  let mut x521: u32 = 0;
  let mut x522: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x521, &mut x522, x520, x500, x497);
  let mut x523: u32 = 0;
  let mut x524: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x523, &mut x524, x522, x498, x495);
  let x525: u32 = ((x524 as u32) + x496);
  let mut x526: u32 = 0;
  let mut x527: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x526, &mut x527, 0x0, x478, x509);
  let mut x528: u32 = 0;
  let mut x529: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x528, &mut x529, x527, x480, x511);
  let mut x530: u32 = 0;
  let mut x531: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x530, &mut x531, x529, x482, x513);
  let mut x532: u32 = 0;
  let mut x533: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x532, &mut x533, x531, x484, x515);
  let mut x534: u32 = 0;
  let mut x535: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x534, &mut x535, x533, x486, x517);
  let mut x536: u32 = 0;
  let mut x537: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x536, &mut x537, x535, x488, x519);
  let mut x538: u32 = 0;
  let mut x539: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x538, &mut x539, x537, x490, x521);
  let mut x540: u32 = 0;
  let mut x541: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x540, &mut x541, x539, x492, x523);
  let mut x542: u32 = 0;
  let mut x543: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x542, &mut x543, x541, x494, x525);
  let mut x544: u32 = 0;
  let mut x545: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x544, &mut x545, x526, 0xd2253531);
  let mut x546: u32 = 0;
  let mut x547: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x546, &mut x547, x544, 0xffffffff);
  let mut x548: u32 = 0;
  let mut x549: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x548, &mut x549, x544, 0xffffffff);
  let mut x550: u32 = 0;
  let mut x551: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x550, &mut x551, x544, 0xffffffff);
  let mut x552: u32 = 0;
  let mut x553: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x552, &mut x553, x544, 0xffffffff);
  let mut x554: u32 = 0;
  let mut x555: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x554, &mut x555, x544, 0xffffffff);
  let mut x556: u32 = 0;
  let mut x557: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x556, &mut x557, x544, 0xffffffff);
  let mut x558: u32 = 0;
  let mut x559: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x558, &mut x559, x544, 0xfffffffe);
  let mut x560: u32 = 0;
  let mut x561: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x560, &mut x561, x544, 0xfffffc2f);
  let mut x562: u32 = 0;
  let mut x563: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x562, &mut x563, 0x0, x561, x558);
  let mut x564: u32 = 0;
  let mut x565: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x564, &mut x565, x563, x559, x556);
  let mut x566: u32 = 0;
  let mut x567: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x566, &mut x567, x565, x557, x554);
  let mut x568: u32 = 0;
  let mut x569: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x568, &mut x569, x567, x555, x552);
  let mut x570: u32 = 0;
  let mut x571: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x570, &mut x571, x569, x553, x550);
  let mut x572: u32 = 0;
  let mut x573: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x572, &mut x573, x571, x551, x548);
  let mut x574: u32 = 0;
  let mut x575: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x574, &mut x575, x573, x549, x546);
  let x576: u32 = ((x575 as u32) + x547);
  let mut x577: u32 = 0;
  let mut x578: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x577, &mut x578, 0x0, x526, x560);
  let mut x579: u32 = 0;
  let mut x580: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x579, &mut x580, x578, x528, x562);
  let mut x581: u32 = 0;
  let mut x582: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x581, &mut x582, x580, x530, x564);
  let mut x583: u32 = 0;
  let mut x584: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x583, &mut x584, x582, x532, x566);
  let mut x585: u32 = 0;
  let mut x586: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x585, &mut x586, x584, x534, x568);
  let mut x587: u32 = 0;
  let mut x588: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x587, &mut x588, x586, x536, x570);
  let mut x589: u32 = 0;
  let mut x590: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x589, &mut x590, x588, x538, x572);
  let mut x591: u32 = 0;
  let mut x592: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x591, &mut x592, x590, x540, x574);
  let mut x593: u32 = 0;
  let mut x594: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x593, &mut x594, x592, x542, x576);
  let x595: u32 = ((x594 as u32) + (x543 as u32));
  let mut x596: u32 = 0;
  let mut x597: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x596, &mut x597, x6, (arg1[7]));
  let mut x598: u32 = 0;
  let mut x599: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x598, &mut x599, x6, (arg1[6]));
  let mut x600: u32 = 0;
  let mut x601: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x600, &mut x601, x6, (arg1[5]));
  let mut x602: u32 = 0;
  let mut x603: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x602, &mut x603, x6, (arg1[4]));
  let mut x604: u32 = 0;
  let mut x605: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x604, &mut x605, x6, (arg1[3]));
  let mut x606: u32 = 0;
  let mut x607: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x606, &mut x607, x6, (arg1[2]));
  let mut x608: u32 = 0;
  let mut x609: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x608, &mut x609, x6, (arg1[1]));
  let mut x610: u32 = 0;
  let mut x611: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x610, &mut x611, x6, (arg1[0]));
  let mut x612: u32 = 0;
  let mut x613: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x612, &mut x613, 0x0, x611, x608);
  let mut x614: u32 = 0;
  let mut x615: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x614, &mut x615, x613, x609, x606);
  let mut x616: u32 = 0;
  let mut x617: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x616, &mut x617, x615, x607, x604);
  let mut x618: u32 = 0;
  let mut x619: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x618, &mut x619, x617, x605, x602);
  let mut x620: u32 = 0;
  let mut x621: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x620, &mut x621, x619, x603, x600);
  let mut x622: u32 = 0;
  let mut x623: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x622, &mut x623, x621, x601, x598);
  let mut x624: u32 = 0;
  let mut x625: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x624, &mut x625, x623, x599, x596);
  let x626: u32 = ((x625 as u32) + x597);
  let mut x627: u32 = 0;
  let mut x628: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x627, &mut x628, 0x0, x579, x610);
  let mut x629: u32 = 0;
  let mut x630: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x629, &mut x630, x628, x581, x612);
  let mut x631: u32 = 0;
  let mut x632: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x631, &mut x632, x630, x583, x614);
  let mut x633: u32 = 0;
  let mut x634: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x633, &mut x634, x632, x585, x616);
  let mut x635: u32 = 0;
  let mut x636: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x635, &mut x636, x634, x587, x618);
  let mut x637: u32 = 0;
  let mut x638: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x637, &mut x638, x636, x589, x620);
  let mut x639: u32 = 0;
  let mut x640: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x639, &mut x640, x638, x591, x622);
  let mut x641: u32 = 0;
  let mut x642: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x641, &mut x642, x640, x593, x624);
  let mut x643: u32 = 0;
  let mut x644: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x643, &mut x644, x642, x595, x626);
  let mut x645: u32 = 0;
  let mut x646: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x645, &mut x646, x627, 0xd2253531);
  let mut x647: u32 = 0;
  let mut x648: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x647, &mut x648, x645, 0xffffffff);
  let mut x649: u32 = 0;
  let mut x650: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x649, &mut x650, x645, 0xffffffff);
  let mut x651: u32 = 0;
  let mut x652: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x651, &mut x652, x645, 0xffffffff);
  let mut x653: u32 = 0;
  let mut x654: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x653, &mut x654, x645, 0xffffffff);
  let mut x655: u32 = 0;
  let mut x656: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x655, &mut x656, x645, 0xffffffff);
  let mut x657: u32 = 0;
  let mut x658: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x657, &mut x658, x645, 0xffffffff);
  let mut x659: u32 = 0;
  let mut x660: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x659, &mut x660, x645, 0xfffffffe);
  let mut x661: u32 = 0;
  let mut x662: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x661, &mut x662, x645, 0xfffffc2f);
  let mut x663: u32 = 0;
  let mut x664: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x663, &mut x664, 0x0, x662, x659);
  let mut x665: u32 = 0;
  let mut x666: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x665, &mut x666, x664, x660, x657);
  let mut x667: u32 = 0;
  let mut x668: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x667, &mut x668, x666, x658, x655);
  let mut x669: u32 = 0;
  let mut x670: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x669, &mut x670, x668, x656, x653);
  let mut x671: u32 = 0;
  let mut x672: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x671, &mut x672, x670, x654, x651);
  let mut x673: u32 = 0;
  let mut x674: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x673, &mut x674, x672, x652, x649);
  let mut x675: u32 = 0;
  let mut x676: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x675, &mut x676, x674, x650, x647);
  let x677: u32 = ((x676 as u32) + x648);
  let mut x678: u32 = 0;
  let mut x679: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x678, &mut x679, 0x0, x627, x661);
  let mut x680: u32 = 0;
  let mut x681: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x680, &mut x681, x679, x629, x663);
  let mut x682: u32 = 0;
  let mut x683: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x682, &mut x683, x681, x631, x665);
  let mut x684: u32 = 0;
  let mut x685: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x684, &mut x685, x683, x633, x667);
  let mut x686: u32 = 0;
  let mut x687: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x686, &mut x687, x685, x635, x669);
  let mut x688: u32 = 0;
  let mut x689: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x688, &mut x689, x687, x637, x671);
  let mut x690: u32 = 0;
  let mut x691: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x690, &mut x691, x689, x639, x673);
  let mut x692: u32 = 0;
  let mut x693: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x692, &mut x693, x691, x641, x675);
  let mut x694: u32 = 0;
  let mut x695: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x694, &mut x695, x693, x643, x677);
  let x696: u32 = ((x695 as u32) + (x644 as u32));
  let mut x697: u32 = 0;
  let mut x698: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x697, &mut x698, x7, (arg1[7]));
  let mut x699: u32 = 0;
  let mut x700: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x699, &mut x700, x7, (arg1[6]));
  let mut x701: u32 = 0;
  let mut x702: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x701, &mut x702, x7, (arg1[5]));
  let mut x703: u32 = 0;
  let mut x704: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x703, &mut x704, x7, (arg1[4]));
  let mut x705: u32 = 0;
  let mut x706: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x705, &mut x706, x7, (arg1[3]));
  let mut x707: u32 = 0;
  let mut x708: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x707, &mut x708, x7, (arg1[2]));
  let mut x709: u32 = 0;
  let mut x710: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x709, &mut x710, x7, (arg1[1]));
  let mut x711: u32 = 0;
  let mut x712: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x711, &mut x712, x7, (arg1[0]));
  let mut x713: u32 = 0;
  let mut x714: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x713, &mut x714, 0x0, x712, x709);
  let mut x715: u32 = 0;
  let mut x716: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x715, &mut x716, x714, x710, x707);
  let mut x717: u32 = 0;
  let mut x718: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x717, &mut x718, x716, x708, x705);
  let mut x719: u32 = 0;
  let mut x720: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x719, &mut x720, x718, x706, x703);
  let mut x721: u32 = 0;
  let mut x722: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x721, &mut x722, x720, x704, x701);
  let mut x723: u32 = 0;
  let mut x724: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x723, &mut x724, x722, x702, x699);
  let mut x725: u32 = 0;
  let mut x726: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x725, &mut x726, x724, x700, x697);
  let x727: u32 = ((x726 as u32) + x698);
  let mut x728: u32 = 0;
  let mut x729: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x728, &mut x729, 0x0, x680, x711);
  let mut x730: u32 = 0;
  let mut x731: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x730, &mut x731, x729, x682, x713);
  let mut x732: u32 = 0;
  let mut x733: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x732, &mut x733, x731, x684, x715);
  let mut x734: u32 = 0;
  let mut x735: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x734, &mut x735, x733, x686, x717);
  let mut x736: u32 = 0;
  let mut x737: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x736, &mut x737, x735, x688, x719);
  let mut x738: u32 = 0;
  let mut x739: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x738, &mut x739, x737, x690, x721);
  let mut x740: u32 = 0;
  let mut x741: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x740, &mut x741, x739, x692, x723);
  let mut x742: u32 = 0;
  let mut x743: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x742, &mut x743, x741, x694, x725);
  let mut x744: u32 = 0;
  let mut x745: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x744, &mut x745, x743, x696, x727);
  let mut x746: u32 = 0;
  let mut x747: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x746, &mut x747, x728, 0xd2253531);
  let mut x748: u32 = 0;
  let mut x749: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x748, &mut x749, x746, 0xffffffff);
  let mut x750: u32 = 0;
  let mut x751: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x750, &mut x751, x746, 0xffffffff);
  let mut x752: u32 = 0;
  let mut x753: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x752, &mut x753, x746, 0xffffffff);
  let mut x754: u32 = 0;
  let mut x755: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x754, &mut x755, x746, 0xffffffff);
  let mut x756: u32 = 0;
  let mut x757: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x756, &mut x757, x746, 0xffffffff);
  let mut x758: u32 = 0;
  let mut x759: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x758, &mut x759, x746, 0xffffffff);
  let mut x760: u32 = 0;
  let mut x761: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x760, &mut x761, x746, 0xfffffffe);
  let mut x762: u32 = 0;
  let mut x763: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x762, &mut x763, x746, 0xfffffc2f);
  let mut x764: u32 = 0;
  let mut x765: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x764, &mut x765, 0x0, x763, x760);
  let mut x766: u32 = 0;
  let mut x767: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x766, &mut x767, x765, x761, x758);
  let mut x768: u32 = 0;
  let mut x769: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x768, &mut x769, x767, x759, x756);
  let mut x770: u32 = 0;
  let mut x771: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x770, &mut x771, x769, x757, x754);
  let mut x772: u32 = 0;
  let mut x773: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x772, &mut x773, x771, x755, x752);
  let mut x774: u32 = 0;
  let mut x775: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x774, &mut x775, x773, x753, x750);
  let mut x776: u32 = 0;
  let mut x777: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x776, &mut x777, x775, x751, x748);
  let x778: u32 = ((x777 as u32) + x749);
  let mut x779: u32 = 0;
  let mut x780: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x779, &mut x780, 0x0, x728, x762);
  let mut x781: u32 = 0;
  let mut x782: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x781, &mut x782, x780, x730, x764);
  let mut x783: u32 = 0;
  let mut x784: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x783, &mut x784, x782, x732, x766);
  let mut x785: u32 = 0;
  let mut x786: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x785, &mut x786, x784, x734, x768);
  let mut x787: u32 = 0;
  let mut x788: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x787, &mut x788, x786, x736, x770);
  let mut x789: u32 = 0;
  let mut x790: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x789, &mut x790, x788, x738, x772);
  let mut x791: u32 = 0;
  let mut x792: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x791, &mut x792, x790, x740, x774);
  let mut x793: u32 = 0;
  let mut x794: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x793, &mut x794, x792, x742, x776);
  let mut x795: u32 = 0;
  let mut x796: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x795, &mut x796, x794, x744, x778);
  let x797: u32 = ((x796 as u32) + (x745 as u32));
  let mut x798: u32 = 0;
  let mut x799: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x798, &mut x799, 0x0, x781, 0xfffffc2f);
  let mut x800: u32 = 0;
  let mut x801: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x800, &mut x801, x799, x783, 0xfffffffe);
  let mut x802: u32 = 0;
  let mut x803: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x802, &mut x803, x801, x785, 0xffffffff);
  let mut x804: u32 = 0;
  let mut x805: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x804, &mut x805, x803, x787, 0xffffffff);
  let mut x806: u32 = 0;
  let mut x807: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x806, &mut x807, x805, x789, 0xffffffff);
  let mut x808: u32 = 0;
  let mut x809: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x808, &mut x809, x807, x791, 0xffffffff);
  let mut x810: u32 = 0;
  let mut x811: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x810, &mut x811, x809, x793, 0xffffffff);
  let mut x812: u32 = 0;
  let mut x813: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x812, &mut x813, x811, x795, 0xffffffff);
  let mut x814: u32 = 0;
  let mut x815: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x814, &mut x815, x813, x797, (0x0 as u32));
  let mut x816: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x816, x815, x798, x781);
  let mut x817: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x817, x815, x800, x783);
  let mut x818: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x818, x815, x802, x785);
  let mut x819: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x819, x815, x804, x787);
  let mut x820: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x820, x815, x806, x789);
  let mut x821: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x821, x815, x808, x791);
  let mut x822: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x822, x815, x810, x793);
  let mut x823: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x823, x815, x812, x795);
  out1[0] = x816;
  out1[1] = x817;
  out1[2] = x818;
  out1[3] = x819;
  out1[4] = x820;
  out1[5] = x821;
  out1[6] = x822;
  out1[7] = x823;
}

/*
 * The function fiat_secp256k1_add adds two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 *   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
#[inline]
pub fn fiat_secp256k1_add(out1: &mut [u32; 8], arg1: &[u32; 8], arg2: &[u32; 8]) -> () {
  let mut x1: u32 = 0;
  let mut x2: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1, &mut x2, 0x0, (arg1[0]), (arg2[0]));
  let mut x3: u32 = 0;
  let mut x4: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3, &mut x4, x2, (arg1[1]), (arg2[1]));
  let mut x5: u32 = 0;
  let mut x6: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x5, &mut x6, x4, (arg1[2]), (arg2[2]));
  let mut x7: u32 = 0;
  let mut x8: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x7, &mut x8, x6, (arg1[3]), (arg2[3]));
  let mut x9: u32 = 0;
  let mut x10: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x9, &mut x10, x8, (arg1[4]), (arg2[4]));
  let mut x11: u32 = 0;
  let mut x12: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x11, &mut x12, x10, (arg1[5]), (arg2[5]));
  let mut x13: u32 = 0;
  let mut x14: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x13, &mut x14, x12, (arg1[6]), (arg2[6]));
  let mut x15: u32 = 0;
  let mut x16: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x15, &mut x16, x14, (arg1[7]), (arg2[7]));
  let mut x17: u32 = 0;
  let mut x18: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x17, &mut x18, 0x0, x1, 0xfffffc2f);
  let mut x19: u32 = 0;
  let mut x20: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x19, &mut x20, x18, x3, 0xfffffffe);
  let mut x21: u32 = 0;
  let mut x22: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x21, &mut x22, x20, x5, 0xffffffff);
  let mut x23: u32 = 0;
  let mut x24: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x23, &mut x24, x22, x7, 0xffffffff);
  let mut x25: u32 = 0;
  let mut x26: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x25, &mut x26, x24, x9, 0xffffffff);
  let mut x27: u32 = 0;
  let mut x28: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x27, &mut x28, x26, x11, 0xffffffff);
  let mut x29: u32 = 0;
  let mut x30: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x29, &mut x30, x28, x13, 0xffffffff);
  let mut x31: u32 = 0;
  let mut x32: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x31, &mut x32, x30, x15, 0xffffffff);
  let mut x33: u32 = 0;
  let mut x34: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x33, &mut x34, x32, (x16 as u32), (0x0 as u32));
  let mut x35: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x35, x34, x17, x1);
  let mut x36: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x36, x34, x19, x3);
  let mut x37: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x37, x34, x21, x5);
  let mut x38: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x38, x34, x23, x7);
  let mut x39: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x39, x34, x25, x9);
  let mut x40: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x40, x34, x27, x11);
  let mut x41: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x41, x34, x29, x13);
  let mut x42: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x42, x34, x31, x15);
  out1[0] = x35;
  out1[1] = x36;
  out1[2] = x37;
  out1[3] = x38;
  out1[4] = x39;
  out1[5] = x40;
  out1[6] = x41;
  out1[7] = x42;
}

/*
 * The function fiat_secp256k1_sub subtracts two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 *   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
#[inline]
pub fn fiat_secp256k1_sub(out1: &mut [u32; 8], arg1: &[u32; 8], arg2: &[u32; 8]) -> () {
  let mut x1: u32 = 0;
  let mut x2: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x1, &mut x2, 0x0, (arg1[0]), (arg2[0]));
  let mut x3: u32 = 0;
  let mut x4: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3, &mut x4, x2, (arg1[1]), (arg2[1]));
  let mut x5: u32 = 0;
  let mut x6: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x5, &mut x6, x4, (arg1[2]), (arg2[2]));
  let mut x7: u32 = 0;
  let mut x8: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x7, &mut x8, x6, (arg1[3]), (arg2[3]));
  let mut x9: u32 = 0;
  let mut x10: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x9, &mut x10, x8, (arg1[4]), (arg2[4]));
  let mut x11: u32 = 0;
  let mut x12: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x11, &mut x12, x10, (arg1[5]), (arg2[5]));
  let mut x13: u32 = 0;
  let mut x14: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x13, &mut x14, x12, (arg1[6]), (arg2[6]));
  let mut x15: u32 = 0;
  let mut x16: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x15, &mut x16, x14, (arg1[7]), (arg2[7]));
  let mut x17: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x17, x16, (0x0 as u32), 0xffffffff);
  let mut x18: u32 = 0;
  let mut x19: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x18, &mut x19, 0x0, x1, (x17 & 0xfffffc2f));
  let mut x20: u32 = 0;
  let mut x21: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x20, &mut x21, x19, x3, (x17 & 0xfffffffe));
  let mut x22: u32 = 0;
  let mut x23: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x22, &mut x23, x21, x5, (x17 & 0xffffffff));
  let mut x24: u32 = 0;
  let mut x25: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x24, &mut x25, x23, x7, (x17 & 0xffffffff));
  let mut x26: u32 = 0;
  let mut x27: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x26, &mut x27, x25, x9, (x17 & 0xffffffff));
  let mut x28: u32 = 0;
  let mut x29: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x28, &mut x29, x27, x11, (x17 & 0xffffffff));
  let mut x30: u32 = 0;
  let mut x31: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x30, &mut x31, x29, x13, (x17 & 0xffffffff));
  let mut x32: u32 = 0;
  let mut x33: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x32, &mut x33, x31, x15, (x17 & 0xffffffff));
  out1[0] = x18;
  out1[1] = x20;
  out1[2] = x22;
  out1[3] = x24;
  out1[4] = x26;
  out1[5] = x28;
  out1[6] = x30;
  out1[7] = x32;
}

/*
 * The function fiat_secp256k1_opp negates a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
#[inline]
pub fn fiat_secp256k1_opp(out1: &mut [u32; 8], arg1: &[u32; 8]) -> () {
  let mut x1: u32 = 0;
  let mut x2: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x1, &mut x2, 0x0, (0x0 as u32), (arg1[0]));
  let mut x3: u32 = 0;
  let mut x4: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3, &mut x4, x2, (0x0 as u32), (arg1[1]));
  let mut x5: u32 = 0;
  let mut x6: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x5, &mut x6, x4, (0x0 as u32), (arg1[2]));
  let mut x7: u32 = 0;
  let mut x8: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x7, &mut x8, x6, (0x0 as u32), (arg1[3]));
  let mut x9: u32 = 0;
  let mut x10: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x9, &mut x10, x8, (0x0 as u32), (arg1[4]));
  let mut x11: u32 = 0;
  let mut x12: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x11, &mut x12, x10, (0x0 as u32), (arg1[5]));
  let mut x13: u32 = 0;
  let mut x14: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x13, &mut x14, x12, (0x0 as u32), (arg1[6]));
  let mut x15: u32 = 0;
  let mut x16: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x15, &mut x16, x14, (0x0 as u32), (arg1[7]));
  let mut x17: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x17, x16, (0x0 as u32), 0xffffffff);
  let mut x18: u32 = 0;
  let mut x19: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x18, &mut x19, 0x0, x1, (x17 & 0xfffffc2f));
  let mut x20: u32 = 0;
  let mut x21: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x20, &mut x21, x19, x3, (x17 & 0xfffffffe));
  let mut x22: u32 = 0;
  let mut x23: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x22, &mut x23, x21, x5, (x17 & 0xffffffff));
  let mut x24: u32 = 0;
  let mut x25: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x24, &mut x25, x23, x7, (x17 & 0xffffffff));
  let mut x26: u32 = 0;
  let mut x27: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x26, &mut x27, x25, x9, (x17 & 0xffffffff));
  let mut x28: u32 = 0;
  let mut x29: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x28, &mut x29, x27, x11, (x17 & 0xffffffff));
  let mut x30: u32 = 0;
  let mut x31: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x30, &mut x31, x29, x13, (x17 & 0xffffffff));
  let mut x32: u32 = 0;
  let mut x33: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x32, &mut x33, x31, x15, (x17 & 0xffffffff));
  out1[0] = x18;
  out1[1] = x20;
  out1[2] = x22;
  out1[3] = x24;
  out1[4] = x26;
  out1[5] = x28;
  out1[6] = x30;
  out1[7] = x32;
}

/*
 * The function fiat_secp256k1_from_montgomery translates a field element out of the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = (eval arg1 * ((2^32)⁻¹ mod m)^8) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
#[inline]
pub fn fiat_secp256k1_from_montgomery(out1: &mut [u32; 8], arg1: &[u32; 8]) -> () {
  let x1: u32 = (arg1[0]);
  let mut x2: u32 = 0;
  let mut x3: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2, &mut x3, x1, 0xd2253531);
  let mut x4: u32 = 0;
  let mut x5: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x4, &mut x5, x2, 0xffffffff);
  let mut x6: u32 = 0;
  let mut x7: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x6, &mut x7, x2, 0xffffffff);
  let mut x8: u32 = 0;
  let mut x9: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x8, &mut x9, x2, 0xffffffff);
  let mut x10: u32 = 0;
  let mut x11: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x10, &mut x11, x2, 0xffffffff);
  let mut x12: u32 = 0;
  let mut x13: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x12, &mut x13, x2, 0xffffffff);
  let mut x14: u32 = 0;
  let mut x15: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x14, &mut x15, x2, 0xffffffff);
  let mut x16: u32 = 0;
  let mut x17: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x16, &mut x17, x2, 0xfffffffe);
  let mut x18: u32 = 0;
  let mut x19: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x18, &mut x19, x2, 0xfffffc2f);
  let mut x20: u32 = 0;
  let mut x21: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x20, &mut x21, 0x0, x19, x16);
  let mut x22: u32 = 0;
  let mut x23: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x22, &mut x23, x21, x17, x14);
  let mut x24: u32 = 0;
  let mut x25: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x24, &mut x25, x23, x15, x12);
  let mut x26: u32 = 0;
  let mut x27: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x26, &mut x27, x25, x13, x10);
  let mut x28: u32 = 0;
  let mut x29: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x28, &mut x29, x27, x11, x8);
  let mut x30: u32 = 0;
  let mut x31: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x30, &mut x31, x29, x9, x6);
  let mut x32: u32 = 0;
  let mut x33: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x32, &mut x33, x31, x7, x4);
  let mut x34: u32 = 0;
  let mut x35: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x34, &mut x35, 0x0, x1, x18);
  let mut x36: u32 = 0;
  let mut x37: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x36, &mut x37, x35, (0x0 as u32), x20);
  let mut x38: u32 = 0;
  let mut x39: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x38, &mut x39, x37, (0x0 as u32), x22);
  let mut x40: u32 = 0;
  let mut x41: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x40, &mut x41, x39, (0x0 as u32), x24);
  let mut x42: u32 = 0;
  let mut x43: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x42, &mut x43, x41, (0x0 as u32), x26);
  let mut x44: u32 = 0;
  let mut x45: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x44, &mut x45, x43, (0x0 as u32), x28);
  let mut x46: u32 = 0;
  let mut x47: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x46, &mut x47, x45, (0x0 as u32), x30);
  let mut x48: u32 = 0;
  let mut x49: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x48, &mut x49, x47, (0x0 as u32), x32);
  let mut x50: u32 = 0;
  let mut x51: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x50, &mut x51, x49, (0x0 as u32), ((x33 as u32) + x5));
  let mut x52: u32 = 0;
  let mut x53: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x52, &mut x53, 0x0, x36, (arg1[1]));
  let mut x54: u32 = 0;
  let mut x55: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x54, &mut x55, x53, x38, (0x0 as u32));
  let mut x56: u32 = 0;
  let mut x57: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x56, &mut x57, x55, x40, (0x0 as u32));
  let mut x58: u32 = 0;
  let mut x59: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x58, &mut x59, x57, x42, (0x0 as u32));
  let mut x60: u32 = 0;
  let mut x61: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x60, &mut x61, x59, x44, (0x0 as u32));
  let mut x62: u32 = 0;
  let mut x63: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x62, &mut x63, x61, x46, (0x0 as u32));
  let mut x64: u32 = 0;
  let mut x65: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x64, &mut x65, x63, x48, (0x0 as u32));
  let mut x66: u32 = 0;
  let mut x67: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x66, &mut x67, x65, x50, (0x0 as u32));
  let mut x68: u32 = 0;
  let mut x69: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x68, &mut x69, x52, 0xd2253531);
  let mut x70: u32 = 0;
  let mut x71: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x70, &mut x71, x68, 0xffffffff);
  let mut x72: u32 = 0;
  let mut x73: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x72, &mut x73, x68, 0xffffffff);
  let mut x74: u32 = 0;
  let mut x75: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x74, &mut x75, x68, 0xffffffff);
  let mut x76: u32 = 0;
  let mut x77: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x76, &mut x77, x68, 0xffffffff);
  let mut x78: u32 = 0;
  let mut x79: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x78, &mut x79, x68, 0xffffffff);
  let mut x80: u32 = 0;
  let mut x81: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x80, &mut x81, x68, 0xffffffff);
  let mut x82: u32 = 0;
  let mut x83: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x82, &mut x83, x68, 0xfffffffe);
  let mut x84: u32 = 0;
  let mut x85: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x84, &mut x85, x68, 0xfffffc2f);
  let mut x86: u32 = 0;
  let mut x87: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x86, &mut x87, 0x0, x85, x82);
  let mut x88: u32 = 0;
  let mut x89: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x88, &mut x89, x87, x83, x80);
  let mut x90: u32 = 0;
  let mut x91: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x90, &mut x91, x89, x81, x78);
  let mut x92: u32 = 0;
  let mut x93: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x92, &mut x93, x91, x79, x76);
  let mut x94: u32 = 0;
  let mut x95: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x94, &mut x95, x93, x77, x74);
  let mut x96: u32 = 0;
  let mut x97: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x96, &mut x97, x95, x75, x72);
  let mut x98: u32 = 0;
  let mut x99: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x98, &mut x99, x97, x73, x70);
  let mut x100: u32 = 0;
  let mut x101: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x100, &mut x101, 0x0, x52, x84);
  let mut x102: u32 = 0;
  let mut x103: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x102, &mut x103, x101, x54, x86);
  let mut x104: u32 = 0;
  let mut x105: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x104, &mut x105, x103, x56, x88);
  let mut x106: u32 = 0;
  let mut x107: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x106, &mut x107, x105, x58, x90);
  let mut x108: u32 = 0;
  let mut x109: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x108, &mut x109, x107, x60, x92);
  let mut x110: u32 = 0;
  let mut x111: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x110, &mut x111, x109, x62, x94);
  let mut x112: u32 = 0;
  let mut x113: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x112, &mut x113, x111, x64, x96);
  let mut x114: u32 = 0;
  let mut x115: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x114, &mut x115, x113, x66, x98);
  let mut x116: u32 = 0;
  let mut x117: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x116, &mut x117, x115, ((x67 as u32) + (x51 as u32)), ((x99 as u32) + x71));
  let mut x118: u32 = 0;
  let mut x119: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x118, &mut x119, 0x0, x102, (arg1[2]));
  let mut x120: u32 = 0;
  let mut x121: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x120, &mut x121, x119, x104, (0x0 as u32));
  let mut x122: u32 = 0;
  let mut x123: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x122, &mut x123, x121, x106, (0x0 as u32));
  let mut x124: u32 = 0;
  let mut x125: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x124, &mut x125, x123, x108, (0x0 as u32));
  let mut x126: u32 = 0;
  let mut x127: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x126, &mut x127, x125, x110, (0x0 as u32));
  let mut x128: u32 = 0;
  let mut x129: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x128, &mut x129, x127, x112, (0x0 as u32));
  let mut x130: u32 = 0;
  let mut x131: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x130, &mut x131, x129, x114, (0x0 as u32));
  let mut x132: u32 = 0;
  let mut x133: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x132, &mut x133, x131, x116, (0x0 as u32));
  let mut x134: u32 = 0;
  let mut x135: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x134, &mut x135, x118, 0xd2253531);
  let mut x136: u32 = 0;
  let mut x137: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x136, &mut x137, x134, 0xffffffff);
  let mut x138: u32 = 0;
  let mut x139: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x138, &mut x139, x134, 0xffffffff);
  let mut x140: u32 = 0;
  let mut x141: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x140, &mut x141, x134, 0xffffffff);
  let mut x142: u32 = 0;
  let mut x143: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x142, &mut x143, x134, 0xffffffff);
  let mut x144: u32 = 0;
  let mut x145: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x144, &mut x145, x134, 0xffffffff);
  let mut x146: u32 = 0;
  let mut x147: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x146, &mut x147, x134, 0xffffffff);
  let mut x148: u32 = 0;
  let mut x149: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x148, &mut x149, x134, 0xfffffffe);
  let mut x150: u32 = 0;
  let mut x151: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x150, &mut x151, x134, 0xfffffc2f);
  let mut x152: u32 = 0;
  let mut x153: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x152, &mut x153, 0x0, x151, x148);
  let mut x154: u32 = 0;
  let mut x155: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x154, &mut x155, x153, x149, x146);
  let mut x156: u32 = 0;
  let mut x157: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x156, &mut x157, x155, x147, x144);
  let mut x158: u32 = 0;
  let mut x159: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x158, &mut x159, x157, x145, x142);
  let mut x160: u32 = 0;
  let mut x161: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x160, &mut x161, x159, x143, x140);
  let mut x162: u32 = 0;
  let mut x163: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x162, &mut x163, x161, x141, x138);
  let mut x164: u32 = 0;
  let mut x165: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x164, &mut x165, x163, x139, x136);
  let mut x166: u32 = 0;
  let mut x167: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x166, &mut x167, 0x0, x118, x150);
  let mut x168: u32 = 0;
  let mut x169: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x168, &mut x169, x167, x120, x152);
  let mut x170: u32 = 0;
  let mut x171: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x170, &mut x171, x169, x122, x154);
  let mut x172: u32 = 0;
  let mut x173: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x172, &mut x173, x171, x124, x156);
  let mut x174: u32 = 0;
  let mut x175: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x174, &mut x175, x173, x126, x158);
  let mut x176: u32 = 0;
  let mut x177: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x176, &mut x177, x175, x128, x160);
  let mut x178: u32 = 0;
  let mut x179: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x178, &mut x179, x177, x130, x162);
  let mut x180: u32 = 0;
  let mut x181: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x180, &mut x181, x179, x132, x164);
  let mut x182: u32 = 0;
  let mut x183: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x182, &mut x183, x181, ((x133 as u32) + (x117 as u32)), ((x165 as u32) + x137));
  let mut x184: u32 = 0;
  let mut x185: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x184, &mut x185, 0x0, x168, (arg1[3]));
  let mut x186: u32 = 0;
  let mut x187: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x186, &mut x187, x185, x170, (0x0 as u32));
  let mut x188: u32 = 0;
  let mut x189: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x188, &mut x189, x187, x172, (0x0 as u32));
  let mut x190: u32 = 0;
  let mut x191: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x190, &mut x191, x189, x174, (0x0 as u32));
  let mut x192: u32 = 0;
  let mut x193: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x192, &mut x193, x191, x176, (0x0 as u32));
  let mut x194: u32 = 0;
  let mut x195: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x194, &mut x195, x193, x178, (0x0 as u32));
  let mut x196: u32 = 0;
  let mut x197: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x196, &mut x197, x195, x180, (0x0 as u32));
  let mut x198: u32 = 0;
  let mut x199: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x198, &mut x199, x197, x182, (0x0 as u32));
  let mut x200: u32 = 0;
  let mut x201: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x200, &mut x201, x184, 0xd2253531);
  let mut x202: u32 = 0;
  let mut x203: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x202, &mut x203, x200, 0xffffffff);
  let mut x204: u32 = 0;
  let mut x205: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x204, &mut x205, x200, 0xffffffff);
  let mut x206: u32 = 0;
  let mut x207: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x206, &mut x207, x200, 0xffffffff);
  let mut x208: u32 = 0;
  let mut x209: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x208, &mut x209, x200, 0xffffffff);
  let mut x210: u32 = 0;
  let mut x211: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x210, &mut x211, x200, 0xffffffff);
  let mut x212: u32 = 0;
  let mut x213: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x212, &mut x213, x200, 0xffffffff);
  let mut x214: u32 = 0;
  let mut x215: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x214, &mut x215, x200, 0xfffffffe);
  let mut x216: u32 = 0;
  let mut x217: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x216, &mut x217, x200, 0xfffffc2f);
  let mut x218: u32 = 0;
  let mut x219: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x218, &mut x219, 0x0, x217, x214);
  let mut x220: u32 = 0;
  let mut x221: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x220, &mut x221, x219, x215, x212);
  let mut x222: u32 = 0;
  let mut x223: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x222, &mut x223, x221, x213, x210);
  let mut x224: u32 = 0;
  let mut x225: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x224, &mut x225, x223, x211, x208);
  let mut x226: u32 = 0;
  let mut x227: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x226, &mut x227, x225, x209, x206);
  let mut x228: u32 = 0;
  let mut x229: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x228, &mut x229, x227, x207, x204);
  let mut x230: u32 = 0;
  let mut x231: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x230, &mut x231, x229, x205, x202);
  let mut x232: u32 = 0;
  let mut x233: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x232, &mut x233, 0x0, x184, x216);
  let mut x234: u32 = 0;
  let mut x235: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x234, &mut x235, x233, x186, x218);
  let mut x236: u32 = 0;
  let mut x237: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x236, &mut x237, x235, x188, x220);
  let mut x238: u32 = 0;
  let mut x239: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x238, &mut x239, x237, x190, x222);
  let mut x240: u32 = 0;
  let mut x241: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x240, &mut x241, x239, x192, x224);
  let mut x242: u32 = 0;
  let mut x243: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x242, &mut x243, x241, x194, x226);
  let mut x244: u32 = 0;
  let mut x245: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x244, &mut x245, x243, x196, x228);
  let mut x246: u32 = 0;
  let mut x247: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x246, &mut x247, x245, x198, x230);
  let mut x248: u32 = 0;
  let mut x249: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x248, &mut x249, x247, ((x199 as u32) + (x183 as u32)), ((x231 as u32) + x203));
  let mut x250: u32 = 0;
  let mut x251: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x250, &mut x251, 0x0, x234, (arg1[4]));
  let mut x252: u32 = 0;
  let mut x253: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x252, &mut x253, x251, x236, (0x0 as u32));
  let mut x254: u32 = 0;
  let mut x255: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x254, &mut x255, x253, x238, (0x0 as u32));
  let mut x256: u32 = 0;
  let mut x257: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x256, &mut x257, x255, x240, (0x0 as u32));
  let mut x258: u32 = 0;
  let mut x259: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x258, &mut x259, x257, x242, (0x0 as u32));
  let mut x260: u32 = 0;
  let mut x261: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x260, &mut x261, x259, x244, (0x0 as u32));
  let mut x262: u32 = 0;
  let mut x263: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x262, &mut x263, x261, x246, (0x0 as u32));
  let mut x264: u32 = 0;
  let mut x265: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x264, &mut x265, x263, x248, (0x0 as u32));
  let mut x266: u32 = 0;
  let mut x267: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x266, &mut x267, x250, 0xd2253531);
  let mut x268: u32 = 0;
  let mut x269: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x268, &mut x269, x266, 0xffffffff);
  let mut x270: u32 = 0;
  let mut x271: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x270, &mut x271, x266, 0xffffffff);
  let mut x272: u32 = 0;
  let mut x273: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x272, &mut x273, x266, 0xffffffff);
  let mut x274: u32 = 0;
  let mut x275: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x274, &mut x275, x266, 0xffffffff);
  let mut x276: u32 = 0;
  let mut x277: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x276, &mut x277, x266, 0xffffffff);
  let mut x278: u32 = 0;
  let mut x279: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x278, &mut x279, x266, 0xffffffff);
  let mut x280: u32 = 0;
  let mut x281: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x280, &mut x281, x266, 0xfffffffe);
  let mut x282: u32 = 0;
  let mut x283: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x282, &mut x283, x266, 0xfffffc2f);
  let mut x284: u32 = 0;
  let mut x285: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x284, &mut x285, 0x0, x283, x280);
  let mut x286: u32 = 0;
  let mut x287: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x286, &mut x287, x285, x281, x278);
  let mut x288: u32 = 0;
  let mut x289: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x288, &mut x289, x287, x279, x276);
  let mut x290: u32 = 0;
  let mut x291: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x290, &mut x291, x289, x277, x274);
  let mut x292: u32 = 0;
  let mut x293: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x292, &mut x293, x291, x275, x272);
  let mut x294: u32 = 0;
  let mut x295: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x294, &mut x295, x293, x273, x270);
  let mut x296: u32 = 0;
  let mut x297: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x296, &mut x297, x295, x271, x268);
  let mut x298: u32 = 0;
  let mut x299: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x298, &mut x299, 0x0, x250, x282);
  let mut x300: u32 = 0;
  let mut x301: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x300, &mut x301, x299, x252, x284);
  let mut x302: u32 = 0;
  let mut x303: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x302, &mut x303, x301, x254, x286);
  let mut x304: u32 = 0;
  let mut x305: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x304, &mut x305, x303, x256, x288);
  let mut x306: u32 = 0;
  let mut x307: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x306, &mut x307, x305, x258, x290);
  let mut x308: u32 = 0;
  let mut x309: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x308, &mut x309, x307, x260, x292);
  let mut x310: u32 = 0;
  let mut x311: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x310, &mut x311, x309, x262, x294);
  let mut x312: u32 = 0;
  let mut x313: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x312, &mut x313, x311, x264, x296);
  let mut x314: u32 = 0;
  let mut x315: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x314, &mut x315, x313, ((x265 as u32) + (x249 as u32)), ((x297 as u32) + x269));
  let mut x316: u32 = 0;
  let mut x317: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x316, &mut x317, 0x0, x300, (arg1[5]));
  let mut x318: u32 = 0;
  let mut x319: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x318, &mut x319, x317, x302, (0x0 as u32));
  let mut x320: u32 = 0;
  let mut x321: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x320, &mut x321, x319, x304, (0x0 as u32));
  let mut x322: u32 = 0;
  let mut x323: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x322, &mut x323, x321, x306, (0x0 as u32));
  let mut x324: u32 = 0;
  let mut x325: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x324, &mut x325, x323, x308, (0x0 as u32));
  let mut x326: u32 = 0;
  let mut x327: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x326, &mut x327, x325, x310, (0x0 as u32));
  let mut x328: u32 = 0;
  let mut x329: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x328, &mut x329, x327, x312, (0x0 as u32));
  let mut x330: u32 = 0;
  let mut x331: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x330, &mut x331, x329, x314, (0x0 as u32));
  let mut x332: u32 = 0;
  let mut x333: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x332, &mut x333, x316, 0xd2253531);
  let mut x334: u32 = 0;
  let mut x335: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x334, &mut x335, x332, 0xffffffff);
  let mut x336: u32 = 0;
  let mut x337: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x336, &mut x337, x332, 0xffffffff);
  let mut x338: u32 = 0;
  let mut x339: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x338, &mut x339, x332, 0xffffffff);
  let mut x340: u32 = 0;
  let mut x341: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x340, &mut x341, x332, 0xffffffff);
  let mut x342: u32 = 0;
  let mut x343: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x342, &mut x343, x332, 0xffffffff);
  let mut x344: u32 = 0;
  let mut x345: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x344, &mut x345, x332, 0xffffffff);
  let mut x346: u32 = 0;
  let mut x347: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x346, &mut x347, x332, 0xfffffffe);
  let mut x348: u32 = 0;
  let mut x349: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x348, &mut x349, x332, 0xfffffc2f);
  let mut x350: u32 = 0;
  let mut x351: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x350, &mut x351, 0x0, x349, x346);
  let mut x352: u32 = 0;
  let mut x353: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x352, &mut x353, x351, x347, x344);
  let mut x354: u32 = 0;
  let mut x355: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x354, &mut x355, x353, x345, x342);
  let mut x356: u32 = 0;
  let mut x357: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x356, &mut x357, x355, x343, x340);
  let mut x358: u32 = 0;
  let mut x359: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x358, &mut x359, x357, x341, x338);
  let mut x360: u32 = 0;
  let mut x361: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x360, &mut x361, x359, x339, x336);
  let mut x362: u32 = 0;
  let mut x363: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x362, &mut x363, x361, x337, x334);
  let mut x364: u32 = 0;
  let mut x365: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x364, &mut x365, 0x0, x316, x348);
  let mut x366: u32 = 0;
  let mut x367: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x366, &mut x367, x365, x318, x350);
  let mut x368: u32 = 0;
  let mut x369: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x368, &mut x369, x367, x320, x352);
  let mut x370: u32 = 0;
  let mut x371: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x370, &mut x371, x369, x322, x354);
  let mut x372: u32 = 0;
  let mut x373: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x372, &mut x373, x371, x324, x356);
  let mut x374: u32 = 0;
  let mut x375: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x374, &mut x375, x373, x326, x358);
  let mut x376: u32 = 0;
  let mut x377: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x376, &mut x377, x375, x328, x360);
  let mut x378: u32 = 0;
  let mut x379: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x378, &mut x379, x377, x330, x362);
  let mut x380: u32 = 0;
  let mut x381: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x380, &mut x381, x379, ((x331 as u32) + (x315 as u32)), ((x363 as u32) + x335));
  let mut x382: u32 = 0;
  let mut x383: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x382, &mut x383, 0x0, x366, (arg1[6]));
  let mut x384: u32 = 0;
  let mut x385: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x384, &mut x385, x383, x368, (0x0 as u32));
  let mut x386: u32 = 0;
  let mut x387: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x386, &mut x387, x385, x370, (0x0 as u32));
  let mut x388: u32 = 0;
  let mut x389: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x388, &mut x389, x387, x372, (0x0 as u32));
  let mut x390: u32 = 0;
  let mut x391: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x390, &mut x391, x389, x374, (0x0 as u32));
  let mut x392: u32 = 0;
  let mut x393: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x392, &mut x393, x391, x376, (0x0 as u32));
  let mut x394: u32 = 0;
  let mut x395: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x394, &mut x395, x393, x378, (0x0 as u32));
  let mut x396: u32 = 0;
  let mut x397: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x396, &mut x397, x395, x380, (0x0 as u32));
  let mut x398: u32 = 0;
  let mut x399: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x398, &mut x399, x382, 0xd2253531);
  let mut x400: u32 = 0;
  let mut x401: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x400, &mut x401, x398, 0xffffffff);
  let mut x402: u32 = 0;
  let mut x403: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x402, &mut x403, x398, 0xffffffff);
  let mut x404: u32 = 0;
  let mut x405: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x404, &mut x405, x398, 0xffffffff);
  let mut x406: u32 = 0;
  let mut x407: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x406, &mut x407, x398, 0xffffffff);
  let mut x408: u32 = 0;
  let mut x409: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x408, &mut x409, x398, 0xffffffff);
  let mut x410: u32 = 0;
  let mut x411: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x410, &mut x411, x398, 0xffffffff);
  let mut x412: u32 = 0;
  let mut x413: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x412, &mut x413, x398, 0xfffffffe);
  let mut x414: u32 = 0;
  let mut x415: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x414, &mut x415, x398, 0xfffffc2f);
  let mut x416: u32 = 0;
  let mut x417: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x416, &mut x417, 0x0, x415, x412);
  let mut x418: u32 = 0;
  let mut x419: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x418, &mut x419, x417, x413, x410);
  let mut x420: u32 = 0;
  let mut x421: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x420, &mut x421, x419, x411, x408);
  let mut x422: u32 = 0;
  let mut x423: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x422, &mut x423, x421, x409, x406);
  let mut x424: u32 = 0;
  let mut x425: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x424, &mut x425, x423, x407, x404);
  let mut x426: u32 = 0;
  let mut x427: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x426, &mut x427, x425, x405, x402);
  let mut x428: u32 = 0;
  let mut x429: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x428, &mut x429, x427, x403, x400);
  let mut x430: u32 = 0;
  let mut x431: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x430, &mut x431, 0x0, x382, x414);
  let mut x432: u32 = 0;
  let mut x433: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x432, &mut x433, x431, x384, x416);
  let mut x434: u32 = 0;
  let mut x435: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x434, &mut x435, x433, x386, x418);
  let mut x436: u32 = 0;
  let mut x437: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x436, &mut x437, x435, x388, x420);
  let mut x438: u32 = 0;
  let mut x439: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x438, &mut x439, x437, x390, x422);
  let mut x440: u32 = 0;
  let mut x441: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x440, &mut x441, x439, x392, x424);
  let mut x442: u32 = 0;
  let mut x443: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x442, &mut x443, x441, x394, x426);
  let mut x444: u32 = 0;
  let mut x445: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x444, &mut x445, x443, x396, x428);
  let mut x446: u32 = 0;
  let mut x447: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x446, &mut x447, x445, ((x397 as u32) + (x381 as u32)), ((x429 as u32) + x401));
  let mut x448: u32 = 0;
  let mut x449: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x448, &mut x449, 0x0, x432, (arg1[7]));
  let mut x450: u32 = 0;
  let mut x451: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x450, &mut x451, x449, x434, (0x0 as u32));
  let mut x452: u32 = 0;
  let mut x453: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x452, &mut x453, x451, x436, (0x0 as u32));
  let mut x454: u32 = 0;
  let mut x455: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x454, &mut x455, x453, x438, (0x0 as u32));
  let mut x456: u32 = 0;
  let mut x457: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x456, &mut x457, x455, x440, (0x0 as u32));
  let mut x458: u32 = 0;
  let mut x459: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x458, &mut x459, x457, x442, (0x0 as u32));
  let mut x460: u32 = 0;
  let mut x461: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x460, &mut x461, x459, x444, (0x0 as u32));
  let mut x462: u32 = 0;
  let mut x463: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x462, &mut x463, x461, x446, (0x0 as u32));
  let mut x464: u32 = 0;
  let mut x465: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x464, &mut x465, x448, 0xd2253531);
  let mut x466: u32 = 0;
  let mut x467: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x466, &mut x467, x464, 0xffffffff);
  let mut x468: u32 = 0;
  let mut x469: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x468, &mut x469, x464, 0xffffffff);
  let mut x470: u32 = 0;
  let mut x471: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x470, &mut x471, x464, 0xffffffff);
  let mut x472: u32 = 0;
  let mut x473: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x472, &mut x473, x464, 0xffffffff);
  let mut x474: u32 = 0;
  let mut x475: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x474, &mut x475, x464, 0xffffffff);
  let mut x476: u32 = 0;
  let mut x477: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x476, &mut x477, x464, 0xffffffff);
  let mut x478: u32 = 0;
  let mut x479: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x478, &mut x479, x464, 0xfffffffe);
  let mut x480: u32 = 0;
  let mut x481: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x480, &mut x481, x464, 0xfffffc2f);
  let mut x482: u32 = 0;
  let mut x483: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x482, &mut x483, 0x0, x481, x478);
  let mut x484: u32 = 0;
  let mut x485: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x484, &mut x485, x483, x479, x476);
  let mut x486: u32 = 0;
  let mut x487: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x486, &mut x487, x485, x477, x474);
  let mut x488: u32 = 0;
  let mut x489: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x488, &mut x489, x487, x475, x472);
  let mut x490: u32 = 0;
  let mut x491: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x490, &mut x491, x489, x473, x470);
  let mut x492: u32 = 0;
  let mut x493: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x492, &mut x493, x491, x471, x468);
  let mut x494: u32 = 0;
  let mut x495: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x494, &mut x495, x493, x469, x466);
  let mut x496: u32 = 0;
  let mut x497: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x496, &mut x497, 0x0, x448, x480);
  let mut x498: u32 = 0;
  let mut x499: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x498, &mut x499, x497, x450, x482);
  let mut x500: u32 = 0;
  let mut x501: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x500, &mut x501, x499, x452, x484);
  let mut x502: u32 = 0;
  let mut x503: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x502, &mut x503, x501, x454, x486);
  let mut x504: u32 = 0;
  let mut x505: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x504, &mut x505, x503, x456, x488);
  let mut x506: u32 = 0;
  let mut x507: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x506, &mut x507, x505, x458, x490);
  let mut x508: u32 = 0;
  let mut x509: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x508, &mut x509, x507, x460, x492);
  let mut x510: u32 = 0;
  let mut x511: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x510, &mut x511, x509, x462, x494);
  let mut x512: u32 = 0;
  let mut x513: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x512, &mut x513, x511, ((x463 as u32) + (x447 as u32)), ((x495 as u32) + x467));
  let mut x514: u32 = 0;
  let mut x515: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x514, &mut x515, 0x0, x498, 0xfffffc2f);
  let mut x516: u32 = 0;
  let mut x517: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x516, &mut x517, x515, x500, 0xfffffffe);
  let mut x518: u32 = 0;
  let mut x519: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x518, &mut x519, x517, x502, 0xffffffff);
  let mut x520: u32 = 0;
  let mut x521: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x520, &mut x521, x519, x504, 0xffffffff);
  let mut x522: u32 = 0;
  let mut x523: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x522, &mut x523, x521, x506, 0xffffffff);
  let mut x524: u32 = 0;
  let mut x525: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x524, &mut x525, x523, x508, 0xffffffff);
  let mut x526: u32 = 0;
  let mut x527: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x526, &mut x527, x525, x510, 0xffffffff);
  let mut x528: u32 = 0;
  let mut x529: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x528, &mut x529, x527, x512, 0xffffffff);
  let mut x530: u32 = 0;
  let mut x531: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x530, &mut x531, x529, (x513 as u32), (0x0 as u32));
  let mut x532: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x532, x531, x514, x498);
  let mut x533: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x533, x531, x516, x500);
  let mut x534: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x534, x531, x518, x502);
  let mut x535: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x535, x531, x520, x504);
  let mut x536: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x536, x531, x522, x506);
  let mut x537: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x537, x531, x524, x508);
  let mut x538: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x538, x531, x526, x510);
  let mut x539: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x539, x531, x528, x512);
  out1[0] = x532;
  out1[1] = x533;
  out1[2] = x534;
  out1[3] = x535;
  out1[4] = x536;
  out1[5] = x537;
  out1[6] = x538;
  out1[7] = x539;
}

/*
 * The function fiat_secp256k1_nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffff]
 */
#[inline]
pub fn fiat_secp256k1_nonzero(out1: &mut u32, arg1: &[u32; 8]) -> () {
  let x1: u32 = ((arg1[0]) | ((arg1[1]) | ((arg1[2]) | ((arg1[3]) | ((arg1[4]) | ((arg1[5]) | ((arg1[6]) | ((arg1[7]) | (0x0 as u32)))))))));
  *out1 = x1;
}

/*
 * The function fiat_secp256k1_selectznz is a multi-limb conditional select.
 * Postconditions:
 *   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 *   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
#[inline]
pub fn fiat_secp256k1_selectznz(out1: &mut [u32; 8], arg1: fiat_secp256k1_u1, arg2: &[u32; 8], arg3: &[u32; 8]) -> () {
  let mut x1: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x1, arg1, (arg2[0]), (arg3[0]));
  let mut x2: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x2, arg1, (arg2[1]), (arg3[1]));
  let mut x3: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3, arg1, (arg2[2]), (arg3[2]));
  let mut x4: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x4, arg1, (arg2[3]), (arg3[3]));
  let mut x5: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x5, arg1, (arg2[4]), (arg3[4]));
  let mut x6: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x6, arg1, (arg2[5]), (arg3[5]));
  let mut x7: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x7, arg1, (arg2[6]), (arg3[6]));
  let mut x8: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x8, arg1, (arg2[7]), (arg3[7]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
  out1[4] = x5;
  out1[5] = x6;
  out1[6] = x7;
  out1[7] = x8;
}

/*
 * The function fiat_secp256k1_to_bytes serializes a field element in the Montgomery domain to bytes in little-endian order.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..31]
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
 */
#[inline]
pub fn fiat_secp256k1_to_bytes(out1: &mut [u8; 32], arg1: &[u32; 8]) -> () {
  let x1: u32 = (arg1[7]);
  let x2: u32 = (arg1[6]);
  let x3: u32 = (arg1[5]);
  let x4: u32 = (arg1[4]);
  let x5: u32 = (arg1[3]);
  let x6: u32 = (arg1[2]);
  let x7: u32 = (arg1[1]);
  let x8: u32 = (arg1[0]);
  let x9: u32 = (x8 >> 8);
  let x10: u8 = ((x8 & (0xff as u32)) as u8);
  let x11: u32 = (x9 >> 8);
  let x12: u8 = ((x9 & (0xff as u32)) as u8);
  let x13: u8 = ((x11 >> 8) as u8);
  let x14: u8 = ((x11 & (0xff as u32)) as u8);
  let x15: u8 = (x13 & 0xff);
  let x16: u32 = (x7 >> 8);
  let x17: u8 = ((x7 & (0xff as u32)) as u8);
  let x18: u32 = (x16 >> 8);
  let x19: u8 = ((x16 & (0xff as u32)) as u8);
  let x20: u8 = ((x18 >> 8) as u8);
  let x21: u8 = ((x18 & (0xff as u32)) as u8);
  let x22: u8 = (x20 & 0xff);
  let x23: u32 = (x6 >> 8);
  let x24: u8 = ((x6 & (0xff as u32)) as u8);
  let x25: u32 = (x23 >> 8);
  let x26: u8 = ((x23 & (0xff as u32)) as u8);
  let x27: u8 = ((x25 >> 8) as u8);
  let x28: u8 = ((x25 & (0xff as u32)) as u8);
  let x29: u8 = (x27 & 0xff);
  let x30: u32 = (x5 >> 8);
  let x31: u8 = ((x5 & (0xff as u32)) as u8);
  let x32: u32 = (x30 >> 8);
  let x33: u8 = ((x30 & (0xff as u32)) as u8);
  let x34: u8 = ((x32 >> 8) as u8);
  let x35: u8 = ((x32 & (0xff as u32)) as u8);
  let x36: u8 = (x34 & 0xff);
  let x37: u32 = (x4 >> 8);
  let x38: u8 = ((x4 & (0xff as u32)) as u8);
  let x39: u32 = (x37 >> 8);
  let x40: u8 = ((x37 & (0xff as u32)) as u8);
  let x41: u8 = ((x39 >> 8) as u8);
  let x42: u8 = ((x39 & (0xff as u32)) as u8);
  let x43: u8 = (x41 & 0xff);
  let x44: u32 = (x3 >> 8);
  let x45: u8 = ((x3 & (0xff as u32)) as u8);
  let x46: u32 = (x44 >> 8);
  let x47: u8 = ((x44 & (0xff as u32)) as u8);
  let x48: u8 = ((x46 >> 8) as u8);
  let x49: u8 = ((x46 & (0xff as u32)) as u8);
  let x50: u8 = (x48 & 0xff);
  let x51: u32 = (x2 >> 8);
  let x52: u8 = ((x2 & (0xff as u32)) as u8);
  let x53: u32 = (x51 >> 8);
  let x54: u8 = ((x51 & (0xff as u32)) as u8);
  let x55: u8 = ((x53 >> 8) as u8);
  let x56: u8 = ((x53 & (0xff as u32)) as u8);
  let x57: u8 = (x55 & 0xff);
  let x58: u32 = (x1 >> 8);
  let x59: u8 = ((x1 & (0xff as u32)) as u8);
  let x60: u32 = (x58 >> 8);
  let x61: u8 = ((x58 & (0xff as u32)) as u8);
  let x62: u8 = ((x60 >> 8) as u8);
  let x63: u8 = ((x60 & (0xff as u32)) as u8);
  out1[0] = x10;
  out1[1] = x12;
  out1[2] = x14;
  out1[3] = x15;
  out1[4] = x17;
  out1[5] = x19;
  out1[6] = x21;
  out1[7] = x22;
  out1[8] = x24;
  out1[9] = x26;
  out1[10] = x28;
  out1[11] = x29;
  out1[12] = x31;
  out1[13] = x33;
  out1[14] = x35;
  out1[15] = x36;
  out1[16] = x38;
  out1[17] = x40;
  out1[18] = x42;
  out1[19] = x43;
  out1[20] = x45;
  out1[21] = x47;
  out1[22] = x49;
  out1[23] = x50;
  out1[24] = x52;
  out1[25] = x54;
  out1[26] = x56;
  out1[27] = x57;
  out1[28] = x59;
  out1[29] = x61;
  out1[30] = x63;
  out1[31] = x62;
}

/*
 * The function fiat_secp256k1_from_bytes deserializes a field element in the Montgomery domain from bytes in little-endian order.
 * Preconditions:
 *   0 ≤ bytes_eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = bytes_eval arg1 mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
#[inline]
pub fn fiat_secp256k1_from_bytes(out1: &mut [u32; 8], arg1: &[u8; 32]) -> () {
  let x1: u32 = (((arg1[31]) as u32) << 24);
  let x2: u32 = (((arg1[30]) as u32) << 16);
  let x3: u32 = (((arg1[29]) as u32) << 8);
  let x4: u8 = (arg1[28]);
  let x5: u32 = (((arg1[27]) as u32) << 24);
  let x6: u32 = (((arg1[26]) as u32) << 16);
  let x7: u32 = (((arg1[25]) as u32) << 8);
  let x8: u8 = (arg1[24]);
  let x9: u32 = (((arg1[23]) as u32) << 24);
  let x10: u32 = (((arg1[22]) as u32) << 16);
  let x11: u32 = (((arg1[21]) as u32) << 8);
  let x12: u8 = (arg1[20]);
  let x13: u32 = (((arg1[19]) as u32) << 24);
  let x14: u32 = (((arg1[18]) as u32) << 16);
  let x15: u32 = (((arg1[17]) as u32) << 8);
  let x16: u8 = (arg1[16]);
  let x17: u32 = (((arg1[15]) as u32) << 24);
  let x18: u32 = (((arg1[14]) as u32) << 16);
  let x19: u32 = (((arg1[13]) as u32) << 8);
  let x20: u8 = (arg1[12]);
  let x21: u32 = (((arg1[11]) as u32) << 24);
  let x22: u32 = (((arg1[10]) as u32) << 16);
  let x23: u32 = (((arg1[9]) as u32) << 8);
  let x24: u8 = (arg1[8]);
  let x25: u32 = (((arg1[7]) as u32) << 24);
  let x26: u32 = (((arg1[6]) as u32) << 16);
  let x27: u32 = (((arg1[5]) as u32) << 8);
  let x28: u8 = (arg1[4]);
  let x29: u32 = (((arg1[3]) as u32) << 24);
  let x30: u32 = (((arg1[2]) as u32) << 16);
  let x31: u32 = (((arg1[1]) as u32) << 8);
  let x32: u8 = (arg1[0]);
  let x33: u32 = ((x32 as u32) + (x31 + (x30 + x29)));
  let x34: u32 = (x33 & 0xffffffff);
  let x35: u32 = ((x4 as u32) + (x3 + (x2 + x1)));
  let x36: u32 = ((x8 as u32) + (x7 + (x6 + x5)));
  let x37: u32 = ((x12 as u32) + (x11 + (x10 + x9)));
  let x38: u32 = ((x16 as u32) + (x15 + (x14 + x13)));
  let x39: u32 = ((x20 as u32) + (x19 + (x18 + x17)));
  let x40: u32 = ((x24 as u32) + (x23 + (x22 + x21)));
  let x41: u32 = ((x28 as u32) + (x27 + (x26 + x25)));
  let x42: u32 = (x41 & 0xffffffff);
  let x43: u32 = (x40 & 0xffffffff);
  let x44: u32 = (x39 & 0xffffffff);
  let x45: u32 = (x38 & 0xffffffff);
  let x46: u32 = (x37 & 0xffffffff);
  let x47: u32 = (x36 & 0xffffffff);
  out1[0] = x34;
  out1[1] = x42;
  out1[2] = x43;
  out1[3] = x44;
  out1[4] = x45;
  out1[5] = x46;
  out1[6] = x47;
  out1[7] = x35;
}

