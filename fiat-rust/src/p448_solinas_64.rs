/* Autogenerated: src/ExtractionOCaml/unsaturated_solinas --lang=Rust p448 8 '2^448 - 2^224 - 1' 64 */
/* curve description: p448 */
/* requested operations: (all) */
/* n = 8 (from "8") */
/* s-c = 2^448 - [(2^224, 1), (1, 1)] (from "2^448 - 2^224 - 1") */
/* machine_wordsize = 64 (from "64") */

/* Computed values: */
/* carry_chain = [3, 7, 4, 0, 5, 1, 6, 2, 7, 3, 4, 0] */

#![allow(unused_parens)]
#[allow(non_camel_case_types)]

pub type fiat_p448_u1 = u8;
pub type fiat_p448_i1 = i8;
pub type fiat_p448_u2 = u8;
pub type fiat_p448_i2 = i8;
pub type fiat_p448_u128 = u128;
pub type fiat_p448_i128 = i128;


/*
 * The function fiat_p448_addcarryx_u56 is an addition with carry.
 * Postconditions:
 *   out1 = (arg1 + arg2 + arg3) mod 2^56
 *   out2 = ⌊(arg1 + arg2 + arg3) / 2^56⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffffffffff]
 *   arg3: [0x0 ~> 0xffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffff]
 *   out2: [0x0 ~> 0x1]
 */
#[inline]
pub fn fiat_p448_addcarryx_u56(out1: &mut u64, out2: &mut fiat_p448_u1, arg1: fiat_p448_u1, arg2: u64, arg3: u64) -> () {
  let x1: u64 = (((arg1 as u64) + arg2) + arg3);
  let x2: u64 = (x1 & 0xffffffffffffff);
  let x3: fiat_p448_u1 = ((x1 >> 56) as fiat_p448_u1);
  *out1 = x2;
  *out2 = x3;
}

/*
 * The function fiat_p448_subborrowx_u56 is a subtraction with borrow.
 * Postconditions:
 *   out1 = (-arg1 + arg2 + -arg3) mod 2^56
 *   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^56⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffffffffff]
 *   arg3: [0x0 ~> 0xffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffff]
 *   out2: [0x0 ~> 0x1]
 */
#[inline]
pub fn fiat_p448_subborrowx_u56(out1: &mut u64, out2: &mut fiat_p448_u1, arg1: fiat_p448_u1, arg2: u64, arg3: u64) -> () {
  let x1: i64 = ((((((arg2 as fiat_p448_i128) - (arg1 as fiat_p448_i128)) as i64) as fiat_p448_i128) - (arg3 as fiat_p448_i128)) as i64);
  let x2: fiat_p448_i1 = ((x1 >> 56) as fiat_p448_i1);
  let x3: u64 = (((x1 as fiat_p448_i128) & (0xffffffffffffff as fiat_p448_i128)) as u64);
  *out1 = x3;
  *out2 = (((0x0 as fiat_p448_i2) - (x2 as fiat_p448_i2)) as fiat_p448_u1);
}

/*
 * The function fiat_p448_cmovznz_u64 is a single-word conditional move.
 * Postconditions:
 *   out1 = (if arg1 = 0 then arg2 else arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 *   arg3: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 */
#[inline]
pub fn fiat_p448_cmovznz_u64(out1: &mut u64, arg1: fiat_p448_u1, arg2: u64, arg3: u64) -> () {
  let x1: fiat_p448_u1 = (!(!arg1));
  let x2: u64 = ((((((0x0 as fiat_p448_i2) - (x1 as fiat_p448_i2)) as fiat_p448_i1) as fiat_p448_i128) & (0xffffffffffffffff as fiat_p448_i128)) as u64);
  let x3: u64 = ((x2 & arg3) | ((!x2) & arg2));
  *out1 = x3;
}

/*
 * The function fiat_p448_carry_mul multiplies two field elements and reduces the result.
 * Postconditions:
 *   eval out1 mod m = (eval arg1 * eval arg2) mod m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb]]
 *   arg2: [[0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999]]
 */
#[inline]
pub fn fiat_p448_carry_mul(out1: &mut [u64; 8], arg1: &[u64; 8], arg2: &[u64; 8]) -> () {
  let x1: fiat_p448_u128 = (((arg1[7]) as fiat_p448_u128) * ((arg2[7]) as fiat_p448_u128));
  let x2: fiat_p448_u128 = (((arg1[7]) as fiat_p448_u128) * ((arg2[6]) as fiat_p448_u128));
  let x3: fiat_p448_u128 = (((arg1[7]) as fiat_p448_u128) * ((arg2[5]) as fiat_p448_u128));
  let x4: fiat_p448_u128 = (((arg1[6]) as fiat_p448_u128) * ((arg2[7]) as fiat_p448_u128));
  let x5: fiat_p448_u128 = (((arg1[6]) as fiat_p448_u128) * ((arg2[6]) as fiat_p448_u128));
  let x6: fiat_p448_u128 = (((arg1[5]) as fiat_p448_u128) * ((arg2[7]) as fiat_p448_u128));
  let x7: fiat_p448_u128 = (((arg1[7]) as fiat_p448_u128) * ((arg2[7]) as fiat_p448_u128));
  let x8: fiat_p448_u128 = (((arg1[7]) as fiat_p448_u128) * ((arg2[6]) as fiat_p448_u128));
  let x9: fiat_p448_u128 = (((arg1[7]) as fiat_p448_u128) * ((arg2[5]) as fiat_p448_u128));
  let x10: fiat_p448_u128 = (((arg1[6]) as fiat_p448_u128) * ((arg2[7]) as fiat_p448_u128));
  let x11: fiat_p448_u128 = (((arg1[6]) as fiat_p448_u128) * ((arg2[6]) as fiat_p448_u128));
  let x12: fiat_p448_u128 = (((arg1[5]) as fiat_p448_u128) * ((arg2[7]) as fiat_p448_u128));
  let x13: fiat_p448_u128 = (((arg1[7]) as fiat_p448_u128) * ((arg2[7]) as fiat_p448_u128));
  let x14: fiat_p448_u128 = (((arg1[7]) as fiat_p448_u128) * ((arg2[6]) as fiat_p448_u128));
  let x15: fiat_p448_u128 = (((arg1[7]) as fiat_p448_u128) * ((arg2[5]) as fiat_p448_u128));
  let x16: fiat_p448_u128 = (((arg1[7]) as fiat_p448_u128) * ((arg2[4]) as fiat_p448_u128));
  let x17: fiat_p448_u128 = (((arg1[7]) as fiat_p448_u128) * ((arg2[3]) as fiat_p448_u128));
  let x18: fiat_p448_u128 = (((arg1[7]) as fiat_p448_u128) * ((arg2[2]) as fiat_p448_u128));
  let x19: fiat_p448_u128 = (((arg1[7]) as fiat_p448_u128) * ((arg2[1]) as fiat_p448_u128));
  let x20: fiat_p448_u128 = (((arg1[6]) as fiat_p448_u128) * ((arg2[7]) as fiat_p448_u128));
  let x21: fiat_p448_u128 = (((arg1[6]) as fiat_p448_u128) * ((arg2[6]) as fiat_p448_u128));
  let x22: fiat_p448_u128 = (((arg1[6]) as fiat_p448_u128) * ((arg2[5]) as fiat_p448_u128));
  let x23: fiat_p448_u128 = (((arg1[6]) as fiat_p448_u128) * ((arg2[4]) as fiat_p448_u128));
  let x24: fiat_p448_u128 = (((arg1[6]) as fiat_p448_u128) * ((arg2[3]) as fiat_p448_u128));
  let x25: fiat_p448_u128 = (((arg1[6]) as fiat_p448_u128) * ((arg2[2]) as fiat_p448_u128));
  let x26: fiat_p448_u128 = (((arg1[5]) as fiat_p448_u128) * ((arg2[7]) as fiat_p448_u128));
  let x27: fiat_p448_u128 = (((arg1[5]) as fiat_p448_u128) * ((arg2[6]) as fiat_p448_u128));
  let x28: fiat_p448_u128 = (((arg1[5]) as fiat_p448_u128) * ((arg2[5]) as fiat_p448_u128));
  let x29: fiat_p448_u128 = (((arg1[5]) as fiat_p448_u128) * ((arg2[4]) as fiat_p448_u128));
  let x30: fiat_p448_u128 = (((arg1[5]) as fiat_p448_u128) * ((arg2[3]) as fiat_p448_u128));
  let x31: fiat_p448_u128 = (((arg1[4]) as fiat_p448_u128) * ((arg2[7]) as fiat_p448_u128));
  let x32: fiat_p448_u128 = (((arg1[4]) as fiat_p448_u128) * ((arg2[6]) as fiat_p448_u128));
  let x33: fiat_p448_u128 = (((arg1[4]) as fiat_p448_u128) * ((arg2[5]) as fiat_p448_u128));
  let x34: fiat_p448_u128 = (((arg1[4]) as fiat_p448_u128) * ((arg2[4]) as fiat_p448_u128));
  let x35: fiat_p448_u128 = (((arg1[3]) as fiat_p448_u128) * ((arg2[7]) as fiat_p448_u128));
  let x36: fiat_p448_u128 = (((arg1[3]) as fiat_p448_u128) * ((arg2[6]) as fiat_p448_u128));
  let x37: fiat_p448_u128 = (((arg1[3]) as fiat_p448_u128) * ((arg2[5]) as fiat_p448_u128));
  let x38: fiat_p448_u128 = (((arg1[2]) as fiat_p448_u128) * ((arg2[7]) as fiat_p448_u128));
  let x39: fiat_p448_u128 = (((arg1[2]) as fiat_p448_u128) * ((arg2[6]) as fiat_p448_u128));
  let x40: fiat_p448_u128 = (((arg1[1]) as fiat_p448_u128) * ((arg2[7]) as fiat_p448_u128));
  let x41: fiat_p448_u128 = (((arg1[7]) as fiat_p448_u128) * ((arg2[4]) as fiat_p448_u128));
  let x42: fiat_p448_u128 = (((arg1[7]) as fiat_p448_u128) * ((arg2[3]) as fiat_p448_u128));
  let x43: fiat_p448_u128 = (((arg1[7]) as fiat_p448_u128) * ((arg2[2]) as fiat_p448_u128));
  let x44: fiat_p448_u128 = (((arg1[7]) as fiat_p448_u128) * ((arg2[1]) as fiat_p448_u128));
  let x45: fiat_p448_u128 = (((arg1[6]) as fiat_p448_u128) * ((arg2[5]) as fiat_p448_u128));
  let x46: fiat_p448_u128 = (((arg1[6]) as fiat_p448_u128) * ((arg2[4]) as fiat_p448_u128));
  let x47: fiat_p448_u128 = (((arg1[6]) as fiat_p448_u128) * ((arg2[3]) as fiat_p448_u128));
  let x48: fiat_p448_u128 = (((arg1[6]) as fiat_p448_u128) * ((arg2[2]) as fiat_p448_u128));
  let x49: fiat_p448_u128 = (((arg1[5]) as fiat_p448_u128) * ((arg2[6]) as fiat_p448_u128));
  let x50: fiat_p448_u128 = (((arg1[5]) as fiat_p448_u128) * ((arg2[5]) as fiat_p448_u128));
  let x51: fiat_p448_u128 = (((arg1[5]) as fiat_p448_u128) * ((arg2[4]) as fiat_p448_u128));
  let x52: fiat_p448_u128 = (((arg1[5]) as fiat_p448_u128) * ((arg2[3]) as fiat_p448_u128));
  let x53: fiat_p448_u128 = (((arg1[4]) as fiat_p448_u128) * ((arg2[7]) as fiat_p448_u128));
  let x54: fiat_p448_u128 = (((arg1[4]) as fiat_p448_u128) * ((arg2[6]) as fiat_p448_u128));
  let x55: fiat_p448_u128 = (((arg1[4]) as fiat_p448_u128) * ((arg2[5]) as fiat_p448_u128));
  let x56: fiat_p448_u128 = (((arg1[4]) as fiat_p448_u128) * ((arg2[4]) as fiat_p448_u128));
  let x57: fiat_p448_u128 = (((arg1[3]) as fiat_p448_u128) * ((arg2[7]) as fiat_p448_u128));
  let x58: fiat_p448_u128 = (((arg1[3]) as fiat_p448_u128) * ((arg2[6]) as fiat_p448_u128));
  let x59: fiat_p448_u128 = (((arg1[3]) as fiat_p448_u128) * ((arg2[5]) as fiat_p448_u128));
  let x60: fiat_p448_u128 = (((arg1[2]) as fiat_p448_u128) * ((arg2[7]) as fiat_p448_u128));
  let x61: fiat_p448_u128 = (((arg1[2]) as fiat_p448_u128) * ((arg2[6]) as fiat_p448_u128));
  let x62: fiat_p448_u128 = (((arg1[1]) as fiat_p448_u128) * ((arg2[7]) as fiat_p448_u128));
  let x63: fiat_p448_u128 = (((arg1[7]) as fiat_p448_u128) * ((arg2[0]) as fiat_p448_u128));
  let x64: fiat_p448_u128 = (((arg1[6]) as fiat_p448_u128) * ((arg2[1]) as fiat_p448_u128));
  let x65: fiat_p448_u128 = (((arg1[6]) as fiat_p448_u128) * ((arg2[0]) as fiat_p448_u128));
  let x66: fiat_p448_u128 = (((arg1[5]) as fiat_p448_u128) * ((arg2[2]) as fiat_p448_u128));
  let x67: fiat_p448_u128 = (((arg1[5]) as fiat_p448_u128) * ((arg2[1]) as fiat_p448_u128));
  let x68: fiat_p448_u128 = (((arg1[5]) as fiat_p448_u128) * ((arg2[0]) as fiat_p448_u128));
  let x69: fiat_p448_u128 = (((arg1[4]) as fiat_p448_u128) * ((arg2[3]) as fiat_p448_u128));
  let x70: fiat_p448_u128 = (((arg1[4]) as fiat_p448_u128) * ((arg2[2]) as fiat_p448_u128));
  let x71: fiat_p448_u128 = (((arg1[4]) as fiat_p448_u128) * ((arg2[1]) as fiat_p448_u128));
  let x72: fiat_p448_u128 = (((arg1[4]) as fiat_p448_u128) * ((arg2[0]) as fiat_p448_u128));
  let x73: fiat_p448_u128 = (((arg1[3]) as fiat_p448_u128) * ((arg2[4]) as fiat_p448_u128));
  let x74: fiat_p448_u128 = (((arg1[3]) as fiat_p448_u128) * ((arg2[3]) as fiat_p448_u128));
  let x75: fiat_p448_u128 = (((arg1[3]) as fiat_p448_u128) * ((arg2[2]) as fiat_p448_u128));
  let x76: fiat_p448_u128 = (((arg1[3]) as fiat_p448_u128) * ((arg2[1]) as fiat_p448_u128));
  let x77: fiat_p448_u128 = (((arg1[3]) as fiat_p448_u128) * ((arg2[0]) as fiat_p448_u128));
  let x78: fiat_p448_u128 = (((arg1[2]) as fiat_p448_u128) * ((arg2[5]) as fiat_p448_u128));
  let x79: fiat_p448_u128 = (((arg1[2]) as fiat_p448_u128) * ((arg2[4]) as fiat_p448_u128));
  let x80: fiat_p448_u128 = (((arg1[2]) as fiat_p448_u128) * ((arg2[3]) as fiat_p448_u128));
  let x81: fiat_p448_u128 = (((arg1[2]) as fiat_p448_u128) * ((arg2[2]) as fiat_p448_u128));
  let x82: fiat_p448_u128 = (((arg1[2]) as fiat_p448_u128) * ((arg2[1]) as fiat_p448_u128));
  let x83: fiat_p448_u128 = (((arg1[2]) as fiat_p448_u128) * ((arg2[0]) as fiat_p448_u128));
  let x84: fiat_p448_u128 = (((arg1[1]) as fiat_p448_u128) * ((arg2[6]) as fiat_p448_u128));
  let x85: fiat_p448_u128 = (((arg1[1]) as fiat_p448_u128) * ((arg2[5]) as fiat_p448_u128));
  let x86: fiat_p448_u128 = (((arg1[1]) as fiat_p448_u128) * ((arg2[4]) as fiat_p448_u128));
  let x87: fiat_p448_u128 = (((arg1[1]) as fiat_p448_u128) * ((arg2[3]) as fiat_p448_u128));
  let x88: fiat_p448_u128 = (((arg1[1]) as fiat_p448_u128) * ((arg2[2]) as fiat_p448_u128));
  let x89: fiat_p448_u128 = (((arg1[1]) as fiat_p448_u128) * ((arg2[1]) as fiat_p448_u128));
  let x90: fiat_p448_u128 = (((arg1[1]) as fiat_p448_u128) * ((arg2[0]) as fiat_p448_u128));
  let x91: fiat_p448_u128 = (((arg1[0]) as fiat_p448_u128) * ((arg2[7]) as fiat_p448_u128));
  let x92: fiat_p448_u128 = (((arg1[0]) as fiat_p448_u128) * ((arg2[6]) as fiat_p448_u128));
  let x93: fiat_p448_u128 = (((arg1[0]) as fiat_p448_u128) * ((arg2[5]) as fiat_p448_u128));
  let x94: fiat_p448_u128 = (((arg1[0]) as fiat_p448_u128) * ((arg2[4]) as fiat_p448_u128));
  let x95: fiat_p448_u128 = (((arg1[0]) as fiat_p448_u128) * ((arg2[3]) as fiat_p448_u128));
  let x96: fiat_p448_u128 = (((arg1[0]) as fiat_p448_u128) * ((arg2[2]) as fiat_p448_u128));
  let x97: fiat_p448_u128 = (((arg1[0]) as fiat_p448_u128) * ((arg2[1]) as fiat_p448_u128));
  let x98: fiat_p448_u128 = (((arg1[0]) as fiat_p448_u128) * ((arg2[0]) as fiat_p448_u128));
  let x99: fiat_p448_u128 = (x95 + (x88 + (x82 + (x77 + (x31 + (x27 + (x22 + x16)))))));
  let x100: u64 = ((x99 >> 56) as u64);
  let x101: u64 = ((x99 & (0xffffffffffffff as fiat_p448_u128)) as u64);
  let x102: fiat_p448_u128 = (x91 + (x84 + (x78 + (x73 + (x69 + (x66 + (x64 + (x63 + (x53 + (x49 + (x45 + x41)))))))))));
  let x103: fiat_p448_u128 = (x92 + (x85 + (x79 + (x74 + (x70 + (x67 + (x65 + (x57 + (x54 + (x50 + (x46 + (x42 + (x13 + x7)))))))))))));
  let x104: fiat_p448_u128 = (x93 + (x86 + (x80 + (x75 + (x71 + (x68 + (x60 + (x58 + (x55 + (x51 + (x47 + (x43 + (x20 + (x14 + (x10 + x8)))))))))))))));
  let x105: fiat_p448_u128 = (x94 + (x87 + (x81 + (x76 + (x72 + (x62 + (x61 + (x59 + (x56 + (x52 + (x48 + (x44 + (x26 + (x21 + (x15 + (x12 + (x11 + x9)))))))))))))))));
  let x106: fiat_p448_u128 = (x96 + (x89 + (x83 + (x35 + (x32 + (x28 + (x23 + (x17 + x1))))))));
  let x107: fiat_p448_u128 = (x97 + (x90 + (x38 + (x36 + (x33 + (x29 + (x24 + (x18 + (x4 + x2)))))))));
  let x108: fiat_p448_u128 = (x98 + (x40 + (x39 + (x37 + (x34 + (x30 + (x25 + (x19 + (x6 + (x5 + x3))))))))));
  let x109: fiat_p448_u128 = ((x100 as fiat_p448_u128) + x105);
  let x110: u64 = ((x102 >> 56) as u64);
  let x111: u64 = ((x102 & (0xffffffffffffff as fiat_p448_u128)) as u64);
  let x112: fiat_p448_u128 = (x109 + (x110 as fiat_p448_u128));
  let x113: u64 = ((x112 >> 56) as u64);
  let x114: u64 = ((x112 & (0xffffffffffffff as fiat_p448_u128)) as u64);
  let x115: fiat_p448_u128 = (x108 + (x110 as fiat_p448_u128));
  let x116: fiat_p448_u128 = ((x113 as fiat_p448_u128) + x104);
  let x117: u64 = ((x115 >> 56) as u64);
  let x118: u64 = ((x115 & (0xffffffffffffff as fiat_p448_u128)) as u64);
  let x119: fiat_p448_u128 = ((x117 as fiat_p448_u128) + x107);
  let x120: u64 = ((x116 >> 56) as u64);
  let x121: u64 = ((x116 & (0xffffffffffffff as fiat_p448_u128)) as u64);
  let x122: fiat_p448_u128 = ((x120 as fiat_p448_u128) + x103);
  let x123: u64 = ((x119 >> 56) as u64);
  let x124: u64 = ((x119 & (0xffffffffffffff as fiat_p448_u128)) as u64);
  let x125: fiat_p448_u128 = ((x123 as fiat_p448_u128) + x106);
  let x126: u64 = ((x122 >> 56) as u64);
  let x127: u64 = ((x122 & (0xffffffffffffff as fiat_p448_u128)) as u64);
  let x128: u64 = (x126 + x111);
  let x129: u64 = ((x125 >> 56) as u64);
  let x130: u64 = ((x125 & (0xffffffffffffff as fiat_p448_u128)) as u64);
  let x131: u64 = (x129 + x101);
  let x132: u64 = (x128 >> 56);
  let x133: u64 = (x128 & 0xffffffffffffff);
  let x134: u64 = (x131 >> 56);
  let x135: u64 = (x131 & 0xffffffffffffff);
  let x136: u64 = (x114 + x132);
  let x137: u64 = (x118 + x132);
  let x138: u64 = (x134 + x136);
  let x139: fiat_p448_u1 = ((x138 >> 56) as fiat_p448_u1);
  let x140: u64 = (x138 & 0xffffffffffffff);
  let x141: u64 = ((x139 as u64) + x121);
  let x142: fiat_p448_u1 = ((x137 >> 56) as fiat_p448_u1);
  let x143: u64 = (x137 & 0xffffffffffffff);
  let x144: u64 = ((x142 as u64) + x124);
  out1[0] = x143;
  out1[1] = x144;
  out1[2] = x130;
  out1[3] = x135;
  out1[4] = x140;
  out1[5] = x141;
  out1[6] = x127;
  out1[7] = x133;
}

/*
 * The function fiat_p448_carry_square squares a field element and reduces the result.
 * Postconditions:
 *   eval out1 mod m = (eval arg1 * eval arg1) mod m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999]]
 */
#[inline]
pub fn fiat_p448_carry_square(out1: &mut [u64; 8], arg1: &[u64; 8]) -> () {
  let x1: u64 = (arg1[7]);
  let x2: u64 = (arg1[7]);
  let x3: u64 = (x1 * (0x2 as u64));
  let x4: u64 = (x2 * (0x2 as u64));
  let x5: u64 = ((arg1[7]) * (0x2 as u64));
  let x6: u64 = (arg1[6]);
  let x7: u64 = (arg1[6]);
  let x8: u64 = (x6 * (0x2 as u64));
  let x9: u64 = (x7 * (0x2 as u64));
  let x10: u64 = ((arg1[6]) * (0x2 as u64));
  let x11: u64 = (arg1[5]);
  let x12: u64 = (arg1[5]);
  let x13: u64 = (x11 * (0x2 as u64));
  let x14: u64 = (x12 * (0x2 as u64));
  let x15: u64 = ((arg1[5]) * (0x2 as u64));
  let x16: u64 = (arg1[4]);
  let x17: u64 = (arg1[4]);
  let x18: u64 = ((arg1[4]) * (0x2 as u64));
  let x19: u64 = ((arg1[3]) * (0x2 as u64));
  let x20: u64 = ((arg1[2]) * (0x2 as u64));
  let x21: u64 = ((arg1[1]) * (0x2 as u64));
  let x22: fiat_p448_u128 = (((arg1[7]) as fiat_p448_u128) * (x1 as fiat_p448_u128));
  let x23: fiat_p448_u128 = (((arg1[6]) as fiat_p448_u128) * (x3 as fiat_p448_u128));
  let x24: fiat_p448_u128 = (((arg1[6]) as fiat_p448_u128) * (x6 as fiat_p448_u128));
  let x25: fiat_p448_u128 = (((arg1[5]) as fiat_p448_u128) * (x3 as fiat_p448_u128));
  let x26: fiat_p448_u128 = (((arg1[7]) as fiat_p448_u128) * (x1 as fiat_p448_u128));
  let x27: fiat_p448_u128 = (((arg1[6]) as fiat_p448_u128) * (x3 as fiat_p448_u128));
  let x28: fiat_p448_u128 = (((arg1[6]) as fiat_p448_u128) * (x6 as fiat_p448_u128));
  let x29: fiat_p448_u128 = (((arg1[5]) as fiat_p448_u128) * (x3 as fiat_p448_u128));
  let x30: fiat_p448_u128 = (((arg1[7]) as fiat_p448_u128) * (x2 as fiat_p448_u128));
  let x31: fiat_p448_u128 = (((arg1[6]) as fiat_p448_u128) * (x4 as fiat_p448_u128));
  let x32: fiat_p448_u128 = (((arg1[6]) as fiat_p448_u128) * (x7 as fiat_p448_u128));
  let x33: fiat_p448_u128 = (((arg1[5]) as fiat_p448_u128) * (x4 as fiat_p448_u128));
  let x34: fiat_p448_u128 = (((arg1[5]) as fiat_p448_u128) * (x9 as fiat_p448_u128));
  let x35: fiat_p448_u128 = (((arg1[5]) as fiat_p448_u128) * (x8 as fiat_p448_u128));
  let x36: fiat_p448_u128 = (((arg1[5]) as fiat_p448_u128) * (x12 as fiat_p448_u128));
  let x37: fiat_p448_u128 = (((arg1[5]) as fiat_p448_u128) * (x11 as fiat_p448_u128));
  let x38: fiat_p448_u128 = (((arg1[4]) as fiat_p448_u128) * (x4 as fiat_p448_u128));
  let x39: fiat_p448_u128 = (((arg1[4]) as fiat_p448_u128) * (x3 as fiat_p448_u128));
  let x40: fiat_p448_u128 = (((arg1[4]) as fiat_p448_u128) * (x9 as fiat_p448_u128));
  let x41: fiat_p448_u128 = (((arg1[4]) as fiat_p448_u128) * (x8 as fiat_p448_u128));
  let x42: fiat_p448_u128 = (((arg1[4]) as fiat_p448_u128) * (x14 as fiat_p448_u128));
  let x43: fiat_p448_u128 = (((arg1[4]) as fiat_p448_u128) * (x13 as fiat_p448_u128));
  let x44: fiat_p448_u128 = (((arg1[4]) as fiat_p448_u128) * (x17 as fiat_p448_u128));
  let x45: fiat_p448_u128 = (((arg1[4]) as fiat_p448_u128) * (x16 as fiat_p448_u128));
  let x46: fiat_p448_u128 = (((arg1[3]) as fiat_p448_u128) * (x4 as fiat_p448_u128));
  let x47: fiat_p448_u128 = (((arg1[3]) as fiat_p448_u128) * (x3 as fiat_p448_u128));
  let x48: fiat_p448_u128 = (((arg1[3]) as fiat_p448_u128) * (x9 as fiat_p448_u128));
  let x49: fiat_p448_u128 = (((arg1[3]) as fiat_p448_u128) * (x8 as fiat_p448_u128));
  let x50: fiat_p448_u128 = (((arg1[3]) as fiat_p448_u128) * (x14 as fiat_p448_u128));
  let x51: fiat_p448_u128 = (((arg1[3]) as fiat_p448_u128) * (x13 as fiat_p448_u128));
  let x52: fiat_p448_u128 = (((arg1[3]) as fiat_p448_u128) * (x18 as fiat_p448_u128));
  let x53: fiat_p448_u128 = (((arg1[3]) as fiat_p448_u128) * ((arg1[3]) as fiat_p448_u128));
  let x54: fiat_p448_u128 = (((arg1[2]) as fiat_p448_u128) * (x4 as fiat_p448_u128));
  let x55: fiat_p448_u128 = (((arg1[2]) as fiat_p448_u128) * (x3 as fiat_p448_u128));
  let x56: fiat_p448_u128 = (((arg1[2]) as fiat_p448_u128) * (x9 as fiat_p448_u128));
  let x57: fiat_p448_u128 = (((arg1[2]) as fiat_p448_u128) * (x8 as fiat_p448_u128));
  let x58: fiat_p448_u128 = (((arg1[2]) as fiat_p448_u128) * (x15 as fiat_p448_u128));
  let x59: fiat_p448_u128 = (((arg1[2]) as fiat_p448_u128) * (x18 as fiat_p448_u128));
  let x60: fiat_p448_u128 = (((arg1[2]) as fiat_p448_u128) * (x19 as fiat_p448_u128));
  let x61: fiat_p448_u128 = (((arg1[2]) as fiat_p448_u128) * ((arg1[2]) as fiat_p448_u128));
  let x62: fiat_p448_u128 = (((arg1[1]) as fiat_p448_u128) * (x4 as fiat_p448_u128));
  let x63: fiat_p448_u128 = (((arg1[1]) as fiat_p448_u128) * (x3 as fiat_p448_u128));
  let x64: fiat_p448_u128 = (((arg1[1]) as fiat_p448_u128) * (x10 as fiat_p448_u128));
  let x65: fiat_p448_u128 = (((arg1[1]) as fiat_p448_u128) * (x15 as fiat_p448_u128));
  let x66: fiat_p448_u128 = (((arg1[1]) as fiat_p448_u128) * (x18 as fiat_p448_u128));
  let x67: fiat_p448_u128 = (((arg1[1]) as fiat_p448_u128) * (x19 as fiat_p448_u128));
  let x68: fiat_p448_u128 = (((arg1[1]) as fiat_p448_u128) * (x20 as fiat_p448_u128));
  let x69: fiat_p448_u128 = (((arg1[1]) as fiat_p448_u128) * ((arg1[1]) as fiat_p448_u128));
  let x70: fiat_p448_u128 = (((arg1[0]) as fiat_p448_u128) * (x5 as fiat_p448_u128));
  let x71: fiat_p448_u128 = (((arg1[0]) as fiat_p448_u128) * (x10 as fiat_p448_u128));
  let x72: fiat_p448_u128 = (((arg1[0]) as fiat_p448_u128) * (x15 as fiat_p448_u128));
  let x73: fiat_p448_u128 = (((arg1[0]) as fiat_p448_u128) * (x18 as fiat_p448_u128));
  let x74: fiat_p448_u128 = (((arg1[0]) as fiat_p448_u128) * (x19 as fiat_p448_u128));
  let x75: fiat_p448_u128 = (((arg1[0]) as fiat_p448_u128) * (x20 as fiat_p448_u128));
  let x76: fiat_p448_u128 = (((arg1[0]) as fiat_p448_u128) * (x21 as fiat_p448_u128));
  let x77: fiat_p448_u128 = (((arg1[0]) as fiat_p448_u128) * ((arg1[0]) as fiat_p448_u128));
  let x78: fiat_p448_u128 = (x74 + (x68 + (x38 + x34)));
  let x79: u64 = ((x78 >> 56) as u64);
  let x80: u64 = ((x78 & (0xffffffffffffff as fiat_p448_u128)) as u64);
  let x81: fiat_p448_u128 = (x70 + (x64 + (x58 + (x52 + (x39 + x35)))));
  let x82: fiat_p448_u128 = (x71 + (x65 + (x59 + (x53 + (x47 + (x41 + (x37 + (x30 + x26))))))));
  let x83: fiat_p448_u128 = (x72 + (x66 + (x60 + (x55 + (x49 + (x43 + (x31 + x27)))))));
  let x84: fiat_p448_u128 = (x73 + (x67 + (x63 + (x61 + (x57 + (x51 + (x45 + (x33 + (x32 + (x29 + x28))))))))));
  let x85: fiat_p448_u128 = (x75 + (x69 + (x46 + (x40 + (x36 + x22)))));
  let x86: fiat_p448_u128 = (x76 + (x54 + (x48 + (x42 + x23))));
  let x87: fiat_p448_u128 = (x77 + (x62 + (x56 + (x50 + (x44 + (x25 + x24))))));
  let x88: fiat_p448_u128 = ((x79 as fiat_p448_u128) + x84);
  let x89: u64 = ((x81 >> 56) as u64);
  let x90: u64 = ((x81 & (0xffffffffffffff as fiat_p448_u128)) as u64);
  let x91: fiat_p448_u128 = (x88 + (x89 as fiat_p448_u128));
  let x92: u64 = ((x91 >> 56) as u64);
  let x93: u64 = ((x91 & (0xffffffffffffff as fiat_p448_u128)) as u64);
  let x94: fiat_p448_u128 = (x87 + (x89 as fiat_p448_u128));
  let x95: fiat_p448_u128 = ((x92 as fiat_p448_u128) + x83);
  let x96: u64 = ((x94 >> 56) as u64);
  let x97: u64 = ((x94 & (0xffffffffffffff as fiat_p448_u128)) as u64);
  let x98: fiat_p448_u128 = ((x96 as fiat_p448_u128) + x86);
  let x99: u64 = ((x95 >> 56) as u64);
  let x100: u64 = ((x95 & (0xffffffffffffff as fiat_p448_u128)) as u64);
  let x101: fiat_p448_u128 = ((x99 as fiat_p448_u128) + x82);
  let x102: u64 = ((x98 >> 56) as u64);
  let x103: u64 = ((x98 & (0xffffffffffffff as fiat_p448_u128)) as u64);
  let x104: fiat_p448_u128 = ((x102 as fiat_p448_u128) + x85);
  let x105: u64 = ((x101 >> 56) as u64);
  let x106: u64 = ((x101 & (0xffffffffffffff as fiat_p448_u128)) as u64);
  let x107: u64 = (x105 + x90);
  let x108: u64 = ((x104 >> 56) as u64);
  let x109: u64 = ((x104 & (0xffffffffffffff as fiat_p448_u128)) as u64);
  let x110: u64 = (x108 + x80);
  let x111: u64 = (x107 >> 56);
  let x112: u64 = (x107 & 0xffffffffffffff);
  let x113: u64 = (x110 >> 56);
  let x114: u64 = (x110 & 0xffffffffffffff);
  let x115: u64 = (x93 + x111);
  let x116: u64 = (x97 + x111);
  let x117: u64 = (x113 + x115);
  let x118: fiat_p448_u1 = ((x117 >> 56) as fiat_p448_u1);
  let x119: u64 = (x117 & 0xffffffffffffff);
  let x120: u64 = ((x118 as u64) + x100);
  let x121: fiat_p448_u1 = ((x116 >> 56) as fiat_p448_u1);
  let x122: u64 = (x116 & 0xffffffffffffff);
  let x123: u64 = ((x121 as u64) + x103);
  out1[0] = x122;
  out1[1] = x123;
  out1[2] = x109;
  out1[3] = x114;
  out1[4] = x119;
  out1[5] = x120;
  out1[6] = x106;
  out1[7] = x112;
}

/*
 * The function fiat_p448_carry reduces a field element.
 * Postconditions:
 *   eval out1 mod m = eval arg1 mod m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999]]
 */
#[inline]
pub fn fiat_p448_carry(out1: &mut [u64; 8], arg1: &[u64; 8]) -> () {
  let x1: u64 = (arg1[3]);
  let x2: u64 = (arg1[7]);
  let x3: u64 = (x2 >> 56);
  let x4: u64 = (((x1 >> 56) + (arg1[4])) + x3);
  let x5: u64 = ((arg1[0]) + x3);
  let x6: u64 = ((x4 >> 56) + (arg1[5]));
  let x7: u64 = ((x5 >> 56) + (arg1[1]));
  let x8: u64 = ((x6 >> 56) + (arg1[6]));
  let x9: u64 = ((x7 >> 56) + (arg1[2]));
  let x10: u64 = ((x8 >> 56) + (x2 & 0xffffffffffffff));
  let x11: u64 = ((x9 >> 56) + (x1 & 0xffffffffffffff));
  let x12: fiat_p448_u1 = ((x10 >> 56) as fiat_p448_u1);
  let x13: u64 = ((x5 & 0xffffffffffffff) + (x12 as u64));
  let x14: u64 = ((((x11 >> 56) as fiat_p448_u1) as u64) + ((x4 & 0xffffffffffffff) + (x12 as u64)));
  let x15: u64 = (x13 & 0xffffffffffffff);
  let x16: u64 = ((((x13 >> 56) as fiat_p448_u1) as u64) + (x7 & 0xffffffffffffff));
  let x17: u64 = (x9 & 0xffffffffffffff);
  let x18: u64 = (x11 & 0xffffffffffffff);
  let x19: u64 = (x14 & 0xffffffffffffff);
  let x20: u64 = ((((x14 >> 56) as fiat_p448_u1) as u64) + (x6 & 0xffffffffffffff));
  let x21: u64 = (x8 & 0xffffffffffffff);
  let x22: u64 = (x10 & 0xffffffffffffff);
  out1[0] = x15;
  out1[1] = x16;
  out1[2] = x17;
  out1[3] = x18;
  out1[4] = x19;
  out1[5] = x20;
  out1[6] = x21;
  out1[7] = x22;
}

/*
 * The function fiat_p448_add adds two field elements.
 * Postconditions:
 *   eval out1 mod m = (eval arg1 + eval arg2) mod m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999]]
 *   arg2: [[0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb]]
 */
#[inline]
pub fn fiat_p448_add(out1: &mut [u64; 8], arg1: &[u64; 8], arg2: &[u64; 8]) -> () {
  let x1: u64 = ((arg1[0]) + (arg2[0]));
  let x2: u64 = ((arg1[1]) + (arg2[1]));
  let x3: u64 = ((arg1[2]) + (arg2[2]));
  let x4: u64 = ((arg1[3]) + (arg2[3]));
  let x5: u64 = ((arg1[4]) + (arg2[4]));
  let x6: u64 = ((arg1[5]) + (arg2[5]));
  let x7: u64 = ((arg1[6]) + (arg2[6]));
  let x8: u64 = ((arg1[7]) + (arg2[7]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
  out1[4] = x5;
  out1[5] = x6;
  out1[6] = x7;
  out1[7] = x8;
}

/*
 * The function fiat_p448_sub subtracts two field elements.
 * Postconditions:
 *   eval out1 mod m = (eval arg1 - eval arg2) mod m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999]]
 *   arg2: [[0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb]]
 */
#[inline]
pub fn fiat_p448_sub(out1: &mut [u64; 8], arg1: &[u64; 8], arg2: &[u64; 8]) -> () {
  let x1: u64 = ((0x1fffffffffffffe + (arg1[0])) - (arg2[0]));
  let x2: u64 = ((0x1fffffffffffffe + (arg1[1])) - (arg2[1]));
  let x3: u64 = ((0x1fffffffffffffe + (arg1[2])) - (arg2[2]));
  let x4: u64 = ((0x1fffffffffffffe + (arg1[3])) - (arg2[3]));
  let x5: u64 = ((0x1fffffffffffffc + (arg1[4])) - (arg2[4]));
  let x6: u64 = ((0x1fffffffffffffe + (arg1[5])) - (arg2[5]));
  let x7: u64 = ((0x1fffffffffffffe + (arg1[6])) - (arg2[6]));
  let x8: u64 = ((0x1fffffffffffffe + (arg1[7])) - (arg2[7]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
  out1[4] = x5;
  out1[5] = x6;
  out1[6] = x7;
  out1[7] = x8;
}

/*
 * The function fiat_p448_opp negates a field element.
 * Postconditions:
 *   eval out1 mod m = -eval arg1 mod m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb], [0x0 ~> 0x34ccccccccccccb]]
 */
#[inline]
pub fn fiat_p448_opp(out1: &mut [u64; 8], arg1: &[u64; 8]) -> () {
  let x1: u64 = (0x1fffffffffffffe - (arg1[0]));
  let x2: u64 = (0x1fffffffffffffe - (arg1[1]));
  let x3: u64 = (0x1fffffffffffffe - (arg1[2]));
  let x4: u64 = (0x1fffffffffffffe - (arg1[3]));
  let x5: u64 = (0x1fffffffffffffc - (arg1[4]));
  let x6: u64 = (0x1fffffffffffffe - (arg1[5]));
  let x7: u64 = (0x1fffffffffffffe - (arg1[6]));
  let x8: u64 = (0x1fffffffffffffe - (arg1[7]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
  out1[4] = x5;
  out1[5] = x6;
  out1[6] = x7;
  out1[7] = x8;
}

/*
 * The function fiat_p448_selectznz is a multi-limb conditional select.
 * Postconditions:
 *   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_p448_selectznz(out1: &mut [u64; 8], arg1: fiat_p448_u1, arg2: &[u64; 8], arg3: &[u64; 8]) -> () {
  let mut x1: u64 = 0;
  fiat_p448_cmovznz_u64(&mut x1, arg1, (arg2[0]), (arg3[0]));
  let mut x2: u64 = 0;
  fiat_p448_cmovznz_u64(&mut x2, arg1, (arg2[1]), (arg3[1]));
  let mut x3: u64 = 0;
  fiat_p448_cmovznz_u64(&mut x3, arg1, (arg2[2]), (arg3[2]));
  let mut x4: u64 = 0;
  fiat_p448_cmovznz_u64(&mut x4, arg1, (arg2[3]), (arg3[3]));
  let mut x5: u64 = 0;
  fiat_p448_cmovznz_u64(&mut x5, arg1, (arg2[4]), (arg3[4]));
  let mut x6: u64 = 0;
  fiat_p448_cmovznz_u64(&mut x6, arg1, (arg2[5]), (arg3[5]));
  let mut x7: u64 = 0;
  fiat_p448_cmovznz_u64(&mut x7, arg1, (arg2[6]), (arg3[6]));
  let mut x8: u64 = 0;
  fiat_p448_cmovznz_u64(&mut x8, arg1, (arg2[7]), (arg3[7]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
  out1[4] = x5;
  out1[5] = x6;
  out1[6] = x7;
  out1[7] = x8;
}

/*
 * The function fiat_p448_to_bytes serializes a field element to bytes in little-endian order.
 * Postconditions:
 *   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..55]
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
 */
#[inline]
pub fn fiat_p448_to_bytes(out1: &mut [u8; 56], arg1: &[u64; 8]) -> () {
  let mut x1: u64 = 0;
  let mut x2: fiat_p448_u1 = 0;
  fiat_p448_subborrowx_u56(&mut x1, &mut x2, 0x0, (arg1[0]), 0xffffffffffffff);
  let mut x3: u64 = 0;
  let mut x4: fiat_p448_u1 = 0;
  fiat_p448_subborrowx_u56(&mut x3, &mut x4, x2, (arg1[1]), 0xffffffffffffff);
  let mut x5: u64 = 0;
  let mut x6: fiat_p448_u1 = 0;
  fiat_p448_subborrowx_u56(&mut x5, &mut x6, x4, (arg1[2]), 0xffffffffffffff);
  let mut x7: u64 = 0;
  let mut x8: fiat_p448_u1 = 0;
  fiat_p448_subborrowx_u56(&mut x7, &mut x8, x6, (arg1[3]), 0xffffffffffffff);
  let mut x9: u64 = 0;
  let mut x10: fiat_p448_u1 = 0;
  fiat_p448_subborrowx_u56(&mut x9, &mut x10, x8, (arg1[4]), 0xfffffffffffffe);
  let mut x11: u64 = 0;
  let mut x12: fiat_p448_u1 = 0;
  fiat_p448_subborrowx_u56(&mut x11, &mut x12, x10, (arg1[5]), 0xffffffffffffff);
  let mut x13: u64 = 0;
  let mut x14: fiat_p448_u1 = 0;
  fiat_p448_subborrowx_u56(&mut x13, &mut x14, x12, (arg1[6]), 0xffffffffffffff);
  let mut x15: u64 = 0;
  let mut x16: fiat_p448_u1 = 0;
  fiat_p448_subborrowx_u56(&mut x15, &mut x16, x14, (arg1[7]), 0xffffffffffffff);
  let mut x17: u64 = 0;
  fiat_p448_cmovznz_u64(&mut x17, x16, (0x0 as u64), 0xffffffffffffffff);
  let mut x18: u64 = 0;
  let mut x19: fiat_p448_u1 = 0;
  fiat_p448_addcarryx_u56(&mut x18, &mut x19, 0x0, x1, (x17 & 0xffffffffffffff));
  let mut x20: u64 = 0;
  let mut x21: fiat_p448_u1 = 0;
  fiat_p448_addcarryx_u56(&mut x20, &mut x21, x19, x3, (x17 & 0xffffffffffffff));
  let mut x22: u64 = 0;
  let mut x23: fiat_p448_u1 = 0;
  fiat_p448_addcarryx_u56(&mut x22, &mut x23, x21, x5, (x17 & 0xffffffffffffff));
  let mut x24: u64 = 0;
  let mut x25: fiat_p448_u1 = 0;
  fiat_p448_addcarryx_u56(&mut x24, &mut x25, x23, x7, (x17 & 0xffffffffffffff));
  let mut x26: u64 = 0;
  let mut x27: fiat_p448_u1 = 0;
  fiat_p448_addcarryx_u56(&mut x26, &mut x27, x25, x9, (x17 & 0xfffffffffffffe));
  let mut x28: u64 = 0;
  let mut x29: fiat_p448_u1 = 0;
  fiat_p448_addcarryx_u56(&mut x28, &mut x29, x27, x11, (x17 & 0xffffffffffffff));
  let mut x30: u64 = 0;
  let mut x31: fiat_p448_u1 = 0;
  fiat_p448_addcarryx_u56(&mut x30, &mut x31, x29, x13, (x17 & 0xffffffffffffff));
  let mut x32: u64 = 0;
  let mut x33: fiat_p448_u1 = 0;
  fiat_p448_addcarryx_u56(&mut x32, &mut x33, x31, x15, (x17 & 0xffffffffffffff));
  let x34: u64 = (x18 >> 8);
  let x35: u8 = ((x18 & (0xff as u64)) as u8);
  let x36: u64 = (x34 >> 8);
  let x37: u8 = ((x34 & (0xff as u64)) as u8);
  let x38: u64 = (x36 >> 8);
  let x39: u8 = ((x36 & (0xff as u64)) as u8);
  let x40: u64 = (x38 >> 8);
  let x41: u8 = ((x38 & (0xff as u64)) as u8);
  let x42: u64 = (x40 >> 8);
  let x43: u8 = ((x40 & (0xff as u64)) as u8);
  let x44: u8 = ((x42 >> 8) as u8);
  let x45: u8 = ((x42 & (0xff as u64)) as u8);
  let x46: u8 = (x44 & 0xff);
  let x47: u64 = (x20 >> 8);
  let x48: u8 = ((x20 & (0xff as u64)) as u8);
  let x49: u64 = (x47 >> 8);
  let x50: u8 = ((x47 & (0xff as u64)) as u8);
  let x51: u64 = (x49 >> 8);
  let x52: u8 = ((x49 & (0xff as u64)) as u8);
  let x53: u64 = (x51 >> 8);
  let x54: u8 = ((x51 & (0xff as u64)) as u8);
  let x55: u64 = (x53 >> 8);
  let x56: u8 = ((x53 & (0xff as u64)) as u8);
  let x57: u8 = ((x55 >> 8) as u8);
  let x58: u8 = ((x55 & (0xff as u64)) as u8);
  let x59: u8 = (x57 & 0xff);
  let x60: u64 = (x22 >> 8);
  let x61: u8 = ((x22 & (0xff as u64)) as u8);
  let x62: u64 = (x60 >> 8);
  let x63: u8 = ((x60 & (0xff as u64)) as u8);
  let x64: u64 = (x62 >> 8);
  let x65: u8 = ((x62 & (0xff as u64)) as u8);
  let x66: u64 = (x64 >> 8);
  let x67: u8 = ((x64 & (0xff as u64)) as u8);
  let x68: u64 = (x66 >> 8);
  let x69: u8 = ((x66 & (0xff as u64)) as u8);
  let x70: u8 = ((x68 >> 8) as u8);
  let x71: u8 = ((x68 & (0xff as u64)) as u8);
  let x72: u8 = (x70 & 0xff);
  let x73: u64 = (x24 >> 8);
  let x74: u8 = ((x24 & (0xff as u64)) as u8);
  let x75: u64 = (x73 >> 8);
  let x76: u8 = ((x73 & (0xff as u64)) as u8);
  let x77: u64 = (x75 >> 8);
  let x78: u8 = ((x75 & (0xff as u64)) as u8);
  let x79: u64 = (x77 >> 8);
  let x80: u8 = ((x77 & (0xff as u64)) as u8);
  let x81: u64 = (x79 >> 8);
  let x82: u8 = ((x79 & (0xff as u64)) as u8);
  let x83: u8 = ((x81 >> 8) as u8);
  let x84: u8 = ((x81 & (0xff as u64)) as u8);
  let x85: u8 = (x83 & 0xff);
  let x86: u64 = (x26 >> 8);
  let x87: u8 = ((x26 & (0xff as u64)) as u8);
  let x88: u64 = (x86 >> 8);
  let x89: u8 = ((x86 & (0xff as u64)) as u8);
  let x90: u64 = (x88 >> 8);
  let x91: u8 = ((x88 & (0xff as u64)) as u8);
  let x92: u64 = (x90 >> 8);
  let x93: u8 = ((x90 & (0xff as u64)) as u8);
  let x94: u64 = (x92 >> 8);
  let x95: u8 = ((x92 & (0xff as u64)) as u8);
  let x96: u8 = ((x94 >> 8) as u8);
  let x97: u8 = ((x94 & (0xff as u64)) as u8);
  let x98: u8 = (x96 & 0xff);
  let x99: u64 = (x28 >> 8);
  let x100: u8 = ((x28 & (0xff as u64)) as u8);
  let x101: u64 = (x99 >> 8);
  let x102: u8 = ((x99 & (0xff as u64)) as u8);
  let x103: u64 = (x101 >> 8);
  let x104: u8 = ((x101 & (0xff as u64)) as u8);
  let x105: u64 = (x103 >> 8);
  let x106: u8 = ((x103 & (0xff as u64)) as u8);
  let x107: u64 = (x105 >> 8);
  let x108: u8 = ((x105 & (0xff as u64)) as u8);
  let x109: u8 = ((x107 >> 8) as u8);
  let x110: u8 = ((x107 & (0xff as u64)) as u8);
  let x111: u8 = (x109 & 0xff);
  let x112: u64 = (x30 >> 8);
  let x113: u8 = ((x30 & (0xff as u64)) as u8);
  let x114: u64 = (x112 >> 8);
  let x115: u8 = ((x112 & (0xff as u64)) as u8);
  let x116: u64 = (x114 >> 8);
  let x117: u8 = ((x114 & (0xff as u64)) as u8);
  let x118: u64 = (x116 >> 8);
  let x119: u8 = ((x116 & (0xff as u64)) as u8);
  let x120: u64 = (x118 >> 8);
  let x121: u8 = ((x118 & (0xff as u64)) as u8);
  let x122: u8 = ((x120 >> 8) as u8);
  let x123: u8 = ((x120 & (0xff as u64)) as u8);
  let x124: u8 = (x122 & 0xff);
  let x125: u64 = (x32 >> 8);
  let x126: u8 = ((x32 & (0xff as u64)) as u8);
  let x127: u64 = (x125 >> 8);
  let x128: u8 = ((x125 & (0xff as u64)) as u8);
  let x129: u64 = (x127 >> 8);
  let x130: u8 = ((x127 & (0xff as u64)) as u8);
  let x131: u64 = (x129 >> 8);
  let x132: u8 = ((x129 & (0xff as u64)) as u8);
  let x133: u64 = (x131 >> 8);
  let x134: u8 = ((x131 & (0xff as u64)) as u8);
  let x135: u8 = ((x133 >> 8) as u8);
  let x136: u8 = ((x133 & (0xff as u64)) as u8);
  out1[0] = x35;
  out1[1] = x37;
  out1[2] = x39;
  out1[3] = x41;
  out1[4] = x43;
  out1[5] = x45;
  out1[6] = x46;
  out1[7] = x48;
  out1[8] = x50;
  out1[9] = x52;
  out1[10] = x54;
  out1[11] = x56;
  out1[12] = x58;
  out1[13] = x59;
  out1[14] = x61;
  out1[15] = x63;
  out1[16] = x65;
  out1[17] = x67;
  out1[18] = x69;
  out1[19] = x71;
  out1[20] = x72;
  out1[21] = x74;
  out1[22] = x76;
  out1[23] = x78;
  out1[24] = x80;
  out1[25] = x82;
  out1[26] = x84;
  out1[27] = x85;
  out1[28] = x87;
  out1[29] = x89;
  out1[30] = x91;
  out1[31] = x93;
  out1[32] = x95;
  out1[33] = x97;
  out1[34] = x98;
  out1[35] = x100;
  out1[36] = x102;
  out1[37] = x104;
  out1[38] = x106;
  out1[39] = x108;
  out1[40] = x110;
  out1[41] = x111;
  out1[42] = x113;
  out1[43] = x115;
  out1[44] = x117;
  out1[45] = x119;
  out1[46] = x121;
  out1[47] = x123;
  out1[48] = x124;
  out1[49] = x126;
  out1[50] = x128;
  out1[51] = x130;
  out1[52] = x132;
  out1[53] = x134;
  out1[54] = x136;
  out1[55] = x135;
}

/*
 * The function fiat_p448_from_bytes deserializes a field element from bytes in little-endian order.
 * Postconditions:
 *   eval out1 mod m = bytes_eval arg1 mod m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999], [0x0 ~> 0x119999999999999]]
 */
#[inline]
pub fn fiat_p448_from_bytes(out1: &mut [u64; 8], arg1: &[u8; 56]) -> () {
  let x1: u64 = (((arg1[55]) as u64) << 48);
  let x2: u64 = (((arg1[54]) as u64) << 40);
  let x3: u64 = (((arg1[53]) as u64) << 32);
  let x4: u64 = (((arg1[52]) as u64) << 24);
  let x5: u64 = (((arg1[51]) as u64) << 16);
  let x6: u64 = (((arg1[50]) as u64) << 8);
  let x7: u8 = (arg1[49]);
  let x8: u64 = (((arg1[48]) as u64) << 48);
  let x9: u64 = (((arg1[47]) as u64) << 40);
  let x10: u64 = (((arg1[46]) as u64) << 32);
  let x11: u64 = (((arg1[45]) as u64) << 24);
  let x12: u64 = (((arg1[44]) as u64) << 16);
  let x13: u64 = (((arg1[43]) as u64) << 8);
  let x14: u8 = (arg1[42]);
  let x15: u64 = (((arg1[41]) as u64) << 48);
  let x16: u64 = (((arg1[40]) as u64) << 40);
  let x17: u64 = (((arg1[39]) as u64) << 32);
  let x18: u64 = (((arg1[38]) as u64) << 24);
  let x19: u64 = (((arg1[37]) as u64) << 16);
  let x20: u64 = (((arg1[36]) as u64) << 8);
  let x21: u8 = (arg1[35]);
  let x22: u64 = (((arg1[34]) as u64) << 48);
  let x23: u64 = (((arg1[33]) as u64) << 40);
  let x24: u64 = (((arg1[32]) as u64) << 32);
  let x25: u64 = (((arg1[31]) as u64) << 24);
  let x26: u64 = (((arg1[30]) as u64) << 16);
  let x27: u64 = (((arg1[29]) as u64) << 8);
  let x28: u8 = (arg1[28]);
  let x29: u64 = (((arg1[27]) as u64) << 48);
  let x30: u64 = (((arg1[26]) as u64) << 40);
  let x31: u64 = (((arg1[25]) as u64) << 32);
  let x32: u64 = (((arg1[24]) as u64) << 24);
  let x33: u64 = (((arg1[23]) as u64) << 16);
  let x34: u64 = (((arg1[22]) as u64) << 8);
  let x35: u8 = (arg1[21]);
  let x36: u64 = (((arg1[20]) as u64) << 48);
  let x37: u64 = (((arg1[19]) as u64) << 40);
  let x38: u64 = (((arg1[18]) as u64) << 32);
  let x39: u64 = (((arg1[17]) as u64) << 24);
  let x40: u64 = (((arg1[16]) as u64) << 16);
  let x41: u64 = (((arg1[15]) as u64) << 8);
  let x42: u8 = (arg1[14]);
  let x43: u64 = (((arg1[13]) as u64) << 48);
  let x44: u64 = (((arg1[12]) as u64) << 40);
  let x45: u64 = (((arg1[11]) as u64) << 32);
  let x46: u64 = (((arg1[10]) as u64) << 24);
  let x47: u64 = (((arg1[9]) as u64) << 16);
  let x48: u64 = (((arg1[8]) as u64) << 8);
  let x49: u8 = (arg1[7]);
  let x50: u64 = (((arg1[6]) as u64) << 48);
  let x51: u64 = (((arg1[5]) as u64) << 40);
  let x52: u64 = (((arg1[4]) as u64) << 32);
  let x53: u64 = (((arg1[3]) as u64) << 24);
  let x54: u64 = (((arg1[2]) as u64) << 16);
  let x55: u64 = (((arg1[1]) as u64) << 8);
  let x56: u8 = (arg1[0]);
  let x57: u64 = ((x56 as u64) + (x55 + (x54 + (x53 + (x52 + (x51 + x50))))));
  let x58: u64 = (x57 & 0xffffffffffffff);
  let x59: u64 = ((x7 as u64) + (x6 + (x5 + (x4 + (x3 + (x2 + x1))))));
  let x60: u64 = ((x14 as u64) + (x13 + (x12 + (x11 + (x10 + (x9 + x8))))));
  let x61: u64 = ((x21 as u64) + (x20 + (x19 + (x18 + (x17 + (x16 + x15))))));
  let x62: u64 = ((x28 as u64) + (x27 + (x26 + (x25 + (x24 + (x23 + x22))))));
  let x63: u64 = ((x35 as u64) + (x34 + (x33 + (x32 + (x31 + (x30 + x29))))));
  let x64: u64 = ((x42 as u64) + (x41 + (x40 + (x39 + (x38 + (x37 + x36))))));
  let x65: u64 = ((x49 as u64) + (x48 + (x47 + (x46 + (x45 + (x44 + x43))))));
  let x66: u64 = (x65 & 0xffffffffffffff);
  let x67: u64 = (x64 & 0xffffffffffffff);
  let x68: u64 = (x63 & 0xffffffffffffff);
  let x69: u64 = (x62 & 0xffffffffffffff);
  let x70: u64 = (x61 & 0xffffffffffffff);
  let x71: u64 = (x60 & 0xffffffffffffff);
  out1[0] = x58;
  out1[1] = x66;
  out1[2] = x67;
  out1[3] = x68;
  out1[4] = x69;
  out1[5] = x70;
  out1[6] = x71;
  out1[7] = x59;
}

