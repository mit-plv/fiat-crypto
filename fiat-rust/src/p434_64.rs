/* Autogenerated: src/ExtractionOCaml/word_by_word_montgomery --lang=Rust p434 '2^216 * 3^137 - 1' 64 mul square add sub opp from_montgomery nonzero selectznz to_bytes from_bytes */
/* curve description: p434 */
/* requested operations: mul, square, add, sub, opp, from_montgomery, nonzero, selectznz, to_bytes, from_bytes */
/* m = 0x2341f271773446cfc5fd681c520567bc65c783158aea3fdc1767ae2ffffffffffffffffffffffffffffffffffffffffffffffffffffff (from "2^216 * 3^137 - 1") */
/* machine_wordsize = 64 (from "64") */
/*                                                                    */
/* NOTE: In addition to the bounds specified above each function, all */
/*   functions synthesized for this Montgomery arithmetic require the */
/*   input to be strictly less than the prime modulus (m), and also   */
/*   require the input to be in the unique saturated representation.  */
/*   All functions also ensure that these two properties are true of  */
/*   return values.                                                   */

#![allow(unused_parens)]
#[allow(non_camel_case_types)]

pub type fiat_p434_u1 = u8;
pub type fiat_p434_i1 = i8;
pub type fiat_p434_u2 = u8;
pub type fiat_p434_i2 = i8;


/*
 * The function fiat_p434_addcarryx_u64 is an addition with carry.
 * Postconditions:
 *   out1 = (arg1 + arg2 + arg3) mod 2^64
 *   out2 = ⌊(arg1 + arg2 + arg3) / 2^64⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 *   arg3: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 *   out2: [0x0 ~> 0x1]
 */
#[inline]
pub fn fiat_p434_addcarryx_u64(out1: &mut u64, out2: &mut fiat_p434_u1, arg1: fiat_p434_u1, arg2: u64, arg3: u64) -> () {
  let x1: u128 = (((arg1 as u128) + (arg2 as u128)) + (arg3 as u128));
  let x2: u64 = ((x1 & (0xffffffffffffffff as u128)) as u64);
  let x3: fiat_p434_u1 = ((x1 >> 64) as fiat_p434_u1);
  *out1 = x2;
  *out2 = x3;
}

/*
 * The function fiat_p434_subborrowx_u64 is a subtraction with borrow.
 * Postconditions:
 *   out1 = (-arg1 + arg2 + -arg3) mod 2^64
 *   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^64⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 *   arg3: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 *   out2: [0x0 ~> 0x1]
 */
#[inline]
pub fn fiat_p434_subborrowx_u64(out1: &mut u64, out2: &mut fiat_p434_u1, arg1: fiat_p434_u1, arg2: u64, arg3: u64) -> () {
  let x1: i128 = (((arg2 as i128) - (arg1 as i128)) - (arg3 as i128));
  let x2: fiat_p434_i1 = ((x1 >> 64) as fiat_p434_i1);
  let x3: u64 = ((x1 & (0xffffffffffffffff as i128)) as u64);
  *out1 = x3;
  *out2 = (((0x0 as fiat_p434_i2) - (x2 as fiat_p434_i2)) as fiat_p434_u1);
}

/*
 * The function fiat_p434_mulx_u64 is a multiplication, returning the full double-width result.
 * Postconditions:
 *   out1 = (arg1 * arg2) mod 2^64
 *   out2 = ⌊arg1 * arg2 / 2^64⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0xffffffffffffffff]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 *   out2: [0x0 ~> 0xffffffffffffffff]
 */
#[inline]
pub fn fiat_p434_mulx_u64(out1: &mut u64, out2: &mut u64, arg1: u64, arg2: u64) -> () {
  let x1: u128 = ((arg1 as u128) * (arg2 as u128));
  let x2: u64 = ((x1 & (0xffffffffffffffff as u128)) as u64);
  let x3: u64 = ((x1 >> 64) as u64);
  *out1 = x2;
  *out2 = x3;
}

/*
 * The function fiat_p434_cmovznz_u64 is a single-word conditional move.
 * Postconditions:
 *   out1 = (if arg1 = 0 then arg2 else arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 *   arg3: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 */
#[inline]
pub fn fiat_p434_cmovznz_u64(out1: &mut u64, arg1: fiat_p434_u1, arg2: u64, arg3: u64) -> () {
  let x1: fiat_p434_u1 = (!(!arg1));
  let x2: u64 = ((((((0x0 as fiat_p434_i2) - (x1 as fiat_p434_i2)) as fiat_p434_i1) as i128) & (0xffffffffffffffff as i128)) as u64);
  let x3: u64 = ((x2 & arg3) | ((!x2) & arg2));
  *out1 = x3;
}

/*
 * The function fiat_p434_mul multiplies two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_p434_mul(out1: &mut [u64; 7], arg1: &[u64; 7], arg2: &[u64; 7]) -> () {
  let x1: u64 = (arg1[1]);
  let x2: u64 = (arg1[2]);
  let x3: u64 = (arg1[3]);
  let x4: u64 = (arg1[4]);
  let x5: u64 = (arg1[5]);
  let x6: u64 = (arg1[6]);
  let x7: u64 = (arg1[0]);
  let mut x8: u64 = 0;
  let mut x9: u64 = 0;
  fiat_p434_mulx_u64(&mut x8, &mut x9, x7, (arg2[6]));
  let mut x10: u64 = 0;
  let mut x11: u64 = 0;
  fiat_p434_mulx_u64(&mut x10, &mut x11, x7, (arg2[5]));
  let mut x12: u64 = 0;
  let mut x13: u64 = 0;
  fiat_p434_mulx_u64(&mut x12, &mut x13, x7, (arg2[4]));
  let mut x14: u64 = 0;
  let mut x15: u64 = 0;
  fiat_p434_mulx_u64(&mut x14, &mut x15, x7, (arg2[3]));
  let mut x16: u64 = 0;
  let mut x17: u64 = 0;
  fiat_p434_mulx_u64(&mut x16, &mut x17, x7, (arg2[2]));
  let mut x18: u64 = 0;
  let mut x19: u64 = 0;
  fiat_p434_mulx_u64(&mut x18, &mut x19, x7, (arg2[1]));
  let mut x20: u64 = 0;
  let mut x21: u64 = 0;
  fiat_p434_mulx_u64(&mut x20, &mut x21, x7, (arg2[0]));
  let mut x22: u64 = 0;
  let mut x23: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x22, &mut x23, 0x0, x21, x18);
  let mut x24: u64 = 0;
  let mut x25: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x24, &mut x25, x23, x19, x16);
  let mut x26: u64 = 0;
  let mut x27: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x26, &mut x27, x25, x17, x14);
  let mut x28: u64 = 0;
  let mut x29: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x28, &mut x29, x27, x15, x12);
  let mut x30: u64 = 0;
  let mut x31: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x30, &mut x31, x29, x13, x10);
  let mut x32: u64 = 0;
  let mut x33: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x32, &mut x33, x31, x11, x8);
  let x34: u64 = ((x33 as u64) + x9);
  let mut x35: u64 = 0;
  let mut x36: u64 = 0;
  fiat_p434_mulx_u64(&mut x35, &mut x36, x20, 0x2341f27177344);
  let mut x37: u64 = 0;
  let mut x38: u64 = 0;
  fiat_p434_mulx_u64(&mut x37, &mut x38, x20, 0x6cfc5fd681c52056);
  let mut x39: u64 = 0;
  let mut x40: u64 = 0;
  fiat_p434_mulx_u64(&mut x39, &mut x40, x20, 0x7bc65c783158aea3);
  let mut x41: u64 = 0;
  let mut x42: u64 = 0;
  fiat_p434_mulx_u64(&mut x41, &mut x42, x20, 0xfdc1767ae2ffffff);
  let mut x43: u64 = 0;
  let mut x44: u64 = 0;
  fiat_p434_mulx_u64(&mut x43, &mut x44, x20, 0xffffffffffffffff);
  let mut x45: u64 = 0;
  let mut x46: u64 = 0;
  fiat_p434_mulx_u64(&mut x45, &mut x46, x20, 0xffffffffffffffff);
  let mut x47: u64 = 0;
  let mut x48: u64 = 0;
  fiat_p434_mulx_u64(&mut x47, &mut x48, x20, 0xffffffffffffffff);
  let mut x49: u64 = 0;
  let mut x50: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x49, &mut x50, 0x0, x48, x45);
  let mut x51: u64 = 0;
  let mut x52: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x51, &mut x52, x50, x46, x43);
  let mut x53: u64 = 0;
  let mut x54: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x53, &mut x54, x52, x44, x41);
  let mut x55: u64 = 0;
  let mut x56: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x55, &mut x56, x54, x42, x39);
  let mut x57: u64 = 0;
  let mut x58: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x57, &mut x58, x56, x40, x37);
  let mut x59: u64 = 0;
  let mut x60: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x59, &mut x60, x58, x38, x35);
  let x61: u64 = ((x60 as u64) + x36);
  let mut x62: u64 = 0;
  let mut x63: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x62, &mut x63, 0x0, x20, x47);
  let mut x64: u64 = 0;
  let mut x65: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x64, &mut x65, x63, x22, x49);
  let mut x66: u64 = 0;
  let mut x67: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x66, &mut x67, x65, x24, x51);
  let mut x68: u64 = 0;
  let mut x69: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x68, &mut x69, x67, x26, x53);
  let mut x70: u64 = 0;
  let mut x71: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x70, &mut x71, x69, x28, x55);
  let mut x72: u64 = 0;
  let mut x73: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x72, &mut x73, x71, x30, x57);
  let mut x74: u64 = 0;
  let mut x75: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x74, &mut x75, x73, x32, x59);
  let mut x76: u64 = 0;
  let mut x77: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x76, &mut x77, x75, x34, x61);
  let mut x78: u64 = 0;
  let mut x79: u64 = 0;
  fiat_p434_mulx_u64(&mut x78, &mut x79, x1, (arg2[6]));
  let mut x80: u64 = 0;
  let mut x81: u64 = 0;
  fiat_p434_mulx_u64(&mut x80, &mut x81, x1, (arg2[5]));
  let mut x82: u64 = 0;
  let mut x83: u64 = 0;
  fiat_p434_mulx_u64(&mut x82, &mut x83, x1, (arg2[4]));
  let mut x84: u64 = 0;
  let mut x85: u64 = 0;
  fiat_p434_mulx_u64(&mut x84, &mut x85, x1, (arg2[3]));
  let mut x86: u64 = 0;
  let mut x87: u64 = 0;
  fiat_p434_mulx_u64(&mut x86, &mut x87, x1, (arg2[2]));
  let mut x88: u64 = 0;
  let mut x89: u64 = 0;
  fiat_p434_mulx_u64(&mut x88, &mut x89, x1, (arg2[1]));
  let mut x90: u64 = 0;
  let mut x91: u64 = 0;
  fiat_p434_mulx_u64(&mut x90, &mut x91, x1, (arg2[0]));
  let mut x92: u64 = 0;
  let mut x93: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x92, &mut x93, 0x0, x91, x88);
  let mut x94: u64 = 0;
  let mut x95: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x94, &mut x95, x93, x89, x86);
  let mut x96: u64 = 0;
  let mut x97: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x96, &mut x97, x95, x87, x84);
  let mut x98: u64 = 0;
  let mut x99: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x98, &mut x99, x97, x85, x82);
  let mut x100: u64 = 0;
  let mut x101: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x100, &mut x101, x99, x83, x80);
  let mut x102: u64 = 0;
  let mut x103: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x102, &mut x103, x101, x81, x78);
  let x104: u64 = ((x103 as u64) + x79);
  let mut x105: u64 = 0;
  let mut x106: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x105, &mut x106, 0x0, x64, x90);
  let mut x107: u64 = 0;
  let mut x108: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x107, &mut x108, x106, x66, x92);
  let mut x109: u64 = 0;
  let mut x110: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x109, &mut x110, x108, x68, x94);
  let mut x111: u64 = 0;
  let mut x112: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x111, &mut x112, x110, x70, x96);
  let mut x113: u64 = 0;
  let mut x114: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x113, &mut x114, x112, x72, x98);
  let mut x115: u64 = 0;
  let mut x116: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x115, &mut x116, x114, x74, x100);
  let mut x117: u64 = 0;
  let mut x118: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x117, &mut x118, x116, x76, x102);
  let mut x119: u64 = 0;
  let mut x120: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x119, &mut x120, x118, (x77 as u64), x104);
  let mut x121: u64 = 0;
  let mut x122: u64 = 0;
  fiat_p434_mulx_u64(&mut x121, &mut x122, x105, 0x2341f27177344);
  let mut x123: u64 = 0;
  let mut x124: u64 = 0;
  fiat_p434_mulx_u64(&mut x123, &mut x124, x105, 0x6cfc5fd681c52056);
  let mut x125: u64 = 0;
  let mut x126: u64 = 0;
  fiat_p434_mulx_u64(&mut x125, &mut x126, x105, 0x7bc65c783158aea3);
  let mut x127: u64 = 0;
  let mut x128: u64 = 0;
  fiat_p434_mulx_u64(&mut x127, &mut x128, x105, 0xfdc1767ae2ffffff);
  let mut x129: u64 = 0;
  let mut x130: u64 = 0;
  fiat_p434_mulx_u64(&mut x129, &mut x130, x105, 0xffffffffffffffff);
  let mut x131: u64 = 0;
  let mut x132: u64 = 0;
  fiat_p434_mulx_u64(&mut x131, &mut x132, x105, 0xffffffffffffffff);
  let mut x133: u64 = 0;
  let mut x134: u64 = 0;
  fiat_p434_mulx_u64(&mut x133, &mut x134, x105, 0xffffffffffffffff);
  let mut x135: u64 = 0;
  let mut x136: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x135, &mut x136, 0x0, x134, x131);
  let mut x137: u64 = 0;
  let mut x138: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x137, &mut x138, x136, x132, x129);
  let mut x139: u64 = 0;
  let mut x140: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x139, &mut x140, x138, x130, x127);
  let mut x141: u64 = 0;
  let mut x142: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x141, &mut x142, x140, x128, x125);
  let mut x143: u64 = 0;
  let mut x144: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x143, &mut x144, x142, x126, x123);
  let mut x145: u64 = 0;
  let mut x146: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x145, &mut x146, x144, x124, x121);
  let x147: u64 = ((x146 as u64) + x122);
  let mut x148: u64 = 0;
  let mut x149: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x148, &mut x149, 0x0, x105, x133);
  let mut x150: u64 = 0;
  let mut x151: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x150, &mut x151, x149, x107, x135);
  let mut x152: u64 = 0;
  let mut x153: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x152, &mut x153, x151, x109, x137);
  let mut x154: u64 = 0;
  let mut x155: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x154, &mut x155, x153, x111, x139);
  let mut x156: u64 = 0;
  let mut x157: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x156, &mut x157, x155, x113, x141);
  let mut x158: u64 = 0;
  let mut x159: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x158, &mut x159, x157, x115, x143);
  let mut x160: u64 = 0;
  let mut x161: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x160, &mut x161, x159, x117, x145);
  let mut x162: u64 = 0;
  let mut x163: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x162, &mut x163, x161, x119, x147);
  let x164: u64 = ((x163 as u64) + (x120 as u64));
  let mut x165: u64 = 0;
  let mut x166: u64 = 0;
  fiat_p434_mulx_u64(&mut x165, &mut x166, x2, (arg2[6]));
  let mut x167: u64 = 0;
  let mut x168: u64 = 0;
  fiat_p434_mulx_u64(&mut x167, &mut x168, x2, (arg2[5]));
  let mut x169: u64 = 0;
  let mut x170: u64 = 0;
  fiat_p434_mulx_u64(&mut x169, &mut x170, x2, (arg2[4]));
  let mut x171: u64 = 0;
  let mut x172: u64 = 0;
  fiat_p434_mulx_u64(&mut x171, &mut x172, x2, (arg2[3]));
  let mut x173: u64 = 0;
  let mut x174: u64 = 0;
  fiat_p434_mulx_u64(&mut x173, &mut x174, x2, (arg2[2]));
  let mut x175: u64 = 0;
  let mut x176: u64 = 0;
  fiat_p434_mulx_u64(&mut x175, &mut x176, x2, (arg2[1]));
  let mut x177: u64 = 0;
  let mut x178: u64 = 0;
  fiat_p434_mulx_u64(&mut x177, &mut x178, x2, (arg2[0]));
  let mut x179: u64 = 0;
  let mut x180: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x179, &mut x180, 0x0, x178, x175);
  let mut x181: u64 = 0;
  let mut x182: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x181, &mut x182, x180, x176, x173);
  let mut x183: u64 = 0;
  let mut x184: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x183, &mut x184, x182, x174, x171);
  let mut x185: u64 = 0;
  let mut x186: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x185, &mut x186, x184, x172, x169);
  let mut x187: u64 = 0;
  let mut x188: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x187, &mut x188, x186, x170, x167);
  let mut x189: u64 = 0;
  let mut x190: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x189, &mut x190, x188, x168, x165);
  let x191: u64 = ((x190 as u64) + x166);
  let mut x192: u64 = 0;
  let mut x193: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x192, &mut x193, 0x0, x150, x177);
  let mut x194: u64 = 0;
  let mut x195: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x194, &mut x195, x193, x152, x179);
  let mut x196: u64 = 0;
  let mut x197: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x196, &mut x197, x195, x154, x181);
  let mut x198: u64 = 0;
  let mut x199: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x198, &mut x199, x197, x156, x183);
  let mut x200: u64 = 0;
  let mut x201: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x200, &mut x201, x199, x158, x185);
  let mut x202: u64 = 0;
  let mut x203: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x202, &mut x203, x201, x160, x187);
  let mut x204: u64 = 0;
  let mut x205: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x204, &mut x205, x203, x162, x189);
  let mut x206: u64 = 0;
  let mut x207: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x206, &mut x207, x205, x164, x191);
  let mut x208: u64 = 0;
  let mut x209: u64 = 0;
  fiat_p434_mulx_u64(&mut x208, &mut x209, x192, 0x2341f27177344);
  let mut x210: u64 = 0;
  let mut x211: u64 = 0;
  fiat_p434_mulx_u64(&mut x210, &mut x211, x192, 0x6cfc5fd681c52056);
  let mut x212: u64 = 0;
  let mut x213: u64 = 0;
  fiat_p434_mulx_u64(&mut x212, &mut x213, x192, 0x7bc65c783158aea3);
  let mut x214: u64 = 0;
  let mut x215: u64 = 0;
  fiat_p434_mulx_u64(&mut x214, &mut x215, x192, 0xfdc1767ae2ffffff);
  let mut x216: u64 = 0;
  let mut x217: u64 = 0;
  fiat_p434_mulx_u64(&mut x216, &mut x217, x192, 0xffffffffffffffff);
  let mut x218: u64 = 0;
  let mut x219: u64 = 0;
  fiat_p434_mulx_u64(&mut x218, &mut x219, x192, 0xffffffffffffffff);
  let mut x220: u64 = 0;
  let mut x221: u64 = 0;
  fiat_p434_mulx_u64(&mut x220, &mut x221, x192, 0xffffffffffffffff);
  let mut x222: u64 = 0;
  let mut x223: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x222, &mut x223, 0x0, x221, x218);
  let mut x224: u64 = 0;
  let mut x225: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x224, &mut x225, x223, x219, x216);
  let mut x226: u64 = 0;
  let mut x227: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x226, &mut x227, x225, x217, x214);
  let mut x228: u64 = 0;
  let mut x229: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x228, &mut x229, x227, x215, x212);
  let mut x230: u64 = 0;
  let mut x231: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x230, &mut x231, x229, x213, x210);
  let mut x232: u64 = 0;
  let mut x233: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x232, &mut x233, x231, x211, x208);
  let x234: u64 = ((x233 as u64) + x209);
  let mut x235: u64 = 0;
  let mut x236: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x235, &mut x236, 0x0, x192, x220);
  let mut x237: u64 = 0;
  let mut x238: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x237, &mut x238, x236, x194, x222);
  let mut x239: u64 = 0;
  let mut x240: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x239, &mut x240, x238, x196, x224);
  let mut x241: u64 = 0;
  let mut x242: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x241, &mut x242, x240, x198, x226);
  let mut x243: u64 = 0;
  let mut x244: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x243, &mut x244, x242, x200, x228);
  let mut x245: u64 = 0;
  let mut x246: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x245, &mut x246, x244, x202, x230);
  let mut x247: u64 = 0;
  let mut x248: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x247, &mut x248, x246, x204, x232);
  let mut x249: u64 = 0;
  let mut x250: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x249, &mut x250, x248, x206, x234);
  let x251: u64 = ((x250 as u64) + (x207 as u64));
  let mut x252: u64 = 0;
  let mut x253: u64 = 0;
  fiat_p434_mulx_u64(&mut x252, &mut x253, x3, (arg2[6]));
  let mut x254: u64 = 0;
  let mut x255: u64 = 0;
  fiat_p434_mulx_u64(&mut x254, &mut x255, x3, (arg2[5]));
  let mut x256: u64 = 0;
  let mut x257: u64 = 0;
  fiat_p434_mulx_u64(&mut x256, &mut x257, x3, (arg2[4]));
  let mut x258: u64 = 0;
  let mut x259: u64 = 0;
  fiat_p434_mulx_u64(&mut x258, &mut x259, x3, (arg2[3]));
  let mut x260: u64 = 0;
  let mut x261: u64 = 0;
  fiat_p434_mulx_u64(&mut x260, &mut x261, x3, (arg2[2]));
  let mut x262: u64 = 0;
  let mut x263: u64 = 0;
  fiat_p434_mulx_u64(&mut x262, &mut x263, x3, (arg2[1]));
  let mut x264: u64 = 0;
  let mut x265: u64 = 0;
  fiat_p434_mulx_u64(&mut x264, &mut x265, x3, (arg2[0]));
  let mut x266: u64 = 0;
  let mut x267: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x266, &mut x267, 0x0, x265, x262);
  let mut x268: u64 = 0;
  let mut x269: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x268, &mut x269, x267, x263, x260);
  let mut x270: u64 = 0;
  let mut x271: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x270, &mut x271, x269, x261, x258);
  let mut x272: u64 = 0;
  let mut x273: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x272, &mut x273, x271, x259, x256);
  let mut x274: u64 = 0;
  let mut x275: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x274, &mut x275, x273, x257, x254);
  let mut x276: u64 = 0;
  let mut x277: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x276, &mut x277, x275, x255, x252);
  let x278: u64 = ((x277 as u64) + x253);
  let mut x279: u64 = 0;
  let mut x280: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x279, &mut x280, 0x0, x237, x264);
  let mut x281: u64 = 0;
  let mut x282: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x281, &mut x282, x280, x239, x266);
  let mut x283: u64 = 0;
  let mut x284: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x283, &mut x284, x282, x241, x268);
  let mut x285: u64 = 0;
  let mut x286: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x285, &mut x286, x284, x243, x270);
  let mut x287: u64 = 0;
  let mut x288: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x287, &mut x288, x286, x245, x272);
  let mut x289: u64 = 0;
  let mut x290: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x289, &mut x290, x288, x247, x274);
  let mut x291: u64 = 0;
  let mut x292: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x291, &mut x292, x290, x249, x276);
  let mut x293: u64 = 0;
  let mut x294: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x293, &mut x294, x292, x251, x278);
  let mut x295: u64 = 0;
  let mut x296: u64 = 0;
  fiat_p434_mulx_u64(&mut x295, &mut x296, x279, 0x2341f27177344);
  let mut x297: u64 = 0;
  let mut x298: u64 = 0;
  fiat_p434_mulx_u64(&mut x297, &mut x298, x279, 0x6cfc5fd681c52056);
  let mut x299: u64 = 0;
  let mut x300: u64 = 0;
  fiat_p434_mulx_u64(&mut x299, &mut x300, x279, 0x7bc65c783158aea3);
  let mut x301: u64 = 0;
  let mut x302: u64 = 0;
  fiat_p434_mulx_u64(&mut x301, &mut x302, x279, 0xfdc1767ae2ffffff);
  let mut x303: u64 = 0;
  let mut x304: u64 = 0;
  fiat_p434_mulx_u64(&mut x303, &mut x304, x279, 0xffffffffffffffff);
  let mut x305: u64 = 0;
  let mut x306: u64 = 0;
  fiat_p434_mulx_u64(&mut x305, &mut x306, x279, 0xffffffffffffffff);
  let mut x307: u64 = 0;
  let mut x308: u64 = 0;
  fiat_p434_mulx_u64(&mut x307, &mut x308, x279, 0xffffffffffffffff);
  let mut x309: u64 = 0;
  let mut x310: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x309, &mut x310, 0x0, x308, x305);
  let mut x311: u64 = 0;
  let mut x312: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x311, &mut x312, x310, x306, x303);
  let mut x313: u64 = 0;
  let mut x314: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x313, &mut x314, x312, x304, x301);
  let mut x315: u64 = 0;
  let mut x316: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x315, &mut x316, x314, x302, x299);
  let mut x317: u64 = 0;
  let mut x318: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x317, &mut x318, x316, x300, x297);
  let mut x319: u64 = 0;
  let mut x320: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x319, &mut x320, x318, x298, x295);
  let x321: u64 = ((x320 as u64) + x296);
  let mut x322: u64 = 0;
  let mut x323: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x322, &mut x323, 0x0, x279, x307);
  let mut x324: u64 = 0;
  let mut x325: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x324, &mut x325, x323, x281, x309);
  let mut x326: u64 = 0;
  let mut x327: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x326, &mut x327, x325, x283, x311);
  let mut x328: u64 = 0;
  let mut x329: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x328, &mut x329, x327, x285, x313);
  let mut x330: u64 = 0;
  let mut x331: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x330, &mut x331, x329, x287, x315);
  let mut x332: u64 = 0;
  let mut x333: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x332, &mut x333, x331, x289, x317);
  let mut x334: u64 = 0;
  let mut x335: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x334, &mut x335, x333, x291, x319);
  let mut x336: u64 = 0;
  let mut x337: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x336, &mut x337, x335, x293, x321);
  let x338: u64 = ((x337 as u64) + (x294 as u64));
  let mut x339: u64 = 0;
  let mut x340: u64 = 0;
  fiat_p434_mulx_u64(&mut x339, &mut x340, x4, (arg2[6]));
  let mut x341: u64 = 0;
  let mut x342: u64 = 0;
  fiat_p434_mulx_u64(&mut x341, &mut x342, x4, (arg2[5]));
  let mut x343: u64 = 0;
  let mut x344: u64 = 0;
  fiat_p434_mulx_u64(&mut x343, &mut x344, x4, (arg2[4]));
  let mut x345: u64 = 0;
  let mut x346: u64 = 0;
  fiat_p434_mulx_u64(&mut x345, &mut x346, x4, (arg2[3]));
  let mut x347: u64 = 0;
  let mut x348: u64 = 0;
  fiat_p434_mulx_u64(&mut x347, &mut x348, x4, (arg2[2]));
  let mut x349: u64 = 0;
  let mut x350: u64 = 0;
  fiat_p434_mulx_u64(&mut x349, &mut x350, x4, (arg2[1]));
  let mut x351: u64 = 0;
  let mut x352: u64 = 0;
  fiat_p434_mulx_u64(&mut x351, &mut x352, x4, (arg2[0]));
  let mut x353: u64 = 0;
  let mut x354: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x353, &mut x354, 0x0, x352, x349);
  let mut x355: u64 = 0;
  let mut x356: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x355, &mut x356, x354, x350, x347);
  let mut x357: u64 = 0;
  let mut x358: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x357, &mut x358, x356, x348, x345);
  let mut x359: u64 = 0;
  let mut x360: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x359, &mut x360, x358, x346, x343);
  let mut x361: u64 = 0;
  let mut x362: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x361, &mut x362, x360, x344, x341);
  let mut x363: u64 = 0;
  let mut x364: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x363, &mut x364, x362, x342, x339);
  let x365: u64 = ((x364 as u64) + x340);
  let mut x366: u64 = 0;
  let mut x367: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x366, &mut x367, 0x0, x324, x351);
  let mut x368: u64 = 0;
  let mut x369: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x368, &mut x369, x367, x326, x353);
  let mut x370: u64 = 0;
  let mut x371: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x370, &mut x371, x369, x328, x355);
  let mut x372: u64 = 0;
  let mut x373: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x372, &mut x373, x371, x330, x357);
  let mut x374: u64 = 0;
  let mut x375: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x374, &mut x375, x373, x332, x359);
  let mut x376: u64 = 0;
  let mut x377: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x376, &mut x377, x375, x334, x361);
  let mut x378: u64 = 0;
  let mut x379: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x378, &mut x379, x377, x336, x363);
  let mut x380: u64 = 0;
  let mut x381: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x380, &mut x381, x379, x338, x365);
  let mut x382: u64 = 0;
  let mut x383: u64 = 0;
  fiat_p434_mulx_u64(&mut x382, &mut x383, x366, 0x2341f27177344);
  let mut x384: u64 = 0;
  let mut x385: u64 = 0;
  fiat_p434_mulx_u64(&mut x384, &mut x385, x366, 0x6cfc5fd681c52056);
  let mut x386: u64 = 0;
  let mut x387: u64 = 0;
  fiat_p434_mulx_u64(&mut x386, &mut x387, x366, 0x7bc65c783158aea3);
  let mut x388: u64 = 0;
  let mut x389: u64 = 0;
  fiat_p434_mulx_u64(&mut x388, &mut x389, x366, 0xfdc1767ae2ffffff);
  let mut x390: u64 = 0;
  let mut x391: u64 = 0;
  fiat_p434_mulx_u64(&mut x390, &mut x391, x366, 0xffffffffffffffff);
  let mut x392: u64 = 0;
  let mut x393: u64 = 0;
  fiat_p434_mulx_u64(&mut x392, &mut x393, x366, 0xffffffffffffffff);
  let mut x394: u64 = 0;
  let mut x395: u64 = 0;
  fiat_p434_mulx_u64(&mut x394, &mut x395, x366, 0xffffffffffffffff);
  let mut x396: u64 = 0;
  let mut x397: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x396, &mut x397, 0x0, x395, x392);
  let mut x398: u64 = 0;
  let mut x399: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x398, &mut x399, x397, x393, x390);
  let mut x400: u64 = 0;
  let mut x401: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x400, &mut x401, x399, x391, x388);
  let mut x402: u64 = 0;
  let mut x403: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x402, &mut x403, x401, x389, x386);
  let mut x404: u64 = 0;
  let mut x405: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x404, &mut x405, x403, x387, x384);
  let mut x406: u64 = 0;
  let mut x407: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x406, &mut x407, x405, x385, x382);
  let x408: u64 = ((x407 as u64) + x383);
  let mut x409: u64 = 0;
  let mut x410: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x409, &mut x410, 0x0, x366, x394);
  let mut x411: u64 = 0;
  let mut x412: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x411, &mut x412, x410, x368, x396);
  let mut x413: u64 = 0;
  let mut x414: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x413, &mut x414, x412, x370, x398);
  let mut x415: u64 = 0;
  let mut x416: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x415, &mut x416, x414, x372, x400);
  let mut x417: u64 = 0;
  let mut x418: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x417, &mut x418, x416, x374, x402);
  let mut x419: u64 = 0;
  let mut x420: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x419, &mut x420, x418, x376, x404);
  let mut x421: u64 = 0;
  let mut x422: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x421, &mut x422, x420, x378, x406);
  let mut x423: u64 = 0;
  let mut x424: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x423, &mut x424, x422, x380, x408);
  let x425: u64 = ((x424 as u64) + (x381 as u64));
  let mut x426: u64 = 0;
  let mut x427: u64 = 0;
  fiat_p434_mulx_u64(&mut x426, &mut x427, x5, (arg2[6]));
  let mut x428: u64 = 0;
  let mut x429: u64 = 0;
  fiat_p434_mulx_u64(&mut x428, &mut x429, x5, (arg2[5]));
  let mut x430: u64 = 0;
  let mut x431: u64 = 0;
  fiat_p434_mulx_u64(&mut x430, &mut x431, x5, (arg2[4]));
  let mut x432: u64 = 0;
  let mut x433: u64 = 0;
  fiat_p434_mulx_u64(&mut x432, &mut x433, x5, (arg2[3]));
  let mut x434: u64 = 0;
  let mut x435: u64 = 0;
  fiat_p434_mulx_u64(&mut x434, &mut x435, x5, (arg2[2]));
  let mut x436: u64 = 0;
  let mut x437: u64 = 0;
  fiat_p434_mulx_u64(&mut x436, &mut x437, x5, (arg2[1]));
  let mut x438: u64 = 0;
  let mut x439: u64 = 0;
  fiat_p434_mulx_u64(&mut x438, &mut x439, x5, (arg2[0]));
  let mut x440: u64 = 0;
  let mut x441: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x440, &mut x441, 0x0, x439, x436);
  let mut x442: u64 = 0;
  let mut x443: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x442, &mut x443, x441, x437, x434);
  let mut x444: u64 = 0;
  let mut x445: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x444, &mut x445, x443, x435, x432);
  let mut x446: u64 = 0;
  let mut x447: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x446, &mut x447, x445, x433, x430);
  let mut x448: u64 = 0;
  let mut x449: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x448, &mut x449, x447, x431, x428);
  let mut x450: u64 = 0;
  let mut x451: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x450, &mut x451, x449, x429, x426);
  let x452: u64 = ((x451 as u64) + x427);
  let mut x453: u64 = 0;
  let mut x454: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x453, &mut x454, 0x0, x411, x438);
  let mut x455: u64 = 0;
  let mut x456: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x455, &mut x456, x454, x413, x440);
  let mut x457: u64 = 0;
  let mut x458: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x457, &mut x458, x456, x415, x442);
  let mut x459: u64 = 0;
  let mut x460: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x459, &mut x460, x458, x417, x444);
  let mut x461: u64 = 0;
  let mut x462: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x461, &mut x462, x460, x419, x446);
  let mut x463: u64 = 0;
  let mut x464: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x463, &mut x464, x462, x421, x448);
  let mut x465: u64 = 0;
  let mut x466: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x465, &mut x466, x464, x423, x450);
  let mut x467: u64 = 0;
  let mut x468: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x467, &mut x468, x466, x425, x452);
  let mut x469: u64 = 0;
  let mut x470: u64 = 0;
  fiat_p434_mulx_u64(&mut x469, &mut x470, x453, 0x2341f27177344);
  let mut x471: u64 = 0;
  let mut x472: u64 = 0;
  fiat_p434_mulx_u64(&mut x471, &mut x472, x453, 0x6cfc5fd681c52056);
  let mut x473: u64 = 0;
  let mut x474: u64 = 0;
  fiat_p434_mulx_u64(&mut x473, &mut x474, x453, 0x7bc65c783158aea3);
  let mut x475: u64 = 0;
  let mut x476: u64 = 0;
  fiat_p434_mulx_u64(&mut x475, &mut x476, x453, 0xfdc1767ae2ffffff);
  let mut x477: u64 = 0;
  let mut x478: u64 = 0;
  fiat_p434_mulx_u64(&mut x477, &mut x478, x453, 0xffffffffffffffff);
  let mut x479: u64 = 0;
  let mut x480: u64 = 0;
  fiat_p434_mulx_u64(&mut x479, &mut x480, x453, 0xffffffffffffffff);
  let mut x481: u64 = 0;
  let mut x482: u64 = 0;
  fiat_p434_mulx_u64(&mut x481, &mut x482, x453, 0xffffffffffffffff);
  let mut x483: u64 = 0;
  let mut x484: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x483, &mut x484, 0x0, x482, x479);
  let mut x485: u64 = 0;
  let mut x486: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x485, &mut x486, x484, x480, x477);
  let mut x487: u64 = 0;
  let mut x488: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x487, &mut x488, x486, x478, x475);
  let mut x489: u64 = 0;
  let mut x490: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x489, &mut x490, x488, x476, x473);
  let mut x491: u64 = 0;
  let mut x492: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x491, &mut x492, x490, x474, x471);
  let mut x493: u64 = 0;
  let mut x494: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x493, &mut x494, x492, x472, x469);
  let x495: u64 = ((x494 as u64) + x470);
  let mut x496: u64 = 0;
  let mut x497: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x496, &mut x497, 0x0, x453, x481);
  let mut x498: u64 = 0;
  let mut x499: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x498, &mut x499, x497, x455, x483);
  let mut x500: u64 = 0;
  let mut x501: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x500, &mut x501, x499, x457, x485);
  let mut x502: u64 = 0;
  let mut x503: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x502, &mut x503, x501, x459, x487);
  let mut x504: u64 = 0;
  let mut x505: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x504, &mut x505, x503, x461, x489);
  let mut x506: u64 = 0;
  let mut x507: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x506, &mut x507, x505, x463, x491);
  let mut x508: u64 = 0;
  let mut x509: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x508, &mut x509, x507, x465, x493);
  let mut x510: u64 = 0;
  let mut x511: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x510, &mut x511, x509, x467, x495);
  let x512: u64 = ((x511 as u64) + (x468 as u64));
  let mut x513: u64 = 0;
  let mut x514: u64 = 0;
  fiat_p434_mulx_u64(&mut x513, &mut x514, x6, (arg2[6]));
  let mut x515: u64 = 0;
  let mut x516: u64 = 0;
  fiat_p434_mulx_u64(&mut x515, &mut x516, x6, (arg2[5]));
  let mut x517: u64 = 0;
  let mut x518: u64 = 0;
  fiat_p434_mulx_u64(&mut x517, &mut x518, x6, (arg2[4]));
  let mut x519: u64 = 0;
  let mut x520: u64 = 0;
  fiat_p434_mulx_u64(&mut x519, &mut x520, x6, (arg2[3]));
  let mut x521: u64 = 0;
  let mut x522: u64 = 0;
  fiat_p434_mulx_u64(&mut x521, &mut x522, x6, (arg2[2]));
  let mut x523: u64 = 0;
  let mut x524: u64 = 0;
  fiat_p434_mulx_u64(&mut x523, &mut x524, x6, (arg2[1]));
  let mut x525: u64 = 0;
  let mut x526: u64 = 0;
  fiat_p434_mulx_u64(&mut x525, &mut x526, x6, (arg2[0]));
  let mut x527: u64 = 0;
  let mut x528: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x527, &mut x528, 0x0, x526, x523);
  let mut x529: u64 = 0;
  let mut x530: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x529, &mut x530, x528, x524, x521);
  let mut x531: u64 = 0;
  let mut x532: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x531, &mut x532, x530, x522, x519);
  let mut x533: u64 = 0;
  let mut x534: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x533, &mut x534, x532, x520, x517);
  let mut x535: u64 = 0;
  let mut x536: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x535, &mut x536, x534, x518, x515);
  let mut x537: u64 = 0;
  let mut x538: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x537, &mut x538, x536, x516, x513);
  let x539: u64 = ((x538 as u64) + x514);
  let mut x540: u64 = 0;
  let mut x541: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x540, &mut x541, 0x0, x498, x525);
  let mut x542: u64 = 0;
  let mut x543: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x542, &mut x543, x541, x500, x527);
  let mut x544: u64 = 0;
  let mut x545: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x544, &mut x545, x543, x502, x529);
  let mut x546: u64 = 0;
  let mut x547: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x546, &mut x547, x545, x504, x531);
  let mut x548: u64 = 0;
  let mut x549: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x548, &mut x549, x547, x506, x533);
  let mut x550: u64 = 0;
  let mut x551: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x550, &mut x551, x549, x508, x535);
  let mut x552: u64 = 0;
  let mut x553: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x552, &mut x553, x551, x510, x537);
  let mut x554: u64 = 0;
  let mut x555: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x554, &mut x555, x553, x512, x539);
  let mut x556: u64 = 0;
  let mut x557: u64 = 0;
  fiat_p434_mulx_u64(&mut x556, &mut x557, x540, 0x2341f27177344);
  let mut x558: u64 = 0;
  let mut x559: u64 = 0;
  fiat_p434_mulx_u64(&mut x558, &mut x559, x540, 0x6cfc5fd681c52056);
  let mut x560: u64 = 0;
  let mut x561: u64 = 0;
  fiat_p434_mulx_u64(&mut x560, &mut x561, x540, 0x7bc65c783158aea3);
  let mut x562: u64 = 0;
  let mut x563: u64 = 0;
  fiat_p434_mulx_u64(&mut x562, &mut x563, x540, 0xfdc1767ae2ffffff);
  let mut x564: u64 = 0;
  let mut x565: u64 = 0;
  fiat_p434_mulx_u64(&mut x564, &mut x565, x540, 0xffffffffffffffff);
  let mut x566: u64 = 0;
  let mut x567: u64 = 0;
  fiat_p434_mulx_u64(&mut x566, &mut x567, x540, 0xffffffffffffffff);
  let mut x568: u64 = 0;
  let mut x569: u64 = 0;
  fiat_p434_mulx_u64(&mut x568, &mut x569, x540, 0xffffffffffffffff);
  let mut x570: u64 = 0;
  let mut x571: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x570, &mut x571, 0x0, x569, x566);
  let mut x572: u64 = 0;
  let mut x573: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x572, &mut x573, x571, x567, x564);
  let mut x574: u64 = 0;
  let mut x575: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x574, &mut x575, x573, x565, x562);
  let mut x576: u64 = 0;
  let mut x577: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x576, &mut x577, x575, x563, x560);
  let mut x578: u64 = 0;
  let mut x579: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x578, &mut x579, x577, x561, x558);
  let mut x580: u64 = 0;
  let mut x581: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x580, &mut x581, x579, x559, x556);
  let x582: u64 = ((x581 as u64) + x557);
  let mut x583: u64 = 0;
  let mut x584: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x583, &mut x584, 0x0, x540, x568);
  let mut x585: u64 = 0;
  let mut x586: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x585, &mut x586, x584, x542, x570);
  let mut x587: u64 = 0;
  let mut x588: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x587, &mut x588, x586, x544, x572);
  let mut x589: u64 = 0;
  let mut x590: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x589, &mut x590, x588, x546, x574);
  let mut x591: u64 = 0;
  let mut x592: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x591, &mut x592, x590, x548, x576);
  let mut x593: u64 = 0;
  let mut x594: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x593, &mut x594, x592, x550, x578);
  let mut x595: u64 = 0;
  let mut x596: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x595, &mut x596, x594, x552, x580);
  let mut x597: u64 = 0;
  let mut x598: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x597, &mut x598, x596, x554, x582);
  let x599: u64 = ((x598 as u64) + (x555 as u64));
  let mut x600: u64 = 0;
  let mut x601: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x600, &mut x601, 0x0, x585, 0xffffffffffffffff);
  let mut x602: u64 = 0;
  let mut x603: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x602, &mut x603, x601, x587, 0xffffffffffffffff);
  let mut x604: u64 = 0;
  let mut x605: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x604, &mut x605, x603, x589, 0xffffffffffffffff);
  let mut x606: u64 = 0;
  let mut x607: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x606, &mut x607, x605, x591, 0xfdc1767ae2ffffff);
  let mut x608: u64 = 0;
  let mut x609: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x608, &mut x609, x607, x593, 0x7bc65c783158aea3);
  let mut x610: u64 = 0;
  let mut x611: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x610, &mut x611, x609, x595, 0x6cfc5fd681c52056);
  let mut x612: u64 = 0;
  let mut x613: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x612, &mut x613, x611, x597, 0x2341f27177344);
  let mut x614: u64 = 0;
  let mut x615: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x614, &mut x615, x613, x599, (0x0 as u64));
  let mut x616: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x616, x615, x600, x585);
  let mut x617: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x617, x615, x602, x587);
  let mut x618: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x618, x615, x604, x589);
  let mut x619: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x619, x615, x606, x591);
  let mut x620: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x620, x615, x608, x593);
  let mut x621: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x621, x615, x610, x595);
  let mut x622: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x622, x615, x612, x597);
  out1[0] = x616;
  out1[1] = x617;
  out1[2] = x618;
  out1[3] = x619;
  out1[4] = x620;
  out1[5] = x621;
  out1[6] = x622;
}

/*
 * The function fiat_p434_square squares a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_p434_square(out1: &mut [u64; 7], arg1: &[u64; 7]) -> () {
  let x1: u64 = (arg1[1]);
  let x2: u64 = (arg1[2]);
  let x3: u64 = (arg1[3]);
  let x4: u64 = (arg1[4]);
  let x5: u64 = (arg1[5]);
  let x6: u64 = (arg1[6]);
  let x7: u64 = (arg1[0]);
  let mut x8: u64 = 0;
  let mut x9: u64 = 0;
  fiat_p434_mulx_u64(&mut x8, &mut x9, x7, (arg1[6]));
  let mut x10: u64 = 0;
  let mut x11: u64 = 0;
  fiat_p434_mulx_u64(&mut x10, &mut x11, x7, (arg1[5]));
  let mut x12: u64 = 0;
  let mut x13: u64 = 0;
  fiat_p434_mulx_u64(&mut x12, &mut x13, x7, (arg1[4]));
  let mut x14: u64 = 0;
  let mut x15: u64 = 0;
  fiat_p434_mulx_u64(&mut x14, &mut x15, x7, (arg1[3]));
  let mut x16: u64 = 0;
  let mut x17: u64 = 0;
  fiat_p434_mulx_u64(&mut x16, &mut x17, x7, (arg1[2]));
  let mut x18: u64 = 0;
  let mut x19: u64 = 0;
  fiat_p434_mulx_u64(&mut x18, &mut x19, x7, (arg1[1]));
  let mut x20: u64 = 0;
  let mut x21: u64 = 0;
  fiat_p434_mulx_u64(&mut x20, &mut x21, x7, (arg1[0]));
  let mut x22: u64 = 0;
  let mut x23: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x22, &mut x23, 0x0, x21, x18);
  let mut x24: u64 = 0;
  let mut x25: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x24, &mut x25, x23, x19, x16);
  let mut x26: u64 = 0;
  let mut x27: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x26, &mut x27, x25, x17, x14);
  let mut x28: u64 = 0;
  let mut x29: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x28, &mut x29, x27, x15, x12);
  let mut x30: u64 = 0;
  let mut x31: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x30, &mut x31, x29, x13, x10);
  let mut x32: u64 = 0;
  let mut x33: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x32, &mut x33, x31, x11, x8);
  let x34: u64 = ((x33 as u64) + x9);
  let mut x35: u64 = 0;
  let mut x36: u64 = 0;
  fiat_p434_mulx_u64(&mut x35, &mut x36, x20, 0x2341f27177344);
  let mut x37: u64 = 0;
  let mut x38: u64 = 0;
  fiat_p434_mulx_u64(&mut x37, &mut x38, x20, 0x6cfc5fd681c52056);
  let mut x39: u64 = 0;
  let mut x40: u64 = 0;
  fiat_p434_mulx_u64(&mut x39, &mut x40, x20, 0x7bc65c783158aea3);
  let mut x41: u64 = 0;
  let mut x42: u64 = 0;
  fiat_p434_mulx_u64(&mut x41, &mut x42, x20, 0xfdc1767ae2ffffff);
  let mut x43: u64 = 0;
  let mut x44: u64 = 0;
  fiat_p434_mulx_u64(&mut x43, &mut x44, x20, 0xffffffffffffffff);
  let mut x45: u64 = 0;
  let mut x46: u64 = 0;
  fiat_p434_mulx_u64(&mut x45, &mut x46, x20, 0xffffffffffffffff);
  let mut x47: u64 = 0;
  let mut x48: u64 = 0;
  fiat_p434_mulx_u64(&mut x47, &mut x48, x20, 0xffffffffffffffff);
  let mut x49: u64 = 0;
  let mut x50: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x49, &mut x50, 0x0, x48, x45);
  let mut x51: u64 = 0;
  let mut x52: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x51, &mut x52, x50, x46, x43);
  let mut x53: u64 = 0;
  let mut x54: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x53, &mut x54, x52, x44, x41);
  let mut x55: u64 = 0;
  let mut x56: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x55, &mut x56, x54, x42, x39);
  let mut x57: u64 = 0;
  let mut x58: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x57, &mut x58, x56, x40, x37);
  let mut x59: u64 = 0;
  let mut x60: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x59, &mut x60, x58, x38, x35);
  let x61: u64 = ((x60 as u64) + x36);
  let mut x62: u64 = 0;
  let mut x63: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x62, &mut x63, 0x0, x20, x47);
  let mut x64: u64 = 0;
  let mut x65: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x64, &mut x65, x63, x22, x49);
  let mut x66: u64 = 0;
  let mut x67: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x66, &mut x67, x65, x24, x51);
  let mut x68: u64 = 0;
  let mut x69: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x68, &mut x69, x67, x26, x53);
  let mut x70: u64 = 0;
  let mut x71: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x70, &mut x71, x69, x28, x55);
  let mut x72: u64 = 0;
  let mut x73: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x72, &mut x73, x71, x30, x57);
  let mut x74: u64 = 0;
  let mut x75: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x74, &mut x75, x73, x32, x59);
  let mut x76: u64 = 0;
  let mut x77: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x76, &mut x77, x75, x34, x61);
  let mut x78: u64 = 0;
  let mut x79: u64 = 0;
  fiat_p434_mulx_u64(&mut x78, &mut x79, x1, (arg1[6]));
  let mut x80: u64 = 0;
  let mut x81: u64 = 0;
  fiat_p434_mulx_u64(&mut x80, &mut x81, x1, (arg1[5]));
  let mut x82: u64 = 0;
  let mut x83: u64 = 0;
  fiat_p434_mulx_u64(&mut x82, &mut x83, x1, (arg1[4]));
  let mut x84: u64 = 0;
  let mut x85: u64 = 0;
  fiat_p434_mulx_u64(&mut x84, &mut x85, x1, (arg1[3]));
  let mut x86: u64 = 0;
  let mut x87: u64 = 0;
  fiat_p434_mulx_u64(&mut x86, &mut x87, x1, (arg1[2]));
  let mut x88: u64 = 0;
  let mut x89: u64 = 0;
  fiat_p434_mulx_u64(&mut x88, &mut x89, x1, (arg1[1]));
  let mut x90: u64 = 0;
  let mut x91: u64 = 0;
  fiat_p434_mulx_u64(&mut x90, &mut x91, x1, (arg1[0]));
  let mut x92: u64 = 0;
  let mut x93: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x92, &mut x93, 0x0, x91, x88);
  let mut x94: u64 = 0;
  let mut x95: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x94, &mut x95, x93, x89, x86);
  let mut x96: u64 = 0;
  let mut x97: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x96, &mut x97, x95, x87, x84);
  let mut x98: u64 = 0;
  let mut x99: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x98, &mut x99, x97, x85, x82);
  let mut x100: u64 = 0;
  let mut x101: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x100, &mut x101, x99, x83, x80);
  let mut x102: u64 = 0;
  let mut x103: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x102, &mut x103, x101, x81, x78);
  let x104: u64 = ((x103 as u64) + x79);
  let mut x105: u64 = 0;
  let mut x106: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x105, &mut x106, 0x0, x64, x90);
  let mut x107: u64 = 0;
  let mut x108: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x107, &mut x108, x106, x66, x92);
  let mut x109: u64 = 0;
  let mut x110: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x109, &mut x110, x108, x68, x94);
  let mut x111: u64 = 0;
  let mut x112: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x111, &mut x112, x110, x70, x96);
  let mut x113: u64 = 0;
  let mut x114: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x113, &mut x114, x112, x72, x98);
  let mut x115: u64 = 0;
  let mut x116: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x115, &mut x116, x114, x74, x100);
  let mut x117: u64 = 0;
  let mut x118: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x117, &mut x118, x116, x76, x102);
  let mut x119: u64 = 0;
  let mut x120: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x119, &mut x120, x118, (x77 as u64), x104);
  let mut x121: u64 = 0;
  let mut x122: u64 = 0;
  fiat_p434_mulx_u64(&mut x121, &mut x122, x105, 0x2341f27177344);
  let mut x123: u64 = 0;
  let mut x124: u64 = 0;
  fiat_p434_mulx_u64(&mut x123, &mut x124, x105, 0x6cfc5fd681c52056);
  let mut x125: u64 = 0;
  let mut x126: u64 = 0;
  fiat_p434_mulx_u64(&mut x125, &mut x126, x105, 0x7bc65c783158aea3);
  let mut x127: u64 = 0;
  let mut x128: u64 = 0;
  fiat_p434_mulx_u64(&mut x127, &mut x128, x105, 0xfdc1767ae2ffffff);
  let mut x129: u64 = 0;
  let mut x130: u64 = 0;
  fiat_p434_mulx_u64(&mut x129, &mut x130, x105, 0xffffffffffffffff);
  let mut x131: u64 = 0;
  let mut x132: u64 = 0;
  fiat_p434_mulx_u64(&mut x131, &mut x132, x105, 0xffffffffffffffff);
  let mut x133: u64 = 0;
  let mut x134: u64 = 0;
  fiat_p434_mulx_u64(&mut x133, &mut x134, x105, 0xffffffffffffffff);
  let mut x135: u64 = 0;
  let mut x136: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x135, &mut x136, 0x0, x134, x131);
  let mut x137: u64 = 0;
  let mut x138: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x137, &mut x138, x136, x132, x129);
  let mut x139: u64 = 0;
  let mut x140: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x139, &mut x140, x138, x130, x127);
  let mut x141: u64 = 0;
  let mut x142: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x141, &mut x142, x140, x128, x125);
  let mut x143: u64 = 0;
  let mut x144: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x143, &mut x144, x142, x126, x123);
  let mut x145: u64 = 0;
  let mut x146: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x145, &mut x146, x144, x124, x121);
  let x147: u64 = ((x146 as u64) + x122);
  let mut x148: u64 = 0;
  let mut x149: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x148, &mut x149, 0x0, x105, x133);
  let mut x150: u64 = 0;
  let mut x151: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x150, &mut x151, x149, x107, x135);
  let mut x152: u64 = 0;
  let mut x153: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x152, &mut x153, x151, x109, x137);
  let mut x154: u64 = 0;
  let mut x155: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x154, &mut x155, x153, x111, x139);
  let mut x156: u64 = 0;
  let mut x157: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x156, &mut x157, x155, x113, x141);
  let mut x158: u64 = 0;
  let mut x159: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x158, &mut x159, x157, x115, x143);
  let mut x160: u64 = 0;
  let mut x161: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x160, &mut x161, x159, x117, x145);
  let mut x162: u64 = 0;
  let mut x163: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x162, &mut x163, x161, x119, x147);
  let x164: u64 = ((x163 as u64) + (x120 as u64));
  let mut x165: u64 = 0;
  let mut x166: u64 = 0;
  fiat_p434_mulx_u64(&mut x165, &mut x166, x2, (arg1[6]));
  let mut x167: u64 = 0;
  let mut x168: u64 = 0;
  fiat_p434_mulx_u64(&mut x167, &mut x168, x2, (arg1[5]));
  let mut x169: u64 = 0;
  let mut x170: u64 = 0;
  fiat_p434_mulx_u64(&mut x169, &mut x170, x2, (arg1[4]));
  let mut x171: u64 = 0;
  let mut x172: u64 = 0;
  fiat_p434_mulx_u64(&mut x171, &mut x172, x2, (arg1[3]));
  let mut x173: u64 = 0;
  let mut x174: u64 = 0;
  fiat_p434_mulx_u64(&mut x173, &mut x174, x2, (arg1[2]));
  let mut x175: u64 = 0;
  let mut x176: u64 = 0;
  fiat_p434_mulx_u64(&mut x175, &mut x176, x2, (arg1[1]));
  let mut x177: u64 = 0;
  let mut x178: u64 = 0;
  fiat_p434_mulx_u64(&mut x177, &mut x178, x2, (arg1[0]));
  let mut x179: u64 = 0;
  let mut x180: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x179, &mut x180, 0x0, x178, x175);
  let mut x181: u64 = 0;
  let mut x182: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x181, &mut x182, x180, x176, x173);
  let mut x183: u64 = 0;
  let mut x184: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x183, &mut x184, x182, x174, x171);
  let mut x185: u64 = 0;
  let mut x186: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x185, &mut x186, x184, x172, x169);
  let mut x187: u64 = 0;
  let mut x188: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x187, &mut x188, x186, x170, x167);
  let mut x189: u64 = 0;
  let mut x190: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x189, &mut x190, x188, x168, x165);
  let x191: u64 = ((x190 as u64) + x166);
  let mut x192: u64 = 0;
  let mut x193: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x192, &mut x193, 0x0, x150, x177);
  let mut x194: u64 = 0;
  let mut x195: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x194, &mut x195, x193, x152, x179);
  let mut x196: u64 = 0;
  let mut x197: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x196, &mut x197, x195, x154, x181);
  let mut x198: u64 = 0;
  let mut x199: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x198, &mut x199, x197, x156, x183);
  let mut x200: u64 = 0;
  let mut x201: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x200, &mut x201, x199, x158, x185);
  let mut x202: u64 = 0;
  let mut x203: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x202, &mut x203, x201, x160, x187);
  let mut x204: u64 = 0;
  let mut x205: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x204, &mut x205, x203, x162, x189);
  let mut x206: u64 = 0;
  let mut x207: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x206, &mut x207, x205, x164, x191);
  let mut x208: u64 = 0;
  let mut x209: u64 = 0;
  fiat_p434_mulx_u64(&mut x208, &mut x209, x192, 0x2341f27177344);
  let mut x210: u64 = 0;
  let mut x211: u64 = 0;
  fiat_p434_mulx_u64(&mut x210, &mut x211, x192, 0x6cfc5fd681c52056);
  let mut x212: u64 = 0;
  let mut x213: u64 = 0;
  fiat_p434_mulx_u64(&mut x212, &mut x213, x192, 0x7bc65c783158aea3);
  let mut x214: u64 = 0;
  let mut x215: u64 = 0;
  fiat_p434_mulx_u64(&mut x214, &mut x215, x192, 0xfdc1767ae2ffffff);
  let mut x216: u64 = 0;
  let mut x217: u64 = 0;
  fiat_p434_mulx_u64(&mut x216, &mut x217, x192, 0xffffffffffffffff);
  let mut x218: u64 = 0;
  let mut x219: u64 = 0;
  fiat_p434_mulx_u64(&mut x218, &mut x219, x192, 0xffffffffffffffff);
  let mut x220: u64 = 0;
  let mut x221: u64 = 0;
  fiat_p434_mulx_u64(&mut x220, &mut x221, x192, 0xffffffffffffffff);
  let mut x222: u64 = 0;
  let mut x223: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x222, &mut x223, 0x0, x221, x218);
  let mut x224: u64 = 0;
  let mut x225: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x224, &mut x225, x223, x219, x216);
  let mut x226: u64 = 0;
  let mut x227: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x226, &mut x227, x225, x217, x214);
  let mut x228: u64 = 0;
  let mut x229: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x228, &mut x229, x227, x215, x212);
  let mut x230: u64 = 0;
  let mut x231: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x230, &mut x231, x229, x213, x210);
  let mut x232: u64 = 0;
  let mut x233: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x232, &mut x233, x231, x211, x208);
  let x234: u64 = ((x233 as u64) + x209);
  let mut x235: u64 = 0;
  let mut x236: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x235, &mut x236, 0x0, x192, x220);
  let mut x237: u64 = 0;
  let mut x238: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x237, &mut x238, x236, x194, x222);
  let mut x239: u64 = 0;
  let mut x240: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x239, &mut x240, x238, x196, x224);
  let mut x241: u64 = 0;
  let mut x242: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x241, &mut x242, x240, x198, x226);
  let mut x243: u64 = 0;
  let mut x244: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x243, &mut x244, x242, x200, x228);
  let mut x245: u64 = 0;
  let mut x246: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x245, &mut x246, x244, x202, x230);
  let mut x247: u64 = 0;
  let mut x248: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x247, &mut x248, x246, x204, x232);
  let mut x249: u64 = 0;
  let mut x250: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x249, &mut x250, x248, x206, x234);
  let x251: u64 = ((x250 as u64) + (x207 as u64));
  let mut x252: u64 = 0;
  let mut x253: u64 = 0;
  fiat_p434_mulx_u64(&mut x252, &mut x253, x3, (arg1[6]));
  let mut x254: u64 = 0;
  let mut x255: u64 = 0;
  fiat_p434_mulx_u64(&mut x254, &mut x255, x3, (arg1[5]));
  let mut x256: u64 = 0;
  let mut x257: u64 = 0;
  fiat_p434_mulx_u64(&mut x256, &mut x257, x3, (arg1[4]));
  let mut x258: u64 = 0;
  let mut x259: u64 = 0;
  fiat_p434_mulx_u64(&mut x258, &mut x259, x3, (arg1[3]));
  let mut x260: u64 = 0;
  let mut x261: u64 = 0;
  fiat_p434_mulx_u64(&mut x260, &mut x261, x3, (arg1[2]));
  let mut x262: u64 = 0;
  let mut x263: u64 = 0;
  fiat_p434_mulx_u64(&mut x262, &mut x263, x3, (arg1[1]));
  let mut x264: u64 = 0;
  let mut x265: u64 = 0;
  fiat_p434_mulx_u64(&mut x264, &mut x265, x3, (arg1[0]));
  let mut x266: u64 = 0;
  let mut x267: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x266, &mut x267, 0x0, x265, x262);
  let mut x268: u64 = 0;
  let mut x269: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x268, &mut x269, x267, x263, x260);
  let mut x270: u64 = 0;
  let mut x271: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x270, &mut x271, x269, x261, x258);
  let mut x272: u64 = 0;
  let mut x273: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x272, &mut x273, x271, x259, x256);
  let mut x274: u64 = 0;
  let mut x275: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x274, &mut x275, x273, x257, x254);
  let mut x276: u64 = 0;
  let mut x277: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x276, &mut x277, x275, x255, x252);
  let x278: u64 = ((x277 as u64) + x253);
  let mut x279: u64 = 0;
  let mut x280: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x279, &mut x280, 0x0, x237, x264);
  let mut x281: u64 = 0;
  let mut x282: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x281, &mut x282, x280, x239, x266);
  let mut x283: u64 = 0;
  let mut x284: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x283, &mut x284, x282, x241, x268);
  let mut x285: u64 = 0;
  let mut x286: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x285, &mut x286, x284, x243, x270);
  let mut x287: u64 = 0;
  let mut x288: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x287, &mut x288, x286, x245, x272);
  let mut x289: u64 = 0;
  let mut x290: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x289, &mut x290, x288, x247, x274);
  let mut x291: u64 = 0;
  let mut x292: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x291, &mut x292, x290, x249, x276);
  let mut x293: u64 = 0;
  let mut x294: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x293, &mut x294, x292, x251, x278);
  let mut x295: u64 = 0;
  let mut x296: u64 = 0;
  fiat_p434_mulx_u64(&mut x295, &mut x296, x279, 0x2341f27177344);
  let mut x297: u64 = 0;
  let mut x298: u64 = 0;
  fiat_p434_mulx_u64(&mut x297, &mut x298, x279, 0x6cfc5fd681c52056);
  let mut x299: u64 = 0;
  let mut x300: u64 = 0;
  fiat_p434_mulx_u64(&mut x299, &mut x300, x279, 0x7bc65c783158aea3);
  let mut x301: u64 = 0;
  let mut x302: u64 = 0;
  fiat_p434_mulx_u64(&mut x301, &mut x302, x279, 0xfdc1767ae2ffffff);
  let mut x303: u64 = 0;
  let mut x304: u64 = 0;
  fiat_p434_mulx_u64(&mut x303, &mut x304, x279, 0xffffffffffffffff);
  let mut x305: u64 = 0;
  let mut x306: u64 = 0;
  fiat_p434_mulx_u64(&mut x305, &mut x306, x279, 0xffffffffffffffff);
  let mut x307: u64 = 0;
  let mut x308: u64 = 0;
  fiat_p434_mulx_u64(&mut x307, &mut x308, x279, 0xffffffffffffffff);
  let mut x309: u64 = 0;
  let mut x310: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x309, &mut x310, 0x0, x308, x305);
  let mut x311: u64 = 0;
  let mut x312: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x311, &mut x312, x310, x306, x303);
  let mut x313: u64 = 0;
  let mut x314: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x313, &mut x314, x312, x304, x301);
  let mut x315: u64 = 0;
  let mut x316: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x315, &mut x316, x314, x302, x299);
  let mut x317: u64 = 0;
  let mut x318: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x317, &mut x318, x316, x300, x297);
  let mut x319: u64 = 0;
  let mut x320: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x319, &mut x320, x318, x298, x295);
  let x321: u64 = ((x320 as u64) + x296);
  let mut x322: u64 = 0;
  let mut x323: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x322, &mut x323, 0x0, x279, x307);
  let mut x324: u64 = 0;
  let mut x325: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x324, &mut x325, x323, x281, x309);
  let mut x326: u64 = 0;
  let mut x327: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x326, &mut x327, x325, x283, x311);
  let mut x328: u64 = 0;
  let mut x329: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x328, &mut x329, x327, x285, x313);
  let mut x330: u64 = 0;
  let mut x331: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x330, &mut x331, x329, x287, x315);
  let mut x332: u64 = 0;
  let mut x333: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x332, &mut x333, x331, x289, x317);
  let mut x334: u64 = 0;
  let mut x335: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x334, &mut x335, x333, x291, x319);
  let mut x336: u64 = 0;
  let mut x337: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x336, &mut x337, x335, x293, x321);
  let x338: u64 = ((x337 as u64) + (x294 as u64));
  let mut x339: u64 = 0;
  let mut x340: u64 = 0;
  fiat_p434_mulx_u64(&mut x339, &mut x340, x4, (arg1[6]));
  let mut x341: u64 = 0;
  let mut x342: u64 = 0;
  fiat_p434_mulx_u64(&mut x341, &mut x342, x4, (arg1[5]));
  let mut x343: u64 = 0;
  let mut x344: u64 = 0;
  fiat_p434_mulx_u64(&mut x343, &mut x344, x4, (arg1[4]));
  let mut x345: u64 = 0;
  let mut x346: u64 = 0;
  fiat_p434_mulx_u64(&mut x345, &mut x346, x4, (arg1[3]));
  let mut x347: u64 = 0;
  let mut x348: u64 = 0;
  fiat_p434_mulx_u64(&mut x347, &mut x348, x4, (arg1[2]));
  let mut x349: u64 = 0;
  let mut x350: u64 = 0;
  fiat_p434_mulx_u64(&mut x349, &mut x350, x4, (arg1[1]));
  let mut x351: u64 = 0;
  let mut x352: u64 = 0;
  fiat_p434_mulx_u64(&mut x351, &mut x352, x4, (arg1[0]));
  let mut x353: u64 = 0;
  let mut x354: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x353, &mut x354, 0x0, x352, x349);
  let mut x355: u64 = 0;
  let mut x356: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x355, &mut x356, x354, x350, x347);
  let mut x357: u64 = 0;
  let mut x358: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x357, &mut x358, x356, x348, x345);
  let mut x359: u64 = 0;
  let mut x360: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x359, &mut x360, x358, x346, x343);
  let mut x361: u64 = 0;
  let mut x362: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x361, &mut x362, x360, x344, x341);
  let mut x363: u64 = 0;
  let mut x364: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x363, &mut x364, x362, x342, x339);
  let x365: u64 = ((x364 as u64) + x340);
  let mut x366: u64 = 0;
  let mut x367: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x366, &mut x367, 0x0, x324, x351);
  let mut x368: u64 = 0;
  let mut x369: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x368, &mut x369, x367, x326, x353);
  let mut x370: u64 = 0;
  let mut x371: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x370, &mut x371, x369, x328, x355);
  let mut x372: u64 = 0;
  let mut x373: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x372, &mut x373, x371, x330, x357);
  let mut x374: u64 = 0;
  let mut x375: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x374, &mut x375, x373, x332, x359);
  let mut x376: u64 = 0;
  let mut x377: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x376, &mut x377, x375, x334, x361);
  let mut x378: u64 = 0;
  let mut x379: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x378, &mut x379, x377, x336, x363);
  let mut x380: u64 = 0;
  let mut x381: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x380, &mut x381, x379, x338, x365);
  let mut x382: u64 = 0;
  let mut x383: u64 = 0;
  fiat_p434_mulx_u64(&mut x382, &mut x383, x366, 0x2341f27177344);
  let mut x384: u64 = 0;
  let mut x385: u64 = 0;
  fiat_p434_mulx_u64(&mut x384, &mut x385, x366, 0x6cfc5fd681c52056);
  let mut x386: u64 = 0;
  let mut x387: u64 = 0;
  fiat_p434_mulx_u64(&mut x386, &mut x387, x366, 0x7bc65c783158aea3);
  let mut x388: u64 = 0;
  let mut x389: u64 = 0;
  fiat_p434_mulx_u64(&mut x388, &mut x389, x366, 0xfdc1767ae2ffffff);
  let mut x390: u64 = 0;
  let mut x391: u64 = 0;
  fiat_p434_mulx_u64(&mut x390, &mut x391, x366, 0xffffffffffffffff);
  let mut x392: u64 = 0;
  let mut x393: u64 = 0;
  fiat_p434_mulx_u64(&mut x392, &mut x393, x366, 0xffffffffffffffff);
  let mut x394: u64 = 0;
  let mut x395: u64 = 0;
  fiat_p434_mulx_u64(&mut x394, &mut x395, x366, 0xffffffffffffffff);
  let mut x396: u64 = 0;
  let mut x397: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x396, &mut x397, 0x0, x395, x392);
  let mut x398: u64 = 0;
  let mut x399: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x398, &mut x399, x397, x393, x390);
  let mut x400: u64 = 0;
  let mut x401: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x400, &mut x401, x399, x391, x388);
  let mut x402: u64 = 0;
  let mut x403: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x402, &mut x403, x401, x389, x386);
  let mut x404: u64 = 0;
  let mut x405: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x404, &mut x405, x403, x387, x384);
  let mut x406: u64 = 0;
  let mut x407: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x406, &mut x407, x405, x385, x382);
  let x408: u64 = ((x407 as u64) + x383);
  let mut x409: u64 = 0;
  let mut x410: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x409, &mut x410, 0x0, x366, x394);
  let mut x411: u64 = 0;
  let mut x412: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x411, &mut x412, x410, x368, x396);
  let mut x413: u64 = 0;
  let mut x414: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x413, &mut x414, x412, x370, x398);
  let mut x415: u64 = 0;
  let mut x416: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x415, &mut x416, x414, x372, x400);
  let mut x417: u64 = 0;
  let mut x418: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x417, &mut x418, x416, x374, x402);
  let mut x419: u64 = 0;
  let mut x420: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x419, &mut x420, x418, x376, x404);
  let mut x421: u64 = 0;
  let mut x422: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x421, &mut x422, x420, x378, x406);
  let mut x423: u64 = 0;
  let mut x424: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x423, &mut x424, x422, x380, x408);
  let x425: u64 = ((x424 as u64) + (x381 as u64));
  let mut x426: u64 = 0;
  let mut x427: u64 = 0;
  fiat_p434_mulx_u64(&mut x426, &mut x427, x5, (arg1[6]));
  let mut x428: u64 = 0;
  let mut x429: u64 = 0;
  fiat_p434_mulx_u64(&mut x428, &mut x429, x5, (arg1[5]));
  let mut x430: u64 = 0;
  let mut x431: u64 = 0;
  fiat_p434_mulx_u64(&mut x430, &mut x431, x5, (arg1[4]));
  let mut x432: u64 = 0;
  let mut x433: u64 = 0;
  fiat_p434_mulx_u64(&mut x432, &mut x433, x5, (arg1[3]));
  let mut x434: u64 = 0;
  let mut x435: u64 = 0;
  fiat_p434_mulx_u64(&mut x434, &mut x435, x5, (arg1[2]));
  let mut x436: u64 = 0;
  let mut x437: u64 = 0;
  fiat_p434_mulx_u64(&mut x436, &mut x437, x5, (arg1[1]));
  let mut x438: u64 = 0;
  let mut x439: u64 = 0;
  fiat_p434_mulx_u64(&mut x438, &mut x439, x5, (arg1[0]));
  let mut x440: u64 = 0;
  let mut x441: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x440, &mut x441, 0x0, x439, x436);
  let mut x442: u64 = 0;
  let mut x443: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x442, &mut x443, x441, x437, x434);
  let mut x444: u64 = 0;
  let mut x445: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x444, &mut x445, x443, x435, x432);
  let mut x446: u64 = 0;
  let mut x447: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x446, &mut x447, x445, x433, x430);
  let mut x448: u64 = 0;
  let mut x449: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x448, &mut x449, x447, x431, x428);
  let mut x450: u64 = 0;
  let mut x451: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x450, &mut x451, x449, x429, x426);
  let x452: u64 = ((x451 as u64) + x427);
  let mut x453: u64 = 0;
  let mut x454: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x453, &mut x454, 0x0, x411, x438);
  let mut x455: u64 = 0;
  let mut x456: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x455, &mut x456, x454, x413, x440);
  let mut x457: u64 = 0;
  let mut x458: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x457, &mut x458, x456, x415, x442);
  let mut x459: u64 = 0;
  let mut x460: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x459, &mut x460, x458, x417, x444);
  let mut x461: u64 = 0;
  let mut x462: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x461, &mut x462, x460, x419, x446);
  let mut x463: u64 = 0;
  let mut x464: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x463, &mut x464, x462, x421, x448);
  let mut x465: u64 = 0;
  let mut x466: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x465, &mut x466, x464, x423, x450);
  let mut x467: u64 = 0;
  let mut x468: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x467, &mut x468, x466, x425, x452);
  let mut x469: u64 = 0;
  let mut x470: u64 = 0;
  fiat_p434_mulx_u64(&mut x469, &mut x470, x453, 0x2341f27177344);
  let mut x471: u64 = 0;
  let mut x472: u64 = 0;
  fiat_p434_mulx_u64(&mut x471, &mut x472, x453, 0x6cfc5fd681c52056);
  let mut x473: u64 = 0;
  let mut x474: u64 = 0;
  fiat_p434_mulx_u64(&mut x473, &mut x474, x453, 0x7bc65c783158aea3);
  let mut x475: u64 = 0;
  let mut x476: u64 = 0;
  fiat_p434_mulx_u64(&mut x475, &mut x476, x453, 0xfdc1767ae2ffffff);
  let mut x477: u64 = 0;
  let mut x478: u64 = 0;
  fiat_p434_mulx_u64(&mut x477, &mut x478, x453, 0xffffffffffffffff);
  let mut x479: u64 = 0;
  let mut x480: u64 = 0;
  fiat_p434_mulx_u64(&mut x479, &mut x480, x453, 0xffffffffffffffff);
  let mut x481: u64 = 0;
  let mut x482: u64 = 0;
  fiat_p434_mulx_u64(&mut x481, &mut x482, x453, 0xffffffffffffffff);
  let mut x483: u64 = 0;
  let mut x484: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x483, &mut x484, 0x0, x482, x479);
  let mut x485: u64 = 0;
  let mut x486: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x485, &mut x486, x484, x480, x477);
  let mut x487: u64 = 0;
  let mut x488: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x487, &mut x488, x486, x478, x475);
  let mut x489: u64 = 0;
  let mut x490: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x489, &mut x490, x488, x476, x473);
  let mut x491: u64 = 0;
  let mut x492: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x491, &mut x492, x490, x474, x471);
  let mut x493: u64 = 0;
  let mut x494: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x493, &mut x494, x492, x472, x469);
  let x495: u64 = ((x494 as u64) + x470);
  let mut x496: u64 = 0;
  let mut x497: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x496, &mut x497, 0x0, x453, x481);
  let mut x498: u64 = 0;
  let mut x499: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x498, &mut x499, x497, x455, x483);
  let mut x500: u64 = 0;
  let mut x501: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x500, &mut x501, x499, x457, x485);
  let mut x502: u64 = 0;
  let mut x503: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x502, &mut x503, x501, x459, x487);
  let mut x504: u64 = 0;
  let mut x505: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x504, &mut x505, x503, x461, x489);
  let mut x506: u64 = 0;
  let mut x507: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x506, &mut x507, x505, x463, x491);
  let mut x508: u64 = 0;
  let mut x509: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x508, &mut x509, x507, x465, x493);
  let mut x510: u64 = 0;
  let mut x511: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x510, &mut x511, x509, x467, x495);
  let x512: u64 = ((x511 as u64) + (x468 as u64));
  let mut x513: u64 = 0;
  let mut x514: u64 = 0;
  fiat_p434_mulx_u64(&mut x513, &mut x514, x6, (arg1[6]));
  let mut x515: u64 = 0;
  let mut x516: u64 = 0;
  fiat_p434_mulx_u64(&mut x515, &mut x516, x6, (arg1[5]));
  let mut x517: u64 = 0;
  let mut x518: u64 = 0;
  fiat_p434_mulx_u64(&mut x517, &mut x518, x6, (arg1[4]));
  let mut x519: u64 = 0;
  let mut x520: u64 = 0;
  fiat_p434_mulx_u64(&mut x519, &mut x520, x6, (arg1[3]));
  let mut x521: u64 = 0;
  let mut x522: u64 = 0;
  fiat_p434_mulx_u64(&mut x521, &mut x522, x6, (arg1[2]));
  let mut x523: u64 = 0;
  let mut x524: u64 = 0;
  fiat_p434_mulx_u64(&mut x523, &mut x524, x6, (arg1[1]));
  let mut x525: u64 = 0;
  let mut x526: u64 = 0;
  fiat_p434_mulx_u64(&mut x525, &mut x526, x6, (arg1[0]));
  let mut x527: u64 = 0;
  let mut x528: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x527, &mut x528, 0x0, x526, x523);
  let mut x529: u64 = 0;
  let mut x530: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x529, &mut x530, x528, x524, x521);
  let mut x531: u64 = 0;
  let mut x532: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x531, &mut x532, x530, x522, x519);
  let mut x533: u64 = 0;
  let mut x534: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x533, &mut x534, x532, x520, x517);
  let mut x535: u64 = 0;
  let mut x536: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x535, &mut x536, x534, x518, x515);
  let mut x537: u64 = 0;
  let mut x538: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x537, &mut x538, x536, x516, x513);
  let x539: u64 = ((x538 as u64) + x514);
  let mut x540: u64 = 0;
  let mut x541: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x540, &mut x541, 0x0, x498, x525);
  let mut x542: u64 = 0;
  let mut x543: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x542, &mut x543, x541, x500, x527);
  let mut x544: u64 = 0;
  let mut x545: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x544, &mut x545, x543, x502, x529);
  let mut x546: u64 = 0;
  let mut x547: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x546, &mut x547, x545, x504, x531);
  let mut x548: u64 = 0;
  let mut x549: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x548, &mut x549, x547, x506, x533);
  let mut x550: u64 = 0;
  let mut x551: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x550, &mut x551, x549, x508, x535);
  let mut x552: u64 = 0;
  let mut x553: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x552, &mut x553, x551, x510, x537);
  let mut x554: u64 = 0;
  let mut x555: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x554, &mut x555, x553, x512, x539);
  let mut x556: u64 = 0;
  let mut x557: u64 = 0;
  fiat_p434_mulx_u64(&mut x556, &mut x557, x540, 0x2341f27177344);
  let mut x558: u64 = 0;
  let mut x559: u64 = 0;
  fiat_p434_mulx_u64(&mut x558, &mut x559, x540, 0x6cfc5fd681c52056);
  let mut x560: u64 = 0;
  let mut x561: u64 = 0;
  fiat_p434_mulx_u64(&mut x560, &mut x561, x540, 0x7bc65c783158aea3);
  let mut x562: u64 = 0;
  let mut x563: u64 = 0;
  fiat_p434_mulx_u64(&mut x562, &mut x563, x540, 0xfdc1767ae2ffffff);
  let mut x564: u64 = 0;
  let mut x565: u64 = 0;
  fiat_p434_mulx_u64(&mut x564, &mut x565, x540, 0xffffffffffffffff);
  let mut x566: u64 = 0;
  let mut x567: u64 = 0;
  fiat_p434_mulx_u64(&mut x566, &mut x567, x540, 0xffffffffffffffff);
  let mut x568: u64 = 0;
  let mut x569: u64 = 0;
  fiat_p434_mulx_u64(&mut x568, &mut x569, x540, 0xffffffffffffffff);
  let mut x570: u64 = 0;
  let mut x571: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x570, &mut x571, 0x0, x569, x566);
  let mut x572: u64 = 0;
  let mut x573: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x572, &mut x573, x571, x567, x564);
  let mut x574: u64 = 0;
  let mut x575: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x574, &mut x575, x573, x565, x562);
  let mut x576: u64 = 0;
  let mut x577: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x576, &mut x577, x575, x563, x560);
  let mut x578: u64 = 0;
  let mut x579: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x578, &mut x579, x577, x561, x558);
  let mut x580: u64 = 0;
  let mut x581: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x580, &mut x581, x579, x559, x556);
  let x582: u64 = ((x581 as u64) + x557);
  let mut x583: u64 = 0;
  let mut x584: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x583, &mut x584, 0x0, x540, x568);
  let mut x585: u64 = 0;
  let mut x586: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x585, &mut x586, x584, x542, x570);
  let mut x587: u64 = 0;
  let mut x588: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x587, &mut x588, x586, x544, x572);
  let mut x589: u64 = 0;
  let mut x590: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x589, &mut x590, x588, x546, x574);
  let mut x591: u64 = 0;
  let mut x592: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x591, &mut x592, x590, x548, x576);
  let mut x593: u64 = 0;
  let mut x594: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x593, &mut x594, x592, x550, x578);
  let mut x595: u64 = 0;
  let mut x596: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x595, &mut x596, x594, x552, x580);
  let mut x597: u64 = 0;
  let mut x598: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x597, &mut x598, x596, x554, x582);
  let x599: u64 = ((x598 as u64) + (x555 as u64));
  let mut x600: u64 = 0;
  let mut x601: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x600, &mut x601, 0x0, x585, 0xffffffffffffffff);
  let mut x602: u64 = 0;
  let mut x603: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x602, &mut x603, x601, x587, 0xffffffffffffffff);
  let mut x604: u64 = 0;
  let mut x605: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x604, &mut x605, x603, x589, 0xffffffffffffffff);
  let mut x606: u64 = 0;
  let mut x607: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x606, &mut x607, x605, x591, 0xfdc1767ae2ffffff);
  let mut x608: u64 = 0;
  let mut x609: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x608, &mut x609, x607, x593, 0x7bc65c783158aea3);
  let mut x610: u64 = 0;
  let mut x611: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x610, &mut x611, x609, x595, 0x6cfc5fd681c52056);
  let mut x612: u64 = 0;
  let mut x613: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x612, &mut x613, x611, x597, 0x2341f27177344);
  let mut x614: u64 = 0;
  let mut x615: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x614, &mut x615, x613, x599, (0x0 as u64));
  let mut x616: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x616, x615, x600, x585);
  let mut x617: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x617, x615, x602, x587);
  let mut x618: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x618, x615, x604, x589);
  let mut x619: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x619, x615, x606, x591);
  let mut x620: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x620, x615, x608, x593);
  let mut x621: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x621, x615, x610, x595);
  let mut x622: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x622, x615, x612, x597);
  out1[0] = x616;
  out1[1] = x617;
  out1[2] = x618;
  out1[3] = x619;
  out1[4] = x620;
  out1[5] = x621;
  out1[6] = x622;
}

/*
 * The function fiat_p434_add adds two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_p434_add(out1: &mut [u64; 7], arg1: &[u64; 7], arg2: &[u64; 7]) -> () {
  let mut x1: u64 = 0;
  let mut x2: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x1, &mut x2, 0x0, (arg1[0]), (arg2[0]));
  let mut x3: u64 = 0;
  let mut x4: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x3, &mut x4, x2, (arg1[1]), (arg2[1]));
  let mut x5: u64 = 0;
  let mut x6: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x5, &mut x6, x4, (arg1[2]), (arg2[2]));
  let mut x7: u64 = 0;
  let mut x8: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x7, &mut x8, x6, (arg1[3]), (arg2[3]));
  let mut x9: u64 = 0;
  let mut x10: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x9, &mut x10, x8, (arg1[4]), (arg2[4]));
  let mut x11: u64 = 0;
  let mut x12: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x11, &mut x12, x10, (arg1[5]), (arg2[5]));
  let mut x13: u64 = 0;
  let mut x14: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x13, &mut x14, x12, (arg1[6]), (arg2[6]));
  let mut x15: u64 = 0;
  let mut x16: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x15, &mut x16, 0x0, x1, 0xffffffffffffffff);
  let mut x17: u64 = 0;
  let mut x18: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x17, &mut x18, x16, x3, 0xffffffffffffffff);
  let mut x19: u64 = 0;
  let mut x20: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x19, &mut x20, x18, x5, 0xffffffffffffffff);
  let mut x21: u64 = 0;
  let mut x22: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x21, &mut x22, x20, x7, 0xfdc1767ae2ffffff);
  let mut x23: u64 = 0;
  let mut x24: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x23, &mut x24, x22, x9, 0x7bc65c783158aea3);
  let mut x25: u64 = 0;
  let mut x26: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x25, &mut x26, x24, x11, 0x6cfc5fd681c52056);
  let mut x27: u64 = 0;
  let mut x28: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x27, &mut x28, x26, x13, 0x2341f27177344);
  let mut x29: u64 = 0;
  let mut x30: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x29, &mut x30, x28, (x14 as u64), (0x0 as u64));
  let mut x31: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x31, x30, x15, x1);
  let mut x32: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x32, x30, x17, x3);
  let mut x33: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x33, x30, x19, x5);
  let mut x34: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x34, x30, x21, x7);
  let mut x35: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x35, x30, x23, x9);
  let mut x36: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x36, x30, x25, x11);
  let mut x37: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x37, x30, x27, x13);
  out1[0] = x31;
  out1[1] = x32;
  out1[2] = x33;
  out1[3] = x34;
  out1[4] = x35;
  out1[5] = x36;
  out1[6] = x37;
}

/*
 * The function fiat_p434_sub subtracts two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_p434_sub(out1: &mut [u64; 7], arg1: &[u64; 7], arg2: &[u64; 7]) -> () {
  let mut x1: u64 = 0;
  let mut x2: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x1, &mut x2, 0x0, (arg1[0]), (arg2[0]));
  let mut x3: u64 = 0;
  let mut x4: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x3, &mut x4, x2, (arg1[1]), (arg2[1]));
  let mut x5: u64 = 0;
  let mut x6: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x5, &mut x6, x4, (arg1[2]), (arg2[2]));
  let mut x7: u64 = 0;
  let mut x8: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x7, &mut x8, x6, (arg1[3]), (arg2[3]));
  let mut x9: u64 = 0;
  let mut x10: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x9, &mut x10, x8, (arg1[4]), (arg2[4]));
  let mut x11: u64 = 0;
  let mut x12: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x11, &mut x12, x10, (arg1[5]), (arg2[5]));
  let mut x13: u64 = 0;
  let mut x14: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x13, &mut x14, x12, (arg1[6]), (arg2[6]));
  let mut x15: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x15, x14, (0x0 as u64), 0xffffffffffffffff);
  let mut x16: u64 = 0;
  let mut x17: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x16, &mut x17, 0x0, x1, (x15 & 0xffffffffffffffff));
  let mut x18: u64 = 0;
  let mut x19: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x18, &mut x19, x17, x3, (x15 & 0xffffffffffffffff));
  let mut x20: u64 = 0;
  let mut x21: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x20, &mut x21, x19, x5, (x15 & 0xffffffffffffffff));
  let mut x22: u64 = 0;
  let mut x23: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x22, &mut x23, x21, x7, (x15 & 0xfdc1767ae2ffffff));
  let mut x24: u64 = 0;
  let mut x25: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x24, &mut x25, x23, x9, (x15 & 0x7bc65c783158aea3));
  let mut x26: u64 = 0;
  let mut x27: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x26, &mut x27, x25, x11, (x15 & 0x6cfc5fd681c52056));
  let mut x28: u64 = 0;
  let mut x29: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x28, &mut x29, x27, x13, (x15 & 0x2341f27177344));
  out1[0] = x16;
  out1[1] = x18;
  out1[2] = x20;
  out1[3] = x22;
  out1[4] = x24;
  out1[5] = x26;
  out1[6] = x28;
}

/*
 * The function fiat_p434_opp negates a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_p434_opp(out1: &mut [u64; 7], arg1: &[u64; 7]) -> () {
  let mut x1: u64 = 0;
  let mut x2: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x1, &mut x2, 0x0, (0x0 as u64), (arg1[0]));
  let mut x3: u64 = 0;
  let mut x4: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x3, &mut x4, x2, (0x0 as u64), (arg1[1]));
  let mut x5: u64 = 0;
  let mut x6: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x5, &mut x6, x4, (0x0 as u64), (arg1[2]));
  let mut x7: u64 = 0;
  let mut x8: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x7, &mut x8, x6, (0x0 as u64), (arg1[3]));
  let mut x9: u64 = 0;
  let mut x10: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x9, &mut x10, x8, (0x0 as u64), (arg1[4]));
  let mut x11: u64 = 0;
  let mut x12: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x11, &mut x12, x10, (0x0 as u64), (arg1[5]));
  let mut x13: u64 = 0;
  let mut x14: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x13, &mut x14, x12, (0x0 as u64), (arg1[6]));
  let mut x15: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x15, x14, (0x0 as u64), 0xffffffffffffffff);
  let mut x16: u64 = 0;
  let mut x17: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x16, &mut x17, 0x0, x1, (x15 & 0xffffffffffffffff));
  let mut x18: u64 = 0;
  let mut x19: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x18, &mut x19, x17, x3, (x15 & 0xffffffffffffffff));
  let mut x20: u64 = 0;
  let mut x21: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x20, &mut x21, x19, x5, (x15 & 0xffffffffffffffff));
  let mut x22: u64 = 0;
  let mut x23: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x22, &mut x23, x21, x7, (x15 & 0xfdc1767ae2ffffff));
  let mut x24: u64 = 0;
  let mut x25: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x24, &mut x25, x23, x9, (x15 & 0x7bc65c783158aea3));
  let mut x26: u64 = 0;
  let mut x27: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x26, &mut x27, x25, x11, (x15 & 0x6cfc5fd681c52056));
  let mut x28: u64 = 0;
  let mut x29: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x28, &mut x29, x27, x13, (x15 & 0x2341f27177344));
  out1[0] = x16;
  out1[1] = x18;
  out1[2] = x20;
  out1[3] = x22;
  out1[4] = x24;
  out1[5] = x26;
  out1[6] = x28;
}

/*
 * The function fiat_p434_from_montgomery translates a field element out of the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = (eval arg1 * ((2^64)⁻¹ mod m)^7) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_p434_from_montgomery(out1: &mut [u64; 7], arg1: &[u64; 7]) -> () {
  let x1: u64 = (arg1[0]);
  let mut x2: u64 = 0;
  let mut x3: u64 = 0;
  fiat_p434_mulx_u64(&mut x2, &mut x3, x1, 0x2341f27177344);
  let mut x4: u64 = 0;
  let mut x5: u64 = 0;
  fiat_p434_mulx_u64(&mut x4, &mut x5, x1, 0x6cfc5fd681c52056);
  let mut x6: u64 = 0;
  let mut x7: u64 = 0;
  fiat_p434_mulx_u64(&mut x6, &mut x7, x1, 0x7bc65c783158aea3);
  let mut x8: u64 = 0;
  let mut x9: u64 = 0;
  fiat_p434_mulx_u64(&mut x8, &mut x9, x1, 0xfdc1767ae2ffffff);
  let mut x10: u64 = 0;
  let mut x11: u64 = 0;
  fiat_p434_mulx_u64(&mut x10, &mut x11, x1, 0xffffffffffffffff);
  let mut x12: u64 = 0;
  let mut x13: u64 = 0;
  fiat_p434_mulx_u64(&mut x12, &mut x13, x1, 0xffffffffffffffff);
  let mut x14: u64 = 0;
  let mut x15: u64 = 0;
  fiat_p434_mulx_u64(&mut x14, &mut x15, x1, 0xffffffffffffffff);
  let mut x16: u64 = 0;
  let mut x17: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x16, &mut x17, 0x0, x15, x12);
  let mut x18: u64 = 0;
  let mut x19: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x18, &mut x19, x17, x13, x10);
  let mut x20: u64 = 0;
  let mut x21: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x20, &mut x21, x19, x11, x8);
  let mut x22: u64 = 0;
  let mut x23: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x22, &mut x23, x21, x9, x6);
  let mut x24: u64 = 0;
  let mut x25: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x24, &mut x25, x23, x7, x4);
  let mut x26: u64 = 0;
  let mut x27: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x26, &mut x27, x25, x5, x2);
  let mut x28: u64 = 0;
  let mut x29: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x28, &mut x29, 0x0, x1, x14);
  let mut x30: u64 = 0;
  let mut x31: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x30, &mut x31, x29, (0x0 as u64), x16);
  let mut x32: u64 = 0;
  let mut x33: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x32, &mut x33, x31, (0x0 as u64), x18);
  let mut x34: u64 = 0;
  let mut x35: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x34, &mut x35, x33, (0x0 as u64), x20);
  let mut x36: u64 = 0;
  let mut x37: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x36, &mut x37, x35, (0x0 as u64), x22);
  let mut x38: u64 = 0;
  let mut x39: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x38, &mut x39, x37, (0x0 as u64), x24);
  let mut x40: u64 = 0;
  let mut x41: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x40, &mut x41, x39, (0x0 as u64), x26);
  let mut x42: u64 = 0;
  let mut x43: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x42, &mut x43, 0x0, x30, (arg1[1]));
  let mut x44: u64 = 0;
  let mut x45: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x44, &mut x45, x43, x32, (0x0 as u64));
  let mut x46: u64 = 0;
  let mut x47: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x46, &mut x47, x45, x34, (0x0 as u64));
  let mut x48: u64 = 0;
  let mut x49: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x48, &mut x49, x47, x36, (0x0 as u64));
  let mut x50: u64 = 0;
  let mut x51: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x50, &mut x51, x49, x38, (0x0 as u64));
  let mut x52: u64 = 0;
  let mut x53: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x52, &mut x53, x51, x40, (0x0 as u64));
  let mut x54: u64 = 0;
  let mut x55: u64 = 0;
  fiat_p434_mulx_u64(&mut x54, &mut x55, x42, 0x2341f27177344);
  let mut x56: u64 = 0;
  let mut x57: u64 = 0;
  fiat_p434_mulx_u64(&mut x56, &mut x57, x42, 0x6cfc5fd681c52056);
  let mut x58: u64 = 0;
  let mut x59: u64 = 0;
  fiat_p434_mulx_u64(&mut x58, &mut x59, x42, 0x7bc65c783158aea3);
  let mut x60: u64 = 0;
  let mut x61: u64 = 0;
  fiat_p434_mulx_u64(&mut x60, &mut x61, x42, 0xfdc1767ae2ffffff);
  let mut x62: u64 = 0;
  let mut x63: u64 = 0;
  fiat_p434_mulx_u64(&mut x62, &mut x63, x42, 0xffffffffffffffff);
  let mut x64: u64 = 0;
  let mut x65: u64 = 0;
  fiat_p434_mulx_u64(&mut x64, &mut x65, x42, 0xffffffffffffffff);
  let mut x66: u64 = 0;
  let mut x67: u64 = 0;
  fiat_p434_mulx_u64(&mut x66, &mut x67, x42, 0xffffffffffffffff);
  let mut x68: u64 = 0;
  let mut x69: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x68, &mut x69, 0x0, x67, x64);
  let mut x70: u64 = 0;
  let mut x71: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x70, &mut x71, x69, x65, x62);
  let mut x72: u64 = 0;
  let mut x73: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x72, &mut x73, x71, x63, x60);
  let mut x74: u64 = 0;
  let mut x75: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x74, &mut x75, x73, x61, x58);
  let mut x76: u64 = 0;
  let mut x77: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x76, &mut x77, x75, x59, x56);
  let mut x78: u64 = 0;
  let mut x79: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x78, &mut x79, x77, x57, x54);
  let mut x80: u64 = 0;
  let mut x81: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x80, &mut x81, 0x0, x42, x66);
  let mut x82: u64 = 0;
  let mut x83: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x82, &mut x83, x81, x44, x68);
  let mut x84: u64 = 0;
  let mut x85: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x84, &mut x85, x83, x46, x70);
  let mut x86: u64 = 0;
  let mut x87: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x86, &mut x87, x85, x48, x72);
  let mut x88: u64 = 0;
  let mut x89: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x88, &mut x89, x87, x50, x74);
  let mut x90: u64 = 0;
  let mut x91: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x90, &mut x91, x89, x52, x76);
  let mut x92: u64 = 0;
  let mut x93: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x92, &mut x93, x91, ((x53 as u64) + ((x41 as u64) + ((x27 as u64) + x3))), x78);
  let mut x94: u64 = 0;
  let mut x95: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x94, &mut x95, 0x0, x82, (arg1[2]));
  let mut x96: u64 = 0;
  let mut x97: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x96, &mut x97, x95, x84, (0x0 as u64));
  let mut x98: u64 = 0;
  let mut x99: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x98, &mut x99, x97, x86, (0x0 as u64));
  let mut x100: u64 = 0;
  let mut x101: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x100, &mut x101, x99, x88, (0x0 as u64));
  let mut x102: u64 = 0;
  let mut x103: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x102, &mut x103, x101, x90, (0x0 as u64));
  let mut x104: u64 = 0;
  let mut x105: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x104, &mut x105, x103, x92, (0x0 as u64));
  let mut x106: u64 = 0;
  let mut x107: u64 = 0;
  fiat_p434_mulx_u64(&mut x106, &mut x107, x94, 0x2341f27177344);
  let mut x108: u64 = 0;
  let mut x109: u64 = 0;
  fiat_p434_mulx_u64(&mut x108, &mut x109, x94, 0x6cfc5fd681c52056);
  let mut x110: u64 = 0;
  let mut x111: u64 = 0;
  fiat_p434_mulx_u64(&mut x110, &mut x111, x94, 0x7bc65c783158aea3);
  let mut x112: u64 = 0;
  let mut x113: u64 = 0;
  fiat_p434_mulx_u64(&mut x112, &mut x113, x94, 0xfdc1767ae2ffffff);
  let mut x114: u64 = 0;
  let mut x115: u64 = 0;
  fiat_p434_mulx_u64(&mut x114, &mut x115, x94, 0xffffffffffffffff);
  let mut x116: u64 = 0;
  let mut x117: u64 = 0;
  fiat_p434_mulx_u64(&mut x116, &mut x117, x94, 0xffffffffffffffff);
  let mut x118: u64 = 0;
  let mut x119: u64 = 0;
  fiat_p434_mulx_u64(&mut x118, &mut x119, x94, 0xffffffffffffffff);
  let mut x120: u64 = 0;
  let mut x121: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x120, &mut x121, 0x0, x119, x116);
  let mut x122: u64 = 0;
  let mut x123: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x122, &mut x123, x121, x117, x114);
  let mut x124: u64 = 0;
  let mut x125: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x124, &mut x125, x123, x115, x112);
  let mut x126: u64 = 0;
  let mut x127: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x126, &mut x127, x125, x113, x110);
  let mut x128: u64 = 0;
  let mut x129: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x128, &mut x129, x127, x111, x108);
  let mut x130: u64 = 0;
  let mut x131: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x130, &mut x131, x129, x109, x106);
  let mut x132: u64 = 0;
  let mut x133: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x132, &mut x133, 0x0, x94, x118);
  let mut x134: u64 = 0;
  let mut x135: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x134, &mut x135, x133, x96, x120);
  let mut x136: u64 = 0;
  let mut x137: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x136, &mut x137, x135, x98, x122);
  let mut x138: u64 = 0;
  let mut x139: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x138, &mut x139, x137, x100, x124);
  let mut x140: u64 = 0;
  let mut x141: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x140, &mut x141, x139, x102, x126);
  let mut x142: u64 = 0;
  let mut x143: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x142, &mut x143, x141, x104, x128);
  let mut x144: u64 = 0;
  let mut x145: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x144, &mut x145, x143, ((x105 as u64) + ((x93 as u64) + ((x79 as u64) + x55))), x130);
  let mut x146: u64 = 0;
  let mut x147: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x146, &mut x147, 0x0, x134, (arg1[3]));
  let mut x148: u64 = 0;
  let mut x149: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x148, &mut x149, x147, x136, (0x0 as u64));
  let mut x150: u64 = 0;
  let mut x151: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x150, &mut x151, x149, x138, (0x0 as u64));
  let mut x152: u64 = 0;
  let mut x153: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x152, &mut x153, x151, x140, (0x0 as u64));
  let mut x154: u64 = 0;
  let mut x155: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x154, &mut x155, x153, x142, (0x0 as u64));
  let mut x156: u64 = 0;
  let mut x157: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x156, &mut x157, x155, x144, (0x0 as u64));
  let mut x158: u64 = 0;
  let mut x159: u64 = 0;
  fiat_p434_mulx_u64(&mut x158, &mut x159, x146, 0x2341f27177344);
  let mut x160: u64 = 0;
  let mut x161: u64 = 0;
  fiat_p434_mulx_u64(&mut x160, &mut x161, x146, 0x6cfc5fd681c52056);
  let mut x162: u64 = 0;
  let mut x163: u64 = 0;
  fiat_p434_mulx_u64(&mut x162, &mut x163, x146, 0x7bc65c783158aea3);
  let mut x164: u64 = 0;
  let mut x165: u64 = 0;
  fiat_p434_mulx_u64(&mut x164, &mut x165, x146, 0xfdc1767ae2ffffff);
  let mut x166: u64 = 0;
  let mut x167: u64 = 0;
  fiat_p434_mulx_u64(&mut x166, &mut x167, x146, 0xffffffffffffffff);
  let mut x168: u64 = 0;
  let mut x169: u64 = 0;
  fiat_p434_mulx_u64(&mut x168, &mut x169, x146, 0xffffffffffffffff);
  let mut x170: u64 = 0;
  let mut x171: u64 = 0;
  fiat_p434_mulx_u64(&mut x170, &mut x171, x146, 0xffffffffffffffff);
  let mut x172: u64 = 0;
  let mut x173: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x172, &mut x173, 0x0, x171, x168);
  let mut x174: u64 = 0;
  let mut x175: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x174, &mut x175, x173, x169, x166);
  let mut x176: u64 = 0;
  let mut x177: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x176, &mut x177, x175, x167, x164);
  let mut x178: u64 = 0;
  let mut x179: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x178, &mut x179, x177, x165, x162);
  let mut x180: u64 = 0;
  let mut x181: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x180, &mut x181, x179, x163, x160);
  let mut x182: u64 = 0;
  let mut x183: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x182, &mut x183, x181, x161, x158);
  let mut x184: u64 = 0;
  let mut x185: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x184, &mut x185, 0x0, x146, x170);
  let mut x186: u64 = 0;
  let mut x187: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x186, &mut x187, x185, x148, x172);
  let mut x188: u64 = 0;
  let mut x189: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x188, &mut x189, x187, x150, x174);
  let mut x190: u64 = 0;
  let mut x191: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x190, &mut x191, x189, x152, x176);
  let mut x192: u64 = 0;
  let mut x193: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x192, &mut x193, x191, x154, x178);
  let mut x194: u64 = 0;
  let mut x195: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x194, &mut x195, x193, x156, x180);
  let mut x196: u64 = 0;
  let mut x197: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x196, &mut x197, x195, ((x157 as u64) + ((x145 as u64) + ((x131 as u64) + x107))), x182);
  let mut x198: u64 = 0;
  let mut x199: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x198, &mut x199, 0x0, x186, (arg1[4]));
  let mut x200: u64 = 0;
  let mut x201: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x200, &mut x201, x199, x188, (0x0 as u64));
  let mut x202: u64 = 0;
  let mut x203: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x202, &mut x203, x201, x190, (0x0 as u64));
  let mut x204: u64 = 0;
  let mut x205: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x204, &mut x205, x203, x192, (0x0 as u64));
  let mut x206: u64 = 0;
  let mut x207: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x206, &mut x207, x205, x194, (0x0 as u64));
  let mut x208: u64 = 0;
  let mut x209: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x208, &mut x209, x207, x196, (0x0 as u64));
  let mut x210: u64 = 0;
  let mut x211: u64 = 0;
  fiat_p434_mulx_u64(&mut x210, &mut x211, x198, 0x2341f27177344);
  let mut x212: u64 = 0;
  let mut x213: u64 = 0;
  fiat_p434_mulx_u64(&mut x212, &mut x213, x198, 0x6cfc5fd681c52056);
  let mut x214: u64 = 0;
  let mut x215: u64 = 0;
  fiat_p434_mulx_u64(&mut x214, &mut x215, x198, 0x7bc65c783158aea3);
  let mut x216: u64 = 0;
  let mut x217: u64 = 0;
  fiat_p434_mulx_u64(&mut x216, &mut x217, x198, 0xfdc1767ae2ffffff);
  let mut x218: u64 = 0;
  let mut x219: u64 = 0;
  fiat_p434_mulx_u64(&mut x218, &mut x219, x198, 0xffffffffffffffff);
  let mut x220: u64 = 0;
  let mut x221: u64 = 0;
  fiat_p434_mulx_u64(&mut x220, &mut x221, x198, 0xffffffffffffffff);
  let mut x222: u64 = 0;
  let mut x223: u64 = 0;
  fiat_p434_mulx_u64(&mut x222, &mut x223, x198, 0xffffffffffffffff);
  let mut x224: u64 = 0;
  let mut x225: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x224, &mut x225, 0x0, x223, x220);
  let mut x226: u64 = 0;
  let mut x227: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x226, &mut x227, x225, x221, x218);
  let mut x228: u64 = 0;
  let mut x229: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x228, &mut x229, x227, x219, x216);
  let mut x230: u64 = 0;
  let mut x231: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x230, &mut x231, x229, x217, x214);
  let mut x232: u64 = 0;
  let mut x233: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x232, &mut x233, x231, x215, x212);
  let mut x234: u64 = 0;
  let mut x235: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x234, &mut x235, x233, x213, x210);
  let mut x236: u64 = 0;
  let mut x237: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x236, &mut x237, 0x0, x198, x222);
  let mut x238: u64 = 0;
  let mut x239: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x238, &mut x239, x237, x200, x224);
  let mut x240: u64 = 0;
  let mut x241: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x240, &mut x241, x239, x202, x226);
  let mut x242: u64 = 0;
  let mut x243: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x242, &mut x243, x241, x204, x228);
  let mut x244: u64 = 0;
  let mut x245: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x244, &mut x245, x243, x206, x230);
  let mut x246: u64 = 0;
  let mut x247: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x246, &mut x247, x245, x208, x232);
  let mut x248: u64 = 0;
  let mut x249: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x248, &mut x249, x247, ((x209 as u64) + ((x197 as u64) + ((x183 as u64) + x159))), x234);
  let mut x250: u64 = 0;
  let mut x251: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x250, &mut x251, 0x0, x238, (arg1[5]));
  let mut x252: u64 = 0;
  let mut x253: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x252, &mut x253, x251, x240, (0x0 as u64));
  let mut x254: u64 = 0;
  let mut x255: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x254, &mut x255, x253, x242, (0x0 as u64));
  let mut x256: u64 = 0;
  let mut x257: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x256, &mut x257, x255, x244, (0x0 as u64));
  let mut x258: u64 = 0;
  let mut x259: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x258, &mut x259, x257, x246, (0x0 as u64));
  let mut x260: u64 = 0;
  let mut x261: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x260, &mut x261, x259, x248, (0x0 as u64));
  let mut x262: u64 = 0;
  let mut x263: u64 = 0;
  fiat_p434_mulx_u64(&mut x262, &mut x263, x250, 0x2341f27177344);
  let mut x264: u64 = 0;
  let mut x265: u64 = 0;
  fiat_p434_mulx_u64(&mut x264, &mut x265, x250, 0x6cfc5fd681c52056);
  let mut x266: u64 = 0;
  let mut x267: u64 = 0;
  fiat_p434_mulx_u64(&mut x266, &mut x267, x250, 0x7bc65c783158aea3);
  let mut x268: u64 = 0;
  let mut x269: u64 = 0;
  fiat_p434_mulx_u64(&mut x268, &mut x269, x250, 0xfdc1767ae2ffffff);
  let mut x270: u64 = 0;
  let mut x271: u64 = 0;
  fiat_p434_mulx_u64(&mut x270, &mut x271, x250, 0xffffffffffffffff);
  let mut x272: u64 = 0;
  let mut x273: u64 = 0;
  fiat_p434_mulx_u64(&mut x272, &mut x273, x250, 0xffffffffffffffff);
  let mut x274: u64 = 0;
  let mut x275: u64 = 0;
  fiat_p434_mulx_u64(&mut x274, &mut x275, x250, 0xffffffffffffffff);
  let mut x276: u64 = 0;
  let mut x277: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x276, &mut x277, 0x0, x275, x272);
  let mut x278: u64 = 0;
  let mut x279: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x278, &mut x279, x277, x273, x270);
  let mut x280: u64 = 0;
  let mut x281: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x280, &mut x281, x279, x271, x268);
  let mut x282: u64 = 0;
  let mut x283: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x282, &mut x283, x281, x269, x266);
  let mut x284: u64 = 0;
  let mut x285: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x284, &mut x285, x283, x267, x264);
  let mut x286: u64 = 0;
  let mut x287: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x286, &mut x287, x285, x265, x262);
  let mut x288: u64 = 0;
  let mut x289: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x288, &mut x289, 0x0, x250, x274);
  let mut x290: u64 = 0;
  let mut x291: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x290, &mut x291, x289, x252, x276);
  let mut x292: u64 = 0;
  let mut x293: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x292, &mut x293, x291, x254, x278);
  let mut x294: u64 = 0;
  let mut x295: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x294, &mut x295, x293, x256, x280);
  let mut x296: u64 = 0;
  let mut x297: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x296, &mut x297, x295, x258, x282);
  let mut x298: u64 = 0;
  let mut x299: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x298, &mut x299, x297, x260, x284);
  let mut x300: u64 = 0;
  let mut x301: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x300, &mut x301, x299, ((x261 as u64) + ((x249 as u64) + ((x235 as u64) + x211))), x286);
  let mut x302: u64 = 0;
  let mut x303: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x302, &mut x303, 0x0, x290, (arg1[6]));
  let mut x304: u64 = 0;
  let mut x305: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x304, &mut x305, x303, x292, (0x0 as u64));
  let mut x306: u64 = 0;
  let mut x307: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x306, &mut x307, x305, x294, (0x0 as u64));
  let mut x308: u64 = 0;
  let mut x309: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x308, &mut x309, x307, x296, (0x0 as u64));
  let mut x310: u64 = 0;
  let mut x311: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x310, &mut x311, x309, x298, (0x0 as u64));
  let mut x312: u64 = 0;
  let mut x313: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x312, &mut x313, x311, x300, (0x0 as u64));
  let mut x314: u64 = 0;
  let mut x315: u64 = 0;
  fiat_p434_mulx_u64(&mut x314, &mut x315, x302, 0x2341f27177344);
  let mut x316: u64 = 0;
  let mut x317: u64 = 0;
  fiat_p434_mulx_u64(&mut x316, &mut x317, x302, 0x6cfc5fd681c52056);
  let mut x318: u64 = 0;
  let mut x319: u64 = 0;
  fiat_p434_mulx_u64(&mut x318, &mut x319, x302, 0x7bc65c783158aea3);
  let mut x320: u64 = 0;
  let mut x321: u64 = 0;
  fiat_p434_mulx_u64(&mut x320, &mut x321, x302, 0xfdc1767ae2ffffff);
  let mut x322: u64 = 0;
  let mut x323: u64 = 0;
  fiat_p434_mulx_u64(&mut x322, &mut x323, x302, 0xffffffffffffffff);
  let mut x324: u64 = 0;
  let mut x325: u64 = 0;
  fiat_p434_mulx_u64(&mut x324, &mut x325, x302, 0xffffffffffffffff);
  let mut x326: u64 = 0;
  let mut x327: u64 = 0;
  fiat_p434_mulx_u64(&mut x326, &mut x327, x302, 0xffffffffffffffff);
  let mut x328: u64 = 0;
  let mut x329: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x328, &mut x329, 0x0, x327, x324);
  let mut x330: u64 = 0;
  let mut x331: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x330, &mut x331, x329, x325, x322);
  let mut x332: u64 = 0;
  let mut x333: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x332, &mut x333, x331, x323, x320);
  let mut x334: u64 = 0;
  let mut x335: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x334, &mut x335, x333, x321, x318);
  let mut x336: u64 = 0;
  let mut x337: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x336, &mut x337, x335, x319, x316);
  let mut x338: u64 = 0;
  let mut x339: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x338, &mut x339, x337, x317, x314);
  let mut x340: u64 = 0;
  let mut x341: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x340, &mut x341, 0x0, x302, x326);
  let mut x342: u64 = 0;
  let mut x343: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x342, &mut x343, x341, x304, x328);
  let mut x344: u64 = 0;
  let mut x345: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x344, &mut x345, x343, x306, x330);
  let mut x346: u64 = 0;
  let mut x347: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x346, &mut x347, x345, x308, x332);
  let mut x348: u64 = 0;
  let mut x349: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x348, &mut x349, x347, x310, x334);
  let mut x350: u64 = 0;
  let mut x351: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x350, &mut x351, x349, x312, x336);
  let mut x352: u64 = 0;
  let mut x353: fiat_p434_u1 = 0;
  fiat_p434_addcarryx_u64(&mut x352, &mut x353, x351, ((x313 as u64) + ((x301 as u64) + ((x287 as u64) + x263))), x338);
  let x354: u64 = ((x353 as u64) + ((x339 as u64) + x315));
  let mut x355: u64 = 0;
  let mut x356: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x355, &mut x356, 0x0, x342, 0xffffffffffffffff);
  let mut x357: u64 = 0;
  let mut x358: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x357, &mut x358, x356, x344, 0xffffffffffffffff);
  let mut x359: u64 = 0;
  let mut x360: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x359, &mut x360, x358, x346, 0xffffffffffffffff);
  let mut x361: u64 = 0;
  let mut x362: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x361, &mut x362, x360, x348, 0xfdc1767ae2ffffff);
  let mut x363: u64 = 0;
  let mut x364: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x363, &mut x364, x362, x350, 0x7bc65c783158aea3);
  let mut x365: u64 = 0;
  let mut x366: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x365, &mut x366, x364, x352, 0x6cfc5fd681c52056);
  let mut x367: u64 = 0;
  let mut x368: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x367, &mut x368, x366, x354, 0x2341f27177344);
  let mut x369: u64 = 0;
  let mut x370: fiat_p434_u1 = 0;
  fiat_p434_subborrowx_u64(&mut x369, &mut x370, x368, (0x0 as u64), (0x0 as u64));
  let mut x371: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x371, x370, x355, x342);
  let mut x372: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x372, x370, x357, x344);
  let mut x373: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x373, x370, x359, x346);
  let mut x374: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x374, x370, x361, x348);
  let mut x375: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x375, x370, x363, x350);
  let mut x376: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x376, x370, x365, x352);
  let mut x377: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x377, x370, x367, x354);
  out1[0] = x371;
  out1[1] = x372;
  out1[2] = x373;
  out1[3] = x374;
  out1[4] = x375;
  out1[5] = x376;
  out1[6] = x377;
}

/*
 * The function fiat_p434_nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 */
#[inline]
pub fn fiat_p434_nonzero(out1: &mut u64, arg1: &[u64; 7]) -> () {
  let x1: u64 = ((arg1[0]) | ((arg1[1]) | ((arg1[2]) | ((arg1[3]) | ((arg1[4]) | ((arg1[5]) | ((arg1[6]) | (0x0 as u64))))))));
  *out1 = x1;
}

/*
 * The function fiat_p434_selectznz is a multi-limb conditional select.
 * Postconditions:
 *   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
#[inline]
pub fn fiat_p434_selectznz(out1: &mut [u64; 7], arg1: fiat_p434_u1, arg2: &[u64; 7], arg3: &[u64; 7]) -> () {
  let mut x1: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x1, arg1, (arg2[0]), (arg3[0]));
  let mut x2: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x2, arg1, (arg2[1]), (arg3[1]));
  let mut x3: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x3, arg1, (arg2[2]), (arg3[2]));
  let mut x4: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x4, arg1, (arg2[3]), (arg3[3]));
  let mut x5: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x5, arg1, (arg2[4]), (arg3[4]));
  let mut x6: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x6, arg1, (arg2[5]), (arg3[5]));
  let mut x7: u64 = 0;
  fiat_p434_cmovznz_u64(&mut x7, arg1, (arg2[6]), (arg3[6]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
  out1[4] = x5;
  out1[5] = x6;
  out1[6] = x7;
}

/*
 * The function fiat_p434_to_bytes serializes a field element in the Montgomery domain to bytes in little-endian order.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..55]
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0x3ffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0x3], [0x0 ~> 0x0]]
 */
#[inline]
pub fn fiat_p434_to_bytes(out1: &mut [u8; 56], arg1: &[u64; 7]) -> () {
  let x1: u64 = (arg1[6]);
  let x2: u64 = (arg1[5]);
  let x3: u64 = (arg1[4]);
  let x4: u64 = (arg1[3]);
  let x5: u64 = (arg1[2]);
  let x6: u64 = (arg1[1]);
  let x7: u64 = (arg1[0]);
  let x8: u64 = (x7 >> 8);
  let x9: u8 = ((x7 & (0xff as u64)) as u8);
  let x10: u64 = (x8 >> 8);
  let x11: u8 = ((x8 & (0xff as u64)) as u8);
  let x12: u64 = (x10 >> 8);
  let x13: u8 = ((x10 & (0xff as u64)) as u8);
  let x14: u64 = (x12 >> 8);
  let x15: u8 = ((x12 & (0xff as u64)) as u8);
  let x16: u64 = (x14 >> 8);
  let x17: u8 = ((x14 & (0xff as u64)) as u8);
  let x18: u64 = (x16 >> 8);
  let x19: u8 = ((x16 & (0xff as u64)) as u8);
  let x20: u8 = ((x18 >> 8) as u8);
  let x21: u8 = ((x18 & (0xff as u64)) as u8);
  let x22: u8 = (x20 & 0xff);
  let x23: u64 = (x6 >> 8);
  let x24: u8 = ((x6 & (0xff as u64)) as u8);
  let x25: u64 = (x23 >> 8);
  let x26: u8 = ((x23 & (0xff as u64)) as u8);
  let x27: u64 = (x25 >> 8);
  let x28: u8 = ((x25 & (0xff as u64)) as u8);
  let x29: u64 = (x27 >> 8);
  let x30: u8 = ((x27 & (0xff as u64)) as u8);
  let x31: u64 = (x29 >> 8);
  let x32: u8 = ((x29 & (0xff as u64)) as u8);
  let x33: u64 = (x31 >> 8);
  let x34: u8 = ((x31 & (0xff as u64)) as u8);
  let x35: u8 = ((x33 >> 8) as u8);
  let x36: u8 = ((x33 & (0xff as u64)) as u8);
  let x37: u8 = (x35 & 0xff);
  let x38: u64 = (x5 >> 8);
  let x39: u8 = ((x5 & (0xff as u64)) as u8);
  let x40: u64 = (x38 >> 8);
  let x41: u8 = ((x38 & (0xff as u64)) as u8);
  let x42: u64 = (x40 >> 8);
  let x43: u8 = ((x40 & (0xff as u64)) as u8);
  let x44: u64 = (x42 >> 8);
  let x45: u8 = ((x42 & (0xff as u64)) as u8);
  let x46: u64 = (x44 >> 8);
  let x47: u8 = ((x44 & (0xff as u64)) as u8);
  let x48: u64 = (x46 >> 8);
  let x49: u8 = ((x46 & (0xff as u64)) as u8);
  let x50: u8 = ((x48 >> 8) as u8);
  let x51: u8 = ((x48 & (0xff as u64)) as u8);
  let x52: u8 = (x50 & 0xff);
  let x53: u64 = (x4 >> 8);
  let x54: u8 = ((x4 & (0xff as u64)) as u8);
  let x55: u64 = (x53 >> 8);
  let x56: u8 = ((x53 & (0xff as u64)) as u8);
  let x57: u64 = (x55 >> 8);
  let x58: u8 = ((x55 & (0xff as u64)) as u8);
  let x59: u64 = (x57 >> 8);
  let x60: u8 = ((x57 & (0xff as u64)) as u8);
  let x61: u64 = (x59 >> 8);
  let x62: u8 = ((x59 & (0xff as u64)) as u8);
  let x63: u64 = (x61 >> 8);
  let x64: u8 = ((x61 & (0xff as u64)) as u8);
  let x65: u8 = ((x63 >> 8) as u8);
  let x66: u8 = ((x63 & (0xff as u64)) as u8);
  let x67: u8 = (x65 & 0xff);
  let x68: u64 = (x3 >> 8);
  let x69: u8 = ((x3 & (0xff as u64)) as u8);
  let x70: u64 = (x68 >> 8);
  let x71: u8 = ((x68 & (0xff as u64)) as u8);
  let x72: u64 = (x70 >> 8);
  let x73: u8 = ((x70 & (0xff as u64)) as u8);
  let x74: u64 = (x72 >> 8);
  let x75: u8 = ((x72 & (0xff as u64)) as u8);
  let x76: u64 = (x74 >> 8);
  let x77: u8 = ((x74 & (0xff as u64)) as u8);
  let x78: u64 = (x76 >> 8);
  let x79: u8 = ((x76 & (0xff as u64)) as u8);
  let x80: u8 = ((x78 >> 8) as u8);
  let x81: u8 = ((x78 & (0xff as u64)) as u8);
  let x82: u8 = (x80 & 0xff);
  let x83: u64 = (x2 >> 8);
  let x84: u8 = ((x2 & (0xff as u64)) as u8);
  let x85: u64 = (x83 >> 8);
  let x86: u8 = ((x83 & (0xff as u64)) as u8);
  let x87: u64 = (x85 >> 8);
  let x88: u8 = ((x85 & (0xff as u64)) as u8);
  let x89: u64 = (x87 >> 8);
  let x90: u8 = ((x87 & (0xff as u64)) as u8);
  let x91: u64 = (x89 >> 8);
  let x92: u8 = ((x89 & (0xff as u64)) as u8);
  let x93: u64 = (x91 >> 8);
  let x94: u8 = ((x91 & (0xff as u64)) as u8);
  let x95: u8 = ((x93 >> 8) as u8);
  let x96: u8 = ((x93 & (0xff as u64)) as u8);
  let x97: u8 = (x95 & 0xff);
  let x98: u64 = (x1 >> 8);
  let x99: u8 = ((x1 & (0xff as u64)) as u8);
  let x100: u64 = (x98 >> 8);
  let x101: u8 = ((x98 & (0xff as u64)) as u8);
  let x102: u64 = (x100 >> 8);
  let x103: u8 = ((x100 & (0xff as u64)) as u8);
  let x104: u64 = (x102 >> 8);
  let x105: u8 = ((x102 & (0xff as u64)) as u8);
  let x106: u64 = (x104 >> 8);
  let x107: u8 = ((x104 & (0xff as u64)) as u8);
  let x108: u8 = ((x106 >> 8) as u8);
  let x109: u8 = ((x106 & (0xff as u64)) as u8);
  let x110: u8 = (x108 & 0xff);
  out1[0] = x9;
  out1[1] = x11;
  out1[2] = x13;
  out1[3] = x15;
  out1[4] = x17;
  out1[5] = x19;
  out1[6] = x21;
  out1[7] = x22;
  out1[8] = x24;
  out1[9] = x26;
  out1[10] = x28;
  out1[11] = x30;
  out1[12] = x32;
  out1[13] = x34;
  out1[14] = x36;
  out1[15] = x37;
  out1[16] = x39;
  out1[17] = x41;
  out1[18] = x43;
  out1[19] = x45;
  out1[20] = x47;
  out1[21] = x49;
  out1[22] = x51;
  out1[23] = x52;
  out1[24] = x54;
  out1[25] = x56;
  out1[26] = x58;
  out1[27] = x60;
  out1[28] = x62;
  out1[29] = x64;
  out1[30] = x66;
  out1[31] = x67;
  out1[32] = x69;
  out1[33] = x71;
  out1[34] = x73;
  out1[35] = x75;
  out1[36] = x77;
  out1[37] = x79;
  out1[38] = x81;
  out1[39] = x82;
  out1[40] = x84;
  out1[41] = x86;
  out1[42] = x88;
  out1[43] = x90;
  out1[44] = x92;
  out1[45] = x94;
  out1[46] = x96;
  out1[47] = x97;
  out1[48] = x99;
  out1[49] = x101;
  out1[50] = x103;
  out1[51] = x105;
  out1[52] = x107;
  out1[53] = x109;
  out1[54] = x110;
  out1[55] = (0x0 as u8);
}

/*
 * The function fiat_p434_from_bytes deserializes a field element in the Montgomery domain from bytes in little-endian order.
 * Preconditions:
 *   0 ≤ bytes_eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = bytes_eval arg1 mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0x3], [0x0 ~> 0x0]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0x3ffffffffffff]]
 */
#[inline]
pub fn fiat_p434_from_bytes(out1: &mut [u64; 7], arg1: &[u8; 56]) -> () {
  let x1: u64 = (((arg1[54]) as u64) << 48);
  let x2: u64 = (((arg1[53]) as u64) << 40);
  let x3: u64 = (((arg1[52]) as u64) << 32);
  let x4: u64 = (((arg1[51]) as u64) << 24);
  let x5: u64 = (((arg1[50]) as u64) << 16);
  let x6: u64 = (((arg1[49]) as u64) << 8);
  let x7: u8 = (arg1[48]);
  let x8: u64 = (((arg1[47]) as u64) << 56);
  let x9: u64 = (((arg1[46]) as u64) << 48);
  let x10: u64 = (((arg1[45]) as u64) << 40);
  let x11: u64 = (((arg1[44]) as u64) << 32);
  let x12: u64 = (((arg1[43]) as u64) << 24);
  let x13: u64 = (((arg1[42]) as u64) << 16);
  let x14: u64 = (((arg1[41]) as u64) << 8);
  let x15: u8 = (arg1[40]);
  let x16: u64 = (((arg1[39]) as u64) << 56);
  let x17: u64 = (((arg1[38]) as u64) << 48);
  let x18: u64 = (((arg1[37]) as u64) << 40);
  let x19: u64 = (((arg1[36]) as u64) << 32);
  let x20: u64 = (((arg1[35]) as u64) << 24);
  let x21: u64 = (((arg1[34]) as u64) << 16);
  let x22: u64 = (((arg1[33]) as u64) << 8);
  let x23: u8 = (arg1[32]);
  let x24: u64 = (((arg1[31]) as u64) << 56);
  let x25: u64 = (((arg1[30]) as u64) << 48);
  let x26: u64 = (((arg1[29]) as u64) << 40);
  let x27: u64 = (((arg1[28]) as u64) << 32);
  let x28: u64 = (((arg1[27]) as u64) << 24);
  let x29: u64 = (((arg1[26]) as u64) << 16);
  let x30: u64 = (((arg1[25]) as u64) << 8);
  let x31: u8 = (arg1[24]);
  let x32: u64 = (((arg1[23]) as u64) << 56);
  let x33: u64 = (((arg1[22]) as u64) << 48);
  let x34: u64 = (((arg1[21]) as u64) << 40);
  let x35: u64 = (((arg1[20]) as u64) << 32);
  let x36: u64 = (((arg1[19]) as u64) << 24);
  let x37: u64 = (((arg1[18]) as u64) << 16);
  let x38: u64 = (((arg1[17]) as u64) << 8);
  let x39: u8 = (arg1[16]);
  let x40: u64 = (((arg1[15]) as u64) << 56);
  let x41: u64 = (((arg1[14]) as u64) << 48);
  let x42: u64 = (((arg1[13]) as u64) << 40);
  let x43: u64 = (((arg1[12]) as u64) << 32);
  let x44: u64 = (((arg1[11]) as u64) << 24);
  let x45: u64 = (((arg1[10]) as u64) << 16);
  let x46: u64 = (((arg1[9]) as u64) << 8);
  let x47: u8 = (arg1[8]);
  let x48: u64 = (((arg1[7]) as u64) << 56);
  let x49: u64 = (((arg1[6]) as u64) << 48);
  let x50: u64 = (((arg1[5]) as u64) << 40);
  let x51: u64 = (((arg1[4]) as u64) << 32);
  let x52: u64 = (((arg1[3]) as u64) << 24);
  let x53: u64 = (((arg1[2]) as u64) << 16);
  let x54: u64 = (((arg1[1]) as u64) << 8);
  let x55: u8 = (arg1[0]);
  let x56: u64 = ((x55 as u64) + (x54 + (x53 + (x52 + (x51 + (x50 + (x49 + x48)))))));
  let x57: u64 = (x56 & 0xffffffffffffffff);
  let x58: u64 = ((x7 as u64) + (x6 + (x5 + (x4 + (x3 + (x2 + x1))))));
  let x59: u64 = ((x15 as u64) + (x14 + (x13 + (x12 + (x11 + (x10 + (x9 + x8)))))));
  let x60: u64 = ((x23 as u64) + (x22 + (x21 + (x20 + (x19 + (x18 + (x17 + x16)))))));
  let x61: u64 = ((x31 as u64) + (x30 + (x29 + (x28 + (x27 + (x26 + (x25 + x24)))))));
  let x62: u64 = ((x39 as u64) + (x38 + (x37 + (x36 + (x35 + (x34 + (x33 + x32)))))));
  let x63: u64 = ((x47 as u64) + (x46 + (x45 + (x44 + (x43 + (x42 + (x41 + x40)))))));
  let x64: u64 = (x63 & 0xffffffffffffffff);
  let x65: u64 = (x62 & 0xffffffffffffffff);
  let x66: u64 = (x61 & 0xffffffffffffffff);
  let x67: u64 = (x60 & 0xffffffffffffffff);
  let x68: u64 = (x59 & 0xffffffffffffffff);
  out1[0] = x57;
  out1[1] = x64;
  out1[2] = x65;
  out1[3] = x66;
  out1[4] = x67;
  out1[5] = x68;
  out1[6] = x58;
}

