name: CI (Coq)

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 1 * *'

jobs:
  build:

    strategy:
      matrix:
        env:
        - { COQ_VERSION: "8.14.0", COQ_PACKAGE: "coq-8.14.0 libcoq-8.14.0-ocaml-dev", SKIP_BEDROCK2: "" , SKIP_VALIDATE: "" , PPA: "ppa:jgross-h/many-coq-versions-ocaml-4-11" }
        - { COQ_VERSION: "8.14.0", COQ_PACKAGE: "coq-8.14.0 libcoq-8.14.0-ocaml-dev", SKIP_BEDROCK2: "" , SKIP_VALIDATE: "" , PPA: "ppa:jgross-h/many-coq-versions-ocaml-4-08" }
        - { COQ_VERSION: "8.13.2", COQ_PACKAGE: "coq-8.13.2 libcoq-8.13.2-ocaml-dev", SKIP_BEDROCK2: "" , SKIP_VALIDATE: "" , PPA: "ppa:jgross-h/many-coq-versions-ocaml-4-05" }
        - { COQ_VERSION: "8.12.2", COQ_PACKAGE: "coq-8.12.2 libcoq-8.12.2-ocaml-dev", SKIP_BEDROCK2: "1", SKIP_VALIDATE: "" , PPA: "ppa:jgross-h/many-coq-versions-ocaml-4-05" }
        - { COQ_VERSION: "8.11.2", COQ_PACKAGE: "coq-8.11.2 libcoq-8.11.2-ocaml-dev", SKIP_BEDROCK2: "1", SKIP_VALIDATE: "" , PPA: "ppa:jgross-h/many-coq-versions-ocaml-4-05" }
        - { COQ_VERSION: "master", COQ_PACKAGE: "coq libcoq-ocaml-dev"              , SKIP_BEDROCK2: "" , SKIP_VALIDATE: "" , PPA: "ppa:jgross-h/coq-master-daily", EXTRA_GH_REPORTIFY: "--warnings" }
        - { COQ_VERSION: "v8.14" , COQ_PACKAGE: "coq libcoq-ocaml-dev"              , SKIP_BEDROCK2: "" , SKIP_VALIDATE: "" , PPA: "ppa:jgross-h/coq-8.14-daily" }
        - { COQ_VERSION: "v8.13" , COQ_PACKAGE: "coq libcoq-ocaml-dev"              , SKIP_BEDROCK2: "" , SKIP_VALIDATE: "" , PPA: "ppa:jgross-h/coq-8.13-daily" }
        - { COQ_VERSION: "v8.12" , COQ_PACKAGE: "coq libcoq-ocaml-dev"              , SKIP_BEDROCK2: "1", SKIP_VALIDATE: "" , PPA: "ppa:jgross-h/coq-8.12-daily" }
        - { COQ_VERSION: "v8.11" , COQ_PACKAGE: "coq libcoq-ocaml-dev"              , SKIP_BEDROCK2: "1", SKIP_VALIDATE: "" , PPA: "ppa:jgross-h/coq-8.11-daily" }
        os: ['ubuntu-latest']
        include:
        - env: { COQ_VERSION: "Ubuntu LTS", COQ_PACKAGE: "coq libcoq-ocaml-dev", SKIP_BEDROCK2: "1", SKIP_VALIDATE: "" , PPA: "" }
          os: 'ubuntu-20.04'

    runs-on: ${{ matrix.os }}
    env: ${{ matrix.env }}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: install Coq
      run: |
        if [ ! -z "$PPA" ]; then sudo add-apt-repository "$PPA" -y; fi
        sudo apt-get -o Acquire::Retries=30 update -q
        sudo apt-get -o Acquire::Retries=30 install ocaml-findlib $COQ_PACKAGE -y --allow-unauthenticated
    - uses: haskell/actions/setup@v1
      with:
        ghc-version: '9.0.1'
        cabal-version: 'latest'
    - name: echo build params
      run: |
        echo "::group::lscpu"
        lscpu
        echo "::endgroup::"
        echo "::group::uname -a"
        uname -a
        echo "::endgroup::"
        echo "::group::lsb_release -a"
        lsb_release -a
        echo "::endgroup::"
        echo "::group::ghc --version"
        ghc --version
        echo "::endgroup::"
        echo "::group::gcc -v"
        gcc -v
        echo "::endgroup::"
        echo "::group::ocamlc -config"
        ocamlc -config
        echo "::endgroup::"
        echo "::group::coqc --config"
        coqc --config
        echo "::endgroup::"
        echo "::group::coqc --version"
        coqc --version
        echo "::endgroup::"
        echo "::group::true | coqtop"
        true | coqtop
        echo "::endgroup::"
    - name: deps
      run: etc/ci/github-actions-make.sh -j2 deps
    - name: all
      run: etc/ci/github-actions-make.sh ${EXTRA_GH_REPORTIFY} -j2 all
    - name: only-test-amd64-files
      run: etc/ci/github-actions-make.sh -j2 only-test-amd64-files
    - name: upload OCaml files
      uses: actions/upload-artifact@v2.2.4
      with:
        name: ExtractionOCaml-${{ matrix.env.COQ_VERSION }}
        path: src/ExtractionOCaml
      if: always ()
    - name: standalone-haskell
      run: etc/ci/github-actions-make.sh -j1 standalone-haskell GHCFLAGS='+RTS -M5G -RTS'
    - name: upload Haskell files
      uses: actions/upload-artifact@v2.2.4
      with:
        name: ExtractionHaskell-${{ matrix.env.COQ_VERSION }}
        path: src/ExtractionHaskell
      if: always ()
    - name: display timing info
      run: cat time-of-build-pretty.log
    - name: display per-line timing info
      run: etc/ci/github-actions-display-per-line-timing.sh
#    - name: upload timing and .vo info
#      uses: actions/upload-artifact@v2.2.4
#      with:
#        name: build-outputs-${{ matrix.env.COQ_VERSION }}
#        path: .
#      if: always ()
    - name: validate
      run: make TIMED=1 validate COQCHKFLAGS="-o"
      if: matrix.env.SKIP_VALIDATE == '' && github.event_name != 'pull_request'
