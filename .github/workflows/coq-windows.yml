name: CI (Coq, Windows)

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 1 * *'

jobs:
  build:

    runs-on: windows-latest

    env:
      NJOBS: "2"
      COQ_VERSION: "8.13.1"
      SKIP_BEDROCK2: "1"

    steps:
    - uses: actions/checkout@v2
    - name: submodules-init
      uses: snickerbockers/submodules-init@v4
    - name: Set up Cygwin
      uses: egor-tensin/setup-cygwin@v1
      with:
        packages: rsync patch diffutils make unzip m4 findutils time wget curl git mingw64-x86_64-binutils mingw64-x86_64-gcc-core mingw64-x86_64-gcc-g++ mingw64-x86_64-pkg-config mingw64-x86_64-windows_default_manifest mingw64-x86_64-headers mingw64-x86_64-runtime mingw64-x86_64-pthreads mingw64-x86_64-zlib mingw64-x86_64-gmp python3
    - name: Create home dir
      run: |
        C:\tools\cygwin\bin\bash.exe --login -c 'env'
    - name: Set up OCaml
      uses: avsm/setup-ocaml@v1.1.10
      with:
        ocaml-version: 4.11.1
    - name: Install Coq
      run: |
        opam install opam-depext
        opam-depext coq
        opam pin add coq %COQ_VERSION%
      env:
        OPAMYES: "true"
      shell: cmd

    - name: echo build params
      run: |
        ECHO ::group::wmic cpu get caption, deviceid, name, numberofcores, maxclockspeed, status
        wmic cpu get caption, deviceid, name, numberofcores, maxclockspeed, status
        ECHO ::endgroup::
        ECHO ::group::wmic cpu list /format:list
        wmic cpu list /format:list
        ECHO ::endgroup::
        ECHO ::group::git config -l
        C:\tools\cygwin\bin\bash.exe -l -c 'git config -l'
        ECHO ::endgroup::
        ECHO ::group::git config --global -l
        C:\tools\cygwin\bin\bash.exe -l -c 'git config --global -l'
        ECHO ::endgroup::
        ECHO ::group::opam list
        C:\tools\cygwin\bin\bash.exe -l -c 'eval $(opam env); opam list'
        ECHO ::endgroup::
        ECHO ::group::ocamlc -config
        C:\tools\cygwin\bin\bash.exe -l -c 'eval $(opam env); ocamlc -config'
        ECHO ::endgroup::
        ECHO ::group::coqc --config
        C:\tools\cygwin\bin\bash.exe -l -c 'eval $(opam env); coqc --config'
        ECHO ::endgroup::
        ECHO ::group::coqc --version
        C:\tools\cygwin\bin\bash.exe -l -c 'eval $(opam env); coqc --version'
        ECHO ::endgroup::
        ECHO ::group::coqtop version
        true | C:\tools\cygwin\bin\bash.exe -l -c 'eval $(opam env); coqtop'
        ECHO ::endgroup::
        ECHO ::group::make printenv
        C:\tools\cygwin\bin\bash.exe -l -c 'cd "%cd%"; eval $(opam env); make printenv'
        ECHO ::endgroup::
        ECHO ::group::PATH
        C:\tools\cygwin\bin\bash.exe -l -c 'cd "%cd%"; echo "${PATH}"'
        ECHO ::endgroup::
      shell: cmd
    - name: deps
      run: C:\tools\cygwin\bin\bash.exe -l -c 'cd "%cd%"; eval $(opam env); etc/ci/github-actions-make.sh -j%NJOBS% deps'
      shell: cmd
    - name: all
      run: C:\tools\cygwin\bin\bash.exe -l -c 'cd "%cd%"; eval $(opam env); etc/ci/github-actions-make.sh -j%NJOBS% all'
      shell: cmd
    - name: upload OCaml files
      uses: actions/upload-artifact@v1
      with:
        name: ExtractionOCaml
        path: src/ExtractionOCaml
    - name: display timing info
      run: C:\tools\cygwin\bin\bash.exe -l -c 'cd "%cd%"; cat time-of-build-pretty.log'
      shell: cmd
    - name: display per-line timing info
      run: C:\tools\cygwin\bin\bash.exe -l -c 'cd "%cd%"; etc/ci/github-actions-display-per-line-timing.sh'
      shell: cmd
#    - name: upload timing and .vo info
#      uses: actions/upload-artifact@v1
#      with:
#        name: build-outputs
#        path: .
#      if: always ()
    - name: validate
      run: C:\tools\cygwin\bin\bash.exe -l -c 'cd "%cd%"; eval $(opam env); make TIMED=1 validate COQCHKFLAGS="-o"'
      shell: cmd
      if: github.event_name != 'pull_request'
