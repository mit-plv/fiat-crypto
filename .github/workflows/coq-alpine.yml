name: CI (Coq, Alpine)

on:
  push:
    branches: [ master ]
  pull_request:
  merge_group:
  workflow_dispatch:
  release:
    types: [published]
  schedule:
    - cron: '0 0 1 * *'

jobs:
  build:

    strategy:
      fail-fast: false
      matrix:
        include:
        - alpine: 'edge'
#        - alpine: 'latest-stable'

    runs-on: ubuntu-latest
    name: ${{ matrix.alpine }}

    concurrency:
      group: ${{ github.workflow }}-alpine-${{ matrix.alpine }}-${{ github.head_ref || github.run_id }}
      cancel-in-progress: true

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - uses: jirutka/setup-alpine@v1
      with:
        branch: ${{ matrix.alpine }}
        extra-repositories: https://dl-cdn.alpinelinux.org/alpine/edge/testing
        packages: git make jq gcc musl-dev python3 ocaml ocaml-findlib ghc cabal coq ocaml-zarith bash
    - name: work around coq issue 15663
      shell: alpine.sh --root {0}
      run: |
        ln -s /usr/lib/coq /usr/lib/ocaml/coq
        ln -s /usr/lib/coq-core /usr/lib/ocaml/coq-core
        ln -s /usr/lib/coqide-server /usr/lib/ocaml/coqide-server
    - name: host build params
      run: etc/ci/describe-system-config.sh
    - name: chroot build params
      shell: alpine.sh {0}
      run: etc/ci/describe-system-config.sh
    - name: make deps
      shell: alpine.sh {0}
      run: make TIMED=1 TIMING=1 -j2 deps
    - name: all-except-generated
      shell: alpine.sh {0}
      run: make TIMED=1 TIMING=1 -j2 CAMLEXTRAFLAGS="-ccopt -static" all-except-generated
    - name: generated-files
      shell: alpine.sh {0}
      run: make TIMED=1 TIMING=1 -j2 generated-files
    - run: tar -czvf generated-files.tgz fiat-*/
      if: ${{ failure() }}
    - name: upload generated files
      uses: actions/upload-artifact@v3
      with:
        name: generated-files-${{ matrix.alpine }}
        path: generated-files.tgz
      if: ${{ failure() }}
    - name: package-standalone-ocaml
      shell: alpine.sh {0}
      run: make package-standalone-ocaml
    - name: upload standalone files
      uses: actions/upload-artifact@v3
      with:
        name: standalone-${{ matrix.alpine }}
        path: standalone.tar.gz
    - name: upload OCaml files
      uses: actions/upload-artifact@v3
      with:
        name: ExtractionOCaml-${{ matrix.alpine }}
        path: src/ExtractionOCaml
      if: always ()
    - name: standalone-haskell
      shell: alpine.sh {0}
      run: make TIMED=1 TIMING=1 -j1 standalone-haskell GHCFLAGS='+RTS -M6G -RTS'
    - name: upload Haskell files
      uses: actions/upload-artifact@v3
      with:
        name: ExtractionHaskell-${{ matrix.alpine }}
        path: src/ExtractionHaskell
      if: always ()
    - name: only-test-amd64-files-lite
      shell: alpine.sh {0}
      run: make TIMED=1 TIMING=1 -j2 only-test-amd64-files-lite SLOWEST_FIRST=1
    - name: display timing info
      run: cat time-of-build-pretty.log || true
    - name: display per-line timing info
      run: etc/ci/github-actions-display-per-line-timing.sh

  test-standalone:
    strategy:
      fail-fast: false
      matrix:
        include:
        - alpine: 'edge'
#        - alpine: 'latest-stable'
    runs-on: ubuntu-latest
    name: test-standalone-${{ matrix.alpine }}
    needs: build
    steps:
    - uses: actions/checkout@v4
    - name: Download standalone ${{ matrix.alpine }}
      uses: actions/download-artifact@v3
      with:
        name: standalone-${{ matrix.alpine }}
        path: dist-${{ matrix.alpine }}/
    - name: List files
      run: find dist-edge
    - name: Rename files
      run: |
        mkdir dist
        mv dist-${{ matrix.alpine }}/standalone.tar.gz dist/fiat-crypto-alpine-${{ matrix.alpine }}.tar.gz
        find dist
        tar -tvf dist/fiat-crypto-alpine-${{ matrix.alpine }}.tar.gz
    - name: Unpack files
      run: |
        cd dist
        tar -xzvf fiat-crypto-alpine-${{ matrix.alpine }}.tar.gz
        ls -la .
    - name: Test files (host)
      run: |
        cd dist
        for prog in word_by_word_montgomery unsaturated_solinas saturated_solinas base_conversion; do
          echo "::group::file $prog"
          file $prog
          echo "::endgroup::"
          echo "::group::ldd $prog"
          ldd $prog || true
          echo "::endgroup::"
          echo "::group::$prog"
          ./$prog -h
          echo "::endgroup::"
        done
    - uses: jirutka/setup-alpine@v1
      with:
        branch: ${{ matrix.alpine }}
        extra-repositories: https://dl-cdn.alpinelinux.org/alpine/edge/testing
    - name: Test files (container)
      shell: alpine.sh {0}
      run: |
        cd dist
        for prog in word_by_word_montgomery unsaturated_solinas saturated_solinas base_conversion; do
          echo "::group::$prog"
          ./$prog -h
          echo "::endgroup::"
        done

  publish-standalone:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
    steps:
    - uses: actions/checkout@v4
    - name: Download standalone edge
      uses: actions/download-artifact@v3
      with:
        name: standalone-edge
        path: dist-edge/
    - name: List files
      run: find dist-edge
    - name: Unpack files
      run: |
        mkdir dist
        mv dist-edge/standalone.tar.gz dist/fiat-crypto-alpine-edge.tar.gz
        find dist
        tar -tvf dist/fiat-crypto-alpine-edge.tar.gz
    - name: Upload artifacts to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'
      if: ${{ startsWith(github.ref, 'refs/tags/') && github.event_name == 'release' }}

  alpine-check-all:
    runs-on: ubuntu-latest
    needs: [build, test-standalone, publish-standalone]
    if: always()
    steps:
    - run: echo 'build passed'
      if: ${{ needs.build.result == 'success' }}
    - run: echo 'test-standalone passed'
      if: ${{ needs.test-standalone.result == 'success' }}
    - run: echo 'publish-standalone passed'
      if: ${{ needs.publish-standalone.result == 'success' }}
    - run: echo 'build failed' && false
      if: ${{ needs.build.result != 'success' }}
    - run: echo 'test-standalone failed' && false
      if: ${{ needs.test-standalone.result != 'success' }}
    - run: echo 'publish-standalone failed' && false
      if: ${{ needs.publish-standalone.result != 'success' }}
