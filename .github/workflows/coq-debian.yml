name: CI (Coq, Debian)

on:
  push:
    branches: [ master , sp2019latest ]
  pull_request:
  merge_group:
  workflow_dispatch:
  release:
    types: [published]
  schedule:
    - cron: '0 0 1 * *'

jobs:
  build:

    strategy:
      fail-fast: false
      matrix:
        include:
        - env: { DEBIAN: "sid" }
        #- env: { DEBIAN: "bookworm" }# restore once 8.17 lands in Debian stable

    runs-on: 'ubuntu-22.04'
    env: ${{ matrix.env }}
    name: ${{ matrix.env.DEBIAN }}

    concurrency:
      group: ${{ github.workflow }}-${{ matrix.env.DEBIAN }}-${{ github.head_ref || github.run_id }}
      cancel-in-progress: true

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: setup Debian chroot
      run: etc/ci/setup-debian-chroot.sh "$DEBIAN"
    - name: host build params
      run: etc/ci/describe-system-config.sh
    - name: chroot build params
      shell: in-debian-chroot.sh {0}
      run: CI=1 etc/ci/describe-system-config.sh
    - name: make deps
      shell: in-debian-chroot.sh {0}
      run: etc/ci/github-actions-make.sh -j2 deps
    - name: all-except-generated
      shell: in-debian-chroot.sh {0}
      run: etc/ci/github-actions-make.sh -j2 all-except-generated
    - name: generated-files
      shell: in-debian-chroot.sh {0}
      run: etc/ci/github-actions-make.sh -j2 generated-files
    - run: tar -czvf generated-files.tgz fiat-*/
      if: ${{ failure() }}
    - name: upload generated files
      uses: actions/upload-artifact@v3
      with:
        name: generated-files-${{ matrix.env.DEBIAN }}
        path: generated-files.tgz
      if: ${{ failure() }}
    - name: package-standalone-ocaml
      shell: in-debian-chroot.sh {0}
      run: etc/ci/github-actions-make.sh package-standalone-ocaml
    - name: upload standalone files
      uses: actions/upload-artifact@v3
      with:
        name: standalone-${{ matrix.env.DEBIAN }}
        path: standalone.tar.gz
    - name: upload OCaml files
      uses: actions/upload-artifact@v3
      with:
        name: ExtractionOCaml-${{ matrix.env.DEBIAN }}
        path: src/ExtractionOCaml
      if: always ()
    - name: standalone-haskell
      shell: in-debian-chroot.sh {0}
      run: etc/ci/github-actions-make.sh -j1 standalone-haskell GHCFLAGS='+RTS -M6G -RTS'
    - name: upload Haskell files
      uses: actions/upload-artifact@v3
      with:
        name: ExtractionHaskell-${{ matrix.env.DEBIAN }}
        path: src/ExtractionHaskell
      if: always ()
    - name: only-test-amd64-files-lite
      shell: in-debian-chroot.sh {0}
      run: etc/ci/github-actions-make.sh -j2 only-test-amd64-files-lite SLOWEST_FIRST=1
    - name: display timing info
      run: cat time-of-build-pretty.log
    - name: display per-line timing info
      run: etc/ci/github-actions-display-per-line-timing.sh

  test-standalone:
    strategy:
      fail-fast: false
      matrix:
        include:
        - debian: sid
        #- debian: bookworm # restore once 8.17 lands in Debian stable
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - name: Download standalone ${{ matrix.debian }}
      uses: actions/download-artifact@v3
      with:
        name: standalone-${{ matrix.debian }}
        path: dist-${{ matrix.debian }}/
    - name: List files
      run: find dist-${{ matrix.debian }}
    - name: Rename files
      run: |
        mkdir dist
        mv dist-${{ matrix.debian }}/standalone.tar.gz dist/fiat-crypto-${{ matrix.debian }}.tar.gz
        find dist
        tar -tvf dist/fiat-crypto-${{ matrix.debian }}.tar.gz
    - name: Unpack Files
      run: |
        cd dist
        tar -xzvf fiat-crypto-${{ matrix.debian }}.tar.gz
        ls -la .
    - name: Test files (host)
      run: |
        cd dist
        for prog in word_by_word_montgomery unsaturated_solinas saturated_solinas base_conversion; do
          echo "::group::file $prog"
          file $prog
          echo "::endgroup::"
          echo "::group::ldd $prog"
          ldd $prog
          echo "::endgroup::"
          echo "::group::$prog"
          ./$prog -h
          echo "::endgroup::"
        done
    - name: setup Debian chroot
      run: etc/ci/setup-debian-chroot.sh "${{ matrix.debian }}"
    - name: Test files (container)
      shell: in-debian-chroot.sh {0}
      run: |
        cd dist
        for prog in word_by_word_montgomery unsaturated_solinas saturated_solinas base_conversion; do
          echo "::group::file $prog"
          file $prog
          echo "::endgroup::"
          echo "::group::ldd $prog"
          ldd $prog
          echo "::endgroup::"
          echo "::group::$prog"
          ./$prog -h
          echo "::endgroup::"
        done

  publish-standalone:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
    steps:
    - uses: actions/checkout@v4
    - name: Download standalone sid
      uses: actions/download-artifact@v3
      with:
        name: standalone-sid
        path: dist-sid/
    - name: List files
      run: find dist-sid
    - name: Unpack files
      run: |
        mkdir dist
        mv dist-sid/standalone.tar.gz dist/fiat-crypto-sid.tar.gz
        find dist
        tar -tvf dist/fiat-crypto-sid.tar.gz
    - name: Upload artifacts to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'
      if: ${{ startsWith(github.ref, 'refs/tags/') && github.event_name == 'release' }}

  debian-check-all:
    runs-on: ubuntu-latest
    needs: [build, test-standalone, publish-standalone]
    if: always()
    steps:
    - run: echo 'build passed'
      if: ${{ needs.build.result == 'success' }}
    - run: echo 'test-standalone passed'
      if: ${{ needs.test-standalone.result == 'success' }}
    - run: echo 'publish-standalone passed'
      if: ${{ needs.publish-standalone.result == 'success' }}
    - run: echo 'build failed' && false
      if: ${{ needs.build.result != 'success' }}
    - run: echo 'test-standalone failed' && false
      if: ${{ needs.test-standalone.result != 'success' }}
    - run: echo 'publish-standalone failed' && false
      if: ${{ needs.publish-standalone.result != 'success' }}
