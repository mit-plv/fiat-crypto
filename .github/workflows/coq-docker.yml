name: CI (Coq, docker, dev)

on:
  push:
    branches: [ master , sp2019latest , v8.6 , v8.8 , v8.10 ]
  pull_request:
  merge_group:
  workflow_dispatch:
  release:
    types: [published]
  schedule:
    - cron: '0 0 1 * *'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
        - env: { COQ_VERSION: "master", DOCKER_COQ_VERSION: "dev", DOCKER_OCAML_VERSION: "default", SKIP_VALIDATE: "" , COQCHKEXTRAFLAGS: "-bytecode-compiler yes", EXTRA_GH_REPORTIFY: "--warnings", ALLOW_DIFF: "1", CI: "1" }
          os: 'ubuntu-latest'

    runs-on: ${{ matrix.os }}
    env: ${{ matrix.env }}
    name: docker-${{ matrix.env.COQ_VERSION }}

    concurrency:
      group: ${{ github.workflow }}-${{ matrix.env.COQ_VERSION }}-${{ github.head_ref || github.run_id }}
      cancel-in-progress: true

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: echo host build params
      run: etc/ci/describe-system-config.sh
    - name: echo container build params
      uses: coq-community/docker-coq-action@v1
      with:
        coq_version: ${{ matrix.env.DOCKER_COQ_VERSION }}
        ocaml_version: ${{ matrix.env.DOCKER_OCAML_VERSION }}
        export: CI ALLOW_DIFF COQCHKEXTRAFLAGS
        custom_script: |
          eval $(opam env)
          etc/ci/describe-system-config.sh
    - name: deps
      uses: coq-community/docker-coq-action@v1
      with:
        coq_version: ${{ matrix.env.DOCKER_COQ_VERSION }}
        ocaml_version: ${{ matrix.env.DOCKER_OCAML_VERSION }}
        export: CI ALLOW_DIFF COQCHKEXTRAFLAGS
        custom_script: etc/ci/github-actions-docker-make.sh -j2 deps
    - name: all-except-generated
      uses: coq-community/docker-coq-action@v1
      with:
        coq_version: ${{ matrix.env.DOCKER_COQ_VERSION }}
        ocaml_version: ${{ matrix.env.DOCKER_OCAML_VERSION }}
        export: CI ALLOW_DIFF COQCHKEXTRAFLAGS
        custom_script: etc/ci/github-actions-docker-make.sh ${EXTRA_GH_REPORTIFY} -j2 all-except-generated-and-js-of-ocaml
    - name: standalone-js-of-ocaml
      uses: coq-community/docker-coq-action@v1
      with:
        coq_version: ${{ matrix.env.DOCKER_COQ_VERSION }}
        ocaml_version: ${{ matrix.env.DOCKER_OCAML_VERSION }}
        export: CI ALLOW_DIFF COQCHKEXTRAFLAGS
        custom_script: |
          eval $(opam env)
          opam install -y js_of_ocaml
          etc/ci/github-actions-docker-make.sh ${EXTRA_GH_REPORTIFY} -j2 standalone-js-of-ocaml
    - name: install-standalone-js-of-ocaml
      run: make -f Makefile.standalone install-standalone-js-of-ocaml
    - name: backup .gitignore
      run: mv .gitignore{,.bak}
    - name: Deploy js_of_ocaml ðŸš€ ${{ ( github.ref != 'refs/heads/master' && '(dry run)' ) || '' }}
      uses: JamesIves/github-pages-deploy-action@v4.4.3
      with:
        branch: gh-pages # The branch the action should deploy to.
        folder: fiat-html # The folder the action should deploy.
        git-config-email: JasonGross@users.noreply.github.com
        target-folder: .
        single-commit: true # otherwise the repo will get too big
        dry-run: ${{ github.ref != 'refs/heads/master' }}
    - name: restore .gitignore
      run: mv .gitignore{.bak,}
    - name: upload standalone js files
      uses: actions/upload-artifact@v3
      with:
        name: standalone-html-docker-coq-${{ matrix.env.DOCKER_COQ_VERSION }}
        path: fiat-html
    - name: upload js_of_ocaml files
      uses: actions/upload-artifact@v3
      with:
        name: ExtractionJsOfOCaml-${{ matrix.env.COQ_VERSION }}
        path: src/ExtractionJsOfOCaml
      if: always ()
    - name: generated-files
      run: etc/ci/github-actions-make.sh ${EXTRA_GH_REPORTIFY} -f Makefile.examples -j2 generated-files
      if: github.event_name == 'pull_request' || ${{ matrix.env.COQ_VERSION }} != 'master'
    - run: tar -czvf generated-files.tgz fiat-*/
      if: ${{ failure() }}
    - name: upload generated files
      uses: actions/upload-artifact@v3
      with:
        name: generated-files-${{ matrix.env.COQ_VERSION }}
        path: generated-files.tgz
      if: ${{ failure() }}
    - name: install-standalone-unified-ocaml
      run: make -f Makefile.standalone install-standalone-unified-ocaml BINDIR=dist
    - name: upload standalone files
      uses: actions/upload-artifact@v3
      with:
        name: standalone-docker-coq-${{ matrix.env.DOCKER_COQ_VERSION }}
        path: dist/fiat_crypto
    - name: upload OCaml files
      uses: actions/upload-artifact@v3
      with:
        name: ExtractionOCaml-${{ matrix.env.COQ_VERSION }}
        path: src/ExtractionOCaml
      if: always ()
    - name: standalone-haskell
      run: etc/ci/github-actions-make.sh -f Makefile.standalone -j1 standalone-haskell GHCFLAGS='+RTS -M7G -RTS'
    - name: upload Haskell files
      uses: actions/upload-artifact@v3
      with:
        name: ExtractionHaskell-${{ matrix.env.COQ_VERSION }}
        path: src/ExtractionHaskell
      if: always ()
    - name: display timing info
      run: cat time-of-build-pretty.log
    - name: display per-line timing info
      run: etc/ci/github-actions-display-per-line-timing.sh
#    - name: upload timing and .vo info
#      uses: actions/upload-artifact@v3
#      with:
#        name: build-outputs-${{ matrix.env.COQ_VERSION }}
#        path: .
#      if: always ()
    - name: validate
      uses: coq-community/docker-coq-action@v1
      with:
        coq_version: ${{ matrix.env.DOCKER_COQ_VERSION }}
        ocaml_version: ${{ matrix.env.DOCKER_OCAML_VERSION }}
        export: CI ALLOW_DIFF COQCHKEXTRAFLAGS
        custom_script: etc/ci/github-actions-docker-make.sh TIMED=1 validate COQCHKFLAGS="-o ${COQCHKEXTRAFLAGS}"
      if: env.SKIP_VALIDATE == '' && github.event_name != 'pull_request'

  test-amd64:

    runs-on: ubuntu-latest

    concurrency:
      group: ${{ github.workflow }}-test-amd64-${{ github.head_ref || github.run_id }}
      cancel-in-progress: true
    needs: build

    steps:
    - name: checkout repo
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Download a Build Artifact
      uses: actions/download-artifact@v3
      with:
        name: ExtractionOCaml-master
        path: src/ExtractionOCaml
    - name: make binaries executable
      run: git check-ignore src/ExtractionOCaml/* | grep -v '\.' | xargs chmod +x
    - name: only-test-amd64-files
      run: etc/ci/github-actions-make.sh -f Makefile.examples -j2 only-test-amd64-files SLOWEST_FIRST=1
      env:
        ALLOW_DIFF: 1

  test-standalone:
    strategy:
      fail-fast: false
      matrix:
        include:
        - coq-version: master
          docker-coq-version: dev
          docker-ocaml-version: default

    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - name: Download standalone Docker
      uses: actions/download-artifact@v3
      with:
        name: standalone-docker-coq-${{ matrix.docker-coq-version }}
        path: dist/
    - name: List files
      run: find dist
    - run: chmod +x dist/fiat_crypto
    - name: Test files (host)
      run: |
        echo "::group::file fiat_crypto"
        file dist/fiat_crypto
        echo "::endgroup::"
        echo "::group::ldd fiat_crypto"
        ldd dist/fiat_crypto
        echo "::endgroup::"
        etc/ci/test-run-fiat-crypto.sh dist/fiat_crypto
    - name: Test files (container)
      uses: coq-community/docker-coq-action@v1
      with:
        coq_version: ${{ matrix.docker-coq-version }}
        ocaml_version: ${{ matrix.docker-ocaml-version }}
        custom_script: |
          echo "::group::install dependencies"
          sudo apt-get update -y
          sudo apt-get install -y file
          echo "::endgroup::"
          echo "::group::file fiat_crypto"
          file dist/fiat_crypto
          echo "::endgroup::"
          echo "::group::ldd fiat_crypto"
          ldd dist/fiat_crypto
          echo "::endgroup::"
          etc/ci/test-run-fiat-crypto.sh dist/fiat_crypto

  publish-standalone-dry-run:
    runs-on: ubuntu-latest
    needs: build
#    permissions:
#      contents: write  # IMPORTANT: mandatory for making GitHub Releases
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch all history for all tags and branches
        tags: true     # Fetch all tags as well, `fetch-depth: 0` might be sufficient depending on Git version
    - name: Download standalone Docker
      uses: actions/download-artifact@v3
      with:
        name: standalone-docker-coq-dev
        path: dist/
    - name: List files
      run: find dist
    - name: Rename files
      run: |
        echo "::group::find arch"
        arch="$(etc/ci/find-arch.sh dist/fiat_crypto "unknown")"
        tag="$(git describe --tags HEAD)"
        fname="Fiat-Cryptography_${tag}_Linux_docker_dev_${arch}"
        echo "$fname"
        mv dist/fiat_crypto "dist/$fname"
        find dist
#    - name: Upload artifacts to GitHub Release
#      env:
#        GITHUB_TOKEN: ${{ github.token }}
#      # Upload to GitHub Release using the `gh` CLI.
#      # `dist/` contains the built packages
#      run: >-
#        gh release upload
#        '${{ github.ref_name }}' dist/**
#        --repo '${{ github.repository }}'
#      if: ${{ startsWith(github.ref, 'refs/tags/') && github.event_name == 'release' }}

  docker-check-all:
    runs-on: ubuntu-latest
    needs: [build, test-amd64, test-standalone, publish-standalone-dry-run]
    if: always()
    steps:
    - run: echo 'build passed'
      if: ${{ needs.build.result == 'success' }}
    - run: echo 'test-amd64 passed'
      if: ${{ needs.test-amd64.result == 'success' }}
    - run: echo 'test-standalone passed'
      if: ${{ needs.test-standalone.result == 'success' }}
    - run: echo 'publish-standalone-dry-run passed'
      if: ${{ needs.publish-standalone-dry-run.result == 'success' }}
    - run: echo 'build failed' && false
      if: ${{ needs.build.result != 'success' }}
    - run: echo 'test-amd64 failed' && false
      if: ${{ needs.test-amd64.result != 'success' }}
    - run: echo 'test-standalone failed' && false
      if: ${{ needs.test-standalone.result != 'success' }}
    - run: echo 'publish-standalone-dry-run failed' && false
      if: ${{ needs.publish-standalone-dry-run.result != 'success' }}
