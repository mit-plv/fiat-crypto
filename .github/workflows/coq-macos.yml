name: CI (Coq, MacOS)

on:
  push:
    branches: [ master , sp2019latest , v8.6 , v8.8 , v8.10 ]
  pull_request:
  merge_group:
  workflow_dispatch:
  release:
    types: [published]
  schedule:
    - cron: '0 0 1 * *'

jobs:
  build:

    runs-on: macOS-11

    concurrency:
      group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
      cancel-in-progress: true

    env:
      NJOBS: "2"
      COQ_VERSION: "8.18.0" # pick a version not tested on other platforms
      COQCHKEXTRAFLAGS: ""
      SKIP_BEDROCK2: "0"

    name: macos

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Set up OCaml
      uses: ocaml/setup-ocaml@v2
      with:
        ocaml-compiler: 4.11.1

    - name: Install system dependencies
      run: |
        set -e
        brew install gnu-time coreutils

    - name: Install Coq
      run: |
        set -e
        eval $(opam env)
        opam update
        opam pin add coq ${COQ_VERSION}
      env:
        OPAMYES: "true"
        OPAMCONFIRMLEVEL: "unsafe-yes"

    - name: Install js_of_ocaml
      run: |
        set -e
        eval $(opam env)
        opam install js_of_ocaml
      env:
        OPAMYES: "true"
        OPAMCONFIRMLEVEL: "unsafe-yes"

    - name: echo build params
      run: |
        eval $(opam env)
        etc/ci/describe-system-config-macos.sh
    - name: deps
      run: |
        eval $(opam env)
        etc/ci/github-actions-make.sh -j2 deps
    - name: all
      run: |
        eval $(opam env)
        etc/ci/github-actions-make.sh -j2 all

    - name: install-standalone-unified-ocaml
      run: |
        eval $(opam env)
        etc/ci/github-actions-make.sh install-standalone-unified-ocaml BINDIR=dist

    - name: install-standalone-js-of-ocaml
      run: |
        eval $(opam env)
        etc/ci/github-actions-make.sh install-standalone-js-of-ocaml

    - name: only-test-amd64-files-lite
      run: |
        eval $(opam env)
        etc/ci/github-actions-make.sh -j2 only-test-amd64-files-lite SLOWEST_FIRST=1

    - name: upload OCaml files
      uses: actions/upload-artifact@v3
      with:
        name: ExtractionOCaml
        path: src/ExtractionOCaml
    - name: upload js_of_ocaml files
      uses: actions/upload-artifact@v3
      with:
        name: ExtractionJsOfOCaml
        path: src/ExtractionJsOfOCaml
    - name: upload standalone files
      uses: actions/upload-artifact@v3
      with:
        name: standalone-macos
        path: dist/fiat_crypto
    - name: upload standalone js files
      uses: actions/upload-artifact@v3
      with:
        name: standalone-html-macos
        path: fiat-html
    - name: install
      run: |
        eval $(opam env)
        etc/ci/github-actions-make.sh EXTERNAL_DEPENDENCIES=1 SKIP_COQSCRIPTS_INCLUDE=1 install install-standalone-ocaml
    - name: install-without-bedrock2
      run: |
        eval $(opam env)
        etc/ci/github-actions-make.sh EXTERNAL_DEPENDENCIES=1 SKIP_BEDROCK2=1 install-without-bedrock2 install-standalone-ocaml
    - name: install-dev
      run: |
        eval $(opam env)
        etc/ci/github-actions-make.sh EXTERNAL_REWRITER=1 EXTERNAL_COQPRIME=1 install install-standalone-ocaml
    - name: display timing info
      run: cat time-of-build-pretty.log
    - name: display per-line timing info
      run: etc/ci/github-actions-display-per-line-timing.sh
#    - name: upload timing and .vo info
#      uses: actions/upload-artifact@v3
#      with:
#        name: build-outputs
#        path: .
#      if: always ()
#    - name: validate
#      run: |
#        eval $(opam env)
#        make TIMED=1 validate COQCHKFLAGS="-o ${COQCHKEXTRAFLAGS}"
#      if: github.event_name != 'pull_request'

  test-standalone:
    runs-on: macos-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - name: Download standalone MacOS
      uses: actions/download-artifact@v3
      with:
        name: standalone-macos
        path: dist/
    - name: List files
      run: find dist
    - run: chmod +x dist/fiat_crypto
    - name: Test files
      run: |
        echo "::group::file fiat_crypto"
        file dist/fiat_crypto
        echo "::endgroup::"
        echo "::group::otool -L fiat_crypto"
        otool -L dist/fiat_crypto
        echo "::endgroup::"
        echo "::group::lipo -info fiat_crypto"
        lipo -info dist/fiat_crypto
        echo "::endgroup::"
        etc/ci/test-run-fiat-crypto.sh dist/fiat_crypto

  publish-standalone:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch all history for all tags and branches
        tags: true     # Fetch all tags as well, `fetch-depth: 0` might be sufficient depending on Git version
    - name: Download standalone MacOS
      uses: actions/download-artifact@v3
      with:
        name: standalone-macos
        path: dist/
    - name: List files
      run: find dist
    - name: Rename files
      run: |
        arch="$(etc/ci/find-arch.sh dist/fiat_crypto)"
        tag="$(git describe --tags HEAD)"
        fname="Fiat-Cryptography_${tag}_macOS_${arch}"
        echo "$fname"
        mv dist/fiat_crypto "dist/$fname"
        find dist
    - name: Upload artifacts to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'
      if: ${{ startsWith(github.ref, 'refs/tags/') && github.event_name == 'release' }}

  macos-check-all:
    runs-on: ubuntu-latest
    needs: [build, test-standalone, publish-standalone]
    if: always()
    steps:
    - run: echo 'build passed'
      if: ${{ needs.build.result == 'success' }}
    - run: echo 'test-standalone passed'
      if: ${{ needs.test-standalone.result == 'success' }}
    - run: echo 'publish-standalone passed'
      if: ${{ needs.publish-standalone.result == 'success' }}
    - run: echo 'build failed' && false
      if: ${{ needs.build.result != 'success' }}
    - run: echo 'test-standalone failed' && false
      if: ${{ needs.test-standalone.result != 'success' }}
    - run: echo 'publish-standalone failed' && false
      if: ${{ needs.publish-standalone.result != 'success' }}
