name: Test opam package

on:
  push:
    branches:
    - master
  pull_request:
  schedule:
    - cron: '0 0 1 * *'

jobs:
  install:

    strategy:
      fail-fast: false
      matrix:
        coq-version: ['dev', '8.13.1', '8.12.2', '8.11.1', '8.10.2', '8.9.1']
        ocaml-version: ['4.11.1', '4.08.1']
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        exclude:
        - coq-version: 'dev'
          ocaml-version: '4.08.1'
        - coq-version: '8.13.1'
          ocaml-version: '4.08.1'
        - coq-version: '8.12.2'
          ocaml-version: '4.08.1'
        - coq-version: '8.11.1'
          ocaml-version: '4.08.1'
        - coq-version: '8.10.2'
          ocaml-version: '4.11.1'
        - coq-version: '8.9.1'
          ocaml-version: '4.11.1'


    runs-on: ${{ matrix.os }}

    env:
      OPAMYES: "true"

    steps:
    - name: Set up OCaml
      uses: avsm/setup-ocaml@v1.1.10
      with:
        ocaml-version: ${{ matrix.ocaml-version }}

    - name: echo Linux build params
      run: |
        echo "::group::lscpu"
        lscpu
        echo "::endgroup::"
        echo "::group::uname -a"
        uname -a
        echo "::endgroup::"
        echo "::group::lsb_release -a"
        lsb_release -a
        echo "::endgroup::"
        echo "::group::gcc -v"
        gcc -v
        echo "::endgroup::"
      if: ${{ runner.os == 'Linux' }}

    - name: echo macOS build params
      run: |
        echo "::group::sysctl -n machdep.cpu.brand_string"
        sysctl -n machdep.cpu.brand_string
        echo "::endgroup::"
        echo "::group::sysctl -a | grep machdep.cpu"
        sysctl -a | grep machdep.cpu
        echo "::endgroup::"
        echo "::group::uname -a"
        uname -a
        echo "::endgroup::"
        echo "::group::sw_vers -productVersion"
        sw_vers -productVersion
        echo "::endgroup::"
        echo "::group::system_profiler SPSoftwareDataType"
        system_profiler SPSoftwareDataType
        echo "::endgroup::"
      if: ${{ runner.os == 'macOS' }}

    - name: echo Windows build params
      run: |
        ECHO ::group::wmic cpu get caption, deviceid, name, numberofcores, maxclockspeed, status
        wmic cpu get caption, deviceid, name, numberofcores, maxclockspeed, status
        ECHO ::endgroup::
        ECHO ::group::wmic cpu list /format:list
        wmic cpu list /format:list
        ECHO ::endgroup::
      shell: cmd
      if: ${{ runner.os == 'Windows' }}

    - name: echo opam build params
      run: |
        echo ::group::ocamlc -config
        opam exec -- ocamlc -config
        echo ::endgroup::
        echo ::group::opam list
        opam list
        echo ::endgroup::
        
    - name: Install Coq
      run: |
        opam repo add coq-core-dev https://coq.inria.fr/opam/core-dev
        opam repo add coq-released https://coq.inria.fr/opam/released
        opam repo add coq-extra-dev https://coq.inria.fr/opam/extra-dev
        opam update
        opam install opam-depext
        opam exec -- opam-depext coq.${{ matrix.coq-version }}
        opam pin --kind=version add coq ${{ matrix.coq-version }}

    - name: echo more build params
      run: |
        echo "::group::opam list"
        opam list
        echo "::endgroup::"
        echo "::group::coqc --config"
        opam exec -- coqc --config
        echo "::endgroup::"
        echo "::group::coqc --version"
        opam exec -- coqc --version
        echo "::endgroup::"
        echo "::group::true | coqtop"
        true | opam exec -- coqtop
        echo "::endgroup::"
      shell: bash

    - name: Install Fiat-Crypto
      run: |
        opam exec -- opam-depext coq-fiat-crypto
        opam install coq-fiat-crypto
        opam list

    - name: Test Fiat-Crypto binaries
      run: |
        opam exec -- word_by_word_montgomery -h
        opam exec -- unsaturated_solinas -h
        opam exec -- saturated_solinas -h
        opam exec -- base_conversion -h
