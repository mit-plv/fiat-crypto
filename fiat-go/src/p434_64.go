/* Autogenerated: 'src/ExtractionOCaml/word_by_word_montgomery' --lang Go --no-wide-int --cmovznz-by-mul --internal-static --package-case flatcase --public-function-case UpperCamelCase --private-function-case camelCase --public-type-case UpperCamelCase --private-type-case camelCase --no-prefix-fiat --package-name fiatp434 '' 64 '2^216 * 3^137 - 1' mul square add sub opp from_montgomery to_montgomery nonzero selectznz to_bytes from_bytes one msat divstep divstep_precomp */
/* curve description (via package name): fiatp434 */
/* machine_wordsize = 64 (from "64") */
/* requested operations: mul, square, add, sub, opp, from_montgomery, to_montgomery, nonzero, selectznz, to_bytes, from_bytes, one, msat, divstep, divstep_precomp */
/* m = 0x2341f271773446cfc5fd681c520567bc65c783158aea3fdc1767ae2ffffffffffffffffffffffffffffffffffffffffffffffffffffff (from "2^216 * 3^137 - 1") */
/*                                                                    */
/* NOTE: In addition to the bounds specified above each function, all */
/*   functions synthesized for this Montgomery arithmetic require the */
/*   input to be strictly less than the prime modulus (m), and also   */
/*   require the input to be in the unique saturated representation.  */
/*   All functions also ensure that these two properties are true of  */
/*   return values.                                                   */
/*  */
/* Computed values: */
/* eval z = z[0] + (z[1] << 64) + (z[2] << 128) + (z[3] << 192) + (z[4] << 256) + (z[5] << 0x140) + (z[6] << 0x180) */
/* bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17] << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168) + (z[22] << 176) + (z[23] << 184) + (z[24] << 192) + (z[25] << 200) + (z[26] << 208) + (z[27] << 216) + (z[28] << 224) + (z[29] << 232) + (z[30] << 240) + (z[31] << 248) + (z[32] << 256) + (z[33] << 0x108) + (z[34] << 0x110) + (z[35] << 0x118) + (z[36] << 0x120) + (z[37] << 0x128) + (z[38] << 0x130) + (z[39] << 0x138) + (z[40] << 0x140) + (z[41] << 0x148) + (z[42] << 0x150) + (z[43] << 0x158) + (z[44] << 0x160) + (z[45] << 0x168) + (z[46] << 0x170) + (z[47] << 0x178) + (z[48] << 0x180) + (z[49] << 0x188) + (z[50] << 0x190) + (z[51] << 0x198) + (z[52] << 0x1a0) + (z[53] << 0x1a8) + (z[54] << 0x1b0) */

package fiatp434

import "math/bits"
type uint1 uint8
type int1 int8

/* The function addcarryxU64 is a thin wrapper around bits.Add64 that uses uint1 rather than uint64 */
func addcarryxU64(x uint64, y uint64, carry uint1) (uint64, uint1) {
  var sum uint64
  var carryOut uint64
  sum, carryOut = bits.Add64(x, y, uint64(carry))
  return sum, uint1(carryOut)
}

/* The function subborrowxU64 is a thin wrapper around bits.Sub64 that uses uint1 rather than uint64 */
func subborrowxU64(x uint64, y uint64, carry uint1) (uint64, uint1) {
  var sum uint64
  var carryOut uint64
  sum, carryOut = bits.Sub64(x, y, uint64(carry))
  return sum, uint1(carryOut)
}


/*
 * The function cmovznzU64 is a single-word conditional move.
 * Postconditions:
 *   out1 = (if arg1 = 0 then arg2 else arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 *   arg3: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 */
/*inline*/
func cmovznzU64(out1 *uint64, arg1 uint1, arg2 uint64, arg3 uint64) {
  var x1 uint64 = (uint64(arg1) * 0xffffffffffffffff)
  var x2 uint64 = ((x1 & arg3) | ((^x1) & arg2))
  *out1 = x2
}

/*
 * The function Mul multiplies two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func Mul(out1 *[7]uint64, arg1 *[7]uint64, arg2 *[7]uint64) {
  var x1 uint64 = (arg1[1])
  var x2 uint64 = (arg1[2])
  var x3 uint64 = (arg1[3])
  var x4 uint64 = (arg1[4])
  var x5 uint64 = (arg1[5])
  var x6 uint64 = (arg1[6])
  var x7 uint64 = (arg1[0])
  var x8 uint64
  var x9 uint64
  x9, x8 = bits.Mul64(x7, (arg2[6]))
  var x10 uint64
  var x11 uint64
  x11, x10 = bits.Mul64(x7, (arg2[5]))
  var x12 uint64
  var x13 uint64
  x13, x12 = bits.Mul64(x7, (arg2[4]))
  var x14 uint64
  var x15 uint64
  x15, x14 = bits.Mul64(x7, (arg2[3]))
  var x16 uint64
  var x17 uint64
  x17, x16 = bits.Mul64(x7, (arg2[2]))
  var x18 uint64
  var x19 uint64
  x19, x18 = bits.Mul64(x7, (arg2[1]))
  var x20 uint64
  var x21 uint64
  x21, x20 = bits.Mul64(x7, (arg2[0]))
  var x22 uint64
  var x23 uint1
  x22, x23 = addcarryxU64(x21, x18, 0x0)
  var x24 uint64
  var x25 uint1
  x24, x25 = addcarryxU64(x19, x16, x23)
  var x26 uint64
  var x27 uint1
  x26, x27 = addcarryxU64(x17, x14, x25)
  var x28 uint64
  var x29 uint1
  x28, x29 = addcarryxU64(x15, x12, x27)
  var x30 uint64
  var x31 uint1
  x30, x31 = addcarryxU64(x13, x10, x29)
  var x32 uint64
  var x33 uint1
  x32, x33 = addcarryxU64(x11, x8, x31)
  var x34 uint64 = (uint64(x33) + x9)
  var x35 uint64
  var x36 uint64
  x36, x35 = bits.Mul64(x20, 0x2341f27177344)
  var x37 uint64
  var x38 uint64
  x38, x37 = bits.Mul64(x20, 0x6cfc5fd681c52056)
  var x39 uint64
  var x40 uint64
  x40, x39 = bits.Mul64(x20, 0x7bc65c783158aea3)
  var x41 uint64
  var x42 uint64
  x42, x41 = bits.Mul64(x20, 0xfdc1767ae2ffffff)
  var x43 uint64
  var x44 uint64
  x44, x43 = bits.Mul64(x20, 0xffffffffffffffff)
  var x45 uint64
  var x46 uint64
  x46, x45 = bits.Mul64(x20, 0xffffffffffffffff)
  var x47 uint64
  var x48 uint64
  x48, x47 = bits.Mul64(x20, 0xffffffffffffffff)
  var x49 uint64
  var x50 uint1
  x49, x50 = addcarryxU64(x48, x45, 0x0)
  var x51 uint64
  var x52 uint1
  x51, x52 = addcarryxU64(x46, x43, x50)
  var x53 uint64
  var x54 uint1
  x53, x54 = addcarryxU64(x44, x41, x52)
  var x55 uint64
  var x56 uint1
  x55, x56 = addcarryxU64(x42, x39, x54)
  var x57 uint64
  var x58 uint1
  x57, x58 = addcarryxU64(x40, x37, x56)
  var x59 uint64
  var x60 uint1
  x59, x60 = addcarryxU64(x38, x35, x58)
  var x61 uint64 = (uint64(x60) + x36)
  var x63 uint1
  _, x63 = addcarryxU64(x20, x47, 0x0)
  var x64 uint64
  var x65 uint1
  x64, x65 = addcarryxU64(x22, x49, x63)
  var x66 uint64
  var x67 uint1
  x66, x67 = addcarryxU64(x24, x51, x65)
  var x68 uint64
  var x69 uint1
  x68, x69 = addcarryxU64(x26, x53, x67)
  var x70 uint64
  var x71 uint1
  x70, x71 = addcarryxU64(x28, x55, x69)
  var x72 uint64
  var x73 uint1
  x72, x73 = addcarryxU64(x30, x57, x71)
  var x74 uint64
  var x75 uint1
  x74, x75 = addcarryxU64(x32, x59, x73)
  var x76 uint64
  var x77 uint1
  x76, x77 = addcarryxU64(x34, x61, x75)
  var x78 uint64
  var x79 uint64
  x79, x78 = bits.Mul64(x1, (arg2[6]))
  var x80 uint64
  var x81 uint64
  x81, x80 = bits.Mul64(x1, (arg2[5]))
  var x82 uint64
  var x83 uint64
  x83, x82 = bits.Mul64(x1, (arg2[4]))
  var x84 uint64
  var x85 uint64
  x85, x84 = bits.Mul64(x1, (arg2[3]))
  var x86 uint64
  var x87 uint64
  x87, x86 = bits.Mul64(x1, (arg2[2]))
  var x88 uint64
  var x89 uint64
  x89, x88 = bits.Mul64(x1, (arg2[1]))
  var x90 uint64
  var x91 uint64
  x91, x90 = bits.Mul64(x1, (arg2[0]))
  var x92 uint64
  var x93 uint1
  x92, x93 = addcarryxU64(x91, x88, 0x0)
  var x94 uint64
  var x95 uint1
  x94, x95 = addcarryxU64(x89, x86, x93)
  var x96 uint64
  var x97 uint1
  x96, x97 = addcarryxU64(x87, x84, x95)
  var x98 uint64
  var x99 uint1
  x98, x99 = addcarryxU64(x85, x82, x97)
  var x100 uint64
  var x101 uint1
  x100, x101 = addcarryxU64(x83, x80, x99)
  var x102 uint64
  var x103 uint1
  x102, x103 = addcarryxU64(x81, x78, x101)
  var x104 uint64 = (uint64(x103) + x79)
  var x105 uint64
  var x106 uint1
  x105, x106 = addcarryxU64(x64, x90, 0x0)
  var x107 uint64
  var x108 uint1
  x107, x108 = addcarryxU64(x66, x92, x106)
  var x109 uint64
  var x110 uint1
  x109, x110 = addcarryxU64(x68, x94, x108)
  var x111 uint64
  var x112 uint1
  x111, x112 = addcarryxU64(x70, x96, x110)
  var x113 uint64
  var x114 uint1
  x113, x114 = addcarryxU64(x72, x98, x112)
  var x115 uint64
  var x116 uint1
  x115, x116 = addcarryxU64(x74, x100, x114)
  var x117 uint64
  var x118 uint1
  x117, x118 = addcarryxU64(x76, x102, x116)
  var x119 uint64
  var x120 uint1
  x119, x120 = addcarryxU64(uint64(x77), x104, x118)
  var x121 uint64
  var x122 uint64
  x122, x121 = bits.Mul64(x105, 0x2341f27177344)
  var x123 uint64
  var x124 uint64
  x124, x123 = bits.Mul64(x105, 0x6cfc5fd681c52056)
  var x125 uint64
  var x126 uint64
  x126, x125 = bits.Mul64(x105, 0x7bc65c783158aea3)
  var x127 uint64
  var x128 uint64
  x128, x127 = bits.Mul64(x105, 0xfdc1767ae2ffffff)
  var x129 uint64
  var x130 uint64
  x130, x129 = bits.Mul64(x105, 0xffffffffffffffff)
  var x131 uint64
  var x132 uint64
  x132, x131 = bits.Mul64(x105, 0xffffffffffffffff)
  var x133 uint64
  var x134 uint64
  x134, x133 = bits.Mul64(x105, 0xffffffffffffffff)
  var x135 uint64
  var x136 uint1
  x135, x136 = addcarryxU64(x134, x131, 0x0)
  var x137 uint64
  var x138 uint1
  x137, x138 = addcarryxU64(x132, x129, x136)
  var x139 uint64
  var x140 uint1
  x139, x140 = addcarryxU64(x130, x127, x138)
  var x141 uint64
  var x142 uint1
  x141, x142 = addcarryxU64(x128, x125, x140)
  var x143 uint64
  var x144 uint1
  x143, x144 = addcarryxU64(x126, x123, x142)
  var x145 uint64
  var x146 uint1
  x145, x146 = addcarryxU64(x124, x121, x144)
  var x147 uint64 = (uint64(x146) + x122)
  var x149 uint1
  _, x149 = addcarryxU64(x105, x133, 0x0)
  var x150 uint64
  var x151 uint1
  x150, x151 = addcarryxU64(x107, x135, x149)
  var x152 uint64
  var x153 uint1
  x152, x153 = addcarryxU64(x109, x137, x151)
  var x154 uint64
  var x155 uint1
  x154, x155 = addcarryxU64(x111, x139, x153)
  var x156 uint64
  var x157 uint1
  x156, x157 = addcarryxU64(x113, x141, x155)
  var x158 uint64
  var x159 uint1
  x158, x159 = addcarryxU64(x115, x143, x157)
  var x160 uint64
  var x161 uint1
  x160, x161 = addcarryxU64(x117, x145, x159)
  var x162 uint64
  var x163 uint1
  x162, x163 = addcarryxU64(x119, x147, x161)
  var x164 uint64 = (uint64(x163) + uint64(x120))
  var x165 uint64
  var x166 uint64
  x166, x165 = bits.Mul64(x2, (arg2[6]))
  var x167 uint64
  var x168 uint64
  x168, x167 = bits.Mul64(x2, (arg2[5]))
  var x169 uint64
  var x170 uint64
  x170, x169 = bits.Mul64(x2, (arg2[4]))
  var x171 uint64
  var x172 uint64
  x172, x171 = bits.Mul64(x2, (arg2[3]))
  var x173 uint64
  var x174 uint64
  x174, x173 = bits.Mul64(x2, (arg2[2]))
  var x175 uint64
  var x176 uint64
  x176, x175 = bits.Mul64(x2, (arg2[1]))
  var x177 uint64
  var x178 uint64
  x178, x177 = bits.Mul64(x2, (arg2[0]))
  var x179 uint64
  var x180 uint1
  x179, x180 = addcarryxU64(x178, x175, 0x0)
  var x181 uint64
  var x182 uint1
  x181, x182 = addcarryxU64(x176, x173, x180)
  var x183 uint64
  var x184 uint1
  x183, x184 = addcarryxU64(x174, x171, x182)
  var x185 uint64
  var x186 uint1
  x185, x186 = addcarryxU64(x172, x169, x184)
  var x187 uint64
  var x188 uint1
  x187, x188 = addcarryxU64(x170, x167, x186)
  var x189 uint64
  var x190 uint1
  x189, x190 = addcarryxU64(x168, x165, x188)
  var x191 uint64 = (uint64(x190) + x166)
  var x192 uint64
  var x193 uint1
  x192, x193 = addcarryxU64(x150, x177, 0x0)
  var x194 uint64
  var x195 uint1
  x194, x195 = addcarryxU64(x152, x179, x193)
  var x196 uint64
  var x197 uint1
  x196, x197 = addcarryxU64(x154, x181, x195)
  var x198 uint64
  var x199 uint1
  x198, x199 = addcarryxU64(x156, x183, x197)
  var x200 uint64
  var x201 uint1
  x200, x201 = addcarryxU64(x158, x185, x199)
  var x202 uint64
  var x203 uint1
  x202, x203 = addcarryxU64(x160, x187, x201)
  var x204 uint64
  var x205 uint1
  x204, x205 = addcarryxU64(x162, x189, x203)
  var x206 uint64
  var x207 uint1
  x206, x207 = addcarryxU64(x164, x191, x205)
  var x208 uint64
  var x209 uint64
  x209, x208 = bits.Mul64(x192, 0x2341f27177344)
  var x210 uint64
  var x211 uint64
  x211, x210 = bits.Mul64(x192, 0x6cfc5fd681c52056)
  var x212 uint64
  var x213 uint64
  x213, x212 = bits.Mul64(x192, 0x7bc65c783158aea3)
  var x214 uint64
  var x215 uint64
  x215, x214 = bits.Mul64(x192, 0xfdc1767ae2ffffff)
  var x216 uint64
  var x217 uint64
  x217, x216 = bits.Mul64(x192, 0xffffffffffffffff)
  var x218 uint64
  var x219 uint64
  x219, x218 = bits.Mul64(x192, 0xffffffffffffffff)
  var x220 uint64
  var x221 uint64
  x221, x220 = bits.Mul64(x192, 0xffffffffffffffff)
  var x222 uint64
  var x223 uint1
  x222, x223 = addcarryxU64(x221, x218, 0x0)
  var x224 uint64
  var x225 uint1
  x224, x225 = addcarryxU64(x219, x216, x223)
  var x226 uint64
  var x227 uint1
  x226, x227 = addcarryxU64(x217, x214, x225)
  var x228 uint64
  var x229 uint1
  x228, x229 = addcarryxU64(x215, x212, x227)
  var x230 uint64
  var x231 uint1
  x230, x231 = addcarryxU64(x213, x210, x229)
  var x232 uint64
  var x233 uint1
  x232, x233 = addcarryxU64(x211, x208, x231)
  var x234 uint64 = (uint64(x233) + x209)
  var x236 uint1
  _, x236 = addcarryxU64(x192, x220, 0x0)
  var x237 uint64
  var x238 uint1
  x237, x238 = addcarryxU64(x194, x222, x236)
  var x239 uint64
  var x240 uint1
  x239, x240 = addcarryxU64(x196, x224, x238)
  var x241 uint64
  var x242 uint1
  x241, x242 = addcarryxU64(x198, x226, x240)
  var x243 uint64
  var x244 uint1
  x243, x244 = addcarryxU64(x200, x228, x242)
  var x245 uint64
  var x246 uint1
  x245, x246 = addcarryxU64(x202, x230, x244)
  var x247 uint64
  var x248 uint1
  x247, x248 = addcarryxU64(x204, x232, x246)
  var x249 uint64
  var x250 uint1
  x249, x250 = addcarryxU64(x206, x234, x248)
  var x251 uint64 = (uint64(x250) + uint64(x207))
  var x252 uint64
  var x253 uint64
  x253, x252 = bits.Mul64(x3, (arg2[6]))
  var x254 uint64
  var x255 uint64
  x255, x254 = bits.Mul64(x3, (arg2[5]))
  var x256 uint64
  var x257 uint64
  x257, x256 = bits.Mul64(x3, (arg2[4]))
  var x258 uint64
  var x259 uint64
  x259, x258 = bits.Mul64(x3, (arg2[3]))
  var x260 uint64
  var x261 uint64
  x261, x260 = bits.Mul64(x3, (arg2[2]))
  var x262 uint64
  var x263 uint64
  x263, x262 = bits.Mul64(x3, (arg2[1]))
  var x264 uint64
  var x265 uint64
  x265, x264 = bits.Mul64(x3, (arg2[0]))
  var x266 uint64
  var x267 uint1
  x266, x267 = addcarryxU64(x265, x262, 0x0)
  var x268 uint64
  var x269 uint1
  x268, x269 = addcarryxU64(x263, x260, x267)
  var x270 uint64
  var x271 uint1
  x270, x271 = addcarryxU64(x261, x258, x269)
  var x272 uint64
  var x273 uint1
  x272, x273 = addcarryxU64(x259, x256, x271)
  var x274 uint64
  var x275 uint1
  x274, x275 = addcarryxU64(x257, x254, x273)
  var x276 uint64
  var x277 uint1
  x276, x277 = addcarryxU64(x255, x252, x275)
  var x278 uint64 = (uint64(x277) + x253)
  var x279 uint64
  var x280 uint1
  x279, x280 = addcarryxU64(x237, x264, 0x0)
  var x281 uint64
  var x282 uint1
  x281, x282 = addcarryxU64(x239, x266, x280)
  var x283 uint64
  var x284 uint1
  x283, x284 = addcarryxU64(x241, x268, x282)
  var x285 uint64
  var x286 uint1
  x285, x286 = addcarryxU64(x243, x270, x284)
  var x287 uint64
  var x288 uint1
  x287, x288 = addcarryxU64(x245, x272, x286)
  var x289 uint64
  var x290 uint1
  x289, x290 = addcarryxU64(x247, x274, x288)
  var x291 uint64
  var x292 uint1
  x291, x292 = addcarryxU64(x249, x276, x290)
  var x293 uint64
  var x294 uint1
  x293, x294 = addcarryxU64(x251, x278, x292)
  var x295 uint64
  var x296 uint64
  x296, x295 = bits.Mul64(x279, 0x2341f27177344)
  var x297 uint64
  var x298 uint64
  x298, x297 = bits.Mul64(x279, 0x6cfc5fd681c52056)
  var x299 uint64
  var x300 uint64
  x300, x299 = bits.Mul64(x279, 0x7bc65c783158aea3)
  var x301 uint64
  var x302 uint64
  x302, x301 = bits.Mul64(x279, 0xfdc1767ae2ffffff)
  var x303 uint64
  var x304 uint64
  x304, x303 = bits.Mul64(x279, 0xffffffffffffffff)
  var x305 uint64
  var x306 uint64
  x306, x305 = bits.Mul64(x279, 0xffffffffffffffff)
  var x307 uint64
  var x308 uint64
  x308, x307 = bits.Mul64(x279, 0xffffffffffffffff)
  var x309 uint64
  var x310 uint1
  x309, x310 = addcarryxU64(x308, x305, 0x0)
  var x311 uint64
  var x312 uint1
  x311, x312 = addcarryxU64(x306, x303, x310)
  var x313 uint64
  var x314 uint1
  x313, x314 = addcarryxU64(x304, x301, x312)
  var x315 uint64
  var x316 uint1
  x315, x316 = addcarryxU64(x302, x299, x314)
  var x317 uint64
  var x318 uint1
  x317, x318 = addcarryxU64(x300, x297, x316)
  var x319 uint64
  var x320 uint1
  x319, x320 = addcarryxU64(x298, x295, x318)
  var x321 uint64 = (uint64(x320) + x296)
  var x323 uint1
  _, x323 = addcarryxU64(x279, x307, 0x0)
  var x324 uint64
  var x325 uint1
  x324, x325 = addcarryxU64(x281, x309, x323)
  var x326 uint64
  var x327 uint1
  x326, x327 = addcarryxU64(x283, x311, x325)
  var x328 uint64
  var x329 uint1
  x328, x329 = addcarryxU64(x285, x313, x327)
  var x330 uint64
  var x331 uint1
  x330, x331 = addcarryxU64(x287, x315, x329)
  var x332 uint64
  var x333 uint1
  x332, x333 = addcarryxU64(x289, x317, x331)
  var x334 uint64
  var x335 uint1
  x334, x335 = addcarryxU64(x291, x319, x333)
  var x336 uint64
  var x337 uint1
  x336, x337 = addcarryxU64(x293, x321, x335)
  var x338 uint64 = (uint64(x337) + uint64(x294))
  var x339 uint64
  var x340 uint64
  x340, x339 = bits.Mul64(x4, (arg2[6]))
  var x341 uint64
  var x342 uint64
  x342, x341 = bits.Mul64(x4, (arg2[5]))
  var x343 uint64
  var x344 uint64
  x344, x343 = bits.Mul64(x4, (arg2[4]))
  var x345 uint64
  var x346 uint64
  x346, x345 = bits.Mul64(x4, (arg2[3]))
  var x347 uint64
  var x348 uint64
  x348, x347 = bits.Mul64(x4, (arg2[2]))
  var x349 uint64
  var x350 uint64
  x350, x349 = bits.Mul64(x4, (arg2[1]))
  var x351 uint64
  var x352 uint64
  x352, x351 = bits.Mul64(x4, (arg2[0]))
  var x353 uint64
  var x354 uint1
  x353, x354 = addcarryxU64(x352, x349, 0x0)
  var x355 uint64
  var x356 uint1
  x355, x356 = addcarryxU64(x350, x347, x354)
  var x357 uint64
  var x358 uint1
  x357, x358 = addcarryxU64(x348, x345, x356)
  var x359 uint64
  var x360 uint1
  x359, x360 = addcarryxU64(x346, x343, x358)
  var x361 uint64
  var x362 uint1
  x361, x362 = addcarryxU64(x344, x341, x360)
  var x363 uint64
  var x364 uint1
  x363, x364 = addcarryxU64(x342, x339, x362)
  var x365 uint64 = (uint64(x364) + x340)
  var x366 uint64
  var x367 uint1
  x366, x367 = addcarryxU64(x324, x351, 0x0)
  var x368 uint64
  var x369 uint1
  x368, x369 = addcarryxU64(x326, x353, x367)
  var x370 uint64
  var x371 uint1
  x370, x371 = addcarryxU64(x328, x355, x369)
  var x372 uint64
  var x373 uint1
  x372, x373 = addcarryxU64(x330, x357, x371)
  var x374 uint64
  var x375 uint1
  x374, x375 = addcarryxU64(x332, x359, x373)
  var x376 uint64
  var x377 uint1
  x376, x377 = addcarryxU64(x334, x361, x375)
  var x378 uint64
  var x379 uint1
  x378, x379 = addcarryxU64(x336, x363, x377)
  var x380 uint64
  var x381 uint1
  x380, x381 = addcarryxU64(x338, x365, x379)
  var x382 uint64
  var x383 uint64
  x383, x382 = bits.Mul64(x366, 0x2341f27177344)
  var x384 uint64
  var x385 uint64
  x385, x384 = bits.Mul64(x366, 0x6cfc5fd681c52056)
  var x386 uint64
  var x387 uint64
  x387, x386 = bits.Mul64(x366, 0x7bc65c783158aea3)
  var x388 uint64
  var x389 uint64
  x389, x388 = bits.Mul64(x366, 0xfdc1767ae2ffffff)
  var x390 uint64
  var x391 uint64
  x391, x390 = bits.Mul64(x366, 0xffffffffffffffff)
  var x392 uint64
  var x393 uint64
  x393, x392 = bits.Mul64(x366, 0xffffffffffffffff)
  var x394 uint64
  var x395 uint64
  x395, x394 = bits.Mul64(x366, 0xffffffffffffffff)
  var x396 uint64
  var x397 uint1
  x396, x397 = addcarryxU64(x395, x392, 0x0)
  var x398 uint64
  var x399 uint1
  x398, x399 = addcarryxU64(x393, x390, x397)
  var x400 uint64
  var x401 uint1
  x400, x401 = addcarryxU64(x391, x388, x399)
  var x402 uint64
  var x403 uint1
  x402, x403 = addcarryxU64(x389, x386, x401)
  var x404 uint64
  var x405 uint1
  x404, x405 = addcarryxU64(x387, x384, x403)
  var x406 uint64
  var x407 uint1
  x406, x407 = addcarryxU64(x385, x382, x405)
  var x408 uint64 = (uint64(x407) + x383)
  var x410 uint1
  _, x410 = addcarryxU64(x366, x394, 0x0)
  var x411 uint64
  var x412 uint1
  x411, x412 = addcarryxU64(x368, x396, x410)
  var x413 uint64
  var x414 uint1
  x413, x414 = addcarryxU64(x370, x398, x412)
  var x415 uint64
  var x416 uint1
  x415, x416 = addcarryxU64(x372, x400, x414)
  var x417 uint64
  var x418 uint1
  x417, x418 = addcarryxU64(x374, x402, x416)
  var x419 uint64
  var x420 uint1
  x419, x420 = addcarryxU64(x376, x404, x418)
  var x421 uint64
  var x422 uint1
  x421, x422 = addcarryxU64(x378, x406, x420)
  var x423 uint64
  var x424 uint1
  x423, x424 = addcarryxU64(x380, x408, x422)
  var x425 uint64 = (uint64(x424) + uint64(x381))
  var x426 uint64
  var x427 uint64
  x427, x426 = bits.Mul64(x5, (arg2[6]))
  var x428 uint64
  var x429 uint64
  x429, x428 = bits.Mul64(x5, (arg2[5]))
  var x430 uint64
  var x431 uint64
  x431, x430 = bits.Mul64(x5, (arg2[4]))
  var x432 uint64
  var x433 uint64
  x433, x432 = bits.Mul64(x5, (arg2[3]))
  var x434 uint64
  var x435 uint64
  x435, x434 = bits.Mul64(x5, (arg2[2]))
  var x436 uint64
  var x437 uint64
  x437, x436 = bits.Mul64(x5, (arg2[1]))
  var x438 uint64
  var x439 uint64
  x439, x438 = bits.Mul64(x5, (arg2[0]))
  var x440 uint64
  var x441 uint1
  x440, x441 = addcarryxU64(x439, x436, 0x0)
  var x442 uint64
  var x443 uint1
  x442, x443 = addcarryxU64(x437, x434, x441)
  var x444 uint64
  var x445 uint1
  x444, x445 = addcarryxU64(x435, x432, x443)
  var x446 uint64
  var x447 uint1
  x446, x447 = addcarryxU64(x433, x430, x445)
  var x448 uint64
  var x449 uint1
  x448, x449 = addcarryxU64(x431, x428, x447)
  var x450 uint64
  var x451 uint1
  x450, x451 = addcarryxU64(x429, x426, x449)
  var x452 uint64 = (uint64(x451) + x427)
  var x453 uint64
  var x454 uint1
  x453, x454 = addcarryxU64(x411, x438, 0x0)
  var x455 uint64
  var x456 uint1
  x455, x456 = addcarryxU64(x413, x440, x454)
  var x457 uint64
  var x458 uint1
  x457, x458 = addcarryxU64(x415, x442, x456)
  var x459 uint64
  var x460 uint1
  x459, x460 = addcarryxU64(x417, x444, x458)
  var x461 uint64
  var x462 uint1
  x461, x462 = addcarryxU64(x419, x446, x460)
  var x463 uint64
  var x464 uint1
  x463, x464 = addcarryxU64(x421, x448, x462)
  var x465 uint64
  var x466 uint1
  x465, x466 = addcarryxU64(x423, x450, x464)
  var x467 uint64
  var x468 uint1
  x467, x468 = addcarryxU64(x425, x452, x466)
  var x469 uint64
  var x470 uint64
  x470, x469 = bits.Mul64(x453, 0x2341f27177344)
  var x471 uint64
  var x472 uint64
  x472, x471 = bits.Mul64(x453, 0x6cfc5fd681c52056)
  var x473 uint64
  var x474 uint64
  x474, x473 = bits.Mul64(x453, 0x7bc65c783158aea3)
  var x475 uint64
  var x476 uint64
  x476, x475 = bits.Mul64(x453, 0xfdc1767ae2ffffff)
  var x477 uint64
  var x478 uint64
  x478, x477 = bits.Mul64(x453, 0xffffffffffffffff)
  var x479 uint64
  var x480 uint64
  x480, x479 = bits.Mul64(x453, 0xffffffffffffffff)
  var x481 uint64
  var x482 uint64
  x482, x481 = bits.Mul64(x453, 0xffffffffffffffff)
  var x483 uint64
  var x484 uint1
  x483, x484 = addcarryxU64(x482, x479, 0x0)
  var x485 uint64
  var x486 uint1
  x485, x486 = addcarryxU64(x480, x477, x484)
  var x487 uint64
  var x488 uint1
  x487, x488 = addcarryxU64(x478, x475, x486)
  var x489 uint64
  var x490 uint1
  x489, x490 = addcarryxU64(x476, x473, x488)
  var x491 uint64
  var x492 uint1
  x491, x492 = addcarryxU64(x474, x471, x490)
  var x493 uint64
  var x494 uint1
  x493, x494 = addcarryxU64(x472, x469, x492)
  var x495 uint64 = (uint64(x494) + x470)
  var x497 uint1
  _, x497 = addcarryxU64(x453, x481, 0x0)
  var x498 uint64
  var x499 uint1
  x498, x499 = addcarryxU64(x455, x483, x497)
  var x500 uint64
  var x501 uint1
  x500, x501 = addcarryxU64(x457, x485, x499)
  var x502 uint64
  var x503 uint1
  x502, x503 = addcarryxU64(x459, x487, x501)
  var x504 uint64
  var x505 uint1
  x504, x505 = addcarryxU64(x461, x489, x503)
  var x506 uint64
  var x507 uint1
  x506, x507 = addcarryxU64(x463, x491, x505)
  var x508 uint64
  var x509 uint1
  x508, x509 = addcarryxU64(x465, x493, x507)
  var x510 uint64
  var x511 uint1
  x510, x511 = addcarryxU64(x467, x495, x509)
  var x512 uint64 = (uint64(x511) + uint64(x468))
  var x513 uint64
  var x514 uint64
  x514, x513 = bits.Mul64(x6, (arg2[6]))
  var x515 uint64
  var x516 uint64
  x516, x515 = bits.Mul64(x6, (arg2[5]))
  var x517 uint64
  var x518 uint64
  x518, x517 = bits.Mul64(x6, (arg2[4]))
  var x519 uint64
  var x520 uint64
  x520, x519 = bits.Mul64(x6, (arg2[3]))
  var x521 uint64
  var x522 uint64
  x522, x521 = bits.Mul64(x6, (arg2[2]))
  var x523 uint64
  var x524 uint64
  x524, x523 = bits.Mul64(x6, (arg2[1]))
  var x525 uint64
  var x526 uint64
  x526, x525 = bits.Mul64(x6, (arg2[0]))
  var x527 uint64
  var x528 uint1
  x527, x528 = addcarryxU64(x526, x523, 0x0)
  var x529 uint64
  var x530 uint1
  x529, x530 = addcarryxU64(x524, x521, x528)
  var x531 uint64
  var x532 uint1
  x531, x532 = addcarryxU64(x522, x519, x530)
  var x533 uint64
  var x534 uint1
  x533, x534 = addcarryxU64(x520, x517, x532)
  var x535 uint64
  var x536 uint1
  x535, x536 = addcarryxU64(x518, x515, x534)
  var x537 uint64
  var x538 uint1
  x537, x538 = addcarryxU64(x516, x513, x536)
  var x539 uint64 = (uint64(x538) + x514)
  var x540 uint64
  var x541 uint1
  x540, x541 = addcarryxU64(x498, x525, 0x0)
  var x542 uint64
  var x543 uint1
  x542, x543 = addcarryxU64(x500, x527, x541)
  var x544 uint64
  var x545 uint1
  x544, x545 = addcarryxU64(x502, x529, x543)
  var x546 uint64
  var x547 uint1
  x546, x547 = addcarryxU64(x504, x531, x545)
  var x548 uint64
  var x549 uint1
  x548, x549 = addcarryxU64(x506, x533, x547)
  var x550 uint64
  var x551 uint1
  x550, x551 = addcarryxU64(x508, x535, x549)
  var x552 uint64
  var x553 uint1
  x552, x553 = addcarryxU64(x510, x537, x551)
  var x554 uint64
  var x555 uint1
  x554, x555 = addcarryxU64(x512, x539, x553)
  var x556 uint64
  var x557 uint64
  x557, x556 = bits.Mul64(x540, 0x2341f27177344)
  var x558 uint64
  var x559 uint64
  x559, x558 = bits.Mul64(x540, 0x6cfc5fd681c52056)
  var x560 uint64
  var x561 uint64
  x561, x560 = bits.Mul64(x540, 0x7bc65c783158aea3)
  var x562 uint64
  var x563 uint64
  x563, x562 = bits.Mul64(x540, 0xfdc1767ae2ffffff)
  var x564 uint64
  var x565 uint64
  x565, x564 = bits.Mul64(x540, 0xffffffffffffffff)
  var x566 uint64
  var x567 uint64
  x567, x566 = bits.Mul64(x540, 0xffffffffffffffff)
  var x568 uint64
  var x569 uint64
  x569, x568 = bits.Mul64(x540, 0xffffffffffffffff)
  var x570 uint64
  var x571 uint1
  x570, x571 = addcarryxU64(x569, x566, 0x0)
  var x572 uint64
  var x573 uint1
  x572, x573 = addcarryxU64(x567, x564, x571)
  var x574 uint64
  var x575 uint1
  x574, x575 = addcarryxU64(x565, x562, x573)
  var x576 uint64
  var x577 uint1
  x576, x577 = addcarryxU64(x563, x560, x575)
  var x578 uint64
  var x579 uint1
  x578, x579 = addcarryxU64(x561, x558, x577)
  var x580 uint64
  var x581 uint1
  x580, x581 = addcarryxU64(x559, x556, x579)
  var x582 uint64 = (uint64(x581) + x557)
  var x584 uint1
  _, x584 = addcarryxU64(x540, x568, 0x0)
  var x585 uint64
  var x586 uint1
  x585, x586 = addcarryxU64(x542, x570, x584)
  var x587 uint64
  var x588 uint1
  x587, x588 = addcarryxU64(x544, x572, x586)
  var x589 uint64
  var x590 uint1
  x589, x590 = addcarryxU64(x546, x574, x588)
  var x591 uint64
  var x592 uint1
  x591, x592 = addcarryxU64(x548, x576, x590)
  var x593 uint64
  var x594 uint1
  x593, x594 = addcarryxU64(x550, x578, x592)
  var x595 uint64
  var x596 uint1
  x595, x596 = addcarryxU64(x552, x580, x594)
  var x597 uint64
  var x598 uint1
  x597, x598 = addcarryxU64(x554, x582, x596)
  var x599 uint64 = (uint64(x598) + uint64(x555))
  var x600 uint64
  var x601 uint1
  x600, x601 = subborrowxU64(x585, 0xffffffffffffffff, 0x0)
  var x602 uint64
  var x603 uint1
  x602, x603 = subborrowxU64(x587, 0xffffffffffffffff, x601)
  var x604 uint64
  var x605 uint1
  x604, x605 = subborrowxU64(x589, 0xffffffffffffffff, x603)
  var x606 uint64
  var x607 uint1
  x606, x607 = subborrowxU64(x591, 0xfdc1767ae2ffffff, x605)
  var x608 uint64
  var x609 uint1
  x608, x609 = subborrowxU64(x593, 0x7bc65c783158aea3, x607)
  var x610 uint64
  var x611 uint1
  x610, x611 = subborrowxU64(x595, 0x6cfc5fd681c52056, x609)
  var x612 uint64
  var x613 uint1
  x612, x613 = subborrowxU64(x597, 0x2341f27177344, x611)
  var x615 uint1
  _, x615 = subborrowxU64(x599, uint64(0x0), x613)
  var x616 uint64
  cmovznzU64(&x616, x615, x600, x585)
  var x617 uint64
  cmovznzU64(&x617, x615, x602, x587)
  var x618 uint64
  cmovznzU64(&x618, x615, x604, x589)
  var x619 uint64
  cmovznzU64(&x619, x615, x606, x591)
  var x620 uint64
  cmovznzU64(&x620, x615, x608, x593)
  var x621 uint64
  cmovznzU64(&x621, x615, x610, x595)
  var x622 uint64
  cmovznzU64(&x622, x615, x612, x597)
  out1[0] = x616
  out1[1] = x617
  out1[2] = x618
  out1[3] = x619
  out1[4] = x620
  out1[5] = x621
  out1[6] = x622
}

/*
 * The function Square squares a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func Square(out1 *[7]uint64, arg1 *[7]uint64) {
  var x1 uint64 = (arg1[1])
  var x2 uint64 = (arg1[2])
  var x3 uint64 = (arg1[3])
  var x4 uint64 = (arg1[4])
  var x5 uint64 = (arg1[5])
  var x6 uint64 = (arg1[6])
  var x7 uint64 = (arg1[0])
  var x8 uint64
  var x9 uint64
  x9, x8 = bits.Mul64(x7, (arg1[6]))
  var x10 uint64
  var x11 uint64
  x11, x10 = bits.Mul64(x7, (arg1[5]))
  var x12 uint64
  var x13 uint64
  x13, x12 = bits.Mul64(x7, (arg1[4]))
  var x14 uint64
  var x15 uint64
  x15, x14 = bits.Mul64(x7, (arg1[3]))
  var x16 uint64
  var x17 uint64
  x17, x16 = bits.Mul64(x7, (arg1[2]))
  var x18 uint64
  var x19 uint64
  x19, x18 = bits.Mul64(x7, (arg1[1]))
  var x20 uint64
  var x21 uint64
  x21, x20 = bits.Mul64(x7, (arg1[0]))
  var x22 uint64
  var x23 uint1
  x22, x23 = addcarryxU64(x21, x18, 0x0)
  var x24 uint64
  var x25 uint1
  x24, x25 = addcarryxU64(x19, x16, x23)
  var x26 uint64
  var x27 uint1
  x26, x27 = addcarryxU64(x17, x14, x25)
  var x28 uint64
  var x29 uint1
  x28, x29 = addcarryxU64(x15, x12, x27)
  var x30 uint64
  var x31 uint1
  x30, x31 = addcarryxU64(x13, x10, x29)
  var x32 uint64
  var x33 uint1
  x32, x33 = addcarryxU64(x11, x8, x31)
  var x34 uint64 = (uint64(x33) + x9)
  var x35 uint64
  var x36 uint64
  x36, x35 = bits.Mul64(x20, 0x2341f27177344)
  var x37 uint64
  var x38 uint64
  x38, x37 = bits.Mul64(x20, 0x6cfc5fd681c52056)
  var x39 uint64
  var x40 uint64
  x40, x39 = bits.Mul64(x20, 0x7bc65c783158aea3)
  var x41 uint64
  var x42 uint64
  x42, x41 = bits.Mul64(x20, 0xfdc1767ae2ffffff)
  var x43 uint64
  var x44 uint64
  x44, x43 = bits.Mul64(x20, 0xffffffffffffffff)
  var x45 uint64
  var x46 uint64
  x46, x45 = bits.Mul64(x20, 0xffffffffffffffff)
  var x47 uint64
  var x48 uint64
  x48, x47 = bits.Mul64(x20, 0xffffffffffffffff)
  var x49 uint64
  var x50 uint1
  x49, x50 = addcarryxU64(x48, x45, 0x0)
  var x51 uint64
  var x52 uint1
  x51, x52 = addcarryxU64(x46, x43, x50)
  var x53 uint64
  var x54 uint1
  x53, x54 = addcarryxU64(x44, x41, x52)
  var x55 uint64
  var x56 uint1
  x55, x56 = addcarryxU64(x42, x39, x54)
  var x57 uint64
  var x58 uint1
  x57, x58 = addcarryxU64(x40, x37, x56)
  var x59 uint64
  var x60 uint1
  x59, x60 = addcarryxU64(x38, x35, x58)
  var x61 uint64 = (uint64(x60) + x36)
  var x63 uint1
  _, x63 = addcarryxU64(x20, x47, 0x0)
  var x64 uint64
  var x65 uint1
  x64, x65 = addcarryxU64(x22, x49, x63)
  var x66 uint64
  var x67 uint1
  x66, x67 = addcarryxU64(x24, x51, x65)
  var x68 uint64
  var x69 uint1
  x68, x69 = addcarryxU64(x26, x53, x67)
  var x70 uint64
  var x71 uint1
  x70, x71 = addcarryxU64(x28, x55, x69)
  var x72 uint64
  var x73 uint1
  x72, x73 = addcarryxU64(x30, x57, x71)
  var x74 uint64
  var x75 uint1
  x74, x75 = addcarryxU64(x32, x59, x73)
  var x76 uint64
  var x77 uint1
  x76, x77 = addcarryxU64(x34, x61, x75)
  var x78 uint64
  var x79 uint64
  x79, x78 = bits.Mul64(x1, (arg1[6]))
  var x80 uint64
  var x81 uint64
  x81, x80 = bits.Mul64(x1, (arg1[5]))
  var x82 uint64
  var x83 uint64
  x83, x82 = bits.Mul64(x1, (arg1[4]))
  var x84 uint64
  var x85 uint64
  x85, x84 = bits.Mul64(x1, (arg1[3]))
  var x86 uint64
  var x87 uint64
  x87, x86 = bits.Mul64(x1, (arg1[2]))
  var x88 uint64
  var x89 uint64
  x89, x88 = bits.Mul64(x1, (arg1[1]))
  var x90 uint64
  var x91 uint64
  x91, x90 = bits.Mul64(x1, (arg1[0]))
  var x92 uint64
  var x93 uint1
  x92, x93 = addcarryxU64(x91, x88, 0x0)
  var x94 uint64
  var x95 uint1
  x94, x95 = addcarryxU64(x89, x86, x93)
  var x96 uint64
  var x97 uint1
  x96, x97 = addcarryxU64(x87, x84, x95)
  var x98 uint64
  var x99 uint1
  x98, x99 = addcarryxU64(x85, x82, x97)
  var x100 uint64
  var x101 uint1
  x100, x101 = addcarryxU64(x83, x80, x99)
  var x102 uint64
  var x103 uint1
  x102, x103 = addcarryxU64(x81, x78, x101)
  var x104 uint64 = (uint64(x103) + x79)
  var x105 uint64
  var x106 uint1
  x105, x106 = addcarryxU64(x64, x90, 0x0)
  var x107 uint64
  var x108 uint1
  x107, x108 = addcarryxU64(x66, x92, x106)
  var x109 uint64
  var x110 uint1
  x109, x110 = addcarryxU64(x68, x94, x108)
  var x111 uint64
  var x112 uint1
  x111, x112 = addcarryxU64(x70, x96, x110)
  var x113 uint64
  var x114 uint1
  x113, x114 = addcarryxU64(x72, x98, x112)
  var x115 uint64
  var x116 uint1
  x115, x116 = addcarryxU64(x74, x100, x114)
  var x117 uint64
  var x118 uint1
  x117, x118 = addcarryxU64(x76, x102, x116)
  var x119 uint64
  var x120 uint1
  x119, x120 = addcarryxU64(uint64(x77), x104, x118)
  var x121 uint64
  var x122 uint64
  x122, x121 = bits.Mul64(x105, 0x2341f27177344)
  var x123 uint64
  var x124 uint64
  x124, x123 = bits.Mul64(x105, 0x6cfc5fd681c52056)
  var x125 uint64
  var x126 uint64
  x126, x125 = bits.Mul64(x105, 0x7bc65c783158aea3)
  var x127 uint64
  var x128 uint64
  x128, x127 = bits.Mul64(x105, 0xfdc1767ae2ffffff)
  var x129 uint64
  var x130 uint64
  x130, x129 = bits.Mul64(x105, 0xffffffffffffffff)
  var x131 uint64
  var x132 uint64
  x132, x131 = bits.Mul64(x105, 0xffffffffffffffff)
  var x133 uint64
  var x134 uint64
  x134, x133 = bits.Mul64(x105, 0xffffffffffffffff)
  var x135 uint64
  var x136 uint1
  x135, x136 = addcarryxU64(x134, x131, 0x0)
  var x137 uint64
  var x138 uint1
  x137, x138 = addcarryxU64(x132, x129, x136)
  var x139 uint64
  var x140 uint1
  x139, x140 = addcarryxU64(x130, x127, x138)
  var x141 uint64
  var x142 uint1
  x141, x142 = addcarryxU64(x128, x125, x140)
  var x143 uint64
  var x144 uint1
  x143, x144 = addcarryxU64(x126, x123, x142)
  var x145 uint64
  var x146 uint1
  x145, x146 = addcarryxU64(x124, x121, x144)
  var x147 uint64 = (uint64(x146) + x122)
  var x149 uint1
  _, x149 = addcarryxU64(x105, x133, 0x0)
  var x150 uint64
  var x151 uint1
  x150, x151 = addcarryxU64(x107, x135, x149)
  var x152 uint64
  var x153 uint1
  x152, x153 = addcarryxU64(x109, x137, x151)
  var x154 uint64
  var x155 uint1
  x154, x155 = addcarryxU64(x111, x139, x153)
  var x156 uint64
  var x157 uint1
  x156, x157 = addcarryxU64(x113, x141, x155)
  var x158 uint64
  var x159 uint1
  x158, x159 = addcarryxU64(x115, x143, x157)
  var x160 uint64
  var x161 uint1
  x160, x161 = addcarryxU64(x117, x145, x159)
  var x162 uint64
  var x163 uint1
  x162, x163 = addcarryxU64(x119, x147, x161)
  var x164 uint64 = (uint64(x163) + uint64(x120))
  var x165 uint64
  var x166 uint64
  x166, x165 = bits.Mul64(x2, (arg1[6]))
  var x167 uint64
  var x168 uint64
  x168, x167 = bits.Mul64(x2, (arg1[5]))
  var x169 uint64
  var x170 uint64
  x170, x169 = bits.Mul64(x2, (arg1[4]))
  var x171 uint64
  var x172 uint64
  x172, x171 = bits.Mul64(x2, (arg1[3]))
  var x173 uint64
  var x174 uint64
  x174, x173 = bits.Mul64(x2, (arg1[2]))
  var x175 uint64
  var x176 uint64
  x176, x175 = bits.Mul64(x2, (arg1[1]))
  var x177 uint64
  var x178 uint64
  x178, x177 = bits.Mul64(x2, (arg1[0]))
  var x179 uint64
  var x180 uint1
  x179, x180 = addcarryxU64(x178, x175, 0x0)
  var x181 uint64
  var x182 uint1
  x181, x182 = addcarryxU64(x176, x173, x180)
  var x183 uint64
  var x184 uint1
  x183, x184 = addcarryxU64(x174, x171, x182)
  var x185 uint64
  var x186 uint1
  x185, x186 = addcarryxU64(x172, x169, x184)
  var x187 uint64
  var x188 uint1
  x187, x188 = addcarryxU64(x170, x167, x186)
  var x189 uint64
  var x190 uint1
  x189, x190 = addcarryxU64(x168, x165, x188)
  var x191 uint64 = (uint64(x190) + x166)
  var x192 uint64
  var x193 uint1
  x192, x193 = addcarryxU64(x150, x177, 0x0)
  var x194 uint64
  var x195 uint1
  x194, x195 = addcarryxU64(x152, x179, x193)
  var x196 uint64
  var x197 uint1
  x196, x197 = addcarryxU64(x154, x181, x195)
  var x198 uint64
  var x199 uint1
  x198, x199 = addcarryxU64(x156, x183, x197)
  var x200 uint64
  var x201 uint1
  x200, x201 = addcarryxU64(x158, x185, x199)
  var x202 uint64
  var x203 uint1
  x202, x203 = addcarryxU64(x160, x187, x201)
  var x204 uint64
  var x205 uint1
  x204, x205 = addcarryxU64(x162, x189, x203)
  var x206 uint64
  var x207 uint1
  x206, x207 = addcarryxU64(x164, x191, x205)
  var x208 uint64
  var x209 uint64
  x209, x208 = bits.Mul64(x192, 0x2341f27177344)
  var x210 uint64
  var x211 uint64
  x211, x210 = bits.Mul64(x192, 0x6cfc5fd681c52056)
  var x212 uint64
  var x213 uint64
  x213, x212 = bits.Mul64(x192, 0x7bc65c783158aea3)
  var x214 uint64
  var x215 uint64
  x215, x214 = bits.Mul64(x192, 0xfdc1767ae2ffffff)
  var x216 uint64
  var x217 uint64
  x217, x216 = bits.Mul64(x192, 0xffffffffffffffff)
  var x218 uint64
  var x219 uint64
  x219, x218 = bits.Mul64(x192, 0xffffffffffffffff)
  var x220 uint64
  var x221 uint64
  x221, x220 = bits.Mul64(x192, 0xffffffffffffffff)
  var x222 uint64
  var x223 uint1
  x222, x223 = addcarryxU64(x221, x218, 0x0)
  var x224 uint64
  var x225 uint1
  x224, x225 = addcarryxU64(x219, x216, x223)
  var x226 uint64
  var x227 uint1
  x226, x227 = addcarryxU64(x217, x214, x225)
  var x228 uint64
  var x229 uint1
  x228, x229 = addcarryxU64(x215, x212, x227)
  var x230 uint64
  var x231 uint1
  x230, x231 = addcarryxU64(x213, x210, x229)
  var x232 uint64
  var x233 uint1
  x232, x233 = addcarryxU64(x211, x208, x231)
  var x234 uint64 = (uint64(x233) + x209)
  var x236 uint1
  _, x236 = addcarryxU64(x192, x220, 0x0)
  var x237 uint64
  var x238 uint1
  x237, x238 = addcarryxU64(x194, x222, x236)
  var x239 uint64
  var x240 uint1
  x239, x240 = addcarryxU64(x196, x224, x238)
  var x241 uint64
  var x242 uint1
  x241, x242 = addcarryxU64(x198, x226, x240)
  var x243 uint64
  var x244 uint1
  x243, x244 = addcarryxU64(x200, x228, x242)
  var x245 uint64
  var x246 uint1
  x245, x246 = addcarryxU64(x202, x230, x244)
  var x247 uint64
  var x248 uint1
  x247, x248 = addcarryxU64(x204, x232, x246)
  var x249 uint64
  var x250 uint1
  x249, x250 = addcarryxU64(x206, x234, x248)
  var x251 uint64 = (uint64(x250) + uint64(x207))
  var x252 uint64
  var x253 uint64
  x253, x252 = bits.Mul64(x3, (arg1[6]))
  var x254 uint64
  var x255 uint64
  x255, x254 = bits.Mul64(x3, (arg1[5]))
  var x256 uint64
  var x257 uint64
  x257, x256 = bits.Mul64(x3, (arg1[4]))
  var x258 uint64
  var x259 uint64
  x259, x258 = bits.Mul64(x3, (arg1[3]))
  var x260 uint64
  var x261 uint64
  x261, x260 = bits.Mul64(x3, (arg1[2]))
  var x262 uint64
  var x263 uint64
  x263, x262 = bits.Mul64(x3, (arg1[1]))
  var x264 uint64
  var x265 uint64
  x265, x264 = bits.Mul64(x3, (arg1[0]))
  var x266 uint64
  var x267 uint1
  x266, x267 = addcarryxU64(x265, x262, 0x0)
  var x268 uint64
  var x269 uint1
  x268, x269 = addcarryxU64(x263, x260, x267)
  var x270 uint64
  var x271 uint1
  x270, x271 = addcarryxU64(x261, x258, x269)
  var x272 uint64
  var x273 uint1
  x272, x273 = addcarryxU64(x259, x256, x271)
  var x274 uint64
  var x275 uint1
  x274, x275 = addcarryxU64(x257, x254, x273)
  var x276 uint64
  var x277 uint1
  x276, x277 = addcarryxU64(x255, x252, x275)
  var x278 uint64 = (uint64(x277) + x253)
  var x279 uint64
  var x280 uint1
  x279, x280 = addcarryxU64(x237, x264, 0x0)
  var x281 uint64
  var x282 uint1
  x281, x282 = addcarryxU64(x239, x266, x280)
  var x283 uint64
  var x284 uint1
  x283, x284 = addcarryxU64(x241, x268, x282)
  var x285 uint64
  var x286 uint1
  x285, x286 = addcarryxU64(x243, x270, x284)
  var x287 uint64
  var x288 uint1
  x287, x288 = addcarryxU64(x245, x272, x286)
  var x289 uint64
  var x290 uint1
  x289, x290 = addcarryxU64(x247, x274, x288)
  var x291 uint64
  var x292 uint1
  x291, x292 = addcarryxU64(x249, x276, x290)
  var x293 uint64
  var x294 uint1
  x293, x294 = addcarryxU64(x251, x278, x292)
  var x295 uint64
  var x296 uint64
  x296, x295 = bits.Mul64(x279, 0x2341f27177344)
  var x297 uint64
  var x298 uint64
  x298, x297 = bits.Mul64(x279, 0x6cfc5fd681c52056)
  var x299 uint64
  var x300 uint64
  x300, x299 = bits.Mul64(x279, 0x7bc65c783158aea3)
  var x301 uint64
  var x302 uint64
  x302, x301 = bits.Mul64(x279, 0xfdc1767ae2ffffff)
  var x303 uint64
  var x304 uint64
  x304, x303 = bits.Mul64(x279, 0xffffffffffffffff)
  var x305 uint64
  var x306 uint64
  x306, x305 = bits.Mul64(x279, 0xffffffffffffffff)
  var x307 uint64
  var x308 uint64
  x308, x307 = bits.Mul64(x279, 0xffffffffffffffff)
  var x309 uint64
  var x310 uint1
  x309, x310 = addcarryxU64(x308, x305, 0x0)
  var x311 uint64
  var x312 uint1
  x311, x312 = addcarryxU64(x306, x303, x310)
  var x313 uint64
  var x314 uint1
  x313, x314 = addcarryxU64(x304, x301, x312)
  var x315 uint64
  var x316 uint1
  x315, x316 = addcarryxU64(x302, x299, x314)
  var x317 uint64
  var x318 uint1
  x317, x318 = addcarryxU64(x300, x297, x316)
  var x319 uint64
  var x320 uint1
  x319, x320 = addcarryxU64(x298, x295, x318)
  var x321 uint64 = (uint64(x320) + x296)
  var x323 uint1
  _, x323 = addcarryxU64(x279, x307, 0x0)
  var x324 uint64
  var x325 uint1
  x324, x325 = addcarryxU64(x281, x309, x323)
  var x326 uint64
  var x327 uint1
  x326, x327 = addcarryxU64(x283, x311, x325)
  var x328 uint64
  var x329 uint1
  x328, x329 = addcarryxU64(x285, x313, x327)
  var x330 uint64
  var x331 uint1
  x330, x331 = addcarryxU64(x287, x315, x329)
  var x332 uint64
  var x333 uint1
  x332, x333 = addcarryxU64(x289, x317, x331)
  var x334 uint64
  var x335 uint1
  x334, x335 = addcarryxU64(x291, x319, x333)
  var x336 uint64
  var x337 uint1
  x336, x337 = addcarryxU64(x293, x321, x335)
  var x338 uint64 = (uint64(x337) + uint64(x294))
  var x339 uint64
  var x340 uint64
  x340, x339 = bits.Mul64(x4, (arg1[6]))
  var x341 uint64
  var x342 uint64
  x342, x341 = bits.Mul64(x4, (arg1[5]))
  var x343 uint64
  var x344 uint64
  x344, x343 = bits.Mul64(x4, (arg1[4]))
  var x345 uint64
  var x346 uint64
  x346, x345 = bits.Mul64(x4, (arg1[3]))
  var x347 uint64
  var x348 uint64
  x348, x347 = bits.Mul64(x4, (arg1[2]))
  var x349 uint64
  var x350 uint64
  x350, x349 = bits.Mul64(x4, (arg1[1]))
  var x351 uint64
  var x352 uint64
  x352, x351 = bits.Mul64(x4, (arg1[0]))
  var x353 uint64
  var x354 uint1
  x353, x354 = addcarryxU64(x352, x349, 0x0)
  var x355 uint64
  var x356 uint1
  x355, x356 = addcarryxU64(x350, x347, x354)
  var x357 uint64
  var x358 uint1
  x357, x358 = addcarryxU64(x348, x345, x356)
  var x359 uint64
  var x360 uint1
  x359, x360 = addcarryxU64(x346, x343, x358)
  var x361 uint64
  var x362 uint1
  x361, x362 = addcarryxU64(x344, x341, x360)
  var x363 uint64
  var x364 uint1
  x363, x364 = addcarryxU64(x342, x339, x362)
  var x365 uint64 = (uint64(x364) + x340)
  var x366 uint64
  var x367 uint1
  x366, x367 = addcarryxU64(x324, x351, 0x0)
  var x368 uint64
  var x369 uint1
  x368, x369 = addcarryxU64(x326, x353, x367)
  var x370 uint64
  var x371 uint1
  x370, x371 = addcarryxU64(x328, x355, x369)
  var x372 uint64
  var x373 uint1
  x372, x373 = addcarryxU64(x330, x357, x371)
  var x374 uint64
  var x375 uint1
  x374, x375 = addcarryxU64(x332, x359, x373)
  var x376 uint64
  var x377 uint1
  x376, x377 = addcarryxU64(x334, x361, x375)
  var x378 uint64
  var x379 uint1
  x378, x379 = addcarryxU64(x336, x363, x377)
  var x380 uint64
  var x381 uint1
  x380, x381 = addcarryxU64(x338, x365, x379)
  var x382 uint64
  var x383 uint64
  x383, x382 = bits.Mul64(x366, 0x2341f27177344)
  var x384 uint64
  var x385 uint64
  x385, x384 = bits.Mul64(x366, 0x6cfc5fd681c52056)
  var x386 uint64
  var x387 uint64
  x387, x386 = bits.Mul64(x366, 0x7bc65c783158aea3)
  var x388 uint64
  var x389 uint64
  x389, x388 = bits.Mul64(x366, 0xfdc1767ae2ffffff)
  var x390 uint64
  var x391 uint64
  x391, x390 = bits.Mul64(x366, 0xffffffffffffffff)
  var x392 uint64
  var x393 uint64
  x393, x392 = bits.Mul64(x366, 0xffffffffffffffff)
  var x394 uint64
  var x395 uint64
  x395, x394 = bits.Mul64(x366, 0xffffffffffffffff)
  var x396 uint64
  var x397 uint1
  x396, x397 = addcarryxU64(x395, x392, 0x0)
  var x398 uint64
  var x399 uint1
  x398, x399 = addcarryxU64(x393, x390, x397)
  var x400 uint64
  var x401 uint1
  x400, x401 = addcarryxU64(x391, x388, x399)
  var x402 uint64
  var x403 uint1
  x402, x403 = addcarryxU64(x389, x386, x401)
  var x404 uint64
  var x405 uint1
  x404, x405 = addcarryxU64(x387, x384, x403)
  var x406 uint64
  var x407 uint1
  x406, x407 = addcarryxU64(x385, x382, x405)
  var x408 uint64 = (uint64(x407) + x383)
  var x410 uint1
  _, x410 = addcarryxU64(x366, x394, 0x0)
  var x411 uint64
  var x412 uint1
  x411, x412 = addcarryxU64(x368, x396, x410)
  var x413 uint64
  var x414 uint1
  x413, x414 = addcarryxU64(x370, x398, x412)
  var x415 uint64
  var x416 uint1
  x415, x416 = addcarryxU64(x372, x400, x414)
  var x417 uint64
  var x418 uint1
  x417, x418 = addcarryxU64(x374, x402, x416)
  var x419 uint64
  var x420 uint1
  x419, x420 = addcarryxU64(x376, x404, x418)
  var x421 uint64
  var x422 uint1
  x421, x422 = addcarryxU64(x378, x406, x420)
  var x423 uint64
  var x424 uint1
  x423, x424 = addcarryxU64(x380, x408, x422)
  var x425 uint64 = (uint64(x424) + uint64(x381))
  var x426 uint64
  var x427 uint64
  x427, x426 = bits.Mul64(x5, (arg1[6]))
  var x428 uint64
  var x429 uint64
  x429, x428 = bits.Mul64(x5, (arg1[5]))
  var x430 uint64
  var x431 uint64
  x431, x430 = bits.Mul64(x5, (arg1[4]))
  var x432 uint64
  var x433 uint64
  x433, x432 = bits.Mul64(x5, (arg1[3]))
  var x434 uint64
  var x435 uint64
  x435, x434 = bits.Mul64(x5, (arg1[2]))
  var x436 uint64
  var x437 uint64
  x437, x436 = bits.Mul64(x5, (arg1[1]))
  var x438 uint64
  var x439 uint64
  x439, x438 = bits.Mul64(x5, (arg1[0]))
  var x440 uint64
  var x441 uint1
  x440, x441 = addcarryxU64(x439, x436, 0x0)
  var x442 uint64
  var x443 uint1
  x442, x443 = addcarryxU64(x437, x434, x441)
  var x444 uint64
  var x445 uint1
  x444, x445 = addcarryxU64(x435, x432, x443)
  var x446 uint64
  var x447 uint1
  x446, x447 = addcarryxU64(x433, x430, x445)
  var x448 uint64
  var x449 uint1
  x448, x449 = addcarryxU64(x431, x428, x447)
  var x450 uint64
  var x451 uint1
  x450, x451 = addcarryxU64(x429, x426, x449)
  var x452 uint64 = (uint64(x451) + x427)
  var x453 uint64
  var x454 uint1
  x453, x454 = addcarryxU64(x411, x438, 0x0)
  var x455 uint64
  var x456 uint1
  x455, x456 = addcarryxU64(x413, x440, x454)
  var x457 uint64
  var x458 uint1
  x457, x458 = addcarryxU64(x415, x442, x456)
  var x459 uint64
  var x460 uint1
  x459, x460 = addcarryxU64(x417, x444, x458)
  var x461 uint64
  var x462 uint1
  x461, x462 = addcarryxU64(x419, x446, x460)
  var x463 uint64
  var x464 uint1
  x463, x464 = addcarryxU64(x421, x448, x462)
  var x465 uint64
  var x466 uint1
  x465, x466 = addcarryxU64(x423, x450, x464)
  var x467 uint64
  var x468 uint1
  x467, x468 = addcarryxU64(x425, x452, x466)
  var x469 uint64
  var x470 uint64
  x470, x469 = bits.Mul64(x453, 0x2341f27177344)
  var x471 uint64
  var x472 uint64
  x472, x471 = bits.Mul64(x453, 0x6cfc5fd681c52056)
  var x473 uint64
  var x474 uint64
  x474, x473 = bits.Mul64(x453, 0x7bc65c783158aea3)
  var x475 uint64
  var x476 uint64
  x476, x475 = bits.Mul64(x453, 0xfdc1767ae2ffffff)
  var x477 uint64
  var x478 uint64
  x478, x477 = bits.Mul64(x453, 0xffffffffffffffff)
  var x479 uint64
  var x480 uint64
  x480, x479 = bits.Mul64(x453, 0xffffffffffffffff)
  var x481 uint64
  var x482 uint64
  x482, x481 = bits.Mul64(x453, 0xffffffffffffffff)
  var x483 uint64
  var x484 uint1
  x483, x484 = addcarryxU64(x482, x479, 0x0)
  var x485 uint64
  var x486 uint1
  x485, x486 = addcarryxU64(x480, x477, x484)
  var x487 uint64
  var x488 uint1
  x487, x488 = addcarryxU64(x478, x475, x486)
  var x489 uint64
  var x490 uint1
  x489, x490 = addcarryxU64(x476, x473, x488)
  var x491 uint64
  var x492 uint1
  x491, x492 = addcarryxU64(x474, x471, x490)
  var x493 uint64
  var x494 uint1
  x493, x494 = addcarryxU64(x472, x469, x492)
  var x495 uint64 = (uint64(x494) + x470)
  var x497 uint1
  _, x497 = addcarryxU64(x453, x481, 0x0)
  var x498 uint64
  var x499 uint1
  x498, x499 = addcarryxU64(x455, x483, x497)
  var x500 uint64
  var x501 uint1
  x500, x501 = addcarryxU64(x457, x485, x499)
  var x502 uint64
  var x503 uint1
  x502, x503 = addcarryxU64(x459, x487, x501)
  var x504 uint64
  var x505 uint1
  x504, x505 = addcarryxU64(x461, x489, x503)
  var x506 uint64
  var x507 uint1
  x506, x507 = addcarryxU64(x463, x491, x505)
  var x508 uint64
  var x509 uint1
  x508, x509 = addcarryxU64(x465, x493, x507)
  var x510 uint64
  var x511 uint1
  x510, x511 = addcarryxU64(x467, x495, x509)
  var x512 uint64 = (uint64(x511) + uint64(x468))
  var x513 uint64
  var x514 uint64
  x514, x513 = bits.Mul64(x6, (arg1[6]))
  var x515 uint64
  var x516 uint64
  x516, x515 = bits.Mul64(x6, (arg1[5]))
  var x517 uint64
  var x518 uint64
  x518, x517 = bits.Mul64(x6, (arg1[4]))
  var x519 uint64
  var x520 uint64
  x520, x519 = bits.Mul64(x6, (arg1[3]))
  var x521 uint64
  var x522 uint64
  x522, x521 = bits.Mul64(x6, (arg1[2]))
  var x523 uint64
  var x524 uint64
  x524, x523 = bits.Mul64(x6, (arg1[1]))
  var x525 uint64
  var x526 uint64
  x526, x525 = bits.Mul64(x6, (arg1[0]))
  var x527 uint64
  var x528 uint1
  x527, x528 = addcarryxU64(x526, x523, 0x0)
  var x529 uint64
  var x530 uint1
  x529, x530 = addcarryxU64(x524, x521, x528)
  var x531 uint64
  var x532 uint1
  x531, x532 = addcarryxU64(x522, x519, x530)
  var x533 uint64
  var x534 uint1
  x533, x534 = addcarryxU64(x520, x517, x532)
  var x535 uint64
  var x536 uint1
  x535, x536 = addcarryxU64(x518, x515, x534)
  var x537 uint64
  var x538 uint1
  x537, x538 = addcarryxU64(x516, x513, x536)
  var x539 uint64 = (uint64(x538) + x514)
  var x540 uint64
  var x541 uint1
  x540, x541 = addcarryxU64(x498, x525, 0x0)
  var x542 uint64
  var x543 uint1
  x542, x543 = addcarryxU64(x500, x527, x541)
  var x544 uint64
  var x545 uint1
  x544, x545 = addcarryxU64(x502, x529, x543)
  var x546 uint64
  var x547 uint1
  x546, x547 = addcarryxU64(x504, x531, x545)
  var x548 uint64
  var x549 uint1
  x548, x549 = addcarryxU64(x506, x533, x547)
  var x550 uint64
  var x551 uint1
  x550, x551 = addcarryxU64(x508, x535, x549)
  var x552 uint64
  var x553 uint1
  x552, x553 = addcarryxU64(x510, x537, x551)
  var x554 uint64
  var x555 uint1
  x554, x555 = addcarryxU64(x512, x539, x553)
  var x556 uint64
  var x557 uint64
  x557, x556 = bits.Mul64(x540, 0x2341f27177344)
  var x558 uint64
  var x559 uint64
  x559, x558 = bits.Mul64(x540, 0x6cfc5fd681c52056)
  var x560 uint64
  var x561 uint64
  x561, x560 = bits.Mul64(x540, 0x7bc65c783158aea3)
  var x562 uint64
  var x563 uint64
  x563, x562 = bits.Mul64(x540, 0xfdc1767ae2ffffff)
  var x564 uint64
  var x565 uint64
  x565, x564 = bits.Mul64(x540, 0xffffffffffffffff)
  var x566 uint64
  var x567 uint64
  x567, x566 = bits.Mul64(x540, 0xffffffffffffffff)
  var x568 uint64
  var x569 uint64
  x569, x568 = bits.Mul64(x540, 0xffffffffffffffff)
  var x570 uint64
  var x571 uint1
  x570, x571 = addcarryxU64(x569, x566, 0x0)
  var x572 uint64
  var x573 uint1
  x572, x573 = addcarryxU64(x567, x564, x571)
  var x574 uint64
  var x575 uint1
  x574, x575 = addcarryxU64(x565, x562, x573)
  var x576 uint64
  var x577 uint1
  x576, x577 = addcarryxU64(x563, x560, x575)
  var x578 uint64
  var x579 uint1
  x578, x579 = addcarryxU64(x561, x558, x577)
  var x580 uint64
  var x581 uint1
  x580, x581 = addcarryxU64(x559, x556, x579)
  var x582 uint64 = (uint64(x581) + x557)
  var x584 uint1
  _, x584 = addcarryxU64(x540, x568, 0x0)
  var x585 uint64
  var x586 uint1
  x585, x586 = addcarryxU64(x542, x570, x584)
  var x587 uint64
  var x588 uint1
  x587, x588 = addcarryxU64(x544, x572, x586)
  var x589 uint64
  var x590 uint1
  x589, x590 = addcarryxU64(x546, x574, x588)
  var x591 uint64
  var x592 uint1
  x591, x592 = addcarryxU64(x548, x576, x590)
  var x593 uint64
  var x594 uint1
  x593, x594 = addcarryxU64(x550, x578, x592)
  var x595 uint64
  var x596 uint1
  x595, x596 = addcarryxU64(x552, x580, x594)
  var x597 uint64
  var x598 uint1
  x597, x598 = addcarryxU64(x554, x582, x596)
  var x599 uint64 = (uint64(x598) + uint64(x555))
  var x600 uint64
  var x601 uint1
  x600, x601 = subborrowxU64(x585, 0xffffffffffffffff, 0x0)
  var x602 uint64
  var x603 uint1
  x602, x603 = subborrowxU64(x587, 0xffffffffffffffff, x601)
  var x604 uint64
  var x605 uint1
  x604, x605 = subborrowxU64(x589, 0xffffffffffffffff, x603)
  var x606 uint64
  var x607 uint1
  x606, x607 = subborrowxU64(x591, 0xfdc1767ae2ffffff, x605)
  var x608 uint64
  var x609 uint1
  x608, x609 = subborrowxU64(x593, 0x7bc65c783158aea3, x607)
  var x610 uint64
  var x611 uint1
  x610, x611 = subborrowxU64(x595, 0x6cfc5fd681c52056, x609)
  var x612 uint64
  var x613 uint1
  x612, x613 = subborrowxU64(x597, 0x2341f27177344, x611)
  var x615 uint1
  _, x615 = subborrowxU64(x599, uint64(0x0), x613)
  var x616 uint64
  cmovznzU64(&x616, x615, x600, x585)
  var x617 uint64
  cmovznzU64(&x617, x615, x602, x587)
  var x618 uint64
  cmovznzU64(&x618, x615, x604, x589)
  var x619 uint64
  cmovznzU64(&x619, x615, x606, x591)
  var x620 uint64
  cmovznzU64(&x620, x615, x608, x593)
  var x621 uint64
  cmovznzU64(&x621, x615, x610, x595)
  var x622 uint64
  cmovznzU64(&x622, x615, x612, x597)
  out1[0] = x616
  out1[1] = x617
  out1[2] = x618
  out1[3] = x619
  out1[4] = x620
  out1[5] = x621
  out1[6] = x622
}

/*
 * The function Add adds two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func Add(out1 *[7]uint64, arg1 *[7]uint64, arg2 *[7]uint64) {
  var x1 uint64
  var x2 uint1
  x1, x2 = addcarryxU64((arg1[0]), (arg2[0]), 0x0)
  var x3 uint64
  var x4 uint1
  x3, x4 = addcarryxU64((arg1[1]), (arg2[1]), x2)
  var x5 uint64
  var x6 uint1
  x5, x6 = addcarryxU64((arg1[2]), (arg2[2]), x4)
  var x7 uint64
  var x8 uint1
  x7, x8 = addcarryxU64((arg1[3]), (arg2[3]), x6)
  var x9 uint64
  var x10 uint1
  x9, x10 = addcarryxU64((arg1[4]), (arg2[4]), x8)
  var x11 uint64
  var x12 uint1
  x11, x12 = addcarryxU64((arg1[5]), (arg2[5]), x10)
  var x13 uint64
  var x14 uint1
  x13, x14 = addcarryxU64((arg1[6]), (arg2[6]), x12)
  var x15 uint64
  var x16 uint1
  x15, x16 = subborrowxU64(x1, 0xffffffffffffffff, 0x0)
  var x17 uint64
  var x18 uint1
  x17, x18 = subborrowxU64(x3, 0xffffffffffffffff, x16)
  var x19 uint64
  var x20 uint1
  x19, x20 = subborrowxU64(x5, 0xffffffffffffffff, x18)
  var x21 uint64
  var x22 uint1
  x21, x22 = subborrowxU64(x7, 0xfdc1767ae2ffffff, x20)
  var x23 uint64
  var x24 uint1
  x23, x24 = subborrowxU64(x9, 0x7bc65c783158aea3, x22)
  var x25 uint64
  var x26 uint1
  x25, x26 = subborrowxU64(x11, 0x6cfc5fd681c52056, x24)
  var x27 uint64
  var x28 uint1
  x27, x28 = subborrowxU64(x13, 0x2341f27177344, x26)
  var x30 uint1
  _, x30 = subborrowxU64(uint64(x14), uint64(0x0), x28)
  var x31 uint64
  cmovznzU64(&x31, x30, x15, x1)
  var x32 uint64
  cmovznzU64(&x32, x30, x17, x3)
  var x33 uint64
  cmovznzU64(&x33, x30, x19, x5)
  var x34 uint64
  cmovznzU64(&x34, x30, x21, x7)
  var x35 uint64
  cmovznzU64(&x35, x30, x23, x9)
  var x36 uint64
  cmovznzU64(&x36, x30, x25, x11)
  var x37 uint64
  cmovznzU64(&x37, x30, x27, x13)
  out1[0] = x31
  out1[1] = x32
  out1[2] = x33
  out1[3] = x34
  out1[4] = x35
  out1[5] = x36
  out1[6] = x37
}

/*
 * The function Sub subtracts two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func Sub(out1 *[7]uint64, arg1 *[7]uint64, arg2 *[7]uint64) {
  var x1 uint64
  var x2 uint1
  x1, x2 = subborrowxU64((arg1[0]), (arg2[0]), 0x0)
  var x3 uint64
  var x4 uint1
  x3, x4 = subborrowxU64((arg1[1]), (arg2[1]), x2)
  var x5 uint64
  var x6 uint1
  x5, x6 = subborrowxU64((arg1[2]), (arg2[2]), x4)
  var x7 uint64
  var x8 uint1
  x7, x8 = subborrowxU64((arg1[3]), (arg2[3]), x6)
  var x9 uint64
  var x10 uint1
  x9, x10 = subborrowxU64((arg1[4]), (arg2[4]), x8)
  var x11 uint64
  var x12 uint1
  x11, x12 = subborrowxU64((arg1[5]), (arg2[5]), x10)
  var x13 uint64
  var x14 uint1
  x13, x14 = subborrowxU64((arg1[6]), (arg2[6]), x12)
  var x15 uint64
  cmovznzU64(&x15, x14, uint64(0x0), 0xffffffffffffffff)
  var x16 uint64
  var x17 uint1
  x16, x17 = addcarryxU64(x1, x15, 0x0)
  var x18 uint64
  var x19 uint1
  x18, x19 = addcarryxU64(x3, x15, x17)
  var x20 uint64
  var x21 uint1
  x20, x21 = addcarryxU64(x5, x15, x19)
  var x22 uint64
  var x23 uint1
  x22, x23 = addcarryxU64(x7, (x15 & 0xfdc1767ae2ffffff), x21)
  var x24 uint64
  var x25 uint1
  x24, x25 = addcarryxU64(x9, (x15 & 0x7bc65c783158aea3), x23)
  var x26 uint64
  var x27 uint1
  x26, x27 = addcarryxU64(x11, (x15 & 0x6cfc5fd681c52056), x25)
  var x28 uint64
  x28, _ = addcarryxU64(x13, (x15 & 0x2341f27177344), x27)
  out1[0] = x16
  out1[1] = x18
  out1[2] = x20
  out1[3] = x22
  out1[4] = x24
  out1[5] = x26
  out1[6] = x28
}

/*
 * The function Opp negates a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func Opp(out1 *[7]uint64, arg1 *[7]uint64) {
  var x1 uint64
  var x2 uint1
  x1, x2 = subborrowxU64(uint64(0x0), (arg1[0]), 0x0)
  var x3 uint64
  var x4 uint1
  x3, x4 = subborrowxU64(uint64(0x0), (arg1[1]), x2)
  var x5 uint64
  var x6 uint1
  x5, x6 = subborrowxU64(uint64(0x0), (arg1[2]), x4)
  var x7 uint64
  var x8 uint1
  x7, x8 = subborrowxU64(uint64(0x0), (arg1[3]), x6)
  var x9 uint64
  var x10 uint1
  x9, x10 = subborrowxU64(uint64(0x0), (arg1[4]), x8)
  var x11 uint64
  var x12 uint1
  x11, x12 = subborrowxU64(uint64(0x0), (arg1[5]), x10)
  var x13 uint64
  var x14 uint1
  x13, x14 = subborrowxU64(uint64(0x0), (arg1[6]), x12)
  var x15 uint64
  cmovznzU64(&x15, x14, uint64(0x0), 0xffffffffffffffff)
  var x16 uint64
  var x17 uint1
  x16, x17 = addcarryxU64(x1, x15, 0x0)
  var x18 uint64
  var x19 uint1
  x18, x19 = addcarryxU64(x3, x15, x17)
  var x20 uint64
  var x21 uint1
  x20, x21 = addcarryxU64(x5, x15, x19)
  var x22 uint64
  var x23 uint1
  x22, x23 = addcarryxU64(x7, (x15 & 0xfdc1767ae2ffffff), x21)
  var x24 uint64
  var x25 uint1
  x24, x25 = addcarryxU64(x9, (x15 & 0x7bc65c783158aea3), x23)
  var x26 uint64
  var x27 uint1
  x26, x27 = addcarryxU64(x11, (x15 & 0x6cfc5fd681c52056), x25)
  var x28 uint64
  x28, _ = addcarryxU64(x13, (x15 & 0x2341f27177344), x27)
  out1[0] = x16
  out1[1] = x18
  out1[2] = x20
  out1[3] = x22
  out1[4] = x24
  out1[5] = x26
  out1[6] = x28
}

/*
 * The function FromMontgomery translates a field element out of the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = (eval arg1 * ((2^64)⁻¹ mod m)^7) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func FromMontgomery(out1 *[7]uint64, arg1 *[7]uint64) {
  var x1 uint64 = (arg1[0])
  var x2 uint64
  var x3 uint64
  x3, x2 = bits.Mul64(x1, 0x2341f27177344)
  var x4 uint64
  var x5 uint64
  x5, x4 = bits.Mul64(x1, 0x6cfc5fd681c52056)
  var x6 uint64
  var x7 uint64
  x7, x6 = bits.Mul64(x1, 0x7bc65c783158aea3)
  var x8 uint64
  var x9 uint64
  x9, x8 = bits.Mul64(x1, 0xfdc1767ae2ffffff)
  var x10 uint64
  var x11 uint64
  x11, x10 = bits.Mul64(x1, 0xffffffffffffffff)
  var x12 uint64
  var x13 uint64
  x13, x12 = bits.Mul64(x1, 0xffffffffffffffff)
  var x14 uint64
  var x15 uint64
  x15, x14 = bits.Mul64(x1, 0xffffffffffffffff)
  var x16 uint64
  var x17 uint1
  x16, x17 = addcarryxU64(x15, x12, 0x0)
  var x18 uint64
  var x19 uint1
  x18, x19 = addcarryxU64(x13, x10, x17)
  var x20 uint64
  var x21 uint1
  x20, x21 = addcarryxU64(x11, x8, x19)
  var x22 uint64
  var x23 uint1
  x22, x23 = addcarryxU64(x9, x6, x21)
  var x24 uint64
  var x25 uint1
  x24, x25 = addcarryxU64(x7, x4, x23)
  var x26 uint64
  var x27 uint1
  x26, x27 = addcarryxU64(x5, x2, x25)
  var x29 uint1
  _, x29 = addcarryxU64(x1, x14, 0x0)
  var x30 uint64
  var x31 uint1
  x30, x31 = addcarryxU64(uint64(0x0), x16, x29)
  var x32 uint64
  var x33 uint1
  x32, x33 = addcarryxU64(uint64(0x0), x18, x31)
  var x34 uint64
  var x35 uint1
  x34, x35 = addcarryxU64(uint64(0x0), x20, x33)
  var x36 uint64
  var x37 uint1
  x36, x37 = addcarryxU64(uint64(0x0), x22, x35)
  var x38 uint64
  var x39 uint1
  x38, x39 = addcarryxU64(uint64(0x0), x24, x37)
  var x40 uint64
  var x41 uint1
  x40, x41 = addcarryxU64(uint64(0x0), x26, x39)
  var x42 uint64
  var x43 uint1
  x42, x43 = addcarryxU64(x30, (arg1[1]), 0x0)
  var x44 uint64
  var x45 uint1
  x44, x45 = addcarryxU64(x32, uint64(0x0), x43)
  var x46 uint64
  var x47 uint1
  x46, x47 = addcarryxU64(x34, uint64(0x0), x45)
  var x48 uint64
  var x49 uint1
  x48, x49 = addcarryxU64(x36, uint64(0x0), x47)
  var x50 uint64
  var x51 uint1
  x50, x51 = addcarryxU64(x38, uint64(0x0), x49)
  var x52 uint64
  var x53 uint1
  x52, x53 = addcarryxU64(x40, uint64(0x0), x51)
  var x54 uint64
  var x55 uint64
  x55, x54 = bits.Mul64(x42, 0x2341f27177344)
  var x56 uint64
  var x57 uint64
  x57, x56 = bits.Mul64(x42, 0x6cfc5fd681c52056)
  var x58 uint64
  var x59 uint64
  x59, x58 = bits.Mul64(x42, 0x7bc65c783158aea3)
  var x60 uint64
  var x61 uint64
  x61, x60 = bits.Mul64(x42, 0xfdc1767ae2ffffff)
  var x62 uint64
  var x63 uint64
  x63, x62 = bits.Mul64(x42, 0xffffffffffffffff)
  var x64 uint64
  var x65 uint64
  x65, x64 = bits.Mul64(x42, 0xffffffffffffffff)
  var x66 uint64
  var x67 uint64
  x67, x66 = bits.Mul64(x42, 0xffffffffffffffff)
  var x68 uint64
  var x69 uint1
  x68, x69 = addcarryxU64(x67, x64, 0x0)
  var x70 uint64
  var x71 uint1
  x70, x71 = addcarryxU64(x65, x62, x69)
  var x72 uint64
  var x73 uint1
  x72, x73 = addcarryxU64(x63, x60, x71)
  var x74 uint64
  var x75 uint1
  x74, x75 = addcarryxU64(x61, x58, x73)
  var x76 uint64
  var x77 uint1
  x76, x77 = addcarryxU64(x59, x56, x75)
  var x78 uint64
  var x79 uint1
  x78, x79 = addcarryxU64(x57, x54, x77)
  var x81 uint1
  _, x81 = addcarryxU64(x42, x66, 0x0)
  var x82 uint64
  var x83 uint1
  x82, x83 = addcarryxU64(x44, x68, x81)
  var x84 uint64
  var x85 uint1
  x84, x85 = addcarryxU64(x46, x70, x83)
  var x86 uint64
  var x87 uint1
  x86, x87 = addcarryxU64(x48, x72, x85)
  var x88 uint64
  var x89 uint1
  x88, x89 = addcarryxU64(x50, x74, x87)
  var x90 uint64
  var x91 uint1
  x90, x91 = addcarryxU64(x52, x76, x89)
  var x92 uint64
  var x93 uint1
  x92, x93 = addcarryxU64((uint64(x53) + (uint64(x41) + (uint64(x27) + x3))), x78, x91)
  var x94 uint64
  var x95 uint1
  x94, x95 = addcarryxU64(x82, (arg1[2]), 0x0)
  var x96 uint64
  var x97 uint1
  x96, x97 = addcarryxU64(x84, uint64(0x0), x95)
  var x98 uint64
  var x99 uint1
  x98, x99 = addcarryxU64(x86, uint64(0x0), x97)
  var x100 uint64
  var x101 uint1
  x100, x101 = addcarryxU64(x88, uint64(0x0), x99)
  var x102 uint64
  var x103 uint1
  x102, x103 = addcarryxU64(x90, uint64(0x0), x101)
  var x104 uint64
  var x105 uint1
  x104, x105 = addcarryxU64(x92, uint64(0x0), x103)
  var x106 uint64
  var x107 uint64
  x107, x106 = bits.Mul64(x94, 0x2341f27177344)
  var x108 uint64
  var x109 uint64
  x109, x108 = bits.Mul64(x94, 0x6cfc5fd681c52056)
  var x110 uint64
  var x111 uint64
  x111, x110 = bits.Mul64(x94, 0x7bc65c783158aea3)
  var x112 uint64
  var x113 uint64
  x113, x112 = bits.Mul64(x94, 0xfdc1767ae2ffffff)
  var x114 uint64
  var x115 uint64
  x115, x114 = bits.Mul64(x94, 0xffffffffffffffff)
  var x116 uint64
  var x117 uint64
  x117, x116 = bits.Mul64(x94, 0xffffffffffffffff)
  var x118 uint64
  var x119 uint64
  x119, x118 = bits.Mul64(x94, 0xffffffffffffffff)
  var x120 uint64
  var x121 uint1
  x120, x121 = addcarryxU64(x119, x116, 0x0)
  var x122 uint64
  var x123 uint1
  x122, x123 = addcarryxU64(x117, x114, x121)
  var x124 uint64
  var x125 uint1
  x124, x125 = addcarryxU64(x115, x112, x123)
  var x126 uint64
  var x127 uint1
  x126, x127 = addcarryxU64(x113, x110, x125)
  var x128 uint64
  var x129 uint1
  x128, x129 = addcarryxU64(x111, x108, x127)
  var x130 uint64
  var x131 uint1
  x130, x131 = addcarryxU64(x109, x106, x129)
  var x133 uint1
  _, x133 = addcarryxU64(x94, x118, 0x0)
  var x134 uint64
  var x135 uint1
  x134, x135 = addcarryxU64(x96, x120, x133)
  var x136 uint64
  var x137 uint1
  x136, x137 = addcarryxU64(x98, x122, x135)
  var x138 uint64
  var x139 uint1
  x138, x139 = addcarryxU64(x100, x124, x137)
  var x140 uint64
  var x141 uint1
  x140, x141 = addcarryxU64(x102, x126, x139)
  var x142 uint64
  var x143 uint1
  x142, x143 = addcarryxU64(x104, x128, x141)
  var x144 uint64
  var x145 uint1
  x144, x145 = addcarryxU64((uint64(x105) + (uint64(x93) + (uint64(x79) + x55))), x130, x143)
  var x146 uint64
  var x147 uint1
  x146, x147 = addcarryxU64(x134, (arg1[3]), 0x0)
  var x148 uint64
  var x149 uint1
  x148, x149 = addcarryxU64(x136, uint64(0x0), x147)
  var x150 uint64
  var x151 uint1
  x150, x151 = addcarryxU64(x138, uint64(0x0), x149)
  var x152 uint64
  var x153 uint1
  x152, x153 = addcarryxU64(x140, uint64(0x0), x151)
  var x154 uint64
  var x155 uint1
  x154, x155 = addcarryxU64(x142, uint64(0x0), x153)
  var x156 uint64
  var x157 uint1
  x156, x157 = addcarryxU64(x144, uint64(0x0), x155)
  var x158 uint64
  var x159 uint64
  x159, x158 = bits.Mul64(x146, 0x2341f27177344)
  var x160 uint64
  var x161 uint64
  x161, x160 = bits.Mul64(x146, 0x6cfc5fd681c52056)
  var x162 uint64
  var x163 uint64
  x163, x162 = bits.Mul64(x146, 0x7bc65c783158aea3)
  var x164 uint64
  var x165 uint64
  x165, x164 = bits.Mul64(x146, 0xfdc1767ae2ffffff)
  var x166 uint64
  var x167 uint64
  x167, x166 = bits.Mul64(x146, 0xffffffffffffffff)
  var x168 uint64
  var x169 uint64
  x169, x168 = bits.Mul64(x146, 0xffffffffffffffff)
  var x170 uint64
  var x171 uint64
  x171, x170 = bits.Mul64(x146, 0xffffffffffffffff)
  var x172 uint64
  var x173 uint1
  x172, x173 = addcarryxU64(x171, x168, 0x0)
  var x174 uint64
  var x175 uint1
  x174, x175 = addcarryxU64(x169, x166, x173)
  var x176 uint64
  var x177 uint1
  x176, x177 = addcarryxU64(x167, x164, x175)
  var x178 uint64
  var x179 uint1
  x178, x179 = addcarryxU64(x165, x162, x177)
  var x180 uint64
  var x181 uint1
  x180, x181 = addcarryxU64(x163, x160, x179)
  var x182 uint64
  var x183 uint1
  x182, x183 = addcarryxU64(x161, x158, x181)
  var x185 uint1
  _, x185 = addcarryxU64(x146, x170, 0x0)
  var x186 uint64
  var x187 uint1
  x186, x187 = addcarryxU64(x148, x172, x185)
  var x188 uint64
  var x189 uint1
  x188, x189 = addcarryxU64(x150, x174, x187)
  var x190 uint64
  var x191 uint1
  x190, x191 = addcarryxU64(x152, x176, x189)
  var x192 uint64
  var x193 uint1
  x192, x193 = addcarryxU64(x154, x178, x191)
  var x194 uint64
  var x195 uint1
  x194, x195 = addcarryxU64(x156, x180, x193)
  var x196 uint64
  var x197 uint1
  x196, x197 = addcarryxU64((uint64(x157) + (uint64(x145) + (uint64(x131) + x107))), x182, x195)
  var x198 uint64
  var x199 uint1
  x198, x199 = addcarryxU64(x186, (arg1[4]), 0x0)
  var x200 uint64
  var x201 uint1
  x200, x201 = addcarryxU64(x188, uint64(0x0), x199)
  var x202 uint64
  var x203 uint1
  x202, x203 = addcarryxU64(x190, uint64(0x0), x201)
  var x204 uint64
  var x205 uint1
  x204, x205 = addcarryxU64(x192, uint64(0x0), x203)
  var x206 uint64
  var x207 uint1
  x206, x207 = addcarryxU64(x194, uint64(0x0), x205)
  var x208 uint64
  var x209 uint1
  x208, x209 = addcarryxU64(x196, uint64(0x0), x207)
  var x210 uint64
  var x211 uint64
  x211, x210 = bits.Mul64(x198, 0x2341f27177344)
  var x212 uint64
  var x213 uint64
  x213, x212 = bits.Mul64(x198, 0x6cfc5fd681c52056)
  var x214 uint64
  var x215 uint64
  x215, x214 = bits.Mul64(x198, 0x7bc65c783158aea3)
  var x216 uint64
  var x217 uint64
  x217, x216 = bits.Mul64(x198, 0xfdc1767ae2ffffff)
  var x218 uint64
  var x219 uint64
  x219, x218 = bits.Mul64(x198, 0xffffffffffffffff)
  var x220 uint64
  var x221 uint64
  x221, x220 = bits.Mul64(x198, 0xffffffffffffffff)
  var x222 uint64
  var x223 uint64
  x223, x222 = bits.Mul64(x198, 0xffffffffffffffff)
  var x224 uint64
  var x225 uint1
  x224, x225 = addcarryxU64(x223, x220, 0x0)
  var x226 uint64
  var x227 uint1
  x226, x227 = addcarryxU64(x221, x218, x225)
  var x228 uint64
  var x229 uint1
  x228, x229 = addcarryxU64(x219, x216, x227)
  var x230 uint64
  var x231 uint1
  x230, x231 = addcarryxU64(x217, x214, x229)
  var x232 uint64
  var x233 uint1
  x232, x233 = addcarryxU64(x215, x212, x231)
  var x234 uint64
  var x235 uint1
  x234, x235 = addcarryxU64(x213, x210, x233)
  var x237 uint1
  _, x237 = addcarryxU64(x198, x222, 0x0)
  var x238 uint64
  var x239 uint1
  x238, x239 = addcarryxU64(x200, x224, x237)
  var x240 uint64
  var x241 uint1
  x240, x241 = addcarryxU64(x202, x226, x239)
  var x242 uint64
  var x243 uint1
  x242, x243 = addcarryxU64(x204, x228, x241)
  var x244 uint64
  var x245 uint1
  x244, x245 = addcarryxU64(x206, x230, x243)
  var x246 uint64
  var x247 uint1
  x246, x247 = addcarryxU64(x208, x232, x245)
  var x248 uint64
  var x249 uint1
  x248, x249 = addcarryxU64((uint64(x209) + (uint64(x197) + (uint64(x183) + x159))), x234, x247)
  var x250 uint64
  var x251 uint1
  x250, x251 = addcarryxU64(x238, (arg1[5]), 0x0)
  var x252 uint64
  var x253 uint1
  x252, x253 = addcarryxU64(x240, uint64(0x0), x251)
  var x254 uint64
  var x255 uint1
  x254, x255 = addcarryxU64(x242, uint64(0x0), x253)
  var x256 uint64
  var x257 uint1
  x256, x257 = addcarryxU64(x244, uint64(0x0), x255)
  var x258 uint64
  var x259 uint1
  x258, x259 = addcarryxU64(x246, uint64(0x0), x257)
  var x260 uint64
  var x261 uint1
  x260, x261 = addcarryxU64(x248, uint64(0x0), x259)
  var x262 uint64
  var x263 uint64
  x263, x262 = bits.Mul64(x250, 0x2341f27177344)
  var x264 uint64
  var x265 uint64
  x265, x264 = bits.Mul64(x250, 0x6cfc5fd681c52056)
  var x266 uint64
  var x267 uint64
  x267, x266 = bits.Mul64(x250, 0x7bc65c783158aea3)
  var x268 uint64
  var x269 uint64
  x269, x268 = bits.Mul64(x250, 0xfdc1767ae2ffffff)
  var x270 uint64
  var x271 uint64
  x271, x270 = bits.Mul64(x250, 0xffffffffffffffff)
  var x272 uint64
  var x273 uint64
  x273, x272 = bits.Mul64(x250, 0xffffffffffffffff)
  var x274 uint64
  var x275 uint64
  x275, x274 = bits.Mul64(x250, 0xffffffffffffffff)
  var x276 uint64
  var x277 uint1
  x276, x277 = addcarryxU64(x275, x272, 0x0)
  var x278 uint64
  var x279 uint1
  x278, x279 = addcarryxU64(x273, x270, x277)
  var x280 uint64
  var x281 uint1
  x280, x281 = addcarryxU64(x271, x268, x279)
  var x282 uint64
  var x283 uint1
  x282, x283 = addcarryxU64(x269, x266, x281)
  var x284 uint64
  var x285 uint1
  x284, x285 = addcarryxU64(x267, x264, x283)
  var x286 uint64
  var x287 uint1
  x286, x287 = addcarryxU64(x265, x262, x285)
  var x289 uint1
  _, x289 = addcarryxU64(x250, x274, 0x0)
  var x290 uint64
  var x291 uint1
  x290, x291 = addcarryxU64(x252, x276, x289)
  var x292 uint64
  var x293 uint1
  x292, x293 = addcarryxU64(x254, x278, x291)
  var x294 uint64
  var x295 uint1
  x294, x295 = addcarryxU64(x256, x280, x293)
  var x296 uint64
  var x297 uint1
  x296, x297 = addcarryxU64(x258, x282, x295)
  var x298 uint64
  var x299 uint1
  x298, x299 = addcarryxU64(x260, x284, x297)
  var x300 uint64
  var x301 uint1
  x300, x301 = addcarryxU64((uint64(x261) + (uint64(x249) + (uint64(x235) + x211))), x286, x299)
  var x302 uint64
  var x303 uint1
  x302, x303 = addcarryxU64(x290, (arg1[6]), 0x0)
  var x304 uint64
  var x305 uint1
  x304, x305 = addcarryxU64(x292, uint64(0x0), x303)
  var x306 uint64
  var x307 uint1
  x306, x307 = addcarryxU64(x294, uint64(0x0), x305)
  var x308 uint64
  var x309 uint1
  x308, x309 = addcarryxU64(x296, uint64(0x0), x307)
  var x310 uint64
  var x311 uint1
  x310, x311 = addcarryxU64(x298, uint64(0x0), x309)
  var x312 uint64
  var x313 uint1
  x312, x313 = addcarryxU64(x300, uint64(0x0), x311)
  var x314 uint64
  var x315 uint64
  x315, x314 = bits.Mul64(x302, 0x2341f27177344)
  var x316 uint64
  var x317 uint64
  x317, x316 = bits.Mul64(x302, 0x6cfc5fd681c52056)
  var x318 uint64
  var x319 uint64
  x319, x318 = bits.Mul64(x302, 0x7bc65c783158aea3)
  var x320 uint64
  var x321 uint64
  x321, x320 = bits.Mul64(x302, 0xfdc1767ae2ffffff)
  var x322 uint64
  var x323 uint64
  x323, x322 = bits.Mul64(x302, 0xffffffffffffffff)
  var x324 uint64
  var x325 uint64
  x325, x324 = bits.Mul64(x302, 0xffffffffffffffff)
  var x326 uint64
  var x327 uint64
  x327, x326 = bits.Mul64(x302, 0xffffffffffffffff)
  var x328 uint64
  var x329 uint1
  x328, x329 = addcarryxU64(x327, x324, 0x0)
  var x330 uint64
  var x331 uint1
  x330, x331 = addcarryxU64(x325, x322, x329)
  var x332 uint64
  var x333 uint1
  x332, x333 = addcarryxU64(x323, x320, x331)
  var x334 uint64
  var x335 uint1
  x334, x335 = addcarryxU64(x321, x318, x333)
  var x336 uint64
  var x337 uint1
  x336, x337 = addcarryxU64(x319, x316, x335)
  var x338 uint64
  var x339 uint1
  x338, x339 = addcarryxU64(x317, x314, x337)
  var x341 uint1
  _, x341 = addcarryxU64(x302, x326, 0x0)
  var x342 uint64
  var x343 uint1
  x342, x343 = addcarryxU64(x304, x328, x341)
  var x344 uint64
  var x345 uint1
  x344, x345 = addcarryxU64(x306, x330, x343)
  var x346 uint64
  var x347 uint1
  x346, x347 = addcarryxU64(x308, x332, x345)
  var x348 uint64
  var x349 uint1
  x348, x349 = addcarryxU64(x310, x334, x347)
  var x350 uint64
  var x351 uint1
  x350, x351 = addcarryxU64(x312, x336, x349)
  var x352 uint64
  var x353 uint1
  x352, x353 = addcarryxU64((uint64(x313) + (uint64(x301) + (uint64(x287) + x263))), x338, x351)
  var x354 uint64 = (uint64(x353) + (uint64(x339) + x315))
  var x355 uint64
  var x356 uint1
  x355, x356 = subborrowxU64(x342, 0xffffffffffffffff, 0x0)
  var x357 uint64
  var x358 uint1
  x357, x358 = subborrowxU64(x344, 0xffffffffffffffff, x356)
  var x359 uint64
  var x360 uint1
  x359, x360 = subborrowxU64(x346, 0xffffffffffffffff, x358)
  var x361 uint64
  var x362 uint1
  x361, x362 = subborrowxU64(x348, 0xfdc1767ae2ffffff, x360)
  var x363 uint64
  var x364 uint1
  x363, x364 = subborrowxU64(x350, 0x7bc65c783158aea3, x362)
  var x365 uint64
  var x366 uint1
  x365, x366 = subborrowxU64(x352, 0x6cfc5fd681c52056, x364)
  var x367 uint64
  var x368 uint1
  x367, x368 = subborrowxU64(x354, 0x2341f27177344, x366)
  var x370 uint1
  _, x370 = subborrowxU64(uint64(0x0), uint64(0x0), x368)
  var x371 uint64
  cmovznzU64(&x371, x370, x355, x342)
  var x372 uint64
  cmovznzU64(&x372, x370, x357, x344)
  var x373 uint64
  cmovznzU64(&x373, x370, x359, x346)
  var x374 uint64
  cmovznzU64(&x374, x370, x361, x348)
  var x375 uint64
  cmovznzU64(&x375, x370, x363, x350)
  var x376 uint64
  cmovznzU64(&x376, x370, x365, x352)
  var x377 uint64
  cmovznzU64(&x377, x370, x367, x354)
  out1[0] = x371
  out1[1] = x372
  out1[2] = x373
  out1[3] = x374
  out1[4] = x375
  out1[5] = x376
  out1[6] = x377
}

/*
 * The function ToMontgomery translates a field element into the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = eval arg1 mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func ToMontgomery(out1 *[7]uint64, arg1 *[7]uint64) {
  var x1 uint64 = (arg1[1])
  var x2 uint64 = (arg1[2])
  var x3 uint64 = (arg1[3])
  var x4 uint64 = (arg1[4])
  var x5 uint64 = (arg1[5])
  var x6 uint64 = (arg1[6])
  var x7 uint64 = (arg1[0])
  var x8 uint64
  var x9 uint64
  x9, x8 = bits.Mul64(x7, 0x25a89bcdd12a)
  var x10 uint64
  var x11 uint64
  x11, x10 = bits.Mul64(x7, 0x69e16a61c7686d9a)
  var x12 uint64
  var x13 uint64
  x13, x12 = bits.Mul64(x7, 0xabcd92bf2dde347e)
  var x14 uint64
  var x15 uint64
  x15, x14 = bits.Mul64(x7, 0x175cc6af8d6c7c0b)
  var x16 uint64
  var x17 uint64
  x17, x16 = bits.Mul64(x7, 0xab27973f8311688d)
  var x18 uint64
  var x19 uint64
  x19, x18 = bits.Mul64(x7, 0xacec7367768798c2)
  var x20 uint64
  var x21 uint64
  x21, x20 = bits.Mul64(x7, 0x28e55b65dcd69b30)
  var x22 uint64
  var x23 uint1
  x22, x23 = addcarryxU64(x21, x18, 0x0)
  var x24 uint64
  var x25 uint1
  x24, x25 = addcarryxU64(x19, x16, x23)
  var x26 uint64
  var x27 uint1
  x26, x27 = addcarryxU64(x17, x14, x25)
  var x28 uint64
  var x29 uint1
  x28, x29 = addcarryxU64(x15, x12, x27)
  var x30 uint64
  var x31 uint1
  x30, x31 = addcarryxU64(x13, x10, x29)
  var x32 uint64
  var x33 uint1
  x32, x33 = addcarryxU64(x11, x8, x31)
  var x34 uint64
  var x35 uint64
  x35, x34 = bits.Mul64(x20, 0x2341f27177344)
  var x36 uint64
  var x37 uint64
  x37, x36 = bits.Mul64(x20, 0x6cfc5fd681c52056)
  var x38 uint64
  var x39 uint64
  x39, x38 = bits.Mul64(x20, 0x7bc65c783158aea3)
  var x40 uint64
  var x41 uint64
  x41, x40 = bits.Mul64(x20, 0xfdc1767ae2ffffff)
  var x42 uint64
  var x43 uint64
  x43, x42 = bits.Mul64(x20, 0xffffffffffffffff)
  var x44 uint64
  var x45 uint64
  x45, x44 = bits.Mul64(x20, 0xffffffffffffffff)
  var x46 uint64
  var x47 uint64
  x47, x46 = bits.Mul64(x20, 0xffffffffffffffff)
  var x48 uint64
  var x49 uint1
  x48, x49 = addcarryxU64(x47, x44, 0x0)
  var x50 uint64
  var x51 uint1
  x50, x51 = addcarryxU64(x45, x42, x49)
  var x52 uint64
  var x53 uint1
  x52, x53 = addcarryxU64(x43, x40, x51)
  var x54 uint64
  var x55 uint1
  x54, x55 = addcarryxU64(x41, x38, x53)
  var x56 uint64
  var x57 uint1
  x56, x57 = addcarryxU64(x39, x36, x55)
  var x58 uint64
  var x59 uint1
  x58, x59 = addcarryxU64(x37, x34, x57)
  var x61 uint1
  _, x61 = addcarryxU64(x20, x46, 0x0)
  var x62 uint64
  var x63 uint1
  x62, x63 = addcarryxU64(x22, x48, x61)
  var x64 uint64
  var x65 uint1
  x64, x65 = addcarryxU64(x24, x50, x63)
  var x66 uint64
  var x67 uint1
  x66, x67 = addcarryxU64(x26, x52, x65)
  var x68 uint64
  var x69 uint1
  x68, x69 = addcarryxU64(x28, x54, x67)
  var x70 uint64
  var x71 uint1
  x70, x71 = addcarryxU64(x30, x56, x69)
  var x72 uint64
  var x73 uint1
  x72, x73 = addcarryxU64(x32, x58, x71)
  var x74 uint64
  var x75 uint64
  x75, x74 = bits.Mul64(x1, 0x25a89bcdd12a)
  var x76 uint64
  var x77 uint64
  x77, x76 = bits.Mul64(x1, 0x69e16a61c7686d9a)
  var x78 uint64
  var x79 uint64
  x79, x78 = bits.Mul64(x1, 0xabcd92bf2dde347e)
  var x80 uint64
  var x81 uint64
  x81, x80 = bits.Mul64(x1, 0x175cc6af8d6c7c0b)
  var x82 uint64
  var x83 uint64
  x83, x82 = bits.Mul64(x1, 0xab27973f8311688d)
  var x84 uint64
  var x85 uint64
  x85, x84 = bits.Mul64(x1, 0xacec7367768798c2)
  var x86 uint64
  var x87 uint64
  x87, x86 = bits.Mul64(x1, 0x28e55b65dcd69b30)
  var x88 uint64
  var x89 uint1
  x88, x89 = addcarryxU64(x87, x84, 0x0)
  var x90 uint64
  var x91 uint1
  x90, x91 = addcarryxU64(x85, x82, x89)
  var x92 uint64
  var x93 uint1
  x92, x93 = addcarryxU64(x83, x80, x91)
  var x94 uint64
  var x95 uint1
  x94, x95 = addcarryxU64(x81, x78, x93)
  var x96 uint64
  var x97 uint1
  x96, x97 = addcarryxU64(x79, x76, x95)
  var x98 uint64
  var x99 uint1
  x98, x99 = addcarryxU64(x77, x74, x97)
  var x100 uint64
  var x101 uint1
  x100, x101 = addcarryxU64(x62, x86, 0x0)
  var x102 uint64
  var x103 uint1
  x102, x103 = addcarryxU64(x64, x88, x101)
  var x104 uint64
  var x105 uint1
  x104, x105 = addcarryxU64(x66, x90, x103)
  var x106 uint64
  var x107 uint1
  x106, x107 = addcarryxU64(x68, x92, x105)
  var x108 uint64
  var x109 uint1
  x108, x109 = addcarryxU64(x70, x94, x107)
  var x110 uint64
  var x111 uint1
  x110, x111 = addcarryxU64(x72, x96, x109)
  var x112 uint64
  var x113 uint1
  x112, x113 = addcarryxU64(((uint64(x73) + (uint64(x33) + x9)) + (uint64(x59) + x35)), x98, x111)
  var x114 uint64
  var x115 uint64
  x115, x114 = bits.Mul64(x100, 0x2341f27177344)
  var x116 uint64
  var x117 uint64
  x117, x116 = bits.Mul64(x100, 0x6cfc5fd681c52056)
  var x118 uint64
  var x119 uint64
  x119, x118 = bits.Mul64(x100, 0x7bc65c783158aea3)
  var x120 uint64
  var x121 uint64
  x121, x120 = bits.Mul64(x100, 0xfdc1767ae2ffffff)
  var x122 uint64
  var x123 uint64
  x123, x122 = bits.Mul64(x100, 0xffffffffffffffff)
  var x124 uint64
  var x125 uint64
  x125, x124 = bits.Mul64(x100, 0xffffffffffffffff)
  var x126 uint64
  var x127 uint64
  x127, x126 = bits.Mul64(x100, 0xffffffffffffffff)
  var x128 uint64
  var x129 uint1
  x128, x129 = addcarryxU64(x127, x124, 0x0)
  var x130 uint64
  var x131 uint1
  x130, x131 = addcarryxU64(x125, x122, x129)
  var x132 uint64
  var x133 uint1
  x132, x133 = addcarryxU64(x123, x120, x131)
  var x134 uint64
  var x135 uint1
  x134, x135 = addcarryxU64(x121, x118, x133)
  var x136 uint64
  var x137 uint1
  x136, x137 = addcarryxU64(x119, x116, x135)
  var x138 uint64
  var x139 uint1
  x138, x139 = addcarryxU64(x117, x114, x137)
  var x141 uint1
  _, x141 = addcarryxU64(x100, x126, 0x0)
  var x142 uint64
  var x143 uint1
  x142, x143 = addcarryxU64(x102, x128, x141)
  var x144 uint64
  var x145 uint1
  x144, x145 = addcarryxU64(x104, x130, x143)
  var x146 uint64
  var x147 uint1
  x146, x147 = addcarryxU64(x106, x132, x145)
  var x148 uint64
  var x149 uint1
  x148, x149 = addcarryxU64(x108, x134, x147)
  var x150 uint64
  var x151 uint1
  x150, x151 = addcarryxU64(x110, x136, x149)
  var x152 uint64
  var x153 uint1
  x152, x153 = addcarryxU64(x112, x138, x151)
  var x154 uint64
  var x155 uint64
  x155, x154 = bits.Mul64(x2, 0x25a89bcdd12a)
  var x156 uint64
  var x157 uint64
  x157, x156 = bits.Mul64(x2, 0x69e16a61c7686d9a)
  var x158 uint64
  var x159 uint64
  x159, x158 = bits.Mul64(x2, 0xabcd92bf2dde347e)
  var x160 uint64
  var x161 uint64
  x161, x160 = bits.Mul64(x2, 0x175cc6af8d6c7c0b)
  var x162 uint64
  var x163 uint64
  x163, x162 = bits.Mul64(x2, 0xab27973f8311688d)
  var x164 uint64
  var x165 uint64
  x165, x164 = bits.Mul64(x2, 0xacec7367768798c2)
  var x166 uint64
  var x167 uint64
  x167, x166 = bits.Mul64(x2, 0x28e55b65dcd69b30)
  var x168 uint64
  var x169 uint1
  x168, x169 = addcarryxU64(x167, x164, 0x0)
  var x170 uint64
  var x171 uint1
  x170, x171 = addcarryxU64(x165, x162, x169)
  var x172 uint64
  var x173 uint1
  x172, x173 = addcarryxU64(x163, x160, x171)
  var x174 uint64
  var x175 uint1
  x174, x175 = addcarryxU64(x161, x158, x173)
  var x176 uint64
  var x177 uint1
  x176, x177 = addcarryxU64(x159, x156, x175)
  var x178 uint64
  var x179 uint1
  x178, x179 = addcarryxU64(x157, x154, x177)
  var x180 uint64
  var x181 uint1
  x180, x181 = addcarryxU64(x142, x166, 0x0)
  var x182 uint64
  var x183 uint1
  x182, x183 = addcarryxU64(x144, x168, x181)
  var x184 uint64
  var x185 uint1
  x184, x185 = addcarryxU64(x146, x170, x183)
  var x186 uint64
  var x187 uint1
  x186, x187 = addcarryxU64(x148, x172, x185)
  var x188 uint64
  var x189 uint1
  x188, x189 = addcarryxU64(x150, x174, x187)
  var x190 uint64
  var x191 uint1
  x190, x191 = addcarryxU64(x152, x176, x189)
  var x192 uint64
  var x193 uint1
  x192, x193 = addcarryxU64(((uint64(x153) + (uint64(x113) + (uint64(x99) + x75))) + (uint64(x139) + x115)), x178, x191)
  var x194 uint64
  var x195 uint64
  x195, x194 = bits.Mul64(x180, 0x2341f27177344)
  var x196 uint64
  var x197 uint64
  x197, x196 = bits.Mul64(x180, 0x6cfc5fd681c52056)
  var x198 uint64
  var x199 uint64
  x199, x198 = bits.Mul64(x180, 0x7bc65c783158aea3)
  var x200 uint64
  var x201 uint64
  x201, x200 = bits.Mul64(x180, 0xfdc1767ae2ffffff)
  var x202 uint64
  var x203 uint64
  x203, x202 = bits.Mul64(x180, 0xffffffffffffffff)
  var x204 uint64
  var x205 uint64
  x205, x204 = bits.Mul64(x180, 0xffffffffffffffff)
  var x206 uint64
  var x207 uint64
  x207, x206 = bits.Mul64(x180, 0xffffffffffffffff)
  var x208 uint64
  var x209 uint1
  x208, x209 = addcarryxU64(x207, x204, 0x0)
  var x210 uint64
  var x211 uint1
  x210, x211 = addcarryxU64(x205, x202, x209)
  var x212 uint64
  var x213 uint1
  x212, x213 = addcarryxU64(x203, x200, x211)
  var x214 uint64
  var x215 uint1
  x214, x215 = addcarryxU64(x201, x198, x213)
  var x216 uint64
  var x217 uint1
  x216, x217 = addcarryxU64(x199, x196, x215)
  var x218 uint64
  var x219 uint1
  x218, x219 = addcarryxU64(x197, x194, x217)
  var x221 uint1
  _, x221 = addcarryxU64(x180, x206, 0x0)
  var x222 uint64
  var x223 uint1
  x222, x223 = addcarryxU64(x182, x208, x221)
  var x224 uint64
  var x225 uint1
  x224, x225 = addcarryxU64(x184, x210, x223)
  var x226 uint64
  var x227 uint1
  x226, x227 = addcarryxU64(x186, x212, x225)
  var x228 uint64
  var x229 uint1
  x228, x229 = addcarryxU64(x188, x214, x227)
  var x230 uint64
  var x231 uint1
  x230, x231 = addcarryxU64(x190, x216, x229)
  var x232 uint64
  var x233 uint1
  x232, x233 = addcarryxU64(x192, x218, x231)
  var x234 uint64
  var x235 uint64
  x235, x234 = bits.Mul64(x3, 0x25a89bcdd12a)
  var x236 uint64
  var x237 uint64
  x237, x236 = bits.Mul64(x3, 0x69e16a61c7686d9a)
  var x238 uint64
  var x239 uint64
  x239, x238 = bits.Mul64(x3, 0xabcd92bf2dde347e)
  var x240 uint64
  var x241 uint64
  x241, x240 = bits.Mul64(x3, 0x175cc6af8d6c7c0b)
  var x242 uint64
  var x243 uint64
  x243, x242 = bits.Mul64(x3, 0xab27973f8311688d)
  var x244 uint64
  var x245 uint64
  x245, x244 = bits.Mul64(x3, 0xacec7367768798c2)
  var x246 uint64
  var x247 uint64
  x247, x246 = bits.Mul64(x3, 0x28e55b65dcd69b30)
  var x248 uint64
  var x249 uint1
  x248, x249 = addcarryxU64(x247, x244, 0x0)
  var x250 uint64
  var x251 uint1
  x250, x251 = addcarryxU64(x245, x242, x249)
  var x252 uint64
  var x253 uint1
  x252, x253 = addcarryxU64(x243, x240, x251)
  var x254 uint64
  var x255 uint1
  x254, x255 = addcarryxU64(x241, x238, x253)
  var x256 uint64
  var x257 uint1
  x256, x257 = addcarryxU64(x239, x236, x255)
  var x258 uint64
  var x259 uint1
  x258, x259 = addcarryxU64(x237, x234, x257)
  var x260 uint64
  var x261 uint1
  x260, x261 = addcarryxU64(x222, x246, 0x0)
  var x262 uint64
  var x263 uint1
  x262, x263 = addcarryxU64(x224, x248, x261)
  var x264 uint64
  var x265 uint1
  x264, x265 = addcarryxU64(x226, x250, x263)
  var x266 uint64
  var x267 uint1
  x266, x267 = addcarryxU64(x228, x252, x265)
  var x268 uint64
  var x269 uint1
  x268, x269 = addcarryxU64(x230, x254, x267)
  var x270 uint64
  var x271 uint1
  x270, x271 = addcarryxU64(x232, x256, x269)
  var x272 uint64
  var x273 uint1
  x272, x273 = addcarryxU64(((uint64(x233) + (uint64(x193) + (uint64(x179) + x155))) + (uint64(x219) + x195)), x258, x271)
  var x274 uint64
  var x275 uint64
  x275, x274 = bits.Mul64(x260, 0x2341f27177344)
  var x276 uint64
  var x277 uint64
  x277, x276 = bits.Mul64(x260, 0x6cfc5fd681c52056)
  var x278 uint64
  var x279 uint64
  x279, x278 = bits.Mul64(x260, 0x7bc65c783158aea3)
  var x280 uint64
  var x281 uint64
  x281, x280 = bits.Mul64(x260, 0xfdc1767ae2ffffff)
  var x282 uint64
  var x283 uint64
  x283, x282 = bits.Mul64(x260, 0xffffffffffffffff)
  var x284 uint64
  var x285 uint64
  x285, x284 = bits.Mul64(x260, 0xffffffffffffffff)
  var x286 uint64
  var x287 uint64
  x287, x286 = bits.Mul64(x260, 0xffffffffffffffff)
  var x288 uint64
  var x289 uint1
  x288, x289 = addcarryxU64(x287, x284, 0x0)
  var x290 uint64
  var x291 uint1
  x290, x291 = addcarryxU64(x285, x282, x289)
  var x292 uint64
  var x293 uint1
  x292, x293 = addcarryxU64(x283, x280, x291)
  var x294 uint64
  var x295 uint1
  x294, x295 = addcarryxU64(x281, x278, x293)
  var x296 uint64
  var x297 uint1
  x296, x297 = addcarryxU64(x279, x276, x295)
  var x298 uint64
  var x299 uint1
  x298, x299 = addcarryxU64(x277, x274, x297)
  var x301 uint1
  _, x301 = addcarryxU64(x260, x286, 0x0)
  var x302 uint64
  var x303 uint1
  x302, x303 = addcarryxU64(x262, x288, x301)
  var x304 uint64
  var x305 uint1
  x304, x305 = addcarryxU64(x264, x290, x303)
  var x306 uint64
  var x307 uint1
  x306, x307 = addcarryxU64(x266, x292, x305)
  var x308 uint64
  var x309 uint1
  x308, x309 = addcarryxU64(x268, x294, x307)
  var x310 uint64
  var x311 uint1
  x310, x311 = addcarryxU64(x270, x296, x309)
  var x312 uint64
  var x313 uint1
  x312, x313 = addcarryxU64(x272, x298, x311)
  var x314 uint64
  var x315 uint64
  x315, x314 = bits.Mul64(x4, 0x25a89bcdd12a)
  var x316 uint64
  var x317 uint64
  x317, x316 = bits.Mul64(x4, 0x69e16a61c7686d9a)
  var x318 uint64
  var x319 uint64
  x319, x318 = bits.Mul64(x4, 0xabcd92bf2dde347e)
  var x320 uint64
  var x321 uint64
  x321, x320 = bits.Mul64(x4, 0x175cc6af8d6c7c0b)
  var x322 uint64
  var x323 uint64
  x323, x322 = bits.Mul64(x4, 0xab27973f8311688d)
  var x324 uint64
  var x325 uint64
  x325, x324 = bits.Mul64(x4, 0xacec7367768798c2)
  var x326 uint64
  var x327 uint64
  x327, x326 = bits.Mul64(x4, 0x28e55b65dcd69b30)
  var x328 uint64
  var x329 uint1
  x328, x329 = addcarryxU64(x327, x324, 0x0)
  var x330 uint64
  var x331 uint1
  x330, x331 = addcarryxU64(x325, x322, x329)
  var x332 uint64
  var x333 uint1
  x332, x333 = addcarryxU64(x323, x320, x331)
  var x334 uint64
  var x335 uint1
  x334, x335 = addcarryxU64(x321, x318, x333)
  var x336 uint64
  var x337 uint1
  x336, x337 = addcarryxU64(x319, x316, x335)
  var x338 uint64
  var x339 uint1
  x338, x339 = addcarryxU64(x317, x314, x337)
  var x340 uint64
  var x341 uint1
  x340, x341 = addcarryxU64(x302, x326, 0x0)
  var x342 uint64
  var x343 uint1
  x342, x343 = addcarryxU64(x304, x328, x341)
  var x344 uint64
  var x345 uint1
  x344, x345 = addcarryxU64(x306, x330, x343)
  var x346 uint64
  var x347 uint1
  x346, x347 = addcarryxU64(x308, x332, x345)
  var x348 uint64
  var x349 uint1
  x348, x349 = addcarryxU64(x310, x334, x347)
  var x350 uint64
  var x351 uint1
  x350, x351 = addcarryxU64(x312, x336, x349)
  var x352 uint64
  var x353 uint1
  x352, x353 = addcarryxU64(((uint64(x313) + (uint64(x273) + (uint64(x259) + x235))) + (uint64(x299) + x275)), x338, x351)
  var x354 uint64
  var x355 uint64
  x355, x354 = bits.Mul64(x340, 0x2341f27177344)
  var x356 uint64
  var x357 uint64
  x357, x356 = bits.Mul64(x340, 0x6cfc5fd681c52056)
  var x358 uint64
  var x359 uint64
  x359, x358 = bits.Mul64(x340, 0x7bc65c783158aea3)
  var x360 uint64
  var x361 uint64
  x361, x360 = bits.Mul64(x340, 0xfdc1767ae2ffffff)
  var x362 uint64
  var x363 uint64
  x363, x362 = bits.Mul64(x340, 0xffffffffffffffff)
  var x364 uint64
  var x365 uint64
  x365, x364 = bits.Mul64(x340, 0xffffffffffffffff)
  var x366 uint64
  var x367 uint64
  x367, x366 = bits.Mul64(x340, 0xffffffffffffffff)
  var x368 uint64
  var x369 uint1
  x368, x369 = addcarryxU64(x367, x364, 0x0)
  var x370 uint64
  var x371 uint1
  x370, x371 = addcarryxU64(x365, x362, x369)
  var x372 uint64
  var x373 uint1
  x372, x373 = addcarryxU64(x363, x360, x371)
  var x374 uint64
  var x375 uint1
  x374, x375 = addcarryxU64(x361, x358, x373)
  var x376 uint64
  var x377 uint1
  x376, x377 = addcarryxU64(x359, x356, x375)
  var x378 uint64
  var x379 uint1
  x378, x379 = addcarryxU64(x357, x354, x377)
  var x381 uint1
  _, x381 = addcarryxU64(x340, x366, 0x0)
  var x382 uint64
  var x383 uint1
  x382, x383 = addcarryxU64(x342, x368, x381)
  var x384 uint64
  var x385 uint1
  x384, x385 = addcarryxU64(x344, x370, x383)
  var x386 uint64
  var x387 uint1
  x386, x387 = addcarryxU64(x346, x372, x385)
  var x388 uint64
  var x389 uint1
  x388, x389 = addcarryxU64(x348, x374, x387)
  var x390 uint64
  var x391 uint1
  x390, x391 = addcarryxU64(x350, x376, x389)
  var x392 uint64
  var x393 uint1
  x392, x393 = addcarryxU64(x352, x378, x391)
  var x394 uint64
  var x395 uint64
  x395, x394 = bits.Mul64(x5, 0x25a89bcdd12a)
  var x396 uint64
  var x397 uint64
  x397, x396 = bits.Mul64(x5, 0x69e16a61c7686d9a)
  var x398 uint64
  var x399 uint64
  x399, x398 = bits.Mul64(x5, 0xabcd92bf2dde347e)
  var x400 uint64
  var x401 uint64
  x401, x400 = bits.Mul64(x5, 0x175cc6af8d6c7c0b)
  var x402 uint64
  var x403 uint64
  x403, x402 = bits.Mul64(x5, 0xab27973f8311688d)
  var x404 uint64
  var x405 uint64
  x405, x404 = bits.Mul64(x5, 0xacec7367768798c2)
  var x406 uint64
  var x407 uint64
  x407, x406 = bits.Mul64(x5, 0x28e55b65dcd69b30)
  var x408 uint64
  var x409 uint1
  x408, x409 = addcarryxU64(x407, x404, 0x0)
  var x410 uint64
  var x411 uint1
  x410, x411 = addcarryxU64(x405, x402, x409)
  var x412 uint64
  var x413 uint1
  x412, x413 = addcarryxU64(x403, x400, x411)
  var x414 uint64
  var x415 uint1
  x414, x415 = addcarryxU64(x401, x398, x413)
  var x416 uint64
  var x417 uint1
  x416, x417 = addcarryxU64(x399, x396, x415)
  var x418 uint64
  var x419 uint1
  x418, x419 = addcarryxU64(x397, x394, x417)
  var x420 uint64
  var x421 uint1
  x420, x421 = addcarryxU64(x382, x406, 0x0)
  var x422 uint64
  var x423 uint1
  x422, x423 = addcarryxU64(x384, x408, x421)
  var x424 uint64
  var x425 uint1
  x424, x425 = addcarryxU64(x386, x410, x423)
  var x426 uint64
  var x427 uint1
  x426, x427 = addcarryxU64(x388, x412, x425)
  var x428 uint64
  var x429 uint1
  x428, x429 = addcarryxU64(x390, x414, x427)
  var x430 uint64
  var x431 uint1
  x430, x431 = addcarryxU64(x392, x416, x429)
  var x432 uint64
  var x433 uint1
  x432, x433 = addcarryxU64(((uint64(x393) + (uint64(x353) + (uint64(x339) + x315))) + (uint64(x379) + x355)), x418, x431)
  var x434 uint64
  var x435 uint64
  x435, x434 = bits.Mul64(x420, 0x2341f27177344)
  var x436 uint64
  var x437 uint64
  x437, x436 = bits.Mul64(x420, 0x6cfc5fd681c52056)
  var x438 uint64
  var x439 uint64
  x439, x438 = bits.Mul64(x420, 0x7bc65c783158aea3)
  var x440 uint64
  var x441 uint64
  x441, x440 = bits.Mul64(x420, 0xfdc1767ae2ffffff)
  var x442 uint64
  var x443 uint64
  x443, x442 = bits.Mul64(x420, 0xffffffffffffffff)
  var x444 uint64
  var x445 uint64
  x445, x444 = bits.Mul64(x420, 0xffffffffffffffff)
  var x446 uint64
  var x447 uint64
  x447, x446 = bits.Mul64(x420, 0xffffffffffffffff)
  var x448 uint64
  var x449 uint1
  x448, x449 = addcarryxU64(x447, x444, 0x0)
  var x450 uint64
  var x451 uint1
  x450, x451 = addcarryxU64(x445, x442, x449)
  var x452 uint64
  var x453 uint1
  x452, x453 = addcarryxU64(x443, x440, x451)
  var x454 uint64
  var x455 uint1
  x454, x455 = addcarryxU64(x441, x438, x453)
  var x456 uint64
  var x457 uint1
  x456, x457 = addcarryxU64(x439, x436, x455)
  var x458 uint64
  var x459 uint1
  x458, x459 = addcarryxU64(x437, x434, x457)
  var x461 uint1
  _, x461 = addcarryxU64(x420, x446, 0x0)
  var x462 uint64
  var x463 uint1
  x462, x463 = addcarryxU64(x422, x448, x461)
  var x464 uint64
  var x465 uint1
  x464, x465 = addcarryxU64(x424, x450, x463)
  var x466 uint64
  var x467 uint1
  x466, x467 = addcarryxU64(x426, x452, x465)
  var x468 uint64
  var x469 uint1
  x468, x469 = addcarryxU64(x428, x454, x467)
  var x470 uint64
  var x471 uint1
  x470, x471 = addcarryxU64(x430, x456, x469)
  var x472 uint64
  var x473 uint1
  x472, x473 = addcarryxU64(x432, x458, x471)
  var x474 uint64
  var x475 uint64
  x475, x474 = bits.Mul64(x6, 0x25a89bcdd12a)
  var x476 uint64
  var x477 uint64
  x477, x476 = bits.Mul64(x6, 0x69e16a61c7686d9a)
  var x478 uint64
  var x479 uint64
  x479, x478 = bits.Mul64(x6, 0xabcd92bf2dde347e)
  var x480 uint64
  var x481 uint64
  x481, x480 = bits.Mul64(x6, 0x175cc6af8d6c7c0b)
  var x482 uint64
  var x483 uint64
  x483, x482 = bits.Mul64(x6, 0xab27973f8311688d)
  var x484 uint64
  var x485 uint64
  x485, x484 = bits.Mul64(x6, 0xacec7367768798c2)
  var x486 uint64
  var x487 uint64
  x487, x486 = bits.Mul64(x6, 0x28e55b65dcd69b30)
  var x488 uint64
  var x489 uint1
  x488, x489 = addcarryxU64(x487, x484, 0x0)
  var x490 uint64
  var x491 uint1
  x490, x491 = addcarryxU64(x485, x482, x489)
  var x492 uint64
  var x493 uint1
  x492, x493 = addcarryxU64(x483, x480, x491)
  var x494 uint64
  var x495 uint1
  x494, x495 = addcarryxU64(x481, x478, x493)
  var x496 uint64
  var x497 uint1
  x496, x497 = addcarryxU64(x479, x476, x495)
  var x498 uint64
  var x499 uint1
  x498, x499 = addcarryxU64(x477, x474, x497)
  var x500 uint64
  var x501 uint1
  x500, x501 = addcarryxU64(x462, x486, 0x0)
  var x502 uint64
  var x503 uint1
  x502, x503 = addcarryxU64(x464, x488, x501)
  var x504 uint64
  var x505 uint1
  x504, x505 = addcarryxU64(x466, x490, x503)
  var x506 uint64
  var x507 uint1
  x506, x507 = addcarryxU64(x468, x492, x505)
  var x508 uint64
  var x509 uint1
  x508, x509 = addcarryxU64(x470, x494, x507)
  var x510 uint64
  var x511 uint1
  x510, x511 = addcarryxU64(x472, x496, x509)
  var x512 uint64
  var x513 uint1
  x512, x513 = addcarryxU64(((uint64(x473) + (uint64(x433) + (uint64(x419) + x395))) + (uint64(x459) + x435)), x498, x511)
  var x514 uint64
  var x515 uint64
  x515, x514 = bits.Mul64(x500, 0x2341f27177344)
  var x516 uint64
  var x517 uint64
  x517, x516 = bits.Mul64(x500, 0x6cfc5fd681c52056)
  var x518 uint64
  var x519 uint64
  x519, x518 = bits.Mul64(x500, 0x7bc65c783158aea3)
  var x520 uint64
  var x521 uint64
  x521, x520 = bits.Mul64(x500, 0xfdc1767ae2ffffff)
  var x522 uint64
  var x523 uint64
  x523, x522 = bits.Mul64(x500, 0xffffffffffffffff)
  var x524 uint64
  var x525 uint64
  x525, x524 = bits.Mul64(x500, 0xffffffffffffffff)
  var x526 uint64
  var x527 uint64
  x527, x526 = bits.Mul64(x500, 0xffffffffffffffff)
  var x528 uint64
  var x529 uint1
  x528, x529 = addcarryxU64(x527, x524, 0x0)
  var x530 uint64
  var x531 uint1
  x530, x531 = addcarryxU64(x525, x522, x529)
  var x532 uint64
  var x533 uint1
  x532, x533 = addcarryxU64(x523, x520, x531)
  var x534 uint64
  var x535 uint1
  x534, x535 = addcarryxU64(x521, x518, x533)
  var x536 uint64
  var x537 uint1
  x536, x537 = addcarryxU64(x519, x516, x535)
  var x538 uint64
  var x539 uint1
  x538, x539 = addcarryxU64(x517, x514, x537)
  var x541 uint1
  _, x541 = addcarryxU64(x500, x526, 0x0)
  var x542 uint64
  var x543 uint1
  x542, x543 = addcarryxU64(x502, x528, x541)
  var x544 uint64
  var x545 uint1
  x544, x545 = addcarryxU64(x504, x530, x543)
  var x546 uint64
  var x547 uint1
  x546, x547 = addcarryxU64(x506, x532, x545)
  var x548 uint64
  var x549 uint1
  x548, x549 = addcarryxU64(x508, x534, x547)
  var x550 uint64
  var x551 uint1
  x550, x551 = addcarryxU64(x510, x536, x549)
  var x552 uint64
  var x553 uint1
  x552, x553 = addcarryxU64(x512, x538, x551)
  var x554 uint64 = ((uint64(x553) + (uint64(x513) + (uint64(x499) + x475))) + (uint64(x539) + x515))
  var x555 uint64
  var x556 uint1
  x555, x556 = subborrowxU64(x542, 0xffffffffffffffff, 0x0)
  var x557 uint64
  var x558 uint1
  x557, x558 = subborrowxU64(x544, 0xffffffffffffffff, x556)
  var x559 uint64
  var x560 uint1
  x559, x560 = subborrowxU64(x546, 0xffffffffffffffff, x558)
  var x561 uint64
  var x562 uint1
  x561, x562 = subborrowxU64(x548, 0xfdc1767ae2ffffff, x560)
  var x563 uint64
  var x564 uint1
  x563, x564 = subborrowxU64(x550, 0x7bc65c783158aea3, x562)
  var x565 uint64
  var x566 uint1
  x565, x566 = subborrowxU64(x552, 0x6cfc5fd681c52056, x564)
  var x567 uint64
  var x568 uint1
  x567, x568 = subborrowxU64(x554, 0x2341f27177344, x566)
  var x570 uint1
  _, x570 = subborrowxU64(uint64(0x0), uint64(0x0), x568)
  var x571 uint64
  cmovznzU64(&x571, x570, x555, x542)
  var x572 uint64
  cmovznzU64(&x572, x570, x557, x544)
  var x573 uint64
  cmovznzU64(&x573, x570, x559, x546)
  var x574 uint64
  cmovznzU64(&x574, x570, x561, x548)
  var x575 uint64
  cmovznzU64(&x575, x570, x563, x550)
  var x576 uint64
  cmovznzU64(&x576, x570, x565, x552)
  var x577 uint64
  cmovznzU64(&x577, x570, x567, x554)
  out1[0] = x571
  out1[1] = x572
  out1[2] = x573
  out1[3] = x574
  out1[4] = x575
  out1[5] = x576
  out1[6] = x577
}

/*
 * The function Nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 */
/*inline*/
func Nonzero(out1 *uint64, arg1 *[7]uint64) {
  var x1 uint64 = ((arg1[0]) | ((arg1[1]) | ((arg1[2]) | ((arg1[3]) | ((arg1[4]) | ((arg1[5]) | (arg1[6])))))))
  *out1 = x1
}

/*
 * The function Selectznz is a multi-limb conditional select.
 * Postconditions:
 *   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func Selectznz(out1 *[7]uint64, arg1 uint1, arg2 *[7]uint64, arg3 *[7]uint64) {
  var x1 uint64
  cmovznzU64(&x1, arg1, (arg2[0]), (arg3[0]))
  var x2 uint64
  cmovznzU64(&x2, arg1, (arg2[1]), (arg3[1]))
  var x3 uint64
  cmovznzU64(&x3, arg1, (arg2[2]), (arg3[2]))
  var x4 uint64
  cmovznzU64(&x4, arg1, (arg2[3]), (arg3[3]))
  var x5 uint64
  cmovznzU64(&x5, arg1, (arg2[4]), (arg3[4]))
  var x6 uint64
  cmovznzU64(&x6, arg1, (arg2[5]), (arg3[5]))
  var x7 uint64
  cmovznzU64(&x7, arg1, (arg2[6]), (arg3[6]))
  out1[0] = x1
  out1[1] = x2
  out1[2] = x3
  out1[3] = x4
  out1[4] = x5
  out1[5] = x6
  out1[6] = x7
}

/*
 * The function ToBytes serializes a field element NOT in the Montgomery domain to bytes in little-endian order.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..54]
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0x3ffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0x3]]
 */
/*inline*/
func ToBytes(out1 *[55]uint8, arg1 *[7]uint64) {
  var x1 uint64 = (arg1[6])
  var x2 uint64 = (arg1[5])
  var x3 uint64 = (arg1[4])
  var x4 uint64 = (arg1[3])
  var x5 uint64 = (arg1[2])
  var x6 uint64 = (arg1[1])
  var x7 uint64 = (arg1[0])
  var x8 uint8 = (uint8(x7) & 0xff)
  var x9 uint64 = (x7 >> 8)
  var x10 uint8 = (uint8(x9) & 0xff)
  var x11 uint64 = (x9 >> 8)
  var x12 uint8 = (uint8(x11) & 0xff)
  var x13 uint64 = (x11 >> 8)
  var x14 uint8 = (uint8(x13) & 0xff)
  var x15 uint64 = (x13 >> 8)
  var x16 uint8 = (uint8(x15) & 0xff)
  var x17 uint64 = (x15 >> 8)
  var x18 uint8 = (uint8(x17) & 0xff)
  var x19 uint64 = (x17 >> 8)
  var x20 uint8 = (uint8(x19) & 0xff)
  var x21 uint8 = uint8((x19 >> 8))
  var x22 uint8 = (uint8(x6) & 0xff)
  var x23 uint64 = (x6 >> 8)
  var x24 uint8 = (uint8(x23) & 0xff)
  var x25 uint64 = (x23 >> 8)
  var x26 uint8 = (uint8(x25) & 0xff)
  var x27 uint64 = (x25 >> 8)
  var x28 uint8 = (uint8(x27) & 0xff)
  var x29 uint64 = (x27 >> 8)
  var x30 uint8 = (uint8(x29) & 0xff)
  var x31 uint64 = (x29 >> 8)
  var x32 uint8 = (uint8(x31) & 0xff)
  var x33 uint64 = (x31 >> 8)
  var x34 uint8 = (uint8(x33) & 0xff)
  var x35 uint8 = uint8((x33 >> 8))
  var x36 uint8 = (uint8(x5) & 0xff)
  var x37 uint64 = (x5 >> 8)
  var x38 uint8 = (uint8(x37) & 0xff)
  var x39 uint64 = (x37 >> 8)
  var x40 uint8 = (uint8(x39) & 0xff)
  var x41 uint64 = (x39 >> 8)
  var x42 uint8 = (uint8(x41) & 0xff)
  var x43 uint64 = (x41 >> 8)
  var x44 uint8 = (uint8(x43) & 0xff)
  var x45 uint64 = (x43 >> 8)
  var x46 uint8 = (uint8(x45) & 0xff)
  var x47 uint64 = (x45 >> 8)
  var x48 uint8 = (uint8(x47) & 0xff)
  var x49 uint8 = uint8((x47 >> 8))
  var x50 uint8 = (uint8(x4) & 0xff)
  var x51 uint64 = (x4 >> 8)
  var x52 uint8 = (uint8(x51) & 0xff)
  var x53 uint64 = (x51 >> 8)
  var x54 uint8 = (uint8(x53) & 0xff)
  var x55 uint64 = (x53 >> 8)
  var x56 uint8 = (uint8(x55) & 0xff)
  var x57 uint64 = (x55 >> 8)
  var x58 uint8 = (uint8(x57) & 0xff)
  var x59 uint64 = (x57 >> 8)
  var x60 uint8 = (uint8(x59) & 0xff)
  var x61 uint64 = (x59 >> 8)
  var x62 uint8 = (uint8(x61) & 0xff)
  var x63 uint8 = uint8((x61 >> 8))
  var x64 uint8 = (uint8(x3) & 0xff)
  var x65 uint64 = (x3 >> 8)
  var x66 uint8 = (uint8(x65) & 0xff)
  var x67 uint64 = (x65 >> 8)
  var x68 uint8 = (uint8(x67) & 0xff)
  var x69 uint64 = (x67 >> 8)
  var x70 uint8 = (uint8(x69) & 0xff)
  var x71 uint64 = (x69 >> 8)
  var x72 uint8 = (uint8(x71) & 0xff)
  var x73 uint64 = (x71 >> 8)
  var x74 uint8 = (uint8(x73) & 0xff)
  var x75 uint64 = (x73 >> 8)
  var x76 uint8 = (uint8(x75) & 0xff)
  var x77 uint8 = uint8((x75 >> 8))
  var x78 uint8 = (uint8(x2) & 0xff)
  var x79 uint64 = (x2 >> 8)
  var x80 uint8 = (uint8(x79) & 0xff)
  var x81 uint64 = (x79 >> 8)
  var x82 uint8 = (uint8(x81) & 0xff)
  var x83 uint64 = (x81 >> 8)
  var x84 uint8 = (uint8(x83) & 0xff)
  var x85 uint64 = (x83 >> 8)
  var x86 uint8 = (uint8(x85) & 0xff)
  var x87 uint64 = (x85 >> 8)
  var x88 uint8 = (uint8(x87) & 0xff)
  var x89 uint64 = (x87 >> 8)
  var x90 uint8 = (uint8(x89) & 0xff)
  var x91 uint8 = uint8((x89 >> 8))
  var x92 uint8 = (uint8(x1) & 0xff)
  var x93 uint64 = (x1 >> 8)
  var x94 uint8 = (uint8(x93) & 0xff)
  var x95 uint64 = (x93 >> 8)
  var x96 uint8 = (uint8(x95) & 0xff)
  var x97 uint64 = (x95 >> 8)
  var x98 uint8 = (uint8(x97) & 0xff)
  var x99 uint64 = (x97 >> 8)
  var x100 uint8 = (uint8(x99) & 0xff)
  var x101 uint64 = (x99 >> 8)
  var x102 uint8 = (uint8(x101) & 0xff)
  var x103 uint8 = uint8((x101 >> 8))
  out1[0] = x8
  out1[1] = x10
  out1[2] = x12
  out1[3] = x14
  out1[4] = x16
  out1[5] = x18
  out1[6] = x20
  out1[7] = x21
  out1[8] = x22
  out1[9] = x24
  out1[10] = x26
  out1[11] = x28
  out1[12] = x30
  out1[13] = x32
  out1[14] = x34
  out1[15] = x35
  out1[16] = x36
  out1[17] = x38
  out1[18] = x40
  out1[19] = x42
  out1[20] = x44
  out1[21] = x46
  out1[22] = x48
  out1[23] = x49
  out1[24] = x50
  out1[25] = x52
  out1[26] = x54
  out1[27] = x56
  out1[28] = x58
  out1[29] = x60
  out1[30] = x62
  out1[31] = x63
  out1[32] = x64
  out1[33] = x66
  out1[34] = x68
  out1[35] = x70
  out1[36] = x72
  out1[37] = x74
  out1[38] = x76
  out1[39] = x77
  out1[40] = x78
  out1[41] = x80
  out1[42] = x82
  out1[43] = x84
  out1[44] = x86
  out1[45] = x88
  out1[46] = x90
  out1[47] = x91
  out1[48] = x92
  out1[49] = x94
  out1[50] = x96
  out1[51] = x98
  out1[52] = x100
  out1[53] = x102
  out1[54] = x103
}

/*
 * The function FromBytes deserializes a field element NOT in the Montgomery domain from bytes in little-endian order.
 * Preconditions:
 *   0 ≤ bytes_eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = bytes_eval arg1 mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0x3]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0x3ffffffffffff]]
 */
/*inline*/
func FromBytes(out1 *[7]uint64, arg1 *[55]uint8) {
  var x1 uint64 = (uint64((arg1[54])) << 48)
  var x2 uint64 = (uint64((arg1[53])) << 40)
  var x3 uint64 = (uint64((arg1[52])) << 32)
  var x4 uint64 = (uint64((arg1[51])) << 24)
  var x5 uint64 = (uint64((arg1[50])) << 16)
  var x6 uint64 = (uint64((arg1[49])) << 8)
  var x7 uint8 = (arg1[48])
  var x8 uint64 = (uint64((arg1[47])) << 56)
  var x9 uint64 = (uint64((arg1[46])) << 48)
  var x10 uint64 = (uint64((arg1[45])) << 40)
  var x11 uint64 = (uint64((arg1[44])) << 32)
  var x12 uint64 = (uint64((arg1[43])) << 24)
  var x13 uint64 = (uint64((arg1[42])) << 16)
  var x14 uint64 = (uint64((arg1[41])) << 8)
  var x15 uint8 = (arg1[40])
  var x16 uint64 = (uint64((arg1[39])) << 56)
  var x17 uint64 = (uint64((arg1[38])) << 48)
  var x18 uint64 = (uint64((arg1[37])) << 40)
  var x19 uint64 = (uint64((arg1[36])) << 32)
  var x20 uint64 = (uint64((arg1[35])) << 24)
  var x21 uint64 = (uint64((arg1[34])) << 16)
  var x22 uint64 = (uint64((arg1[33])) << 8)
  var x23 uint8 = (arg1[32])
  var x24 uint64 = (uint64((arg1[31])) << 56)
  var x25 uint64 = (uint64((arg1[30])) << 48)
  var x26 uint64 = (uint64((arg1[29])) << 40)
  var x27 uint64 = (uint64((arg1[28])) << 32)
  var x28 uint64 = (uint64((arg1[27])) << 24)
  var x29 uint64 = (uint64((arg1[26])) << 16)
  var x30 uint64 = (uint64((arg1[25])) << 8)
  var x31 uint8 = (arg1[24])
  var x32 uint64 = (uint64((arg1[23])) << 56)
  var x33 uint64 = (uint64((arg1[22])) << 48)
  var x34 uint64 = (uint64((arg1[21])) << 40)
  var x35 uint64 = (uint64((arg1[20])) << 32)
  var x36 uint64 = (uint64((arg1[19])) << 24)
  var x37 uint64 = (uint64((arg1[18])) << 16)
  var x38 uint64 = (uint64((arg1[17])) << 8)
  var x39 uint8 = (arg1[16])
  var x40 uint64 = (uint64((arg1[15])) << 56)
  var x41 uint64 = (uint64((arg1[14])) << 48)
  var x42 uint64 = (uint64((arg1[13])) << 40)
  var x43 uint64 = (uint64((arg1[12])) << 32)
  var x44 uint64 = (uint64((arg1[11])) << 24)
  var x45 uint64 = (uint64((arg1[10])) << 16)
  var x46 uint64 = (uint64((arg1[9])) << 8)
  var x47 uint8 = (arg1[8])
  var x48 uint64 = (uint64((arg1[7])) << 56)
  var x49 uint64 = (uint64((arg1[6])) << 48)
  var x50 uint64 = (uint64((arg1[5])) << 40)
  var x51 uint64 = (uint64((arg1[4])) << 32)
  var x52 uint64 = (uint64((arg1[3])) << 24)
  var x53 uint64 = (uint64((arg1[2])) << 16)
  var x54 uint64 = (uint64((arg1[1])) << 8)
  var x55 uint8 = (arg1[0])
  var x56 uint64 = (x54 + uint64(x55))
  var x57 uint64 = (x53 + x56)
  var x58 uint64 = (x52 + x57)
  var x59 uint64 = (x51 + x58)
  var x60 uint64 = (x50 + x59)
  var x61 uint64 = (x49 + x60)
  var x62 uint64 = (x48 + x61)
  var x63 uint64 = (x46 + uint64(x47))
  var x64 uint64 = (x45 + x63)
  var x65 uint64 = (x44 + x64)
  var x66 uint64 = (x43 + x65)
  var x67 uint64 = (x42 + x66)
  var x68 uint64 = (x41 + x67)
  var x69 uint64 = (x40 + x68)
  var x70 uint64 = (x38 + uint64(x39))
  var x71 uint64 = (x37 + x70)
  var x72 uint64 = (x36 + x71)
  var x73 uint64 = (x35 + x72)
  var x74 uint64 = (x34 + x73)
  var x75 uint64 = (x33 + x74)
  var x76 uint64 = (x32 + x75)
  var x77 uint64 = (x30 + uint64(x31))
  var x78 uint64 = (x29 + x77)
  var x79 uint64 = (x28 + x78)
  var x80 uint64 = (x27 + x79)
  var x81 uint64 = (x26 + x80)
  var x82 uint64 = (x25 + x81)
  var x83 uint64 = (x24 + x82)
  var x84 uint64 = (x22 + uint64(x23))
  var x85 uint64 = (x21 + x84)
  var x86 uint64 = (x20 + x85)
  var x87 uint64 = (x19 + x86)
  var x88 uint64 = (x18 + x87)
  var x89 uint64 = (x17 + x88)
  var x90 uint64 = (x16 + x89)
  var x91 uint64 = (x14 + uint64(x15))
  var x92 uint64 = (x13 + x91)
  var x93 uint64 = (x12 + x92)
  var x94 uint64 = (x11 + x93)
  var x95 uint64 = (x10 + x94)
  var x96 uint64 = (x9 + x95)
  var x97 uint64 = (x8 + x96)
  var x98 uint64 = (x6 + uint64(x7))
  var x99 uint64 = (x5 + x98)
  var x100 uint64 = (x4 + x99)
  var x101 uint64 = (x3 + x100)
  var x102 uint64 = (x2 + x101)
  var x103 uint64 = (x1 + x102)
  out1[0] = x62
  out1[1] = x69
  out1[2] = x76
  out1[3] = x83
  out1[4] = x90
  out1[5] = x97
  out1[6] = x103
}

/*
 * The function SetOne returns the field element one in the Montgomery domain.
 * Postconditions:
 *   eval (from_montgomery out1) mod m = 1 mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func SetOne(out1 *[7]uint64) {
  out1[0] = 0x742c
  out1[1] = uint64(0x0)
  out1[2] = uint64(0x0)
  out1[3] = 0xb90ff404fc000000
  out1[4] = 0xd801a4fb559facd4
  out1[5] = 0xe93254545f77410c
  out1[6] = 0xeceea7bd2eda
}

/*
 * The function Msat returns the saturated represtation of the prime modulus.
 * Postconditions:
 *   twos_complement_eval out1 = m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func Msat(out1 *[8]uint64) {
  out1[0] = 0xffffffffffffffff
  out1[1] = 0xffffffffffffffff
  out1[2] = 0xffffffffffffffff
  out1[3] = 0xfdc1767ae2ffffff
  out1[4] = 0x7bc65c783158aea3
  out1[5] = 0x6cfc5fd681c52056
  out1[6] = 0x2341f27177344
  out1[7] = uint64(0x0)
}

/*
 * The function Divstep computes a divstep.
 * Preconditions:
 *   0 ≤ eval arg4 < m
 *   0 ≤ eval arg5 < m
 * Postconditions:
 *   out1 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then 1 - arg1 else 1 + arg1)
 *   twos_complement_eval out2 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then twos_complement_eval arg3 else twos_complement_eval arg2)
 *   twos_complement_eval out3 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then ⌊(twos_complement_eval arg3 - twos_complement_eval arg2) / 2⌋ else ⌊(twos_complement_eval arg3 + (twos_complement_eval arg3 mod 2) * twos_complement_eval arg2) / 2⌋)
 *   eval (from_montgomery out4) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (2 * eval (from_montgomery arg5)) mod m else (2 * eval (from_montgomery arg4)) mod m)
 *   eval (from_montgomery out5) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (eval (from_montgomery arg4) - eval (from_montgomery arg4)) mod m else (eval (from_montgomery arg5) + (twos_complement_eval arg3 mod 2) * eval (from_montgomery arg4)) mod m)
 *   0 ≤ eval out5 < m
 *   0 ≤ eval out5 < m
 *   0 ≤ eval out2 < m
 *   0 ≤ eval out3 < m
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0xffffffffffffffff]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg4: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg5: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 *   out2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   out3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   out4: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   out5: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func Divstep(out1 *uint64, out2 *[8]uint64, out3 *[8]uint64, out4 *[7]uint64, out5 *[7]uint64, arg1 uint64, arg2 *[8]uint64, arg3 *[8]uint64, arg4 *[7]uint64, arg5 *[7]uint64) {
  var x1 uint64
  x1, _ = addcarryxU64((^arg1), uint64(0x1), 0x0)
  var x3 uint1 = (uint1((x1 >> 63)) & (uint1((arg3[0])) & 0x1))
  var x4 uint64
  x4, _ = addcarryxU64((^arg1), uint64(0x1), 0x0)
  var x6 uint64
  cmovznzU64(&x6, x3, arg1, x4)
  var x7 uint64
  cmovznzU64(&x7, x3, (arg2[0]), (arg3[0]))
  var x8 uint64
  cmovznzU64(&x8, x3, (arg2[1]), (arg3[1]))
  var x9 uint64
  cmovznzU64(&x9, x3, (arg2[2]), (arg3[2]))
  var x10 uint64
  cmovznzU64(&x10, x3, (arg2[3]), (arg3[3]))
  var x11 uint64
  cmovznzU64(&x11, x3, (arg2[4]), (arg3[4]))
  var x12 uint64
  cmovznzU64(&x12, x3, (arg2[5]), (arg3[5]))
  var x13 uint64
  cmovznzU64(&x13, x3, (arg2[6]), (arg3[6]))
  var x14 uint64
  cmovznzU64(&x14, x3, (arg2[7]), (arg3[7]))
  var x15 uint64
  var x16 uint1
  x15, x16 = addcarryxU64(uint64(0x1), (^(arg2[0])), 0x0)
  var x17 uint64
  var x18 uint1
  x17, x18 = addcarryxU64(uint64(0x0), (^(arg2[1])), x16)
  var x19 uint64
  var x20 uint1
  x19, x20 = addcarryxU64(uint64(0x0), (^(arg2[2])), x18)
  var x21 uint64
  var x22 uint1
  x21, x22 = addcarryxU64(uint64(0x0), (^(arg2[3])), x20)
  var x23 uint64
  var x24 uint1
  x23, x24 = addcarryxU64(uint64(0x0), (^(arg2[4])), x22)
  var x25 uint64
  var x26 uint1
  x25, x26 = addcarryxU64(uint64(0x0), (^(arg2[5])), x24)
  var x27 uint64
  var x28 uint1
  x27, x28 = addcarryxU64(uint64(0x0), (^(arg2[6])), x26)
  var x29 uint64
  x29, _ = addcarryxU64(uint64(0x0), (^(arg2[7])), x28)
  var x31 uint64
  cmovznzU64(&x31, x3, (arg3[0]), x15)
  var x32 uint64
  cmovznzU64(&x32, x3, (arg3[1]), x17)
  var x33 uint64
  cmovznzU64(&x33, x3, (arg3[2]), x19)
  var x34 uint64
  cmovznzU64(&x34, x3, (arg3[3]), x21)
  var x35 uint64
  cmovznzU64(&x35, x3, (arg3[4]), x23)
  var x36 uint64
  cmovznzU64(&x36, x3, (arg3[5]), x25)
  var x37 uint64
  cmovznzU64(&x37, x3, (arg3[6]), x27)
  var x38 uint64
  cmovznzU64(&x38, x3, (arg3[7]), x29)
  var x39 uint64
  cmovznzU64(&x39, x3, (arg4[0]), (arg5[0]))
  var x40 uint64
  cmovznzU64(&x40, x3, (arg4[1]), (arg5[1]))
  var x41 uint64
  cmovznzU64(&x41, x3, (arg4[2]), (arg5[2]))
  var x42 uint64
  cmovznzU64(&x42, x3, (arg4[3]), (arg5[3]))
  var x43 uint64
  cmovznzU64(&x43, x3, (arg4[4]), (arg5[4]))
  var x44 uint64
  cmovznzU64(&x44, x3, (arg4[5]), (arg5[5]))
  var x45 uint64
  cmovznzU64(&x45, x3, (arg4[6]), (arg5[6]))
  var x46 uint64
  var x47 uint1
  x46, x47 = addcarryxU64(x39, x39, 0x0)
  var x48 uint64
  var x49 uint1
  x48, x49 = addcarryxU64(x40, x40, x47)
  var x50 uint64
  var x51 uint1
  x50, x51 = addcarryxU64(x41, x41, x49)
  var x52 uint64
  var x53 uint1
  x52, x53 = addcarryxU64(x42, x42, x51)
  var x54 uint64
  var x55 uint1
  x54, x55 = addcarryxU64(x43, x43, x53)
  var x56 uint64
  var x57 uint1
  x56, x57 = addcarryxU64(x44, x44, x55)
  var x58 uint64
  var x59 uint1
  x58, x59 = addcarryxU64(x45, x45, x57)
  var x60 uint64
  var x61 uint1
  x60, x61 = subborrowxU64(x46, 0xffffffffffffffff, 0x0)
  var x62 uint64
  var x63 uint1
  x62, x63 = subborrowxU64(x48, 0xffffffffffffffff, x61)
  var x64 uint64
  var x65 uint1
  x64, x65 = subborrowxU64(x50, 0xffffffffffffffff, x63)
  var x66 uint64
  var x67 uint1
  x66, x67 = subborrowxU64(x52, 0xfdc1767ae2ffffff, x65)
  var x68 uint64
  var x69 uint1
  x68, x69 = subborrowxU64(x54, 0x7bc65c783158aea3, x67)
  var x70 uint64
  var x71 uint1
  x70, x71 = subborrowxU64(x56, 0x6cfc5fd681c52056, x69)
  var x72 uint64
  var x73 uint1
  x72, x73 = subborrowxU64(x58, 0x2341f27177344, x71)
  var x75 uint1
  _, x75 = subborrowxU64(uint64(x59), uint64(0x0), x73)
  var x76 uint64 = (arg4[6])
  var x77 uint64 = (arg4[5])
  var x78 uint64 = (arg4[4])
  var x79 uint64 = (arg4[3])
  var x80 uint64 = (arg4[2])
  var x81 uint64 = (arg4[1])
  var x82 uint64 = (arg4[0])
  var x83 uint64
  var x84 uint1
  x83, x84 = subborrowxU64(uint64(0x0), x82, 0x0)
  var x85 uint64
  var x86 uint1
  x85, x86 = subborrowxU64(uint64(0x0), x81, x84)
  var x87 uint64
  var x88 uint1
  x87, x88 = subborrowxU64(uint64(0x0), x80, x86)
  var x89 uint64
  var x90 uint1
  x89, x90 = subborrowxU64(uint64(0x0), x79, x88)
  var x91 uint64
  var x92 uint1
  x91, x92 = subborrowxU64(uint64(0x0), x78, x90)
  var x93 uint64
  var x94 uint1
  x93, x94 = subborrowxU64(uint64(0x0), x77, x92)
  var x95 uint64
  var x96 uint1
  x95, x96 = subborrowxU64(uint64(0x0), x76, x94)
  var x97 uint64
  cmovznzU64(&x97, x96, uint64(0x0), 0xffffffffffffffff)
  var x98 uint64
  var x99 uint1
  x98, x99 = addcarryxU64(x83, x97, 0x0)
  var x100 uint64
  var x101 uint1
  x100, x101 = addcarryxU64(x85, x97, x99)
  var x102 uint64
  var x103 uint1
  x102, x103 = addcarryxU64(x87, x97, x101)
  var x104 uint64
  var x105 uint1
  x104, x105 = addcarryxU64(x89, (x97 & 0xfdc1767ae2ffffff), x103)
  var x106 uint64
  var x107 uint1
  x106, x107 = addcarryxU64(x91, (x97 & 0x7bc65c783158aea3), x105)
  var x108 uint64
  var x109 uint1
  x108, x109 = addcarryxU64(x93, (x97 & 0x6cfc5fd681c52056), x107)
  var x110 uint64
  x110, _ = addcarryxU64(x95, (x97 & 0x2341f27177344), x109)
  var x112 uint64
  cmovznzU64(&x112, x3, (arg5[0]), x98)
  var x113 uint64
  cmovznzU64(&x113, x3, (arg5[1]), x100)
  var x114 uint64
  cmovznzU64(&x114, x3, (arg5[2]), x102)
  var x115 uint64
  cmovznzU64(&x115, x3, (arg5[3]), x104)
  var x116 uint64
  cmovznzU64(&x116, x3, (arg5[4]), x106)
  var x117 uint64
  cmovznzU64(&x117, x3, (arg5[5]), x108)
  var x118 uint64
  cmovznzU64(&x118, x3, (arg5[6]), x110)
  var x119 uint1 = (uint1(x31) & 0x1)
  var x120 uint64
  cmovznzU64(&x120, x119, uint64(0x0), x7)
  var x121 uint64
  cmovznzU64(&x121, x119, uint64(0x0), x8)
  var x122 uint64
  cmovznzU64(&x122, x119, uint64(0x0), x9)
  var x123 uint64
  cmovznzU64(&x123, x119, uint64(0x0), x10)
  var x124 uint64
  cmovznzU64(&x124, x119, uint64(0x0), x11)
  var x125 uint64
  cmovznzU64(&x125, x119, uint64(0x0), x12)
  var x126 uint64
  cmovznzU64(&x126, x119, uint64(0x0), x13)
  var x127 uint64
  cmovznzU64(&x127, x119, uint64(0x0), x14)
  var x128 uint64
  var x129 uint1
  x128, x129 = addcarryxU64(x31, x120, 0x0)
  var x130 uint64
  var x131 uint1
  x130, x131 = addcarryxU64(x32, x121, x129)
  var x132 uint64
  var x133 uint1
  x132, x133 = addcarryxU64(x33, x122, x131)
  var x134 uint64
  var x135 uint1
  x134, x135 = addcarryxU64(x34, x123, x133)
  var x136 uint64
  var x137 uint1
  x136, x137 = addcarryxU64(x35, x124, x135)
  var x138 uint64
  var x139 uint1
  x138, x139 = addcarryxU64(x36, x125, x137)
  var x140 uint64
  var x141 uint1
  x140, x141 = addcarryxU64(x37, x126, x139)
  var x142 uint64
  x142, _ = addcarryxU64(x38, x127, x141)
  var x144 uint64
  cmovznzU64(&x144, x119, uint64(0x0), x39)
  var x145 uint64
  cmovznzU64(&x145, x119, uint64(0x0), x40)
  var x146 uint64
  cmovznzU64(&x146, x119, uint64(0x0), x41)
  var x147 uint64
  cmovznzU64(&x147, x119, uint64(0x0), x42)
  var x148 uint64
  cmovznzU64(&x148, x119, uint64(0x0), x43)
  var x149 uint64
  cmovznzU64(&x149, x119, uint64(0x0), x44)
  var x150 uint64
  cmovznzU64(&x150, x119, uint64(0x0), x45)
  var x151 uint64
  var x152 uint1
  x151, x152 = addcarryxU64(x112, x144, 0x0)
  var x153 uint64
  var x154 uint1
  x153, x154 = addcarryxU64(x113, x145, x152)
  var x155 uint64
  var x156 uint1
  x155, x156 = addcarryxU64(x114, x146, x154)
  var x157 uint64
  var x158 uint1
  x157, x158 = addcarryxU64(x115, x147, x156)
  var x159 uint64
  var x160 uint1
  x159, x160 = addcarryxU64(x116, x148, x158)
  var x161 uint64
  var x162 uint1
  x161, x162 = addcarryxU64(x117, x149, x160)
  var x163 uint64
  var x164 uint1
  x163, x164 = addcarryxU64(x118, x150, x162)
  var x165 uint64
  var x166 uint1
  x165, x166 = subborrowxU64(x151, 0xffffffffffffffff, 0x0)
  var x167 uint64
  var x168 uint1
  x167, x168 = subborrowxU64(x153, 0xffffffffffffffff, x166)
  var x169 uint64
  var x170 uint1
  x169, x170 = subborrowxU64(x155, 0xffffffffffffffff, x168)
  var x171 uint64
  var x172 uint1
  x171, x172 = subborrowxU64(x157, 0xfdc1767ae2ffffff, x170)
  var x173 uint64
  var x174 uint1
  x173, x174 = subborrowxU64(x159, 0x7bc65c783158aea3, x172)
  var x175 uint64
  var x176 uint1
  x175, x176 = subborrowxU64(x161, 0x6cfc5fd681c52056, x174)
  var x177 uint64
  var x178 uint1
  x177, x178 = subborrowxU64(x163, 0x2341f27177344, x176)
  var x180 uint1
  _, x180 = subborrowxU64(uint64(x164), uint64(0x0), x178)
  var x181 uint64
  x181, _ = addcarryxU64(x6, uint64(0x1), 0x0)
  var x183 uint64 = ((x128 >> 1) | ((x130 << 63) & 0xffffffffffffffff))
  var x184 uint64 = ((x130 >> 1) | ((x132 << 63) & 0xffffffffffffffff))
  var x185 uint64 = ((x132 >> 1) | ((x134 << 63) & 0xffffffffffffffff))
  var x186 uint64 = ((x134 >> 1) | ((x136 << 63) & 0xffffffffffffffff))
  var x187 uint64 = ((x136 >> 1) | ((x138 << 63) & 0xffffffffffffffff))
  var x188 uint64 = ((x138 >> 1) | ((x140 << 63) & 0xffffffffffffffff))
  var x189 uint64 = ((x140 >> 1) | ((x142 << 63) & 0xffffffffffffffff))
  var x190 uint64 = ((x142 & 0x8000000000000000) | (x142 >> 1))
  var x191 uint64
  cmovznzU64(&x191, x75, x60, x46)
  var x192 uint64
  cmovznzU64(&x192, x75, x62, x48)
  var x193 uint64
  cmovznzU64(&x193, x75, x64, x50)
  var x194 uint64
  cmovznzU64(&x194, x75, x66, x52)
  var x195 uint64
  cmovznzU64(&x195, x75, x68, x54)
  var x196 uint64
  cmovznzU64(&x196, x75, x70, x56)
  var x197 uint64
  cmovznzU64(&x197, x75, x72, x58)
  var x198 uint64
  cmovznzU64(&x198, x180, x165, x151)
  var x199 uint64
  cmovznzU64(&x199, x180, x167, x153)
  var x200 uint64
  cmovznzU64(&x200, x180, x169, x155)
  var x201 uint64
  cmovznzU64(&x201, x180, x171, x157)
  var x202 uint64
  cmovznzU64(&x202, x180, x173, x159)
  var x203 uint64
  cmovznzU64(&x203, x180, x175, x161)
  var x204 uint64
  cmovznzU64(&x204, x180, x177, x163)
  *out1 = x181
  out2[0] = x7
  out2[1] = x8
  out2[2] = x9
  out2[3] = x10
  out2[4] = x11
  out2[5] = x12
  out2[6] = x13
  out2[7] = x14
  out3[0] = x183
  out3[1] = x184
  out3[2] = x185
  out3[3] = x186
  out3[4] = x187
  out3[5] = x188
  out3[6] = x189
  out3[7] = x190
  out4[0] = x191
  out4[1] = x192
  out4[2] = x193
  out4[3] = x194
  out4[4] = x195
  out4[5] = x196
  out4[6] = x197
  out5[0] = x198
  out5[1] = x199
  out5[2] = x200
  out5[3] = x201
  out5[4] = x202
  out5[5] = x203
  out5[6] = x204
}

/*
 * The function DivstepPrecomp returns the precomputed value for Bernstein-Yang-inversion (in montgomery form).
 * Postconditions:
 *   eval (from_montgomery out1) = ⌊(m - 1) / 2⌋^(if (log2 m) + 1 < 46 then ⌊(49 * ((log2 m) + 1) + 80) / 17⌋ else ⌊(49 * ((log2 m) + 1) + 57) / 17⌋)
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func DivstepPrecomp(out1 *[7]uint64) {
  out1[0] = 0x9f9776e27e1a2b72
  out1[1] = 0x28b59f067e2393d0
  out1[2] = 0xcf316ce1572add54
  out1[3] = 0x312c8965f9032c2f
  out1[4] = 0x9d9cab29ad90d34c
  out1[5] = 0x6e1ddae1d9609ae1
  out1[6] = 0x6df82285eec6
}

