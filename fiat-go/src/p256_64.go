/* Autogenerated: src/ExtractionOCaml/word_by_word_montgomery --lang=Go --no-wide-int --cmovznz-by-mul --widen-carry --widen-bytes p256 '2^256 - 2^224 + 2^192 + 2^96 - 1' 64 mul square add sub opp from_montgomery nonzero selectznz to_bytes from_bytes */
/* curve description: p256 */
/* requested operations: mul, square, add, sub, opp, from_montgomery, nonzero, selectznz, to_bytes, from_bytes */
/* m = 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff (from "2^256 - 2^224 + 2^192 + 2^96 - 1") */
/* machine_wordsize = 64 (from "64") */
/*                                                                    */
/* NOTE: In addition to the bounds specified above each function, all */
/*   functions synthesized for this Montgomery arithmetic require the */
/*   input to be strictly less than the prime modulus (m), and also   */
/*   require the input to be in the unique saturated representation.  */
/*   All functions also ensure that these two properties are true of  */
/*   return values.                                                   */

package fiat_p256

import "math/bits"


/*
 * The function fiat_p256_cmovznz_u64 is a single-word conditional move.
 * Postconditions:
 *   out1 = (if arg1 = 0 then arg2 else arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 *   arg3: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 */
/*inline*/
func fiat_p256_cmovznz_u64(out1 *uint64, arg1 uint64, arg2 uint64, arg3 uint64) {
  var x1 uint64 = (arg1 * 0xffffffffffffffff)
  var x2 uint64 = ((x1 & arg3) | ((^x1) & arg2))
  *out1 = x2
}

/*
 * The function fiat_p256_mul multiplies two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_p256_mul(out1 *[4]uint64, arg1 *[4]uint64, arg2 *[4]uint64) {
  var x1 uint64 = (arg1[1])
  var x2 uint64 = (arg1[2])
  var x3 uint64 = (arg1[3])
  var x4 uint64 = (arg1[0])
  var x5 uint64
  var x6 uint64
  x5, x6 = bits.Mul64(x4, (arg2[3]))
  var x7 uint64
  var x8 uint64
  x7, x8 = bits.Mul64(x4, (arg2[2]))
  var x9 uint64
  var x10 uint64
  x9, x10 = bits.Mul64(x4, (arg2[1]))
  var x11 uint64
  var x12 uint64
  x11, x12 = bits.Mul64(x4, (arg2[0]))
  var x13 uint64
  var x14 uint64
  x13, x14 = bits.Add64(x12, x9, 0x0)
  var x15 uint64
  var x16 uint64
  x15, x16 = bits.Add64(x10, x7, x14)
  var x17 uint64
  var x18 uint64
  x17, x18 = bits.Add64(x8, x5, x16)
  var x19 uint64 = (x18 + x6)
  var x20 uint64
  var x21 uint64
  x20, x21 = bits.Mul64(x11, 0xffffffff00000001)
  var x22 uint64
  var x23 uint64
  x22, x23 = bits.Mul64(x11, 0xffffffff)
  var x24 uint64
  var x25 uint64
  x24, x25 = bits.Mul64(x11, 0xffffffffffffffff)
  var x26 uint64
  var x27 uint64
  x26, x27 = bits.Add64(x25, x22, 0x0)
  var x28 uint64 = (x27 + x23)
  var x30 uint64
  _, x30 = bits.Add64(x11, x24, 0x0)
  var x31 uint64
  var x32 uint64
  x31, x32 = bits.Add64(x13, x26, x30)
  var x33 uint64
  var x34 uint64
  x33, x34 = bits.Add64(x15, x28, x32)
  var x35 uint64
  var x36 uint64
  x35, x36 = bits.Add64(x17, x20, x34)
  var x37 uint64
  var x38 uint64
  x37, x38 = bits.Add64(x19, x21, x36)
  var x39 uint64
  var x40 uint64
  x39, x40 = bits.Mul64(x1, (arg2[3]))
  var x41 uint64
  var x42 uint64
  x41, x42 = bits.Mul64(x1, (arg2[2]))
  var x43 uint64
  var x44 uint64
  x43, x44 = bits.Mul64(x1, (arg2[1]))
  var x45 uint64
  var x46 uint64
  x45, x46 = bits.Mul64(x1, (arg2[0]))
  var x47 uint64
  var x48 uint64
  x47, x48 = bits.Add64(x46, x43, 0x0)
  var x49 uint64
  var x50 uint64
  x49, x50 = bits.Add64(x44, x41, x48)
  var x51 uint64
  var x52 uint64
  x51, x52 = bits.Add64(x42, x39, x50)
  var x53 uint64 = (x52 + x40)
  var x54 uint64
  var x55 uint64
  x54, x55 = bits.Add64(x31, x45, 0x0)
  var x56 uint64
  var x57 uint64
  x56, x57 = bits.Add64(x33, x47, x55)
  var x58 uint64
  var x59 uint64
  x58, x59 = bits.Add64(x35, x49, x57)
  var x60 uint64
  var x61 uint64
  x60, x61 = bits.Add64(x37, x51, x59)
  var x62 uint64
  var x63 uint64
  x62, x63 = bits.Add64(x38, x53, x61)
  var x64 uint64
  var x65 uint64
  x64, x65 = bits.Mul64(x54, 0xffffffff00000001)
  var x66 uint64
  var x67 uint64
  x66, x67 = bits.Mul64(x54, 0xffffffff)
  var x68 uint64
  var x69 uint64
  x68, x69 = bits.Mul64(x54, 0xffffffffffffffff)
  var x70 uint64
  var x71 uint64
  x70, x71 = bits.Add64(x69, x66, 0x0)
  var x72 uint64 = (x71 + x67)
  var x74 uint64
  _, x74 = bits.Add64(x54, x68, 0x0)
  var x75 uint64
  var x76 uint64
  x75, x76 = bits.Add64(x56, x70, x74)
  var x77 uint64
  var x78 uint64
  x77, x78 = bits.Add64(x58, x72, x76)
  var x79 uint64
  var x80 uint64
  x79, x80 = bits.Add64(x60, x64, x78)
  var x81 uint64
  var x82 uint64
  x81, x82 = bits.Add64(x62, x65, x80)
  var x83 uint64 = (x82 + x63)
  var x84 uint64
  var x85 uint64
  x84, x85 = bits.Mul64(x2, (arg2[3]))
  var x86 uint64
  var x87 uint64
  x86, x87 = bits.Mul64(x2, (arg2[2]))
  var x88 uint64
  var x89 uint64
  x88, x89 = bits.Mul64(x2, (arg2[1]))
  var x90 uint64
  var x91 uint64
  x90, x91 = bits.Mul64(x2, (arg2[0]))
  var x92 uint64
  var x93 uint64
  x92, x93 = bits.Add64(x91, x88, 0x0)
  var x94 uint64
  var x95 uint64
  x94, x95 = bits.Add64(x89, x86, x93)
  var x96 uint64
  var x97 uint64
  x96, x97 = bits.Add64(x87, x84, x95)
  var x98 uint64 = (x97 + x85)
  var x99 uint64
  var x100 uint64
  x99, x100 = bits.Add64(x75, x90, 0x0)
  var x101 uint64
  var x102 uint64
  x101, x102 = bits.Add64(x77, x92, x100)
  var x103 uint64
  var x104 uint64
  x103, x104 = bits.Add64(x79, x94, x102)
  var x105 uint64
  var x106 uint64
  x105, x106 = bits.Add64(x81, x96, x104)
  var x107 uint64
  var x108 uint64
  x107, x108 = bits.Add64(x83, x98, x106)
  var x109 uint64
  var x110 uint64
  x109, x110 = bits.Mul64(x99, 0xffffffff00000001)
  var x111 uint64
  var x112 uint64
  x111, x112 = bits.Mul64(x99, 0xffffffff)
  var x113 uint64
  var x114 uint64
  x113, x114 = bits.Mul64(x99, 0xffffffffffffffff)
  var x115 uint64
  var x116 uint64
  x115, x116 = bits.Add64(x114, x111, 0x0)
  var x117 uint64 = (x116 + x112)
  var x119 uint64
  _, x119 = bits.Add64(x99, x113, 0x0)
  var x120 uint64
  var x121 uint64
  x120, x121 = bits.Add64(x101, x115, x119)
  var x122 uint64
  var x123 uint64
  x122, x123 = bits.Add64(x103, x117, x121)
  var x124 uint64
  var x125 uint64
  x124, x125 = bits.Add64(x105, x109, x123)
  var x126 uint64
  var x127 uint64
  x126, x127 = bits.Add64(x107, x110, x125)
  var x128 uint64 = (x127 + x108)
  var x129 uint64
  var x130 uint64
  x129, x130 = bits.Mul64(x3, (arg2[3]))
  var x131 uint64
  var x132 uint64
  x131, x132 = bits.Mul64(x3, (arg2[2]))
  var x133 uint64
  var x134 uint64
  x133, x134 = bits.Mul64(x3, (arg2[1]))
  var x135 uint64
  var x136 uint64
  x135, x136 = bits.Mul64(x3, (arg2[0]))
  var x137 uint64
  var x138 uint64
  x137, x138 = bits.Add64(x136, x133, 0x0)
  var x139 uint64
  var x140 uint64
  x139, x140 = bits.Add64(x134, x131, x138)
  var x141 uint64
  var x142 uint64
  x141, x142 = bits.Add64(x132, x129, x140)
  var x143 uint64 = (x142 + x130)
  var x144 uint64
  var x145 uint64
  x144, x145 = bits.Add64(x120, x135, 0x0)
  var x146 uint64
  var x147 uint64
  x146, x147 = bits.Add64(x122, x137, x145)
  var x148 uint64
  var x149 uint64
  x148, x149 = bits.Add64(x124, x139, x147)
  var x150 uint64
  var x151 uint64
  x150, x151 = bits.Add64(x126, x141, x149)
  var x152 uint64
  var x153 uint64
  x152, x153 = bits.Add64(x128, x143, x151)
  var x154 uint64
  var x155 uint64
  x154, x155 = bits.Mul64(x144, 0xffffffff00000001)
  var x156 uint64
  var x157 uint64
  x156, x157 = bits.Mul64(x144, 0xffffffff)
  var x158 uint64
  var x159 uint64
  x158, x159 = bits.Mul64(x144, 0xffffffffffffffff)
  var x160 uint64
  var x161 uint64
  x160, x161 = bits.Add64(x159, x156, 0x0)
  var x162 uint64 = (x161 + x157)
  var x164 uint64
  _, x164 = bits.Add64(x144, x158, 0x0)
  var x165 uint64
  var x166 uint64
  x165, x166 = bits.Add64(x146, x160, x164)
  var x167 uint64
  var x168 uint64
  x167, x168 = bits.Add64(x148, x162, x166)
  var x169 uint64
  var x170 uint64
  x169, x170 = bits.Add64(x150, x154, x168)
  var x171 uint64
  var x172 uint64
  x171, x172 = bits.Add64(x152, x155, x170)
  var x173 uint64 = (x172 + x153)
  var x174 uint64
  var x175 uint64
  x174, x175 = bits.Sub64(x165, 0xffffffffffffffff, uint64(0x0))
  var x176 uint64
  var x177 uint64
  x176, x177 = bits.Sub64(x167, 0xffffffff, x175)
  var x178 uint64
  var x179 uint64
  x178, x179 = bits.Sub64(x169, uint64(0x0), x177)
  var x180 uint64
  var x181 uint64
  x180, x181 = bits.Sub64(x171, 0xffffffff00000001, x179)
  var x183 uint64
  _, x183 = bits.Sub64(x173, uint64(0x0), x181)
  var x184 uint64
  fiat_p256_cmovznz_u64(&x184, x183, x174, x165)
  var x185 uint64
  fiat_p256_cmovznz_u64(&x185, x183, x176, x167)
  var x186 uint64
  fiat_p256_cmovznz_u64(&x186, x183, x178, x169)
  var x187 uint64
  fiat_p256_cmovznz_u64(&x187, x183, x180, x171)
  out1[0] = x184
  out1[1] = x185
  out1[2] = x186
  out1[3] = x187
}

/*
 * The function fiat_p256_square squares a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_p256_square(out1 *[4]uint64, arg1 *[4]uint64) {
  var x1 uint64 = (arg1[1])
  var x2 uint64 = (arg1[2])
  var x3 uint64 = (arg1[3])
  var x4 uint64 = (arg1[0])
  var x5 uint64
  var x6 uint64
  x5, x6 = bits.Mul64(x4, (arg1[3]))
  var x7 uint64
  var x8 uint64
  x7, x8 = bits.Mul64(x4, (arg1[2]))
  var x9 uint64
  var x10 uint64
  x9, x10 = bits.Mul64(x4, (arg1[1]))
  var x11 uint64
  var x12 uint64
  x11, x12 = bits.Mul64(x4, (arg1[0]))
  var x13 uint64
  var x14 uint64
  x13, x14 = bits.Add64(x12, x9, 0x0)
  var x15 uint64
  var x16 uint64
  x15, x16 = bits.Add64(x10, x7, x14)
  var x17 uint64
  var x18 uint64
  x17, x18 = bits.Add64(x8, x5, x16)
  var x19 uint64 = (x18 + x6)
  var x20 uint64
  var x21 uint64
  x20, x21 = bits.Mul64(x11, 0xffffffff00000001)
  var x22 uint64
  var x23 uint64
  x22, x23 = bits.Mul64(x11, 0xffffffff)
  var x24 uint64
  var x25 uint64
  x24, x25 = bits.Mul64(x11, 0xffffffffffffffff)
  var x26 uint64
  var x27 uint64
  x26, x27 = bits.Add64(x25, x22, 0x0)
  var x28 uint64 = (x27 + x23)
  var x30 uint64
  _, x30 = bits.Add64(x11, x24, 0x0)
  var x31 uint64
  var x32 uint64
  x31, x32 = bits.Add64(x13, x26, x30)
  var x33 uint64
  var x34 uint64
  x33, x34 = bits.Add64(x15, x28, x32)
  var x35 uint64
  var x36 uint64
  x35, x36 = bits.Add64(x17, x20, x34)
  var x37 uint64
  var x38 uint64
  x37, x38 = bits.Add64(x19, x21, x36)
  var x39 uint64
  var x40 uint64
  x39, x40 = bits.Mul64(x1, (arg1[3]))
  var x41 uint64
  var x42 uint64
  x41, x42 = bits.Mul64(x1, (arg1[2]))
  var x43 uint64
  var x44 uint64
  x43, x44 = bits.Mul64(x1, (arg1[1]))
  var x45 uint64
  var x46 uint64
  x45, x46 = bits.Mul64(x1, (arg1[0]))
  var x47 uint64
  var x48 uint64
  x47, x48 = bits.Add64(x46, x43, 0x0)
  var x49 uint64
  var x50 uint64
  x49, x50 = bits.Add64(x44, x41, x48)
  var x51 uint64
  var x52 uint64
  x51, x52 = bits.Add64(x42, x39, x50)
  var x53 uint64 = (x52 + x40)
  var x54 uint64
  var x55 uint64
  x54, x55 = bits.Add64(x31, x45, 0x0)
  var x56 uint64
  var x57 uint64
  x56, x57 = bits.Add64(x33, x47, x55)
  var x58 uint64
  var x59 uint64
  x58, x59 = bits.Add64(x35, x49, x57)
  var x60 uint64
  var x61 uint64
  x60, x61 = bits.Add64(x37, x51, x59)
  var x62 uint64
  var x63 uint64
  x62, x63 = bits.Add64(x38, x53, x61)
  var x64 uint64
  var x65 uint64
  x64, x65 = bits.Mul64(x54, 0xffffffff00000001)
  var x66 uint64
  var x67 uint64
  x66, x67 = bits.Mul64(x54, 0xffffffff)
  var x68 uint64
  var x69 uint64
  x68, x69 = bits.Mul64(x54, 0xffffffffffffffff)
  var x70 uint64
  var x71 uint64
  x70, x71 = bits.Add64(x69, x66, 0x0)
  var x72 uint64 = (x71 + x67)
  var x74 uint64
  _, x74 = bits.Add64(x54, x68, 0x0)
  var x75 uint64
  var x76 uint64
  x75, x76 = bits.Add64(x56, x70, x74)
  var x77 uint64
  var x78 uint64
  x77, x78 = bits.Add64(x58, x72, x76)
  var x79 uint64
  var x80 uint64
  x79, x80 = bits.Add64(x60, x64, x78)
  var x81 uint64
  var x82 uint64
  x81, x82 = bits.Add64(x62, x65, x80)
  var x83 uint64 = (x82 + x63)
  var x84 uint64
  var x85 uint64
  x84, x85 = bits.Mul64(x2, (arg1[3]))
  var x86 uint64
  var x87 uint64
  x86, x87 = bits.Mul64(x2, (arg1[2]))
  var x88 uint64
  var x89 uint64
  x88, x89 = bits.Mul64(x2, (arg1[1]))
  var x90 uint64
  var x91 uint64
  x90, x91 = bits.Mul64(x2, (arg1[0]))
  var x92 uint64
  var x93 uint64
  x92, x93 = bits.Add64(x91, x88, 0x0)
  var x94 uint64
  var x95 uint64
  x94, x95 = bits.Add64(x89, x86, x93)
  var x96 uint64
  var x97 uint64
  x96, x97 = bits.Add64(x87, x84, x95)
  var x98 uint64 = (x97 + x85)
  var x99 uint64
  var x100 uint64
  x99, x100 = bits.Add64(x75, x90, 0x0)
  var x101 uint64
  var x102 uint64
  x101, x102 = bits.Add64(x77, x92, x100)
  var x103 uint64
  var x104 uint64
  x103, x104 = bits.Add64(x79, x94, x102)
  var x105 uint64
  var x106 uint64
  x105, x106 = bits.Add64(x81, x96, x104)
  var x107 uint64
  var x108 uint64
  x107, x108 = bits.Add64(x83, x98, x106)
  var x109 uint64
  var x110 uint64
  x109, x110 = bits.Mul64(x99, 0xffffffff00000001)
  var x111 uint64
  var x112 uint64
  x111, x112 = bits.Mul64(x99, 0xffffffff)
  var x113 uint64
  var x114 uint64
  x113, x114 = bits.Mul64(x99, 0xffffffffffffffff)
  var x115 uint64
  var x116 uint64
  x115, x116 = bits.Add64(x114, x111, 0x0)
  var x117 uint64 = (x116 + x112)
  var x119 uint64
  _, x119 = bits.Add64(x99, x113, 0x0)
  var x120 uint64
  var x121 uint64
  x120, x121 = bits.Add64(x101, x115, x119)
  var x122 uint64
  var x123 uint64
  x122, x123 = bits.Add64(x103, x117, x121)
  var x124 uint64
  var x125 uint64
  x124, x125 = bits.Add64(x105, x109, x123)
  var x126 uint64
  var x127 uint64
  x126, x127 = bits.Add64(x107, x110, x125)
  var x128 uint64 = (x127 + x108)
  var x129 uint64
  var x130 uint64
  x129, x130 = bits.Mul64(x3, (arg1[3]))
  var x131 uint64
  var x132 uint64
  x131, x132 = bits.Mul64(x3, (arg1[2]))
  var x133 uint64
  var x134 uint64
  x133, x134 = bits.Mul64(x3, (arg1[1]))
  var x135 uint64
  var x136 uint64
  x135, x136 = bits.Mul64(x3, (arg1[0]))
  var x137 uint64
  var x138 uint64
  x137, x138 = bits.Add64(x136, x133, 0x0)
  var x139 uint64
  var x140 uint64
  x139, x140 = bits.Add64(x134, x131, x138)
  var x141 uint64
  var x142 uint64
  x141, x142 = bits.Add64(x132, x129, x140)
  var x143 uint64 = (x142 + x130)
  var x144 uint64
  var x145 uint64
  x144, x145 = bits.Add64(x120, x135, 0x0)
  var x146 uint64
  var x147 uint64
  x146, x147 = bits.Add64(x122, x137, x145)
  var x148 uint64
  var x149 uint64
  x148, x149 = bits.Add64(x124, x139, x147)
  var x150 uint64
  var x151 uint64
  x150, x151 = bits.Add64(x126, x141, x149)
  var x152 uint64
  var x153 uint64
  x152, x153 = bits.Add64(x128, x143, x151)
  var x154 uint64
  var x155 uint64
  x154, x155 = bits.Mul64(x144, 0xffffffff00000001)
  var x156 uint64
  var x157 uint64
  x156, x157 = bits.Mul64(x144, 0xffffffff)
  var x158 uint64
  var x159 uint64
  x158, x159 = bits.Mul64(x144, 0xffffffffffffffff)
  var x160 uint64
  var x161 uint64
  x160, x161 = bits.Add64(x159, x156, 0x0)
  var x162 uint64 = (x161 + x157)
  var x164 uint64
  _, x164 = bits.Add64(x144, x158, 0x0)
  var x165 uint64
  var x166 uint64
  x165, x166 = bits.Add64(x146, x160, x164)
  var x167 uint64
  var x168 uint64
  x167, x168 = bits.Add64(x148, x162, x166)
  var x169 uint64
  var x170 uint64
  x169, x170 = bits.Add64(x150, x154, x168)
  var x171 uint64
  var x172 uint64
  x171, x172 = bits.Add64(x152, x155, x170)
  var x173 uint64 = (x172 + x153)
  var x174 uint64
  var x175 uint64
  x174, x175 = bits.Sub64(x165, 0xffffffffffffffff, uint64(0x0))
  var x176 uint64
  var x177 uint64
  x176, x177 = bits.Sub64(x167, 0xffffffff, x175)
  var x178 uint64
  var x179 uint64
  x178, x179 = bits.Sub64(x169, uint64(0x0), x177)
  var x180 uint64
  var x181 uint64
  x180, x181 = bits.Sub64(x171, 0xffffffff00000001, x179)
  var x183 uint64
  _, x183 = bits.Sub64(x173, uint64(0x0), x181)
  var x184 uint64
  fiat_p256_cmovznz_u64(&x184, x183, x174, x165)
  var x185 uint64
  fiat_p256_cmovznz_u64(&x185, x183, x176, x167)
  var x186 uint64
  fiat_p256_cmovznz_u64(&x186, x183, x178, x169)
  var x187 uint64
  fiat_p256_cmovznz_u64(&x187, x183, x180, x171)
  out1[0] = x184
  out1[1] = x185
  out1[2] = x186
  out1[3] = x187
}

/*
 * The function fiat_p256_add adds two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_p256_add(out1 *[4]uint64, arg1 *[4]uint64, arg2 *[4]uint64) {
  var x1 uint64
  var x2 uint64
  x1, x2 = bits.Add64((arg1[0]), (arg2[0]), 0x0)
  var x3 uint64
  var x4 uint64
  x3, x4 = bits.Add64((arg1[1]), (arg2[1]), x2)
  var x5 uint64
  var x6 uint64
  x5, x6 = bits.Add64((arg1[2]), (arg2[2]), x4)
  var x7 uint64
  var x8 uint64
  x7, x8 = bits.Add64((arg1[3]), (arg2[3]), x6)
  var x9 uint64
  var x10 uint64
  x9, x10 = bits.Sub64(x1, 0xffffffffffffffff, uint64(0x0))
  var x11 uint64
  var x12 uint64
  x11, x12 = bits.Sub64(x3, 0xffffffff, x10)
  var x13 uint64
  var x14 uint64
  x13, x14 = bits.Sub64(x5, uint64(0x0), x12)
  var x15 uint64
  var x16 uint64
  x15, x16 = bits.Sub64(x7, 0xffffffff00000001, x14)
  var x18 uint64
  _, x18 = bits.Sub64(x8, uint64(0x0), x16)
  var x19 uint64
  fiat_p256_cmovznz_u64(&x19, x18, x9, x1)
  var x20 uint64
  fiat_p256_cmovznz_u64(&x20, x18, x11, x3)
  var x21 uint64
  fiat_p256_cmovznz_u64(&x21, x18, x13, x5)
  var x22 uint64
  fiat_p256_cmovznz_u64(&x22, x18, x15, x7)
  out1[0] = x19
  out1[1] = x20
  out1[2] = x21
  out1[3] = x22
}

/*
 * The function fiat_p256_sub subtracts two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_p256_sub(out1 *[4]uint64, arg1 *[4]uint64, arg2 *[4]uint64) {
  var x1 uint64
  var x2 uint64
  x1, x2 = bits.Sub64((arg1[0]), (arg2[0]), 0x0)
  var x3 uint64
  var x4 uint64
  x3, x4 = bits.Sub64((arg1[1]), (arg2[1]), x2)
  var x5 uint64
  var x6 uint64
  x5, x6 = bits.Sub64((arg1[2]), (arg2[2]), x4)
  var x7 uint64
  var x8 uint64
  x7, x8 = bits.Sub64((arg1[3]), (arg2[3]), x6)
  var x9 uint64
  fiat_p256_cmovznz_u64(&x9, x8, uint64(0x0), 0xffffffffffffffff)
  var x10 uint64
  var x11 uint64
  x10, x11 = bits.Add64(x1, (x9 & 0xffffffffffffffff), 0x0)
  var x12 uint64
  var x13 uint64
  x12, x13 = bits.Add64(x3, (x9 & 0xffffffff), x11)
  var x14 uint64
  var x15 uint64
  x14, x15 = bits.Add64(x5, uint64(0x0), x13)
  var x16 uint64
  x16, _ = bits.Add64(x7, (x9 & 0xffffffff00000001), x15)
  out1[0] = x10
  out1[1] = x12
  out1[2] = x14
  out1[3] = x16
}

/*
 * The function fiat_p256_opp negates a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_p256_opp(out1 *[4]uint64, arg1 *[4]uint64) {
  var x1 uint64
  var x2 uint64
  x1, x2 = bits.Sub64(uint64(0x0), (arg1[0]), 0x0)
  var x3 uint64
  var x4 uint64
  x3, x4 = bits.Sub64(uint64(0x0), (arg1[1]), x2)
  var x5 uint64
  var x6 uint64
  x5, x6 = bits.Sub64(uint64(0x0), (arg1[2]), x4)
  var x7 uint64
  var x8 uint64
  x7, x8 = bits.Sub64(uint64(0x0), (arg1[3]), x6)
  var x9 uint64
  fiat_p256_cmovznz_u64(&x9, x8, uint64(0x0), 0xffffffffffffffff)
  var x10 uint64
  var x11 uint64
  x10, x11 = bits.Add64(x1, (x9 & 0xffffffffffffffff), 0x0)
  var x12 uint64
  var x13 uint64
  x12, x13 = bits.Add64(x3, (x9 & 0xffffffff), x11)
  var x14 uint64
  var x15 uint64
  x14, x15 = bits.Add64(x5, uint64(0x0), x13)
  var x16 uint64
  x16, _ = bits.Add64(x7, (x9 & 0xffffffff00000001), x15)
  out1[0] = x10
  out1[1] = x12
  out1[2] = x14
  out1[3] = x16
}

/*
 * The function fiat_p256_from_montgomery translates a field element out of the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = (eval arg1 * ((2^64)⁻¹ mod m)^4) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_p256_from_montgomery(out1 *[4]uint64, arg1 *[4]uint64) {
  var x1 uint64 = (arg1[0])
  var x2 uint64
  var x3 uint64
  x2, x3 = bits.Mul64(x1, 0xffffffff00000001)
  var x4 uint64
  var x5 uint64
  x4, x5 = bits.Mul64(x1, 0xffffffff)
  var x6 uint64
  var x7 uint64
  x6, x7 = bits.Mul64(x1, 0xffffffffffffffff)
  var x8 uint64
  var x9 uint64
  x8, x9 = bits.Add64(x7, x4, 0x0)
  var x11 uint64
  _, x11 = bits.Add64(x1, x6, 0x0)
  var x12 uint64
  var x13 uint64
  x12, x13 = bits.Add64(uint64(0x0), x8, x11)
  var x14 uint64
  var x15 uint64
  x14, x15 = bits.Add64(x12, (arg1[1]), 0x0)
  var x16 uint64
  var x17 uint64
  x16, x17 = bits.Mul64(x14, 0xffffffff00000001)
  var x18 uint64
  var x19 uint64
  x18, x19 = bits.Mul64(x14, 0xffffffff)
  var x20 uint64
  var x21 uint64
  x20, x21 = bits.Mul64(x14, 0xffffffffffffffff)
  var x22 uint64
  var x23 uint64
  x22, x23 = bits.Add64(x21, x18, 0x0)
  var x25 uint64
  _, x25 = bits.Add64(x14, x20, 0x0)
  var x26 uint64
  var x27 uint64
  x26, x27 = bits.Add64((x15 + (x13 + (x9 + x5))), x22, x25)
  var x28 uint64
  var x29 uint64
  x28, x29 = bits.Add64(x2, (x23 + x19), x27)
  var x30 uint64
  var x31 uint64
  x30, x31 = bits.Add64(x3, x16, x29)
  var x32 uint64
  var x33 uint64
  x32, x33 = bits.Add64(x26, (arg1[2]), 0x0)
  var x34 uint64
  var x35 uint64
  x34, x35 = bits.Add64(x28, uint64(0x0), x33)
  var x36 uint64
  var x37 uint64
  x36, x37 = bits.Add64(x30, uint64(0x0), x35)
  var x38 uint64
  var x39 uint64
  x38, x39 = bits.Mul64(x32, 0xffffffff00000001)
  var x40 uint64
  var x41 uint64
  x40, x41 = bits.Mul64(x32, 0xffffffff)
  var x42 uint64
  var x43 uint64
  x42, x43 = bits.Mul64(x32, 0xffffffffffffffff)
  var x44 uint64
  var x45 uint64
  x44, x45 = bits.Add64(x43, x40, 0x0)
  var x47 uint64
  _, x47 = bits.Add64(x32, x42, 0x0)
  var x48 uint64
  var x49 uint64
  x48, x49 = bits.Add64(x34, x44, x47)
  var x50 uint64
  var x51 uint64
  x50, x51 = bits.Add64(x36, (x45 + x41), x49)
  var x52 uint64
  var x53 uint64
  x52, x53 = bits.Add64((x37 + (x31 + x17)), x38, x51)
  var x54 uint64
  var x55 uint64
  x54, x55 = bits.Add64(x48, (arg1[3]), 0x0)
  var x56 uint64
  var x57 uint64
  x56, x57 = bits.Add64(x50, uint64(0x0), x55)
  var x58 uint64
  var x59 uint64
  x58, x59 = bits.Add64(x52, uint64(0x0), x57)
  var x60 uint64
  var x61 uint64
  x60, x61 = bits.Mul64(x54, 0xffffffff00000001)
  var x62 uint64
  var x63 uint64
  x62, x63 = bits.Mul64(x54, 0xffffffff)
  var x64 uint64
  var x65 uint64
  x64, x65 = bits.Mul64(x54, 0xffffffffffffffff)
  var x66 uint64
  var x67 uint64
  x66, x67 = bits.Add64(x65, x62, 0x0)
  var x69 uint64
  _, x69 = bits.Add64(x54, x64, 0x0)
  var x70 uint64
  var x71 uint64
  x70, x71 = bits.Add64(x56, x66, x69)
  var x72 uint64
  var x73 uint64
  x72, x73 = bits.Add64(x58, (x67 + x63), x71)
  var x74 uint64
  var x75 uint64
  x74, x75 = bits.Add64((x59 + (x53 + x39)), x60, x73)
  var x76 uint64 = (x75 + x61)
  var x77 uint64
  var x78 uint64
  x77, x78 = bits.Sub64(x70, 0xffffffffffffffff, uint64(0x0))
  var x79 uint64
  var x80 uint64
  x79, x80 = bits.Sub64(x72, 0xffffffff, x78)
  var x81 uint64
  var x82 uint64
  x81, x82 = bits.Sub64(x74, uint64(0x0), x80)
  var x83 uint64
  var x84 uint64
  x83, x84 = bits.Sub64(x76, 0xffffffff00000001, x82)
  var x86 uint64
  _, x86 = bits.Sub64(uint64(0x0), uint64(0x0), x84)
  var x87 uint64
  fiat_p256_cmovznz_u64(&x87, x86, x77, x70)
  var x88 uint64
  fiat_p256_cmovznz_u64(&x88, x86, x79, x72)
  var x89 uint64
  fiat_p256_cmovznz_u64(&x89, x86, x81, x74)
  var x90 uint64
  fiat_p256_cmovznz_u64(&x90, x86, x83, x76)
  out1[0] = x87
  out1[1] = x88
  out1[2] = x89
  out1[3] = x90
}

/*
 * The function fiat_p256_nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 */
/*inline*/
func fiat_p256_nonzero(out1 *uint64, arg1 *[4]uint64) {
  var x1 uint64 = ((arg1[0]) | ((arg1[1]) | ((arg1[2]) | ((arg1[3]) | uint64(0x0)))))
  *out1 = x1
}

/*
 * The function fiat_p256_selectznz is a multi-limb conditional select.
 * Postconditions:
 *   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_p256_selectznz(out1 *[4]uint64, arg1 uint64, arg2 *[4]uint64, arg3 *[4]uint64) {
  var x1 uint64
  fiat_p256_cmovznz_u64(&x1, arg1, (arg2[0]), (arg3[0]))
  var x2 uint64
  fiat_p256_cmovznz_u64(&x2, arg1, (arg2[1]), (arg3[1]))
  var x3 uint64
  fiat_p256_cmovznz_u64(&x3, arg1, (arg2[2]), (arg3[2]))
  var x4 uint64
  fiat_p256_cmovznz_u64(&x4, arg1, (arg2[3]), (arg3[3]))
  out1[0] = x1
  out1[1] = x2
  out1[2] = x3
  out1[3] = x4
}

/*
 * The function fiat_p256_to_bytes serializes a field element in the Montgomery domain to bytes in little-endian order.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..31]
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
 */
/*inline*/
func fiat_p256_to_bytes(out1 *[32]uint64, arg1 *[4]uint64) {
  var x1 uint64 = (arg1[3])
  var x2 uint64 = (arg1[2])
  var x3 uint64 = (arg1[1])
  var x4 uint64 = (arg1[0])
  var x5 uint64 = (x4 >> 8)
  var x6 uint64 = (x4 & 0xff)
  var x7 uint64 = (x5 >> 8)
  var x8 uint64 = (x5 & 0xff)
  var x9 uint64 = (x7 >> 8)
  var x10 uint64 = (x7 & 0xff)
  var x11 uint64 = (x9 >> 8)
  var x12 uint64 = (x9 & 0xff)
  var x13 uint64 = (x11 >> 8)
  var x14 uint64 = (x11 & 0xff)
  var x15 uint64 = (x13 >> 8)
  var x16 uint64 = (x13 & 0xff)
  var x17 uint64 = (x15 >> 8)
  var x18 uint64 = (x15 & 0xff)
  var x19 uint64 = (x17 & 0xff)
  var x20 uint64 = (x3 >> 8)
  var x21 uint64 = (x3 & 0xff)
  var x22 uint64 = (x20 >> 8)
  var x23 uint64 = (x20 & 0xff)
  var x24 uint64 = (x22 >> 8)
  var x25 uint64 = (x22 & 0xff)
  var x26 uint64 = (x24 >> 8)
  var x27 uint64 = (x24 & 0xff)
  var x28 uint64 = (x26 >> 8)
  var x29 uint64 = (x26 & 0xff)
  var x30 uint64 = (x28 >> 8)
  var x31 uint64 = (x28 & 0xff)
  var x32 uint64 = (x30 >> 8)
  var x33 uint64 = (x30 & 0xff)
  var x34 uint64 = (x32 & 0xff)
  var x35 uint64 = (x2 >> 8)
  var x36 uint64 = (x2 & 0xff)
  var x37 uint64 = (x35 >> 8)
  var x38 uint64 = (x35 & 0xff)
  var x39 uint64 = (x37 >> 8)
  var x40 uint64 = (x37 & 0xff)
  var x41 uint64 = (x39 >> 8)
  var x42 uint64 = (x39 & 0xff)
  var x43 uint64 = (x41 >> 8)
  var x44 uint64 = (x41 & 0xff)
  var x45 uint64 = (x43 >> 8)
  var x46 uint64 = (x43 & 0xff)
  var x47 uint64 = (x45 >> 8)
  var x48 uint64 = (x45 & 0xff)
  var x49 uint64 = (x47 & 0xff)
  var x50 uint64 = (x1 >> 8)
  var x51 uint64 = (x1 & 0xff)
  var x52 uint64 = (x50 >> 8)
  var x53 uint64 = (x50 & 0xff)
  var x54 uint64 = (x52 >> 8)
  var x55 uint64 = (x52 & 0xff)
  var x56 uint64 = (x54 >> 8)
  var x57 uint64 = (x54 & 0xff)
  var x58 uint64 = (x56 >> 8)
  var x59 uint64 = (x56 & 0xff)
  var x60 uint64 = (x58 >> 8)
  var x61 uint64 = (x58 & 0xff)
  var x62 uint64 = (x60 >> 8)
  var x63 uint64 = (x60 & 0xff)
  out1[0] = x6
  out1[1] = x8
  out1[2] = x10
  out1[3] = x12
  out1[4] = x14
  out1[5] = x16
  out1[6] = x18
  out1[7] = x19
  out1[8] = x21
  out1[9] = x23
  out1[10] = x25
  out1[11] = x27
  out1[12] = x29
  out1[13] = x31
  out1[14] = x33
  out1[15] = x34
  out1[16] = x36
  out1[17] = x38
  out1[18] = x40
  out1[19] = x42
  out1[20] = x44
  out1[21] = x46
  out1[22] = x48
  out1[23] = x49
  out1[24] = x51
  out1[25] = x53
  out1[26] = x55
  out1[27] = x57
  out1[28] = x59
  out1[29] = x61
  out1[30] = x63
  out1[31] = x62
}

/*
 * The function fiat_p256_from_bytes deserializes a field element in the Montgomery domain from bytes in little-endian order.
 * Preconditions:
 *   0 ≤ bytes_eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = bytes_eval arg1 mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_p256_from_bytes(out1 *[4]uint64, arg1 *[32]uint64) {
  var x1 uint64 = ((arg1[31]) << 56)
  var x2 uint64 = ((arg1[30]) << 48)
  var x3 uint64 = ((arg1[29]) << 40)
  var x4 uint64 = ((arg1[28]) << 32)
  var x5 uint64 = ((arg1[27]) << 24)
  var x6 uint64 = ((arg1[26]) << 16)
  var x7 uint64 = ((arg1[25]) << 8)
  var x8 uint64 = (arg1[24])
  var x9 uint64 = ((arg1[23]) << 56)
  var x10 uint64 = ((arg1[22]) << 48)
  var x11 uint64 = ((arg1[21]) << 40)
  var x12 uint64 = ((arg1[20]) << 32)
  var x13 uint64 = ((arg1[19]) << 24)
  var x14 uint64 = ((arg1[18]) << 16)
  var x15 uint64 = ((arg1[17]) << 8)
  var x16 uint64 = (arg1[16])
  var x17 uint64 = ((arg1[15]) << 56)
  var x18 uint64 = ((arg1[14]) << 48)
  var x19 uint64 = ((arg1[13]) << 40)
  var x20 uint64 = ((arg1[12]) << 32)
  var x21 uint64 = ((arg1[11]) << 24)
  var x22 uint64 = ((arg1[10]) << 16)
  var x23 uint64 = ((arg1[9]) << 8)
  var x24 uint64 = (arg1[8])
  var x25 uint64 = ((arg1[7]) << 56)
  var x26 uint64 = ((arg1[6]) << 48)
  var x27 uint64 = ((arg1[5]) << 40)
  var x28 uint64 = ((arg1[4]) << 32)
  var x29 uint64 = ((arg1[3]) << 24)
  var x30 uint64 = ((arg1[2]) << 16)
  var x31 uint64 = ((arg1[1]) << 8)
  var x32 uint64 = (arg1[0])
  var x33 uint64 = (x32 + (x31 + (x30 + (x29 + (x28 + (x27 + (x26 + x25)))))))
  var x34 uint64 = (x33 & 0xffffffffffffffff)
  var x35 uint64 = (x8 + (x7 + (x6 + (x5 + (x4 + (x3 + (x2 + x1)))))))
  var x36 uint64 = (x16 + (x15 + (x14 + (x13 + (x12 + (x11 + (x10 + x9)))))))
  var x37 uint64 = (x24 + (x23 + (x22 + (x21 + (x20 + (x19 + (x18 + x17)))))))
  var x38 uint64 = (x37 & 0xffffffffffffffff)
  var x39 uint64 = (x36 & 0xffffffffffffffff)
  out1[0] = x34
  out1[1] = x38
  out1[2] = x39
  out1[3] = x35
}

