/* Autogenerated: src/ExtractionOCaml/word_by_word_montgomery --lang Go --no-wide-int --cmovznz-by-mul p256 64 '2^256 - 2^224 + 2^192 + 2^96 - 1' mul square add sub opp from_montgomery to_montgomery nonzero selectznz to_bytes from_bytes */
/* curve description: p256 */
/* machine_wordsize = 64 (from "64") */
/* requested operations: mul, square, add, sub, opp, from_montgomery, to_montgomery, nonzero, selectznz, to_bytes, from_bytes */
/* m = 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff (from "2^256 - 2^224 + 2^192 + 2^96 - 1") */
/*                                                                    */
/* NOTE: In addition to the bounds specified above each function, all */
/*   functions synthesized for this Montgomery arithmetic require the */
/*   input to be strictly less than the prime modulus (m), and also   */
/*   require the input to be in the unique saturated representation.  */
/*   All functions also ensure that these two properties are true of  */
/*   return values.                                                   */
/*  */
/* Computed values: */
/* eval z = z[0] + (z[1] << 64) + (z[2] << 128) + (z[3] << 192) */
/* bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17] << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168) + (z[22] << 176) + (z[23] << 184) + (z[24] << 192) + (z[25] << 200) + (z[26] << 208) + (z[27] << 216) + (z[28] << 224) + (z[29] << 232) + (z[30] << 240) + (z[31] << 248) */

package fiat_p256

import "math/bits"
type fiat_p256_uint1 uint8
type fiat_p256_int1 int8

/* The function fiat_p256_addcarryx_u64 is a thin wrapper around bits.Add64 that uses fiat_p256_uint1 rather than uint64 */
func fiat_p256_addcarryx_u64(x uint64, y uint64, carry fiat_p256_uint1) (uint64, fiat_p256_uint1) {
  var sum uint64
  var carryOut uint64
  sum, carryOut = bits.Add64(x, y, uint64(carry))
  return sum, fiat_p256_uint1(carryOut)
}

/* The function fiat_p256_subborrowx_u64 is a thin wrapper around bits.Sub64 that uses fiat_p256_uint1 rather than uint64 */
func fiat_p256_subborrowx_u64(x uint64, y uint64, carry fiat_p256_uint1) (uint64, fiat_p256_uint1) {
  var sum uint64
  var carryOut uint64
  sum, carryOut = bits.Sub64(x, y, uint64(carry))
  return sum, fiat_p256_uint1(carryOut)
}


/*
 * The function fiat_p256_cmovznz_u64 is a single-word conditional move.
 * Postconditions:
 *   out1 = (if arg1 = 0 then arg2 else arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 *   arg3: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 */
/*inline*/
func fiat_p256_cmovznz_u64(out1 *uint64, arg1 fiat_p256_uint1, arg2 uint64, arg3 uint64) {
  var x1 uint64 = (uint64(arg1) * 0xffffffffffffffff)
  var x2 uint64 = ((x1 & arg3) | ((^x1) & arg2))
  *out1 = x2
}

/*
 * The function fiat_p256_mul multiplies two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_p256_mul(out1 *[4]uint64, arg1 *[4]uint64, arg2 *[4]uint64) {
  var x1 uint64 = (arg1[1])
  var x2 uint64 = (arg1[2])
  var x3 uint64 = (arg1[3])
  var x4 uint64 = (arg1[0])
  var x5 uint64
  var x6 uint64
  x6, x5 = bits.Mul64(x4, (arg2[3]))
  var x7 uint64
  var x8 uint64
  x8, x7 = bits.Mul64(x4, (arg2[2]))
  var x9 uint64
  var x10 uint64
  x10, x9 = bits.Mul64(x4, (arg2[1]))
  var x11 uint64
  var x12 uint64
  x12, x11 = bits.Mul64(x4, (arg2[0]))
  var x13 uint64
  var x14 fiat_p256_uint1
  x13, x14 = fiat_p256_addcarryx_u64(x12, x9, 0x0)
  var x15 uint64
  var x16 fiat_p256_uint1
  x15, x16 = fiat_p256_addcarryx_u64(x10, x7, x14)
  var x17 uint64
  var x18 fiat_p256_uint1
  x17, x18 = fiat_p256_addcarryx_u64(x8, x5, x16)
  var x19 uint64 = (uint64(x18) + x6)
  var x20 uint64
  var x21 uint64
  x21, x20 = bits.Mul64(x11, 0xffffffff00000001)
  var x22 uint64
  var x23 uint64
  x23, x22 = bits.Mul64(x11, 0xffffffff)
  var x24 uint64
  var x25 uint64
  x25, x24 = bits.Mul64(x11, 0xffffffffffffffff)
  var x26 uint64
  var x27 fiat_p256_uint1
  x26, x27 = fiat_p256_addcarryx_u64(x25, x22, 0x0)
  var x28 uint64 = (uint64(x27) + x23)
  var x30 fiat_p256_uint1
  _, x30 = fiat_p256_addcarryx_u64(x11, x24, 0x0)
  var x31 uint64
  var x32 fiat_p256_uint1
  x31, x32 = fiat_p256_addcarryx_u64(x13, x26, x30)
  var x33 uint64
  var x34 fiat_p256_uint1
  x33, x34 = fiat_p256_addcarryx_u64(x15, x28, x32)
  var x35 uint64
  var x36 fiat_p256_uint1
  x35, x36 = fiat_p256_addcarryx_u64(x17, x20, x34)
  var x37 uint64
  var x38 fiat_p256_uint1
  x37, x38 = fiat_p256_addcarryx_u64(x19, x21, x36)
  var x39 uint64
  var x40 uint64
  x40, x39 = bits.Mul64(x1, (arg2[3]))
  var x41 uint64
  var x42 uint64
  x42, x41 = bits.Mul64(x1, (arg2[2]))
  var x43 uint64
  var x44 uint64
  x44, x43 = bits.Mul64(x1, (arg2[1]))
  var x45 uint64
  var x46 uint64
  x46, x45 = bits.Mul64(x1, (arg2[0]))
  var x47 uint64
  var x48 fiat_p256_uint1
  x47, x48 = fiat_p256_addcarryx_u64(x46, x43, 0x0)
  var x49 uint64
  var x50 fiat_p256_uint1
  x49, x50 = fiat_p256_addcarryx_u64(x44, x41, x48)
  var x51 uint64
  var x52 fiat_p256_uint1
  x51, x52 = fiat_p256_addcarryx_u64(x42, x39, x50)
  var x53 uint64 = (uint64(x52) + x40)
  var x54 uint64
  var x55 fiat_p256_uint1
  x54, x55 = fiat_p256_addcarryx_u64(x31, x45, 0x0)
  var x56 uint64
  var x57 fiat_p256_uint1
  x56, x57 = fiat_p256_addcarryx_u64(x33, x47, x55)
  var x58 uint64
  var x59 fiat_p256_uint1
  x58, x59 = fiat_p256_addcarryx_u64(x35, x49, x57)
  var x60 uint64
  var x61 fiat_p256_uint1
  x60, x61 = fiat_p256_addcarryx_u64(x37, x51, x59)
  var x62 uint64
  var x63 fiat_p256_uint1
  x62, x63 = fiat_p256_addcarryx_u64(uint64(x38), x53, x61)
  var x64 uint64
  var x65 uint64
  x65, x64 = bits.Mul64(x54, 0xffffffff00000001)
  var x66 uint64
  var x67 uint64
  x67, x66 = bits.Mul64(x54, 0xffffffff)
  var x68 uint64
  var x69 uint64
  x69, x68 = bits.Mul64(x54, 0xffffffffffffffff)
  var x70 uint64
  var x71 fiat_p256_uint1
  x70, x71 = fiat_p256_addcarryx_u64(x69, x66, 0x0)
  var x72 uint64 = (uint64(x71) + x67)
  var x74 fiat_p256_uint1
  _, x74 = fiat_p256_addcarryx_u64(x54, x68, 0x0)
  var x75 uint64
  var x76 fiat_p256_uint1
  x75, x76 = fiat_p256_addcarryx_u64(x56, x70, x74)
  var x77 uint64
  var x78 fiat_p256_uint1
  x77, x78 = fiat_p256_addcarryx_u64(x58, x72, x76)
  var x79 uint64
  var x80 fiat_p256_uint1
  x79, x80 = fiat_p256_addcarryx_u64(x60, x64, x78)
  var x81 uint64
  var x82 fiat_p256_uint1
  x81, x82 = fiat_p256_addcarryx_u64(x62, x65, x80)
  var x83 uint64 = (uint64(x82) + uint64(x63))
  var x84 uint64
  var x85 uint64
  x85, x84 = bits.Mul64(x2, (arg2[3]))
  var x86 uint64
  var x87 uint64
  x87, x86 = bits.Mul64(x2, (arg2[2]))
  var x88 uint64
  var x89 uint64
  x89, x88 = bits.Mul64(x2, (arg2[1]))
  var x90 uint64
  var x91 uint64
  x91, x90 = bits.Mul64(x2, (arg2[0]))
  var x92 uint64
  var x93 fiat_p256_uint1
  x92, x93 = fiat_p256_addcarryx_u64(x91, x88, 0x0)
  var x94 uint64
  var x95 fiat_p256_uint1
  x94, x95 = fiat_p256_addcarryx_u64(x89, x86, x93)
  var x96 uint64
  var x97 fiat_p256_uint1
  x96, x97 = fiat_p256_addcarryx_u64(x87, x84, x95)
  var x98 uint64 = (uint64(x97) + x85)
  var x99 uint64
  var x100 fiat_p256_uint1
  x99, x100 = fiat_p256_addcarryx_u64(x75, x90, 0x0)
  var x101 uint64
  var x102 fiat_p256_uint1
  x101, x102 = fiat_p256_addcarryx_u64(x77, x92, x100)
  var x103 uint64
  var x104 fiat_p256_uint1
  x103, x104 = fiat_p256_addcarryx_u64(x79, x94, x102)
  var x105 uint64
  var x106 fiat_p256_uint1
  x105, x106 = fiat_p256_addcarryx_u64(x81, x96, x104)
  var x107 uint64
  var x108 fiat_p256_uint1
  x107, x108 = fiat_p256_addcarryx_u64(x83, x98, x106)
  var x109 uint64
  var x110 uint64
  x110, x109 = bits.Mul64(x99, 0xffffffff00000001)
  var x111 uint64
  var x112 uint64
  x112, x111 = bits.Mul64(x99, 0xffffffff)
  var x113 uint64
  var x114 uint64
  x114, x113 = bits.Mul64(x99, 0xffffffffffffffff)
  var x115 uint64
  var x116 fiat_p256_uint1
  x115, x116 = fiat_p256_addcarryx_u64(x114, x111, 0x0)
  var x117 uint64 = (uint64(x116) + x112)
  var x119 fiat_p256_uint1
  _, x119 = fiat_p256_addcarryx_u64(x99, x113, 0x0)
  var x120 uint64
  var x121 fiat_p256_uint1
  x120, x121 = fiat_p256_addcarryx_u64(x101, x115, x119)
  var x122 uint64
  var x123 fiat_p256_uint1
  x122, x123 = fiat_p256_addcarryx_u64(x103, x117, x121)
  var x124 uint64
  var x125 fiat_p256_uint1
  x124, x125 = fiat_p256_addcarryx_u64(x105, x109, x123)
  var x126 uint64
  var x127 fiat_p256_uint1
  x126, x127 = fiat_p256_addcarryx_u64(x107, x110, x125)
  var x128 uint64 = (uint64(x127) + uint64(x108))
  var x129 uint64
  var x130 uint64
  x130, x129 = bits.Mul64(x3, (arg2[3]))
  var x131 uint64
  var x132 uint64
  x132, x131 = bits.Mul64(x3, (arg2[2]))
  var x133 uint64
  var x134 uint64
  x134, x133 = bits.Mul64(x3, (arg2[1]))
  var x135 uint64
  var x136 uint64
  x136, x135 = bits.Mul64(x3, (arg2[0]))
  var x137 uint64
  var x138 fiat_p256_uint1
  x137, x138 = fiat_p256_addcarryx_u64(x136, x133, 0x0)
  var x139 uint64
  var x140 fiat_p256_uint1
  x139, x140 = fiat_p256_addcarryx_u64(x134, x131, x138)
  var x141 uint64
  var x142 fiat_p256_uint1
  x141, x142 = fiat_p256_addcarryx_u64(x132, x129, x140)
  var x143 uint64 = (uint64(x142) + x130)
  var x144 uint64
  var x145 fiat_p256_uint1
  x144, x145 = fiat_p256_addcarryx_u64(x120, x135, 0x0)
  var x146 uint64
  var x147 fiat_p256_uint1
  x146, x147 = fiat_p256_addcarryx_u64(x122, x137, x145)
  var x148 uint64
  var x149 fiat_p256_uint1
  x148, x149 = fiat_p256_addcarryx_u64(x124, x139, x147)
  var x150 uint64
  var x151 fiat_p256_uint1
  x150, x151 = fiat_p256_addcarryx_u64(x126, x141, x149)
  var x152 uint64
  var x153 fiat_p256_uint1
  x152, x153 = fiat_p256_addcarryx_u64(x128, x143, x151)
  var x154 uint64
  var x155 uint64
  x155, x154 = bits.Mul64(x144, 0xffffffff00000001)
  var x156 uint64
  var x157 uint64
  x157, x156 = bits.Mul64(x144, 0xffffffff)
  var x158 uint64
  var x159 uint64
  x159, x158 = bits.Mul64(x144, 0xffffffffffffffff)
  var x160 uint64
  var x161 fiat_p256_uint1
  x160, x161 = fiat_p256_addcarryx_u64(x159, x156, 0x0)
  var x162 uint64 = (uint64(x161) + x157)
  var x164 fiat_p256_uint1
  _, x164 = fiat_p256_addcarryx_u64(x144, x158, 0x0)
  var x165 uint64
  var x166 fiat_p256_uint1
  x165, x166 = fiat_p256_addcarryx_u64(x146, x160, x164)
  var x167 uint64
  var x168 fiat_p256_uint1
  x167, x168 = fiat_p256_addcarryx_u64(x148, x162, x166)
  var x169 uint64
  var x170 fiat_p256_uint1
  x169, x170 = fiat_p256_addcarryx_u64(x150, x154, x168)
  var x171 uint64
  var x172 fiat_p256_uint1
  x171, x172 = fiat_p256_addcarryx_u64(x152, x155, x170)
  var x173 uint64 = (uint64(x172) + uint64(x153))
  var x174 uint64
  var x175 fiat_p256_uint1
  x174, x175 = fiat_p256_subborrowx_u64(x165, 0xffffffffffffffff, 0x0)
  var x176 uint64
  var x177 fiat_p256_uint1
  x176, x177 = fiat_p256_subborrowx_u64(x167, 0xffffffff, x175)
  var x178 uint64
  var x179 fiat_p256_uint1
  x178, x179 = fiat_p256_subborrowx_u64(x169, uint64(0x0), x177)
  var x180 uint64
  var x181 fiat_p256_uint1
  x180, x181 = fiat_p256_subborrowx_u64(x171, 0xffffffff00000001, x179)
  var x183 fiat_p256_uint1
  _, x183 = fiat_p256_subborrowx_u64(x173, uint64(0x0), x181)
  var x184 uint64
  fiat_p256_cmovznz_u64(&x184, x183, x174, x165)
  var x185 uint64
  fiat_p256_cmovznz_u64(&x185, x183, x176, x167)
  var x186 uint64
  fiat_p256_cmovznz_u64(&x186, x183, x178, x169)
  var x187 uint64
  fiat_p256_cmovznz_u64(&x187, x183, x180, x171)
  out1[0] = x184
  out1[1] = x185
  out1[2] = x186
  out1[3] = x187
}

/*
 * The function fiat_p256_square squares a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_p256_square(out1 *[4]uint64, arg1 *[4]uint64) {
  var x1 uint64 = (arg1[1])
  var x2 uint64 = (arg1[2])
  var x3 uint64 = (arg1[3])
  var x4 uint64 = (arg1[0])
  var x5 uint64
  var x6 uint64
  x6, x5 = bits.Mul64(x4, (arg1[3]))
  var x7 uint64
  var x8 uint64
  x8, x7 = bits.Mul64(x4, (arg1[2]))
  var x9 uint64
  var x10 uint64
  x10, x9 = bits.Mul64(x4, (arg1[1]))
  var x11 uint64
  var x12 uint64
  x12, x11 = bits.Mul64(x4, (arg1[0]))
  var x13 uint64
  var x14 fiat_p256_uint1
  x13, x14 = fiat_p256_addcarryx_u64(x12, x9, 0x0)
  var x15 uint64
  var x16 fiat_p256_uint1
  x15, x16 = fiat_p256_addcarryx_u64(x10, x7, x14)
  var x17 uint64
  var x18 fiat_p256_uint1
  x17, x18 = fiat_p256_addcarryx_u64(x8, x5, x16)
  var x19 uint64 = (uint64(x18) + x6)
  var x20 uint64
  var x21 uint64
  x21, x20 = bits.Mul64(x11, 0xffffffff00000001)
  var x22 uint64
  var x23 uint64
  x23, x22 = bits.Mul64(x11, 0xffffffff)
  var x24 uint64
  var x25 uint64
  x25, x24 = bits.Mul64(x11, 0xffffffffffffffff)
  var x26 uint64
  var x27 fiat_p256_uint1
  x26, x27 = fiat_p256_addcarryx_u64(x25, x22, 0x0)
  var x28 uint64 = (uint64(x27) + x23)
  var x30 fiat_p256_uint1
  _, x30 = fiat_p256_addcarryx_u64(x11, x24, 0x0)
  var x31 uint64
  var x32 fiat_p256_uint1
  x31, x32 = fiat_p256_addcarryx_u64(x13, x26, x30)
  var x33 uint64
  var x34 fiat_p256_uint1
  x33, x34 = fiat_p256_addcarryx_u64(x15, x28, x32)
  var x35 uint64
  var x36 fiat_p256_uint1
  x35, x36 = fiat_p256_addcarryx_u64(x17, x20, x34)
  var x37 uint64
  var x38 fiat_p256_uint1
  x37, x38 = fiat_p256_addcarryx_u64(x19, x21, x36)
  var x39 uint64
  var x40 uint64
  x40, x39 = bits.Mul64(x1, (arg1[3]))
  var x41 uint64
  var x42 uint64
  x42, x41 = bits.Mul64(x1, (arg1[2]))
  var x43 uint64
  var x44 uint64
  x44, x43 = bits.Mul64(x1, (arg1[1]))
  var x45 uint64
  var x46 uint64
  x46, x45 = bits.Mul64(x1, (arg1[0]))
  var x47 uint64
  var x48 fiat_p256_uint1
  x47, x48 = fiat_p256_addcarryx_u64(x46, x43, 0x0)
  var x49 uint64
  var x50 fiat_p256_uint1
  x49, x50 = fiat_p256_addcarryx_u64(x44, x41, x48)
  var x51 uint64
  var x52 fiat_p256_uint1
  x51, x52 = fiat_p256_addcarryx_u64(x42, x39, x50)
  var x53 uint64 = (uint64(x52) + x40)
  var x54 uint64
  var x55 fiat_p256_uint1
  x54, x55 = fiat_p256_addcarryx_u64(x31, x45, 0x0)
  var x56 uint64
  var x57 fiat_p256_uint1
  x56, x57 = fiat_p256_addcarryx_u64(x33, x47, x55)
  var x58 uint64
  var x59 fiat_p256_uint1
  x58, x59 = fiat_p256_addcarryx_u64(x35, x49, x57)
  var x60 uint64
  var x61 fiat_p256_uint1
  x60, x61 = fiat_p256_addcarryx_u64(x37, x51, x59)
  var x62 uint64
  var x63 fiat_p256_uint1
  x62, x63 = fiat_p256_addcarryx_u64(uint64(x38), x53, x61)
  var x64 uint64
  var x65 uint64
  x65, x64 = bits.Mul64(x54, 0xffffffff00000001)
  var x66 uint64
  var x67 uint64
  x67, x66 = bits.Mul64(x54, 0xffffffff)
  var x68 uint64
  var x69 uint64
  x69, x68 = bits.Mul64(x54, 0xffffffffffffffff)
  var x70 uint64
  var x71 fiat_p256_uint1
  x70, x71 = fiat_p256_addcarryx_u64(x69, x66, 0x0)
  var x72 uint64 = (uint64(x71) + x67)
  var x74 fiat_p256_uint1
  _, x74 = fiat_p256_addcarryx_u64(x54, x68, 0x0)
  var x75 uint64
  var x76 fiat_p256_uint1
  x75, x76 = fiat_p256_addcarryx_u64(x56, x70, x74)
  var x77 uint64
  var x78 fiat_p256_uint1
  x77, x78 = fiat_p256_addcarryx_u64(x58, x72, x76)
  var x79 uint64
  var x80 fiat_p256_uint1
  x79, x80 = fiat_p256_addcarryx_u64(x60, x64, x78)
  var x81 uint64
  var x82 fiat_p256_uint1
  x81, x82 = fiat_p256_addcarryx_u64(x62, x65, x80)
  var x83 uint64 = (uint64(x82) + uint64(x63))
  var x84 uint64
  var x85 uint64
  x85, x84 = bits.Mul64(x2, (arg1[3]))
  var x86 uint64
  var x87 uint64
  x87, x86 = bits.Mul64(x2, (arg1[2]))
  var x88 uint64
  var x89 uint64
  x89, x88 = bits.Mul64(x2, (arg1[1]))
  var x90 uint64
  var x91 uint64
  x91, x90 = bits.Mul64(x2, (arg1[0]))
  var x92 uint64
  var x93 fiat_p256_uint1
  x92, x93 = fiat_p256_addcarryx_u64(x91, x88, 0x0)
  var x94 uint64
  var x95 fiat_p256_uint1
  x94, x95 = fiat_p256_addcarryx_u64(x89, x86, x93)
  var x96 uint64
  var x97 fiat_p256_uint1
  x96, x97 = fiat_p256_addcarryx_u64(x87, x84, x95)
  var x98 uint64 = (uint64(x97) + x85)
  var x99 uint64
  var x100 fiat_p256_uint1
  x99, x100 = fiat_p256_addcarryx_u64(x75, x90, 0x0)
  var x101 uint64
  var x102 fiat_p256_uint1
  x101, x102 = fiat_p256_addcarryx_u64(x77, x92, x100)
  var x103 uint64
  var x104 fiat_p256_uint1
  x103, x104 = fiat_p256_addcarryx_u64(x79, x94, x102)
  var x105 uint64
  var x106 fiat_p256_uint1
  x105, x106 = fiat_p256_addcarryx_u64(x81, x96, x104)
  var x107 uint64
  var x108 fiat_p256_uint1
  x107, x108 = fiat_p256_addcarryx_u64(x83, x98, x106)
  var x109 uint64
  var x110 uint64
  x110, x109 = bits.Mul64(x99, 0xffffffff00000001)
  var x111 uint64
  var x112 uint64
  x112, x111 = bits.Mul64(x99, 0xffffffff)
  var x113 uint64
  var x114 uint64
  x114, x113 = bits.Mul64(x99, 0xffffffffffffffff)
  var x115 uint64
  var x116 fiat_p256_uint1
  x115, x116 = fiat_p256_addcarryx_u64(x114, x111, 0x0)
  var x117 uint64 = (uint64(x116) + x112)
  var x119 fiat_p256_uint1
  _, x119 = fiat_p256_addcarryx_u64(x99, x113, 0x0)
  var x120 uint64
  var x121 fiat_p256_uint1
  x120, x121 = fiat_p256_addcarryx_u64(x101, x115, x119)
  var x122 uint64
  var x123 fiat_p256_uint1
  x122, x123 = fiat_p256_addcarryx_u64(x103, x117, x121)
  var x124 uint64
  var x125 fiat_p256_uint1
  x124, x125 = fiat_p256_addcarryx_u64(x105, x109, x123)
  var x126 uint64
  var x127 fiat_p256_uint1
  x126, x127 = fiat_p256_addcarryx_u64(x107, x110, x125)
  var x128 uint64 = (uint64(x127) + uint64(x108))
  var x129 uint64
  var x130 uint64
  x130, x129 = bits.Mul64(x3, (arg1[3]))
  var x131 uint64
  var x132 uint64
  x132, x131 = bits.Mul64(x3, (arg1[2]))
  var x133 uint64
  var x134 uint64
  x134, x133 = bits.Mul64(x3, (arg1[1]))
  var x135 uint64
  var x136 uint64
  x136, x135 = bits.Mul64(x3, (arg1[0]))
  var x137 uint64
  var x138 fiat_p256_uint1
  x137, x138 = fiat_p256_addcarryx_u64(x136, x133, 0x0)
  var x139 uint64
  var x140 fiat_p256_uint1
  x139, x140 = fiat_p256_addcarryx_u64(x134, x131, x138)
  var x141 uint64
  var x142 fiat_p256_uint1
  x141, x142 = fiat_p256_addcarryx_u64(x132, x129, x140)
  var x143 uint64 = (uint64(x142) + x130)
  var x144 uint64
  var x145 fiat_p256_uint1
  x144, x145 = fiat_p256_addcarryx_u64(x120, x135, 0x0)
  var x146 uint64
  var x147 fiat_p256_uint1
  x146, x147 = fiat_p256_addcarryx_u64(x122, x137, x145)
  var x148 uint64
  var x149 fiat_p256_uint1
  x148, x149 = fiat_p256_addcarryx_u64(x124, x139, x147)
  var x150 uint64
  var x151 fiat_p256_uint1
  x150, x151 = fiat_p256_addcarryx_u64(x126, x141, x149)
  var x152 uint64
  var x153 fiat_p256_uint1
  x152, x153 = fiat_p256_addcarryx_u64(x128, x143, x151)
  var x154 uint64
  var x155 uint64
  x155, x154 = bits.Mul64(x144, 0xffffffff00000001)
  var x156 uint64
  var x157 uint64
  x157, x156 = bits.Mul64(x144, 0xffffffff)
  var x158 uint64
  var x159 uint64
  x159, x158 = bits.Mul64(x144, 0xffffffffffffffff)
  var x160 uint64
  var x161 fiat_p256_uint1
  x160, x161 = fiat_p256_addcarryx_u64(x159, x156, 0x0)
  var x162 uint64 = (uint64(x161) + x157)
  var x164 fiat_p256_uint1
  _, x164 = fiat_p256_addcarryx_u64(x144, x158, 0x0)
  var x165 uint64
  var x166 fiat_p256_uint1
  x165, x166 = fiat_p256_addcarryx_u64(x146, x160, x164)
  var x167 uint64
  var x168 fiat_p256_uint1
  x167, x168 = fiat_p256_addcarryx_u64(x148, x162, x166)
  var x169 uint64
  var x170 fiat_p256_uint1
  x169, x170 = fiat_p256_addcarryx_u64(x150, x154, x168)
  var x171 uint64
  var x172 fiat_p256_uint1
  x171, x172 = fiat_p256_addcarryx_u64(x152, x155, x170)
  var x173 uint64 = (uint64(x172) + uint64(x153))
  var x174 uint64
  var x175 fiat_p256_uint1
  x174, x175 = fiat_p256_subborrowx_u64(x165, 0xffffffffffffffff, 0x0)
  var x176 uint64
  var x177 fiat_p256_uint1
  x176, x177 = fiat_p256_subborrowx_u64(x167, 0xffffffff, x175)
  var x178 uint64
  var x179 fiat_p256_uint1
  x178, x179 = fiat_p256_subborrowx_u64(x169, uint64(0x0), x177)
  var x180 uint64
  var x181 fiat_p256_uint1
  x180, x181 = fiat_p256_subborrowx_u64(x171, 0xffffffff00000001, x179)
  var x183 fiat_p256_uint1
  _, x183 = fiat_p256_subborrowx_u64(x173, uint64(0x0), x181)
  var x184 uint64
  fiat_p256_cmovznz_u64(&x184, x183, x174, x165)
  var x185 uint64
  fiat_p256_cmovznz_u64(&x185, x183, x176, x167)
  var x186 uint64
  fiat_p256_cmovznz_u64(&x186, x183, x178, x169)
  var x187 uint64
  fiat_p256_cmovznz_u64(&x187, x183, x180, x171)
  out1[0] = x184
  out1[1] = x185
  out1[2] = x186
  out1[3] = x187
}

/*
 * The function fiat_p256_add adds two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_p256_add(out1 *[4]uint64, arg1 *[4]uint64, arg2 *[4]uint64) {
  var x1 uint64
  var x2 fiat_p256_uint1
  x1, x2 = fiat_p256_addcarryx_u64((arg1[0]), (arg2[0]), 0x0)
  var x3 uint64
  var x4 fiat_p256_uint1
  x3, x4 = fiat_p256_addcarryx_u64((arg1[1]), (arg2[1]), x2)
  var x5 uint64
  var x6 fiat_p256_uint1
  x5, x6 = fiat_p256_addcarryx_u64((arg1[2]), (arg2[2]), x4)
  var x7 uint64
  var x8 fiat_p256_uint1
  x7, x8 = fiat_p256_addcarryx_u64((arg1[3]), (arg2[3]), x6)
  var x9 uint64
  var x10 fiat_p256_uint1
  x9, x10 = fiat_p256_subborrowx_u64(x1, 0xffffffffffffffff, 0x0)
  var x11 uint64
  var x12 fiat_p256_uint1
  x11, x12 = fiat_p256_subborrowx_u64(x3, 0xffffffff, x10)
  var x13 uint64
  var x14 fiat_p256_uint1
  x13, x14 = fiat_p256_subborrowx_u64(x5, uint64(0x0), x12)
  var x15 uint64
  var x16 fiat_p256_uint1
  x15, x16 = fiat_p256_subborrowx_u64(x7, 0xffffffff00000001, x14)
  var x18 fiat_p256_uint1
  _, x18 = fiat_p256_subborrowx_u64(uint64(x8), uint64(0x0), x16)
  var x19 uint64
  fiat_p256_cmovznz_u64(&x19, x18, x9, x1)
  var x20 uint64
  fiat_p256_cmovznz_u64(&x20, x18, x11, x3)
  var x21 uint64
  fiat_p256_cmovznz_u64(&x21, x18, x13, x5)
  var x22 uint64
  fiat_p256_cmovznz_u64(&x22, x18, x15, x7)
  out1[0] = x19
  out1[1] = x20
  out1[2] = x21
  out1[3] = x22
}

/*
 * The function fiat_p256_sub subtracts two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_p256_sub(out1 *[4]uint64, arg1 *[4]uint64, arg2 *[4]uint64) {
  var x1 uint64
  var x2 fiat_p256_uint1
  x1, x2 = fiat_p256_subborrowx_u64((arg1[0]), (arg2[0]), 0x0)
  var x3 uint64
  var x4 fiat_p256_uint1
  x3, x4 = fiat_p256_subborrowx_u64((arg1[1]), (arg2[1]), x2)
  var x5 uint64
  var x6 fiat_p256_uint1
  x5, x6 = fiat_p256_subborrowx_u64((arg1[2]), (arg2[2]), x4)
  var x7 uint64
  var x8 fiat_p256_uint1
  x7, x8 = fiat_p256_subborrowx_u64((arg1[3]), (arg2[3]), x6)
  var x9 uint64
  fiat_p256_cmovznz_u64(&x9, x8, uint64(0x0), 0xffffffffffffffff)
  var x10 uint64
  var x11 fiat_p256_uint1
  x10, x11 = fiat_p256_addcarryx_u64(x1, (x9 & 0xffffffffffffffff), 0x0)
  var x12 uint64
  var x13 fiat_p256_uint1
  x12, x13 = fiat_p256_addcarryx_u64(x3, (x9 & 0xffffffff), x11)
  var x14 uint64
  var x15 fiat_p256_uint1
  x14, x15 = fiat_p256_addcarryx_u64(x5, uint64(0x0), x13)
  var x16 uint64
  x16, _ = fiat_p256_addcarryx_u64(x7, (x9 & 0xffffffff00000001), x15)
  out1[0] = x10
  out1[1] = x12
  out1[2] = x14
  out1[3] = x16
}

/*
 * The function fiat_p256_opp negates a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_p256_opp(out1 *[4]uint64, arg1 *[4]uint64) {
  var x1 uint64
  var x2 fiat_p256_uint1
  x1, x2 = fiat_p256_subborrowx_u64(uint64(0x0), (arg1[0]), 0x0)
  var x3 uint64
  var x4 fiat_p256_uint1
  x3, x4 = fiat_p256_subborrowx_u64(uint64(0x0), (arg1[1]), x2)
  var x5 uint64
  var x6 fiat_p256_uint1
  x5, x6 = fiat_p256_subborrowx_u64(uint64(0x0), (arg1[2]), x4)
  var x7 uint64
  var x8 fiat_p256_uint1
  x7, x8 = fiat_p256_subborrowx_u64(uint64(0x0), (arg1[3]), x6)
  var x9 uint64
  fiat_p256_cmovznz_u64(&x9, x8, uint64(0x0), 0xffffffffffffffff)
  var x10 uint64
  var x11 fiat_p256_uint1
  x10, x11 = fiat_p256_addcarryx_u64(x1, (x9 & 0xffffffffffffffff), 0x0)
  var x12 uint64
  var x13 fiat_p256_uint1
  x12, x13 = fiat_p256_addcarryx_u64(x3, (x9 & 0xffffffff), x11)
  var x14 uint64
  var x15 fiat_p256_uint1
  x14, x15 = fiat_p256_addcarryx_u64(x5, uint64(0x0), x13)
  var x16 uint64
  x16, _ = fiat_p256_addcarryx_u64(x7, (x9 & 0xffffffff00000001), x15)
  out1[0] = x10
  out1[1] = x12
  out1[2] = x14
  out1[3] = x16
}

/*
 * The function fiat_p256_from_montgomery translates a field element out of the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = (eval arg1 * ((2^64)⁻¹ mod m)^4) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_p256_from_montgomery(out1 *[4]uint64, arg1 *[4]uint64) {
  var x1 uint64 = (arg1[0])
  var x2 uint64
  var x3 uint64
  x3, x2 = bits.Mul64(x1, 0xffffffff00000001)
  var x4 uint64
  var x5 uint64
  x5, x4 = bits.Mul64(x1, 0xffffffff)
  var x6 uint64
  var x7 uint64
  x7, x6 = bits.Mul64(x1, 0xffffffffffffffff)
  var x8 uint64
  var x9 fiat_p256_uint1
  x8, x9 = fiat_p256_addcarryx_u64(x7, x4, 0x0)
  var x11 fiat_p256_uint1
  _, x11 = fiat_p256_addcarryx_u64(x1, x6, 0x0)
  var x12 uint64
  var x13 fiat_p256_uint1
  x12, x13 = fiat_p256_addcarryx_u64(uint64(0x0), x8, x11)
  var x14 uint64
  var x15 fiat_p256_uint1
  x14, x15 = fiat_p256_addcarryx_u64(x12, (arg1[1]), 0x0)
  var x16 uint64
  var x17 uint64
  x17, x16 = bits.Mul64(x14, 0xffffffff00000001)
  var x18 uint64
  var x19 uint64
  x19, x18 = bits.Mul64(x14, 0xffffffff)
  var x20 uint64
  var x21 uint64
  x21, x20 = bits.Mul64(x14, 0xffffffffffffffff)
  var x22 uint64
  var x23 fiat_p256_uint1
  x22, x23 = fiat_p256_addcarryx_u64(x21, x18, 0x0)
  var x25 fiat_p256_uint1
  _, x25 = fiat_p256_addcarryx_u64(x14, x20, 0x0)
  var x26 uint64
  var x27 fiat_p256_uint1
  x26, x27 = fiat_p256_addcarryx_u64((uint64(x15) + (uint64(x13) + (uint64(x9) + x5))), x22, x25)
  var x28 uint64
  var x29 fiat_p256_uint1
  x28, x29 = fiat_p256_addcarryx_u64(x2, (uint64(x23) + x19), x27)
  var x30 uint64
  var x31 fiat_p256_uint1
  x30, x31 = fiat_p256_addcarryx_u64(x3, x16, x29)
  var x32 uint64
  var x33 fiat_p256_uint1
  x32, x33 = fiat_p256_addcarryx_u64(x26, (arg1[2]), 0x0)
  var x34 uint64
  var x35 fiat_p256_uint1
  x34, x35 = fiat_p256_addcarryx_u64(x28, uint64(0x0), x33)
  var x36 uint64
  var x37 fiat_p256_uint1
  x36, x37 = fiat_p256_addcarryx_u64(x30, uint64(0x0), x35)
  var x38 uint64
  var x39 uint64
  x39, x38 = bits.Mul64(x32, 0xffffffff00000001)
  var x40 uint64
  var x41 uint64
  x41, x40 = bits.Mul64(x32, 0xffffffff)
  var x42 uint64
  var x43 uint64
  x43, x42 = bits.Mul64(x32, 0xffffffffffffffff)
  var x44 uint64
  var x45 fiat_p256_uint1
  x44, x45 = fiat_p256_addcarryx_u64(x43, x40, 0x0)
  var x47 fiat_p256_uint1
  _, x47 = fiat_p256_addcarryx_u64(x32, x42, 0x0)
  var x48 uint64
  var x49 fiat_p256_uint1
  x48, x49 = fiat_p256_addcarryx_u64(x34, x44, x47)
  var x50 uint64
  var x51 fiat_p256_uint1
  x50, x51 = fiat_p256_addcarryx_u64(x36, (uint64(x45) + x41), x49)
  var x52 uint64
  var x53 fiat_p256_uint1
  x52, x53 = fiat_p256_addcarryx_u64((uint64(x37) + (uint64(x31) + x17)), x38, x51)
  var x54 uint64
  var x55 fiat_p256_uint1
  x54, x55 = fiat_p256_addcarryx_u64(x48, (arg1[3]), 0x0)
  var x56 uint64
  var x57 fiat_p256_uint1
  x56, x57 = fiat_p256_addcarryx_u64(x50, uint64(0x0), x55)
  var x58 uint64
  var x59 fiat_p256_uint1
  x58, x59 = fiat_p256_addcarryx_u64(x52, uint64(0x0), x57)
  var x60 uint64
  var x61 uint64
  x61, x60 = bits.Mul64(x54, 0xffffffff00000001)
  var x62 uint64
  var x63 uint64
  x63, x62 = bits.Mul64(x54, 0xffffffff)
  var x64 uint64
  var x65 uint64
  x65, x64 = bits.Mul64(x54, 0xffffffffffffffff)
  var x66 uint64
  var x67 fiat_p256_uint1
  x66, x67 = fiat_p256_addcarryx_u64(x65, x62, 0x0)
  var x69 fiat_p256_uint1
  _, x69 = fiat_p256_addcarryx_u64(x54, x64, 0x0)
  var x70 uint64
  var x71 fiat_p256_uint1
  x70, x71 = fiat_p256_addcarryx_u64(x56, x66, x69)
  var x72 uint64
  var x73 fiat_p256_uint1
  x72, x73 = fiat_p256_addcarryx_u64(x58, (uint64(x67) + x63), x71)
  var x74 uint64
  var x75 fiat_p256_uint1
  x74, x75 = fiat_p256_addcarryx_u64((uint64(x59) + (uint64(x53) + x39)), x60, x73)
  var x76 uint64 = (uint64(x75) + x61)
  var x77 uint64
  var x78 fiat_p256_uint1
  x77, x78 = fiat_p256_subborrowx_u64(x70, 0xffffffffffffffff, 0x0)
  var x79 uint64
  var x80 fiat_p256_uint1
  x79, x80 = fiat_p256_subborrowx_u64(x72, 0xffffffff, x78)
  var x81 uint64
  var x82 fiat_p256_uint1
  x81, x82 = fiat_p256_subborrowx_u64(x74, uint64(0x0), x80)
  var x83 uint64
  var x84 fiat_p256_uint1
  x83, x84 = fiat_p256_subborrowx_u64(x76, 0xffffffff00000001, x82)
  var x86 fiat_p256_uint1
  _, x86 = fiat_p256_subborrowx_u64(uint64(0x0), uint64(0x0), x84)
  var x87 uint64
  fiat_p256_cmovznz_u64(&x87, x86, x77, x70)
  var x88 uint64
  fiat_p256_cmovznz_u64(&x88, x86, x79, x72)
  var x89 uint64
  fiat_p256_cmovznz_u64(&x89, x86, x81, x74)
  var x90 uint64
  fiat_p256_cmovznz_u64(&x90, x86, x83, x76)
  out1[0] = x87
  out1[1] = x88
  out1[2] = x89
  out1[3] = x90
}

/*
 * The function fiat_p256_to_montgomery translates a field element into the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = eval arg1 mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_p256_to_montgomery(out1 *[4]uint64, arg1 *[4]uint64) {
  var x1 uint64 = (arg1[1])
  var x2 uint64 = (arg1[2])
  var x3 uint64 = (arg1[3])
  var x4 uint64 = (arg1[0])
  var x5 uint64
  var x6 uint64
  x6, x5 = bits.Mul64(x4, 0x4fffffffd)
  var x7 uint64
  var x8 uint64
  x8, x7 = bits.Mul64(x4, 0xfffffffffffffffe)
  var x9 uint64
  var x10 uint64
  x10, x9 = bits.Mul64(x4, 0xfffffffbffffffff)
  var x11 uint64
  var x12 uint64
  x12, x11 = bits.Mul64(x4, 0x3)
  var x13 uint64
  var x14 fiat_p256_uint1
  x13, x14 = fiat_p256_addcarryx_u64(x12, x9, 0x0)
  var x15 uint64
  var x16 fiat_p256_uint1
  x15, x16 = fiat_p256_addcarryx_u64(x10, x7, x14)
  var x17 uint64
  var x18 fiat_p256_uint1
  x17, x18 = fiat_p256_addcarryx_u64(x8, x5, x16)
  var x19 uint64
  var x20 uint64
  x20, x19 = bits.Mul64(x11, 0xffffffff00000001)
  var x21 uint64
  var x22 uint64
  x22, x21 = bits.Mul64(x11, 0xffffffff)
  var x23 uint64
  var x24 uint64
  x24, x23 = bits.Mul64(x11, 0xffffffffffffffff)
  var x25 uint64
  var x26 fiat_p256_uint1
  x25, x26 = fiat_p256_addcarryx_u64(x24, x21, 0x0)
  var x28 fiat_p256_uint1
  _, x28 = fiat_p256_addcarryx_u64(x11, x23, 0x0)
  var x29 uint64
  var x30 fiat_p256_uint1
  x29, x30 = fiat_p256_addcarryx_u64(x13, x25, x28)
  var x31 uint64
  var x32 fiat_p256_uint1
  x31, x32 = fiat_p256_addcarryx_u64(x15, (uint64(x26) + x22), x30)
  var x33 uint64
  var x34 fiat_p256_uint1
  x33, x34 = fiat_p256_addcarryx_u64(x17, x19, x32)
  var x35 uint64
  var x36 fiat_p256_uint1
  x35, x36 = fiat_p256_addcarryx_u64((uint64(x18) + x6), x20, x34)
  var x37 uint64
  var x38 uint64
  x38, x37 = bits.Mul64(x1, 0x4fffffffd)
  var x39 uint64
  var x40 uint64
  x40, x39 = bits.Mul64(x1, 0xfffffffffffffffe)
  var x41 uint64
  var x42 uint64
  x42, x41 = bits.Mul64(x1, 0xfffffffbffffffff)
  var x43 uint64
  var x44 uint64
  x44, x43 = bits.Mul64(x1, 0x3)
  var x45 uint64
  var x46 fiat_p256_uint1
  x45, x46 = fiat_p256_addcarryx_u64(x44, x41, 0x0)
  var x47 uint64
  var x48 fiat_p256_uint1
  x47, x48 = fiat_p256_addcarryx_u64(x42, x39, x46)
  var x49 uint64
  var x50 fiat_p256_uint1
  x49, x50 = fiat_p256_addcarryx_u64(x40, x37, x48)
  var x51 uint64
  var x52 fiat_p256_uint1
  x51, x52 = fiat_p256_addcarryx_u64(x29, x43, 0x0)
  var x53 uint64
  var x54 fiat_p256_uint1
  x53, x54 = fiat_p256_addcarryx_u64(x31, x45, x52)
  var x55 uint64
  var x56 fiat_p256_uint1
  x55, x56 = fiat_p256_addcarryx_u64(x33, x47, x54)
  var x57 uint64
  var x58 fiat_p256_uint1
  x57, x58 = fiat_p256_addcarryx_u64(x35, x49, x56)
  var x59 uint64
  var x60 uint64
  x60, x59 = bits.Mul64(x51, 0xffffffff00000001)
  var x61 uint64
  var x62 uint64
  x62, x61 = bits.Mul64(x51, 0xffffffff)
  var x63 uint64
  var x64 uint64
  x64, x63 = bits.Mul64(x51, 0xffffffffffffffff)
  var x65 uint64
  var x66 fiat_p256_uint1
  x65, x66 = fiat_p256_addcarryx_u64(x64, x61, 0x0)
  var x68 fiat_p256_uint1
  _, x68 = fiat_p256_addcarryx_u64(x51, x63, 0x0)
  var x69 uint64
  var x70 fiat_p256_uint1
  x69, x70 = fiat_p256_addcarryx_u64(x53, x65, x68)
  var x71 uint64
  var x72 fiat_p256_uint1
  x71, x72 = fiat_p256_addcarryx_u64(x55, (uint64(x66) + x62), x70)
  var x73 uint64
  var x74 fiat_p256_uint1
  x73, x74 = fiat_p256_addcarryx_u64(x57, x59, x72)
  var x75 uint64
  var x76 fiat_p256_uint1
  x75, x76 = fiat_p256_addcarryx_u64(((uint64(x58) + uint64(x36)) + (uint64(x50) + x38)), x60, x74)
  var x77 uint64
  var x78 uint64
  x78, x77 = bits.Mul64(x2, 0x4fffffffd)
  var x79 uint64
  var x80 uint64
  x80, x79 = bits.Mul64(x2, 0xfffffffffffffffe)
  var x81 uint64
  var x82 uint64
  x82, x81 = bits.Mul64(x2, 0xfffffffbffffffff)
  var x83 uint64
  var x84 uint64
  x84, x83 = bits.Mul64(x2, 0x3)
  var x85 uint64
  var x86 fiat_p256_uint1
  x85, x86 = fiat_p256_addcarryx_u64(x84, x81, 0x0)
  var x87 uint64
  var x88 fiat_p256_uint1
  x87, x88 = fiat_p256_addcarryx_u64(x82, x79, x86)
  var x89 uint64
  var x90 fiat_p256_uint1
  x89, x90 = fiat_p256_addcarryx_u64(x80, x77, x88)
  var x91 uint64
  var x92 fiat_p256_uint1
  x91, x92 = fiat_p256_addcarryx_u64(x69, x83, 0x0)
  var x93 uint64
  var x94 fiat_p256_uint1
  x93, x94 = fiat_p256_addcarryx_u64(x71, x85, x92)
  var x95 uint64
  var x96 fiat_p256_uint1
  x95, x96 = fiat_p256_addcarryx_u64(x73, x87, x94)
  var x97 uint64
  var x98 fiat_p256_uint1
  x97, x98 = fiat_p256_addcarryx_u64(x75, x89, x96)
  var x99 uint64
  var x100 uint64
  x100, x99 = bits.Mul64(x91, 0xffffffff00000001)
  var x101 uint64
  var x102 uint64
  x102, x101 = bits.Mul64(x91, 0xffffffff)
  var x103 uint64
  var x104 uint64
  x104, x103 = bits.Mul64(x91, 0xffffffffffffffff)
  var x105 uint64
  var x106 fiat_p256_uint1
  x105, x106 = fiat_p256_addcarryx_u64(x104, x101, 0x0)
  var x108 fiat_p256_uint1
  _, x108 = fiat_p256_addcarryx_u64(x91, x103, 0x0)
  var x109 uint64
  var x110 fiat_p256_uint1
  x109, x110 = fiat_p256_addcarryx_u64(x93, x105, x108)
  var x111 uint64
  var x112 fiat_p256_uint1
  x111, x112 = fiat_p256_addcarryx_u64(x95, (uint64(x106) + x102), x110)
  var x113 uint64
  var x114 fiat_p256_uint1
  x113, x114 = fiat_p256_addcarryx_u64(x97, x99, x112)
  var x115 uint64
  var x116 fiat_p256_uint1
  x115, x116 = fiat_p256_addcarryx_u64(((uint64(x98) + uint64(x76)) + (uint64(x90) + x78)), x100, x114)
  var x117 uint64
  var x118 uint64
  x118, x117 = bits.Mul64(x3, 0x4fffffffd)
  var x119 uint64
  var x120 uint64
  x120, x119 = bits.Mul64(x3, 0xfffffffffffffffe)
  var x121 uint64
  var x122 uint64
  x122, x121 = bits.Mul64(x3, 0xfffffffbffffffff)
  var x123 uint64
  var x124 uint64
  x124, x123 = bits.Mul64(x3, 0x3)
  var x125 uint64
  var x126 fiat_p256_uint1
  x125, x126 = fiat_p256_addcarryx_u64(x124, x121, 0x0)
  var x127 uint64
  var x128 fiat_p256_uint1
  x127, x128 = fiat_p256_addcarryx_u64(x122, x119, x126)
  var x129 uint64
  var x130 fiat_p256_uint1
  x129, x130 = fiat_p256_addcarryx_u64(x120, x117, x128)
  var x131 uint64
  var x132 fiat_p256_uint1
  x131, x132 = fiat_p256_addcarryx_u64(x109, x123, 0x0)
  var x133 uint64
  var x134 fiat_p256_uint1
  x133, x134 = fiat_p256_addcarryx_u64(x111, x125, x132)
  var x135 uint64
  var x136 fiat_p256_uint1
  x135, x136 = fiat_p256_addcarryx_u64(x113, x127, x134)
  var x137 uint64
  var x138 fiat_p256_uint1
  x137, x138 = fiat_p256_addcarryx_u64(x115, x129, x136)
  var x139 uint64
  var x140 uint64
  x140, x139 = bits.Mul64(x131, 0xffffffff00000001)
  var x141 uint64
  var x142 uint64
  x142, x141 = bits.Mul64(x131, 0xffffffff)
  var x143 uint64
  var x144 uint64
  x144, x143 = bits.Mul64(x131, 0xffffffffffffffff)
  var x145 uint64
  var x146 fiat_p256_uint1
  x145, x146 = fiat_p256_addcarryx_u64(x144, x141, 0x0)
  var x148 fiat_p256_uint1
  _, x148 = fiat_p256_addcarryx_u64(x131, x143, 0x0)
  var x149 uint64
  var x150 fiat_p256_uint1
  x149, x150 = fiat_p256_addcarryx_u64(x133, x145, x148)
  var x151 uint64
  var x152 fiat_p256_uint1
  x151, x152 = fiat_p256_addcarryx_u64(x135, (uint64(x146) + x142), x150)
  var x153 uint64
  var x154 fiat_p256_uint1
  x153, x154 = fiat_p256_addcarryx_u64(x137, x139, x152)
  var x155 uint64
  var x156 fiat_p256_uint1
  x155, x156 = fiat_p256_addcarryx_u64(((uint64(x138) + uint64(x116)) + (uint64(x130) + x118)), x140, x154)
  var x157 uint64
  var x158 fiat_p256_uint1
  x157, x158 = fiat_p256_subborrowx_u64(x149, 0xffffffffffffffff, 0x0)
  var x159 uint64
  var x160 fiat_p256_uint1
  x159, x160 = fiat_p256_subborrowx_u64(x151, 0xffffffff, x158)
  var x161 uint64
  var x162 fiat_p256_uint1
  x161, x162 = fiat_p256_subborrowx_u64(x153, uint64(0x0), x160)
  var x163 uint64
  var x164 fiat_p256_uint1
  x163, x164 = fiat_p256_subborrowx_u64(x155, 0xffffffff00000001, x162)
  var x166 fiat_p256_uint1
  _, x166 = fiat_p256_subborrowx_u64(uint64(x156), uint64(0x0), x164)
  var x167 uint64
  fiat_p256_cmovznz_u64(&x167, x166, x157, x149)
  var x168 uint64
  fiat_p256_cmovznz_u64(&x168, x166, x159, x151)
  var x169 uint64
  fiat_p256_cmovznz_u64(&x169, x166, x161, x153)
  var x170 uint64
  fiat_p256_cmovznz_u64(&x170, x166, x163, x155)
  out1[0] = x167
  out1[1] = x168
  out1[2] = x169
  out1[3] = x170
}

/*
 * The function fiat_p256_nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 */
/*inline*/
func fiat_p256_nonzero(out1 *uint64, arg1 *[4]uint64) {
  var x1 uint64 = ((arg1[0]) | ((arg1[1]) | ((arg1[2]) | ((arg1[3]) | uint64(0x0)))))
  *out1 = x1
}

/*
 * The function fiat_p256_selectznz is a multi-limb conditional select.
 * Postconditions:
 *   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_p256_selectznz(out1 *[4]uint64, arg1 fiat_p256_uint1, arg2 *[4]uint64, arg3 *[4]uint64) {
  var x1 uint64
  fiat_p256_cmovznz_u64(&x1, arg1, (arg2[0]), (arg3[0]))
  var x2 uint64
  fiat_p256_cmovznz_u64(&x2, arg1, (arg2[1]), (arg3[1]))
  var x3 uint64
  fiat_p256_cmovznz_u64(&x3, arg1, (arg2[2]), (arg3[2]))
  var x4 uint64
  fiat_p256_cmovznz_u64(&x4, arg1, (arg2[3]), (arg3[3]))
  out1[0] = x1
  out1[1] = x2
  out1[2] = x3
  out1[3] = x4
}

/*
 * The function fiat_p256_to_bytes serializes a field element in the Montgomery domain to bytes in little-endian order.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..31]
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
 */
/*inline*/
func fiat_p256_to_bytes(out1 *[32]uint8, arg1 *[4]uint64) {
  var x1 uint64 = (arg1[3])
  var x2 uint64 = (arg1[2])
  var x3 uint64 = (arg1[1])
  var x4 uint64 = (arg1[0])
  var x5 uint64 = (x4 >> 8)
  var x6 uint8 = (uint8(x4) & 0xff)
  var x7 uint64 = (x5 >> 8)
  var x8 uint8 = (uint8(x5) & 0xff)
  var x9 uint64 = (x7 >> 8)
  var x10 uint8 = (uint8(x7) & 0xff)
  var x11 uint64 = (x9 >> 8)
  var x12 uint8 = (uint8(x9) & 0xff)
  var x13 uint64 = (x11 >> 8)
  var x14 uint8 = (uint8(x11) & 0xff)
  var x15 uint64 = (x13 >> 8)
  var x16 uint8 = (uint8(x13) & 0xff)
  var x17 uint8 = uint8((x15 >> 8))
  var x18 uint8 = (uint8(x15) & 0xff)
  var x19 uint8 = (x17 & 0xff)
  var x20 uint64 = (x3 >> 8)
  var x21 uint8 = (uint8(x3) & 0xff)
  var x22 uint64 = (x20 >> 8)
  var x23 uint8 = (uint8(x20) & 0xff)
  var x24 uint64 = (x22 >> 8)
  var x25 uint8 = (uint8(x22) & 0xff)
  var x26 uint64 = (x24 >> 8)
  var x27 uint8 = (uint8(x24) & 0xff)
  var x28 uint64 = (x26 >> 8)
  var x29 uint8 = (uint8(x26) & 0xff)
  var x30 uint64 = (x28 >> 8)
  var x31 uint8 = (uint8(x28) & 0xff)
  var x32 uint8 = uint8((x30 >> 8))
  var x33 uint8 = (uint8(x30) & 0xff)
  var x34 uint8 = (x32 & 0xff)
  var x35 uint64 = (x2 >> 8)
  var x36 uint8 = (uint8(x2) & 0xff)
  var x37 uint64 = (x35 >> 8)
  var x38 uint8 = (uint8(x35) & 0xff)
  var x39 uint64 = (x37 >> 8)
  var x40 uint8 = (uint8(x37) & 0xff)
  var x41 uint64 = (x39 >> 8)
  var x42 uint8 = (uint8(x39) & 0xff)
  var x43 uint64 = (x41 >> 8)
  var x44 uint8 = (uint8(x41) & 0xff)
  var x45 uint64 = (x43 >> 8)
  var x46 uint8 = (uint8(x43) & 0xff)
  var x47 uint8 = uint8((x45 >> 8))
  var x48 uint8 = (uint8(x45) & 0xff)
  var x49 uint8 = (x47 & 0xff)
  var x50 uint64 = (x1 >> 8)
  var x51 uint8 = (uint8(x1) & 0xff)
  var x52 uint64 = (x50 >> 8)
  var x53 uint8 = (uint8(x50) & 0xff)
  var x54 uint64 = (x52 >> 8)
  var x55 uint8 = (uint8(x52) & 0xff)
  var x56 uint64 = (x54 >> 8)
  var x57 uint8 = (uint8(x54) & 0xff)
  var x58 uint64 = (x56 >> 8)
  var x59 uint8 = (uint8(x56) & 0xff)
  var x60 uint64 = (x58 >> 8)
  var x61 uint8 = (uint8(x58) & 0xff)
  var x62 uint8 = uint8((x60 >> 8))
  var x63 uint8 = (uint8(x60) & 0xff)
  out1[0] = x6
  out1[1] = x8
  out1[2] = x10
  out1[3] = x12
  out1[4] = x14
  out1[5] = x16
  out1[6] = x18
  out1[7] = x19
  out1[8] = x21
  out1[9] = x23
  out1[10] = x25
  out1[11] = x27
  out1[12] = x29
  out1[13] = x31
  out1[14] = x33
  out1[15] = x34
  out1[16] = x36
  out1[17] = x38
  out1[18] = x40
  out1[19] = x42
  out1[20] = x44
  out1[21] = x46
  out1[22] = x48
  out1[23] = x49
  out1[24] = x51
  out1[25] = x53
  out1[26] = x55
  out1[27] = x57
  out1[28] = x59
  out1[29] = x61
  out1[30] = x63
  out1[31] = x62
}

/*
 * The function fiat_p256_from_bytes deserializes a field element in the Montgomery domain from bytes in little-endian order.
 * Preconditions:
 *   0 ≤ bytes_eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = bytes_eval arg1 mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_p256_from_bytes(out1 *[4]uint64, arg1 *[32]uint8) {
  var x1 uint64 = (uint64((arg1[31])) << 56)
  var x2 uint64 = (uint64((arg1[30])) << 48)
  var x3 uint64 = (uint64((arg1[29])) << 40)
  var x4 uint64 = (uint64((arg1[28])) << 32)
  var x5 uint64 = (uint64((arg1[27])) << 24)
  var x6 uint64 = (uint64((arg1[26])) << 16)
  var x7 uint64 = (uint64((arg1[25])) << 8)
  var x8 uint8 = (arg1[24])
  var x9 uint64 = (uint64((arg1[23])) << 56)
  var x10 uint64 = (uint64((arg1[22])) << 48)
  var x11 uint64 = (uint64((arg1[21])) << 40)
  var x12 uint64 = (uint64((arg1[20])) << 32)
  var x13 uint64 = (uint64((arg1[19])) << 24)
  var x14 uint64 = (uint64((arg1[18])) << 16)
  var x15 uint64 = (uint64((arg1[17])) << 8)
  var x16 uint8 = (arg1[16])
  var x17 uint64 = (uint64((arg1[15])) << 56)
  var x18 uint64 = (uint64((arg1[14])) << 48)
  var x19 uint64 = (uint64((arg1[13])) << 40)
  var x20 uint64 = (uint64((arg1[12])) << 32)
  var x21 uint64 = (uint64((arg1[11])) << 24)
  var x22 uint64 = (uint64((arg1[10])) << 16)
  var x23 uint64 = (uint64((arg1[9])) << 8)
  var x24 uint8 = (arg1[8])
  var x25 uint64 = (uint64((arg1[7])) << 56)
  var x26 uint64 = (uint64((arg1[6])) << 48)
  var x27 uint64 = (uint64((arg1[5])) << 40)
  var x28 uint64 = (uint64((arg1[4])) << 32)
  var x29 uint64 = (uint64((arg1[3])) << 24)
  var x30 uint64 = (uint64((arg1[2])) << 16)
  var x31 uint64 = (uint64((arg1[1])) << 8)
  var x32 uint8 = (arg1[0])
  var x33 uint64 = (uint64(x32) + (x31 + (x30 + (x29 + (x28 + (x27 + (x26 + x25)))))))
  var x34 uint64 = (x33 & 0xffffffffffffffff)
  var x35 uint64 = (uint64(x8) + (x7 + (x6 + (x5 + (x4 + (x3 + (x2 + x1)))))))
  var x36 uint64 = (uint64(x16) + (x15 + (x14 + (x13 + (x12 + (x11 + (x10 + x9)))))))
  var x37 uint64 = (uint64(x24) + (x23 + (x22 + (x21 + (x20 + (x19 + (x18 + x17)))))))
  var x38 uint64 = (x37 & 0xffffffffffffffff)
  var x39 uint64 = (x36 & 0xffffffffffffffff)
  out1[0] = x34
  out1[1] = x38
  out1[2] = x39
  out1[3] = x35
}

