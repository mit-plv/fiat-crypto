/* Autogenerated: src/ExtractionOCaml/word_by_word_montgomery --lang=Go --cmovznz-by-mul --widen-carry --widen-bytes p256 '2^256 - 2^224 + 2^192 + 2^96 - 1' 32 mul square add sub opp from_montgomery nonzero selectznz to_bytes from_bytes */
/* curve description: p256 */
/* requested operations: mul, square, add, sub, opp, from_montgomery, nonzero, selectznz, to_bytes, from_bytes */
/* m = 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff (from "2^256 - 2^224 + 2^192 + 2^96 - 1") */
/* machine_wordsize = 32 (from "32") */
/*                                                                    */
/* NOTE: In addition to the bounds specified above each function, all */
/*   functions synthesized for this Montgomery arithmetic require the */
/*   input to be strictly less than the prime modulus (m), and also   */
/*   require the input to be in the unique saturated representation.  */
/*   All functions also ensure that these two properties are true of  */
/*   return values.                                                   */

package fiat_p256

import "math/bits"


/*
 * The function fiat_p256_cmovznz_u32 is a single-word conditional move.
 * Postconditions:
 *   out1 = (if arg1 = 0 then arg2 else arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffff]
 *   arg3: [0x0 ~> 0xffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffff]
 */
/*inline*/
func fiat_p256_cmovznz_u32(out1 *uint32, arg1 uint32, arg2 uint32, arg3 uint32) {
  var x1 uint32 = (arg1 * 0xffffffff)
  var x2 uint32 = ((x1 & arg3) | ((^x1) & arg2))
  *out1 = x2
}

/*
 * The function fiat_p256_mul multiplies two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 *   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_p256_mul(out1 *[8]uint32, arg1 *[8]uint32, arg2 *[8]uint32) {
  var x1 uint32 = (arg1[1])
  var x2 uint32 = (arg1[2])
  var x3 uint32 = (arg1[3])
  var x4 uint32 = (arg1[4])
  var x5 uint32 = (arg1[5])
  var x6 uint32 = (arg1[6])
  var x7 uint32 = (arg1[7])
  var x8 uint32 = (arg1[0])
  var x9 uint32
  var x10 uint32
  x9, x10 = bits.Mul32(x8, (arg2[7]))
  var x11 uint32
  var x12 uint32
  x11, x12 = bits.Mul32(x8, (arg2[6]))
  var x13 uint32
  var x14 uint32
  x13, x14 = bits.Mul32(x8, (arg2[5]))
  var x15 uint32
  var x16 uint32
  x15, x16 = bits.Mul32(x8, (arg2[4]))
  var x17 uint32
  var x18 uint32
  x17, x18 = bits.Mul32(x8, (arg2[3]))
  var x19 uint32
  var x20 uint32
  x19, x20 = bits.Mul32(x8, (arg2[2]))
  var x21 uint32
  var x22 uint32
  x21, x22 = bits.Mul32(x8, (arg2[1]))
  var x23 uint32
  var x24 uint32
  x23, x24 = bits.Mul32(x8, (arg2[0]))
  var x25 uint32
  var x26 uint32
  x25, x26 = bits.Add32(x24, x21, 0x0)
  var x27 uint32
  var x28 uint32
  x27, x28 = bits.Add32(x22, x19, x26)
  var x29 uint32
  var x30 uint32
  x29, x30 = bits.Add32(x20, x17, x28)
  var x31 uint32
  var x32 uint32
  x31, x32 = bits.Add32(x18, x15, x30)
  var x33 uint32
  var x34 uint32
  x33, x34 = bits.Add32(x16, x13, x32)
  var x35 uint32
  var x36 uint32
  x35, x36 = bits.Add32(x14, x11, x34)
  var x37 uint32
  var x38 uint32
  x37, x38 = bits.Add32(x12, x9, x36)
  var x39 uint32
  x39, _ = bits.Add32(x10, uint32(0x0), x38)
  var x41 uint32
  var x42 uint32
  x41, x42 = bits.Mul32(x23, 0xffffffff)
  var x43 uint32
  var x44 uint32
  x43, x44 = bits.Mul32(x23, 0xffffffff)
  var x45 uint32
  var x46 uint32
  x45, x46 = bits.Mul32(x23, 0xffffffff)
  var x47 uint32
  var x48 uint32
  x47, x48 = bits.Mul32(x23, 0xffffffff)
  var x49 uint32
  var x50 uint32
  x49, x50 = bits.Add32(x48, x45, 0x0)
  var x51 uint32
  var x52 uint32
  x51, x52 = bits.Add32(x46, x43, x50)
  var x53 uint32
  x53, _ = bits.Add32(x44, uint32(0x0), x52)
  var x56 uint32
  _, x56 = bits.Add32(x23, x47, 0x0)
  var x57 uint32
  var x58 uint32
  x57, x58 = bits.Add32(x25, x49, x56)
  var x59 uint32
  var x60 uint32
  x59, x60 = bits.Add32(x27, x51, x58)
  var x61 uint32
  var x62 uint32
  x61, x62 = bits.Add32(x29, x53, x60)
  var x63 uint32
  var x64 uint32
  x63, x64 = bits.Add32(x31, uint32(0x0), x62)
  var x65 uint32
  var x66 uint32
  x65, x66 = bits.Add32(x33, uint32(0x0), x64)
  var x67 uint32
  var x68 uint32
  x67, x68 = bits.Add32(x35, x23, x66)
  var x69 uint32
  var x70 uint32
  x69, x70 = bits.Add32(x37, x41, x68)
  var x71 uint32
  var x72 uint32
  x71, x72 = bits.Add32(x39, x42, x70)
  var x73 uint32
  x73, _ = bits.Add32(uint32(0x0), uint32(0x0), x72)
  var x75 uint32
  var x76 uint32
  x75, x76 = bits.Mul32(x1, (arg2[7]))
  var x77 uint32
  var x78 uint32
  x77, x78 = bits.Mul32(x1, (arg2[6]))
  var x79 uint32
  var x80 uint32
  x79, x80 = bits.Mul32(x1, (arg2[5]))
  var x81 uint32
  var x82 uint32
  x81, x82 = bits.Mul32(x1, (arg2[4]))
  var x83 uint32
  var x84 uint32
  x83, x84 = bits.Mul32(x1, (arg2[3]))
  var x85 uint32
  var x86 uint32
  x85, x86 = bits.Mul32(x1, (arg2[2]))
  var x87 uint32
  var x88 uint32
  x87, x88 = bits.Mul32(x1, (arg2[1]))
  var x89 uint32
  var x90 uint32
  x89, x90 = bits.Mul32(x1, (arg2[0]))
  var x91 uint32
  var x92 uint32
  x91, x92 = bits.Add32(x90, x87, 0x0)
  var x93 uint32
  var x94 uint32
  x93, x94 = bits.Add32(x88, x85, x92)
  var x95 uint32
  var x96 uint32
  x95, x96 = bits.Add32(x86, x83, x94)
  var x97 uint32
  var x98 uint32
  x97, x98 = bits.Add32(x84, x81, x96)
  var x99 uint32
  var x100 uint32
  x99, x100 = bits.Add32(x82, x79, x98)
  var x101 uint32
  var x102 uint32
  x101, x102 = bits.Add32(x80, x77, x100)
  var x103 uint32
  var x104 uint32
  x103, x104 = bits.Add32(x78, x75, x102)
  var x105 uint32
  x105, _ = bits.Add32(x76, uint32(0x0), x104)
  var x107 uint32
  var x108 uint32
  x107, x108 = bits.Add32(x57, x89, 0x0)
  var x109 uint32
  var x110 uint32
  x109, x110 = bits.Add32(x59, x91, x108)
  var x111 uint32
  var x112 uint32
  x111, x112 = bits.Add32(x61, x93, x110)
  var x113 uint32
  var x114 uint32
  x113, x114 = bits.Add32(x63, x95, x112)
  var x115 uint32
  var x116 uint32
  x115, x116 = bits.Add32(x65, x97, x114)
  var x117 uint32
  var x118 uint32
  x117, x118 = bits.Add32(x67, x99, x116)
  var x119 uint32
  var x120 uint32
  x119, x120 = bits.Add32(x69, x101, x118)
  var x121 uint32
  var x122 uint32
  x121, x122 = bits.Add32(x71, x103, x120)
  var x123 uint32
  var x124 uint32
  x123, x124 = bits.Add32(x73, x105, x122)
  var x125 uint32
  var x126 uint32
  x125, x126 = bits.Mul32(x107, 0xffffffff)
  var x127 uint32
  var x128 uint32
  x127, x128 = bits.Mul32(x107, 0xffffffff)
  var x129 uint32
  var x130 uint32
  x129, x130 = bits.Mul32(x107, 0xffffffff)
  var x131 uint32
  var x132 uint32
  x131, x132 = bits.Mul32(x107, 0xffffffff)
  var x133 uint32
  var x134 uint32
  x133, x134 = bits.Add32(x132, x129, 0x0)
  var x135 uint32
  var x136 uint32
  x135, x136 = bits.Add32(x130, x127, x134)
  var x137 uint32
  x137, _ = bits.Add32(x128, uint32(0x0), x136)
  var x140 uint32
  _, x140 = bits.Add32(x107, x131, 0x0)
  var x141 uint32
  var x142 uint32
  x141, x142 = bits.Add32(x109, x133, x140)
  var x143 uint32
  var x144 uint32
  x143, x144 = bits.Add32(x111, x135, x142)
  var x145 uint32
  var x146 uint32
  x145, x146 = bits.Add32(x113, x137, x144)
  var x147 uint32
  var x148 uint32
  x147, x148 = bits.Add32(x115, uint32(0x0), x146)
  var x149 uint32
  var x150 uint32
  x149, x150 = bits.Add32(x117, uint32(0x0), x148)
  var x151 uint32
  var x152 uint32
  x151, x152 = bits.Add32(x119, x107, x150)
  var x153 uint32
  var x154 uint32
  x153, x154 = bits.Add32(x121, x125, x152)
  var x155 uint32
  var x156 uint32
  x155, x156 = bits.Add32(x123, x126, x154)
  var x157 uint32
  x157, _ = bits.Add32(x124, uint32(0x0), x156)
  var x159 uint32
  var x160 uint32
  x159, x160 = bits.Mul32(x2, (arg2[7]))
  var x161 uint32
  var x162 uint32
  x161, x162 = bits.Mul32(x2, (arg2[6]))
  var x163 uint32
  var x164 uint32
  x163, x164 = bits.Mul32(x2, (arg2[5]))
  var x165 uint32
  var x166 uint32
  x165, x166 = bits.Mul32(x2, (arg2[4]))
  var x167 uint32
  var x168 uint32
  x167, x168 = bits.Mul32(x2, (arg2[3]))
  var x169 uint32
  var x170 uint32
  x169, x170 = bits.Mul32(x2, (arg2[2]))
  var x171 uint32
  var x172 uint32
  x171, x172 = bits.Mul32(x2, (arg2[1]))
  var x173 uint32
  var x174 uint32
  x173, x174 = bits.Mul32(x2, (arg2[0]))
  var x175 uint32
  var x176 uint32
  x175, x176 = bits.Add32(x174, x171, 0x0)
  var x177 uint32
  var x178 uint32
  x177, x178 = bits.Add32(x172, x169, x176)
  var x179 uint32
  var x180 uint32
  x179, x180 = bits.Add32(x170, x167, x178)
  var x181 uint32
  var x182 uint32
  x181, x182 = bits.Add32(x168, x165, x180)
  var x183 uint32
  var x184 uint32
  x183, x184 = bits.Add32(x166, x163, x182)
  var x185 uint32
  var x186 uint32
  x185, x186 = bits.Add32(x164, x161, x184)
  var x187 uint32
  var x188 uint32
  x187, x188 = bits.Add32(x162, x159, x186)
  var x189 uint32
  x189, _ = bits.Add32(x160, uint32(0x0), x188)
  var x191 uint32
  var x192 uint32
  x191, x192 = bits.Add32(x141, x173, 0x0)
  var x193 uint32
  var x194 uint32
  x193, x194 = bits.Add32(x143, x175, x192)
  var x195 uint32
  var x196 uint32
  x195, x196 = bits.Add32(x145, x177, x194)
  var x197 uint32
  var x198 uint32
  x197, x198 = bits.Add32(x147, x179, x196)
  var x199 uint32
  var x200 uint32
  x199, x200 = bits.Add32(x149, x181, x198)
  var x201 uint32
  var x202 uint32
  x201, x202 = bits.Add32(x151, x183, x200)
  var x203 uint32
  var x204 uint32
  x203, x204 = bits.Add32(x153, x185, x202)
  var x205 uint32
  var x206 uint32
  x205, x206 = bits.Add32(x155, x187, x204)
  var x207 uint32
  var x208 uint32
  x207, x208 = bits.Add32(x157, x189, x206)
  var x209 uint32
  var x210 uint32
  x209, x210 = bits.Mul32(x191, 0xffffffff)
  var x211 uint32
  var x212 uint32
  x211, x212 = bits.Mul32(x191, 0xffffffff)
  var x213 uint32
  var x214 uint32
  x213, x214 = bits.Mul32(x191, 0xffffffff)
  var x215 uint32
  var x216 uint32
  x215, x216 = bits.Mul32(x191, 0xffffffff)
  var x217 uint32
  var x218 uint32
  x217, x218 = bits.Add32(x216, x213, 0x0)
  var x219 uint32
  var x220 uint32
  x219, x220 = bits.Add32(x214, x211, x218)
  var x221 uint32
  x221, _ = bits.Add32(x212, uint32(0x0), x220)
  var x224 uint32
  _, x224 = bits.Add32(x191, x215, 0x0)
  var x225 uint32
  var x226 uint32
  x225, x226 = bits.Add32(x193, x217, x224)
  var x227 uint32
  var x228 uint32
  x227, x228 = bits.Add32(x195, x219, x226)
  var x229 uint32
  var x230 uint32
  x229, x230 = bits.Add32(x197, x221, x228)
  var x231 uint32
  var x232 uint32
  x231, x232 = bits.Add32(x199, uint32(0x0), x230)
  var x233 uint32
  var x234 uint32
  x233, x234 = bits.Add32(x201, uint32(0x0), x232)
  var x235 uint32
  var x236 uint32
  x235, x236 = bits.Add32(x203, x191, x234)
  var x237 uint32
  var x238 uint32
  x237, x238 = bits.Add32(x205, x209, x236)
  var x239 uint32
  var x240 uint32
  x239, x240 = bits.Add32(x207, x210, x238)
  var x241 uint32
  x241, _ = bits.Add32(x208, uint32(0x0), x240)
  var x243 uint32
  var x244 uint32
  x243, x244 = bits.Mul32(x3, (arg2[7]))
  var x245 uint32
  var x246 uint32
  x245, x246 = bits.Mul32(x3, (arg2[6]))
  var x247 uint32
  var x248 uint32
  x247, x248 = bits.Mul32(x3, (arg2[5]))
  var x249 uint32
  var x250 uint32
  x249, x250 = bits.Mul32(x3, (arg2[4]))
  var x251 uint32
  var x252 uint32
  x251, x252 = bits.Mul32(x3, (arg2[3]))
  var x253 uint32
  var x254 uint32
  x253, x254 = bits.Mul32(x3, (arg2[2]))
  var x255 uint32
  var x256 uint32
  x255, x256 = bits.Mul32(x3, (arg2[1]))
  var x257 uint32
  var x258 uint32
  x257, x258 = bits.Mul32(x3, (arg2[0]))
  var x259 uint32
  var x260 uint32
  x259, x260 = bits.Add32(x258, x255, 0x0)
  var x261 uint32
  var x262 uint32
  x261, x262 = bits.Add32(x256, x253, x260)
  var x263 uint32
  var x264 uint32
  x263, x264 = bits.Add32(x254, x251, x262)
  var x265 uint32
  var x266 uint32
  x265, x266 = bits.Add32(x252, x249, x264)
  var x267 uint32
  var x268 uint32
  x267, x268 = bits.Add32(x250, x247, x266)
  var x269 uint32
  var x270 uint32
  x269, x270 = bits.Add32(x248, x245, x268)
  var x271 uint32
  var x272 uint32
  x271, x272 = bits.Add32(x246, x243, x270)
  var x273 uint32
  x273, _ = bits.Add32(x244, uint32(0x0), x272)
  var x275 uint32
  var x276 uint32
  x275, x276 = bits.Add32(x225, x257, 0x0)
  var x277 uint32
  var x278 uint32
  x277, x278 = bits.Add32(x227, x259, x276)
  var x279 uint32
  var x280 uint32
  x279, x280 = bits.Add32(x229, x261, x278)
  var x281 uint32
  var x282 uint32
  x281, x282 = bits.Add32(x231, x263, x280)
  var x283 uint32
  var x284 uint32
  x283, x284 = bits.Add32(x233, x265, x282)
  var x285 uint32
  var x286 uint32
  x285, x286 = bits.Add32(x235, x267, x284)
  var x287 uint32
  var x288 uint32
  x287, x288 = bits.Add32(x237, x269, x286)
  var x289 uint32
  var x290 uint32
  x289, x290 = bits.Add32(x239, x271, x288)
  var x291 uint32
  var x292 uint32
  x291, x292 = bits.Add32(x241, x273, x290)
  var x293 uint32
  var x294 uint32
  x293, x294 = bits.Mul32(x275, 0xffffffff)
  var x295 uint32
  var x296 uint32
  x295, x296 = bits.Mul32(x275, 0xffffffff)
  var x297 uint32
  var x298 uint32
  x297, x298 = bits.Mul32(x275, 0xffffffff)
  var x299 uint32
  var x300 uint32
  x299, x300 = bits.Mul32(x275, 0xffffffff)
  var x301 uint32
  var x302 uint32
  x301, x302 = bits.Add32(x300, x297, 0x0)
  var x303 uint32
  var x304 uint32
  x303, x304 = bits.Add32(x298, x295, x302)
  var x305 uint32
  x305, _ = bits.Add32(x296, uint32(0x0), x304)
  var x308 uint32
  _, x308 = bits.Add32(x275, x299, 0x0)
  var x309 uint32
  var x310 uint32
  x309, x310 = bits.Add32(x277, x301, x308)
  var x311 uint32
  var x312 uint32
  x311, x312 = bits.Add32(x279, x303, x310)
  var x313 uint32
  var x314 uint32
  x313, x314 = bits.Add32(x281, x305, x312)
  var x315 uint32
  var x316 uint32
  x315, x316 = bits.Add32(x283, uint32(0x0), x314)
  var x317 uint32
  var x318 uint32
  x317, x318 = bits.Add32(x285, uint32(0x0), x316)
  var x319 uint32
  var x320 uint32
  x319, x320 = bits.Add32(x287, x275, x318)
  var x321 uint32
  var x322 uint32
  x321, x322 = bits.Add32(x289, x293, x320)
  var x323 uint32
  var x324 uint32
  x323, x324 = bits.Add32(x291, x294, x322)
  var x325 uint32
  x325, _ = bits.Add32(x292, uint32(0x0), x324)
  var x327 uint32
  var x328 uint32
  x327, x328 = bits.Mul32(x4, (arg2[7]))
  var x329 uint32
  var x330 uint32
  x329, x330 = bits.Mul32(x4, (arg2[6]))
  var x331 uint32
  var x332 uint32
  x331, x332 = bits.Mul32(x4, (arg2[5]))
  var x333 uint32
  var x334 uint32
  x333, x334 = bits.Mul32(x4, (arg2[4]))
  var x335 uint32
  var x336 uint32
  x335, x336 = bits.Mul32(x4, (arg2[3]))
  var x337 uint32
  var x338 uint32
  x337, x338 = bits.Mul32(x4, (arg2[2]))
  var x339 uint32
  var x340 uint32
  x339, x340 = bits.Mul32(x4, (arg2[1]))
  var x341 uint32
  var x342 uint32
  x341, x342 = bits.Mul32(x4, (arg2[0]))
  var x343 uint32
  var x344 uint32
  x343, x344 = bits.Add32(x342, x339, 0x0)
  var x345 uint32
  var x346 uint32
  x345, x346 = bits.Add32(x340, x337, x344)
  var x347 uint32
  var x348 uint32
  x347, x348 = bits.Add32(x338, x335, x346)
  var x349 uint32
  var x350 uint32
  x349, x350 = bits.Add32(x336, x333, x348)
  var x351 uint32
  var x352 uint32
  x351, x352 = bits.Add32(x334, x331, x350)
  var x353 uint32
  var x354 uint32
  x353, x354 = bits.Add32(x332, x329, x352)
  var x355 uint32
  var x356 uint32
  x355, x356 = bits.Add32(x330, x327, x354)
  var x357 uint32
  x357, _ = bits.Add32(x328, uint32(0x0), x356)
  var x359 uint32
  var x360 uint32
  x359, x360 = bits.Add32(x309, x341, 0x0)
  var x361 uint32
  var x362 uint32
  x361, x362 = bits.Add32(x311, x343, x360)
  var x363 uint32
  var x364 uint32
  x363, x364 = bits.Add32(x313, x345, x362)
  var x365 uint32
  var x366 uint32
  x365, x366 = bits.Add32(x315, x347, x364)
  var x367 uint32
  var x368 uint32
  x367, x368 = bits.Add32(x317, x349, x366)
  var x369 uint32
  var x370 uint32
  x369, x370 = bits.Add32(x319, x351, x368)
  var x371 uint32
  var x372 uint32
  x371, x372 = bits.Add32(x321, x353, x370)
  var x373 uint32
  var x374 uint32
  x373, x374 = bits.Add32(x323, x355, x372)
  var x375 uint32
  var x376 uint32
  x375, x376 = bits.Add32(x325, x357, x374)
  var x377 uint32
  var x378 uint32
  x377, x378 = bits.Mul32(x359, 0xffffffff)
  var x379 uint32
  var x380 uint32
  x379, x380 = bits.Mul32(x359, 0xffffffff)
  var x381 uint32
  var x382 uint32
  x381, x382 = bits.Mul32(x359, 0xffffffff)
  var x383 uint32
  var x384 uint32
  x383, x384 = bits.Mul32(x359, 0xffffffff)
  var x385 uint32
  var x386 uint32
  x385, x386 = bits.Add32(x384, x381, 0x0)
  var x387 uint32
  var x388 uint32
  x387, x388 = bits.Add32(x382, x379, x386)
  var x389 uint32
  x389, _ = bits.Add32(x380, uint32(0x0), x388)
  var x392 uint32
  _, x392 = bits.Add32(x359, x383, 0x0)
  var x393 uint32
  var x394 uint32
  x393, x394 = bits.Add32(x361, x385, x392)
  var x395 uint32
  var x396 uint32
  x395, x396 = bits.Add32(x363, x387, x394)
  var x397 uint32
  var x398 uint32
  x397, x398 = bits.Add32(x365, x389, x396)
  var x399 uint32
  var x400 uint32
  x399, x400 = bits.Add32(x367, uint32(0x0), x398)
  var x401 uint32
  var x402 uint32
  x401, x402 = bits.Add32(x369, uint32(0x0), x400)
  var x403 uint32
  var x404 uint32
  x403, x404 = bits.Add32(x371, x359, x402)
  var x405 uint32
  var x406 uint32
  x405, x406 = bits.Add32(x373, x377, x404)
  var x407 uint32
  var x408 uint32
  x407, x408 = bits.Add32(x375, x378, x406)
  var x409 uint32
  x409, _ = bits.Add32(x376, uint32(0x0), x408)
  var x411 uint32
  var x412 uint32
  x411, x412 = bits.Mul32(x5, (arg2[7]))
  var x413 uint32
  var x414 uint32
  x413, x414 = bits.Mul32(x5, (arg2[6]))
  var x415 uint32
  var x416 uint32
  x415, x416 = bits.Mul32(x5, (arg2[5]))
  var x417 uint32
  var x418 uint32
  x417, x418 = bits.Mul32(x5, (arg2[4]))
  var x419 uint32
  var x420 uint32
  x419, x420 = bits.Mul32(x5, (arg2[3]))
  var x421 uint32
  var x422 uint32
  x421, x422 = bits.Mul32(x5, (arg2[2]))
  var x423 uint32
  var x424 uint32
  x423, x424 = bits.Mul32(x5, (arg2[1]))
  var x425 uint32
  var x426 uint32
  x425, x426 = bits.Mul32(x5, (arg2[0]))
  var x427 uint32
  var x428 uint32
  x427, x428 = bits.Add32(x426, x423, 0x0)
  var x429 uint32
  var x430 uint32
  x429, x430 = bits.Add32(x424, x421, x428)
  var x431 uint32
  var x432 uint32
  x431, x432 = bits.Add32(x422, x419, x430)
  var x433 uint32
  var x434 uint32
  x433, x434 = bits.Add32(x420, x417, x432)
  var x435 uint32
  var x436 uint32
  x435, x436 = bits.Add32(x418, x415, x434)
  var x437 uint32
  var x438 uint32
  x437, x438 = bits.Add32(x416, x413, x436)
  var x439 uint32
  var x440 uint32
  x439, x440 = bits.Add32(x414, x411, x438)
  var x441 uint32
  x441, _ = bits.Add32(x412, uint32(0x0), x440)
  var x443 uint32
  var x444 uint32
  x443, x444 = bits.Add32(x393, x425, 0x0)
  var x445 uint32
  var x446 uint32
  x445, x446 = bits.Add32(x395, x427, x444)
  var x447 uint32
  var x448 uint32
  x447, x448 = bits.Add32(x397, x429, x446)
  var x449 uint32
  var x450 uint32
  x449, x450 = bits.Add32(x399, x431, x448)
  var x451 uint32
  var x452 uint32
  x451, x452 = bits.Add32(x401, x433, x450)
  var x453 uint32
  var x454 uint32
  x453, x454 = bits.Add32(x403, x435, x452)
  var x455 uint32
  var x456 uint32
  x455, x456 = bits.Add32(x405, x437, x454)
  var x457 uint32
  var x458 uint32
  x457, x458 = bits.Add32(x407, x439, x456)
  var x459 uint32
  var x460 uint32
  x459, x460 = bits.Add32(x409, x441, x458)
  var x461 uint32
  var x462 uint32
  x461, x462 = bits.Mul32(x443, 0xffffffff)
  var x463 uint32
  var x464 uint32
  x463, x464 = bits.Mul32(x443, 0xffffffff)
  var x465 uint32
  var x466 uint32
  x465, x466 = bits.Mul32(x443, 0xffffffff)
  var x467 uint32
  var x468 uint32
  x467, x468 = bits.Mul32(x443, 0xffffffff)
  var x469 uint32
  var x470 uint32
  x469, x470 = bits.Add32(x468, x465, 0x0)
  var x471 uint32
  var x472 uint32
  x471, x472 = bits.Add32(x466, x463, x470)
  var x473 uint32
  x473, _ = bits.Add32(x464, uint32(0x0), x472)
  var x476 uint32
  _, x476 = bits.Add32(x443, x467, 0x0)
  var x477 uint32
  var x478 uint32
  x477, x478 = bits.Add32(x445, x469, x476)
  var x479 uint32
  var x480 uint32
  x479, x480 = bits.Add32(x447, x471, x478)
  var x481 uint32
  var x482 uint32
  x481, x482 = bits.Add32(x449, x473, x480)
  var x483 uint32
  var x484 uint32
  x483, x484 = bits.Add32(x451, uint32(0x0), x482)
  var x485 uint32
  var x486 uint32
  x485, x486 = bits.Add32(x453, uint32(0x0), x484)
  var x487 uint32
  var x488 uint32
  x487, x488 = bits.Add32(x455, x443, x486)
  var x489 uint32
  var x490 uint32
  x489, x490 = bits.Add32(x457, x461, x488)
  var x491 uint32
  var x492 uint32
  x491, x492 = bits.Add32(x459, x462, x490)
  var x493 uint32
  x493, _ = bits.Add32(x460, uint32(0x0), x492)
  var x495 uint32
  var x496 uint32
  x495, x496 = bits.Mul32(x6, (arg2[7]))
  var x497 uint32
  var x498 uint32
  x497, x498 = bits.Mul32(x6, (arg2[6]))
  var x499 uint32
  var x500 uint32
  x499, x500 = bits.Mul32(x6, (arg2[5]))
  var x501 uint32
  var x502 uint32
  x501, x502 = bits.Mul32(x6, (arg2[4]))
  var x503 uint32
  var x504 uint32
  x503, x504 = bits.Mul32(x6, (arg2[3]))
  var x505 uint32
  var x506 uint32
  x505, x506 = bits.Mul32(x6, (arg2[2]))
  var x507 uint32
  var x508 uint32
  x507, x508 = bits.Mul32(x6, (arg2[1]))
  var x509 uint32
  var x510 uint32
  x509, x510 = bits.Mul32(x6, (arg2[0]))
  var x511 uint32
  var x512 uint32
  x511, x512 = bits.Add32(x510, x507, 0x0)
  var x513 uint32
  var x514 uint32
  x513, x514 = bits.Add32(x508, x505, x512)
  var x515 uint32
  var x516 uint32
  x515, x516 = bits.Add32(x506, x503, x514)
  var x517 uint32
  var x518 uint32
  x517, x518 = bits.Add32(x504, x501, x516)
  var x519 uint32
  var x520 uint32
  x519, x520 = bits.Add32(x502, x499, x518)
  var x521 uint32
  var x522 uint32
  x521, x522 = bits.Add32(x500, x497, x520)
  var x523 uint32
  var x524 uint32
  x523, x524 = bits.Add32(x498, x495, x522)
  var x525 uint32
  x525, _ = bits.Add32(x496, uint32(0x0), x524)
  var x527 uint32
  var x528 uint32
  x527, x528 = bits.Add32(x477, x509, 0x0)
  var x529 uint32
  var x530 uint32
  x529, x530 = bits.Add32(x479, x511, x528)
  var x531 uint32
  var x532 uint32
  x531, x532 = bits.Add32(x481, x513, x530)
  var x533 uint32
  var x534 uint32
  x533, x534 = bits.Add32(x483, x515, x532)
  var x535 uint32
  var x536 uint32
  x535, x536 = bits.Add32(x485, x517, x534)
  var x537 uint32
  var x538 uint32
  x537, x538 = bits.Add32(x487, x519, x536)
  var x539 uint32
  var x540 uint32
  x539, x540 = bits.Add32(x489, x521, x538)
  var x541 uint32
  var x542 uint32
  x541, x542 = bits.Add32(x491, x523, x540)
  var x543 uint32
  var x544 uint32
  x543, x544 = bits.Add32(x493, x525, x542)
  var x545 uint32
  var x546 uint32
  x545, x546 = bits.Mul32(x527, 0xffffffff)
  var x547 uint32
  var x548 uint32
  x547, x548 = bits.Mul32(x527, 0xffffffff)
  var x549 uint32
  var x550 uint32
  x549, x550 = bits.Mul32(x527, 0xffffffff)
  var x551 uint32
  var x552 uint32
  x551, x552 = bits.Mul32(x527, 0xffffffff)
  var x553 uint32
  var x554 uint32
  x553, x554 = bits.Add32(x552, x549, 0x0)
  var x555 uint32
  var x556 uint32
  x555, x556 = bits.Add32(x550, x547, x554)
  var x557 uint32
  x557, _ = bits.Add32(x548, uint32(0x0), x556)
  var x560 uint32
  _, x560 = bits.Add32(x527, x551, 0x0)
  var x561 uint32
  var x562 uint32
  x561, x562 = bits.Add32(x529, x553, x560)
  var x563 uint32
  var x564 uint32
  x563, x564 = bits.Add32(x531, x555, x562)
  var x565 uint32
  var x566 uint32
  x565, x566 = bits.Add32(x533, x557, x564)
  var x567 uint32
  var x568 uint32
  x567, x568 = bits.Add32(x535, uint32(0x0), x566)
  var x569 uint32
  var x570 uint32
  x569, x570 = bits.Add32(x537, uint32(0x0), x568)
  var x571 uint32
  var x572 uint32
  x571, x572 = bits.Add32(x539, x527, x570)
  var x573 uint32
  var x574 uint32
  x573, x574 = bits.Add32(x541, x545, x572)
  var x575 uint32
  var x576 uint32
  x575, x576 = bits.Add32(x543, x546, x574)
  var x577 uint32
  x577, _ = bits.Add32(x544, uint32(0x0), x576)
  var x579 uint32
  var x580 uint32
  x579, x580 = bits.Mul32(x7, (arg2[7]))
  var x581 uint32
  var x582 uint32
  x581, x582 = bits.Mul32(x7, (arg2[6]))
  var x583 uint32
  var x584 uint32
  x583, x584 = bits.Mul32(x7, (arg2[5]))
  var x585 uint32
  var x586 uint32
  x585, x586 = bits.Mul32(x7, (arg2[4]))
  var x587 uint32
  var x588 uint32
  x587, x588 = bits.Mul32(x7, (arg2[3]))
  var x589 uint32
  var x590 uint32
  x589, x590 = bits.Mul32(x7, (arg2[2]))
  var x591 uint32
  var x592 uint32
  x591, x592 = bits.Mul32(x7, (arg2[1]))
  var x593 uint32
  var x594 uint32
  x593, x594 = bits.Mul32(x7, (arg2[0]))
  var x595 uint32
  var x596 uint32
  x595, x596 = bits.Add32(x594, x591, 0x0)
  var x597 uint32
  var x598 uint32
  x597, x598 = bits.Add32(x592, x589, x596)
  var x599 uint32
  var x600 uint32
  x599, x600 = bits.Add32(x590, x587, x598)
  var x601 uint32
  var x602 uint32
  x601, x602 = bits.Add32(x588, x585, x600)
  var x603 uint32
  var x604 uint32
  x603, x604 = bits.Add32(x586, x583, x602)
  var x605 uint32
  var x606 uint32
  x605, x606 = bits.Add32(x584, x581, x604)
  var x607 uint32
  var x608 uint32
  x607, x608 = bits.Add32(x582, x579, x606)
  var x609 uint32
  x609, _ = bits.Add32(x580, uint32(0x0), x608)
  var x611 uint32
  var x612 uint32
  x611, x612 = bits.Add32(x561, x593, 0x0)
  var x613 uint32
  var x614 uint32
  x613, x614 = bits.Add32(x563, x595, x612)
  var x615 uint32
  var x616 uint32
  x615, x616 = bits.Add32(x565, x597, x614)
  var x617 uint32
  var x618 uint32
  x617, x618 = bits.Add32(x567, x599, x616)
  var x619 uint32
  var x620 uint32
  x619, x620 = bits.Add32(x569, x601, x618)
  var x621 uint32
  var x622 uint32
  x621, x622 = bits.Add32(x571, x603, x620)
  var x623 uint32
  var x624 uint32
  x623, x624 = bits.Add32(x573, x605, x622)
  var x625 uint32
  var x626 uint32
  x625, x626 = bits.Add32(x575, x607, x624)
  var x627 uint32
  var x628 uint32
  x627, x628 = bits.Add32(x577, x609, x626)
  var x629 uint32
  var x630 uint32
  x629, x630 = bits.Mul32(x611, 0xffffffff)
  var x631 uint32
  var x632 uint32
  x631, x632 = bits.Mul32(x611, 0xffffffff)
  var x633 uint32
  var x634 uint32
  x633, x634 = bits.Mul32(x611, 0xffffffff)
  var x635 uint32
  var x636 uint32
  x635, x636 = bits.Mul32(x611, 0xffffffff)
  var x637 uint32
  var x638 uint32
  x637, x638 = bits.Add32(x636, x633, 0x0)
  var x639 uint32
  var x640 uint32
  x639, x640 = bits.Add32(x634, x631, x638)
  var x641 uint32
  x641, _ = bits.Add32(x632, uint32(0x0), x640)
  var x644 uint32
  _, x644 = bits.Add32(x611, x635, 0x0)
  var x645 uint32
  var x646 uint32
  x645, x646 = bits.Add32(x613, x637, x644)
  var x647 uint32
  var x648 uint32
  x647, x648 = bits.Add32(x615, x639, x646)
  var x649 uint32
  var x650 uint32
  x649, x650 = bits.Add32(x617, x641, x648)
  var x651 uint32
  var x652 uint32
  x651, x652 = bits.Add32(x619, uint32(0x0), x650)
  var x653 uint32
  var x654 uint32
  x653, x654 = bits.Add32(x621, uint32(0x0), x652)
  var x655 uint32
  var x656 uint32
  x655, x656 = bits.Add32(x623, x611, x654)
  var x657 uint32
  var x658 uint32
  x657, x658 = bits.Add32(x625, x629, x656)
  var x659 uint32
  var x660 uint32
  x659, x660 = bits.Add32(x627, x630, x658)
  var x661 uint32
  x661, _ = bits.Add32(x628, uint32(0x0), x660)
  var x663 uint32
  var x664 uint32
  x663, x664 = bits.Sub32(x645, 0xffffffff, uint32(0x0))
  var x665 uint32
  var x666 uint32
  x665, x666 = bits.Sub32(x647, 0xffffffff, x664)
  var x667 uint32
  var x668 uint32
  x667, x668 = bits.Sub32(x649, 0xffffffff, x666)
  var x669 uint32
  var x670 uint32
  x669, x670 = bits.Sub32(x651, uint32(0x0), x668)
  var x671 uint32
  var x672 uint32
  x671, x672 = bits.Sub32(x653, uint32(0x0), x670)
  var x673 uint32
  var x674 uint32
  x673, x674 = bits.Sub32(x655, uint32(0x0), x672)
  var x675 uint32
  var x676 uint32
  x675, x676 = bits.Sub32(x657, 0x1, x674)
  var x677 uint32
  var x678 uint32
  x677, x678 = bits.Sub32(x659, 0xffffffff, x676)
  var x680 uint32
  _, x680 = bits.Sub32(x661, uint32(0x0), x678)
  var x681 uint32
  fiat_p256_cmovznz_u32(&x681, x680, x663, x645)
  var x682 uint32
  fiat_p256_cmovznz_u32(&x682, x680, x665, x647)
  var x683 uint32
  fiat_p256_cmovznz_u32(&x683, x680, x667, x649)
  var x684 uint32
  fiat_p256_cmovznz_u32(&x684, x680, x669, x651)
  var x685 uint32
  fiat_p256_cmovznz_u32(&x685, x680, x671, x653)
  var x686 uint32
  fiat_p256_cmovznz_u32(&x686, x680, x673, x655)
  var x687 uint32
  fiat_p256_cmovznz_u32(&x687, x680, x675, x657)
  var x688 uint32
  fiat_p256_cmovznz_u32(&x688, x680, x677, x659)
  out1[0] = x681
  out1[1] = x682
  out1[2] = x683
  out1[3] = x684
  out1[4] = x685
  out1[5] = x686
  out1[6] = x687
  out1[7] = x688
}

/*
 * The function fiat_p256_square squares a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_p256_square(out1 *[8]uint32, arg1 *[8]uint32) {
  var x1 uint32 = (arg1[1])
  var x2 uint32 = (arg1[2])
  var x3 uint32 = (arg1[3])
  var x4 uint32 = (arg1[4])
  var x5 uint32 = (arg1[5])
  var x6 uint32 = (arg1[6])
  var x7 uint32 = (arg1[7])
  var x8 uint32 = (arg1[0])
  var x9 uint32
  var x10 uint32
  x9, x10 = bits.Mul32(x8, (arg1[7]))
  var x11 uint32
  var x12 uint32
  x11, x12 = bits.Mul32(x8, (arg1[6]))
  var x13 uint32
  var x14 uint32
  x13, x14 = bits.Mul32(x8, (arg1[5]))
  var x15 uint32
  var x16 uint32
  x15, x16 = bits.Mul32(x8, (arg1[4]))
  var x17 uint32
  var x18 uint32
  x17, x18 = bits.Mul32(x8, (arg1[3]))
  var x19 uint32
  var x20 uint32
  x19, x20 = bits.Mul32(x8, (arg1[2]))
  var x21 uint32
  var x22 uint32
  x21, x22 = bits.Mul32(x8, (arg1[1]))
  var x23 uint32
  var x24 uint32
  x23, x24 = bits.Mul32(x8, (arg1[0]))
  var x25 uint32
  var x26 uint32
  x25, x26 = bits.Add32(x24, x21, 0x0)
  var x27 uint32
  var x28 uint32
  x27, x28 = bits.Add32(x22, x19, x26)
  var x29 uint32
  var x30 uint32
  x29, x30 = bits.Add32(x20, x17, x28)
  var x31 uint32
  var x32 uint32
  x31, x32 = bits.Add32(x18, x15, x30)
  var x33 uint32
  var x34 uint32
  x33, x34 = bits.Add32(x16, x13, x32)
  var x35 uint32
  var x36 uint32
  x35, x36 = bits.Add32(x14, x11, x34)
  var x37 uint32
  var x38 uint32
  x37, x38 = bits.Add32(x12, x9, x36)
  var x39 uint32
  x39, _ = bits.Add32(x10, uint32(0x0), x38)
  var x41 uint32
  var x42 uint32
  x41, x42 = bits.Mul32(x23, 0xffffffff)
  var x43 uint32
  var x44 uint32
  x43, x44 = bits.Mul32(x23, 0xffffffff)
  var x45 uint32
  var x46 uint32
  x45, x46 = bits.Mul32(x23, 0xffffffff)
  var x47 uint32
  var x48 uint32
  x47, x48 = bits.Mul32(x23, 0xffffffff)
  var x49 uint32
  var x50 uint32
  x49, x50 = bits.Add32(x48, x45, 0x0)
  var x51 uint32
  var x52 uint32
  x51, x52 = bits.Add32(x46, x43, x50)
  var x53 uint32
  x53, _ = bits.Add32(x44, uint32(0x0), x52)
  var x56 uint32
  _, x56 = bits.Add32(x23, x47, 0x0)
  var x57 uint32
  var x58 uint32
  x57, x58 = bits.Add32(x25, x49, x56)
  var x59 uint32
  var x60 uint32
  x59, x60 = bits.Add32(x27, x51, x58)
  var x61 uint32
  var x62 uint32
  x61, x62 = bits.Add32(x29, x53, x60)
  var x63 uint32
  var x64 uint32
  x63, x64 = bits.Add32(x31, uint32(0x0), x62)
  var x65 uint32
  var x66 uint32
  x65, x66 = bits.Add32(x33, uint32(0x0), x64)
  var x67 uint32
  var x68 uint32
  x67, x68 = bits.Add32(x35, x23, x66)
  var x69 uint32
  var x70 uint32
  x69, x70 = bits.Add32(x37, x41, x68)
  var x71 uint32
  var x72 uint32
  x71, x72 = bits.Add32(x39, x42, x70)
  var x73 uint32
  x73, _ = bits.Add32(uint32(0x0), uint32(0x0), x72)
  var x75 uint32
  var x76 uint32
  x75, x76 = bits.Mul32(x1, (arg1[7]))
  var x77 uint32
  var x78 uint32
  x77, x78 = bits.Mul32(x1, (arg1[6]))
  var x79 uint32
  var x80 uint32
  x79, x80 = bits.Mul32(x1, (arg1[5]))
  var x81 uint32
  var x82 uint32
  x81, x82 = bits.Mul32(x1, (arg1[4]))
  var x83 uint32
  var x84 uint32
  x83, x84 = bits.Mul32(x1, (arg1[3]))
  var x85 uint32
  var x86 uint32
  x85, x86 = bits.Mul32(x1, (arg1[2]))
  var x87 uint32
  var x88 uint32
  x87, x88 = bits.Mul32(x1, (arg1[1]))
  var x89 uint32
  var x90 uint32
  x89, x90 = bits.Mul32(x1, (arg1[0]))
  var x91 uint32
  var x92 uint32
  x91, x92 = bits.Add32(x90, x87, 0x0)
  var x93 uint32
  var x94 uint32
  x93, x94 = bits.Add32(x88, x85, x92)
  var x95 uint32
  var x96 uint32
  x95, x96 = bits.Add32(x86, x83, x94)
  var x97 uint32
  var x98 uint32
  x97, x98 = bits.Add32(x84, x81, x96)
  var x99 uint32
  var x100 uint32
  x99, x100 = bits.Add32(x82, x79, x98)
  var x101 uint32
  var x102 uint32
  x101, x102 = bits.Add32(x80, x77, x100)
  var x103 uint32
  var x104 uint32
  x103, x104 = bits.Add32(x78, x75, x102)
  var x105 uint32
  x105, _ = bits.Add32(x76, uint32(0x0), x104)
  var x107 uint32
  var x108 uint32
  x107, x108 = bits.Add32(x57, x89, 0x0)
  var x109 uint32
  var x110 uint32
  x109, x110 = bits.Add32(x59, x91, x108)
  var x111 uint32
  var x112 uint32
  x111, x112 = bits.Add32(x61, x93, x110)
  var x113 uint32
  var x114 uint32
  x113, x114 = bits.Add32(x63, x95, x112)
  var x115 uint32
  var x116 uint32
  x115, x116 = bits.Add32(x65, x97, x114)
  var x117 uint32
  var x118 uint32
  x117, x118 = bits.Add32(x67, x99, x116)
  var x119 uint32
  var x120 uint32
  x119, x120 = bits.Add32(x69, x101, x118)
  var x121 uint32
  var x122 uint32
  x121, x122 = bits.Add32(x71, x103, x120)
  var x123 uint32
  var x124 uint32
  x123, x124 = bits.Add32(x73, x105, x122)
  var x125 uint32
  var x126 uint32
  x125, x126 = bits.Mul32(x107, 0xffffffff)
  var x127 uint32
  var x128 uint32
  x127, x128 = bits.Mul32(x107, 0xffffffff)
  var x129 uint32
  var x130 uint32
  x129, x130 = bits.Mul32(x107, 0xffffffff)
  var x131 uint32
  var x132 uint32
  x131, x132 = bits.Mul32(x107, 0xffffffff)
  var x133 uint32
  var x134 uint32
  x133, x134 = bits.Add32(x132, x129, 0x0)
  var x135 uint32
  var x136 uint32
  x135, x136 = bits.Add32(x130, x127, x134)
  var x137 uint32
  x137, _ = bits.Add32(x128, uint32(0x0), x136)
  var x140 uint32
  _, x140 = bits.Add32(x107, x131, 0x0)
  var x141 uint32
  var x142 uint32
  x141, x142 = bits.Add32(x109, x133, x140)
  var x143 uint32
  var x144 uint32
  x143, x144 = bits.Add32(x111, x135, x142)
  var x145 uint32
  var x146 uint32
  x145, x146 = bits.Add32(x113, x137, x144)
  var x147 uint32
  var x148 uint32
  x147, x148 = bits.Add32(x115, uint32(0x0), x146)
  var x149 uint32
  var x150 uint32
  x149, x150 = bits.Add32(x117, uint32(0x0), x148)
  var x151 uint32
  var x152 uint32
  x151, x152 = bits.Add32(x119, x107, x150)
  var x153 uint32
  var x154 uint32
  x153, x154 = bits.Add32(x121, x125, x152)
  var x155 uint32
  var x156 uint32
  x155, x156 = bits.Add32(x123, x126, x154)
  var x157 uint32
  x157, _ = bits.Add32(x124, uint32(0x0), x156)
  var x159 uint32
  var x160 uint32
  x159, x160 = bits.Mul32(x2, (arg1[7]))
  var x161 uint32
  var x162 uint32
  x161, x162 = bits.Mul32(x2, (arg1[6]))
  var x163 uint32
  var x164 uint32
  x163, x164 = bits.Mul32(x2, (arg1[5]))
  var x165 uint32
  var x166 uint32
  x165, x166 = bits.Mul32(x2, (arg1[4]))
  var x167 uint32
  var x168 uint32
  x167, x168 = bits.Mul32(x2, (arg1[3]))
  var x169 uint32
  var x170 uint32
  x169, x170 = bits.Mul32(x2, (arg1[2]))
  var x171 uint32
  var x172 uint32
  x171, x172 = bits.Mul32(x2, (arg1[1]))
  var x173 uint32
  var x174 uint32
  x173, x174 = bits.Mul32(x2, (arg1[0]))
  var x175 uint32
  var x176 uint32
  x175, x176 = bits.Add32(x174, x171, 0x0)
  var x177 uint32
  var x178 uint32
  x177, x178 = bits.Add32(x172, x169, x176)
  var x179 uint32
  var x180 uint32
  x179, x180 = bits.Add32(x170, x167, x178)
  var x181 uint32
  var x182 uint32
  x181, x182 = bits.Add32(x168, x165, x180)
  var x183 uint32
  var x184 uint32
  x183, x184 = bits.Add32(x166, x163, x182)
  var x185 uint32
  var x186 uint32
  x185, x186 = bits.Add32(x164, x161, x184)
  var x187 uint32
  var x188 uint32
  x187, x188 = bits.Add32(x162, x159, x186)
  var x189 uint32
  x189, _ = bits.Add32(x160, uint32(0x0), x188)
  var x191 uint32
  var x192 uint32
  x191, x192 = bits.Add32(x141, x173, 0x0)
  var x193 uint32
  var x194 uint32
  x193, x194 = bits.Add32(x143, x175, x192)
  var x195 uint32
  var x196 uint32
  x195, x196 = bits.Add32(x145, x177, x194)
  var x197 uint32
  var x198 uint32
  x197, x198 = bits.Add32(x147, x179, x196)
  var x199 uint32
  var x200 uint32
  x199, x200 = bits.Add32(x149, x181, x198)
  var x201 uint32
  var x202 uint32
  x201, x202 = bits.Add32(x151, x183, x200)
  var x203 uint32
  var x204 uint32
  x203, x204 = bits.Add32(x153, x185, x202)
  var x205 uint32
  var x206 uint32
  x205, x206 = bits.Add32(x155, x187, x204)
  var x207 uint32
  var x208 uint32
  x207, x208 = bits.Add32(x157, x189, x206)
  var x209 uint32
  var x210 uint32
  x209, x210 = bits.Mul32(x191, 0xffffffff)
  var x211 uint32
  var x212 uint32
  x211, x212 = bits.Mul32(x191, 0xffffffff)
  var x213 uint32
  var x214 uint32
  x213, x214 = bits.Mul32(x191, 0xffffffff)
  var x215 uint32
  var x216 uint32
  x215, x216 = bits.Mul32(x191, 0xffffffff)
  var x217 uint32
  var x218 uint32
  x217, x218 = bits.Add32(x216, x213, 0x0)
  var x219 uint32
  var x220 uint32
  x219, x220 = bits.Add32(x214, x211, x218)
  var x221 uint32
  x221, _ = bits.Add32(x212, uint32(0x0), x220)
  var x224 uint32
  _, x224 = bits.Add32(x191, x215, 0x0)
  var x225 uint32
  var x226 uint32
  x225, x226 = bits.Add32(x193, x217, x224)
  var x227 uint32
  var x228 uint32
  x227, x228 = bits.Add32(x195, x219, x226)
  var x229 uint32
  var x230 uint32
  x229, x230 = bits.Add32(x197, x221, x228)
  var x231 uint32
  var x232 uint32
  x231, x232 = bits.Add32(x199, uint32(0x0), x230)
  var x233 uint32
  var x234 uint32
  x233, x234 = bits.Add32(x201, uint32(0x0), x232)
  var x235 uint32
  var x236 uint32
  x235, x236 = bits.Add32(x203, x191, x234)
  var x237 uint32
  var x238 uint32
  x237, x238 = bits.Add32(x205, x209, x236)
  var x239 uint32
  var x240 uint32
  x239, x240 = bits.Add32(x207, x210, x238)
  var x241 uint32
  x241, _ = bits.Add32(x208, uint32(0x0), x240)
  var x243 uint32
  var x244 uint32
  x243, x244 = bits.Mul32(x3, (arg1[7]))
  var x245 uint32
  var x246 uint32
  x245, x246 = bits.Mul32(x3, (arg1[6]))
  var x247 uint32
  var x248 uint32
  x247, x248 = bits.Mul32(x3, (arg1[5]))
  var x249 uint32
  var x250 uint32
  x249, x250 = bits.Mul32(x3, (arg1[4]))
  var x251 uint32
  var x252 uint32
  x251, x252 = bits.Mul32(x3, (arg1[3]))
  var x253 uint32
  var x254 uint32
  x253, x254 = bits.Mul32(x3, (arg1[2]))
  var x255 uint32
  var x256 uint32
  x255, x256 = bits.Mul32(x3, (arg1[1]))
  var x257 uint32
  var x258 uint32
  x257, x258 = bits.Mul32(x3, (arg1[0]))
  var x259 uint32
  var x260 uint32
  x259, x260 = bits.Add32(x258, x255, 0x0)
  var x261 uint32
  var x262 uint32
  x261, x262 = bits.Add32(x256, x253, x260)
  var x263 uint32
  var x264 uint32
  x263, x264 = bits.Add32(x254, x251, x262)
  var x265 uint32
  var x266 uint32
  x265, x266 = bits.Add32(x252, x249, x264)
  var x267 uint32
  var x268 uint32
  x267, x268 = bits.Add32(x250, x247, x266)
  var x269 uint32
  var x270 uint32
  x269, x270 = bits.Add32(x248, x245, x268)
  var x271 uint32
  var x272 uint32
  x271, x272 = bits.Add32(x246, x243, x270)
  var x273 uint32
  x273, _ = bits.Add32(x244, uint32(0x0), x272)
  var x275 uint32
  var x276 uint32
  x275, x276 = bits.Add32(x225, x257, 0x0)
  var x277 uint32
  var x278 uint32
  x277, x278 = bits.Add32(x227, x259, x276)
  var x279 uint32
  var x280 uint32
  x279, x280 = bits.Add32(x229, x261, x278)
  var x281 uint32
  var x282 uint32
  x281, x282 = bits.Add32(x231, x263, x280)
  var x283 uint32
  var x284 uint32
  x283, x284 = bits.Add32(x233, x265, x282)
  var x285 uint32
  var x286 uint32
  x285, x286 = bits.Add32(x235, x267, x284)
  var x287 uint32
  var x288 uint32
  x287, x288 = bits.Add32(x237, x269, x286)
  var x289 uint32
  var x290 uint32
  x289, x290 = bits.Add32(x239, x271, x288)
  var x291 uint32
  var x292 uint32
  x291, x292 = bits.Add32(x241, x273, x290)
  var x293 uint32
  var x294 uint32
  x293, x294 = bits.Mul32(x275, 0xffffffff)
  var x295 uint32
  var x296 uint32
  x295, x296 = bits.Mul32(x275, 0xffffffff)
  var x297 uint32
  var x298 uint32
  x297, x298 = bits.Mul32(x275, 0xffffffff)
  var x299 uint32
  var x300 uint32
  x299, x300 = bits.Mul32(x275, 0xffffffff)
  var x301 uint32
  var x302 uint32
  x301, x302 = bits.Add32(x300, x297, 0x0)
  var x303 uint32
  var x304 uint32
  x303, x304 = bits.Add32(x298, x295, x302)
  var x305 uint32
  x305, _ = bits.Add32(x296, uint32(0x0), x304)
  var x308 uint32
  _, x308 = bits.Add32(x275, x299, 0x0)
  var x309 uint32
  var x310 uint32
  x309, x310 = bits.Add32(x277, x301, x308)
  var x311 uint32
  var x312 uint32
  x311, x312 = bits.Add32(x279, x303, x310)
  var x313 uint32
  var x314 uint32
  x313, x314 = bits.Add32(x281, x305, x312)
  var x315 uint32
  var x316 uint32
  x315, x316 = bits.Add32(x283, uint32(0x0), x314)
  var x317 uint32
  var x318 uint32
  x317, x318 = bits.Add32(x285, uint32(0x0), x316)
  var x319 uint32
  var x320 uint32
  x319, x320 = bits.Add32(x287, x275, x318)
  var x321 uint32
  var x322 uint32
  x321, x322 = bits.Add32(x289, x293, x320)
  var x323 uint32
  var x324 uint32
  x323, x324 = bits.Add32(x291, x294, x322)
  var x325 uint32
  x325, _ = bits.Add32(x292, uint32(0x0), x324)
  var x327 uint32
  var x328 uint32
  x327, x328 = bits.Mul32(x4, (arg1[7]))
  var x329 uint32
  var x330 uint32
  x329, x330 = bits.Mul32(x4, (arg1[6]))
  var x331 uint32
  var x332 uint32
  x331, x332 = bits.Mul32(x4, (arg1[5]))
  var x333 uint32
  var x334 uint32
  x333, x334 = bits.Mul32(x4, (arg1[4]))
  var x335 uint32
  var x336 uint32
  x335, x336 = bits.Mul32(x4, (arg1[3]))
  var x337 uint32
  var x338 uint32
  x337, x338 = bits.Mul32(x4, (arg1[2]))
  var x339 uint32
  var x340 uint32
  x339, x340 = bits.Mul32(x4, (arg1[1]))
  var x341 uint32
  var x342 uint32
  x341, x342 = bits.Mul32(x4, (arg1[0]))
  var x343 uint32
  var x344 uint32
  x343, x344 = bits.Add32(x342, x339, 0x0)
  var x345 uint32
  var x346 uint32
  x345, x346 = bits.Add32(x340, x337, x344)
  var x347 uint32
  var x348 uint32
  x347, x348 = bits.Add32(x338, x335, x346)
  var x349 uint32
  var x350 uint32
  x349, x350 = bits.Add32(x336, x333, x348)
  var x351 uint32
  var x352 uint32
  x351, x352 = bits.Add32(x334, x331, x350)
  var x353 uint32
  var x354 uint32
  x353, x354 = bits.Add32(x332, x329, x352)
  var x355 uint32
  var x356 uint32
  x355, x356 = bits.Add32(x330, x327, x354)
  var x357 uint32
  x357, _ = bits.Add32(x328, uint32(0x0), x356)
  var x359 uint32
  var x360 uint32
  x359, x360 = bits.Add32(x309, x341, 0x0)
  var x361 uint32
  var x362 uint32
  x361, x362 = bits.Add32(x311, x343, x360)
  var x363 uint32
  var x364 uint32
  x363, x364 = bits.Add32(x313, x345, x362)
  var x365 uint32
  var x366 uint32
  x365, x366 = bits.Add32(x315, x347, x364)
  var x367 uint32
  var x368 uint32
  x367, x368 = bits.Add32(x317, x349, x366)
  var x369 uint32
  var x370 uint32
  x369, x370 = bits.Add32(x319, x351, x368)
  var x371 uint32
  var x372 uint32
  x371, x372 = bits.Add32(x321, x353, x370)
  var x373 uint32
  var x374 uint32
  x373, x374 = bits.Add32(x323, x355, x372)
  var x375 uint32
  var x376 uint32
  x375, x376 = bits.Add32(x325, x357, x374)
  var x377 uint32
  var x378 uint32
  x377, x378 = bits.Mul32(x359, 0xffffffff)
  var x379 uint32
  var x380 uint32
  x379, x380 = bits.Mul32(x359, 0xffffffff)
  var x381 uint32
  var x382 uint32
  x381, x382 = bits.Mul32(x359, 0xffffffff)
  var x383 uint32
  var x384 uint32
  x383, x384 = bits.Mul32(x359, 0xffffffff)
  var x385 uint32
  var x386 uint32
  x385, x386 = bits.Add32(x384, x381, 0x0)
  var x387 uint32
  var x388 uint32
  x387, x388 = bits.Add32(x382, x379, x386)
  var x389 uint32
  x389, _ = bits.Add32(x380, uint32(0x0), x388)
  var x392 uint32
  _, x392 = bits.Add32(x359, x383, 0x0)
  var x393 uint32
  var x394 uint32
  x393, x394 = bits.Add32(x361, x385, x392)
  var x395 uint32
  var x396 uint32
  x395, x396 = bits.Add32(x363, x387, x394)
  var x397 uint32
  var x398 uint32
  x397, x398 = bits.Add32(x365, x389, x396)
  var x399 uint32
  var x400 uint32
  x399, x400 = bits.Add32(x367, uint32(0x0), x398)
  var x401 uint32
  var x402 uint32
  x401, x402 = bits.Add32(x369, uint32(0x0), x400)
  var x403 uint32
  var x404 uint32
  x403, x404 = bits.Add32(x371, x359, x402)
  var x405 uint32
  var x406 uint32
  x405, x406 = bits.Add32(x373, x377, x404)
  var x407 uint32
  var x408 uint32
  x407, x408 = bits.Add32(x375, x378, x406)
  var x409 uint32
  x409, _ = bits.Add32(x376, uint32(0x0), x408)
  var x411 uint32
  var x412 uint32
  x411, x412 = bits.Mul32(x5, (arg1[7]))
  var x413 uint32
  var x414 uint32
  x413, x414 = bits.Mul32(x5, (arg1[6]))
  var x415 uint32
  var x416 uint32
  x415, x416 = bits.Mul32(x5, (arg1[5]))
  var x417 uint32
  var x418 uint32
  x417, x418 = bits.Mul32(x5, (arg1[4]))
  var x419 uint32
  var x420 uint32
  x419, x420 = bits.Mul32(x5, (arg1[3]))
  var x421 uint32
  var x422 uint32
  x421, x422 = bits.Mul32(x5, (arg1[2]))
  var x423 uint32
  var x424 uint32
  x423, x424 = bits.Mul32(x5, (arg1[1]))
  var x425 uint32
  var x426 uint32
  x425, x426 = bits.Mul32(x5, (arg1[0]))
  var x427 uint32
  var x428 uint32
  x427, x428 = bits.Add32(x426, x423, 0x0)
  var x429 uint32
  var x430 uint32
  x429, x430 = bits.Add32(x424, x421, x428)
  var x431 uint32
  var x432 uint32
  x431, x432 = bits.Add32(x422, x419, x430)
  var x433 uint32
  var x434 uint32
  x433, x434 = bits.Add32(x420, x417, x432)
  var x435 uint32
  var x436 uint32
  x435, x436 = bits.Add32(x418, x415, x434)
  var x437 uint32
  var x438 uint32
  x437, x438 = bits.Add32(x416, x413, x436)
  var x439 uint32
  var x440 uint32
  x439, x440 = bits.Add32(x414, x411, x438)
  var x441 uint32
  x441, _ = bits.Add32(x412, uint32(0x0), x440)
  var x443 uint32
  var x444 uint32
  x443, x444 = bits.Add32(x393, x425, 0x0)
  var x445 uint32
  var x446 uint32
  x445, x446 = bits.Add32(x395, x427, x444)
  var x447 uint32
  var x448 uint32
  x447, x448 = bits.Add32(x397, x429, x446)
  var x449 uint32
  var x450 uint32
  x449, x450 = bits.Add32(x399, x431, x448)
  var x451 uint32
  var x452 uint32
  x451, x452 = bits.Add32(x401, x433, x450)
  var x453 uint32
  var x454 uint32
  x453, x454 = bits.Add32(x403, x435, x452)
  var x455 uint32
  var x456 uint32
  x455, x456 = bits.Add32(x405, x437, x454)
  var x457 uint32
  var x458 uint32
  x457, x458 = bits.Add32(x407, x439, x456)
  var x459 uint32
  var x460 uint32
  x459, x460 = bits.Add32(x409, x441, x458)
  var x461 uint32
  var x462 uint32
  x461, x462 = bits.Mul32(x443, 0xffffffff)
  var x463 uint32
  var x464 uint32
  x463, x464 = bits.Mul32(x443, 0xffffffff)
  var x465 uint32
  var x466 uint32
  x465, x466 = bits.Mul32(x443, 0xffffffff)
  var x467 uint32
  var x468 uint32
  x467, x468 = bits.Mul32(x443, 0xffffffff)
  var x469 uint32
  var x470 uint32
  x469, x470 = bits.Add32(x468, x465, 0x0)
  var x471 uint32
  var x472 uint32
  x471, x472 = bits.Add32(x466, x463, x470)
  var x473 uint32
  x473, _ = bits.Add32(x464, uint32(0x0), x472)
  var x476 uint32
  _, x476 = bits.Add32(x443, x467, 0x0)
  var x477 uint32
  var x478 uint32
  x477, x478 = bits.Add32(x445, x469, x476)
  var x479 uint32
  var x480 uint32
  x479, x480 = bits.Add32(x447, x471, x478)
  var x481 uint32
  var x482 uint32
  x481, x482 = bits.Add32(x449, x473, x480)
  var x483 uint32
  var x484 uint32
  x483, x484 = bits.Add32(x451, uint32(0x0), x482)
  var x485 uint32
  var x486 uint32
  x485, x486 = bits.Add32(x453, uint32(0x0), x484)
  var x487 uint32
  var x488 uint32
  x487, x488 = bits.Add32(x455, x443, x486)
  var x489 uint32
  var x490 uint32
  x489, x490 = bits.Add32(x457, x461, x488)
  var x491 uint32
  var x492 uint32
  x491, x492 = bits.Add32(x459, x462, x490)
  var x493 uint32
  x493, _ = bits.Add32(x460, uint32(0x0), x492)
  var x495 uint32
  var x496 uint32
  x495, x496 = bits.Mul32(x6, (arg1[7]))
  var x497 uint32
  var x498 uint32
  x497, x498 = bits.Mul32(x6, (arg1[6]))
  var x499 uint32
  var x500 uint32
  x499, x500 = bits.Mul32(x6, (arg1[5]))
  var x501 uint32
  var x502 uint32
  x501, x502 = bits.Mul32(x6, (arg1[4]))
  var x503 uint32
  var x504 uint32
  x503, x504 = bits.Mul32(x6, (arg1[3]))
  var x505 uint32
  var x506 uint32
  x505, x506 = bits.Mul32(x6, (arg1[2]))
  var x507 uint32
  var x508 uint32
  x507, x508 = bits.Mul32(x6, (arg1[1]))
  var x509 uint32
  var x510 uint32
  x509, x510 = bits.Mul32(x6, (arg1[0]))
  var x511 uint32
  var x512 uint32
  x511, x512 = bits.Add32(x510, x507, 0x0)
  var x513 uint32
  var x514 uint32
  x513, x514 = bits.Add32(x508, x505, x512)
  var x515 uint32
  var x516 uint32
  x515, x516 = bits.Add32(x506, x503, x514)
  var x517 uint32
  var x518 uint32
  x517, x518 = bits.Add32(x504, x501, x516)
  var x519 uint32
  var x520 uint32
  x519, x520 = bits.Add32(x502, x499, x518)
  var x521 uint32
  var x522 uint32
  x521, x522 = bits.Add32(x500, x497, x520)
  var x523 uint32
  var x524 uint32
  x523, x524 = bits.Add32(x498, x495, x522)
  var x525 uint32
  x525, _ = bits.Add32(x496, uint32(0x0), x524)
  var x527 uint32
  var x528 uint32
  x527, x528 = bits.Add32(x477, x509, 0x0)
  var x529 uint32
  var x530 uint32
  x529, x530 = bits.Add32(x479, x511, x528)
  var x531 uint32
  var x532 uint32
  x531, x532 = bits.Add32(x481, x513, x530)
  var x533 uint32
  var x534 uint32
  x533, x534 = bits.Add32(x483, x515, x532)
  var x535 uint32
  var x536 uint32
  x535, x536 = bits.Add32(x485, x517, x534)
  var x537 uint32
  var x538 uint32
  x537, x538 = bits.Add32(x487, x519, x536)
  var x539 uint32
  var x540 uint32
  x539, x540 = bits.Add32(x489, x521, x538)
  var x541 uint32
  var x542 uint32
  x541, x542 = bits.Add32(x491, x523, x540)
  var x543 uint32
  var x544 uint32
  x543, x544 = bits.Add32(x493, x525, x542)
  var x545 uint32
  var x546 uint32
  x545, x546 = bits.Mul32(x527, 0xffffffff)
  var x547 uint32
  var x548 uint32
  x547, x548 = bits.Mul32(x527, 0xffffffff)
  var x549 uint32
  var x550 uint32
  x549, x550 = bits.Mul32(x527, 0xffffffff)
  var x551 uint32
  var x552 uint32
  x551, x552 = bits.Mul32(x527, 0xffffffff)
  var x553 uint32
  var x554 uint32
  x553, x554 = bits.Add32(x552, x549, 0x0)
  var x555 uint32
  var x556 uint32
  x555, x556 = bits.Add32(x550, x547, x554)
  var x557 uint32
  x557, _ = bits.Add32(x548, uint32(0x0), x556)
  var x560 uint32
  _, x560 = bits.Add32(x527, x551, 0x0)
  var x561 uint32
  var x562 uint32
  x561, x562 = bits.Add32(x529, x553, x560)
  var x563 uint32
  var x564 uint32
  x563, x564 = bits.Add32(x531, x555, x562)
  var x565 uint32
  var x566 uint32
  x565, x566 = bits.Add32(x533, x557, x564)
  var x567 uint32
  var x568 uint32
  x567, x568 = bits.Add32(x535, uint32(0x0), x566)
  var x569 uint32
  var x570 uint32
  x569, x570 = bits.Add32(x537, uint32(0x0), x568)
  var x571 uint32
  var x572 uint32
  x571, x572 = bits.Add32(x539, x527, x570)
  var x573 uint32
  var x574 uint32
  x573, x574 = bits.Add32(x541, x545, x572)
  var x575 uint32
  var x576 uint32
  x575, x576 = bits.Add32(x543, x546, x574)
  var x577 uint32
  x577, _ = bits.Add32(x544, uint32(0x0), x576)
  var x579 uint32
  var x580 uint32
  x579, x580 = bits.Mul32(x7, (arg1[7]))
  var x581 uint32
  var x582 uint32
  x581, x582 = bits.Mul32(x7, (arg1[6]))
  var x583 uint32
  var x584 uint32
  x583, x584 = bits.Mul32(x7, (arg1[5]))
  var x585 uint32
  var x586 uint32
  x585, x586 = bits.Mul32(x7, (arg1[4]))
  var x587 uint32
  var x588 uint32
  x587, x588 = bits.Mul32(x7, (arg1[3]))
  var x589 uint32
  var x590 uint32
  x589, x590 = bits.Mul32(x7, (arg1[2]))
  var x591 uint32
  var x592 uint32
  x591, x592 = bits.Mul32(x7, (arg1[1]))
  var x593 uint32
  var x594 uint32
  x593, x594 = bits.Mul32(x7, (arg1[0]))
  var x595 uint32
  var x596 uint32
  x595, x596 = bits.Add32(x594, x591, 0x0)
  var x597 uint32
  var x598 uint32
  x597, x598 = bits.Add32(x592, x589, x596)
  var x599 uint32
  var x600 uint32
  x599, x600 = bits.Add32(x590, x587, x598)
  var x601 uint32
  var x602 uint32
  x601, x602 = bits.Add32(x588, x585, x600)
  var x603 uint32
  var x604 uint32
  x603, x604 = bits.Add32(x586, x583, x602)
  var x605 uint32
  var x606 uint32
  x605, x606 = bits.Add32(x584, x581, x604)
  var x607 uint32
  var x608 uint32
  x607, x608 = bits.Add32(x582, x579, x606)
  var x609 uint32
  x609, _ = bits.Add32(x580, uint32(0x0), x608)
  var x611 uint32
  var x612 uint32
  x611, x612 = bits.Add32(x561, x593, 0x0)
  var x613 uint32
  var x614 uint32
  x613, x614 = bits.Add32(x563, x595, x612)
  var x615 uint32
  var x616 uint32
  x615, x616 = bits.Add32(x565, x597, x614)
  var x617 uint32
  var x618 uint32
  x617, x618 = bits.Add32(x567, x599, x616)
  var x619 uint32
  var x620 uint32
  x619, x620 = bits.Add32(x569, x601, x618)
  var x621 uint32
  var x622 uint32
  x621, x622 = bits.Add32(x571, x603, x620)
  var x623 uint32
  var x624 uint32
  x623, x624 = bits.Add32(x573, x605, x622)
  var x625 uint32
  var x626 uint32
  x625, x626 = bits.Add32(x575, x607, x624)
  var x627 uint32
  var x628 uint32
  x627, x628 = bits.Add32(x577, x609, x626)
  var x629 uint32
  var x630 uint32
  x629, x630 = bits.Mul32(x611, 0xffffffff)
  var x631 uint32
  var x632 uint32
  x631, x632 = bits.Mul32(x611, 0xffffffff)
  var x633 uint32
  var x634 uint32
  x633, x634 = bits.Mul32(x611, 0xffffffff)
  var x635 uint32
  var x636 uint32
  x635, x636 = bits.Mul32(x611, 0xffffffff)
  var x637 uint32
  var x638 uint32
  x637, x638 = bits.Add32(x636, x633, 0x0)
  var x639 uint32
  var x640 uint32
  x639, x640 = bits.Add32(x634, x631, x638)
  var x641 uint32
  x641, _ = bits.Add32(x632, uint32(0x0), x640)
  var x644 uint32
  _, x644 = bits.Add32(x611, x635, 0x0)
  var x645 uint32
  var x646 uint32
  x645, x646 = bits.Add32(x613, x637, x644)
  var x647 uint32
  var x648 uint32
  x647, x648 = bits.Add32(x615, x639, x646)
  var x649 uint32
  var x650 uint32
  x649, x650 = bits.Add32(x617, x641, x648)
  var x651 uint32
  var x652 uint32
  x651, x652 = bits.Add32(x619, uint32(0x0), x650)
  var x653 uint32
  var x654 uint32
  x653, x654 = bits.Add32(x621, uint32(0x0), x652)
  var x655 uint32
  var x656 uint32
  x655, x656 = bits.Add32(x623, x611, x654)
  var x657 uint32
  var x658 uint32
  x657, x658 = bits.Add32(x625, x629, x656)
  var x659 uint32
  var x660 uint32
  x659, x660 = bits.Add32(x627, x630, x658)
  var x661 uint32
  x661, _ = bits.Add32(x628, uint32(0x0), x660)
  var x663 uint32
  var x664 uint32
  x663, x664 = bits.Sub32(x645, 0xffffffff, uint32(0x0))
  var x665 uint32
  var x666 uint32
  x665, x666 = bits.Sub32(x647, 0xffffffff, x664)
  var x667 uint32
  var x668 uint32
  x667, x668 = bits.Sub32(x649, 0xffffffff, x666)
  var x669 uint32
  var x670 uint32
  x669, x670 = bits.Sub32(x651, uint32(0x0), x668)
  var x671 uint32
  var x672 uint32
  x671, x672 = bits.Sub32(x653, uint32(0x0), x670)
  var x673 uint32
  var x674 uint32
  x673, x674 = bits.Sub32(x655, uint32(0x0), x672)
  var x675 uint32
  var x676 uint32
  x675, x676 = bits.Sub32(x657, 0x1, x674)
  var x677 uint32
  var x678 uint32
  x677, x678 = bits.Sub32(x659, 0xffffffff, x676)
  var x680 uint32
  _, x680 = bits.Sub32(x661, uint32(0x0), x678)
  var x681 uint32
  fiat_p256_cmovznz_u32(&x681, x680, x663, x645)
  var x682 uint32
  fiat_p256_cmovznz_u32(&x682, x680, x665, x647)
  var x683 uint32
  fiat_p256_cmovznz_u32(&x683, x680, x667, x649)
  var x684 uint32
  fiat_p256_cmovznz_u32(&x684, x680, x669, x651)
  var x685 uint32
  fiat_p256_cmovznz_u32(&x685, x680, x671, x653)
  var x686 uint32
  fiat_p256_cmovznz_u32(&x686, x680, x673, x655)
  var x687 uint32
  fiat_p256_cmovznz_u32(&x687, x680, x675, x657)
  var x688 uint32
  fiat_p256_cmovznz_u32(&x688, x680, x677, x659)
  out1[0] = x681
  out1[1] = x682
  out1[2] = x683
  out1[3] = x684
  out1[4] = x685
  out1[5] = x686
  out1[6] = x687
  out1[7] = x688
}

/*
 * The function fiat_p256_add adds two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 *   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_p256_add(out1 *[8]uint32, arg1 *[8]uint32, arg2 *[8]uint32) {
  var x1 uint32
  var x2 uint32
  x1, x2 = bits.Add32((arg1[0]), (arg2[0]), 0x0)
  var x3 uint32
  var x4 uint32
  x3, x4 = bits.Add32((arg1[1]), (arg2[1]), x2)
  var x5 uint32
  var x6 uint32
  x5, x6 = bits.Add32((arg1[2]), (arg2[2]), x4)
  var x7 uint32
  var x8 uint32
  x7, x8 = bits.Add32((arg1[3]), (arg2[3]), x6)
  var x9 uint32
  var x10 uint32
  x9, x10 = bits.Add32((arg1[4]), (arg2[4]), x8)
  var x11 uint32
  var x12 uint32
  x11, x12 = bits.Add32((arg1[5]), (arg2[5]), x10)
  var x13 uint32
  var x14 uint32
  x13, x14 = bits.Add32((arg1[6]), (arg2[6]), x12)
  var x15 uint32
  var x16 uint32
  x15, x16 = bits.Add32((arg1[7]), (arg2[7]), x14)
  var x17 uint32
  var x18 uint32
  x17, x18 = bits.Sub32(x1, 0xffffffff, uint32(0x0))
  var x19 uint32
  var x20 uint32
  x19, x20 = bits.Sub32(x3, 0xffffffff, x18)
  var x21 uint32
  var x22 uint32
  x21, x22 = bits.Sub32(x5, 0xffffffff, x20)
  var x23 uint32
  var x24 uint32
  x23, x24 = bits.Sub32(x7, uint32(0x0), x22)
  var x25 uint32
  var x26 uint32
  x25, x26 = bits.Sub32(x9, uint32(0x0), x24)
  var x27 uint32
  var x28 uint32
  x27, x28 = bits.Sub32(x11, uint32(0x0), x26)
  var x29 uint32
  var x30 uint32
  x29, x30 = bits.Sub32(x13, 0x1, x28)
  var x31 uint32
  var x32 uint32
  x31, x32 = bits.Sub32(x15, 0xffffffff, x30)
  var x34 uint32
  _, x34 = bits.Sub32(x16, uint32(0x0), x32)
  var x35 uint32
  fiat_p256_cmovznz_u32(&x35, x34, x17, x1)
  var x36 uint32
  fiat_p256_cmovznz_u32(&x36, x34, x19, x3)
  var x37 uint32
  fiat_p256_cmovznz_u32(&x37, x34, x21, x5)
  var x38 uint32
  fiat_p256_cmovznz_u32(&x38, x34, x23, x7)
  var x39 uint32
  fiat_p256_cmovznz_u32(&x39, x34, x25, x9)
  var x40 uint32
  fiat_p256_cmovznz_u32(&x40, x34, x27, x11)
  var x41 uint32
  fiat_p256_cmovznz_u32(&x41, x34, x29, x13)
  var x42 uint32
  fiat_p256_cmovznz_u32(&x42, x34, x31, x15)
  out1[0] = x35
  out1[1] = x36
  out1[2] = x37
  out1[3] = x38
  out1[4] = x39
  out1[5] = x40
  out1[6] = x41
  out1[7] = x42
}

/*
 * The function fiat_p256_sub subtracts two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 *   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_p256_sub(out1 *[8]uint32, arg1 *[8]uint32, arg2 *[8]uint32) {
  var x1 uint32
  var x2 uint32
  x1, x2 = bits.Sub32((arg1[0]), (arg2[0]), 0x0)
  var x3 uint32
  var x4 uint32
  x3, x4 = bits.Sub32((arg1[1]), (arg2[1]), x2)
  var x5 uint32
  var x6 uint32
  x5, x6 = bits.Sub32((arg1[2]), (arg2[2]), x4)
  var x7 uint32
  var x8 uint32
  x7, x8 = bits.Sub32((arg1[3]), (arg2[3]), x6)
  var x9 uint32
  var x10 uint32
  x9, x10 = bits.Sub32((arg1[4]), (arg2[4]), x8)
  var x11 uint32
  var x12 uint32
  x11, x12 = bits.Sub32((arg1[5]), (arg2[5]), x10)
  var x13 uint32
  var x14 uint32
  x13, x14 = bits.Sub32((arg1[6]), (arg2[6]), x12)
  var x15 uint32
  var x16 uint32
  x15, x16 = bits.Sub32((arg1[7]), (arg2[7]), x14)
  var x17 uint32
  fiat_p256_cmovznz_u32(&x17, x16, uint32(0x0), 0xffffffff)
  var x18 uint32
  var x19 uint32
  x18, x19 = bits.Add32(x1, (x17 & 0xffffffff), 0x0)
  var x20 uint32
  var x21 uint32
  x20, x21 = bits.Add32(x3, (x17 & 0xffffffff), x19)
  var x22 uint32
  var x23 uint32
  x22, x23 = bits.Add32(x5, (x17 & 0xffffffff), x21)
  var x24 uint32
  var x25 uint32
  x24, x25 = bits.Add32(x7, uint32(0x0), x23)
  var x26 uint32
  var x27 uint32
  x26, x27 = bits.Add32(x9, uint32(0x0), x25)
  var x28 uint32
  var x29 uint32
  x28, x29 = bits.Add32(x11, uint32(0x0), x27)
  var x30 uint32
  var x31 uint32
  x30, x31 = bits.Add32(x13, (x17 & 0x1), x29)
  var x32 uint32
  x32, _ = bits.Add32(x15, (x17 & 0xffffffff), x31)
  out1[0] = x18
  out1[1] = x20
  out1[2] = x22
  out1[3] = x24
  out1[4] = x26
  out1[5] = x28
  out1[6] = x30
  out1[7] = x32
}

/*
 * The function fiat_p256_opp negates a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_p256_opp(out1 *[8]uint32, arg1 *[8]uint32) {
  var x1 uint32
  var x2 uint32
  x1, x2 = bits.Sub32(uint32(0x0), (arg1[0]), 0x0)
  var x3 uint32
  var x4 uint32
  x3, x4 = bits.Sub32(uint32(0x0), (arg1[1]), x2)
  var x5 uint32
  var x6 uint32
  x5, x6 = bits.Sub32(uint32(0x0), (arg1[2]), x4)
  var x7 uint32
  var x8 uint32
  x7, x8 = bits.Sub32(uint32(0x0), (arg1[3]), x6)
  var x9 uint32
  var x10 uint32
  x9, x10 = bits.Sub32(uint32(0x0), (arg1[4]), x8)
  var x11 uint32
  var x12 uint32
  x11, x12 = bits.Sub32(uint32(0x0), (arg1[5]), x10)
  var x13 uint32
  var x14 uint32
  x13, x14 = bits.Sub32(uint32(0x0), (arg1[6]), x12)
  var x15 uint32
  var x16 uint32
  x15, x16 = bits.Sub32(uint32(0x0), (arg1[7]), x14)
  var x17 uint32
  fiat_p256_cmovznz_u32(&x17, x16, uint32(0x0), 0xffffffff)
  var x18 uint32
  var x19 uint32
  x18, x19 = bits.Add32(x1, (x17 & 0xffffffff), 0x0)
  var x20 uint32
  var x21 uint32
  x20, x21 = bits.Add32(x3, (x17 & 0xffffffff), x19)
  var x22 uint32
  var x23 uint32
  x22, x23 = bits.Add32(x5, (x17 & 0xffffffff), x21)
  var x24 uint32
  var x25 uint32
  x24, x25 = bits.Add32(x7, uint32(0x0), x23)
  var x26 uint32
  var x27 uint32
  x26, x27 = bits.Add32(x9, uint32(0x0), x25)
  var x28 uint32
  var x29 uint32
  x28, x29 = bits.Add32(x11, uint32(0x0), x27)
  var x30 uint32
  var x31 uint32
  x30, x31 = bits.Add32(x13, (x17 & 0x1), x29)
  var x32 uint32
  x32, _ = bits.Add32(x15, (x17 & 0xffffffff), x31)
  out1[0] = x18
  out1[1] = x20
  out1[2] = x22
  out1[3] = x24
  out1[4] = x26
  out1[5] = x28
  out1[6] = x30
  out1[7] = x32
}

/*
 * The function fiat_p256_from_montgomery translates a field element out of the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = (eval arg1 * ((2^32)⁻¹ mod m)^8) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_p256_from_montgomery(out1 *[8]uint32, arg1 *[8]uint32) {
  var x1 uint32 = (arg1[0])
  var x2 uint32
  var x3 uint32
  x2, x3 = bits.Mul32(x1, 0xffffffff)
  var x4 uint32
  var x5 uint32
  x4, x5 = bits.Mul32(x1, 0xffffffff)
  var x6 uint32
  var x7 uint32
  x6, x7 = bits.Mul32(x1, 0xffffffff)
  var x8 uint32
  var x9 uint32
  x8, x9 = bits.Mul32(x1, 0xffffffff)
  var x10 uint32
  var x11 uint32
  x10, x11 = bits.Add32(x9, x6, 0x0)
  var x12 uint32
  var x13 uint32
  x12, x13 = bits.Add32(x7, x4, x11)
  var x15 uint32
  _, x15 = bits.Add32(x1, x8, 0x0)
  var x16 uint32
  var x17 uint32
  x16, x17 = bits.Add32(uint32(0x0), x10, x15)
  var x18 uint32
  var x19 uint32
  x18, x19 = bits.Add32(uint32(0x0), x12, x17)
  var x20 uint32
  x20, _ = bits.Add32(x5, uint32(0x0), x13)
  var x22 uint32
  var x23 uint32
  x22, x23 = bits.Add32(uint32(0x0), x20, x19)
  var x24 uint32
  var x25 uint32
  x24, x25 = bits.Add32(x16, (arg1[1]), 0x0)
  var x26 uint32
  var x27 uint32
  x26, x27 = bits.Add32(x18, uint32(0x0), x25)
  var x28 uint32
  var x29 uint32
  x28, x29 = bits.Add32(x22, uint32(0x0), x27)
  var x30 uint32
  var x31 uint32
  x30, x31 = bits.Mul32(x24, 0xffffffff)
  var x32 uint32
  var x33 uint32
  x32, x33 = bits.Mul32(x24, 0xffffffff)
  var x34 uint32
  var x35 uint32
  x34, x35 = bits.Mul32(x24, 0xffffffff)
  var x36 uint32
  var x37 uint32
  x36, x37 = bits.Mul32(x24, 0xffffffff)
  var x38 uint32
  var x39 uint32
  x38, x39 = bits.Add32(x37, x34, 0x0)
  var x40 uint32
  var x41 uint32
  x40, x41 = bits.Add32(x35, x32, x39)
  var x43 uint32
  _, x43 = bits.Add32(x24, x36, 0x0)
  var x44 uint32
  var x45 uint32
  x44, x45 = bits.Add32(x26, x38, x43)
  var x46 uint32
  var x47 uint32
  x46, x47 = bits.Add32(x28, x40, x45)
  var x48 uint32
  x48, _ = bits.Add32(x33, uint32(0x0), x41)
  var x50 uint32
  x50, _ = bits.Add32(uint32(0x0), uint32(0x0), x23)
  var x52 uint32
  x52, _ = bits.Add32(x50, uint32(0x0), x29)
  var x54 uint32
  var x55 uint32
  x54, x55 = bits.Add32(x52, x48, x47)
  var x56 uint32
  var x57 uint32
  x56, x57 = bits.Add32(x2, x24, 0x0)
  var x58 uint32
  var x59 uint32
  x58, x59 = bits.Add32(x3, x30, x57)
  var x60 uint32
  var x61 uint32
  x60, x61 = bits.Add32(x44, (arg1[2]), 0x0)
  var x62 uint32
  var x63 uint32
  x62, x63 = bits.Add32(x46, uint32(0x0), x61)
  var x64 uint32
  var x65 uint32
  x64, x65 = bits.Add32(x54, uint32(0x0), x63)
  var x66 uint32
  var x67 uint32
  x66, x67 = bits.Mul32(x60, 0xffffffff)
  var x68 uint32
  var x69 uint32
  x68, x69 = bits.Mul32(x60, 0xffffffff)
  var x70 uint32
  var x71 uint32
  x70, x71 = bits.Mul32(x60, 0xffffffff)
  var x72 uint32
  var x73 uint32
  x72, x73 = bits.Mul32(x60, 0xffffffff)
  var x74 uint32
  var x75 uint32
  x74, x75 = bits.Add32(x73, x70, 0x0)
  var x76 uint32
  var x77 uint32
  x76, x77 = bits.Add32(x71, x68, x75)
  var x79 uint32
  _, x79 = bits.Add32(x60, x72, 0x0)
  var x80 uint32
  var x81 uint32
  x80, x81 = bits.Add32(x62, x74, x79)
  var x82 uint32
  var x83 uint32
  x82, x83 = bits.Add32(x64, x76, x81)
  var x84 uint32
  x84, _ = bits.Add32(x69, uint32(0x0), x77)
  var x86 uint32
  x86, _ = bits.Add32(uint32(0x0), uint32(0x0), x55)
  var x88 uint32
  x88, _ = bits.Add32(x86, uint32(0x0), x65)
  var x90 uint32
  var x91 uint32
  x90, x91 = bits.Add32(x88, x84, x83)
  var x92 uint32
  var x93 uint32
  x92, x93 = bits.Add32(x1, uint32(0x0), x91)
  var x94 uint32
  var x95 uint32
  x94, x95 = bits.Add32(x56, uint32(0x0), x93)
  var x96 uint32
  var x97 uint32
  x96, x97 = bits.Add32(x58, x60, x95)
  var x98 uint32
  x98, _ = bits.Add32(uint32(0x0), x31, x59)
  var x100 uint32
  var x101 uint32
  x100, x101 = bits.Add32(x98, x66, x97)
  var x102 uint32
  var x103 uint32
  x102, x103 = bits.Add32(x80, (arg1[3]), 0x0)
  var x104 uint32
  var x105 uint32
  x104, x105 = bits.Add32(x82, uint32(0x0), x103)
  var x106 uint32
  var x107 uint32
  x106, x107 = bits.Add32(x90, uint32(0x0), x105)
  var x108 uint32
  var x109 uint32
  x108, x109 = bits.Add32(x92, uint32(0x0), x107)
  var x110 uint32
  var x111 uint32
  x110, x111 = bits.Add32(x94, uint32(0x0), x109)
  var x112 uint32
  var x113 uint32
  x112, x113 = bits.Add32(x96, uint32(0x0), x111)
  var x114 uint32
  var x115 uint32
  x114, x115 = bits.Add32(x100, uint32(0x0), x113)
  var x116 uint32
  x116, _ = bits.Add32(uint32(0x0), x67, x101)
  var x118 uint32
  var x119 uint32
  x118, x119 = bits.Add32(x116, uint32(0x0), x115)
  var x120 uint32
  var x121 uint32
  x120, x121 = bits.Mul32(x102, 0xffffffff)
  var x122 uint32
  var x123 uint32
  x122, x123 = bits.Mul32(x102, 0xffffffff)
  var x124 uint32
  var x125 uint32
  x124, x125 = bits.Mul32(x102, 0xffffffff)
  var x126 uint32
  var x127 uint32
  x126, x127 = bits.Mul32(x102, 0xffffffff)
  var x128 uint32
  var x129 uint32
  x128, x129 = bits.Add32(x127, x124, 0x0)
  var x130 uint32
  var x131 uint32
  x130, x131 = bits.Add32(x125, x122, x129)
  var x133 uint32
  _, x133 = bits.Add32(x102, x126, 0x0)
  var x134 uint32
  var x135 uint32
  x134, x135 = bits.Add32(x104, x128, x133)
  var x136 uint32
  var x137 uint32
  x136, x137 = bits.Add32(x106, x130, x135)
  var x138 uint32
  x138, _ = bits.Add32(x123, uint32(0x0), x131)
  var x140 uint32
  var x141 uint32
  x140, x141 = bits.Add32(x108, x138, x137)
  var x142 uint32
  var x143 uint32
  x142, x143 = bits.Add32(x110, uint32(0x0), x141)
  var x144 uint32
  var x145 uint32
  x144, x145 = bits.Add32(x112, uint32(0x0), x143)
  var x146 uint32
  var x147 uint32
  x146, x147 = bits.Add32(x114, x102, x145)
  var x148 uint32
  var x149 uint32
  x148, x149 = bits.Add32(x118, x120, x147)
  var x150 uint32
  x150, _ = bits.Add32(uint32(0x0), uint32(0x0), x119)
  var x152 uint32
  var x153 uint32
  x152, x153 = bits.Add32(x150, x121, x149)
  var x154 uint32
  var x155 uint32
  x154, x155 = bits.Add32(x134, (arg1[4]), 0x0)
  var x156 uint32
  var x157 uint32
  x156, x157 = bits.Add32(x136, uint32(0x0), x155)
  var x158 uint32
  var x159 uint32
  x158, x159 = bits.Add32(x140, uint32(0x0), x157)
  var x160 uint32
  var x161 uint32
  x160, x161 = bits.Add32(x142, uint32(0x0), x159)
  var x162 uint32
  var x163 uint32
  x162, x163 = bits.Add32(x144, uint32(0x0), x161)
  var x164 uint32
  var x165 uint32
  x164, x165 = bits.Add32(x146, uint32(0x0), x163)
  var x166 uint32
  var x167 uint32
  x166, x167 = bits.Add32(x148, uint32(0x0), x165)
  var x168 uint32
  var x169 uint32
  x168, x169 = bits.Add32(x152, uint32(0x0), x167)
  var x170 uint32
  var x171 uint32
  x170, x171 = bits.Mul32(x154, 0xffffffff)
  var x172 uint32
  var x173 uint32
  x172, x173 = bits.Mul32(x154, 0xffffffff)
  var x174 uint32
  var x175 uint32
  x174, x175 = bits.Mul32(x154, 0xffffffff)
  var x176 uint32
  var x177 uint32
  x176, x177 = bits.Mul32(x154, 0xffffffff)
  var x178 uint32
  var x179 uint32
  x178, x179 = bits.Add32(x177, x174, 0x0)
  var x180 uint32
  var x181 uint32
  x180, x181 = bits.Add32(x175, x172, x179)
  var x183 uint32
  _, x183 = bits.Add32(x154, x176, 0x0)
  var x184 uint32
  var x185 uint32
  x184, x185 = bits.Add32(x156, x178, x183)
  var x186 uint32
  var x187 uint32
  x186, x187 = bits.Add32(x158, x180, x185)
  var x188 uint32
  x188, _ = bits.Add32(x173, uint32(0x0), x181)
  var x190 uint32
  var x191 uint32
  x190, x191 = bits.Add32(x160, x188, x187)
  var x192 uint32
  var x193 uint32
  x192, x193 = bits.Add32(x162, uint32(0x0), x191)
  var x194 uint32
  var x195 uint32
  x194, x195 = bits.Add32(x164, uint32(0x0), x193)
  var x196 uint32
  var x197 uint32
  x196, x197 = bits.Add32(x166, x154, x195)
  var x198 uint32
  var x199 uint32
  x198, x199 = bits.Add32(x168, x170, x197)
  var x200 uint32
  x200, _ = bits.Add32(uint32(0x0), uint32(0x0), x153)
  var x202 uint32
  x202, _ = bits.Add32(x200, uint32(0x0), x169)
  var x204 uint32
  var x205 uint32
  x204, x205 = bits.Add32(x202, x171, x199)
  var x206 uint32
  var x207 uint32
  x206, x207 = bits.Add32(x184, (arg1[5]), 0x0)
  var x208 uint32
  var x209 uint32
  x208, x209 = bits.Add32(x186, uint32(0x0), x207)
  var x210 uint32
  var x211 uint32
  x210, x211 = bits.Add32(x190, uint32(0x0), x209)
  var x212 uint32
  var x213 uint32
  x212, x213 = bits.Add32(x192, uint32(0x0), x211)
  var x214 uint32
  var x215 uint32
  x214, x215 = bits.Add32(x194, uint32(0x0), x213)
  var x216 uint32
  var x217 uint32
  x216, x217 = bits.Add32(x196, uint32(0x0), x215)
  var x218 uint32
  var x219 uint32
  x218, x219 = bits.Add32(x198, uint32(0x0), x217)
  var x220 uint32
  var x221 uint32
  x220, x221 = bits.Add32(x204, uint32(0x0), x219)
  var x222 uint32
  var x223 uint32
  x222, x223 = bits.Mul32(x206, 0xffffffff)
  var x224 uint32
  var x225 uint32
  x224, x225 = bits.Mul32(x206, 0xffffffff)
  var x226 uint32
  var x227 uint32
  x226, x227 = bits.Mul32(x206, 0xffffffff)
  var x228 uint32
  var x229 uint32
  x228, x229 = bits.Mul32(x206, 0xffffffff)
  var x230 uint32
  var x231 uint32
  x230, x231 = bits.Add32(x229, x226, 0x0)
  var x232 uint32
  var x233 uint32
  x232, x233 = bits.Add32(x227, x224, x231)
  var x235 uint32
  _, x235 = bits.Add32(x206, x228, 0x0)
  var x236 uint32
  var x237 uint32
  x236, x237 = bits.Add32(x208, x230, x235)
  var x238 uint32
  var x239 uint32
  x238, x239 = bits.Add32(x210, x232, x237)
  var x240 uint32
  x240, _ = bits.Add32(x225, uint32(0x0), x233)
  var x242 uint32
  var x243 uint32
  x242, x243 = bits.Add32(x212, x240, x239)
  var x244 uint32
  var x245 uint32
  x244, x245 = bits.Add32(x214, uint32(0x0), x243)
  var x246 uint32
  var x247 uint32
  x246, x247 = bits.Add32(x216, uint32(0x0), x245)
  var x248 uint32
  var x249 uint32
  x248, x249 = bits.Add32(x218, x206, x247)
  var x250 uint32
  var x251 uint32
  x250, x251 = bits.Add32(x220, x222, x249)
  var x252 uint32
  x252, _ = bits.Add32(uint32(0x0), uint32(0x0), x205)
  var x254 uint32
  x254, _ = bits.Add32(x252, uint32(0x0), x221)
  var x256 uint32
  var x257 uint32
  x256, x257 = bits.Add32(x254, x223, x251)
  var x258 uint32
  var x259 uint32
  x258, x259 = bits.Add32(x236, (arg1[6]), 0x0)
  var x260 uint32
  var x261 uint32
  x260, x261 = bits.Add32(x238, uint32(0x0), x259)
  var x262 uint32
  var x263 uint32
  x262, x263 = bits.Add32(x242, uint32(0x0), x261)
  var x264 uint32
  var x265 uint32
  x264, x265 = bits.Add32(x244, uint32(0x0), x263)
  var x266 uint32
  var x267 uint32
  x266, x267 = bits.Add32(x246, uint32(0x0), x265)
  var x268 uint32
  var x269 uint32
  x268, x269 = bits.Add32(x248, uint32(0x0), x267)
  var x270 uint32
  var x271 uint32
  x270, x271 = bits.Add32(x250, uint32(0x0), x269)
  var x272 uint32
  var x273 uint32
  x272, x273 = bits.Add32(x256, uint32(0x0), x271)
  var x274 uint32
  var x275 uint32
  x274, x275 = bits.Mul32(x258, 0xffffffff)
  var x276 uint32
  var x277 uint32
  x276, x277 = bits.Mul32(x258, 0xffffffff)
  var x278 uint32
  var x279 uint32
  x278, x279 = bits.Mul32(x258, 0xffffffff)
  var x280 uint32
  var x281 uint32
  x280, x281 = bits.Mul32(x258, 0xffffffff)
  var x282 uint32
  var x283 uint32
  x282, x283 = bits.Add32(x281, x278, 0x0)
  var x284 uint32
  var x285 uint32
  x284, x285 = bits.Add32(x279, x276, x283)
  var x287 uint32
  _, x287 = bits.Add32(x258, x280, 0x0)
  var x288 uint32
  var x289 uint32
  x288, x289 = bits.Add32(x260, x282, x287)
  var x290 uint32
  var x291 uint32
  x290, x291 = bits.Add32(x262, x284, x289)
  var x292 uint32
  x292, _ = bits.Add32(x277, uint32(0x0), x285)
  var x294 uint32
  var x295 uint32
  x294, x295 = bits.Add32(x264, x292, x291)
  var x296 uint32
  var x297 uint32
  x296, x297 = bits.Add32(x266, uint32(0x0), x295)
  var x298 uint32
  var x299 uint32
  x298, x299 = bits.Add32(x268, uint32(0x0), x297)
  var x300 uint32
  var x301 uint32
  x300, x301 = bits.Add32(x270, x258, x299)
  var x302 uint32
  var x303 uint32
  x302, x303 = bits.Add32(x272, x274, x301)
  var x304 uint32
  x304, _ = bits.Add32(uint32(0x0), uint32(0x0), x257)
  var x306 uint32
  x306, _ = bits.Add32(x304, uint32(0x0), x273)
  var x308 uint32
  var x309 uint32
  x308, x309 = bits.Add32(x306, x275, x303)
  var x310 uint32
  var x311 uint32
  x310, x311 = bits.Add32(x288, (arg1[7]), 0x0)
  var x312 uint32
  var x313 uint32
  x312, x313 = bits.Add32(x290, uint32(0x0), x311)
  var x314 uint32
  var x315 uint32
  x314, x315 = bits.Add32(x294, uint32(0x0), x313)
  var x316 uint32
  var x317 uint32
  x316, x317 = bits.Add32(x296, uint32(0x0), x315)
  var x318 uint32
  var x319 uint32
  x318, x319 = bits.Add32(x298, uint32(0x0), x317)
  var x320 uint32
  var x321 uint32
  x320, x321 = bits.Add32(x300, uint32(0x0), x319)
  var x322 uint32
  var x323 uint32
  x322, x323 = bits.Add32(x302, uint32(0x0), x321)
  var x324 uint32
  var x325 uint32
  x324, x325 = bits.Add32(x308, uint32(0x0), x323)
  var x326 uint32
  var x327 uint32
  x326, x327 = bits.Mul32(x310, 0xffffffff)
  var x328 uint32
  var x329 uint32
  x328, x329 = bits.Mul32(x310, 0xffffffff)
  var x330 uint32
  var x331 uint32
  x330, x331 = bits.Mul32(x310, 0xffffffff)
  var x332 uint32
  var x333 uint32
  x332, x333 = bits.Mul32(x310, 0xffffffff)
  var x334 uint32
  var x335 uint32
  x334, x335 = bits.Add32(x333, x330, 0x0)
  var x336 uint32
  var x337 uint32
  x336, x337 = bits.Add32(x331, x328, x335)
  var x339 uint32
  _, x339 = bits.Add32(x310, x332, 0x0)
  var x340 uint32
  var x341 uint32
  x340, x341 = bits.Add32(x312, x334, x339)
  var x342 uint32
  var x343 uint32
  x342, x343 = bits.Add32(x314, x336, x341)
  var x344 uint32
  x344, _ = bits.Add32(x329, uint32(0x0), x337)
  var x346 uint32
  var x347 uint32
  x346, x347 = bits.Add32(x316, x344, x343)
  var x348 uint32
  var x349 uint32
  x348, x349 = bits.Add32(x318, uint32(0x0), x347)
  var x350 uint32
  var x351 uint32
  x350, x351 = bits.Add32(x320, uint32(0x0), x349)
  var x352 uint32
  var x353 uint32
  x352, x353 = bits.Add32(x322, x310, x351)
  var x354 uint32
  var x355 uint32
  x354, x355 = bits.Add32(x324, x326, x353)
  var x356 uint32
  x356, _ = bits.Add32(uint32(0x0), uint32(0x0), x309)
  var x358 uint32
  x358, _ = bits.Add32(x356, uint32(0x0), x325)
  var x360 uint32
  var x361 uint32
  x360, x361 = bits.Add32(x358, x327, x355)
  var x362 uint32
  var x363 uint32
  x362, x363 = bits.Sub32(x340, 0xffffffff, uint32(0x0))
  var x364 uint32
  var x365 uint32
  x364, x365 = bits.Sub32(x342, 0xffffffff, x363)
  var x366 uint32
  var x367 uint32
  x366, x367 = bits.Sub32(x346, 0xffffffff, x365)
  var x368 uint32
  var x369 uint32
  x368, x369 = bits.Sub32(x348, uint32(0x0), x367)
  var x370 uint32
  var x371 uint32
  x370, x371 = bits.Sub32(x350, uint32(0x0), x369)
  var x372 uint32
  var x373 uint32
  x372, x373 = bits.Sub32(x352, uint32(0x0), x371)
  var x374 uint32
  var x375 uint32
  x374, x375 = bits.Sub32(x354, 0x1, x373)
  var x376 uint32
  var x377 uint32
  x376, x377 = bits.Sub32(x360, 0xffffffff, x375)
  var x378 uint32
  x378, _ = bits.Add32(uint32(0x0), uint32(0x0), x361)
  var x381 uint32
  _, x381 = bits.Sub32(x378, uint32(0x0), x377)
  var x382 uint32
  fiat_p256_cmovznz_u32(&x382, x381, x362, x340)
  var x383 uint32
  fiat_p256_cmovznz_u32(&x383, x381, x364, x342)
  var x384 uint32
  fiat_p256_cmovznz_u32(&x384, x381, x366, x346)
  var x385 uint32
  fiat_p256_cmovznz_u32(&x385, x381, x368, x348)
  var x386 uint32
  fiat_p256_cmovznz_u32(&x386, x381, x370, x350)
  var x387 uint32
  fiat_p256_cmovznz_u32(&x387, x381, x372, x352)
  var x388 uint32
  fiat_p256_cmovznz_u32(&x388, x381, x374, x354)
  var x389 uint32
  fiat_p256_cmovznz_u32(&x389, x381, x376, x360)
  out1[0] = x382
  out1[1] = x383
  out1[2] = x384
  out1[3] = x385
  out1[4] = x386
  out1[5] = x387
  out1[6] = x388
  out1[7] = x389
}

/*
 * The function fiat_p256_nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffff]
 */
/*inline*/
func fiat_p256_nonzero(out1 *uint32, arg1 *[8]uint32) {
  var x1 uint32 = ((arg1[0]) | ((arg1[1]) | ((arg1[2]) | ((arg1[3]) | ((arg1[4]) | ((arg1[5]) | ((arg1[6]) | ((arg1[7]) | uint32(0x0)))))))))
  *out1 = x1
}

/*
 * The function fiat_p256_selectznz is a multi-limb conditional select.
 * Postconditions:
 *   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 *   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_p256_selectznz(out1 *[8]uint32, arg1 uint32, arg2 *[8]uint32, arg3 *[8]uint32) {
  var x1 uint32
  fiat_p256_cmovznz_u32(&x1, arg1, (arg2[0]), (arg3[0]))
  var x2 uint32
  fiat_p256_cmovznz_u32(&x2, arg1, (arg2[1]), (arg3[1]))
  var x3 uint32
  fiat_p256_cmovznz_u32(&x3, arg1, (arg2[2]), (arg3[2]))
  var x4 uint32
  fiat_p256_cmovznz_u32(&x4, arg1, (arg2[3]), (arg3[3]))
  var x5 uint32
  fiat_p256_cmovznz_u32(&x5, arg1, (arg2[4]), (arg3[4]))
  var x6 uint32
  fiat_p256_cmovznz_u32(&x6, arg1, (arg2[5]), (arg3[5]))
  var x7 uint32
  fiat_p256_cmovznz_u32(&x7, arg1, (arg2[6]), (arg3[6]))
  var x8 uint32
  fiat_p256_cmovznz_u32(&x8, arg1, (arg2[7]), (arg3[7]))
  out1[0] = x1
  out1[1] = x2
  out1[2] = x3
  out1[3] = x4
  out1[4] = x5
  out1[5] = x6
  out1[6] = x7
  out1[7] = x8
}

/*
 * The function fiat_p256_to_bytes serializes a field element in the Montgomery domain to bytes in little-endian order.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..31]
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
 */
/*inline*/
func fiat_p256_to_bytes(out1 *[32]uint32, arg1 *[8]uint32) {
  var x1 uint32 = (arg1[7])
  var x2 uint32 = (arg1[6])
  var x3 uint32 = (arg1[5])
  var x4 uint32 = (arg1[4])
  var x5 uint32 = (arg1[3])
  var x6 uint32 = (arg1[2])
  var x7 uint32 = (arg1[1])
  var x8 uint32 = (arg1[0])
  var x9 uint32 = (x8 >> 8)
  var x10 uint32 = (x8 & 0xff)
  var x11 uint32 = (x9 >> 8)
  var x12 uint32 = (x9 & 0xff)
  var x13 uint32 = (x11 >> 8)
  var x14 uint32 = (x11 & 0xff)
  var x15 uint32 = (x13 & 0xff)
  var x16 uint32 = (x7 >> 8)
  var x17 uint32 = (x7 & 0xff)
  var x18 uint32 = (x16 >> 8)
  var x19 uint32 = (x16 & 0xff)
  var x20 uint32 = (x18 >> 8)
  var x21 uint32 = (x18 & 0xff)
  var x22 uint32 = (x20 & 0xff)
  var x23 uint32 = (x6 >> 8)
  var x24 uint32 = (x6 & 0xff)
  var x25 uint32 = (x23 >> 8)
  var x26 uint32 = (x23 & 0xff)
  var x27 uint32 = (x25 >> 8)
  var x28 uint32 = (x25 & 0xff)
  var x29 uint32 = (x27 & 0xff)
  var x30 uint32 = (x5 >> 8)
  var x31 uint32 = (x5 & 0xff)
  var x32 uint32 = (x30 >> 8)
  var x33 uint32 = (x30 & 0xff)
  var x34 uint32 = (x32 >> 8)
  var x35 uint32 = (x32 & 0xff)
  var x36 uint32 = (x34 & 0xff)
  var x37 uint32 = (x4 >> 8)
  var x38 uint32 = (x4 & 0xff)
  var x39 uint32 = (x37 >> 8)
  var x40 uint32 = (x37 & 0xff)
  var x41 uint32 = (x39 >> 8)
  var x42 uint32 = (x39 & 0xff)
  var x43 uint32 = (x41 & 0xff)
  var x44 uint32 = (x3 >> 8)
  var x45 uint32 = (x3 & 0xff)
  var x46 uint32 = (x44 >> 8)
  var x47 uint32 = (x44 & 0xff)
  var x48 uint32 = (x46 >> 8)
  var x49 uint32 = (x46 & 0xff)
  var x50 uint32 = (x48 & 0xff)
  var x51 uint32 = (x2 >> 8)
  var x52 uint32 = (x2 & 0xff)
  var x53 uint32 = (x51 >> 8)
  var x54 uint32 = (x51 & 0xff)
  var x55 uint32 = (x53 >> 8)
  var x56 uint32 = (x53 & 0xff)
  var x57 uint32 = (x55 & 0xff)
  var x58 uint32 = (x1 >> 8)
  var x59 uint32 = (x1 & 0xff)
  var x60 uint32 = (x58 >> 8)
  var x61 uint32 = (x58 & 0xff)
  var x62 uint32 = (x60 >> 8)
  var x63 uint32 = (x60 & 0xff)
  out1[0] = x10
  out1[1] = x12
  out1[2] = x14
  out1[3] = x15
  out1[4] = x17
  out1[5] = x19
  out1[6] = x21
  out1[7] = x22
  out1[8] = x24
  out1[9] = x26
  out1[10] = x28
  out1[11] = x29
  out1[12] = x31
  out1[13] = x33
  out1[14] = x35
  out1[15] = x36
  out1[16] = x38
  out1[17] = x40
  out1[18] = x42
  out1[19] = x43
  out1[20] = x45
  out1[21] = x47
  out1[22] = x49
  out1[23] = x50
  out1[24] = x52
  out1[25] = x54
  out1[26] = x56
  out1[27] = x57
  out1[28] = x59
  out1[29] = x61
  out1[30] = x63
  out1[31] = x62
}

/*
 * The function fiat_p256_from_bytes deserializes a field element in the Montgomery domain from bytes in little-endian order.
 * Preconditions:
 *   0 ≤ bytes_eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = bytes_eval arg1 mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_p256_from_bytes(out1 *[8]uint32, arg1 *[32]uint32) {
  var x1 uint32 = ((arg1[31]) << 24)
  var x2 uint32 = ((arg1[30]) << 16)
  var x3 uint32 = ((arg1[29]) << 8)
  var x4 uint32 = (arg1[28])
  var x5 uint32 = ((arg1[27]) << 24)
  var x6 uint32 = ((arg1[26]) << 16)
  var x7 uint32 = ((arg1[25]) << 8)
  var x8 uint32 = (arg1[24])
  var x9 uint32 = ((arg1[23]) << 24)
  var x10 uint32 = ((arg1[22]) << 16)
  var x11 uint32 = ((arg1[21]) << 8)
  var x12 uint32 = (arg1[20])
  var x13 uint32 = ((arg1[19]) << 24)
  var x14 uint32 = ((arg1[18]) << 16)
  var x15 uint32 = ((arg1[17]) << 8)
  var x16 uint32 = (arg1[16])
  var x17 uint32 = ((arg1[15]) << 24)
  var x18 uint32 = ((arg1[14]) << 16)
  var x19 uint32 = ((arg1[13]) << 8)
  var x20 uint32 = (arg1[12])
  var x21 uint32 = ((arg1[11]) << 24)
  var x22 uint32 = ((arg1[10]) << 16)
  var x23 uint32 = ((arg1[9]) << 8)
  var x24 uint32 = (arg1[8])
  var x25 uint32 = ((arg1[7]) << 24)
  var x26 uint32 = ((arg1[6]) << 16)
  var x27 uint32 = ((arg1[5]) << 8)
  var x28 uint32 = (arg1[4])
  var x29 uint32 = ((arg1[3]) << 24)
  var x30 uint32 = ((arg1[2]) << 16)
  var x31 uint32 = ((arg1[1]) << 8)
  var x32 uint32 = (arg1[0])
  var x33 uint32 = (x32 + (x31 + (x30 + x29)))
  var x34 uint32 = (x33 & 0xffffffff)
  var x35 uint32 = (x4 + (x3 + (x2 + x1)))
  var x36 uint32 = (x8 + (x7 + (x6 + x5)))
  var x37 uint32 = (x12 + (x11 + (x10 + x9)))
  var x38 uint32 = (x16 + (x15 + (x14 + x13)))
  var x39 uint32 = (x20 + (x19 + (x18 + x17)))
  var x40 uint32 = (x24 + (x23 + (x22 + x21)))
  var x41 uint32 = (x28 + (x27 + (x26 + x25)))
  var x42 uint32 = (x41 & 0xffffffff)
  var x43 uint32 = (x40 & 0xffffffff)
  var x44 uint32 = (x39 & 0xffffffff)
  var x45 uint32 = (x38 & 0xffffffff)
  var x46 uint32 = (x37 & 0xffffffff)
  var x47 uint32 = (x36 & 0xffffffff)
  out1[0] = x34
  out1[1] = x42
  out1[2] = x43
  out1[3] = x44
  out1[4] = x45
  out1[5] = x46
  out1[6] = x47
  out1[7] = x35
}

