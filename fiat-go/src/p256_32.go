/* Autogenerated: src/ExtractionOCaml/word_by_word_montgomery --lang=Go --cmovznz-by-mul --widen-carry --widen-bytes p256 '2^256 - 2^224 + 2^192 + 2^96 - 1' 32 mul square add sub opp from_montgomery nonzero selectznz to_bytes from_bytes */
/* curve description: p256 */
/* requested operations: mul, square, add, sub, opp, from_montgomery, nonzero, selectznz, to_bytes, from_bytes */
/* m = 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff (from "2^256 - 2^224 + 2^192 + 2^96 - 1") */
/* machine_wordsize = 32 (from "32") */
/*                                                                    */
/* NOTE: In addition to the bounds specified above each function, all */
/*   functions synthesized for this Montgomery arithmetic require the */
/*   input to be strictly less than the prime modulus (m), and also   */
/*   require the input to be in the unique saturated representation.  */
/*   All functions also ensure that these two properties are true of  */
/*   return values.                                                   */

package fiat_p256

import "math/bits"


/*
 * The function fiat_p256_cmovznz_u32 is a single-word conditional move.
 * Postconditions:
 *   out1 = (if arg1 = 0 then arg2 else arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffff]
 *   arg3: [0x0 ~> 0xffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffff]
 */
/*inline*/
func fiat_p256_cmovznz_u32(out1 *uint32, arg1 uint32, arg2 uint32, arg3 uint32) {
  var x1 uint32 = (arg1 * 0xffffffff)
  var x2 uint32 = ((x1 & arg3) | ((^x1) & arg2))
  *out1 = x2
}

/*
 * The function fiat_p256_mul multiplies two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 *   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_p256_mul(out1 *[8]uint32, arg1 *[8]uint32, arg2 *[8]uint32) {
  var x1 uint32 = (arg1[1])
  var x2 uint32 = (arg1[2])
  var x3 uint32 = (arg1[3])
  var x4 uint32 = (arg1[4])
  var x5 uint32 = (arg1[5])
  var x6 uint32 = (arg1[6])
  var x7 uint32 = (arg1[7])
  var x8 uint32 = (arg1[0])
  var x9 uint32
  var x10 uint32
  x9, x10 = bits.Mul32(x8, (arg2[7]))
  var x11 uint32
  var x12 uint32
  x11, x12 = bits.Mul32(x8, (arg2[6]))
  var x13 uint32
  var x14 uint32
  x13, x14 = bits.Mul32(x8, (arg2[5]))
  var x15 uint32
  var x16 uint32
  x15, x16 = bits.Mul32(x8, (arg2[4]))
  var x17 uint32
  var x18 uint32
  x17, x18 = bits.Mul32(x8, (arg2[3]))
  var x19 uint32
  var x20 uint32
  x19, x20 = bits.Mul32(x8, (arg2[2]))
  var x21 uint32
  var x22 uint32
  x21, x22 = bits.Mul32(x8, (arg2[1]))
  var x23 uint32
  var x24 uint32
  x23, x24 = bits.Mul32(x8, (arg2[0]))
  var x25 uint32
  var x26 uint32
  x25, x26 = bits.Add32(x24, x21, 0x0)
  var x27 uint32
  var x28 uint32
  x27, x28 = bits.Add32(x22, x19, x26)
  var x29 uint32
  var x30 uint32
  x29, x30 = bits.Add32(x20, x17, x28)
  var x31 uint32
  var x32 uint32
  x31, x32 = bits.Add32(x18, x15, x30)
  var x33 uint32
  var x34 uint32
  x33, x34 = bits.Add32(x16, x13, x32)
  var x35 uint32
  var x36 uint32
  x35, x36 = bits.Add32(x14, x11, x34)
  var x37 uint32
  var x38 uint32
  x37, x38 = bits.Add32(x12, x9, x36)
  var x39 uint32 = (x38 + x10)
  var x40 uint32
  var x41 uint32
  x40, x41 = bits.Mul32(x23, 0xffffffff)
  var x42 uint32
  var x43 uint32
  x42, x43 = bits.Mul32(x23, 0xffffffff)
  var x44 uint32
  var x45 uint32
  x44, x45 = bits.Mul32(x23, 0xffffffff)
  var x46 uint32
  var x47 uint32
  x46, x47 = bits.Mul32(x23, 0xffffffff)
  var x48 uint32
  var x49 uint32
  x48, x49 = bits.Add32(x47, x44, 0x0)
  var x50 uint32
  var x51 uint32
  x50, x51 = bits.Add32(x45, x42, x49)
  var x52 uint32 = (x51 + x43)
  var x54 uint32
  _, x54 = bits.Add32(x23, x46, 0x0)
  var x55 uint32
  var x56 uint32
  x55, x56 = bits.Add32(x25, x48, x54)
  var x57 uint32
  var x58 uint32
  x57, x58 = bits.Add32(x27, x50, x56)
  var x59 uint32
  var x60 uint32
  x59, x60 = bits.Add32(x29, x52, x58)
  var x61 uint32
  var x62 uint32
  x61, x62 = bits.Add32(x31, uint32(0x0), x60)
  var x63 uint32
  var x64 uint32
  x63, x64 = bits.Add32(x33, uint32(0x0), x62)
  var x65 uint32
  var x66 uint32
  x65, x66 = bits.Add32(x35, x23, x64)
  var x67 uint32
  var x68 uint32
  x67, x68 = bits.Add32(x37, x40, x66)
  var x69 uint32
  var x70 uint32
  x69, x70 = bits.Add32(x39, x41, x68)
  var x71 uint32
  var x72 uint32
  x71, x72 = bits.Mul32(x1, (arg2[7]))
  var x73 uint32
  var x74 uint32
  x73, x74 = bits.Mul32(x1, (arg2[6]))
  var x75 uint32
  var x76 uint32
  x75, x76 = bits.Mul32(x1, (arg2[5]))
  var x77 uint32
  var x78 uint32
  x77, x78 = bits.Mul32(x1, (arg2[4]))
  var x79 uint32
  var x80 uint32
  x79, x80 = bits.Mul32(x1, (arg2[3]))
  var x81 uint32
  var x82 uint32
  x81, x82 = bits.Mul32(x1, (arg2[2]))
  var x83 uint32
  var x84 uint32
  x83, x84 = bits.Mul32(x1, (arg2[1]))
  var x85 uint32
  var x86 uint32
  x85, x86 = bits.Mul32(x1, (arg2[0]))
  var x87 uint32
  var x88 uint32
  x87, x88 = bits.Add32(x86, x83, 0x0)
  var x89 uint32
  var x90 uint32
  x89, x90 = bits.Add32(x84, x81, x88)
  var x91 uint32
  var x92 uint32
  x91, x92 = bits.Add32(x82, x79, x90)
  var x93 uint32
  var x94 uint32
  x93, x94 = bits.Add32(x80, x77, x92)
  var x95 uint32
  var x96 uint32
  x95, x96 = bits.Add32(x78, x75, x94)
  var x97 uint32
  var x98 uint32
  x97, x98 = bits.Add32(x76, x73, x96)
  var x99 uint32
  var x100 uint32
  x99, x100 = bits.Add32(x74, x71, x98)
  var x101 uint32 = (x100 + x72)
  var x102 uint32
  var x103 uint32
  x102, x103 = bits.Add32(x55, x85, 0x0)
  var x104 uint32
  var x105 uint32
  x104, x105 = bits.Add32(x57, x87, x103)
  var x106 uint32
  var x107 uint32
  x106, x107 = bits.Add32(x59, x89, x105)
  var x108 uint32
  var x109 uint32
  x108, x109 = bits.Add32(x61, x91, x107)
  var x110 uint32
  var x111 uint32
  x110, x111 = bits.Add32(x63, x93, x109)
  var x112 uint32
  var x113 uint32
  x112, x113 = bits.Add32(x65, x95, x111)
  var x114 uint32
  var x115 uint32
  x114, x115 = bits.Add32(x67, x97, x113)
  var x116 uint32
  var x117 uint32
  x116, x117 = bits.Add32(x69, x99, x115)
  var x118 uint32
  var x119 uint32
  x118, x119 = bits.Add32(x70, x101, x117)
  var x120 uint32
  var x121 uint32
  x120, x121 = bits.Mul32(x102, 0xffffffff)
  var x122 uint32
  var x123 uint32
  x122, x123 = bits.Mul32(x102, 0xffffffff)
  var x124 uint32
  var x125 uint32
  x124, x125 = bits.Mul32(x102, 0xffffffff)
  var x126 uint32
  var x127 uint32
  x126, x127 = bits.Mul32(x102, 0xffffffff)
  var x128 uint32
  var x129 uint32
  x128, x129 = bits.Add32(x127, x124, 0x0)
  var x130 uint32
  var x131 uint32
  x130, x131 = bits.Add32(x125, x122, x129)
  var x132 uint32 = (x131 + x123)
  var x134 uint32
  _, x134 = bits.Add32(x102, x126, 0x0)
  var x135 uint32
  var x136 uint32
  x135, x136 = bits.Add32(x104, x128, x134)
  var x137 uint32
  var x138 uint32
  x137, x138 = bits.Add32(x106, x130, x136)
  var x139 uint32
  var x140 uint32
  x139, x140 = bits.Add32(x108, x132, x138)
  var x141 uint32
  var x142 uint32
  x141, x142 = bits.Add32(x110, uint32(0x0), x140)
  var x143 uint32
  var x144 uint32
  x143, x144 = bits.Add32(x112, uint32(0x0), x142)
  var x145 uint32
  var x146 uint32
  x145, x146 = bits.Add32(x114, x102, x144)
  var x147 uint32
  var x148 uint32
  x147, x148 = bits.Add32(x116, x120, x146)
  var x149 uint32
  var x150 uint32
  x149, x150 = bits.Add32(x118, x121, x148)
  var x151 uint32 = (x150 + x119)
  var x152 uint32
  var x153 uint32
  x152, x153 = bits.Mul32(x2, (arg2[7]))
  var x154 uint32
  var x155 uint32
  x154, x155 = bits.Mul32(x2, (arg2[6]))
  var x156 uint32
  var x157 uint32
  x156, x157 = bits.Mul32(x2, (arg2[5]))
  var x158 uint32
  var x159 uint32
  x158, x159 = bits.Mul32(x2, (arg2[4]))
  var x160 uint32
  var x161 uint32
  x160, x161 = bits.Mul32(x2, (arg2[3]))
  var x162 uint32
  var x163 uint32
  x162, x163 = bits.Mul32(x2, (arg2[2]))
  var x164 uint32
  var x165 uint32
  x164, x165 = bits.Mul32(x2, (arg2[1]))
  var x166 uint32
  var x167 uint32
  x166, x167 = bits.Mul32(x2, (arg2[0]))
  var x168 uint32
  var x169 uint32
  x168, x169 = bits.Add32(x167, x164, 0x0)
  var x170 uint32
  var x171 uint32
  x170, x171 = bits.Add32(x165, x162, x169)
  var x172 uint32
  var x173 uint32
  x172, x173 = bits.Add32(x163, x160, x171)
  var x174 uint32
  var x175 uint32
  x174, x175 = bits.Add32(x161, x158, x173)
  var x176 uint32
  var x177 uint32
  x176, x177 = bits.Add32(x159, x156, x175)
  var x178 uint32
  var x179 uint32
  x178, x179 = bits.Add32(x157, x154, x177)
  var x180 uint32
  var x181 uint32
  x180, x181 = bits.Add32(x155, x152, x179)
  var x182 uint32 = (x181 + x153)
  var x183 uint32
  var x184 uint32
  x183, x184 = bits.Add32(x135, x166, 0x0)
  var x185 uint32
  var x186 uint32
  x185, x186 = bits.Add32(x137, x168, x184)
  var x187 uint32
  var x188 uint32
  x187, x188 = bits.Add32(x139, x170, x186)
  var x189 uint32
  var x190 uint32
  x189, x190 = bits.Add32(x141, x172, x188)
  var x191 uint32
  var x192 uint32
  x191, x192 = bits.Add32(x143, x174, x190)
  var x193 uint32
  var x194 uint32
  x193, x194 = bits.Add32(x145, x176, x192)
  var x195 uint32
  var x196 uint32
  x195, x196 = bits.Add32(x147, x178, x194)
  var x197 uint32
  var x198 uint32
  x197, x198 = bits.Add32(x149, x180, x196)
  var x199 uint32
  var x200 uint32
  x199, x200 = bits.Add32(x151, x182, x198)
  var x201 uint32
  var x202 uint32
  x201, x202 = bits.Mul32(x183, 0xffffffff)
  var x203 uint32
  var x204 uint32
  x203, x204 = bits.Mul32(x183, 0xffffffff)
  var x205 uint32
  var x206 uint32
  x205, x206 = bits.Mul32(x183, 0xffffffff)
  var x207 uint32
  var x208 uint32
  x207, x208 = bits.Mul32(x183, 0xffffffff)
  var x209 uint32
  var x210 uint32
  x209, x210 = bits.Add32(x208, x205, 0x0)
  var x211 uint32
  var x212 uint32
  x211, x212 = bits.Add32(x206, x203, x210)
  var x213 uint32 = (x212 + x204)
  var x215 uint32
  _, x215 = bits.Add32(x183, x207, 0x0)
  var x216 uint32
  var x217 uint32
  x216, x217 = bits.Add32(x185, x209, x215)
  var x218 uint32
  var x219 uint32
  x218, x219 = bits.Add32(x187, x211, x217)
  var x220 uint32
  var x221 uint32
  x220, x221 = bits.Add32(x189, x213, x219)
  var x222 uint32
  var x223 uint32
  x222, x223 = bits.Add32(x191, uint32(0x0), x221)
  var x224 uint32
  var x225 uint32
  x224, x225 = bits.Add32(x193, uint32(0x0), x223)
  var x226 uint32
  var x227 uint32
  x226, x227 = bits.Add32(x195, x183, x225)
  var x228 uint32
  var x229 uint32
  x228, x229 = bits.Add32(x197, x201, x227)
  var x230 uint32
  var x231 uint32
  x230, x231 = bits.Add32(x199, x202, x229)
  var x232 uint32 = (x231 + x200)
  var x233 uint32
  var x234 uint32
  x233, x234 = bits.Mul32(x3, (arg2[7]))
  var x235 uint32
  var x236 uint32
  x235, x236 = bits.Mul32(x3, (arg2[6]))
  var x237 uint32
  var x238 uint32
  x237, x238 = bits.Mul32(x3, (arg2[5]))
  var x239 uint32
  var x240 uint32
  x239, x240 = bits.Mul32(x3, (arg2[4]))
  var x241 uint32
  var x242 uint32
  x241, x242 = bits.Mul32(x3, (arg2[3]))
  var x243 uint32
  var x244 uint32
  x243, x244 = bits.Mul32(x3, (arg2[2]))
  var x245 uint32
  var x246 uint32
  x245, x246 = bits.Mul32(x3, (arg2[1]))
  var x247 uint32
  var x248 uint32
  x247, x248 = bits.Mul32(x3, (arg2[0]))
  var x249 uint32
  var x250 uint32
  x249, x250 = bits.Add32(x248, x245, 0x0)
  var x251 uint32
  var x252 uint32
  x251, x252 = bits.Add32(x246, x243, x250)
  var x253 uint32
  var x254 uint32
  x253, x254 = bits.Add32(x244, x241, x252)
  var x255 uint32
  var x256 uint32
  x255, x256 = bits.Add32(x242, x239, x254)
  var x257 uint32
  var x258 uint32
  x257, x258 = bits.Add32(x240, x237, x256)
  var x259 uint32
  var x260 uint32
  x259, x260 = bits.Add32(x238, x235, x258)
  var x261 uint32
  var x262 uint32
  x261, x262 = bits.Add32(x236, x233, x260)
  var x263 uint32 = (x262 + x234)
  var x264 uint32
  var x265 uint32
  x264, x265 = bits.Add32(x216, x247, 0x0)
  var x266 uint32
  var x267 uint32
  x266, x267 = bits.Add32(x218, x249, x265)
  var x268 uint32
  var x269 uint32
  x268, x269 = bits.Add32(x220, x251, x267)
  var x270 uint32
  var x271 uint32
  x270, x271 = bits.Add32(x222, x253, x269)
  var x272 uint32
  var x273 uint32
  x272, x273 = bits.Add32(x224, x255, x271)
  var x274 uint32
  var x275 uint32
  x274, x275 = bits.Add32(x226, x257, x273)
  var x276 uint32
  var x277 uint32
  x276, x277 = bits.Add32(x228, x259, x275)
  var x278 uint32
  var x279 uint32
  x278, x279 = bits.Add32(x230, x261, x277)
  var x280 uint32
  var x281 uint32
  x280, x281 = bits.Add32(x232, x263, x279)
  var x282 uint32
  var x283 uint32
  x282, x283 = bits.Mul32(x264, 0xffffffff)
  var x284 uint32
  var x285 uint32
  x284, x285 = bits.Mul32(x264, 0xffffffff)
  var x286 uint32
  var x287 uint32
  x286, x287 = bits.Mul32(x264, 0xffffffff)
  var x288 uint32
  var x289 uint32
  x288, x289 = bits.Mul32(x264, 0xffffffff)
  var x290 uint32
  var x291 uint32
  x290, x291 = bits.Add32(x289, x286, 0x0)
  var x292 uint32
  var x293 uint32
  x292, x293 = bits.Add32(x287, x284, x291)
  var x294 uint32 = (x293 + x285)
  var x296 uint32
  _, x296 = bits.Add32(x264, x288, 0x0)
  var x297 uint32
  var x298 uint32
  x297, x298 = bits.Add32(x266, x290, x296)
  var x299 uint32
  var x300 uint32
  x299, x300 = bits.Add32(x268, x292, x298)
  var x301 uint32
  var x302 uint32
  x301, x302 = bits.Add32(x270, x294, x300)
  var x303 uint32
  var x304 uint32
  x303, x304 = bits.Add32(x272, uint32(0x0), x302)
  var x305 uint32
  var x306 uint32
  x305, x306 = bits.Add32(x274, uint32(0x0), x304)
  var x307 uint32
  var x308 uint32
  x307, x308 = bits.Add32(x276, x264, x306)
  var x309 uint32
  var x310 uint32
  x309, x310 = bits.Add32(x278, x282, x308)
  var x311 uint32
  var x312 uint32
  x311, x312 = bits.Add32(x280, x283, x310)
  var x313 uint32 = (x312 + x281)
  var x314 uint32
  var x315 uint32
  x314, x315 = bits.Mul32(x4, (arg2[7]))
  var x316 uint32
  var x317 uint32
  x316, x317 = bits.Mul32(x4, (arg2[6]))
  var x318 uint32
  var x319 uint32
  x318, x319 = bits.Mul32(x4, (arg2[5]))
  var x320 uint32
  var x321 uint32
  x320, x321 = bits.Mul32(x4, (arg2[4]))
  var x322 uint32
  var x323 uint32
  x322, x323 = bits.Mul32(x4, (arg2[3]))
  var x324 uint32
  var x325 uint32
  x324, x325 = bits.Mul32(x4, (arg2[2]))
  var x326 uint32
  var x327 uint32
  x326, x327 = bits.Mul32(x4, (arg2[1]))
  var x328 uint32
  var x329 uint32
  x328, x329 = bits.Mul32(x4, (arg2[0]))
  var x330 uint32
  var x331 uint32
  x330, x331 = bits.Add32(x329, x326, 0x0)
  var x332 uint32
  var x333 uint32
  x332, x333 = bits.Add32(x327, x324, x331)
  var x334 uint32
  var x335 uint32
  x334, x335 = bits.Add32(x325, x322, x333)
  var x336 uint32
  var x337 uint32
  x336, x337 = bits.Add32(x323, x320, x335)
  var x338 uint32
  var x339 uint32
  x338, x339 = bits.Add32(x321, x318, x337)
  var x340 uint32
  var x341 uint32
  x340, x341 = bits.Add32(x319, x316, x339)
  var x342 uint32
  var x343 uint32
  x342, x343 = bits.Add32(x317, x314, x341)
  var x344 uint32 = (x343 + x315)
  var x345 uint32
  var x346 uint32
  x345, x346 = bits.Add32(x297, x328, 0x0)
  var x347 uint32
  var x348 uint32
  x347, x348 = bits.Add32(x299, x330, x346)
  var x349 uint32
  var x350 uint32
  x349, x350 = bits.Add32(x301, x332, x348)
  var x351 uint32
  var x352 uint32
  x351, x352 = bits.Add32(x303, x334, x350)
  var x353 uint32
  var x354 uint32
  x353, x354 = bits.Add32(x305, x336, x352)
  var x355 uint32
  var x356 uint32
  x355, x356 = bits.Add32(x307, x338, x354)
  var x357 uint32
  var x358 uint32
  x357, x358 = bits.Add32(x309, x340, x356)
  var x359 uint32
  var x360 uint32
  x359, x360 = bits.Add32(x311, x342, x358)
  var x361 uint32
  var x362 uint32
  x361, x362 = bits.Add32(x313, x344, x360)
  var x363 uint32
  var x364 uint32
  x363, x364 = bits.Mul32(x345, 0xffffffff)
  var x365 uint32
  var x366 uint32
  x365, x366 = bits.Mul32(x345, 0xffffffff)
  var x367 uint32
  var x368 uint32
  x367, x368 = bits.Mul32(x345, 0xffffffff)
  var x369 uint32
  var x370 uint32
  x369, x370 = bits.Mul32(x345, 0xffffffff)
  var x371 uint32
  var x372 uint32
  x371, x372 = bits.Add32(x370, x367, 0x0)
  var x373 uint32
  var x374 uint32
  x373, x374 = bits.Add32(x368, x365, x372)
  var x375 uint32 = (x374 + x366)
  var x377 uint32
  _, x377 = bits.Add32(x345, x369, 0x0)
  var x378 uint32
  var x379 uint32
  x378, x379 = bits.Add32(x347, x371, x377)
  var x380 uint32
  var x381 uint32
  x380, x381 = bits.Add32(x349, x373, x379)
  var x382 uint32
  var x383 uint32
  x382, x383 = bits.Add32(x351, x375, x381)
  var x384 uint32
  var x385 uint32
  x384, x385 = bits.Add32(x353, uint32(0x0), x383)
  var x386 uint32
  var x387 uint32
  x386, x387 = bits.Add32(x355, uint32(0x0), x385)
  var x388 uint32
  var x389 uint32
  x388, x389 = bits.Add32(x357, x345, x387)
  var x390 uint32
  var x391 uint32
  x390, x391 = bits.Add32(x359, x363, x389)
  var x392 uint32
  var x393 uint32
  x392, x393 = bits.Add32(x361, x364, x391)
  var x394 uint32 = (x393 + x362)
  var x395 uint32
  var x396 uint32
  x395, x396 = bits.Mul32(x5, (arg2[7]))
  var x397 uint32
  var x398 uint32
  x397, x398 = bits.Mul32(x5, (arg2[6]))
  var x399 uint32
  var x400 uint32
  x399, x400 = bits.Mul32(x5, (arg2[5]))
  var x401 uint32
  var x402 uint32
  x401, x402 = bits.Mul32(x5, (arg2[4]))
  var x403 uint32
  var x404 uint32
  x403, x404 = bits.Mul32(x5, (arg2[3]))
  var x405 uint32
  var x406 uint32
  x405, x406 = bits.Mul32(x5, (arg2[2]))
  var x407 uint32
  var x408 uint32
  x407, x408 = bits.Mul32(x5, (arg2[1]))
  var x409 uint32
  var x410 uint32
  x409, x410 = bits.Mul32(x5, (arg2[0]))
  var x411 uint32
  var x412 uint32
  x411, x412 = bits.Add32(x410, x407, 0x0)
  var x413 uint32
  var x414 uint32
  x413, x414 = bits.Add32(x408, x405, x412)
  var x415 uint32
  var x416 uint32
  x415, x416 = bits.Add32(x406, x403, x414)
  var x417 uint32
  var x418 uint32
  x417, x418 = bits.Add32(x404, x401, x416)
  var x419 uint32
  var x420 uint32
  x419, x420 = bits.Add32(x402, x399, x418)
  var x421 uint32
  var x422 uint32
  x421, x422 = bits.Add32(x400, x397, x420)
  var x423 uint32
  var x424 uint32
  x423, x424 = bits.Add32(x398, x395, x422)
  var x425 uint32 = (x424 + x396)
  var x426 uint32
  var x427 uint32
  x426, x427 = bits.Add32(x378, x409, 0x0)
  var x428 uint32
  var x429 uint32
  x428, x429 = bits.Add32(x380, x411, x427)
  var x430 uint32
  var x431 uint32
  x430, x431 = bits.Add32(x382, x413, x429)
  var x432 uint32
  var x433 uint32
  x432, x433 = bits.Add32(x384, x415, x431)
  var x434 uint32
  var x435 uint32
  x434, x435 = bits.Add32(x386, x417, x433)
  var x436 uint32
  var x437 uint32
  x436, x437 = bits.Add32(x388, x419, x435)
  var x438 uint32
  var x439 uint32
  x438, x439 = bits.Add32(x390, x421, x437)
  var x440 uint32
  var x441 uint32
  x440, x441 = bits.Add32(x392, x423, x439)
  var x442 uint32
  var x443 uint32
  x442, x443 = bits.Add32(x394, x425, x441)
  var x444 uint32
  var x445 uint32
  x444, x445 = bits.Mul32(x426, 0xffffffff)
  var x446 uint32
  var x447 uint32
  x446, x447 = bits.Mul32(x426, 0xffffffff)
  var x448 uint32
  var x449 uint32
  x448, x449 = bits.Mul32(x426, 0xffffffff)
  var x450 uint32
  var x451 uint32
  x450, x451 = bits.Mul32(x426, 0xffffffff)
  var x452 uint32
  var x453 uint32
  x452, x453 = bits.Add32(x451, x448, 0x0)
  var x454 uint32
  var x455 uint32
  x454, x455 = bits.Add32(x449, x446, x453)
  var x456 uint32 = (x455 + x447)
  var x458 uint32
  _, x458 = bits.Add32(x426, x450, 0x0)
  var x459 uint32
  var x460 uint32
  x459, x460 = bits.Add32(x428, x452, x458)
  var x461 uint32
  var x462 uint32
  x461, x462 = bits.Add32(x430, x454, x460)
  var x463 uint32
  var x464 uint32
  x463, x464 = bits.Add32(x432, x456, x462)
  var x465 uint32
  var x466 uint32
  x465, x466 = bits.Add32(x434, uint32(0x0), x464)
  var x467 uint32
  var x468 uint32
  x467, x468 = bits.Add32(x436, uint32(0x0), x466)
  var x469 uint32
  var x470 uint32
  x469, x470 = bits.Add32(x438, x426, x468)
  var x471 uint32
  var x472 uint32
  x471, x472 = bits.Add32(x440, x444, x470)
  var x473 uint32
  var x474 uint32
  x473, x474 = bits.Add32(x442, x445, x472)
  var x475 uint32 = (x474 + x443)
  var x476 uint32
  var x477 uint32
  x476, x477 = bits.Mul32(x6, (arg2[7]))
  var x478 uint32
  var x479 uint32
  x478, x479 = bits.Mul32(x6, (arg2[6]))
  var x480 uint32
  var x481 uint32
  x480, x481 = bits.Mul32(x6, (arg2[5]))
  var x482 uint32
  var x483 uint32
  x482, x483 = bits.Mul32(x6, (arg2[4]))
  var x484 uint32
  var x485 uint32
  x484, x485 = bits.Mul32(x6, (arg2[3]))
  var x486 uint32
  var x487 uint32
  x486, x487 = bits.Mul32(x6, (arg2[2]))
  var x488 uint32
  var x489 uint32
  x488, x489 = bits.Mul32(x6, (arg2[1]))
  var x490 uint32
  var x491 uint32
  x490, x491 = bits.Mul32(x6, (arg2[0]))
  var x492 uint32
  var x493 uint32
  x492, x493 = bits.Add32(x491, x488, 0x0)
  var x494 uint32
  var x495 uint32
  x494, x495 = bits.Add32(x489, x486, x493)
  var x496 uint32
  var x497 uint32
  x496, x497 = bits.Add32(x487, x484, x495)
  var x498 uint32
  var x499 uint32
  x498, x499 = bits.Add32(x485, x482, x497)
  var x500 uint32
  var x501 uint32
  x500, x501 = bits.Add32(x483, x480, x499)
  var x502 uint32
  var x503 uint32
  x502, x503 = bits.Add32(x481, x478, x501)
  var x504 uint32
  var x505 uint32
  x504, x505 = bits.Add32(x479, x476, x503)
  var x506 uint32 = (x505 + x477)
  var x507 uint32
  var x508 uint32
  x507, x508 = bits.Add32(x459, x490, 0x0)
  var x509 uint32
  var x510 uint32
  x509, x510 = bits.Add32(x461, x492, x508)
  var x511 uint32
  var x512 uint32
  x511, x512 = bits.Add32(x463, x494, x510)
  var x513 uint32
  var x514 uint32
  x513, x514 = bits.Add32(x465, x496, x512)
  var x515 uint32
  var x516 uint32
  x515, x516 = bits.Add32(x467, x498, x514)
  var x517 uint32
  var x518 uint32
  x517, x518 = bits.Add32(x469, x500, x516)
  var x519 uint32
  var x520 uint32
  x519, x520 = bits.Add32(x471, x502, x518)
  var x521 uint32
  var x522 uint32
  x521, x522 = bits.Add32(x473, x504, x520)
  var x523 uint32
  var x524 uint32
  x523, x524 = bits.Add32(x475, x506, x522)
  var x525 uint32
  var x526 uint32
  x525, x526 = bits.Mul32(x507, 0xffffffff)
  var x527 uint32
  var x528 uint32
  x527, x528 = bits.Mul32(x507, 0xffffffff)
  var x529 uint32
  var x530 uint32
  x529, x530 = bits.Mul32(x507, 0xffffffff)
  var x531 uint32
  var x532 uint32
  x531, x532 = bits.Mul32(x507, 0xffffffff)
  var x533 uint32
  var x534 uint32
  x533, x534 = bits.Add32(x532, x529, 0x0)
  var x535 uint32
  var x536 uint32
  x535, x536 = bits.Add32(x530, x527, x534)
  var x537 uint32 = (x536 + x528)
  var x539 uint32
  _, x539 = bits.Add32(x507, x531, 0x0)
  var x540 uint32
  var x541 uint32
  x540, x541 = bits.Add32(x509, x533, x539)
  var x542 uint32
  var x543 uint32
  x542, x543 = bits.Add32(x511, x535, x541)
  var x544 uint32
  var x545 uint32
  x544, x545 = bits.Add32(x513, x537, x543)
  var x546 uint32
  var x547 uint32
  x546, x547 = bits.Add32(x515, uint32(0x0), x545)
  var x548 uint32
  var x549 uint32
  x548, x549 = bits.Add32(x517, uint32(0x0), x547)
  var x550 uint32
  var x551 uint32
  x550, x551 = bits.Add32(x519, x507, x549)
  var x552 uint32
  var x553 uint32
  x552, x553 = bits.Add32(x521, x525, x551)
  var x554 uint32
  var x555 uint32
  x554, x555 = bits.Add32(x523, x526, x553)
  var x556 uint32 = (x555 + x524)
  var x557 uint32
  var x558 uint32
  x557, x558 = bits.Mul32(x7, (arg2[7]))
  var x559 uint32
  var x560 uint32
  x559, x560 = bits.Mul32(x7, (arg2[6]))
  var x561 uint32
  var x562 uint32
  x561, x562 = bits.Mul32(x7, (arg2[5]))
  var x563 uint32
  var x564 uint32
  x563, x564 = bits.Mul32(x7, (arg2[4]))
  var x565 uint32
  var x566 uint32
  x565, x566 = bits.Mul32(x7, (arg2[3]))
  var x567 uint32
  var x568 uint32
  x567, x568 = bits.Mul32(x7, (arg2[2]))
  var x569 uint32
  var x570 uint32
  x569, x570 = bits.Mul32(x7, (arg2[1]))
  var x571 uint32
  var x572 uint32
  x571, x572 = bits.Mul32(x7, (arg2[0]))
  var x573 uint32
  var x574 uint32
  x573, x574 = bits.Add32(x572, x569, 0x0)
  var x575 uint32
  var x576 uint32
  x575, x576 = bits.Add32(x570, x567, x574)
  var x577 uint32
  var x578 uint32
  x577, x578 = bits.Add32(x568, x565, x576)
  var x579 uint32
  var x580 uint32
  x579, x580 = bits.Add32(x566, x563, x578)
  var x581 uint32
  var x582 uint32
  x581, x582 = bits.Add32(x564, x561, x580)
  var x583 uint32
  var x584 uint32
  x583, x584 = bits.Add32(x562, x559, x582)
  var x585 uint32
  var x586 uint32
  x585, x586 = bits.Add32(x560, x557, x584)
  var x587 uint32 = (x586 + x558)
  var x588 uint32
  var x589 uint32
  x588, x589 = bits.Add32(x540, x571, 0x0)
  var x590 uint32
  var x591 uint32
  x590, x591 = bits.Add32(x542, x573, x589)
  var x592 uint32
  var x593 uint32
  x592, x593 = bits.Add32(x544, x575, x591)
  var x594 uint32
  var x595 uint32
  x594, x595 = bits.Add32(x546, x577, x593)
  var x596 uint32
  var x597 uint32
  x596, x597 = bits.Add32(x548, x579, x595)
  var x598 uint32
  var x599 uint32
  x598, x599 = bits.Add32(x550, x581, x597)
  var x600 uint32
  var x601 uint32
  x600, x601 = bits.Add32(x552, x583, x599)
  var x602 uint32
  var x603 uint32
  x602, x603 = bits.Add32(x554, x585, x601)
  var x604 uint32
  var x605 uint32
  x604, x605 = bits.Add32(x556, x587, x603)
  var x606 uint32
  var x607 uint32
  x606, x607 = bits.Mul32(x588, 0xffffffff)
  var x608 uint32
  var x609 uint32
  x608, x609 = bits.Mul32(x588, 0xffffffff)
  var x610 uint32
  var x611 uint32
  x610, x611 = bits.Mul32(x588, 0xffffffff)
  var x612 uint32
  var x613 uint32
  x612, x613 = bits.Mul32(x588, 0xffffffff)
  var x614 uint32
  var x615 uint32
  x614, x615 = bits.Add32(x613, x610, 0x0)
  var x616 uint32
  var x617 uint32
  x616, x617 = bits.Add32(x611, x608, x615)
  var x618 uint32 = (x617 + x609)
  var x620 uint32
  _, x620 = bits.Add32(x588, x612, 0x0)
  var x621 uint32
  var x622 uint32
  x621, x622 = bits.Add32(x590, x614, x620)
  var x623 uint32
  var x624 uint32
  x623, x624 = bits.Add32(x592, x616, x622)
  var x625 uint32
  var x626 uint32
  x625, x626 = bits.Add32(x594, x618, x624)
  var x627 uint32
  var x628 uint32
  x627, x628 = bits.Add32(x596, uint32(0x0), x626)
  var x629 uint32
  var x630 uint32
  x629, x630 = bits.Add32(x598, uint32(0x0), x628)
  var x631 uint32
  var x632 uint32
  x631, x632 = bits.Add32(x600, x588, x630)
  var x633 uint32
  var x634 uint32
  x633, x634 = bits.Add32(x602, x606, x632)
  var x635 uint32
  var x636 uint32
  x635, x636 = bits.Add32(x604, x607, x634)
  var x637 uint32 = (x636 + x605)
  var x638 uint32
  var x639 uint32
  x638, x639 = bits.Sub32(x621, 0xffffffff, uint32(0x0))
  var x640 uint32
  var x641 uint32
  x640, x641 = bits.Sub32(x623, 0xffffffff, x639)
  var x642 uint32
  var x643 uint32
  x642, x643 = bits.Sub32(x625, 0xffffffff, x641)
  var x644 uint32
  var x645 uint32
  x644, x645 = bits.Sub32(x627, uint32(0x0), x643)
  var x646 uint32
  var x647 uint32
  x646, x647 = bits.Sub32(x629, uint32(0x0), x645)
  var x648 uint32
  var x649 uint32
  x648, x649 = bits.Sub32(x631, uint32(0x0), x647)
  var x650 uint32
  var x651 uint32
  x650, x651 = bits.Sub32(x633, 0x1, x649)
  var x652 uint32
  var x653 uint32
  x652, x653 = bits.Sub32(x635, 0xffffffff, x651)
  var x655 uint32
  _, x655 = bits.Sub32(x637, uint32(0x0), x653)
  var x656 uint32
  fiat_p256_cmovznz_u32(&x656, x655, x638, x621)
  var x657 uint32
  fiat_p256_cmovznz_u32(&x657, x655, x640, x623)
  var x658 uint32
  fiat_p256_cmovznz_u32(&x658, x655, x642, x625)
  var x659 uint32
  fiat_p256_cmovznz_u32(&x659, x655, x644, x627)
  var x660 uint32
  fiat_p256_cmovznz_u32(&x660, x655, x646, x629)
  var x661 uint32
  fiat_p256_cmovznz_u32(&x661, x655, x648, x631)
  var x662 uint32
  fiat_p256_cmovznz_u32(&x662, x655, x650, x633)
  var x663 uint32
  fiat_p256_cmovznz_u32(&x663, x655, x652, x635)
  out1[0] = x656
  out1[1] = x657
  out1[2] = x658
  out1[3] = x659
  out1[4] = x660
  out1[5] = x661
  out1[6] = x662
  out1[7] = x663
}

/*
 * The function fiat_p256_square squares a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_p256_square(out1 *[8]uint32, arg1 *[8]uint32) {
  var x1 uint32 = (arg1[1])
  var x2 uint32 = (arg1[2])
  var x3 uint32 = (arg1[3])
  var x4 uint32 = (arg1[4])
  var x5 uint32 = (arg1[5])
  var x6 uint32 = (arg1[6])
  var x7 uint32 = (arg1[7])
  var x8 uint32 = (arg1[0])
  var x9 uint32
  var x10 uint32
  x9, x10 = bits.Mul32(x8, (arg1[7]))
  var x11 uint32
  var x12 uint32
  x11, x12 = bits.Mul32(x8, (arg1[6]))
  var x13 uint32
  var x14 uint32
  x13, x14 = bits.Mul32(x8, (arg1[5]))
  var x15 uint32
  var x16 uint32
  x15, x16 = bits.Mul32(x8, (arg1[4]))
  var x17 uint32
  var x18 uint32
  x17, x18 = bits.Mul32(x8, (arg1[3]))
  var x19 uint32
  var x20 uint32
  x19, x20 = bits.Mul32(x8, (arg1[2]))
  var x21 uint32
  var x22 uint32
  x21, x22 = bits.Mul32(x8, (arg1[1]))
  var x23 uint32
  var x24 uint32
  x23, x24 = bits.Mul32(x8, (arg1[0]))
  var x25 uint32
  var x26 uint32
  x25, x26 = bits.Add32(x24, x21, 0x0)
  var x27 uint32
  var x28 uint32
  x27, x28 = bits.Add32(x22, x19, x26)
  var x29 uint32
  var x30 uint32
  x29, x30 = bits.Add32(x20, x17, x28)
  var x31 uint32
  var x32 uint32
  x31, x32 = bits.Add32(x18, x15, x30)
  var x33 uint32
  var x34 uint32
  x33, x34 = bits.Add32(x16, x13, x32)
  var x35 uint32
  var x36 uint32
  x35, x36 = bits.Add32(x14, x11, x34)
  var x37 uint32
  var x38 uint32
  x37, x38 = bits.Add32(x12, x9, x36)
  var x39 uint32 = (x38 + x10)
  var x40 uint32
  var x41 uint32
  x40, x41 = bits.Mul32(x23, 0xffffffff)
  var x42 uint32
  var x43 uint32
  x42, x43 = bits.Mul32(x23, 0xffffffff)
  var x44 uint32
  var x45 uint32
  x44, x45 = bits.Mul32(x23, 0xffffffff)
  var x46 uint32
  var x47 uint32
  x46, x47 = bits.Mul32(x23, 0xffffffff)
  var x48 uint32
  var x49 uint32
  x48, x49 = bits.Add32(x47, x44, 0x0)
  var x50 uint32
  var x51 uint32
  x50, x51 = bits.Add32(x45, x42, x49)
  var x52 uint32 = (x51 + x43)
  var x54 uint32
  _, x54 = bits.Add32(x23, x46, 0x0)
  var x55 uint32
  var x56 uint32
  x55, x56 = bits.Add32(x25, x48, x54)
  var x57 uint32
  var x58 uint32
  x57, x58 = bits.Add32(x27, x50, x56)
  var x59 uint32
  var x60 uint32
  x59, x60 = bits.Add32(x29, x52, x58)
  var x61 uint32
  var x62 uint32
  x61, x62 = bits.Add32(x31, uint32(0x0), x60)
  var x63 uint32
  var x64 uint32
  x63, x64 = bits.Add32(x33, uint32(0x0), x62)
  var x65 uint32
  var x66 uint32
  x65, x66 = bits.Add32(x35, x23, x64)
  var x67 uint32
  var x68 uint32
  x67, x68 = bits.Add32(x37, x40, x66)
  var x69 uint32
  var x70 uint32
  x69, x70 = bits.Add32(x39, x41, x68)
  var x71 uint32
  var x72 uint32
  x71, x72 = bits.Mul32(x1, (arg1[7]))
  var x73 uint32
  var x74 uint32
  x73, x74 = bits.Mul32(x1, (arg1[6]))
  var x75 uint32
  var x76 uint32
  x75, x76 = bits.Mul32(x1, (arg1[5]))
  var x77 uint32
  var x78 uint32
  x77, x78 = bits.Mul32(x1, (arg1[4]))
  var x79 uint32
  var x80 uint32
  x79, x80 = bits.Mul32(x1, (arg1[3]))
  var x81 uint32
  var x82 uint32
  x81, x82 = bits.Mul32(x1, (arg1[2]))
  var x83 uint32
  var x84 uint32
  x83, x84 = bits.Mul32(x1, (arg1[1]))
  var x85 uint32
  var x86 uint32
  x85, x86 = bits.Mul32(x1, (arg1[0]))
  var x87 uint32
  var x88 uint32
  x87, x88 = bits.Add32(x86, x83, 0x0)
  var x89 uint32
  var x90 uint32
  x89, x90 = bits.Add32(x84, x81, x88)
  var x91 uint32
  var x92 uint32
  x91, x92 = bits.Add32(x82, x79, x90)
  var x93 uint32
  var x94 uint32
  x93, x94 = bits.Add32(x80, x77, x92)
  var x95 uint32
  var x96 uint32
  x95, x96 = bits.Add32(x78, x75, x94)
  var x97 uint32
  var x98 uint32
  x97, x98 = bits.Add32(x76, x73, x96)
  var x99 uint32
  var x100 uint32
  x99, x100 = bits.Add32(x74, x71, x98)
  var x101 uint32 = (x100 + x72)
  var x102 uint32
  var x103 uint32
  x102, x103 = bits.Add32(x55, x85, 0x0)
  var x104 uint32
  var x105 uint32
  x104, x105 = bits.Add32(x57, x87, x103)
  var x106 uint32
  var x107 uint32
  x106, x107 = bits.Add32(x59, x89, x105)
  var x108 uint32
  var x109 uint32
  x108, x109 = bits.Add32(x61, x91, x107)
  var x110 uint32
  var x111 uint32
  x110, x111 = bits.Add32(x63, x93, x109)
  var x112 uint32
  var x113 uint32
  x112, x113 = bits.Add32(x65, x95, x111)
  var x114 uint32
  var x115 uint32
  x114, x115 = bits.Add32(x67, x97, x113)
  var x116 uint32
  var x117 uint32
  x116, x117 = bits.Add32(x69, x99, x115)
  var x118 uint32
  var x119 uint32
  x118, x119 = bits.Add32(x70, x101, x117)
  var x120 uint32
  var x121 uint32
  x120, x121 = bits.Mul32(x102, 0xffffffff)
  var x122 uint32
  var x123 uint32
  x122, x123 = bits.Mul32(x102, 0xffffffff)
  var x124 uint32
  var x125 uint32
  x124, x125 = bits.Mul32(x102, 0xffffffff)
  var x126 uint32
  var x127 uint32
  x126, x127 = bits.Mul32(x102, 0xffffffff)
  var x128 uint32
  var x129 uint32
  x128, x129 = bits.Add32(x127, x124, 0x0)
  var x130 uint32
  var x131 uint32
  x130, x131 = bits.Add32(x125, x122, x129)
  var x132 uint32 = (x131 + x123)
  var x134 uint32
  _, x134 = bits.Add32(x102, x126, 0x0)
  var x135 uint32
  var x136 uint32
  x135, x136 = bits.Add32(x104, x128, x134)
  var x137 uint32
  var x138 uint32
  x137, x138 = bits.Add32(x106, x130, x136)
  var x139 uint32
  var x140 uint32
  x139, x140 = bits.Add32(x108, x132, x138)
  var x141 uint32
  var x142 uint32
  x141, x142 = bits.Add32(x110, uint32(0x0), x140)
  var x143 uint32
  var x144 uint32
  x143, x144 = bits.Add32(x112, uint32(0x0), x142)
  var x145 uint32
  var x146 uint32
  x145, x146 = bits.Add32(x114, x102, x144)
  var x147 uint32
  var x148 uint32
  x147, x148 = bits.Add32(x116, x120, x146)
  var x149 uint32
  var x150 uint32
  x149, x150 = bits.Add32(x118, x121, x148)
  var x151 uint32 = (x150 + x119)
  var x152 uint32
  var x153 uint32
  x152, x153 = bits.Mul32(x2, (arg1[7]))
  var x154 uint32
  var x155 uint32
  x154, x155 = bits.Mul32(x2, (arg1[6]))
  var x156 uint32
  var x157 uint32
  x156, x157 = bits.Mul32(x2, (arg1[5]))
  var x158 uint32
  var x159 uint32
  x158, x159 = bits.Mul32(x2, (arg1[4]))
  var x160 uint32
  var x161 uint32
  x160, x161 = bits.Mul32(x2, (arg1[3]))
  var x162 uint32
  var x163 uint32
  x162, x163 = bits.Mul32(x2, (arg1[2]))
  var x164 uint32
  var x165 uint32
  x164, x165 = bits.Mul32(x2, (arg1[1]))
  var x166 uint32
  var x167 uint32
  x166, x167 = bits.Mul32(x2, (arg1[0]))
  var x168 uint32
  var x169 uint32
  x168, x169 = bits.Add32(x167, x164, 0x0)
  var x170 uint32
  var x171 uint32
  x170, x171 = bits.Add32(x165, x162, x169)
  var x172 uint32
  var x173 uint32
  x172, x173 = bits.Add32(x163, x160, x171)
  var x174 uint32
  var x175 uint32
  x174, x175 = bits.Add32(x161, x158, x173)
  var x176 uint32
  var x177 uint32
  x176, x177 = bits.Add32(x159, x156, x175)
  var x178 uint32
  var x179 uint32
  x178, x179 = bits.Add32(x157, x154, x177)
  var x180 uint32
  var x181 uint32
  x180, x181 = bits.Add32(x155, x152, x179)
  var x182 uint32 = (x181 + x153)
  var x183 uint32
  var x184 uint32
  x183, x184 = bits.Add32(x135, x166, 0x0)
  var x185 uint32
  var x186 uint32
  x185, x186 = bits.Add32(x137, x168, x184)
  var x187 uint32
  var x188 uint32
  x187, x188 = bits.Add32(x139, x170, x186)
  var x189 uint32
  var x190 uint32
  x189, x190 = bits.Add32(x141, x172, x188)
  var x191 uint32
  var x192 uint32
  x191, x192 = bits.Add32(x143, x174, x190)
  var x193 uint32
  var x194 uint32
  x193, x194 = bits.Add32(x145, x176, x192)
  var x195 uint32
  var x196 uint32
  x195, x196 = bits.Add32(x147, x178, x194)
  var x197 uint32
  var x198 uint32
  x197, x198 = bits.Add32(x149, x180, x196)
  var x199 uint32
  var x200 uint32
  x199, x200 = bits.Add32(x151, x182, x198)
  var x201 uint32
  var x202 uint32
  x201, x202 = bits.Mul32(x183, 0xffffffff)
  var x203 uint32
  var x204 uint32
  x203, x204 = bits.Mul32(x183, 0xffffffff)
  var x205 uint32
  var x206 uint32
  x205, x206 = bits.Mul32(x183, 0xffffffff)
  var x207 uint32
  var x208 uint32
  x207, x208 = bits.Mul32(x183, 0xffffffff)
  var x209 uint32
  var x210 uint32
  x209, x210 = bits.Add32(x208, x205, 0x0)
  var x211 uint32
  var x212 uint32
  x211, x212 = bits.Add32(x206, x203, x210)
  var x213 uint32 = (x212 + x204)
  var x215 uint32
  _, x215 = bits.Add32(x183, x207, 0x0)
  var x216 uint32
  var x217 uint32
  x216, x217 = bits.Add32(x185, x209, x215)
  var x218 uint32
  var x219 uint32
  x218, x219 = bits.Add32(x187, x211, x217)
  var x220 uint32
  var x221 uint32
  x220, x221 = bits.Add32(x189, x213, x219)
  var x222 uint32
  var x223 uint32
  x222, x223 = bits.Add32(x191, uint32(0x0), x221)
  var x224 uint32
  var x225 uint32
  x224, x225 = bits.Add32(x193, uint32(0x0), x223)
  var x226 uint32
  var x227 uint32
  x226, x227 = bits.Add32(x195, x183, x225)
  var x228 uint32
  var x229 uint32
  x228, x229 = bits.Add32(x197, x201, x227)
  var x230 uint32
  var x231 uint32
  x230, x231 = bits.Add32(x199, x202, x229)
  var x232 uint32 = (x231 + x200)
  var x233 uint32
  var x234 uint32
  x233, x234 = bits.Mul32(x3, (arg1[7]))
  var x235 uint32
  var x236 uint32
  x235, x236 = bits.Mul32(x3, (arg1[6]))
  var x237 uint32
  var x238 uint32
  x237, x238 = bits.Mul32(x3, (arg1[5]))
  var x239 uint32
  var x240 uint32
  x239, x240 = bits.Mul32(x3, (arg1[4]))
  var x241 uint32
  var x242 uint32
  x241, x242 = bits.Mul32(x3, (arg1[3]))
  var x243 uint32
  var x244 uint32
  x243, x244 = bits.Mul32(x3, (arg1[2]))
  var x245 uint32
  var x246 uint32
  x245, x246 = bits.Mul32(x3, (arg1[1]))
  var x247 uint32
  var x248 uint32
  x247, x248 = bits.Mul32(x3, (arg1[0]))
  var x249 uint32
  var x250 uint32
  x249, x250 = bits.Add32(x248, x245, 0x0)
  var x251 uint32
  var x252 uint32
  x251, x252 = bits.Add32(x246, x243, x250)
  var x253 uint32
  var x254 uint32
  x253, x254 = bits.Add32(x244, x241, x252)
  var x255 uint32
  var x256 uint32
  x255, x256 = bits.Add32(x242, x239, x254)
  var x257 uint32
  var x258 uint32
  x257, x258 = bits.Add32(x240, x237, x256)
  var x259 uint32
  var x260 uint32
  x259, x260 = bits.Add32(x238, x235, x258)
  var x261 uint32
  var x262 uint32
  x261, x262 = bits.Add32(x236, x233, x260)
  var x263 uint32 = (x262 + x234)
  var x264 uint32
  var x265 uint32
  x264, x265 = bits.Add32(x216, x247, 0x0)
  var x266 uint32
  var x267 uint32
  x266, x267 = bits.Add32(x218, x249, x265)
  var x268 uint32
  var x269 uint32
  x268, x269 = bits.Add32(x220, x251, x267)
  var x270 uint32
  var x271 uint32
  x270, x271 = bits.Add32(x222, x253, x269)
  var x272 uint32
  var x273 uint32
  x272, x273 = bits.Add32(x224, x255, x271)
  var x274 uint32
  var x275 uint32
  x274, x275 = bits.Add32(x226, x257, x273)
  var x276 uint32
  var x277 uint32
  x276, x277 = bits.Add32(x228, x259, x275)
  var x278 uint32
  var x279 uint32
  x278, x279 = bits.Add32(x230, x261, x277)
  var x280 uint32
  var x281 uint32
  x280, x281 = bits.Add32(x232, x263, x279)
  var x282 uint32
  var x283 uint32
  x282, x283 = bits.Mul32(x264, 0xffffffff)
  var x284 uint32
  var x285 uint32
  x284, x285 = bits.Mul32(x264, 0xffffffff)
  var x286 uint32
  var x287 uint32
  x286, x287 = bits.Mul32(x264, 0xffffffff)
  var x288 uint32
  var x289 uint32
  x288, x289 = bits.Mul32(x264, 0xffffffff)
  var x290 uint32
  var x291 uint32
  x290, x291 = bits.Add32(x289, x286, 0x0)
  var x292 uint32
  var x293 uint32
  x292, x293 = bits.Add32(x287, x284, x291)
  var x294 uint32 = (x293 + x285)
  var x296 uint32
  _, x296 = bits.Add32(x264, x288, 0x0)
  var x297 uint32
  var x298 uint32
  x297, x298 = bits.Add32(x266, x290, x296)
  var x299 uint32
  var x300 uint32
  x299, x300 = bits.Add32(x268, x292, x298)
  var x301 uint32
  var x302 uint32
  x301, x302 = bits.Add32(x270, x294, x300)
  var x303 uint32
  var x304 uint32
  x303, x304 = bits.Add32(x272, uint32(0x0), x302)
  var x305 uint32
  var x306 uint32
  x305, x306 = bits.Add32(x274, uint32(0x0), x304)
  var x307 uint32
  var x308 uint32
  x307, x308 = bits.Add32(x276, x264, x306)
  var x309 uint32
  var x310 uint32
  x309, x310 = bits.Add32(x278, x282, x308)
  var x311 uint32
  var x312 uint32
  x311, x312 = bits.Add32(x280, x283, x310)
  var x313 uint32 = (x312 + x281)
  var x314 uint32
  var x315 uint32
  x314, x315 = bits.Mul32(x4, (arg1[7]))
  var x316 uint32
  var x317 uint32
  x316, x317 = bits.Mul32(x4, (arg1[6]))
  var x318 uint32
  var x319 uint32
  x318, x319 = bits.Mul32(x4, (arg1[5]))
  var x320 uint32
  var x321 uint32
  x320, x321 = bits.Mul32(x4, (arg1[4]))
  var x322 uint32
  var x323 uint32
  x322, x323 = bits.Mul32(x4, (arg1[3]))
  var x324 uint32
  var x325 uint32
  x324, x325 = bits.Mul32(x4, (arg1[2]))
  var x326 uint32
  var x327 uint32
  x326, x327 = bits.Mul32(x4, (arg1[1]))
  var x328 uint32
  var x329 uint32
  x328, x329 = bits.Mul32(x4, (arg1[0]))
  var x330 uint32
  var x331 uint32
  x330, x331 = bits.Add32(x329, x326, 0x0)
  var x332 uint32
  var x333 uint32
  x332, x333 = bits.Add32(x327, x324, x331)
  var x334 uint32
  var x335 uint32
  x334, x335 = bits.Add32(x325, x322, x333)
  var x336 uint32
  var x337 uint32
  x336, x337 = bits.Add32(x323, x320, x335)
  var x338 uint32
  var x339 uint32
  x338, x339 = bits.Add32(x321, x318, x337)
  var x340 uint32
  var x341 uint32
  x340, x341 = bits.Add32(x319, x316, x339)
  var x342 uint32
  var x343 uint32
  x342, x343 = bits.Add32(x317, x314, x341)
  var x344 uint32 = (x343 + x315)
  var x345 uint32
  var x346 uint32
  x345, x346 = bits.Add32(x297, x328, 0x0)
  var x347 uint32
  var x348 uint32
  x347, x348 = bits.Add32(x299, x330, x346)
  var x349 uint32
  var x350 uint32
  x349, x350 = bits.Add32(x301, x332, x348)
  var x351 uint32
  var x352 uint32
  x351, x352 = bits.Add32(x303, x334, x350)
  var x353 uint32
  var x354 uint32
  x353, x354 = bits.Add32(x305, x336, x352)
  var x355 uint32
  var x356 uint32
  x355, x356 = bits.Add32(x307, x338, x354)
  var x357 uint32
  var x358 uint32
  x357, x358 = bits.Add32(x309, x340, x356)
  var x359 uint32
  var x360 uint32
  x359, x360 = bits.Add32(x311, x342, x358)
  var x361 uint32
  var x362 uint32
  x361, x362 = bits.Add32(x313, x344, x360)
  var x363 uint32
  var x364 uint32
  x363, x364 = bits.Mul32(x345, 0xffffffff)
  var x365 uint32
  var x366 uint32
  x365, x366 = bits.Mul32(x345, 0xffffffff)
  var x367 uint32
  var x368 uint32
  x367, x368 = bits.Mul32(x345, 0xffffffff)
  var x369 uint32
  var x370 uint32
  x369, x370 = bits.Mul32(x345, 0xffffffff)
  var x371 uint32
  var x372 uint32
  x371, x372 = bits.Add32(x370, x367, 0x0)
  var x373 uint32
  var x374 uint32
  x373, x374 = bits.Add32(x368, x365, x372)
  var x375 uint32 = (x374 + x366)
  var x377 uint32
  _, x377 = bits.Add32(x345, x369, 0x0)
  var x378 uint32
  var x379 uint32
  x378, x379 = bits.Add32(x347, x371, x377)
  var x380 uint32
  var x381 uint32
  x380, x381 = bits.Add32(x349, x373, x379)
  var x382 uint32
  var x383 uint32
  x382, x383 = bits.Add32(x351, x375, x381)
  var x384 uint32
  var x385 uint32
  x384, x385 = bits.Add32(x353, uint32(0x0), x383)
  var x386 uint32
  var x387 uint32
  x386, x387 = bits.Add32(x355, uint32(0x0), x385)
  var x388 uint32
  var x389 uint32
  x388, x389 = bits.Add32(x357, x345, x387)
  var x390 uint32
  var x391 uint32
  x390, x391 = bits.Add32(x359, x363, x389)
  var x392 uint32
  var x393 uint32
  x392, x393 = bits.Add32(x361, x364, x391)
  var x394 uint32 = (x393 + x362)
  var x395 uint32
  var x396 uint32
  x395, x396 = bits.Mul32(x5, (arg1[7]))
  var x397 uint32
  var x398 uint32
  x397, x398 = bits.Mul32(x5, (arg1[6]))
  var x399 uint32
  var x400 uint32
  x399, x400 = bits.Mul32(x5, (arg1[5]))
  var x401 uint32
  var x402 uint32
  x401, x402 = bits.Mul32(x5, (arg1[4]))
  var x403 uint32
  var x404 uint32
  x403, x404 = bits.Mul32(x5, (arg1[3]))
  var x405 uint32
  var x406 uint32
  x405, x406 = bits.Mul32(x5, (arg1[2]))
  var x407 uint32
  var x408 uint32
  x407, x408 = bits.Mul32(x5, (arg1[1]))
  var x409 uint32
  var x410 uint32
  x409, x410 = bits.Mul32(x5, (arg1[0]))
  var x411 uint32
  var x412 uint32
  x411, x412 = bits.Add32(x410, x407, 0x0)
  var x413 uint32
  var x414 uint32
  x413, x414 = bits.Add32(x408, x405, x412)
  var x415 uint32
  var x416 uint32
  x415, x416 = bits.Add32(x406, x403, x414)
  var x417 uint32
  var x418 uint32
  x417, x418 = bits.Add32(x404, x401, x416)
  var x419 uint32
  var x420 uint32
  x419, x420 = bits.Add32(x402, x399, x418)
  var x421 uint32
  var x422 uint32
  x421, x422 = bits.Add32(x400, x397, x420)
  var x423 uint32
  var x424 uint32
  x423, x424 = bits.Add32(x398, x395, x422)
  var x425 uint32 = (x424 + x396)
  var x426 uint32
  var x427 uint32
  x426, x427 = bits.Add32(x378, x409, 0x0)
  var x428 uint32
  var x429 uint32
  x428, x429 = bits.Add32(x380, x411, x427)
  var x430 uint32
  var x431 uint32
  x430, x431 = bits.Add32(x382, x413, x429)
  var x432 uint32
  var x433 uint32
  x432, x433 = bits.Add32(x384, x415, x431)
  var x434 uint32
  var x435 uint32
  x434, x435 = bits.Add32(x386, x417, x433)
  var x436 uint32
  var x437 uint32
  x436, x437 = bits.Add32(x388, x419, x435)
  var x438 uint32
  var x439 uint32
  x438, x439 = bits.Add32(x390, x421, x437)
  var x440 uint32
  var x441 uint32
  x440, x441 = bits.Add32(x392, x423, x439)
  var x442 uint32
  var x443 uint32
  x442, x443 = bits.Add32(x394, x425, x441)
  var x444 uint32
  var x445 uint32
  x444, x445 = bits.Mul32(x426, 0xffffffff)
  var x446 uint32
  var x447 uint32
  x446, x447 = bits.Mul32(x426, 0xffffffff)
  var x448 uint32
  var x449 uint32
  x448, x449 = bits.Mul32(x426, 0xffffffff)
  var x450 uint32
  var x451 uint32
  x450, x451 = bits.Mul32(x426, 0xffffffff)
  var x452 uint32
  var x453 uint32
  x452, x453 = bits.Add32(x451, x448, 0x0)
  var x454 uint32
  var x455 uint32
  x454, x455 = bits.Add32(x449, x446, x453)
  var x456 uint32 = (x455 + x447)
  var x458 uint32
  _, x458 = bits.Add32(x426, x450, 0x0)
  var x459 uint32
  var x460 uint32
  x459, x460 = bits.Add32(x428, x452, x458)
  var x461 uint32
  var x462 uint32
  x461, x462 = bits.Add32(x430, x454, x460)
  var x463 uint32
  var x464 uint32
  x463, x464 = bits.Add32(x432, x456, x462)
  var x465 uint32
  var x466 uint32
  x465, x466 = bits.Add32(x434, uint32(0x0), x464)
  var x467 uint32
  var x468 uint32
  x467, x468 = bits.Add32(x436, uint32(0x0), x466)
  var x469 uint32
  var x470 uint32
  x469, x470 = bits.Add32(x438, x426, x468)
  var x471 uint32
  var x472 uint32
  x471, x472 = bits.Add32(x440, x444, x470)
  var x473 uint32
  var x474 uint32
  x473, x474 = bits.Add32(x442, x445, x472)
  var x475 uint32 = (x474 + x443)
  var x476 uint32
  var x477 uint32
  x476, x477 = bits.Mul32(x6, (arg1[7]))
  var x478 uint32
  var x479 uint32
  x478, x479 = bits.Mul32(x6, (arg1[6]))
  var x480 uint32
  var x481 uint32
  x480, x481 = bits.Mul32(x6, (arg1[5]))
  var x482 uint32
  var x483 uint32
  x482, x483 = bits.Mul32(x6, (arg1[4]))
  var x484 uint32
  var x485 uint32
  x484, x485 = bits.Mul32(x6, (arg1[3]))
  var x486 uint32
  var x487 uint32
  x486, x487 = bits.Mul32(x6, (arg1[2]))
  var x488 uint32
  var x489 uint32
  x488, x489 = bits.Mul32(x6, (arg1[1]))
  var x490 uint32
  var x491 uint32
  x490, x491 = bits.Mul32(x6, (arg1[0]))
  var x492 uint32
  var x493 uint32
  x492, x493 = bits.Add32(x491, x488, 0x0)
  var x494 uint32
  var x495 uint32
  x494, x495 = bits.Add32(x489, x486, x493)
  var x496 uint32
  var x497 uint32
  x496, x497 = bits.Add32(x487, x484, x495)
  var x498 uint32
  var x499 uint32
  x498, x499 = bits.Add32(x485, x482, x497)
  var x500 uint32
  var x501 uint32
  x500, x501 = bits.Add32(x483, x480, x499)
  var x502 uint32
  var x503 uint32
  x502, x503 = bits.Add32(x481, x478, x501)
  var x504 uint32
  var x505 uint32
  x504, x505 = bits.Add32(x479, x476, x503)
  var x506 uint32 = (x505 + x477)
  var x507 uint32
  var x508 uint32
  x507, x508 = bits.Add32(x459, x490, 0x0)
  var x509 uint32
  var x510 uint32
  x509, x510 = bits.Add32(x461, x492, x508)
  var x511 uint32
  var x512 uint32
  x511, x512 = bits.Add32(x463, x494, x510)
  var x513 uint32
  var x514 uint32
  x513, x514 = bits.Add32(x465, x496, x512)
  var x515 uint32
  var x516 uint32
  x515, x516 = bits.Add32(x467, x498, x514)
  var x517 uint32
  var x518 uint32
  x517, x518 = bits.Add32(x469, x500, x516)
  var x519 uint32
  var x520 uint32
  x519, x520 = bits.Add32(x471, x502, x518)
  var x521 uint32
  var x522 uint32
  x521, x522 = bits.Add32(x473, x504, x520)
  var x523 uint32
  var x524 uint32
  x523, x524 = bits.Add32(x475, x506, x522)
  var x525 uint32
  var x526 uint32
  x525, x526 = bits.Mul32(x507, 0xffffffff)
  var x527 uint32
  var x528 uint32
  x527, x528 = bits.Mul32(x507, 0xffffffff)
  var x529 uint32
  var x530 uint32
  x529, x530 = bits.Mul32(x507, 0xffffffff)
  var x531 uint32
  var x532 uint32
  x531, x532 = bits.Mul32(x507, 0xffffffff)
  var x533 uint32
  var x534 uint32
  x533, x534 = bits.Add32(x532, x529, 0x0)
  var x535 uint32
  var x536 uint32
  x535, x536 = bits.Add32(x530, x527, x534)
  var x537 uint32 = (x536 + x528)
  var x539 uint32
  _, x539 = bits.Add32(x507, x531, 0x0)
  var x540 uint32
  var x541 uint32
  x540, x541 = bits.Add32(x509, x533, x539)
  var x542 uint32
  var x543 uint32
  x542, x543 = bits.Add32(x511, x535, x541)
  var x544 uint32
  var x545 uint32
  x544, x545 = bits.Add32(x513, x537, x543)
  var x546 uint32
  var x547 uint32
  x546, x547 = bits.Add32(x515, uint32(0x0), x545)
  var x548 uint32
  var x549 uint32
  x548, x549 = bits.Add32(x517, uint32(0x0), x547)
  var x550 uint32
  var x551 uint32
  x550, x551 = bits.Add32(x519, x507, x549)
  var x552 uint32
  var x553 uint32
  x552, x553 = bits.Add32(x521, x525, x551)
  var x554 uint32
  var x555 uint32
  x554, x555 = bits.Add32(x523, x526, x553)
  var x556 uint32 = (x555 + x524)
  var x557 uint32
  var x558 uint32
  x557, x558 = bits.Mul32(x7, (arg1[7]))
  var x559 uint32
  var x560 uint32
  x559, x560 = bits.Mul32(x7, (arg1[6]))
  var x561 uint32
  var x562 uint32
  x561, x562 = bits.Mul32(x7, (arg1[5]))
  var x563 uint32
  var x564 uint32
  x563, x564 = bits.Mul32(x7, (arg1[4]))
  var x565 uint32
  var x566 uint32
  x565, x566 = bits.Mul32(x7, (arg1[3]))
  var x567 uint32
  var x568 uint32
  x567, x568 = bits.Mul32(x7, (arg1[2]))
  var x569 uint32
  var x570 uint32
  x569, x570 = bits.Mul32(x7, (arg1[1]))
  var x571 uint32
  var x572 uint32
  x571, x572 = bits.Mul32(x7, (arg1[0]))
  var x573 uint32
  var x574 uint32
  x573, x574 = bits.Add32(x572, x569, 0x0)
  var x575 uint32
  var x576 uint32
  x575, x576 = bits.Add32(x570, x567, x574)
  var x577 uint32
  var x578 uint32
  x577, x578 = bits.Add32(x568, x565, x576)
  var x579 uint32
  var x580 uint32
  x579, x580 = bits.Add32(x566, x563, x578)
  var x581 uint32
  var x582 uint32
  x581, x582 = bits.Add32(x564, x561, x580)
  var x583 uint32
  var x584 uint32
  x583, x584 = bits.Add32(x562, x559, x582)
  var x585 uint32
  var x586 uint32
  x585, x586 = bits.Add32(x560, x557, x584)
  var x587 uint32 = (x586 + x558)
  var x588 uint32
  var x589 uint32
  x588, x589 = bits.Add32(x540, x571, 0x0)
  var x590 uint32
  var x591 uint32
  x590, x591 = bits.Add32(x542, x573, x589)
  var x592 uint32
  var x593 uint32
  x592, x593 = bits.Add32(x544, x575, x591)
  var x594 uint32
  var x595 uint32
  x594, x595 = bits.Add32(x546, x577, x593)
  var x596 uint32
  var x597 uint32
  x596, x597 = bits.Add32(x548, x579, x595)
  var x598 uint32
  var x599 uint32
  x598, x599 = bits.Add32(x550, x581, x597)
  var x600 uint32
  var x601 uint32
  x600, x601 = bits.Add32(x552, x583, x599)
  var x602 uint32
  var x603 uint32
  x602, x603 = bits.Add32(x554, x585, x601)
  var x604 uint32
  var x605 uint32
  x604, x605 = bits.Add32(x556, x587, x603)
  var x606 uint32
  var x607 uint32
  x606, x607 = bits.Mul32(x588, 0xffffffff)
  var x608 uint32
  var x609 uint32
  x608, x609 = bits.Mul32(x588, 0xffffffff)
  var x610 uint32
  var x611 uint32
  x610, x611 = bits.Mul32(x588, 0xffffffff)
  var x612 uint32
  var x613 uint32
  x612, x613 = bits.Mul32(x588, 0xffffffff)
  var x614 uint32
  var x615 uint32
  x614, x615 = bits.Add32(x613, x610, 0x0)
  var x616 uint32
  var x617 uint32
  x616, x617 = bits.Add32(x611, x608, x615)
  var x618 uint32 = (x617 + x609)
  var x620 uint32
  _, x620 = bits.Add32(x588, x612, 0x0)
  var x621 uint32
  var x622 uint32
  x621, x622 = bits.Add32(x590, x614, x620)
  var x623 uint32
  var x624 uint32
  x623, x624 = bits.Add32(x592, x616, x622)
  var x625 uint32
  var x626 uint32
  x625, x626 = bits.Add32(x594, x618, x624)
  var x627 uint32
  var x628 uint32
  x627, x628 = bits.Add32(x596, uint32(0x0), x626)
  var x629 uint32
  var x630 uint32
  x629, x630 = bits.Add32(x598, uint32(0x0), x628)
  var x631 uint32
  var x632 uint32
  x631, x632 = bits.Add32(x600, x588, x630)
  var x633 uint32
  var x634 uint32
  x633, x634 = bits.Add32(x602, x606, x632)
  var x635 uint32
  var x636 uint32
  x635, x636 = bits.Add32(x604, x607, x634)
  var x637 uint32 = (x636 + x605)
  var x638 uint32
  var x639 uint32
  x638, x639 = bits.Sub32(x621, 0xffffffff, uint32(0x0))
  var x640 uint32
  var x641 uint32
  x640, x641 = bits.Sub32(x623, 0xffffffff, x639)
  var x642 uint32
  var x643 uint32
  x642, x643 = bits.Sub32(x625, 0xffffffff, x641)
  var x644 uint32
  var x645 uint32
  x644, x645 = bits.Sub32(x627, uint32(0x0), x643)
  var x646 uint32
  var x647 uint32
  x646, x647 = bits.Sub32(x629, uint32(0x0), x645)
  var x648 uint32
  var x649 uint32
  x648, x649 = bits.Sub32(x631, uint32(0x0), x647)
  var x650 uint32
  var x651 uint32
  x650, x651 = bits.Sub32(x633, 0x1, x649)
  var x652 uint32
  var x653 uint32
  x652, x653 = bits.Sub32(x635, 0xffffffff, x651)
  var x655 uint32
  _, x655 = bits.Sub32(x637, uint32(0x0), x653)
  var x656 uint32
  fiat_p256_cmovznz_u32(&x656, x655, x638, x621)
  var x657 uint32
  fiat_p256_cmovznz_u32(&x657, x655, x640, x623)
  var x658 uint32
  fiat_p256_cmovznz_u32(&x658, x655, x642, x625)
  var x659 uint32
  fiat_p256_cmovznz_u32(&x659, x655, x644, x627)
  var x660 uint32
  fiat_p256_cmovznz_u32(&x660, x655, x646, x629)
  var x661 uint32
  fiat_p256_cmovznz_u32(&x661, x655, x648, x631)
  var x662 uint32
  fiat_p256_cmovznz_u32(&x662, x655, x650, x633)
  var x663 uint32
  fiat_p256_cmovznz_u32(&x663, x655, x652, x635)
  out1[0] = x656
  out1[1] = x657
  out1[2] = x658
  out1[3] = x659
  out1[4] = x660
  out1[5] = x661
  out1[6] = x662
  out1[7] = x663
}

/*
 * The function fiat_p256_add adds two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 *   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_p256_add(out1 *[8]uint32, arg1 *[8]uint32, arg2 *[8]uint32) {
  var x1 uint32
  var x2 uint32
  x1, x2 = bits.Add32((arg1[0]), (arg2[0]), 0x0)
  var x3 uint32
  var x4 uint32
  x3, x4 = bits.Add32((arg1[1]), (arg2[1]), x2)
  var x5 uint32
  var x6 uint32
  x5, x6 = bits.Add32((arg1[2]), (arg2[2]), x4)
  var x7 uint32
  var x8 uint32
  x7, x8 = bits.Add32((arg1[3]), (arg2[3]), x6)
  var x9 uint32
  var x10 uint32
  x9, x10 = bits.Add32((arg1[4]), (arg2[4]), x8)
  var x11 uint32
  var x12 uint32
  x11, x12 = bits.Add32((arg1[5]), (arg2[5]), x10)
  var x13 uint32
  var x14 uint32
  x13, x14 = bits.Add32((arg1[6]), (arg2[6]), x12)
  var x15 uint32
  var x16 uint32
  x15, x16 = bits.Add32((arg1[7]), (arg2[7]), x14)
  var x17 uint32
  var x18 uint32
  x17, x18 = bits.Sub32(x1, 0xffffffff, uint32(0x0))
  var x19 uint32
  var x20 uint32
  x19, x20 = bits.Sub32(x3, 0xffffffff, x18)
  var x21 uint32
  var x22 uint32
  x21, x22 = bits.Sub32(x5, 0xffffffff, x20)
  var x23 uint32
  var x24 uint32
  x23, x24 = bits.Sub32(x7, uint32(0x0), x22)
  var x25 uint32
  var x26 uint32
  x25, x26 = bits.Sub32(x9, uint32(0x0), x24)
  var x27 uint32
  var x28 uint32
  x27, x28 = bits.Sub32(x11, uint32(0x0), x26)
  var x29 uint32
  var x30 uint32
  x29, x30 = bits.Sub32(x13, 0x1, x28)
  var x31 uint32
  var x32 uint32
  x31, x32 = bits.Sub32(x15, 0xffffffff, x30)
  var x34 uint32
  _, x34 = bits.Sub32(x16, uint32(0x0), x32)
  var x35 uint32
  fiat_p256_cmovznz_u32(&x35, x34, x17, x1)
  var x36 uint32
  fiat_p256_cmovznz_u32(&x36, x34, x19, x3)
  var x37 uint32
  fiat_p256_cmovznz_u32(&x37, x34, x21, x5)
  var x38 uint32
  fiat_p256_cmovznz_u32(&x38, x34, x23, x7)
  var x39 uint32
  fiat_p256_cmovznz_u32(&x39, x34, x25, x9)
  var x40 uint32
  fiat_p256_cmovznz_u32(&x40, x34, x27, x11)
  var x41 uint32
  fiat_p256_cmovznz_u32(&x41, x34, x29, x13)
  var x42 uint32
  fiat_p256_cmovznz_u32(&x42, x34, x31, x15)
  out1[0] = x35
  out1[1] = x36
  out1[2] = x37
  out1[3] = x38
  out1[4] = x39
  out1[5] = x40
  out1[6] = x41
  out1[7] = x42
}

/*
 * The function fiat_p256_sub subtracts two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 *   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_p256_sub(out1 *[8]uint32, arg1 *[8]uint32, arg2 *[8]uint32) {
  var x1 uint32
  var x2 uint32
  x1, x2 = bits.Sub32((arg1[0]), (arg2[0]), 0x0)
  var x3 uint32
  var x4 uint32
  x3, x4 = bits.Sub32((arg1[1]), (arg2[1]), x2)
  var x5 uint32
  var x6 uint32
  x5, x6 = bits.Sub32((arg1[2]), (arg2[2]), x4)
  var x7 uint32
  var x8 uint32
  x7, x8 = bits.Sub32((arg1[3]), (arg2[3]), x6)
  var x9 uint32
  var x10 uint32
  x9, x10 = bits.Sub32((arg1[4]), (arg2[4]), x8)
  var x11 uint32
  var x12 uint32
  x11, x12 = bits.Sub32((arg1[5]), (arg2[5]), x10)
  var x13 uint32
  var x14 uint32
  x13, x14 = bits.Sub32((arg1[6]), (arg2[6]), x12)
  var x15 uint32
  var x16 uint32
  x15, x16 = bits.Sub32((arg1[7]), (arg2[7]), x14)
  var x17 uint32
  fiat_p256_cmovznz_u32(&x17, x16, uint32(0x0), 0xffffffff)
  var x18 uint32
  var x19 uint32
  x18, x19 = bits.Add32(x1, (x17 & 0xffffffff), 0x0)
  var x20 uint32
  var x21 uint32
  x20, x21 = bits.Add32(x3, (x17 & 0xffffffff), x19)
  var x22 uint32
  var x23 uint32
  x22, x23 = bits.Add32(x5, (x17 & 0xffffffff), x21)
  var x24 uint32
  var x25 uint32
  x24, x25 = bits.Add32(x7, uint32(0x0), x23)
  var x26 uint32
  var x27 uint32
  x26, x27 = bits.Add32(x9, uint32(0x0), x25)
  var x28 uint32
  var x29 uint32
  x28, x29 = bits.Add32(x11, uint32(0x0), x27)
  var x30 uint32
  var x31 uint32
  x30, x31 = bits.Add32(x13, (x17 & 0x1), x29)
  var x32 uint32
  x32, _ = bits.Add32(x15, (x17 & 0xffffffff), x31)
  out1[0] = x18
  out1[1] = x20
  out1[2] = x22
  out1[3] = x24
  out1[4] = x26
  out1[5] = x28
  out1[6] = x30
  out1[7] = x32
}

/*
 * The function fiat_p256_opp negates a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_p256_opp(out1 *[8]uint32, arg1 *[8]uint32) {
  var x1 uint32
  var x2 uint32
  x1, x2 = bits.Sub32(uint32(0x0), (arg1[0]), 0x0)
  var x3 uint32
  var x4 uint32
  x3, x4 = bits.Sub32(uint32(0x0), (arg1[1]), x2)
  var x5 uint32
  var x6 uint32
  x5, x6 = bits.Sub32(uint32(0x0), (arg1[2]), x4)
  var x7 uint32
  var x8 uint32
  x7, x8 = bits.Sub32(uint32(0x0), (arg1[3]), x6)
  var x9 uint32
  var x10 uint32
  x9, x10 = bits.Sub32(uint32(0x0), (arg1[4]), x8)
  var x11 uint32
  var x12 uint32
  x11, x12 = bits.Sub32(uint32(0x0), (arg1[5]), x10)
  var x13 uint32
  var x14 uint32
  x13, x14 = bits.Sub32(uint32(0x0), (arg1[6]), x12)
  var x15 uint32
  var x16 uint32
  x15, x16 = bits.Sub32(uint32(0x0), (arg1[7]), x14)
  var x17 uint32
  fiat_p256_cmovznz_u32(&x17, x16, uint32(0x0), 0xffffffff)
  var x18 uint32
  var x19 uint32
  x18, x19 = bits.Add32(x1, (x17 & 0xffffffff), 0x0)
  var x20 uint32
  var x21 uint32
  x20, x21 = bits.Add32(x3, (x17 & 0xffffffff), x19)
  var x22 uint32
  var x23 uint32
  x22, x23 = bits.Add32(x5, (x17 & 0xffffffff), x21)
  var x24 uint32
  var x25 uint32
  x24, x25 = bits.Add32(x7, uint32(0x0), x23)
  var x26 uint32
  var x27 uint32
  x26, x27 = bits.Add32(x9, uint32(0x0), x25)
  var x28 uint32
  var x29 uint32
  x28, x29 = bits.Add32(x11, uint32(0x0), x27)
  var x30 uint32
  var x31 uint32
  x30, x31 = bits.Add32(x13, (x17 & 0x1), x29)
  var x32 uint32
  x32, _ = bits.Add32(x15, (x17 & 0xffffffff), x31)
  out1[0] = x18
  out1[1] = x20
  out1[2] = x22
  out1[3] = x24
  out1[4] = x26
  out1[5] = x28
  out1[6] = x30
  out1[7] = x32
}

/*
 * The function fiat_p256_from_montgomery translates a field element out of the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = (eval arg1 * ((2^32)⁻¹ mod m)^8) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_p256_from_montgomery(out1 *[8]uint32, arg1 *[8]uint32) {
  var x1 uint32 = (arg1[0])
  var x2 uint32
  var x3 uint32
  x2, x3 = bits.Mul32(x1, 0xffffffff)
  var x4 uint32
  var x5 uint32
  x4, x5 = bits.Mul32(x1, 0xffffffff)
  var x6 uint32
  var x7 uint32
  x6, x7 = bits.Mul32(x1, 0xffffffff)
  var x8 uint32
  var x9 uint32
  x8, x9 = bits.Mul32(x1, 0xffffffff)
  var x10 uint32
  var x11 uint32
  x10, x11 = bits.Add32(x9, x6, 0x0)
  var x12 uint32
  var x13 uint32
  x12, x13 = bits.Add32(x7, x4, x11)
  var x15 uint32
  _, x15 = bits.Add32(x1, x8, 0x0)
  var x16 uint32
  var x17 uint32
  x16, x17 = bits.Add32(uint32(0x0), x10, x15)
  var x18 uint32
  var x19 uint32
  x18, x19 = bits.Add32(uint32(0x0), x12, x17)
  var x20 uint32
  var x21 uint32
  x20, x21 = bits.Add32(uint32(0x0), (x13 + x5), x19)
  var x22 uint32
  var x23 uint32
  x22, x23 = bits.Add32(x16, (arg1[1]), 0x0)
  var x24 uint32
  var x25 uint32
  x24, x25 = bits.Add32(x18, uint32(0x0), x23)
  var x26 uint32
  var x27 uint32
  x26, x27 = bits.Add32(x20, uint32(0x0), x25)
  var x28 uint32
  var x29 uint32
  x28, x29 = bits.Mul32(x22, 0xffffffff)
  var x30 uint32
  var x31 uint32
  x30, x31 = bits.Mul32(x22, 0xffffffff)
  var x32 uint32
  var x33 uint32
  x32, x33 = bits.Mul32(x22, 0xffffffff)
  var x34 uint32
  var x35 uint32
  x34, x35 = bits.Mul32(x22, 0xffffffff)
  var x36 uint32
  var x37 uint32
  x36, x37 = bits.Add32(x35, x32, 0x0)
  var x38 uint32
  var x39 uint32
  x38, x39 = bits.Add32(x33, x30, x37)
  var x41 uint32
  _, x41 = bits.Add32(x22, x34, 0x0)
  var x42 uint32
  var x43 uint32
  x42, x43 = bits.Add32(x24, x36, x41)
  var x44 uint32
  var x45 uint32
  x44, x45 = bits.Add32(x26, x38, x43)
  var x46 uint32
  var x47 uint32
  x46, x47 = bits.Add32((x27 + x21), (x39 + x31), x45)
  var x48 uint32
  var x49 uint32
  x48, x49 = bits.Add32(x2, x22, 0x0)
  var x50 uint32
  var x51 uint32
  x50, x51 = bits.Add32(x3, x28, x49)
  var x52 uint32
  var x53 uint32
  x52, x53 = bits.Add32(x42, (arg1[2]), 0x0)
  var x54 uint32
  var x55 uint32
  x54, x55 = bits.Add32(x44, uint32(0x0), x53)
  var x56 uint32
  var x57 uint32
  x56, x57 = bits.Add32(x46, uint32(0x0), x55)
  var x58 uint32
  var x59 uint32
  x58, x59 = bits.Mul32(x52, 0xffffffff)
  var x60 uint32
  var x61 uint32
  x60, x61 = bits.Mul32(x52, 0xffffffff)
  var x62 uint32
  var x63 uint32
  x62, x63 = bits.Mul32(x52, 0xffffffff)
  var x64 uint32
  var x65 uint32
  x64, x65 = bits.Mul32(x52, 0xffffffff)
  var x66 uint32
  var x67 uint32
  x66, x67 = bits.Add32(x65, x62, 0x0)
  var x68 uint32
  var x69 uint32
  x68, x69 = bits.Add32(x63, x60, x67)
  var x71 uint32
  _, x71 = bits.Add32(x52, x64, 0x0)
  var x72 uint32
  var x73 uint32
  x72, x73 = bits.Add32(x54, x66, x71)
  var x74 uint32
  var x75 uint32
  x74, x75 = bits.Add32(x56, x68, x73)
  var x76 uint32
  var x77 uint32
  x76, x77 = bits.Add32((x57 + x47), (x69 + x61), x75)
  var x78 uint32
  var x79 uint32
  x78, x79 = bits.Add32(x1, uint32(0x0), x77)
  var x80 uint32
  var x81 uint32
  x80, x81 = bits.Add32(x48, uint32(0x0), x79)
  var x82 uint32
  var x83 uint32
  x82, x83 = bits.Add32(x50, x52, x81)
  var x84 uint32
  var x85 uint32
  x84, x85 = bits.Add32((x51 + x29), x58, x83)
  var x86 uint32
  var x87 uint32
  x86, x87 = bits.Add32(x72, (arg1[3]), 0x0)
  var x88 uint32
  var x89 uint32
  x88, x89 = bits.Add32(x74, uint32(0x0), x87)
  var x90 uint32
  var x91 uint32
  x90, x91 = bits.Add32(x76, uint32(0x0), x89)
  var x92 uint32
  var x93 uint32
  x92, x93 = bits.Add32(x78, uint32(0x0), x91)
  var x94 uint32
  var x95 uint32
  x94, x95 = bits.Add32(x80, uint32(0x0), x93)
  var x96 uint32
  var x97 uint32
  x96, x97 = bits.Add32(x82, uint32(0x0), x95)
  var x98 uint32
  var x99 uint32
  x98, x99 = bits.Add32(x84, uint32(0x0), x97)
  var x100 uint32
  var x101 uint32
  x100, x101 = bits.Add32((x85 + x59), uint32(0x0), x99)
  var x102 uint32
  var x103 uint32
  x102, x103 = bits.Mul32(x86, 0xffffffff)
  var x104 uint32
  var x105 uint32
  x104, x105 = bits.Mul32(x86, 0xffffffff)
  var x106 uint32
  var x107 uint32
  x106, x107 = bits.Mul32(x86, 0xffffffff)
  var x108 uint32
  var x109 uint32
  x108, x109 = bits.Mul32(x86, 0xffffffff)
  var x110 uint32
  var x111 uint32
  x110, x111 = bits.Add32(x109, x106, 0x0)
  var x112 uint32
  var x113 uint32
  x112, x113 = bits.Add32(x107, x104, x111)
  var x115 uint32
  _, x115 = bits.Add32(x86, x108, 0x0)
  var x116 uint32
  var x117 uint32
  x116, x117 = bits.Add32(x88, x110, x115)
  var x118 uint32
  var x119 uint32
  x118, x119 = bits.Add32(x90, x112, x117)
  var x120 uint32
  var x121 uint32
  x120, x121 = bits.Add32(x92, (x113 + x105), x119)
  var x122 uint32
  var x123 uint32
  x122, x123 = bits.Add32(x94, uint32(0x0), x121)
  var x124 uint32
  var x125 uint32
  x124, x125 = bits.Add32(x96, uint32(0x0), x123)
  var x126 uint32
  var x127 uint32
  x126, x127 = bits.Add32(x98, x86, x125)
  var x128 uint32
  var x129 uint32
  x128, x129 = bits.Add32(x100, x102, x127)
  var x130 uint32
  var x131 uint32
  x130, x131 = bits.Add32(x101, x103, x129)
  var x132 uint32
  var x133 uint32
  x132, x133 = bits.Add32(x116, (arg1[4]), 0x0)
  var x134 uint32
  var x135 uint32
  x134, x135 = bits.Add32(x118, uint32(0x0), x133)
  var x136 uint32
  var x137 uint32
  x136, x137 = bits.Add32(x120, uint32(0x0), x135)
  var x138 uint32
  var x139 uint32
  x138, x139 = bits.Add32(x122, uint32(0x0), x137)
  var x140 uint32
  var x141 uint32
  x140, x141 = bits.Add32(x124, uint32(0x0), x139)
  var x142 uint32
  var x143 uint32
  x142, x143 = bits.Add32(x126, uint32(0x0), x141)
  var x144 uint32
  var x145 uint32
  x144, x145 = bits.Add32(x128, uint32(0x0), x143)
  var x146 uint32
  var x147 uint32
  x146, x147 = bits.Add32(x130, uint32(0x0), x145)
  var x148 uint32
  var x149 uint32
  x148, x149 = bits.Mul32(x132, 0xffffffff)
  var x150 uint32
  var x151 uint32
  x150, x151 = bits.Mul32(x132, 0xffffffff)
  var x152 uint32
  var x153 uint32
  x152, x153 = bits.Mul32(x132, 0xffffffff)
  var x154 uint32
  var x155 uint32
  x154, x155 = bits.Mul32(x132, 0xffffffff)
  var x156 uint32
  var x157 uint32
  x156, x157 = bits.Add32(x155, x152, 0x0)
  var x158 uint32
  var x159 uint32
  x158, x159 = bits.Add32(x153, x150, x157)
  var x161 uint32
  _, x161 = bits.Add32(x132, x154, 0x0)
  var x162 uint32
  var x163 uint32
  x162, x163 = bits.Add32(x134, x156, x161)
  var x164 uint32
  var x165 uint32
  x164, x165 = bits.Add32(x136, x158, x163)
  var x166 uint32
  var x167 uint32
  x166, x167 = bits.Add32(x138, (x159 + x151), x165)
  var x168 uint32
  var x169 uint32
  x168, x169 = bits.Add32(x140, uint32(0x0), x167)
  var x170 uint32
  var x171 uint32
  x170, x171 = bits.Add32(x142, uint32(0x0), x169)
  var x172 uint32
  var x173 uint32
  x172, x173 = bits.Add32(x144, x132, x171)
  var x174 uint32
  var x175 uint32
  x174, x175 = bits.Add32(x146, x148, x173)
  var x176 uint32
  var x177 uint32
  x176, x177 = bits.Add32((x147 + x131), x149, x175)
  var x178 uint32
  var x179 uint32
  x178, x179 = bits.Add32(x162, (arg1[5]), 0x0)
  var x180 uint32
  var x181 uint32
  x180, x181 = bits.Add32(x164, uint32(0x0), x179)
  var x182 uint32
  var x183 uint32
  x182, x183 = bits.Add32(x166, uint32(0x0), x181)
  var x184 uint32
  var x185 uint32
  x184, x185 = bits.Add32(x168, uint32(0x0), x183)
  var x186 uint32
  var x187 uint32
  x186, x187 = bits.Add32(x170, uint32(0x0), x185)
  var x188 uint32
  var x189 uint32
  x188, x189 = bits.Add32(x172, uint32(0x0), x187)
  var x190 uint32
  var x191 uint32
  x190, x191 = bits.Add32(x174, uint32(0x0), x189)
  var x192 uint32
  var x193 uint32
  x192, x193 = bits.Add32(x176, uint32(0x0), x191)
  var x194 uint32
  var x195 uint32
  x194, x195 = bits.Mul32(x178, 0xffffffff)
  var x196 uint32
  var x197 uint32
  x196, x197 = bits.Mul32(x178, 0xffffffff)
  var x198 uint32
  var x199 uint32
  x198, x199 = bits.Mul32(x178, 0xffffffff)
  var x200 uint32
  var x201 uint32
  x200, x201 = bits.Mul32(x178, 0xffffffff)
  var x202 uint32
  var x203 uint32
  x202, x203 = bits.Add32(x201, x198, 0x0)
  var x204 uint32
  var x205 uint32
  x204, x205 = bits.Add32(x199, x196, x203)
  var x207 uint32
  _, x207 = bits.Add32(x178, x200, 0x0)
  var x208 uint32
  var x209 uint32
  x208, x209 = bits.Add32(x180, x202, x207)
  var x210 uint32
  var x211 uint32
  x210, x211 = bits.Add32(x182, x204, x209)
  var x212 uint32
  var x213 uint32
  x212, x213 = bits.Add32(x184, (x205 + x197), x211)
  var x214 uint32
  var x215 uint32
  x214, x215 = bits.Add32(x186, uint32(0x0), x213)
  var x216 uint32
  var x217 uint32
  x216, x217 = bits.Add32(x188, uint32(0x0), x215)
  var x218 uint32
  var x219 uint32
  x218, x219 = bits.Add32(x190, x178, x217)
  var x220 uint32
  var x221 uint32
  x220, x221 = bits.Add32(x192, x194, x219)
  var x222 uint32
  var x223 uint32
  x222, x223 = bits.Add32((x193 + x177), x195, x221)
  var x224 uint32
  var x225 uint32
  x224, x225 = bits.Add32(x208, (arg1[6]), 0x0)
  var x226 uint32
  var x227 uint32
  x226, x227 = bits.Add32(x210, uint32(0x0), x225)
  var x228 uint32
  var x229 uint32
  x228, x229 = bits.Add32(x212, uint32(0x0), x227)
  var x230 uint32
  var x231 uint32
  x230, x231 = bits.Add32(x214, uint32(0x0), x229)
  var x232 uint32
  var x233 uint32
  x232, x233 = bits.Add32(x216, uint32(0x0), x231)
  var x234 uint32
  var x235 uint32
  x234, x235 = bits.Add32(x218, uint32(0x0), x233)
  var x236 uint32
  var x237 uint32
  x236, x237 = bits.Add32(x220, uint32(0x0), x235)
  var x238 uint32
  var x239 uint32
  x238, x239 = bits.Add32(x222, uint32(0x0), x237)
  var x240 uint32
  var x241 uint32
  x240, x241 = bits.Mul32(x224, 0xffffffff)
  var x242 uint32
  var x243 uint32
  x242, x243 = bits.Mul32(x224, 0xffffffff)
  var x244 uint32
  var x245 uint32
  x244, x245 = bits.Mul32(x224, 0xffffffff)
  var x246 uint32
  var x247 uint32
  x246, x247 = bits.Mul32(x224, 0xffffffff)
  var x248 uint32
  var x249 uint32
  x248, x249 = bits.Add32(x247, x244, 0x0)
  var x250 uint32
  var x251 uint32
  x250, x251 = bits.Add32(x245, x242, x249)
  var x253 uint32
  _, x253 = bits.Add32(x224, x246, 0x0)
  var x254 uint32
  var x255 uint32
  x254, x255 = bits.Add32(x226, x248, x253)
  var x256 uint32
  var x257 uint32
  x256, x257 = bits.Add32(x228, x250, x255)
  var x258 uint32
  var x259 uint32
  x258, x259 = bits.Add32(x230, (x251 + x243), x257)
  var x260 uint32
  var x261 uint32
  x260, x261 = bits.Add32(x232, uint32(0x0), x259)
  var x262 uint32
  var x263 uint32
  x262, x263 = bits.Add32(x234, uint32(0x0), x261)
  var x264 uint32
  var x265 uint32
  x264, x265 = bits.Add32(x236, x224, x263)
  var x266 uint32
  var x267 uint32
  x266, x267 = bits.Add32(x238, x240, x265)
  var x268 uint32
  var x269 uint32
  x268, x269 = bits.Add32((x239 + x223), x241, x267)
  var x270 uint32
  var x271 uint32
  x270, x271 = bits.Add32(x254, (arg1[7]), 0x0)
  var x272 uint32
  var x273 uint32
  x272, x273 = bits.Add32(x256, uint32(0x0), x271)
  var x274 uint32
  var x275 uint32
  x274, x275 = bits.Add32(x258, uint32(0x0), x273)
  var x276 uint32
  var x277 uint32
  x276, x277 = bits.Add32(x260, uint32(0x0), x275)
  var x278 uint32
  var x279 uint32
  x278, x279 = bits.Add32(x262, uint32(0x0), x277)
  var x280 uint32
  var x281 uint32
  x280, x281 = bits.Add32(x264, uint32(0x0), x279)
  var x282 uint32
  var x283 uint32
  x282, x283 = bits.Add32(x266, uint32(0x0), x281)
  var x284 uint32
  var x285 uint32
  x284, x285 = bits.Add32(x268, uint32(0x0), x283)
  var x286 uint32
  var x287 uint32
  x286, x287 = bits.Mul32(x270, 0xffffffff)
  var x288 uint32
  var x289 uint32
  x288, x289 = bits.Mul32(x270, 0xffffffff)
  var x290 uint32
  var x291 uint32
  x290, x291 = bits.Mul32(x270, 0xffffffff)
  var x292 uint32
  var x293 uint32
  x292, x293 = bits.Mul32(x270, 0xffffffff)
  var x294 uint32
  var x295 uint32
  x294, x295 = bits.Add32(x293, x290, 0x0)
  var x296 uint32
  var x297 uint32
  x296, x297 = bits.Add32(x291, x288, x295)
  var x299 uint32
  _, x299 = bits.Add32(x270, x292, 0x0)
  var x300 uint32
  var x301 uint32
  x300, x301 = bits.Add32(x272, x294, x299)
  var x302 uint32
  var x303 uint32
  x302, x303 = bits.Add32(x274, x296, x301)
  var x304 uint32
  var x305 uint32
  x304, x305 = bits.Add32(x276, (x297 + x289), x303)
  var x306 uint32
  var x307 uint32
  x306, x307 = bits.Add32(x278, uint32(0x0), x305)
  var x308 uint32
  var x309 uint32
  x308, x309 = bits.Add32(x280, uint32(0x0), x307)
  var x310 uint32
  var x311 uint32
  x310, x311 = bits.Add32(x282, x270, x309)
  var x312 uint32
  var x313 uint32
  x312, x313 = bits.Add32(x284, x286, x311)
  var x314 uint32
  var x315 uint32
  x314, x315 = bits.Add32((x285 + x269), x287, x313)
  var x316 uint32
  var x317 uint32
  x316, x317 = bits.Sub32(x300, 0xffffffff, uint32(0x0))
  var x318 uint32
  var x319 uint32
  x318, x319 = bits.Sub32(x302, 0xffffffff, x317)
  var x320 uint32
  var x321 uint32
  x320, x321 = bits.Sub32(x304, 0xffffffff, x319)
  var x322 uint32
  var x323 uint32
  x322, x323 = bits.Sub32(x306, uint32(0x0), x321)
  var x324 uint32
  var x325 uint32
  x324, x325 = bits.Sub32(x308, uint32(0x0), x323)
  var x326 uint32
  var x327 uint32
  x326, x327 = bits.Sub32(x310, uint32(0x0), x325)
  var x328 uint32
  var x329 uint32
  x328, x329 = bits.Sub32(x312, 0x1, x327)
  var x330 uint32
  var x331 uint32
  x330, x331 = bits.Sub32(x314, 0xffffffff, x329)
  var x333 uint32
  _, x333 = bits.Sub32(x315, uint32(0x0), x331)
  var x334 uint32
  fiat_p256_cmovznz_u32(&x334, x333, x316, x300)
  var x335 uint32
  fiat_p256_cmovznz_u32(&x335, x333, x318, x302)
  var x336 uint32
  fiat_p256_cmovznz_u32(&x336, x333, x320, x304)
  var x337 uint32
  fiat_p256_cmovznz_u32(&x337, x333, x322, x306)
  var x338 uint32
  fiat_p256_cmovznz_u32(&x338, x333, x324, x308)
  var x339 uint32
  fiat_p256_cmovznz_u32(&x339, x333, x326, x310)
  var x340 uint32
  fiat_p256_cmovznz_u32(&x340, x333, x328, x312)
  var x341 uint32
  fiat_p256_cmovznz_u32(&x341, x333, x330, x314)
  out1[0] = x334
  out1[1] = x335
  out1[2] = x336
  out1[3] = x337
  out1[4] = x338
  out1[5] = x339
  out1[6] = x340
  out1[7] = x341
}

/*
 * The function fiat_p256_nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffff]
 */
/*inline*/
func fiat_p256_nonzero(out1 *uint32, arg1 *[8]uint32) {
  var x1 uint32 = ((arg1[0]) | ((arg1[1]) | ((arg1[2]) | ((arg1[3]) | ((arg1[4]) | ((arg1[5]) | ((arg1[6]) | ((arg1[7]) | uint32(0x0)))))))))
  *out1 = x1
}

/*
 * The function fiat_p256_selectznz is a multi-limb conditional select.
 * Postconditions:
 *   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 *   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_p256_selectznz(out1 *[8]uint32, arg1 uint32, arg2 *[8]uint32, arg3 *[8]uint32) {
  var x1 uint32
  fiat_p256_cmovznz_u32(&x1, arg1, (arg2[0]), (arg3[0]))
  var x2 uint32
  fiat_p256_cmovznz_u32(&x2, arg1, (arg2[1]), (arg3[1]))
  var x3 uint32
  fiat_p256_cmovznz_u32(&x3, arg1, (arg2[2]), (arg3[2]))
  var x4 uint32
  fiat_p256_cmovznz_u32(&x4, arg1, (arg2[3]), (arg3[3]))
  var x5 uint32
  fiat_p256_cmovznz_u32(&x5, arg1, (arg2[4]), (arg3[4]))
  var x6 uint32
  fiat_p256_cmovznz_u32(&x6, arg1, (arg2[5]), (arg3[5]))
  var x7 uint32
  fiat_p256_cmovznz_u32(&x7, arg1, (arg2[6]), (arg3[6]))
  var x8 uint32
  fiat_p256_cmovznz_u32(&x8, arg1, (arg2[7]), (arg3[7]))
  out1[0] = x1
  out1[1] = x2
  out1[2] = x3
  out1[3] = x4
  out1[4] = x5
  out1[5] = x6
  out1[6] = x7
  out1[7] = x8
}

/*
 * The function fiat_p256_to_bytes serializes a field element in the Montgomery domain to bytes in little-endian order.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..31]
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
 */
/*inline*/
func fiat_p256_to_bytes(out1 *[32]uint32, arg1 *[8]uint32) {
  var x1 uint32 = (arg1[7])
  var x2 uint32 = (arg1[6])
  var x3 uint32 = (arg1[5])
  var x4 uint32 = (arg1[4])
  var x5 uint32 = (arg1[3])
  var x6 uint32 = (arg1[2])
  var x7 uint32 = (arg1[1])
  var x8 uint32 = (arg1[0])
  var x9 uint32 = (x8 >> 8)
  var x10 uint32 = (x8 & 0xff)
  var x11 uint32 = (x9 >> 8)
  var x12 uint32 = (x9 & 0xff)
  var x13 uint32 = (x11 >> 8)
  var x14 uint32 = (x11 & 0xff)
  var x15 uint32 = (x13 & 0xff)
  var x16 uint32 = (x7 >> 8)
  var x17 uint32 = (x7 & 0xff)
  var x18 uint32 = (x16 >> 8)
  var x19 uint32 = (x16 & 0xff)
  var x20 uint32 = (x18 >> 8)
  var x21 uint32 = (x18 & 0xff)
  var x22 uint32 = (x20 & 0xff)
  var x23 uint32 = (x6 >> 8)
  var x24 uint32 = (x6 & 0xff)
  var x25 uint32 = (x23 >> 8)
  var x26 uint32 = (x23 & 0xff)
  var x27 uint32 = (x25 >> 8)
  var x28 uint32 = (x25 & 0xff)
  var x29 uint32 = (x27 & 0xff)
  var x30 uint32 = (x5 >> 8)
  var x31 uint32 = (x5 & 0xff)
  var x32 uint32 = (x30 >> 8)
  var x33 uint32 = (x30 & 0xff)
  var x34 uint32 = (x32 >> 8)
  var x35 uint32 = (x32 & 0xff)
  var x36 uint32 = (x34 & 0xff)
  var x37 uint32 = (x4 >> 8)
  var x38 uint32 = (x4 & 0xff)
  var x39 uint32 = (x37 >> 8)
  var x40 uint32 = (x37 & 0xff)
  var x41 uint32 = (x39 >> 8)
  var x42 uint32 = (x39 & 0xff)
  var x43 uint32 = (x41 & 0xff)
  var x44 uint32 = (x3 >> 8)
  var x45 uint32 = (x3 & 0xff)
  var x46 uint32 = (x44 >> 8)
  var x47 uint32 = (x44 & 0xff)
  var x48 uint32 = (x46 >> 8)
  var x49 uint32 = (x46 & 0xff)
  var x50 uint32 = (x48 & 0xff)
  var x51 uint32 = (x2 >> 8)
  var x52 uint32 = (x2 & 0xff)
  var x53 uint32 = (x51 >> 8)
  var x54 uint32 = (x51 & 0xff)
  var x55 uint32 = (x53 >> 8)
  var x56 uint32 = (x53 & 0xff)
  var x57 uint32 = (x55 & 0xff)
  var x58 uint32 = (x1 >> 8)
  var x59 uint32 = (x1 & 0xff)
  var x60 uint32 = (x58 >> 8)
  var x61 uint32 = (x58 & 0xff)
  var x62 uint32 = (x60 >> 8)
  var x63 uint32 = (x60 & 0xff)
  out1[0] = x10
  out1[1] = x12
  out1[2] = x14
  out1[3] = x15
  out1[4] = x17
  out1[5] = x19
  out1[6] = x21
  out1[7] = x22
  out1[8] = x24
  out1[9] = x26
  out1[10] = x28
  out1[11] = x29
  out1[12] = x31
  out1[13] = x33
  out1[14] = x35
  out1[15] = x36
  out1[16] = x38
  out1[17] = x40
  out1[18] = x42
  out1[19] = x43
  out1[20] = x45
  out1[21] = x47
  out1[22] = x49
  out1[23] = x50
  out1[24] = x52
  out1[25] = x54
  out1[26] = x56
  out1[27] = x57
  out1[28] = x59
  out1[29] = x61
  out1[30] = x63
  out1[31] = x62
}

/*
 * The function fiat_p256_from_bytes deserializes a field element in the Montgomery domain from bytes in little-endian order.
 * Preconditions:
 *   0 ≤ bytes_eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = bytes_eval arg1 mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_p256_from_bytes(out1 *[8]uint32, arg1 *[32]uint32) {
  var x1 uint32 = ((arg1[31]) << 24)
  var x2 uint32 = ((arg1[30]) << 16)
  var x3 uint32 = ((arg1[29]) << 8)
  var x4 uint32 = (arg1[28])
  var x5 uint32 = ((arg1[27]) << 24)
  var x6 uint32 = ((arg1[26]) << 16)
  var x7 uint32 = ((arg1[25]) << 8)
  var x8 uint32 = (arg1[24])
  var x9 uint32 = ((arg1[23]) << 24)
  var x10 uint32 = ((arg1[22]) << 16)
  var x11 uint32 = ((arg1[21]) << 8)
  var x12 uint32 = (arg1[20])
  var x13 uint32 = ((arg1[19]) << 24)
  var x14 uint32 = ((arg1[18]) << 16)
  var x15 uint32 = ((arg1[17]) << 8)
  var x16 uint32 = (arg1[16])
  var x17 uint32 = ((arg1[15]) << 24)
  var x18 uint32 = ((arg1[14]) << 16)
  var x19 uint32 = ((arg1[13]) << 8)
  var x20 uint32 = (arg1[12])
  var x21 uint32 = ((arg1[11]) << 24)
  var x22 uint32 = ((arg1[10]) << 16)
  var x23 uint32 = ((arg1[9]) << 8)
  var x24 uint32 = (arg1[8])
  var x25 uint32 = ((arg1[7]) << 24)
  var x26 uint32 = ((arg1[6]) << 16)
  var x27 uint32 = ((arg1[5]) << 8)
  var x28 uint32 = (arg1[4])
  var x29 uint32 = ((arg1[3]) << 24)
  var x30 uint32 = ((arg1[2]) << 16)
  var x31 uint32 = ((arg1[1]) << 8)
  var x32 uint32 = (arg1[0])
  var x33 uint32 = (x32 + (x31 + (x30 + x29)))
  var x34 uint32 = (x33 & 0xffffffff)
  var x35 uint32 = (x4 + (x3 + (x2 + x1)))
  var x36 uint32 = (x8 + (x7 + (x6 + x5)))
  var x37 uint32 = (x12 + (x11 + (x10 + x9)))
  var x38 uint32 = (x16 + (x15 + (x14 + x13)))
  var x39 uint32 = (x20 + (x19 + (x18 + x17)))
  var x40 uint32 = (x24 + (x23 + (x22 + x21)))
  var x41 uint32 = (x28 + (x27 + (x26 + x25)))
  var x42 uint32 = (x41 & 0xffffffff)
  var x43 uint32 = (x40 & 0xffffffff)
  var x44 uint32 = (x39 & 0xffffffff)
  var x45 uint32 = (x38 & 0xffffffff)
  var x46 uint32 = (x37 & 0xffffffff)
  var x47 uint32 = (x36 & 0xffffffff)
  out1[0] = x34
  out1[1] = x42
  out1[2] = x43
  out1[3] = x44
  out1[4] = x45
  out1[5] = x46
  out1[6] = x47
  out1[7] = x35
}

