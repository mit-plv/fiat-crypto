/* Autogenerated: src/ExtractionOCaml/word_by_word_montgomery --lang=Go --no-wide-int --cmovznz-by-mul --widen-carry --widen-bytes secp256k1 '2^256 - 2^32 - 977' 64 mul square add sub opp from_montgomery nonzero selectznz to_bytes from_bytes */
/* curve description: secp256k1 */
/* requested operations: mul, square, add, sub, opp, from_montgomery, nonzero, selectznz, to_bytes, from_bytes */
/* m = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f (from "2^256 - 2^32 - 977") */
/* machine_wordsize = 64 (from "64") */
/*                                                                    */
/* NOTE: In addition to the bounds specified above each function, all */
/*   functions synthesized for this Montgomery arithmetic require the */
/*   input to be strictly less than the prime modulus (m), and also   */
/*   require the input to be in the unique saturated representation.  */
/*   All functions also ensure that these two properties are true of  */
/*   return values.                                                   */

package fiat_secp256k1

import "math/bits"


/*
 * The function fiat_secp256k1_cmovznz_u64 is a single-word conditional move.
 * Postconditions:
 *   out1 = (if arg1 = 0 then arg2 else arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 *   arg3: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 */
/*inline*/
func fiat_secp256k1_cmovznz_u64(out1 *uint64, arg1 uint64, arg2 uint64, arg3 uint64) {
  var x1 uint64 = (arg1 * 0xffffffffffffffff)
  var x2 uint64 = ((x1 & arg3) | ((^x1) & arg2))
  *out1 = x2
}

/*
 * The function fiat_secp256k1_mul multiplies two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_secp256k1_mul(out1 *[4]uint64, arg1 *[4]uint64, arg2 *[4]uint64) {
  var x1 uint64 = (arg1[1])
  var x2 uint64 = (arg1[2])
  var x3 uint64 = (arg1[3])
  var x4 uint64 = (arg1[0])
  var x5 uint64
  var x6 uint64
  x5, x6 = bits.Mul64(x4, (arg2[3]))
  var x7 uint64
  var x8 uint64
  x7, x8 = bits.Mul64(x4, (arg2[2]))
  var x9 uint64
  var x10 uint64
  x9, x10 = bits.Mul64(x4, (arg2[1]))
  var x11 uint64
  var x12 uint64
  x11, x12 = bits.Mul64(x4, (arg2[0]))
  var x13 uint64
  var x14 uint64
  x13, x14 = bits.Add64(x12, x9, 0x0)
  var x15 uint64
  var x16 uint64
  x15, x16 = bits.Add64(x10, x7, x14)
  var x17 uint64
  var x18 uint64
  x17, x18 = bits.Add64(x8, x5, x16)
  var x19 uint64
  x19, _ = bits.Add64(x6, uint64(0x0), x18)
  var x21 uint64
  x21, _ = bits.Mul64(x11, 0xd838091dd2253531)
  var x23 uint64
  var x24 uint64
  x23, x24 = bits.Mul64(x21, 0xffffffffffffffff)
  var x25 uint64
  var x26 uint64
  x25, x26 = bits.Mul64(x21, 0xffffffffffffffff)
  var x27 uint64
  var x28 uint64
  x27, x28 = bits.Mul64(x21, 0xffffffffffffffff)
  var x29 uint64
  var x30 uint64
  x29, x30 = bits.Mul64(x21, 0xfffffffefffffc2f)
  var x31 uint64
  var x32 uint64
  x31, x32 = bits.Add64(x30, x27, 0x0)
  var x33 uint64
  var x34 uint64
  x33, x34 = bits.Add64(x28, x25, x32)
  var x35 uint64
  var x36 uint64
  x35, x36 = bits.Add64(x26, x23, x34)
  var x37 uint64
  x37, _ = bits.Add64(x24, uint64(0x0), x36)
  var x40 uint64
  _, x40 = bits.Add64(x11, x29, 0x0)
  var x41 uint64
  var x42 uint64
  x41, x42 = bits.Add64(x13, x31, x40)
  var x43 uint64
  var x44 uint64
  x43, x44 = bits.Add64(x15, x33, x42)
  var x45 uint64
  var x46 uint64
  x45, x46 = bits.Add64(x17, x35, x44)
  var x47 uint64
  var x48 uint64
  x47, x48 = bits.Add64(x19, x37, x46)
  var x49 uint64
  x49, _ = bits.Add64(uint64(0x0), uint64(0x0), x48)
  var x51 uint64
  var x52 uint64
  x51, x52 = bits.Mul64(x1, (arg2[3]))
  var x53 uint64
  var x54 uint64
  x53, x54 = bits.Mul64(x1, (arg2[2]))
  var x55 uint64
  var x56 uint64
  x55, x56 = bits.Mul64(x1, (arg2[1]))
  var x57 uint64
  var x58 uint64
  x57, x58 = bits.Mul64(x1, (arg2[0]))
  var x59 uint64
  var x60 uint64
  x59, x60 = bits.Add64(x58, x55, 0x0)
  var x61 uint64
  var x62 uint64
  x61, x62 = bits.Add64(x56, x53, x60)
  var x63 uint64
  var x64 uint64
  x63, x64 = bits.Add64(x54, x51, x62)
  var x65 uint64
  x65, _ = bits.Add64(x52, uint64(0x0), x64)
  var x67 uint64
  var x68 uint64
  x67, x68 = bits.Add64(x41, x57, 0x0)
  var x69 uint64
  var x70 uint64
  x69, x70 = bits.Add64(x43, x59, x68)
  var x71 uint64
  var x72 uint64
  x71, x72 = bits.Add64(x45, x61, x70)
  var x73 uint64
  var x74 uint64
  x73, x74 = bits.Add64(x47, x63, x72)
  var x75 uint64
  var x76 uint64
  x75, x76 = bits.Add64(x49, x65, x74)
  var x77 uint64
  x77, _ = bits.Mul64(x67, 0xd838091dd2253531)
  var x79 uint64
  var x80 uint64
  x79, x80 = bits.Mul64(x77, 0xffffffffffffffff)
  var x81 uint64
  var x82 uint64
  x81, x82 = bits.Mul64(x77, 0xffffffffffffffff)
  var x83 uint64
  var x84 uint64
  x83, x84 = bits.Mul64(x77, 0xffffffffffffffff)
  var x85 uint64
  var x86 uint64
  x85, x86 = bits.Mul64(x77, 0xfffffffefffffc2f)
  var x87 uint64
  var x88 uint64
  x87, x88 = bits.Add64(x86, x83, 0x0)
  var x89 uint64
  var x90 uint64
  x89, x90 = bits.Add64(x84, x81, x88)
  var x91 uint64
  var x92 uint64
  x91, x92 = bits.Add64(x82, x79, x90)
  var x93 uint64
  x93, _ = bits.Add64(x80, uint64(0x0), x92)
  var x96 uint64
  _, x96 = bits.Add64(x67, x85, 0x0)
  var x97 uint64
  var x98 uint64
  x97, x98 = bits.Add64(x69, x87, x96)
  var x99 uint64
  var x100 uint64
  x99, x100 = bits.Add64(x71, x89, x98)
  var x101 uint64
  var x102 uint64
  x101, x102 = bits.Add64(x73, x91, x100)
  var x103 uint64
  var x104 uint64
  x103, x104 = bits.Add64(x75, x93, x102)
  var x105 uint64
  x105, _ = bits.Add64(x76, uint64(0x0), x104)
  var x107 uint64
  var x108 uint64
  x107, x108 = bits.Mul64(x2, (arg2[3]))
  var x109 uint64
  var x110 uint64
  x109, x110 = bits.Mul64(x2, (arg2[2]))
  var x111 uint64
  var x112 uint64
  x111, x112 = bits.Mul64(x2, (arg2[1]))
  var x113 uint64
  var x114 uint64
  x113, x114 = bits.Mul64(x2, (arg2[0]))
  var x115 uint64
  var x116 uint64
  x115, x116 = bits.Add64(x114, x111, 0x0)
  var x117 uint64
  var x118 uint64
  x117, x118 = bits.Add64(x112, x109, x116)
  var x119 uint64
  var x120 uint64
  x119, x120 = bits.Add64(x110, x107, x118)
  var x121 uint64
  x121, _ = bits.Add64(x108, uint64(0x0), x120)
  var x123 uint64
  var x124 uint64
  x123, x124 = bits.Add64(x97, x113, 0x0)
  var x125 uint64
  var x126 uint64
  x125, x126 = bits.Add64(x99, x115, x124)
  var x127 uint64
  var x128 uint64
  x127, x128 = bits.Add64(x101, x117, x126)
  var x129 uint64
  var x130 uint64
  x129, x130 = bits.Add64(x103, x119, x128)
  var x131 uint64
  var x132 uint64
  x131, x132 = bits.Add64(x105, x121, x130)
  var x133 uint64
  x133, _ = bits.Mul64(x123, 0xd838091dd2253531)
  var x135 uint64
  var x136 uint64
  x135, x136 = bits.Mul64(x133, 0xffffffffffffffff)
  var x137 uint64
  var x138 uint64
  x137, x138 = bits.Mul64(x133, 0xffffffffffffffff)
  var x139 uint64
  var x140 uint64
  x139, x140 = bits.Mul64(x133, 0xffffffffffffffff)
  var x141 uint64
  var x142 uint64
  x141, x142 = bits.Mul64(x133, 0xfffffffefffffc2f)
  var x143 uint64
  var x144 uint64
  x143, x144 = bits.Add64(x142, x139, 0x0)
  var x145 uint64
  var x146 uint64
  x145, x146 = bits.Add64(x140, x137, x144)
  var x147 uint64
  var x148 uint64
  x147, x148 = bits.Add64(x138, x135, x146)
  var x149 uint64
  x149, _ = bits.Add64(x136, uint64(0x0), x148)
  var x152 uint64
  _, x152 = bits.Add64(x123, x141, 0x0)
  var x153 uint64
  var x154 uint64
  x153, x154 = bits.Add64(x125, x143, x152)
  var x155 uint64
  var x156 uint64
  x155, x156 = bits.Add64(x127, x145, x154)
  var x157 uint64
  var x158 uint64
  x157, x158 = bits.Add64(x129, x147, x156)
  var x159 uint64
  var x160 uint64
  x159, x160 = bits.Add64(x131, x149, x158)
  var x161 uint64
  x161, _ = bits.Add64(x132, uint64(0x0), x160)
  var x163 uint64
  var x164 uint64
  x163, x164 = bits.Mul64(x3, (arg2[3]))
  var x165 uint64
  var x166 uint64
  x165, x166 = bits.Mul64(x3, (arg2[2]))
  var x167 uint64
  var x168 uint64
  x167, x168 = bits.Mul64(x3, (arg2[1]))
  var x169 uint64
  var x170 uint64
  x169, x170 = bits.Mul64(x3, (arg2[0]))
  var x171 uint64
  var x172 uint64
  x171, x172 = bits.Add64(x170, x167, 0x0)
  var x173 uint64
  var x174 uint64
  x173, x174 = bits.Add64(x168, x165, x172)
  var x175 uint64
  var x176 uint64
  x175, x176 = bits.Add64(x166, x163, x174)
  var x177 uint64
  x177, _ = bits.Add64(x164, uint64(0x0), x176)
  var x179 uint64
  var x180 uint64
  x179, x180 = bits.Add64(x153, x169, 0x0)
  var x181 uint64
  var x182 uint64
  x181, x182 = bits.Add64(x155, x171, x180)
  var x183 uint64
  var x184 uint64
  x183, x184 = bits.Add64(x157, x173, x182)
  var x185 uint64
  var x186 uint64
  x185, x186 = bits.Add64(x159, x175, x184)
  var x187 uint64
  var x188 uint64
  x187, x188 = bits.Add64(x161, x177, x186)
  var x189 uint64
  x189, _ = bits.Mul64(x179, 0xd838091dd2253531)
  var x191 uint64
  var x192 uint64
  x191, x192 = bits.Mul64(x189, 0xffffffffffffffff)
  var x193 uint64
  var x194 uint64
  x193, x194 = bits.Mul64(x189, 0xffffffffffffffff)
  var x195 uint64
  var x196 uint64
  x195, x196 = bits.Mul64(x189, 0xffffffffffffffff)
  var x197 uint64
  var x198 uint64
  x197, x198 = bits.Mul64(x189, 0xfffffffefffffc2f)
  var x199 uint64
  var x200 uint64
  x199, x200 = bits.Add64(x198, x195, 0x0)
  var x201 uint64
  var x202 uint64
  x201, x202 = bits.Add64(x196, x193, x200)
  var x203 uint64
  var x204 uint64
  x203, x204 = bits.Add64(x194, x191, x202)
  var x205 uint64
  x205, _ = bits.Add64(x192, uint64(0x0), x204)
  var x208 uint64
  _, x208 = bits.Add64(x179, x197, 0x0)
  var x209 uint64
  var x210 uint64
  x209, x210 = bits.Add64(x181, x199, x208)
  var x211 uint64
  var x212 uint64
  x211, x212 = bits.Add64(x183, x201, x210)
  var x213 uint64
  var x214 uint64
  x213, x214 = bits.Add64(x185, x203, x212)
  var x215 uint64
  var x216 uint64
  x215, x216 = bits.Add64(x187, x205, x214)
  var x217 uint64
  x217, _ = bits.Add64(x188, uint64(0x0), x216)
  var x219 uint64
  var x220 uint64
  x219, x220 = bits.Sub64(x209, 0xfffffffefffffc2f, uint64(0x0))
  var x221 uint64
  var x222 uint64
  x221, x222 = bits.Sub64(x211, 0xffffffffffffffff, x220)
  var x223 uint64
  var x224 uint64
  x223, x224 = bits.Sub64(x213, 0xffffffffffffffff, x222)
  var x225 uint64
  var x226 uint64
  x225, x226 = bits.Sub64(x215, 0xffffffffffffffff, x224)
  var x228 uint64
  _, x228 = bits.Sub64(x217, uint64(0x0), x226)
  var x229 uint64
  fiat_secp256k1_cmovznz_u64(&x229, x228, x219, x209)
  var x230 uint64
  fiat_secp256k1_cmovznz_u64(&x230, x228, x221, x211)
  var x231 uint64
  fiat_secp256k1_cmovznz_u64(&x231, x228, x223, x213)
  var x232 uint64
  fiat_secp256k1_cmovznz_u64(&x232, x228, x225, x215)
  out1[0] = x229
  out1[1] = x230
  out1[2] = x231
  out1[3] = x232
}

/*
 * The function fiat_secp256k1_square squares a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_secp256k1_square(out1 *[4]uint64, arg1 *[4]uint64) {
  var x1 uint64 = (arg1[1])
  var x2 uint64 = (arg1[2])
  var x3 uint64 = (arg1[3])
  var x4 uint64 = (arg1[0])
  var x5 uint64
  var x6 uint64
  x5, x6 = bits.Mul64(x4, (arg1[3]))
  var x7 uint64
  var x8 uint64
  x7, x8 = bits.Mul64(x4, (arg1[2]))
  var x9 uint64
  var x10 uint64
  x9, x10 = bits.Mul64(x4, (arg1[1]))
  var x11 uint64
  var x12 uint64
  x11, x12 = bits.Mul64(x4, (arg1[0]))
  var x13 uint64
  var x14 uint64
  x13, x14 = bits.Add64(x12, x9, 0x0)
  var x15 uint64
  var x16 uint64
  x15, x16 = bits.Add64(x10, x7, x14)
  var x17 uint64
  var x18 uint64
  x17, x18 = bits.Add64(x8, x5, x16)
  var x19 uint64
  x19, _ = bits.Add64(x6, uint64(0x0), x18)
  var x21 uint64
  x21, _ = bits.Mul64(x11, 0xd838091dd2253531)
  var x23 uint64
  var x24 uint64
  x23, x24 = bits.Mul64(x21, 0xffffffffffffffff)
  var x25 uint64
  var x26 uint64
  x25, x26 = bits.Mul64(x21, 0xffffffffffffffff)
  var x27 uint64
  var x28 uint64
  x27, x28 = bits.Mul64(x21, 0xffffffffffffffff)
  var x29 uint64
  var x30 uint64
  x29, x30 = bits.Mul64(x21, 0xfffffffefffffc2f)
  var x31 uint64
  var x32 uint64
  x31, x32 = bits.Add64(x30, x27, 0x0)
  var x33 uint64
  var x34 uint64
  x33, x34 = bits.Add64(x28, x25, x32)
  var x35 uint64
  var x36 uint64
  x35, x36 = bits.Add64(x26, x23, x34)
  var x37 uint64
  x37, _ = bits.Add64(x24, uint64(0x0), x36)
  var x40 uint64
  _, x40 = bits.Add64(x11, x29, 0x0)
  var x41 uint64
  var x42 uint64
  x41, x42 = bits.Add64(x13, x31, x40)
  var x43 uint64
  var x44 uint64
  x43, x44 = bits.Add64(x15, x33, x42)
  var x45 uint64
  var x46 uint64
  x45, x46 = bits.Add64(x17, x35, x44)
  var x47 uint64
  var x48 uint64
  x47, x48 = bits.Add64(x19, x37, x46)
  var x49 uint64
  x49, _ = bits.Add64(uint64(0x0), uint64(0x0), x48)
  var x51 uint64
  var x52 uint64
  x51, x52 = bits.Mul64(x1, (arg1[3]))
  var x53 uint64
  var x54 uint64
  x53, x54 = bits.Mul64(x1, (arg1[2]))
  var x55 uint64
  var x56 uint64
  x55, x56 = bits.Mul64(x1, (arg1[1]))
  var x57 uint64
  var x58 uint64
  x57, x58 = bits.Mul64(x1, (arg1[0]))
  var x59 uint64
  var x60 uint64
  x59, x60 = bits.Add64(x58, x55, 0x0)
  var x61 uint64
  var x62 uint64
  x61, x62 = bits.Add64(x56, x53, x60)
  var x63 uint64
  var x64 uint64
  x63, x64 = bits.Add64(x54, x51, x62)
  var x65 uint64
  x65, _ = bits.Add64(x52, uint64(0x0), x64)
  var x67 uint64
  var x68 uint64
  x67, x68 = bits.Add64(x41, x57, 0x0)
  var x69 uint64
  var x70 uint64
  x69, x70 = bits.Add64(x43, x59, x68)
  var x71 uint64
  var x72 uint64
  x71, x72 = bits.Add64(x45, x61, x70)
  var x73 uint64
  var x74 uint64
  x73, x74 = bits.Add64(x47, x63, x72)
  var x75 uint64
  var x76 uint64
  x75, x76 = bits.Add64(x49, x65, x74)
  var x77 uint64
  x77, _ = bits.Mul64(x67, 0xd838091dd2253531)
  var x79 uint64
  var x80 uint64
  x79, x80 = bits.Mul64(x77, 0xffffffffffffffff)
  var x81 uint64
  var x82 uint64
  x81, x82 = bits.Mul64(x77, 0xffffffffffffffff)
  var x83 uint64
  var x84 uint64
  x83, x84 = bits.Mul64(x77, 0xffffffffffffffff)
  var x85 uint64
  var x86 uint64
  x85, x86 = bits.Mul64(x77, 0xfffffffefffffc2f)
  var x87 uint64
  var x88 uint64
  x87, x88 = bits.Add64(x86, x83, 0x0)
  var x89 uint64
  var x90 uint64
  x89, x90 = bits.Add64(x84, x81, x88)
  var x91 uint64
  var x92 uint64
  x91, x92 = bits.Add64(x82, x79, x90)
  var x93 uint64
  x93, _ = bits.Add64(x80, uint64(0x0), x92)
  var x96 uint64
  _, x96 = bits.Add64(x67, x85, 0x0)
  var x97 uint64
  var x98 uint64
  x97, x98 = bits.Add64(x69, x87, x96)
  var x99 uint64
  var x100 uint64
  x99, x100 = bits.Add64(x71, x89, x98)
  var x101 uint64
  var x102 uint64
  x101, x102 = bits.Add64(x73, x91, x100)
  var x103 uint64
  var x104 uint64
  x103, x104 = bits.Add64(x75, x93, x102)
  var x105 uint64
  x105, _ = bits.Add64(x76, uint64(0x0), x104)
  var x107 uint64
  var x108 uint64
  x107, x108 = bits.Mul64(x2, (arg1[3]))
  var x109 uint64
  var x110 uint64
  x109, x110 = bits.Mul64(x2, (arg1[2]))
  var x111 uint64
  var x112 uint64
  x111, x112 = bits.Mul64(x2, (arg1[1]))
  var x113 uint64
  var x114 uint64
  x113, x114 = bits.Mul64(x2, (arg1[0]))
  var x115 uint64
  var x116 uint64
  x115, x116 = bits.Add64(x114, x111, 0x0)
  var x117 uint64
  var x118 uint64
  x117, x118 = bits.Add64(x112, x109, x116)
  var x119 uint64
  var x120 uint64
  x119, x120 = bits.Add64(x110, x107, x118)
  var x121 uint64
  x121, _ = bits.Add64(x108, uint64(0x0), x120)
  var x123 uint64
  var x124 uint64
  x123, x124 = bits.Add64(x97, x113, 0x0)
  var x125 uint64
  var x126 uint64
  x125, x126 = bits.Add64(x99, x115, x124)
  var x127 uint64
  var x128 uint64
  x127, x128 = bits.Add64(x101, x117, x126)
  var x129 uint64
  var x130 uint64
  x129, x130 = bits.Add64(x103, x119, x128)
  var x131 uint64
  var x132 uint64
  x131, x132 = bits.Add64(x105, x121, x130)
  var x133 uint64
  x133, _ = bits.Mul64(x123, 0xd838091dd2253531)
  var x135 uint64
  var x136 uint64
  x135, x136 = bits.Mul64(x133, 0xffffffffffffffff)
  var x137 uint64
  var x138 uint64
  x137, x138 = bits.Mul64(x133, 0xffffffffffffffff)
  var x139 uint64
  var x140 uint64
  x139, x140 = bits.Mul64(x133, 0xffffffffffffffff)
  var x141 uint64
  var x142 uint64
  x141, x142 = bits.Mul64(x133, 0xfffffffefffffc2f)
  var x143 uint64
  var x144 uint64
  x143, x144 = bits.Add64(x142, x139, 0x0)
  var x145 uint64
  var x146 uint64
  x145, x146 = bits.Add64(x140, x137, x144)
  var x147 uint64
  var x148 uint64
  x147, x148 = bits.Add64(x138, x135, x146)
  var x149 uint64
  x149, _ = bits.Add64(x136, uint64(0x0), x148)
  var x152 uint64
  _, x152 = bits.Add64(x123, x141, 0x0)
  var x153 uint64
  var x154 uint64
  x153, x154 = bits.Add64(x125, x143, x152)
  var x155 uint64
  var x156 uint64
  x155, x156 = bits.Add64(x127, x145, x154)
  var x157 uint64
  var x158 uint64
  x157, x158 = bits.Add64(x129, x147, x156)
  var x159 uint64
  var x160 uint64
  x159, x160 = bits.Add64(x131, x149, x158)
  var x161 uint64
  x161, _ = bits.Add64(x132, uint64(0x0), x160)
  var x163 uint64
  var x164 uint64
  x163, x164 = bits.Mul64(x3, (arg1[3]))
  var x165 uint64
  var x166 uint64
  x165, x166 = bits.Mul64(x3, (arg1[2]))
  var x167 uint64
  var x168 uint64
  x167, x168 = bits.Mul64(x3, (arg1[1]))
  var x169 uint64
  var x170 uint64
  x169, x170 = bits.Mul64(x3, (arg1[0]))
  var x171 uint64
  var x172 uint64
  x171, x172 = bits.Add64(x170, x167, 0x0)
  var x173 uint64
  var x174 uint64
  x173, x174 = bits.Add64(x168, x165, x172)
  var x175 uint64
  var x176 uint64
  x175, x176 = bits.Add64(x166, x163, x174)
  var x177 uint64
  x177, _ = bits.Add64(x164, uint64(0x0), x176)
  var x179 uint64
  var x180 uint64
  x179, x180 = bits.Add64(x153, x169, 0x0)
  var x181 uint64
  var x182 uint64
  x181, x182 = bits.Add64(x155, x171, x180)
  var x183 uint64
  var x184 uint64
  x183, x184 = bits.Add64(x157, x173, x182)
  var x185 uint64
  var x186 uint64
  x185, x186 = bits.Add64(x159, x175, x184)
  var x187 uint64
  var x188 uint64
  x187, x188 = bits.Add64(x161, x177, x186)
  var x189 uint64
  x189, _ = bits.Mul64(x179, 0xd838091dd2253531)
  var x191 uint64
  var x192 uint64
  x191, x192 = bits.Mul64(x189, 0xffffffffffffffff)
  var x193 uint64
  var x194 uint64
  x193, x194 = bits.Mul64(x189, 0xffffffffffffffff)
  var x195 uint64
  var x196 uint64
  x195, x196 = bits.Mul64(x189, 0xffffffffffffffff)
  var x197 uint64
  var x198 uint64
  x197, x198 = bits.Mul64(x189, 0xfffffffefffffc2f)
  var x199 uint64
  var x200 uint64
  x199, x200 = bits.Add64(x198, x195, 0x0)
  var x201 uint64
  var x202 uint64
  x201, x202 = bits.Add64(x196, x193, x200)
  var x203 uint64
  var x204 uint64
  x203, x204 = bits.Add64(x194, x191, x202)
  var x205 uint64
  x205, _ = bits.Add64(x192, uint64(0x0), x204)
  var x208 uint64
  _, x208 = bits.Add64(x179, x197, 0x0)
  var x209 uint64
  var x210 uint64
  x209, x210 = bits.Add64(x181, x199, x208)
  var x211 uint64
  var x212 uint64
  x211, x212 = bits.Add64(x183, x201, x210)
  var x213 uint64
  var x214 uint64
  x213, x214 = bits.Add64(x185, x203, x212)
  var x215 uint64
  var x216 uint64
  x215, x216 = bits.Add64(x187, x205, x214)
  var x217 uint64
  x217, _ = bits.Add64(x188, uint64(0x0), x216)
  var x219 uint64
  var x220 uint64
  x219, x220 = bits.Sub64(x209, 0xfffffffefffffc2f, uint64(0x0))
  var x221 uint64
  var x222 uint64
  x221, x222 = bits.Sub64(x211, 0xffffffffffffffff, x220)
  var x223 uint64
  var x224 uint64
  x223, x224 = bits.Sub64(x213, 0xffffffffffffffff, x222)
  var x225 uint64
  var x226 uint64
  x225, x226 = bits.Sub64(x215, 0xffffffffffffffff, x224)
  var x228 uint64
  _, x228 = bits.Sub64(x217, uint64(0x0), x226)
  var x229 uint64
  fiat_secp256k1_cmovznz_u64(&x229, x228, x219, x209)
  var x230 uint64
  fiat_secp256k1_cmovznz_u64(&x230, x228, x221, x211)
  var x231 uint64
  fiat_secp256k1_cmovznz_u64(&x231, x228, x223, x213)
  var x232 uint64
  fiat_secp256k1_cmovznz_u64(&x232, x228, x225, x215)
  out1[0] = x229
  out1[1] = x230
  out1[2] = x231
  out1[3] = x232
}

/*
 * The function fiat_secp256k1_add adds two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_secp256k1_add(out1 *[4]uint64, arg1 *[4]uint64, arg2 *[4]uint64) {
  var x1 uint64
  var x2 uint64
  x1, x2 = bits.Add64((arg1[0]), (arg2[0]), 0x0)
  var x3 uint64
  var x4 uint64
  x3, x4 = bits.Add64((arg1[1]), (arg2[1]), x2)
  var x5 uint64
  var x6 uint64
  x5, x6 = bits.Add64((arg1[2]), (arg2[2]), x4)
  var x7 uint64
  var x8 uint64
  x7, x8 = bits.Add64((arg1[3]), (arg2[3]), x6)
  var x9 uint64
  var x10 uint64
  x9, x10 = bits.Sub64(x1, 0xfffffffefffffc2f, uint64(0x0))
  var x11 uint64
  var x12 uint64
  x11, x12 = bits.Sub64(x3, 0xffffffffffffffff, x10)
  var x13 uint64
  var x14 uint64
  x13, x14 = bits.Sub64(x5, 0xffffffffffffffff, x12)
  var x15 uint64
  var x16 uint64
  x15, x16 = bits.Sub64(x7, 0xffffffffffffffff, x14)
  var x18 uint64
  _, x18 = bits.Sub64(x8, uint64(0x0), x16)
  var x19 uint64
  fiat_secp256k1_cmovznz_u64(&x19, x18, x9, x1)
  var x20 uint64
  fiat_secp256k1_cmovznz_u64(&x20, x18, x11, x3)
  var x21 uint64
  fiat_secp256k1_cmovznz_u64(&x21, x18, x13, x5)
  var x22 uint64
  fiat_secp256k1_cmovznz_u64(&x22, x18, x15, x7)
  out1[0] = x19
  out1[1] = x20
  out1[2] = x21
  out1[3] = x22
}

/*
 * The function fiat_secp256k1_sub subtracts two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_secp256k1_sub(out1 *[4]uint64, arg1 *[4]uint64, arg2 *[4]uint64) {
  var x1 uint64
  var x2 uint64
  x1, x2 = bits.Sub64((arg1[0]), (arg2[0]), 0x0)
  var x3 uint64
  var x4 uint64
  x3, x4 = bits.Sub64((arg1[1]), (arg2[1]), x2)
  var x5 uint64
  var x6 uint64
  x5, x6 = bits.Sub64((arg1[2]), (arg2[2]), x4)
  var x7 uint64
  var x8 uint64
  x7, x8 = bits.Sub64((arg1[3]), (arg2[3]), x6)
  var x9 uint64
  fiat_secp256k1_cmovznz_u64(&x9, x8, uint64(0x0), 0xffffffffffffffff)
  var x10 uint64
  var x11 uint64
  x10, x11 = bits.Add64(x1, (x9 & 0xfffffffefffffc2f), 0x0)
  var x12 uint64
  var x13 uint64
  x12, x13 = bits.Add64(x3, (x9 & 0xffffffffffffffff), x11)
  var x14 uint64
  var x15 uint64
  x14, x15 = bits.Add64(x5, (x9 & 0xffffffffffffffff), x13)
  var x16 uint64
  x16, _ = bits.Add64(x7, (x9 & 0xffffffffffffffff), x15)
  out1[0] = x10
  out1[1] = x12
  out1[2] = x14
  out1[3] = x16
}

/*
 * The function fiat_secp256k1_opp negates a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_secp256k1_opp(out1 *[4]uint64, arg1 *[4]uint64) {
  var x1 uint64
  var x2 uint64
  x1, x2 = bits.Sub64(uint64(0x0), (arg1[0]), 0x0)
  var x3 uint64
  var x4 uint64
  x3, x4 = bits.Sub64(uint64(0x0), (arg1[1]), x2)
  var x5 uint64
  var x6 uint64
  x5, x6 = bits.Sub64(uint64(0x0), (arg1[2]), x4)
  var x7 uint64
  var x8 uint64
  x7, x8 = bits.Sub64(uint64(0x0), (arg1[3]), x6)
  var x9 uint64
  fiat_secp256k1_cmovznz_u64(&x9, x8, uint64(0x0), 0xffffffffffffffff)
  var x10 uint64
  var x11 uint64
  x10, x11 = bits.Add64(x1, (x9 & 0xfffffffefffffc2f), 0x0)
  var x12 uint64
  var x13 uint64
  x12, x13 = bits.Add64(x3, (x9 & 0xffffffffffffffff), x11)
  var x14 uint64
  var x15 uint64
  x14, x15 = bits.Add64(x5, (x9 & 0xffffffffffffffff), x13)
  var x16 uint64
  x16, _ = bits.Add64(x7, (x9 & 0xffffffffffffffff), x15)
  out1[0] = x10
  out1[1] = x12
  out1[2] = x14
  out1[3] = x16
}

/*
 * The function fiat_secp256k1_from_montgomery translates a field element out of the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = (eval arg1 * ((2^64)⁻¹ mod m)^4) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_secp256k1_from_montgomery(out1 *[4]uint64, arg1 *[4]uint64) {
  var x1 uint64 = (arg1[0])
  var x2 uint64
  x2, _ = bits.Mul64(x1, 0xd838091dd2253531)
  var x4 uint64
  var x5 uint64
  x4, x5 = bits.Mul64(x2, 0xffffffffffffffff)
  var x6 uint64
  var x7 uint64
  x6, x7 = bits.Mul64(x2, 0xffffffffffffffff)
  var x8 uint64
  var x9 uint64
  x8, x9 = bits.Mul64(x2, 0xffffffffffffffff)
  var x10 uint64
  var x11 uint64
  x10, x11 = bits.Mul64(x2, 0xfffffffefffffc2f)
  var x12 uint64
  var x13 uint64
  x12, x13 = bits.Add64(x11, x8, 0x0)
  var x14 uint64
  var x15 uint64
  x14, x15 = bits.Add64(x9, x6, x13)
  var x16 uint64
  var x17 uint64
  x16, x17 = bits.Add64(x7, x4, x15)
  var x19 uint64
  _, x19 = bits.Add64(x1, x10, 0x0)
  var x20 uint64
  var x21 uint64
  x20, x21 = bits.Add64(uint64(0x0), x12, x19)
  var x22 uint64
  var x23 uint64
  x22, x23 = bits.Add64(uint64(0x0), x14, x21)
  var x24 uint64
  var x25 uint64
  x24, x25 = bits.Add64(uint64(0x0), x16, x23)
  var x26 uint64
  x26, _ = bits.Add64(x5, uint64(0x0), x17)
  var x28 uint64
  var x29 uint64
  x28, x29 = bits.Add64(uint64(0x0), x26, x25)
  var x30 uint64
  var x31 uint64
  x30, x31 = bits.Add64(x20, (arg1[1]), 0x0)
  var x32 uint64
  var x33 uint64
  x32, x33 = bits.Add64(x22, uint64(0x0), x31)
  var x34 uint64
  var x35 uint64
  x34, x35 = bits.Add64(x24, uint64(0x0), x33)
  var x36 uint64
  var x37 uint64
  x36, x37 = bits.Add64(x28, uint64(0x0), x35)
  var x38 uint64
  x38, _ = bits.Mul64(x30, 0xd838091dd2253531)
  var x40 uint64
  var x41 uint64
  x40, x41 = bits.Mul64(x38, 0xffffffffffffffff)
  var x42 uint64
  var x43 uint64
  x42, x43 = bits.Mul64(x38, 0xffffffffffffffff)
  var x44 uint64
  var x45 uint64
  x44, x45 = bits.Mul64(x38, 0xffffffffffffffff)
  var x46 uint64
  var x47 uint64
  x46, x47 = bits.Mul64(x38, 0xfffffffefffffc2f)
  var x48 uint64
  var x49 uint64
  x48, x49 = bits.Add64(x47, x44, 0x0)
  var x50 uint64
  var x51 uint64
  x50, x51 = bits.Add64(x45, x42, x49)
  var x52 uint64
  var x53 uint64
  x52, x53 = bits.Add64(x43, x40, x51)
  var x55 uint64
  _, x55 = bits.Add64(x30, x46, 0x0)
  var x56 uint64
  var x57 uint64
  x56, x57 = bits.Add64(x32, x48, x55)
  var x58 uint64
  var x59 uint64
  x58, x59 = bits.Add64(x34, x50, x57)
  var x60 uint64
  var x61 uint64
  x60, x61 = bits.Add64(x36, x52, x59)
  var x62 uint64
  x62, _ = bits.Add64(x41, uint64(0x0), x53)
  var x64 uint64
  x64, _ = bits.Add64(uint64(0x0), uint64(0x0), x29)
  var x66 uint64
  x66, _ = bits.Add64(x64, uint64(0x0), x37)
  var x68 uint64
  var x69 uint64
  x68, x69 = bits.Add64(x66, x62, x61)
  var x70 uint64
  var x71 uint64
  x70, x71 = bits.Add64(x56, (arg1[2]), 0x0)
  var x72 uint64
  var x73 uint64
  x72, x73 = bits.Add64(x58, uint64(0x0), x71)
  var x74 uint64
  var x75 uint64
  x74, x75 = bits.Add64(x60, uint64(0x0), x73)
  var x76 uint64
  var x77 uint64
  x76, x77 = bits.Add64(x68, uint64(0x0), x75)
  var x78 uint64
  x78, _ = bits.Mul64(x70, 0xd838091dd2253531)
  var x80 uint64
  var x81 uint64
  x80, x81 = bits.Mul64(x78, 0xffffffffffffffff)
  var x82 uint64
  var x83 uint64
  x82, x83 = bits.Mul64(x78, 0xffffffffffffffff)
  var x84 uint64
  var x85 uint64
  x84, x85 = bits.Mul64(x78, 0xffffffffffffffff)
  var x86 uint64
  var x87 uint64
  x86, x87 = bits.Mul64(x78, 0xfffffffefffffc2f)
  var x88 uint64
  var x89 uint64
  x88, x89 = bits.Add64(x87, x84, 0x0)
  var x90 uint64
  var x91 uint64
  x90, x91 = bits.Add64(x85, x82, x89)
  var x92 uint64
  var x93 uint64
  x92, x93 = bits.Add64(x83, x80, x91)
  var x95 uint64
  _, x95 = bits.Add64(x70, x86, 0x0)
  var x96 uint64
  var x97 uint64
  x96, x97 = bits.Add64(x72, x88, x95)
  var x98 uint64
  var x99 uint64
  x98, x99 = bits.Add64(x74, x90, x97)
  var x100 uint64
  var x101 uint64
  x100, x101 = bits.Add64(x76, x92, x99)
  var x102 uint64
  x102, _ = bits.Add64(x81, uint64(0x0), x93)
  var x104 uint64
  x104, _ = bits.Add64(uint64(0x0), uint64(0x0), x69)
  var x106 uint64
  x106, _ = bits.Add64(x104, uint64(0x0), x77)
  var x108 uint64
  var x109 uint64
  x108, x109 = bits.Add64(x106, x102, x101)
  var x110 uint64
  var x111 uint64
  x110, x111 = bits.Add64(x96, (arg1[3]), 0x0)
  var x112 uint64
  var x113 uint64
  x112, x113 = bits.Add64(x98, uint64(0x0), x111)
  var x114 uint64
  var x115 uint64
  x114, x115 = bits.Add64(x100, uint64(0x0), x113)
  var x116 uint64
  var x117 uint64
  x116, x117 = bits.Add64(x108, uint64(0x0), x115)
  var x118 uint64
  x118, _ = bits.Mul64(x110, 0xd838091dd2253531)
  var x120 uint64
  var x121 uint64
  x120, x121 = bits.Mul64(x118, 0xffffffffffffffff)
  var x122 uint64
  var x123 uint64
  x122, x123 = bits.Mul64(x118, 0xffffffffffffffff)
  var x124 uint64
  var x125 uint64
  x124, x125 = bits.Mul64(x118, 0xffffffffffffffff)
  var x126 uint64
  var x127 uint64
  x126, x127 = bits.Mul64(x118, 0xfffffffefffffc2f)
  var x128 uint64
  var x129 uint64
  x128, x129 = bits.Add64(x127, x124, 0x0)
  var x130 uint64
  var x131 uint64
  x130, x131 = bits.Add64(x125, x122, x129)
  var x132 uint64
  var x133 uint64
  x132, x133 = bits.Add64(x123, x120, x131)
  var x135 uint64
  _, x135 = bits.Add64(x110, x126, 0x0)
  var x136 uint64
  var x137 uint64
  x136, x137 = bits.Add64(x112, x128, x135)
  var x138 uint64
  var x139 uint64
  x138, x139 = bits.Add64(x114, x130, x137)
  var x140 uint64
  var x141 uint64
  x140, x141 = bits.Add64(x116, x132, x139)
  var x142 uint64
  x142, _ = bits.Add64(x121, uint64(0x0), x133)
  var x144 uint64
  x144, _ = bits.Add64(uint64(0x0), uint64(0x0), x109)
  var x146 uint64
  x146, _ = bits.Add64(x144, uint64(0x0), x117)
  var x148 uint64
  var x149 uint64
  x148, x149 = bits.Add64(x146, x142, x141)
  var x150 uint64
  var x151 uint64
  x150, x151 = bits.Sub64(x136, 0xfffffffefffffc2f, uint64(0x0))
  var x152 uint64
  var x153 uint64
  x152, x153 = bits.Sub64(x138, 0xffffffffffffffff, x151)
  var x154 uint64
  var x155 uint64
  x154, x155 = bits.Sub64(x140, 0xffffffffffffffff, x153)
  var x156 uint64
  var x157 uint64
  x156, x157 = bits.Sub64(x148, 0xffffffffffffffff, x155)
  var x158 uint64
  x158, _ = bits.Add64(uint64(0x0), uint64(0x0), x149)
  var x161 uint64
  _, x161 = bits.Sub64(x158, uint64(0x0), x157)
  var x162 uint64
  fiat_secp256k1_cmovznz_u64(&x162, x161, x150, x136)
  var x163 uint64
  fiat_secp256k1_cmovznz_u64(&x163, x161, x152, x138)
  var x164 uint64
  fiat_secp256k1_cmovznz_u64(&x164, x161, x154, x140)
  var x165 uint64
  fiat_secp256k1_cmovznz_u64(&x165, x161, x156, x148)
  out1[0] = x162
  out1[1] = x163
  out1[2] = x164
  out1[3] = x165
}

/*
 * The function fiat_secp256k1_nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 */
/*inline*/
func fiat_secp256k1_nonzero(out1 *uint64, arg1 *[4]uint64) {
  var x1 uint64 = ((arg1[0]) | ((arg1[1]) | ((arg1[2]) | ((arg1[3]) | uint64(0x0)))))
  *out1 = x1
}

/*
 * The function fiat_secp256k1_selectznz is a multi-limb conditional select.
 * Postconditions:
 *   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_secp256k1_selectznz(out1 *[4]uint64, arg1 uint64, arg2 *[4]uint64, arg3 *[4]uint64) {
  var x1 uint64
  fiat_secp256k1_cmovznz_u64(&x1, arg1, (arg2[0]), (arg3[0]))
  var x2 uint64
  fiat_secp256k1_cmovznz_u64(&x2, arg1, (arg2[1]), (arg3[1]))
  var x3 uint64
  fiat_secp256k1_cmovznz_u64(&x3, arg1, (arg2[2]), (arg3[2]))
  var x4 uint64
  fiat_secp256k1_cmovznz_u64(&x4, arg1, (arg2[3]), (arg3[3]))
  out1[0] = x1
  out1[1] = x2
  out1[2] = x3
  out1[3] = x4
}

/*
 * The function fiat_secp256k1_to_bytes serializes a field element in the Montgomery domain to bytes in little-endian order.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..31]
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
 */
/*inline*/
func fiat_secp256k1_to_bytes(out1 *[32]uint64, arg1 *[4]uint64) {
  var x1 uint64 = (arg1[3])
  var x2 uint64 = (arg1[2])
  var x3 uint64 = (arg1[1])
  var x4 uint64 = (arg1[0])
  var x5 uint64 = (x4 >> 8)
  var x6 uint64 = (x4 & 0xff)
  var x7 uint64 = (x5 >> 8)
  var x8 uint64 = (x5 & 0xff)
  var x9 uint64 = (x7 >> 8)
  var x10 uint64 = (x7 & 0xff)
  var x11 uint64 = (x9 >> 8)
  var x12 uint64 = (x9 & 0xff)
  var x13 uint64 = (x11 >> 8)
  var x14 uint64 = (x11 & 0xff)
  var x15 uint64 = (x13 >> 8)
  var x16 uint64 = (x13 & 0xff)
  var x17 uint64 = (x15 >> 8)
  var x18 uint64 = (x15 & 0xff)
  var x19 uint64 = (x17 & 0xff)
  var x20 uint64 = (x3 >> 8)
  var x21 uint64 = (x3 & 0xff)
  var x22 uint64 = (x20 >> 8)
  var x23 uint64 = (x20 & 0xff)
  var x24 uint64 = (x22 >> 8)
  var x25 uint64 = (x22 & 0xff)
  var x26 uint64 = (x24 >> 8)
  var x27 uint64 = (x24 & 0xff)
  var x28 uint64 = (x26 >> 8)
  var x29 uint64 = (x26 & 0xff)
  var x30 uint64 = (x28 >> 8)
  var x31 uint64 = (x28 & 0xff)
  var x32 uint64 = (x30 >> 8)
  var x33 uint64 = (x30 & 0xff)
  var x34 uint64 = (x32 & 0xff)
  var x35 uint64 = (x2 >> 8)
  var x36 uint64 = (x2 & 0xff)
  var x37 uint64 = (x35 >> 8)
  var x38 uint64 = (x35 & 0xff)
  var x39 uint64 = (x37 >> 8)
  var x40 uint64 = (x37 & 0xff)
  var x41 uint64 = (x39 >> 8)
  var x42 uint64 = (x39 & 0xff)
  var x43 uint64 = (x41 >> 8)
  var x44 uint64 = (x41 & 0xff)
  var x45 uint64 = (x43 >> 8)
  var x46 uint64 = (x43 & 0xff)
  var x47 uint64 = (x45 >> 8)
  var x48 uint64 = (x45 & 0xff)
  var x49 uint64 = (x47 & 0xff)
  var x50 uint64 = (x1 >> 8)
  var x51 uint64 = (x1 & 0xff)
  var x52 uint64 = (x50 >> 8)
  var x53 uint64 = (x50 & 0xff)
  var x54 uint64 = (x52 >> 8)
  var x55 uint64 = (x52 & 0xff)
  var x56 uint64 = (x54 >> 8)
  var x57 uint64 = (x54 & 0xff)
  var x58 uint64 = (x56 >> 8)
  var x59 uint64 = (x56 & 0xff)
  var x60 uint64 = (x58 >> 8)
  var x61 uint64 = (x58 & 0xff)
  var x62 uint64 = (x60 >> 8)
  var x63 uint64 = (x60 & 0xff)
  out1[0] = x6
  out1[1] = x8
  out1[2] = x10
  out1[3] = x12
  out1[4] = x14
  out1[5] = x16
  out1[6] = x18
  out1[7] = x19
  out1[8] = x21
  out1[9] = x23
  out1[10] = x25
  out1[11] = x27
  out1[12] = x29
  out1[13] = x31
  out1[14] = x33
  out1[15] = x34
  out1[16] = x36
  out1[17] = x38
  out1[18] = x40
  out1[19] = x42
  out1[20] = x44
  out1[21] = x46
  out1[22] = x48
  out1[23] = x49
  out1[24] = x51
  out1[25] = x53
  out1[26] = x55
  out1[27] = x57
  out1[28] = x59
  out1[29] = x61
  out1[30] = x63
  out1[31] = x62
}

/*
 * The function fiat_secp256k1_from_bytes deserializes a field element in the Montgomery domain from bytes in little-endian order.
 * Preconditions:
 *   0 ≤ bytes_eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = bytes_eval arg1 mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_secp256k1_from_bytes(out1 *[4]uint64, arg1 *[32]uint64) {
  var x1 uint64 = ((arg1[31]) << 56)
  var x2 uint64 = ((arg1[30]) << 48)
  var x3 uint64 = ((arg1[29]) << 40)
  var x4 uint64 = ((arg1[28]) << 32)
  var x5 uint64 = ((arg1[27]) << 24)
  var x6 uint64 = ((arg1[26]) << 16)
  var x7 uint64 = ((arg1[25]) << 8)
  var x8 uint64 = (arg1[24])
  var x9 uint64 = ((arg1[23]) << 56)
  var x10 uint64 = ((arg1[22]) << 48)
  var x11 uint64 = ((arg1[21]) << 40)
  var x12 uint64 = ((arg1[20]) << 32)
  var x13 uint64 = ((arg1[19]) << 24)
  var x14 uint64 = ((arg1[18]) << 16)
  var x15 uint64 = ((arg1[17]) << 8)
  var x16 uint64 = (arg1[16])
  var x17 uint64 = ((arg1[15]) << 56)
  var x18 uint64 = ((arg1[14]) << 48)
  var x19 uint64 = ((arg1[13]) << 40)
  var x20 uint64 = ((arg1[12]) << 32)
  var x21 uint64 = ((arg1[11]) << 24)
  var x22 uint64 = ((arg1[10]) << 16)
  var x23 uint64 = ((arg1[9]) << 8)
  var x24 uint64 = (arg1[8])
  var x25 uint64 = ((arg1[7]) << 56)
  var x26 uint64 = ((arg1[6]) << 48)
  var x27 uint64 = ((arg1[5]) << 40)
  var x28 uint64 = ((arg1[4]) << 32)
  var x29 uint64 = ((arg1[3]) << 24)
  var x30 uint64 = ((arg1[2]) << 16)
  var x31 uint64 = ((arg1[1]) << 8)
  var x32 uint64 = (arg1[0])
  var x33 uint64 = (x32 + (x31 + (x30 + (x29 + (x28 + (x27 + (x26 + x25)))))))
  var x34 uint64 = (x33 & 0xffffffffffffffff)
  var x35 uint64 = (x8 + (x7 + (x6 + (x5 + (x4 + (x3 + (x2 + x1)))))))
  var x36 uint64 = (x16 + (x15 + (x14 + (x13 + (x12 + (x11 + (x10 + x9)))))))
  var x37 uint64 = (x24 + (x23 + (x22 + (x21 + (x20 + (x19 + (x18 + x17)))))))
  var x38 uint64 = (x37 & 0xffffffffffffffff)
  var x39 uint64 = (x36 & 0xffffffffffffffff)
  out1[0] = x34
  out1[1] = x38
  out1[2] = x39
  out1[3] = x35
}

