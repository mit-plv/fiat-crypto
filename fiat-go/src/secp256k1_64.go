/* Autogenerated: src/ExtractionOCaml/word_by_word_montgomery --lang Go --no-wide-int --cmovznz-by-mul secp256k1 64 '2^256 - 2^32 - 977' mul square add sub opp from_montgomery to_montgomery nonzero selectznz to_bytes from_bytes */
/* curve description: secp256k1 */
/* machine_wordsize = 64 (from "64") */
/* requested operations: mul, square, add, sub, opp, from_montgomery, to_montgomery, nonzero, selectznz, to_bytes, from_bytes */
/* m = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f (from "2^256 - 2^32 - 977") */
/*                                                                    */
/* NOTE: In addition to the bounds specified above each function, all */
/*   functions synthesized for this Montgomery arithmetic require the */
/*   input to be strictly less than the prime modulus (m), and also   */
/*   require the input to be in the unique saturated representation.  */
/*   All functions also ensure that these two properties are true of  */
/*   return values.                                                   */
/*  */
/* Computed values: */
/* eval z = z[0] + (z[1] << 64) + (z[2] << 128) + (z[3] << 192) */
/* bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17] << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168) + (z[22] << 176) + (z[23] << 184) + (z[24] << 192) + (z[25] << 200) + (z[26] << 208) + (z[27] << 216) + (z[28] << 224) + (z[29] << 232) + (z[30] << 240) + (z[31] << 248) */

package fiat_secp256k1

import "math/bits"
type fiat_secp256k1_uint1 uint8
type fiat_secp256k1_int1 int8

/* The function fiat_secp256k1_addcarryx_u64 is a thin wrapper around bits.Add64 that uses fiat_secp256k1_uint1 rather than uint64 */
func fiat_secp256k1_addcarryx_u64(x uint64, y uint64, carry fiat_secp256k1_uint1) (uint64, fiat_secp256k1_uint1) {
  var sum uint64
  var carryOut uint64
  sum, carryOut = bits.Add64(x, y, uint64(carry))
  return sum, fiat_secp256k1_uint1(carryOut)
}

/* The function fiat_secp256k1_subborrowx_u64 is a thin wrapper around bits.Sub64 that uses fiat_secp256k1_uint1 rather than uint64 */
func fiat_secp256k1_subborrowx_u64(x uint64, y uint64, carry fiat_secp256k1_uint1) (uint64, fiat_secp256k1_uint1) {
  var sum uint64
  var carryOut uint64
  sum, carryOut = bits.Sub64(x, y, uint64(carry))
  return sum, fiat_secp256k1_uint1(carryOut)
}


/*
 * The function fiat_secp256k1_cmovznz_u64 is a single-word conditional move.
 * Postconditions:
 *   out1 = (if arg1 = 0 then arg2 else arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 *   arg3: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 */
/*inline*/
func fiat_secp256k1_cmovznz_u64(out1 *uint64, arg1 fiat_secp256k1_uint1, arg2 uint64, arg3 uint64) {
  var x1 uint64 = (uint64(arg1) * 0xffffffffffffffff)
  var x2 uint64 = ((x1 & arg3) | ((^x1) & arg2))
  *out1 = x2
}

/*
 * The function fiat_secp256k1_mul multiplies two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_secp256k1_mul(out1 *[4]uint64, arg1 *[4]uint64, arg2 *[4]uint64) {
  var x1 uint64 = (arg1[1])
  var x2 uint64 = (arg1[2])
  var x3 uint64 = (arg1[3])
  var x4 uint64 = (arg1[0])
  var x5 uint64
  var x6 uint64
  x6, x5 = bits.Mul64(x4, (arg2[3]))
  var x7 uint64
  var x8 uint64
  x8, x7 = bits.Mul64(x4, (arg2[2]))
  var x9 uint64
  var x10 uint64
  x10, x9 = bits.Mul64(x4, (arg2[1]))
  var x11 uint64
  var x12 uint64
  x12, x11 = bits.Mul64(x4, (arg2[0]))
  var x13 uint64
  var x14 fiat_secp256k1_uint1
  x13, x14 = fiat_secp256k1_addcarryx_u64(x12, x9, 0x0)
  var x15 uint64
  var x16 fiat_secp256k1_uint1
  x15, x16 = fiat_secp256k1_addcarryx_u64(x10, x7, x14)
  var x17 uint64
  var x18 fiat_secp256k1_uint1
  x17, x18 = fiat_secp256k1_addcarryx_u64(x8, x5, x16)
  var x19 uint64 = (uint64(x18) + x6)
  var x20 uint64
  _, x20 = bits.Mul64(x11, 0xd838091dd2253531)
  var x22 uint64
  var x23 uint64
  x23, x22 = bits.Mul64(x20, 0xffffffffffffffff)
  var x24 uint64
  var x25 uint64
  x25, x24 = bits.Mul64(x20, 0xffffffffffffffff)
  var x26 uint64
  var x27 uint64
  x27, x26 = bits.Mul64(x20, 0xffffffffffffffff)
  var x28 uint64
  var x29 uint64
  x29, x28 = bits.Mul64(x20, 0xfffffffefffffc2f)
  var x30 uint64
  var x31 fiat_secp256k1_uint1
  x30, x31 = fiat_secp256k1_addcarryx_u64(x29, x26, 0x0)
  var x32 uint64
  var x33 fiat_secp256k1_uint1
  x32, x33 = fiat_secp256k1_addcarryx_u64(x27, x24, x31)
  var x34 uint64
  var x35 fiat_secp256k1_uint1
  x34, x35 = fiat_secp256k1_addcarryx_u64(x25, x22, x33)
  var x36 uint64 = (uint64(x35) + x23)
  var x38 fiat_secp256k1_uint1
  _, x38 = fiat_secp256k1_addcarryx_u64(x11, x28, 0x0)
  var x39 uint64
  var x40 fiat_secp256k1_uint1
  x39, x40 = fiat_secp256k1_addcarryx_u64(x13, x30, x38)
  var x41 uint64
  var x42 fiat_secp256k1_uint1
  x41, x42 = fiat_secp256k1_addcarryx_u64(x15, x32, x40)
  var x43 uint64
  var x44 fiat_secp256k1_uint1
  x43, x44 = fiat_secp256k1_addcarryx_u64(x17, x34, x42)
  var x45 uint64
  var x46 fiat_secp256k1_uint1
  x45, x46 = fiat_secp256k1_addcarryx_u64(x19, x36, x44)
  var x47 uint64
  var x48 uint64
  x48, x47 = bits.Mul64(x1, (arg2[3]))
  var x49 uint64
  var x50 uint64
  x50, x49 = bits.Mul64(x1, (arg2[2]))
  var x51 uint64
  var x52 uint64
  x52, x51 = bits.Mul64(x1, (arg2[1]))
  var x53 uint64
  var x54 uint64
  x54, x53 = bits.Mul64(x1, (arg2[0]))
  var x55 uint64
  var x56 fiat_secp256k1_uint1
  x55, x56 = fiat_secp256k1_addcarryx_u64(x54, x51, 0x0)
  var x57 uint64
  var x58 fiat_secp256k1_uint1
  x57, x58 = fiat_secp256k1_addcarryx_u64(x52, x49, x56)
  var x59 uint64
  var x60 fiat_secp256k1_uint1
  x59, x60 = fiat_secp256k1_addcarryx_u64(x50, x47, x58)
  var x61 uint64 = (uint64(x60) + x48)
  var x62 uint64
  var x63 fiat_secp256k1_uint1
  x62, x63 = fiat_secp256k1_addcarryx_u64(x39, x53, 0x0)
  var x64 uint64
  var x65 fiat_secp256k1_uint1
  x64, x65 = fiat_secp256k1_addcarryx_u64(x41, x55, x63)
  var x66 uint64
  var x67 fiat_secp256k1_uint1
  x66, x67 = fiat_secp256k1_addcarryx_u64(x43, x57, x65)
  var x68 uint64
  var x69 fiat_secp256k1_uint1
  x68, x69 = fiat_secp256k1_addcarryx_u64(x45, x59, x67)
  var x70 uint64
  var x71 fiat_secp256k1_uint1
  x70, x71 = fiat_secp256k1_addcarryx_u64(uint64(x46), x61, x69)
  var x72 uint64
  _, x72 = bits.Mul64(x62, 0xd838091dd2253531)
  var x74 uint64
  var x75 uint64
  x75, x74 = bits.Mul64(x72, 0xffffffffffffffff)
  var x76 uint64
  var x77 uint64
  x77, x76 = bits.Mul64(x72, 0xffffffffffffffff)
  var x78 uint64
  var x79 uint64
  x79, x78 = bits.Mul64(x72, 0xffffffffffffffff)
  var x80 uint64
  var x81 uint64
  x81, x80 = bits.Mul64(x72, 0xfffffffefffffc2f)
  var x82 uint64
  var x83 fiat_secp256k1_uint1
  x82, x83 = fiat_secp256k1_addcarryx_u64(x81, x78, 0x0)
  var x84 uint64
  var x85 fiat_secp256k1_uint1
  x84, x85 = fiat_secp256k1_addcarryx_u64(x79, x76, x83)
  var x86 uint64
  var x87 fiat_secp256k1_uint1
  x86, x87 = fiat_secp256k1_addcarryx_u64(x77, x74, x85)
  var x88 uint64 = (uint64(x87) + x75)
  var x90 fiat_secp256k1_uint1
  _, x90 = fiat_secp256k1_addcarryx_u64(x62, x80, 0x0)
  var x91 uint64
  var x92 fiat_secp256k1_uint1
  x91, x92 = fiat_secp256k1_addcarryx_u64(x64, x82, x90)
  var x93 uint64
  var x94 fiat_secp256k1_uint1
  x93, x94 = fiat_secp256k1_addcarryx_u64(x66, x84, x92)
  var x95 uint64
  var x96 fiat_secp256k1_uint1
  x95, x96 = fiat_secp256k1_addcarryx_u64(x68, x86, x94)
  var x97 uint64
  var x98 fiat_secp256k1_uint1
  x97, x98 = fiat_secp256k1_addcarryx_u64(x70, x88, x96)
  var x99 uint64 = (uint64(x98) + uint64(x71))
  var x100 uint64
  var x101 uint64
  x101, x100 = bits.Mul64(x2, (arg2[3]))
  var x102 uint64
  var x103 uint64
  x103, x102 = bits.Mul64(x2, (arg2[2]))
  var x104 uint64
  var x105 uint64
  x105, x104 = bits.Mul64(x2, (arg2[1]))
  var x106 uint64
  var x107 uint64
  x107, x106 = bits.Mul64(x2, (arg2[0]))
  var x108 uint64
  var x109 fiat_secp256k1_uint1
  x108, x109 = fiat_secp256k1_addcarryx_u64(x107, x104, 0x0)
  var x110 uint64
  var x111 fiat_secp256k1_uint1
  x110, x111 = fiat_secp256k1_addcarryx_u64(x105, x102, x109)
  var x112 uint64
  var x113 fiat_secp256k1_uint1
  x112, x113 = fiat_secp256k1_addcarryx_u64(x103, x100, x111)
  var x114 uint64 = (uint64(x113) + x101)
  var x115 uint64
  var x116 fiat_secp256k1_uint1
  x115, x116 = fiat_secp256k1_addcarryx_u64(x91, x106, 0x0)
  var x117 uint64
  var x118 fiat_secp256k1_uint1
  x117, x118 = fiat_secp256k1_addcarryx_u64(x93, x108, x116)
  var x119 uint64
  var x120 fiat_secp256k1_uint1
  x119, x120 = fiat_secp256k1_addcarryx_u64(x95, x110, x118)
  var x121 uint64
  var x122 fiat_secp256k1_uint1
  x121, x122 = fiat_secp256k1_addcarryx_u64(x97, x112, x120)
  var x123 uint64
  var x124 fiat_secp256k1_uint1
  x123, x124 = fiat_secp256k1_addcarryx_u64(x99, x114, x122)
  var x125 uint64
  _, x125 = bits.Mul64(x115, 0xd838091dd2253531)
  var x127 uint64
  var x128 uint64
  x128, x127 = bits.Mul64(x125, 0xffffffffffffffff)
  var x129 uint64
  var x130 uint64
  x130, x129 = bits.Mul64(x125, 0xffffffffffffffff)
  var x131 uint64
  var x132 uint64
  x132, x131 = bits.Mul64(x125, 0xffffffffffffffff)
  var x133 uint64
  var x134 uint64
  x134, x133 = bits.Mul64(x125, 0xfffffffefffffc2f)
  var x135 uint64
  var x136 fiat_secp256k1_uint1
  x135, x136 = fiat_secp256k1_addcarryx_u64(x134, x131, 0x0)
  var x137 uint64
  var x138 fiat_secp256k1_uint1
  x137, x138 = fiat_secp256k1_addcarryx_u64(x132, x129, x136)
  var x139 uint64
  var x140 fiat_secp256k1_uint1
  x139, x140 = fiat_secp256k1_addcarryx_u64(x130, x127, x138)
  var x141 uint64 = (uint64(x140) + x128)
  var x143 fiat_secp256k1_uint1
  _, x143 = fiat_secp256k1_addcarryx_u64(x115, x133, 0x0)
  var x144 uint64
  var x145 fiat_secp256k1_uint1
  x144, x145 = fiat_secp256k1_addcarryx_u64(x117, x135, x143)
  var x146 uint64
  var x147 fiat_secp256k1_uint1
  x146, x147 = fiat_secp256k1_addcarryx_u64(x119, x137, x145)
  var x148 uint64
  var x149 fiat_secp256k1_uint1
  x148, x149 = fiat_secp256k1_addcarryx_u64(x121, x139, x147)
  var x150 uint64
  var x151 fiat_secp256k1_uint1
  x150, x151 = fiat_secp256k1_addcarryx_u64(x123, x141, x149)
  var x152 uint64 = (uint64(x151) + uint64(x124))
  var x153 uint64
  var x154 uint64
  x154, x153 = bits.Mul64(x3, (arg2[3]))
  var x155 uint64
  var x156 uint64
  x156, x155 = bits.Mul64(x3, (arg2[2]))
  var x157 uint64
  var x158 uint64
  x158, x157 = bits.Mul64(x3, (arg2[1]))
  var x159 uint64
  var x160 uint64
  x160, x159 = bits.Mul64(x3, (arg2[0]))
  var x161 uint64
  var x162 fiat_secp256k1_uint1
  x161, x162 = fiat_secp256k1_addcarryx_u64(x160, x157, 0x0)
  var x163 uint64
  var x164 fiat_secp256k1_uint1
  x163, x164 = fiat_secp256k1_addcarryx_u64(x158, x155, x162)
  var x165 uint64
  var x166 fiat_secp256k1_uint1
  x165, x166 = fiat_secp256k1_addcarryx_u64(x156, x153, x164)
  var x167 uint64 = (uint64(x166) + x154)
  var x168 uint64
  var x169 fiat_secp256k1_uint1
  x168, x169 = fiat_secp256k1_addcarryx_u64(x144, x159, 0x0)
  var x170 uint64
  var x171 fiat_secp256k1_uint1
  x170, x171 = fiat_secp256k1_addcarryx_u64(x146, x161, x169)
  var x172 uint64
  var x173 fiat_secp256k1_uint1
  x172, x173 = fiat_secp256k1_addcarryx_u64(x148, x163, x171)
  var x174 uint64
  var x175 fiat_secp256k1_uint1
  x174, x175 = fiat_secp256k1_addcarryx_u64(x150, x165, x173)
  var x176 uint64
  var x177 fiat_secp256k1_uint1
  x176, x177 = fiat_secp256k1_addcarryx_u64(x152, x167, x175)
  var x178 uint64
  _, x178 = bits.Mul64(x168, 0xd838091dd2253531)
  var x180 uint64
  var x181 uint64
  x181, x180 = bits.Mul64(x178, 0xffffffffffffffff)
  var x182 uint64
  var x183 uint64
  x183, x182 = bits.Mul64(x178, 0xffffffffffffffff)
  var x184 uint64
  var x185 uint64
  x185, x184 = bits.Mul64(x178, 0xffffffffffffffff)
  var x186 uint64
  var x187 uint64
  x187, x186 = bits.Mul64(x178, 0xfffffffefffffc2f)
  var x188 uint64
  var x189 fiat_secp256k1_uint1
  x188, x189 = fiat_secp256k1_addcarryx_u64(x187, x184, 0x0)
  var x190 uint64
  var x191 fiat_secp256k1_uint1
  x190, x191 = fiat_secp256k1_addcarryx_u64(x185, x182, x189)
  var x192 uint64
  var x193 fiat_secp256k1_uint1
  x192, x193 = fiat_secp256k1_addcarryx_u64(x183, x180, x191)
  var x194 uint64 = (uint64(x193) + x181)
  var x196 fiat_secp256k1_uint1
  _, x196 = fiat_secp256k1_addcarryx_u64(x168, x186, 0x0)
  var x197 uint64
  var x198 fiat_secp256k1_uint1
  x197, x198 = fiat_secp256k1_addcarryx_u64(x170, x188, x196)
  var x199 uint64
  var x200 fiat_secp256k1_uint1
  x199, x200 = fiat_secp256k1_addcarryx_u64(x172, x190, x198)
  var x201 uint64
  var x202 fiat_secp256k1_uint1
  x201, x202 = fiat_secp256k1_addcarryx_u64(x174, x192, x200)
  var x203 uint64
  var x204 fiat_secp256k1_uint1
  x203, x204 = fiat_secp256k1_addcarryx_u64(x176, x194, x202)
  var x205 uint64 = (uint64(x204) + uint64(x177))
  var x206 uint64
  var x207 fiat_secp256k1_uint1
  x206, x207 = fiat_secp256k1_subborrowx_u64(x197, 0xfffffffefffffc2f, 0x0)
  var x208 uint64
  var x209 fiat_secp256k1_uint1
  x208, x209 = fiat_secp256k1_subborrowx_u64(x199, 0xffffffffffffffff, x207)
  var x210 uint64
  var x211 fiat_secp256k1_uint1
  x210, x211 = fiat_secp256k1_subborrowx_u64(x201, 0xffffffffffffffff, x209)
  var x212 uint64
  var x213 fiat_secp256k1_uint1
  x212, x213 = fiat_secp256k1_subborrowx_u64(x203, 0xffffffffffffffff, x211)
  var x215 fiat_secp256k1_uint1
  _, x215 = fiat_secp256k1_subborrowx_u64(x205, uint64(0x0), x213)
  var x216 uint64
  fiat_secp256k1_cmovznz_u64(&x216, x215, x206, x197)
  var x217 uint64
  fiat_secp256k1_cmovznz_u64(&x217, x215, x208, x199)
  var x218 uint64
  fiat_secp256k1_cmovznz_u64(&x218, x215, x210, x201)
  var x219 uint64
  fiat_secp256k1_cmovznz_u64(&x219, x215, x212, x203)
  out1[0] = x216
  out1[1] = x217
  out1[2] = x218
  out1[3] = x219
}

/*
 * The function fiat_secp256k1_square squares a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_secp256k1_square(out1 *[4]uint64, arg1 *[4]uint64) {
  var x1 uint64 = (arg1[1])
  var x2 uint64 = (arg1[2])
  var x3 uint64 = (arg1[3])
  var x4 uint64 = (arg1[0])
  var x5 uint64
  var x6 uint64
  x6, x5 = bits.Mul64(x4, (arg1[3]))
  var x7 uint64
  var x8 uint64
  x8, x7 = bits.Mul64(x4, (arg1[2]))
  var x9 uint64
  var x10 uint64
  x10, x9 = bits.Mul64(x4, (arg1[1]))
  var x11 uint64
  var x12 uint64
  x12, x11 = bits.Mul64(x4, (arg1[0]))
  var x13 uint64
  var x14 fiat_secp256k1_uint1
  x13, x14 = fiat_secp256k1_addcarryx_u64(x12, x9, 0x0)
  var x15 uint64
  var x16 fiat_secp256k1_uint1
  x15, x16 = fiat_secp256k1_addcarryx_u64(x10, x7, x14)
  var x17 uint64
  var x18 fiat_secp256k1_uint1
  x17, x18 = fiat_secp256k1_addcarryx_u64(x8, x5, x16)
  var x19 uint64 = (uint64(x18) + x6)
  var x20 uint64
  _, x20 = bits.Mul64(x11, 0xd838091dd2253531)
  var x22 uint64
  var x23 uint64
  x23, x22 = bits.Mul64(x20, 0xffffffffffffffff)
  var x24 uint64
  var x25 uint64
  x25, x24 = bits.Mul64(x20, 0xffffffffffffffff)
  var x26 uint64
  var x27 uint64
  x27, x26 = bits.Mul64(x20, 0xffffffffffffffff)
  var x28 uint64
  var x29 uint64
  x29, x28 = bits.Mul64(x20, 0xfffffffefffffc2f)
  var x30 uint64
  var x31 fiat_secp256k1_uint1
  x30, x31 = fiat_secp256k1_addcarryx_u64(x29, x26, 0x0)
  var x32 uint64
  var x33 fiat_secp256k1_uint1
  x32, x33 = fiat_secp256k1_addcarryx_u64(x27, x24, x31)
  var x34 uint64
  var x35 fiat_secp256k1_uint1
  x34, x35 = fiat_secp256k1_addcarryx_u64(x25, x22, x33)
  var x36 uint64 = (uint64(x35) + x23)
  var x38 fiat_secp256k1_uint1
  _, x38 = fiat_secp256k1_addcarryx_u64(x11, x28, 0x0)
  var x39 uint64
  var x40 fiat_secp256k1_uint1
  x39, x40 = fiat_secp256k1_addcarryx_u64(x13, x30, x38)
  var x41 uint64
  var x42 fiat_secp256k1_uint1
  x41, x42 = fiat_secp256k1_addcarryx_u64(x15, x32, x40)
  var x43 uint64
  var x44 fiat_secp256k1_uint1
  x43, x44 = fiat_secp256k1_addcarryx_u64(x17, x34, x42)
  var x45 uint64
  var x46 fiat_secp256k1_uint1
  x45, x46 = fiat_secp256k1_addcarryx_u64(x19, x36, x44)
  var x47 uint64
  var x48 uint64
  x48, x47 = bits.Mul64(x1, (arg1[3]))
  var x49 uint64
  var x50 uint64
  x50, x49 = bits.Mul64(x1, (arg1[2]))
  var x51 uint64
  var x52 uint64
  x52, x51 = bits.Mul64(x1, (arg1[1]))
  var x53 uint64
  var x54 uint64
  x54, x53 = bits.Mul64(x1, (arg1[0]))
  var x55 uint64
  var x56 fiat_secp256k1_uint1
  x55, x56 = fiat_secp256k1_addcarryx_u64(x54, x51, 0x0)
  var x57 uint64
  var x58 fiat_secp256k1_uint1
  x57, x58 = fiat_secp256k1_addcarryx_u64(x52, x49, x56)
  var x59 uint64
  var x60 fiat_secp256k1_uint1
  x59, x60 = fiat_secp256k1_addcarryx_u64(x50, x47, x58)
  var x61 uint64 = (uint64(x60) + x48)
  var x62 uint64
  var x63 fiat_secp256k1_uint1
  x62, x63 = fiat_secp256k1_addcarryx_u64(x39, x53, 0x0)
  var x64 uint64
  var x65 fiat_secp256k1_uint1
  x64, x65 = fiat_secp256k1_addcarryx_u64(x41, x55, x63)
  var x66 uint64
  var x67 fiat_secp256k1_uint1
  x66, x67 = fiat_secp256k1_addcarryx_u64(x43, x57, x65)
  var x68 uint64
  var x69 fiat_secp256k1_uint1
  x68, x69 = fiat_secp256k1_addcarryx_u64(x45, x59, x67)
  var x70 uint64
  var x71 fiat_secp256k1_uint1
  x70, x71 = fiat_secp256k1_addcarryx_u64(uint64(x46), x61, x69)
  var x72 uint64
  _, x72 = bits.Mul64(x62, 0xd838091dd2253531)
  var x74 uint64
  var x75 uint64
  x75, x74 = bits.Mul64(x72, 0xffffffffffffffff)
  var x76 uint64
  var x77 uint64
  x77, x76 = bits.Mul64(x72, 0xffffffffffffffff)
  var x78 uint64
  var x79 uint64
  x79, x78 = bits.Mul64(x72, 0xffffffffffffffff)
  var x80 uint64
  var x81 uint64
  x81, x80 = bits.Mul64(x72, 0xfffffffefffffc2f)
  var x82 uint64
  var x83 fiat_secp256k1_uint1
  x82, x83 = fiat_secp256k1_addcarryx_u64(x81, x78, 0x0)
  var x84 uint64
  var x85 fiat_secp256k1_uint1
  x84, x85 = fiat_secp256k1_addcarryx_u64(x79, x76, x83)
  var x86 uint64
  var x87 fiat_secp256k1_uint1
  x86, x87 = fiat_secp256k1_addcarryx_u64(x77, x74, x85)
  var x88 uint64 = (uint64(x87) + x75)
  var x90 fiat_secp256k1_uint1
  _, x90 = fiat_secp256k1_addcarryx_u64(x62, x80, 0x0)
  var x91 uint64
  var x92 fiat_secp256k1_uint1
  x91, x92 = fiat_secp256k1_addcarryx_u64(x64, x82, x90)
  var x93 uint64
  var x94 fiat_secp256k1_uint1
  x93, x94 = fiat_secp256k1_addcarryx_u64(x66, x84, x92)
  var x95 uint64
  var x96 fiat_secp256k1_uint1
  x95, x96 = fiat_secp256k1_addcarryx_u64(x68, x86, x94)
  var x97 uint64
  var x98 fiat_secp256k1_uint1
  x97, x98 = fiat_secp256k1_addcarryx_u64(x70, x88, x96)
  var x99 uint64 = (uint64(x98) + uint64(x71))
  var x100 uint64
  var x101 uint64
  x101, x100 = bits.Mul64(x2, (arg1[3]))
  var x102 uint64
  var x103 uint64
  x103, x102 = bits.Mul64(x2, (arg1[2]))
  var x104 uint64
  var x105 uint64
  x105, x104 = bits.Mul64(x2, (arg1[1]))
  var x106 uint64
  var x107 uint64
  x107, x106 = bits.Mul64(x2, (arg1[0]))
  var x108 uint64
  var x109 fiat_secp256k1_uint1
  x108, x109 = fiat_secp256k1_addcarryx_u64(x107, x104, 0x0)
  var x110 uint64
  var x111 fiat_secp256k1_uint1
  x110, x111 = fiat_secp256k1_addcarryx_u64(x105, x102, x109)
  var x112 uint64
  var x113 fiat_secp256k1_uint1
  x112, x113 = fiat_secp256k1_addcarryx_u64(x103, x100, x111)
  var x114 uint64 = (uint64(x113) + x101)
  var x115 uint64
  var x116 fiat_secp256k1_uint1
  x115, x116 = fiat_secp256k1_addcarryx_u64(x91, x106, 0x0)
  var x117 uint64
  var x118 fiat_secp256k1_uint1
  x117, x118 = fiat_secp256k1_addcarryx_u64(x93, x108, x116)
  var x119 uint64
  var x120 fiat_secp256k1_uint1
  x119, x120 = fiat_secp256k1_addcarryx_u64(x95, x110, x118)
  var x121 uint64
  var x122 fiat_secp256k1_uint1
  x121, x122 = fiat_secp256k1_addcarryx_u64(x97, x112, x120)
  var x123 uint64
  var x124 fiat_secp256k1_uint1
  x123, x124 = fiat_secp256k1_addcarryx_u64(x99, x114, x122)
  var x125 uint64
  _, x125 = bits.Mul64(x115, 0xd838091dd2253531)
  var x127 uint64
  var x128 uint64
  x128, x127 = bits.Mul64(x125, 0xffffffffffffffff)
  var x129 uint64
  var x130 uint64
  x130, x129 = bits.Mul64(x125, 0xffffffffffffffff)
  var x131 uint64
  var x132 uint64
  x132, x131 = bits.Mul64(x125, 0xffffffffffffffff)
  var x133 uint64
  var x134 uint64
  x134, x133 = bits.Mul64(x125, 0xfffffffefffffc2f)
  var x135 uint64
  var x136 fiat_secp256k1_uint1
  x135, x136 = fiat_secp256k1_addcarryx_u64(x134, x131, 0x0)
  var x137 uint64
  var x138 fiat_secp256k1_uint1
  x137, x138 = fiat_secp256k1_addcarryx_u64(x132, x129, x136)
  var x139 uint64
  var x140 fiat_secp256k1_uint1
  x139, x140 = fiat_secp256k1_addcarryx_u64(x130, x127, x138)
  var x141 uint64 = (uint64(x140) + x128)
  var x143 fiat_secp256k1_uint1
  _, x143 = fiat_secp256k1_addcarryx_u64(x115, x133, 0x0)
  var x144 uint64
  var x145 fiat_secp256k1_uint1
  x144, x145 = fiat_secp256k1_addcarryx_u64(x117, x135, x143)
  var x146 uint64
  var x147 fiat_secp256k1_uint1
  x146, x147 = fiat_secp256k1_addcarryx_u64(x119, x137, x145)
  var x148 uint64
  var x149 fiat_secp256k1_uint1
  x148, x149 = fiat_secp256k1_addcarryx_u64(x121, x139, x147)
  var x150 uint64
  var x151 fiat_secp256k1_uint1
  x150, x151 = fiat_secp256k1_addcarryx_u64(x123, x141, x149)
  var x152 uint64 = (uint64(x151) + uint64(x124))
  var x153 uint64
  var x154 uint64
  x154, x153 = bits.Mul64(x3, (arg1[3]))
  var x155 uint64
  var x156 uint64
  x156, x155 = bits.Mul64(x3, (arg1[2]))
  var x157 uint64
  var x158 uint64
  x158, x157 = bits.Mul64(x3, (arg1[1]))
  var x159 uint64
  var x160 uint64
  x160, x159 = bits.Mul64(x3, (arg1[0]))
  var x161 uint64
  var x162 fiat_secp256k1_uint1
  x161, x162 = fiat_secp256k1_addcarryx_u64(x160, x157, 0x0)
  var x163 uint64
  var x164 fiat_secp256k1_uint1
  x163, x164 = fiat_secp256k1_addcarryx_u64(x158, x155, x162)
  var x165 uint64
  var x166 fiat_secp256k1_uint1
  x165, x166 = fiat_secp256k1_addcarryx_u64(x156, x153, x164)
  var x167 uint64 = (uint64(x166) + x154)
  var x168 uint64
  var x169 fiat_secp256k1_uint1
  x168, x169 = fiat_secp256k1_addcarryx_u64(x144, x159, 0x0)
  var x170 uint64
  var x171 fiat_secp256k1_uint1
  x170, x171 = fiat_secp256k1_addcarryx_u64(x146, x161, x169)
  var x172 uint64
  var x173 fiat_secp256k1_uint1
  x172, x173 = fiat_secp256k1_addcarryx_u64(x148, x163, x171)
  var x174 uint64
  var x175 fiat_secp256k1_uint1
  x174, x175 = fiat_secp256k1_addcarryx_u64(x150, x165, x173)
  var x176 uint64
  var x177 fiat_secp256k1_uint1
  x176, x177 = fiat_secp256k1_addcarryx_u64(x152, x167, x175)
  var x178 uint64
  _, x178 = bits.Mul64(x168, 0xd838091dd2253531)
  var x180 uint64
  var x181 uint64
  x181, x180 = bits.Mul64(x178, 0xffffffffffffffff)
  var x182 uint64
  var x183 uint64
  x183, x182 = bits.Mul64(x178, 0xffffffffffffffff)
  var x184 uint64
  var x185 uint64
  x185, x184 = bits.Mul64(x178, 0xffffffffffffffff)
  var x186 uint64
  var x187 uint64
  x187, x186 = bits.Mul64(x178, 0xfffffffefffffc2f)
  var x188 uint64
  var x189 fiat_secp256k1_uint1
  x188, x189 = fiat_secp256k1_addcarryx_u64(x187, x184, 0x0)
  var x190 uint64
  var x191 fiat_secp256k1_uint1
  x190, x191 = fiat_secp256k1_addcarryx_u64(x185, x182, x189)
  var x192 uint64
  var x193 fiat_secp256k1_uint1
  x192, x193 = fiat_secp256k1_addcarryx_u64(x183, x180, x191)
  var x194 uint64 = (uint64(x193) + x181)
  var x196 fiat_secp256k1_uint1
  _, x196 = fiat_secp256k1_addcarryx_u64(x168, x186, 0x0)
  var x197 uint64
  var x198 fiat_secp256k1_uint1
  x197, x198 = fiat_secp256k1_addcarryx_u64(x170, x188, x196)
  var x199 uint64
  var x200 fiat_secp256k1_uint1
  x199, x200 = fiat_secp256k1_addcarryx_u64(x172, x190, x198)
  var x201 uint64
  var x202 fiat_secp256k1_uint1
  x201, x202 = fiat_secp256k1_addcarryx_u64(x174, x192, x200)
  var x203 uint64
  var x204 fiat_secp256k1_uint1
  x203, x204 = fiat_secp256k1_addcarryx_u64(x176, x194, x202)
  var x205 uint64 = (uint64(x204) + uint64(x177))
  var x206 uint64
  var x207 fiat_secp256k1_uint1
  x206, x207 = fiat_secp256k1_subborrowx_u64(x197, 0xfffffffefffffc2f, 0x0)
  var x208 uint64
  var x209 fiat_secp256k1_uint1
  x208, x209 = fiat_secp256k1_subborrowx_u64(x199, 0xffffffffffffffff, x207)
  var x210 uint64
  var x211 fiat_secp256k1_uint1
  x210, x211 = fiat_secp256k1_subborrowx_u64(x201, 0xffffffffffffffff, x209)
  var x212 uint64
  var x213 fiat_secp256k1_uint1
  x212, x213 = fiat_secp256k1_subborrowx_u64(x203, 0xffffffffffffffff, x211)
  var x215 fiat_secp256k1_uint1
  _, x215 = fiat_secp256k1_subborrowx_u64(x205, uint64(0x0), x213)
  var x216 uint64
  fiat_secp256k1_cmovznz_u64(&x216, x215, x206, x197)
  var x217 uint64
  fiat_secp256k1_cmovznz_u64(&x217, x215, x208, x199)
  var x218 uint64
  fiat_secp256k1_cmovznz_u64(&x218, x215, x210, x201)
  var x219 uint64
  fiat_secp256k1_cmovznz_u64(&x219, x215, x212, x203)
  out1[0] = x216
  out1[1] = x217
  out1[2] = x218
  out1[3] = x219
}

/*
 * The function fiat_secp256k1_add adds two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_secp256k1_add(out1 *[4]uint64, arg1 *[4]uint64, arg2 *[4]uint64) {
  var x1 uint64
  var x2 fiat_secp256k1_uint1
  x1, x2 = fiat_secp256k1_addcarryx_u64((arg1[0]), (arg2[0]), 0x0)
  var x3 uint64
  var x4 fiat_secp256k1_uint1
  x3, x4 = fiat_secp256k1_addcarryx_u64((arg1[1]), (arg2[1]), x2)
  var x5 uint64
  var x6 fiat_secp256k1_uint1
  x5, x6 = fiat_secp256k1_addcarryx_u64((arg1[2]), (arg2[2]), x4)
  var x7 uint64
  var x8 fiat_secp256k1_uint1
  x7, x8 = fiat_secp256k1_addcarryx_u64((arg1[3]), (arg2[3]), x6)
  var x9 uint64
  var x10 fiat_secp256k1_uint1
  x9, x10 = fiat_secp256k1_subborrowx_u64(x1, 0xfffffffefffffc2f, 0x0)
  var x11 uint64
  var x12 fiat_secp256k1_uint1
  x11, x12 = fiat_secp256k1_subborrowx_u64(x3, 0xffffffffffffffff, x10)
  var x13 uint64
  var x14 fiat_secp256k1_uint1
  x13, x14 = fiat_secp256k1_subborrowx_u64(x5, 0xffffffffffffffff, x12)
  var x15 uint64
  var x16 fiat_secp256k1_uint1
  x15, x16 = fiat_secp256k1_subborrowx_u64(x7, 0xffffffffffffffff, x14)
  var x18 fiat_secp256k1_uint1
  _, x18 = fiat_secp256k1_subborrowx_u64(uint64(x8), uint64(0x0), x16)
  var x19 uint64
  fiat_secp256k1_cmovznz_u64(&x19, x18, x9, x1)
  var x20 uint64
  fiat_secp256k1_cmovznz_u64(&x20, x18, x11, x3)
  var x21 uint64
  fiat_secp256k1_cmovznz_u64(&x21, x18, x13, x5)
  var x22 uint64
  fiat_secp256k1_cmovznz_u64(&x22, x18, x15, x7)
  out1[0] = x19
  out1[1] = x20
  out1[2] = x21
  out1[3] = x22
}

/*
 * The function fiat_secp256k1_sub subtracts two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_secp256k1_sub(out1 *[4]uint64, arg1 *[4]uint64, arg2 *[4]uint64) {
  var x1 uint64
  var x2 fiat_secp256k1_uint1
  x1, x2 = fiat_secp256k1_subborrowx_u64((arg1[0]), (arg2[0]), 0x0)
  var x3 uint64
  var x4 fiat_secp256k1_uint1
  x3, x4 = fiat_secp256k1_subborrowx_u64((arg1[1]), (arg2[1]), x2)
  var x5 uint64
  var x6 fiat_secp256k1_uint1
  x5, x6 = fiat_secp256k1_subborrowx_u64((arg1[2]), (arg2[2]), x4)
  var x7 uint64
  var x8 fiat_secp256k1_uint1
  x7, x8 = fiat_secp256k1_subborrowx_u64((arg1[3]), (arg2[3]), x6)
  var x9 uint64
  fiat_secp256k1_cmovznz_u64(&x9, x8, uint64(0x0), 0xffffffffffffffff)
  var x10 uint64
  var x11 fiat_secp256k1_uint1
  x10, x11 = fiat_secp256k1_addcarryx_u64(x1, (x9 & 0xfffffffefffffc2f), 0x0)
  var x12 uint64
  var x13 fiat_secp256k1_uint1
  x12, x13 = fiat_secp256k1_addcarryx_u64(x3, x9, x11)
  var x14 uint64
  var x15 fiat_secp256k1_uint1
  x14, x15 = fiat_secp256k1_addcarryx_u64(x5, x9, x13)
  var x16 uint64
  x16, _ = fiat_secp256k1_addcarryx_u64(x7, x9, x15)
  out1[0] = x10
  out1[1] = x12
  out1[2] = x14
  out1[3] = x16
}

/*
 * The function fiat_secp256k1_opp negates a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_secp256k1_opp(out1 *[4]uint64, arg1 *[4]uint64) {
  var x1 uint64
  var x2 fiat_secp256k1_uint1
  x1, x2 = fiat_secp256k1_subborrowx_u64(uint64(0x0), (arg1[0]), 0x0)
  var x3 uint64
  var x4 fiat_secp256k1_uint1
  x3, x4 = fiat_secp256k1_subborrowx_u64(uint64(0x0), (arg1[1]), x2)
  var x5 uint64
  var x6 fiat_secp256k1_uint1
  x5, x6 = fiat_secp256k1_subborrowx_u64(uint64(0x0), (arg1[2]), x4)
  var x7 uint64
  var x8 fiat_secp256k1_uint1
  x7, x8 = fiat_secp256k1_subborrowx_u64(uint64(0x0), (arg1[3]), x6)
  var x9 uint64
  fiat_secp256k1_cmovznz_u64(&x9, x8, uint64(0x0), 0xffffffffffffffff)
  var x10 uint64
  var x11 fiat_secp256k1_uint1
  x10, x11 = fiat_secp256k1_addcarryx_u64(x1, (x9 & 0xfffffffefffffc2f), 0x0)
  var x12 uint64
  var x13 fiat_secp256k1_uint1
  x12, x13 = fiat_secp256k1_addcarryx_u64(x3, x9, x11)
  var x14 uint64
  var x15 fiat_secp256k1_uint1
  x14, x15 = fiat_secp256k1_addcarryx_u64(x5, x9, x13)
  var x16 uint64
  x16, _ = fiat_secp256k1_addcarryx_u64(x7, x9, x15)
  out1[0] = x10
  out1[1] = x12
  out1[2] = x14
  out1[3] = x16
}

/*
 * The function fiat_secp256k1_from_montgomery translates a field element out of the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = (eval arg1 * ((2^64)⁻¹ mod m)^4) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_secp256k1_from_montgomery(out1 *[4]uint64, arg1 *[4]uint64) {
  var x1 uint64 = (arg1[0])
  var x2 uint64
  _, x2 = bits.Mul64(x1, 0xd838091dd2253531)
  var x4 uint64
  var x5 uint64
  x5, x4 = bits.Mul64(x2, 0xffffffffffffffff)
  var x6 uint64
  var x7 uint64
  x7, x6 = bits.Mul64(x2, 0xffffffffffffffff)
  var x8 uint64
  var x9 uint64
  x9, x8 = bits.Mul64(x2, 0xffffffffffffffff)
  var x10 uint64
  var x11 uint64
  x11, x10 = bits.Mul64(x2, 0xfffffffefffffc2f)
  var x12 uint64
  var x13 fiat_secp256k1_uint1
  x12, x13 = fiat_secp256k1_addcarryx_u64(x11, x8, 0x0)
  var x14 uint64
  var x15 fiat_secp256k1_uint1
  x14, x15 = fiat_secp256k1_addcarryx_u64(x9, x6, x13)
  var x16 uint64
  var x17 fiat_secp256k1_uint1
  x16, x17 = fiat_secp256k1_addcarryx_u64(x7, x4, x15)
  var x19 fiat_secp256k1_uint1
  _, x19 = fiat_secp256k1_addcarryx_u64(x1, x10, 0x0)
  var x20 uint64
  var x21 fiat_secp256k1_uint1
  x20, x21 = fiat_secp256k1_addcarryx_u64(uint64(0x0), x12, x19)
  var x22 uint64
  var x23 fiat_secp256k1_uint1
  x22, x23 = fiat_secp256k1_addcarryx_u64(uint64(0x0), x14, x21)
  var x24 uint64
  var x25 fiat_secp256k1_uint1
  x24, x25 = fiat_secp256k1_addcarryx_u64(uint64(0x0), x16, x23)
  var x26 uint64
  var x27 fiat_secp256k1_uint1
  x26, x27 = fiat_secp256k1_addcarryx_u64(uint64(0x0), (uint64(x17) + x5), x25)
  var x28 uint64
  var x29 fiat_secp256k1_uint1
  x28, x29 = fiat_secp256k1_addcarryx_u64(x20, (arg1[1]), 0x0)
  var x30 uint64
  var x31 fiat_secp256k1_uint1
  x30, x31 = fiat_secp256k1_addcarryx_u64(x22, uint64(0x0), x29)
  var x32 uint64
  var x33 fiat_secp256k1_uint1
  x32, x33 = fiat_secp256k1_addcarryx_u64(x24, uint64(0x0), x31)
  var x34 uint64
  var x35 fiat_secp256k1_uint1
  x34, x35 = fiat_secp256k1_addcarryx_u64(x26, uint64(0x0), x33)
  var x36 uint64
  _, x36 = bits.Mul64(x28, 0xd838091dd2253531)
  var x38 uint64
  var x39 uint64
  x39, x38 = bits.Mul64(x36, 0xffffffffffffffff)
  var x40 uint64
  var x41 uint64
  x41, x40 = bits.Mul64(x36, 0xffffffffffffffff)
  var x42 uint64
  var x43 uint64
  x43, x42 = bits.Mul64(x36, 0xffffffffffffffff)
  var x44 uint64
  var x45 uint64
  x45, x44 = bits.Mul64(x36, 0xfffffffefffffc2f)
  var x46 uint64
  var x47 fiat_secp256k1_uint1
  x46, x47 = fiat_secp256k1_addcarryx_u64(x45, x42, 0x0)
  var x48 uint64
  var x49 fiat_secp256k1_uint1
  x48, x49 = fiat_secp256k1_addcarryx_u64(x43, x40, x47)
  var x50 uint64
  var x51 fiat_secp256k1_uint1
  x50, x51 = fiat_secp256k1_addcarryx_u64(x41, x38, x49)
  var x53 fiat_secp256k1_uint1
  _, x53 = fiat_secp256k1_addcarryx_u64(x28, x44, 0x0)
  var x54 uint64
  var x55 fiat_secp256k1_uint1
  x54, x55 = fiat_secp256k1_addcarryx_u64(x30, x46, x53)
  var x56 uint64
  var x57 fiat_secp256k1_uint1
  x56, x57 = fiat_secp256k1_addcarryx_u64(x32, x48, x55)
  var x58 uint64
  var x59 fiat_secp256k1_uint1
  x58, x59 = fiat_secp256k1_addcarryx_u64(x34, x50, x57)
  var x60 uint64
  var x61 fiat_secp256k1_uint1
  x60, x61 = fiat_secp256k1_addcarryx_u64((uint64(x35) + uint64(x27)), (uint64(x51) + x39), x59)
  var x62 uint64
  var x63 fiat_secp256k1_uint1
  x62, x63 = fiat_secp256k1_addcarryx_u64(x54, (arg1[2]), 0x0)
  var x64 uint64
  var x65 fiat_secp256k1_uint1
  x64, x65 = fiat_secp256k1_addcarryx_u64(x56, uint64(0x0), x63)
  var x66 uint64
  var x67 fiat_secp256k1_uint1
  x66, x67 = fiat_secp256k1_addcarryx_u64(x58, uint64(0x0), x65)
  var x68 uint64
  var x69 fiat_secp256k1_uint1
  x68, x69 = fiat_secp256k1_addcarryx_u64(x60, uint64(0x0), x67)
  var x70 uint64
  _, x70 = bits.Mul64(x62, 0xd838091dd2253531)
  var x72 uint64
  var x73 uint64
  x73, x72 = bits.Mul64(x70, 0xffffffffffffffff)
  var x74 uint64
  var x75 uint64
  x75, x74 = bits.Mul64(x70, 0xffffffffffffffff)
  var x76 uint64
  var x77 uint64
  x77, x76 = bits.Mul64(x70, 0xffffffffffffffff)
  var x78 uint64
  var x79 uint64
  x79, x78 = bits.Mul64(x70, 0xfffffffefffffc2f)
  var x80 uint64
  var x81 fiat_secp256k1_uint1
  x80, x81 = fiat_secp256k1_addcarryx_u64(x79, x76, 0x0)
  var x82 uint64
  var x83 fiat_secp256k1_uint1
  x82, x83 = fiat_secp256k1_addcarryx_u64(x77, x74, x81)
  var x84 uint64
  var x85 fiat_secp256k1_uint1
  x84, x85 = fiat_secp256k1_addcarryx_u64(x75, x72, x83)
  var x87 fiat_secp256k1_uint1
  _, x87 = fiat_secp256k1_addcarryx_u64(x62, x78, 0x0)
  var x88 uint64
  var x89 fiat_secp256k1_uint1
  x88, x89 = fiat_secp256k1_addcarryx_u64(x64, x80, x87)
  var x90 uint64
  var x91 fiat_secp256k1_uint1
  x90, x91 = fiat_secp256k1_addcarryx_u64(x66, x82, x89)
  var x92 uint64
  var x93 fiat_secp256k1_uint1
  x92, x93 = fiat_secp256k1_addcarryx_u64(x68, x84, x91)
  var x94 uint64
  var x95 fiat_secp256k1_uint1
  x94, x95 = fiat_secp256k1_addcarryx_u64((uint64(x69) + uint64(x61)), (uint64(x85) + x73), x93)
  var x96 uint64
  var x97 fiat_secp256k1_uint1
  x96, x97 = fiat_secp256k1_addcarryx_u64(x88, (arg1[3]), 0x0)
  var x98 uint64
  var x99 fiat_secp256k1_uint1
  x98, x99 = fiat_secp256k1_addcarryx_u64(x90, uint64(0x0), x97)
  var x100 uint64
  var x101 fiat_secp256k1_uint1
  x100, x101 = fiat_secp256k1_addcarryx_u64(x92, uint64(0x0), x99)
  var x102 uint64
  var x103 fiat_secp256k1_uint1
  x102, x103 = fiat_secp256k1_addcarryx_u64(x94, uint64(0x0), x101)
  var x104 uint64
  _, x104 = bits.Mul64(x96, 0xd838091dd2253531)
  var x106 uint64
  var x107 uint64
  x107, x106 = bits.Mul64(x104, 0xffffffffffffffff)
  var x108 uint64
  var x109 uint64
  x109, x108 = bits.Mul64(x104, 0xffffffffffffffff)
  var x110 uint64
  var x111 uint64
  x111, x110 = bits.Mul64(x104, 0xffffffffffffffff)
  var x112 uint64
  var x113 uint64
  x113, x112 = bits.Mul64(x104, 0xfffffffefffffc2f)
  var x114 uint64
  var x115 fiat_secp256k1_uint1
  x114, x115 = fiat_secp256k1_addcarryx_u64(x113, x110, 0x0)
  var x116 uint64
  var x117 fiat_secp256k1_uint1
  x116, x117 = fiat_secp256k1_addcarryx_u64(x111, x108, x115)
  var x118 uint64
  var x119 fiat_secp256k1_uint1
  x118, x119 = fiat_secp256k1_addcarryx_u64(x109, x106, x117)
  var x121 fiat_secp256k1_uint1
  _, x121 = fiat_secp256k1_addcarryx_u64(x96, x112, 0x0)
  var x122 uint64
  var x123 fiat_secp256k1_uint1
  x122, x123 = fiat_secp256k1_addcarryx_u64(x98, x114, x121)
  var x124 uint64
  var x125 fiat_secp256k1_uint1
  x124, x125 = fiat_secp256k1_addcarryx_u64(x100, x116, x123)
  var x126 uint64
  var x127 fiat_secp256k1_uint1
  x126, x127 = fiat_secp256k1_addcarryx_u64(x102, x118, x125)
  var x128 uint64
  var x129 fiat_secp256k1_uint1
  x128, x129 = fiat_secp256k1_addcarryx_u64((uint64(x103) + uint64(x95)), (uint64(x119) + x107), x127)
  var x130 uint64
  var x131 fiat_secp256k1_uint1
  x130, x131 = fiat_secp256k1_subborrowx_u64(x122, 0xfffffffefffffc2f, 0x0)
  var x132 uint64
  var x133 fiat_secp256k1_uint1
  x132, x133 = fiat_secp256k1_subborrowx_u64(x124, 0xffffffffffffffff, x131)
  var x134 uint64
  var x135 fiat_secp256k1_uint1
  x134, x135 = fiat_secp256k1_subborrowx_u64(x126, 0xffffffffffffffff, x133)
  var x136 uint64
  var x137 fiat_secp256k1_uint1
  x136, x137 = fiat_secp256k1_subborrowx_u64(x128, 0xffffffffffffffff, x135)
  var x139 fiat_secp256k1_uint1
  _, x139 = fiat_secp256k1_subborrowx_u64(uint64(x129), uint64(0x0), x137)
  var x140 uint64
  fiat_secp256k1_cmovznz_u64(&x140, x139, x130, x122)
  var x141 uint64
  fiat_secp256k1_cmovznz_u64(&x141, x139, x132, x124)
  var x142 uint64
  fiat_secp256k1_cmovznz_u64(&x142, x139, x134, x126)
  var x143 uint64
  fiat_secp256k1_cmovznz_u64(&x143, x139, x136, x128)
  out1[0] = x140
  out1[1] = x141
  out1[2] = x142
  out1[3] = x143
}

/*
 * The function fiat_secp256k1_to_montgomery translates a field element into the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = eval arg1 mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_secp256k1_to_montgomery(out1 *[4]uint64, arg1 *[4]uint64) {
  var x1 uint64 = (arg1[1])
  var x2 uint64 = (arg1[2])
  var x3 uint64 = (arg1[3])
  var x4 uint64 = (arg1[0])
  var x5 uint64
  var x6 uint64
  x6, x5 = bits.Mul64(x4, 0x7a2000e90a1)
  var x7 uint64
  var x8 fiat_secp256k1_uint1
  x7, x8 = fiat_secp256k1_addcarryx_u64(x6, x4, 0x0)
  var x9 uint64
  _, x9 = bits.Mul64(x5, 0xd838091dd2253531)
  var x11 uint64
  var x12 uint64
  x12, x11 = bits.Mul64(x9, 0xffffffffffffffff)
  var x13 uint64
  var x14 uint64
  x14, x13 = bits.Mul64(x9, 0xffffffffffffffff)
  var x15 uint64
  var x16 uint64
  x16, x15 = bits.Mul64(x9, 0xffffffffffffffff)
  var x17 uint64
  var x18 uint64
  x18, x17 = bits.Mul64(x9, 0xfffffffefffffc2f)
  var x19 uint64
  var x20 fiat_secp256k1_uint1
  x19, x20 = fiat_secp256k1_addcarryx_u64(x18, x15, 0x0)
  var x21 uint64
  var x22 fiat_secp256k1_uint1
  x21, x22 = fiat_secp256k1_addcarryx_u64(x16, x13, x20)
  var x23 uint64
  var x24 fiat_secp256k1_uint1
  x23, x24 = fiat_secp256k1_addcarryx_u64(x14, x11, x22)
  var x26 fiat_secp256k1_uint1
  _, x26 = fiat_secp256k1_addcarryx_u64(x5, x17, 0x0)
  var x27 uint64
  var x28 fiat_secp256k1_uint1
  x27, x28 = fiat_secp256k1_addcarryx_u64(x7, x19, x26)
  var x29 uint64
  var x30 fiat_secp256k1_uint1
  x29, x30 = fiat_secp256k1_addcarryx_u64(uint64(x8), x21, x28)
  var x31 uint64
  var x32 fiat_secp256k1_uint1
  x31, x32 = fiat_secp256k1_addcarryx_u64(uint64(0x0), x23, x30)
  var x33 uint64
  var x34 fiat_secp256k1_uint1
  x33, x34 = fiat_secp256k1_addcarryx_u64(uint64(0x0), (uint64(x24) + x12), x32)
  var x35 uint64
  var x36 uint64
  x36, x35 = bits.Mul64(x1, 0x7a2000e90a1)
  var x37 uint64
  var x38 fiat_secp256k1_uint1
  x37, x38 = fiat_secp256k1_addcarryx_u64(x36, x1, 0x0)
  var x39 uint64
  var x40 fiat_secp256k1_uint1
  x39, x40 = fiat_secp256k1_addcarryx_u64(x27, x35, 0x0)
  var x41 uint64
  var x42 fiat_secp256k1_uint1
  x41, x42 = fiat_secp256k1_addcarryx_u64(x29, x37, x40)
  var x43 uint64
  var x44 fiat_secp256k1_uint1
  x43, x44 = fiat_secp256k1_addcarryx_u64(x31, uint64(x38), x42)
  var x45 uint64
  var x46 fiat_secp256k1_uint1
  x45, x46 = fiat_secp256k1_addcarryx_u64(x33, uint64(0x0), x44)
  var x47 uint64
  _, x47 = bits.Mul64(x39, 0xd838091dd2253531)
  var x49 uint64
  var x50 uint64
  x50, x49 = bits.Mul64(x47, 0xffffffffffffffff)
  var x51 uint64
  var x52 uint64
  x52, x51 = bits.Mul64(x47, 0xffffffffffffffff)
  var x53 uint64
  var x54 uint64
  x54, x53 = bits.Mul64(x47, 0xffffffffffffffff)
  var x55 uint64
  var x56 uint64
  x56, x55 = bits.Mul64(x47, 0xfffffffefffffc2f)
  var x57 uint64
  var x58 fiat_secp256k1_uint1
  x57, x58 = fiat_secp256k1_addcarryx_u64(x56, x53, 0x0)
  var x59 uint64
  var x60 fiat_secp256k1_uint1
  x59, x60 = fiat_secp256k1_addcarryx_u64(x54, x51, x58)
  var x61 uint64
  var x62 fiat_secp256k1_uint1
  x61, x62 = fiat_secp256k1_addcarryx_u64(x52, x49, x60)
  var x64 fiat_secp256k1_uint1
  _, x64 = fiat_secp256k1_addcarryx_u64(x39, x55, 0x0)
  var x65 uint64
  var x66 fiat_secp256k1_uint1
  x65, x66 = fiat_secp256k1_addcarryx_u64(x41, x57, x64)
  var x67 uint64
  var x68 fiat_secp256k1_uint1
  x67, x68 = fiat_secp256k1_addcarryx_u64(x43, x59, x66)
  var x69 uint64
  var x70 fiat_secp256k1_uint1
  x69, x70 = fiat_secp256k1_addcarryx_u64(x45, x61, x68)
  var x71 uint64
  var x72 fiat_secp256k1_uint1
  x71, x72 = fiat_secp256k1_addcarryx_u64((uint64(x46) + uint64(x34)), (uint64(x62) + x50), x70)
  var x73 uint64
  var x74 uint64
  x74, x73 = bits.Mul64(x2, 0x7a2000e90a1)
  var x75 uint64
  var x76 fiat_secp256k1_uint1
  x75, x76 = fiat_secp256k1_addcarryx_u64(x74, x2, 0x0)
  var x77 uint64
  var x78 fiat_secp256k1_uint1
  x77, x78 = fiat_secp256k1_addcarryx_u64(x65, x73, 0x0)
  var x79 uint64
  var x80 fiat_secp256k1_uint1
  x79, x80 = fiat_secp256k1_addcarryx_u64(x67, x75, x78)
  var x81 uint64
  var x82 fiat_secp256k1_uint1
  x81, x82 = fiat_secp256k1_addcarryx_u64(x69, uint64(x76), x80)
  var x83 uint64
  var x84 fiat_secp256k1_uint1
  x83, x84 = fiat_secp256k1_addcarryx_u64(x71, uint64(0x0), x82)
  var x85 uint64
  _, x85 = bits.Mul64(x77, 0xd838091dd2253531)
  var x87 uint64
  var x88 uint64
  x88, x87 = bits.Mul64(x85, 0xffffffffffffffff)
  var x89 uint64
  var x90 uint64
  x90, x89 = bits.Mul64(x85, 0xffffffffffffffff)
  var x91 uint64
  var x92 uint64
  x92, x91 = bits.Mul64(x85, 0xffffffffffffffff)
  var x93 uint64
  var x94 uint64
  x94, x93 = bits.Mul64(x85, 0xfffffffefffffc2f)
  var x95 uint64
  var x96 fiat_secp256k1_uint1
  x95, x96 = fiat_secp256k1_addcarryx_u64(x94, x91, 0x0)
  var x97 uint64
  var x98 fiat_secp256k1_uint1
  x97, x98 = fiat_secp256k1_addcarryx_u64(x92, x89, x96)
  var x99 uint64
  var x100 fiat_secp256k1_uint1
  x99, x100 = fiat_secp256k1_addcarryx_u64(x90, x87, x98)
  var x102 fiat_secp256k1_uint1
  _, x102 = fiat_secp256k1_addcarryx_u64(x77, x93, 0x0)
  var x103 uint64
  var x104 fiat_secp256k1_uint1
  x103, x104 = fiat_secp256k1_addcarryx_u64(x79, x95, x102)
  var x105 uint64
  var x106 fiat_secp256k1_uint1
  x105, x106 = fiat_secp256k1_addcarryx_u64(x81, x97, x104)
  var x107 uint64
  var x108 fiat_secp256k1_uint1
  x107, x108 = fiat_secp256k1_addcarryx_u64(x83, x99, x106)
  var x109 uint64
  var x110 fiat_secp256k1_uint1
  x109, x110 = fiat_secp256k1_addcarryx_u64((uint64(x84) + uint64(x72)), (uint64(x100) + x88), x108)
  var x111 uint64
  var x112 uint64
  x112, x111 = bits.Mul64(x3, 0x7a2000e90a1)
  var x113 uint64
  var x114 fiat_secp256k1_uint1
  x113, x114 = fiat_secp256k1_addcarryx_u64(x112, x3, 0x0)
  var x115 uint64
  var x116 fiat_secp256k1_uint1
  x115, x116 = fiat_secp256k1_addcarryx_u64(x103, x111, 0x0)
  var x117 uint64
  var x118 fiat_secp256k1_uint1
  x117, x118 = fiat_secp256k1_addcarryx_u64(x105, x113, x116)
  var x119 uint64
  var x120 fiat_secp256k1_uint1
  x119, x120 = fiat_secp256k1_addcarryx_u64(x107, uint64(x114), x118)
  var x121 uint64
  var x122 fiat_secp256k1_uint1
  x121, x122 = fiat_secp256k1_addcarryx_u64(x109, uint64(0x0), x120)
  var x123 uint64
  _, x123 = bits.Mul64(x115, 0xd838091dd2253531)
  var x125 uint64
  var x126 uint64
  x126, x125 = bits.Mul64(x123, 0xffffffffffffffff)
  var x127 uint64
  var x128 uint64
  x128, x127 = bits.Mul64(x123, 0xffffffffffffffff)
  var x129 uint64
  var x130 uint64
  x130, x129 = bits.Mul64(x123, 0xffffffffffffffff)
  var x131 uint64
  var x132 uint64
  x132, x131 = bits.Mul64(x123, 0xfffffffefffffc2f)
  var x133 uint64
  var x134 fiat_secp256k1_uint1
  x133, x134 = fiat_secp256k1_addcarryx_u64(x132, x129, 0x0)
  var x135 uint64
  var x136 fiat_secp256k1_uint1
  x135, x136 = fiat_secp256k1_addcarryx_u64(x130, x127, x134)
  var x137 uint64
  var x138 fiat_secp256k1_uint1
  x137, x138 = fiat_secp256k1_addcarryx_u64(x128, x125, x136)
  var x140 fiat_secp256k1_uint1
  _, x140 = fiat_secp256k1_addcarryx_u64(x115, x131, 0x0)
  var x141 uint64
  var x142 fiat_secp256k1_uint1
  x141, x142 = fiat_secp256k1_addcarryx_u64(x117, x133, x140)
  var x143 uint64
  var x144 fiat_secp256k1_uint1
  x143, x144 = fiat_secp256k1_addcarryx_u64(x119, x135, x142)
  var x145 uint64
  var x146 fiat_secp256k1_uint1
  x145, x146 = fiat_secp256k1_addcarryx_u64(x121, x137, x144)
  var x147 uint64
  var x148 fiat_secp256k1_uint1
  x147, x148 = fiat_secp256k1_addcarryx_u64((uint64(x122) + uint64(x110)), (uint64(x138) + x126), x146)
  var x149 uint64
  var x150 fiat_secp256k1_uint1
  x149, x150 = fiat_secp256k1_subborrowx_u64(x141, 0xfffffffefffffc2f, 0x0)
  var x151 uint64
  var x152 fiat_secp256k1_uint1
  x151, x152 = fiat_secp256k1_subborrowx_u64(x143, 0xffffffffffffffff, x150)
  var x153 uint64
  var x154 fiat_secp256k1_uint1
  x153, x154 = fiat_secp256k1_subborrowx_u64(x145, 0xffffffffffffffff, x152)
  var x155 uint64
  var x156 fiat_secp256k1_uint1
  x155, x156 = fiat_secp256k1_subborrowx_u64(x147, 0xffffffffffffffff, x154)
  var x158 fiat_secp256k1_uint1
  _, x158 = fiat_secp256k1_subborrowx_u64(uint64(x148), uint64(0x0), x156)
  var x159 uint64
  fiat_secp256k1_cmovznz_u64(&x159, x158, x149, x141)
  var x160 uint64
  fiat_secp256k1_cmovznz_u64(&x160, x158, x151, x143)
  var x161 uint64
  fiat_secp256k1_cmovznz_u64(&x161, x158, x153, x145)
  var x162 uint64
  fiat_secp256k1_cmovznz_u64(&x162, x158, x155, x147)
  out1[0] = x159
  out1[1] = x160
  out1[2] = x161
  out1[3] = x162
}

/*
 * The function fiat_secp256k1_nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 */
/*inline*/
func fiat_secp256k1_nonzero(out1 *uint64, arg1 *[4]uint64) {
  var x1 uint64 = ((arg1[0]) | ((arg1[1]) | ((arg1[2]) | ((arg1[3]) | uint64(0x0)))))
  *out1 = x1
}

/*
 * The function fiat_secp256k1_selectznz is a multi-limb conditional select.
 * Postconditions:
 *   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_secp256k1_selectznz(out1 *[4]uint64, arg1 fiat_secp256k1_uint1, arg2 *[4]uint64, arg3 *[4]uint64) {
  var x1 uint64
  fiat_secp256k1_cmovznz_u64(&x1, arg1, (arg2[0]), (arg3[0]))
  var x2 uint64
  fiat_secp256k1_cmovznz_u64(&x2, arg1, (arg2[1]), (arg3[1]))
  var x3 uint64
  fiat_secp256k1_cmovznz_u64(&x3, arg1, (arg2[2]), (arg3[2]))
  var x4 uint64
  fiat_secp256k1_cmovznz_u64(&x4, arg1, (arg2[3]), (arg3[3]))
  out1[0] = x1
  out1[1] = x2
  out1[2] = x3
  out1[3] = x4
}

/*
 * The function fiat_secp256k1_to_bytes serializes a field element NOT in the Montgomery domain to bytes in little-endian order.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..31]
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
 */
/*inline*/
func fiat_secp256k1_to_bytes(out1 *[32]uint8, arg1 *[4]uint64) {
  var x1 uint64 = (arg1[3])
  var x2 uint64 = (arg1[2])
  var x3 uint64 = (arg1[1])
  var x4 uint64 = (arg1[0])
  var x5 uint8 = (uint8(x4) & 0xff)
  var x6 uint64 = (x4 >> 8)
  var x7 uint8 = (uint8(x6) & 0xff)
  var x8 uint64 = (x6 >> 8)
  var x9 uint8 = (uint8(x8) & 0xff)
  var x10 uint64 = (x8 >> 8)
  var x11 uint8 = (uint8(x10) & 0xff)
  var x12 uint64 = (x10 >> 8)
  var x13 uint8 = (uint8(x12) & 0xff)
  var x14 uint64 = (x12 >> 8)
  var x15 uint8 = (uint8(x14) & 0xff)
  var x16 uint64 = (x14 >> 8)
  var x17 uint8 = (uint8(x16) & 0xff)
  var x18 uint8 = uint8((x16 >> 8))
  var x19 uint8 = (uint8(x3) & 0xff)
  var x20 uint64 = (x3 >> 8)
  var x21 uint8 = (uint8(x20) & 0xff)
  var x22 uint64 = (x20 >> 8)
  var x23 uint8 = (uint8(x22) & 0xff)
  var x24 uint64 = (x22 >> 8)
  var x25 uint8 = (uint8(x24) & 0xff)
  var x26 uint64 = (x24 >> 8)
  var x27 uint8 = (uint8(x26) & 0xff)
  var x28 uint64 = (x26 >> 8)
  var x29 uint8 = (uint8(x28) & 0xff)
  var x30 uint64 = (x28 >> 8)
  var x31 uint8 = (uint8(x30) & 0xff)
  var x32 uint8 = uint8((x30 >> 8))
  var x33 uint8 = (uint8(x2) & 0xff)
  var x34 uint64 = (x2 >> 8)
  var x35 uint8 = (uint8(x34) & 0xff)
  var x36 uint64 = (x34 >> 8)
  var x37 uint8 = (uint8(x36) & 0xff)
  var x38 uint64 = (x36 >> 8)
  var x39 uint8 = (uint8(x38) & 0xff)
  var x40 uint64 = (x38 >> 8)
  var x41 uint8 = (uint8(x40) & 0xff)
  var x42 uint64 = (x40 >> 8)
  var x43 uint8 = (uint8(x42) & 0xff)
  var x44 uint64 = (x42 >> 8)
  var x45 uint8 = (uint8(x44) & 0xff)
  var x46 uint8 = uint8((x44 >> 8))
  var x47 uint8 = (uint8(x1) & 0xff)
  var x48 uint64 = (x1 >> 8)
  var x49 uint8 = (uint8(x48) & 0xff)
  var x50 uint64 = (x48 >> 8)
  var x51 uint8 = (uint8(x50) & 0xff)
  var x52 uint64 = (x50 >> 8)
  var x53 uint8 = (uint8(x52) & 0xff)
  var x54 uint64 = (x52 >> 8)
  var x55 uint8 = (uint8(x54) & 0xff)
  var x56 uint64 = (x54 >> 8)
  var x57 uint8 = (uint8(x56) & 0xff)
  var x58 uint64 = (x56 >> 8)
  var x59 uint8 = (uint8(x58) & 0xff)
  var x60 uint8 = uint8((x58 >> 8))
  out1[0] = x5
  out1[1] = x7
  out1[2] = x9
  out1[3] = x11
  out1[4] = x13
  out1[5] = x15
  out1[6] = x17
  out1[7] = x18
  out1[8] = x19
  out1[9] = x21
  out1[10] = x23
  out1[11] = x25
  out1[12] = x27
  out1[13] = x29
  out1[14] = x31
  out1[15] = x32
  out1[16] = x33
  out1[17] = x35
  out1[18] = x37
  out1[19] = x39
  out1[20] = x41
  out1[21] = x43
  out1[22] = x45
  out1[23] = x46
  out1[24] = x47
  out1[25] = x49
  out1[26] = x51
  out1[27] = x53
  out1[28] = x55
  out1[29] = x57
  out1[30] = x59
  out1[31] = x60
}

/*
 * The function fiat_secp256k1_from_bytes deserializes a field element NOT in the Montgomery domain from bytes in little-endian order.
 * Preconditions:
 *   0 ≤ bytes_eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = bytes_eval arg1 mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_secp256k1_from_bytes(out1 *[4]uint64, arg1 *[32]uint8) {
  var x1 uint64 = (uint64((arg1[31])) << 56)
  var x2 uint64 = (uint64((arg1[30])) << 48)
  var x3 uint64 = (uint64((arg1[29])) << 40)
  var x4 uint64 = (uint64((arg1[28])) << 32)
  var x5 uint64 = (uint64((arg1[27])) << 24)
  var x6 uint64 = (uint64((arg1[26])) << 16)
  var x7 uint64 = (uint64((arg1[25])) << 8)
  var x8 uint8 = (arg1[24])
  var x9 uint64 = (uint64((arg1[23])) << 56)
  var x10 uint64 = (uint64((arg1[22])) << 48)
  var x11 uint64 = (uint64((arg1[21])) << 40)
  var x12 uint64 = (uint64((arg1[20])) << 32)
  var x13 uint64 = (uint64((arg1[19])) << 24)
  var x14 uint64 = (uint64((arg1[18])) << 16)
  var x15 uint64 = (uint64((arg1[17])) << 8)
  var x16 uint8 = (arg1[16])
  var x17 uint64 = (uint64((arg1[15])) << 56)
  var x18 uint64 = (uint64((arg1[14])) << 48)
  var x19 uint64 = (uint64((arg1[13])) << 40)
  var x20 uint64 = (uint64((arg1[12])) << 32)
  var x21 uint64 = (uint64((arg1[11])) << 24)
  var x22 uint64 = (uint64((arg1[10])) << 16)
  var x23 uint64 = (uint64((arg1[9])) << 8)
  var x24 uint8 = (arg1[8])
  var x25 uint64 = (uint64((arg1[7])) << 56)
  var x26 uint64 = (uint64((arg1[6])) << 48)
  var x27 uint64 = (uint64((arg1[5])) << 40)
  var x28 uint64 = (uint64((arg1[4])) << 32)
  var x29 uint64 = (uint64((arg1[3])) << 24)
  var x30 uint64 = (uint64((arg1[2])) << 16)
  var x31 uint64 = (uint64((arg1[1])) << 8)
  var x32 uint8 = (arg1[0])
  var x33 uint64 = (x31 + uint64(x32))
  var x34 uint64 = (x30 + x33)
  var x35 uint64 = (x29 + x34)
  var x36 uint64 = (x28 + x35)
  var x37 uint64 = (x27 + x36)
  var x38 uint64 = (x26 + x37)
  var x39 uint64 = (x25 + x38)
  var x40 uint64 = (x23 + uint64(x24))
  var x41 uint64 = (x22 + x40)
  var x42 uint64 = (x21 + x41)
  var x43 uint64 = (x20 + x42)
  var x44 uint64 = (x19 + x43)
  var x45 uint64 = (x18 + x44)
  var x46 uint64 = (x17 + x45)
  var x47 uint64 = (x15 + uint64(x16))
  var x48 uint64 = (x14 + x47)
  var x49 uint64 = (x13 + x48)
  var x50 uint64 = (x12 + x49)
  var x51 uint64 = (x11 + x50)
  var x52 uint64 = (x10 + x51)
  var x53 uint64 = (x9 + x52)
  var x54 uint64 = (x7 + uint64(x8))
  var x55 uint64 = (x6 + x54)
  var x56 uint64 = (x5 + x55)
  var x57 uint64 = (x4 + x56)
  var x58 uint64 = (x3 + x57)
  var x59 uint64 = (x2 + x58)
  var x60 uint64 = (x1 + x59)
  out1[0] = x39
  out1[1] = x46
  out1[2] = x53
  out1[3] = x60
}

