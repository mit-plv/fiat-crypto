/* Autogenerated: src/ExtractionOCaml/word_by_word_montgomery --lang=Go --cmovznz-by-mul --widen-carry --widen-bytes p224 '2^224 - 2^96 + 1' 32 mul square add sub opp from_montgomery nonzero selectznz to_bytes from_bytes */
/* curve description: p224 */
/* requested operations: mul, square, add, sub, opp, from_montgomery, nonzero, selectznz, to_bytes, from_bytes */
/* m = 0xffffffffffffffffffffffffffffffff000000000000000000000001 (from "2^224 - 2^96 + 1") */
/* machine_wordsize = 32 (from "32") */
/*                                                                    */
/* NOTE: In addition to the bounds specified above each function, all */
/*   functions synthesized for this Montgomery arithmetic require the */
/*   input to be strictly less than the prime modulus (m), and also   */
/*   require the input to be in the unique saturated representation.  */
/*   All functions also ensure that these two properties are true of  */
/*   return values.                                                   */

package fiat_p224

import "math/bits"


/*
 * The function fiat_p224_cmovznz_u32 is a single-word conditional move.
 * Postconditions:
 *   out1 = (if arg1 = 0 then arg2 else arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffff]
 *   arg3: [0x0 ~> 0xffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffff]
 */
/*inline*/
func fiat_p224_cmovznz_u32(out1 *uint32, arg1 uint32, arg2 uint32, arg3 uint32) {
  var x1 uint32 = (arg1 * 0xffffffff)
  var x2 uint32 = ((x1 & arg3) | ((^x1) & arg2))
  *out1 = x2
}

/*
 * The function fiat_p224_mul multiplies two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 *   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_p224_mul(out1 *[7]uint32, arg1 *[7]uint32, arg2 *[7]uint32) {
  var x1 uint32 = (arg1[1])
  var x2 uint32 = (arg1[2])
  var x3 uint32 = (arg1[3])
  var x4 uint32 = (arg1[4])
  var x5 uint32 = (arg1[5])
  var x6 uint32 = (arg1[6])
  var x7 uint32 = (arg1[0])
  var x8 uint32
  var x9 uint32
  x8, x9 = bits.Mul32(x7, (arg2[6]))
  var x10 uint32
  var x11 uint32
  x10, x11 = bits.Mul32(x7, (arg2[5]))
  var x12 uint32
  var x13 uint32
  x12, x13 = bits.Mul32(x7, (arg2[4]))
  var x14 uint32
  var x15 uint32
  x14, x15 = bits.Mul32(x7, (arg2[3]))
  var x16 uint32
  var x17 uint32
  x16, x17 = bits.Mul32(x7, (arg2[2]))
  var x18 uint32
  var x19 uint32
  x18, x19 = bits.Mul32(x7, (arg2[1]))
  var x20 uint32
  var x21 uint32
  x20, x21 = bits.Mul32(x7, (arg2[0]))
  var x22 uint32
  var x23 uint32
  x22, x23 = bits.Add32(x21, x18, 0x0)
  var x24 uint32
  var x25 uint32
  x24, x25 = bits.Add32(x19, x16, x23)
  var x26 uint32
  var x27 uint32
  x26, x27 = bits.Add32(x17, x14, x25)
  var x28 uint32
  var x29 uint32
  x28, x29 = bits.Add32(x15, x12, x27)
  var x30 uint32
  var x31 uint32
  x30, x31 = bits.Add32(x13, x10, x29)
  var x32 uint32
  var x33 uint32
  x32, x33 = bits.Add32(x11, x8, x31)
  var x34 uint32
  x34, _ = bits.Add32(x9, uint32(0x0), x33)
  var x36 uint32
  x36, _ = bits.Mul32(x20, 0xffffffff)
  var x38 uint32
  var x39 uint32
  x38, x39 = bits.Mul32(x36, 0xffffffff)
  var x40 uint32
  var x41 uint32
  x40, x41 = bits.Mul32(x36, 0xffffffff)
  var x42 uint32
  var x43 uint32
  x42, x43 = bits.Mul32(x36, 0xffffffff)
  var x44 uint32
  var x45 uint32
  x44, x45 = bits.Mul32(x36, 0xffffffff)
  var x46 uint32
  var x47 uint32
  x46, x47 = bits.Add32(x45, x42, 0x0)
  var x48 uint32
  var x49 uint32
  x48, x49 = bits.Add32(x43, x40, x47)
  var x50 uint32
  var x51 uint32
  x50, x51 = bits.Add32(x41, x38, x49)
  var x52 uint32
  x52, _ = bits.Add32(x39, uint32(0x0), x51)
  var x55 uint32
  _, x55 = bits.Add32(x20, x36, 0x0)
  var x56 uint32
  var x57 uint32
  x56, x57 = bits.Add32(x22, uint32(0x0), x55)
  var x58 uint32
  var x59 uint32
  x58, x59 = bits.Add32(x24, uint32(0x0), x57)
  var x60 uint32
  var x61 uint32
  x60, x61 = bits.Add32(x26, x44, x59)
  var x62 uint32
  var x63 uint32
  x62, x63 = bits.Add32(x28, x46, x61)
  var x64 uint32
  var x65 uint32
  x64, x65 = bits.Add32(x30, x48, x63)
  var x66 uint32
  var x67 uint32
  x66, x67 = bits.Add32(x32, x50, x65)
  var x68 uint32
  var x69 uint32
  x68, x69 = bits.Add32(x34, x52, x67)
  var x70 uint32
  x70, _ = bits.Add32(uint32(0x0), uint32(0x0), x69)
  var x72 uint32
  var x73 uint32
  x72, x73 = bits.Mul32(x1, (arg2[6]))
  var x74 uint32
  var x75 uint32
  x74, x75 = bits.Mul32(x1, (arg2[5]))
  var x76 uint32
  var x77 uint32
  x76, x77 = bits.Mul32(x1, (arg2[4]))
  var x78 uint32
  var x79 uint32
  x78, x79 = bits.Mul32(x1, (arg2[3]))
  var x80 uint32
  var x81 uint32
  x80, x81 = bits.Mul32(x1, (arg2[2]))
  var x82 uint32
  var x83 uint32
  x82, x83 = bits.Mul32(x1, (arg2[1]))
  var x84 uint32
  var x85 uint32
  x84, x85 = bits.Mul32(x1, (arg2[0]))
  var x86 uint32
  var x87 uint32
  x86, x87 = bits.Add32(x85, x82, 0x0)
  var x88 uint32
  var x89 uint32
  x88, x89 = bits.Add32(x83, x80, x87)
  var x90 uint32
  var x91 uint32
  x90, x91 = bits.Add32(x81, x78, x89)
  var x92 uint32
  var x93 uint32
  x92, x93 = bits.Add32(x79, x76, x91)
  var x94 uint32
  var x95 uint32
  x94, x95 = bits.Add32(x77, x74, x93)
  var x96 uint32
  var x97 uint32
  x96, x97 = bits.Add32(x75, x72, x95)
  var x98 uint32
  x98, _ = bits.Add32(x73, uint32(0x0), x97)
  var x100 uint32
  var x101 uint32
  x100, x101 = bits.Add32(x56, x84, 0x0)
  var x102 uint32
  var x103 uint32
  x102, x103 = bits.Add32(x58, x86, x101)
  var x104 uint32
  var x105 uint32
  x104, x105 = bits.Add32(x60, x88, x103)
  var x106 uint32
  var x107 uint32
  x106, x107 = bits.Add32(x62, x90, x105)
  var x108 uint32
  var x109 uint32
  x108, x109 = bits.Add32(x64, x92, x107)
  var x110 uint32
  var x111 uint32
  x110, x111 = bits.Add32(x66, x94, x109)
  var x112 uint32
  var x113 uint32
  x112, x113 = bits.Add32(x68, x96, x111)
  var x114 uint32
  var x115 uint32
  x114, x115 = bits.Add32(x70, x98, x113)
  var x116 uint32
  x116, _ = bits.Mul32(x100, 0xffffffff)
  var x118 uint32
  var x119 uint32
  x118, x119 = bits.Mul32(x116, 0xffffffff)
  var x120 uint32
  var x121 uint32
  x120, x121 = bits.Mul32(x116, 0xffffffff)
  var x122 uint32
  var x123 uint32
  x122, x123 = bits.Mul32(x116, 0xffffffff)
  var x124 uint32
  var x125 uint32
  x124, x125 = bits.Mul32(x116, 0xffffffff)
  var x126 uint32
  var x127 uint32
  x126, x127 = bits.Add32(x125, x122, 0x0)
  var x128 uint32
  var x129 uint32
  x128, x129 = bits.Add32(x123, x120, x127)
  var x130 uint32
  var x131 uint32
  x130, x131 = bits.Add32(x121, x118, x129)
  var x132 uint32
  x132, _ = bits.Add32(x119, uint32(0x0), x131)
  var x135 uint32
  _, x135 = bits.Add32(x100, x116, 0x0)
  var x136 uint32
  var x137 uint32
  x136, x137 = bits.Add32(x102, uint32(0x0), x135)
  var x138 uint32
  var x139 uint32
  x138, x139 = bits.Add32(x104, uint32(0x0), x137)
  var x140 uint32
  var x141 uint32
  x140, x141 = bits.Add32(x106, x124, x139)
  var x142 uint32
  var x143 uint32
  x142, x143 = bits.Add32(x108, x126, x141)
  var x144 uint32
  var x145 uint32
  x144, x145 = bits.Add32(x110, x128, x143)
  var x146 uint32
  var x147 uint32
  x146, x147 = bits.Add32(x112, x130, x145)
  var x148 uint32
  var x149 uint32
  x148, x149 = bits.Add32(x114, x132, x147)
  var x150 uint32
  x150, _ = bits.Add32(x115, uint32(0x0), x149)
  var x152 uint32
  var x153 uint32
  x152, x153 = bits.Mul32(x2, (arg2[6]))
  var x154 uint32
  var x155 uint32
  x154, x155 = bits.Mul32(x2, (arg2[5]))
  var x156 uint32
  var x157 uint32
  x156, x157 = bits.Mul32(x2, (arg2[4]))
  var x158 uint32
  var x159 uint32
  x158, x159 = bits.Mul32(x2, (arg2[3]))
  var x160 uint32
  var x161 uint32
  x160, x161 = bits.Mul32(x2, (arg2[2]))
  var x162 uint32
  var x163 uint32
  x162, x163 = bits.Mul32(x2, (arg2[1]))
  var x164 uint32
  var x165 uint32
  x164, x165 = bits.Mul32(x2, (arg2[0]))
  var x166 uint32
  var x167 uint32
  x166, x167 = bits.Add32(x165, x162, 0x0)
  var x168 uint32
  var x169 uint32
  x168, x169 = bits.Add32(x163, x160, x167)
  var x170 uint32
  var x171 uint32
  x170, x171 = bits.Add32(x161, x158, x169)
  var x172 uint32
  var x173 uint32
  x172, x173 = bits.Add32(x159, x156, x171)
  var x174 uint32
  var x175 uint32
  x174, x175 = bits.Add32(x157, x154, x173)
  var x176 uint32
  var x177 uint32
  x176, x177 = bits.Add32(x155, x152, x175)
  var x178 uint32
  x178, _ = bits.Add32(x153, uint32(0x0), x177)
  var x180 uint32
  var x181 uint32
  x180, x181 = bits.Add32(x136, x164, 0x0)
  var x182 uint32
  var x183 uint32
  x182, x183 = bits.Add32(x138, x166, x181)
  var x184 uint32
  var x185 uint32
  x184, x185 = bits.Add32(x140, x168, x183)
  var x186 uint32
  var x187 uint32
  x186, x187 = bits.Add32(x142, x170, x185)
  var x188 uint32
  var x189 uint32
  x188, x189 = bits.Add32(x144, x172, x187)
  var x190 uint32
  var x191 uint32
  x190, x191 = bits.Add32(x146, x174, x189)
  var x192 uint32
  var x193 uint32
  x192, x193 = bits.Add32(x148, x176, x191)
  var x194 uint32
  var x195 uint32
  x194, x195 = bits.Add32(x150, x178, x193)
  var x196 uint32
  x196, _ = bits.Mul32(x180, 0xffffffff)
  var x198 uint32
  var x199 uint32
  x198, x199 = bits.Mul32(x196, 0xffffffff)
  var x200 uint32
  var x201 uint32
  x200, x201 = bits.Mul32(x196, 0xffffffff)
  var x202 uint32
  var x203 uint32
  x202, x203 = bits.Mul32(x196, 0xffffffff)
  var x204 uint32
  var x205 uint32
  x204, x205 = bits.Mul32(x196, 0xffffffff)
  var x206 uint32
  var x207 uint32
  x206, x207 = bits.Add32(x205, x202, 0x0)
  var x208 uint32
  var x209 uint32
  x208, x209 = bits.Add32(x203, x200, x207)
  var x210 uint32
  var x211 uint32
  x210, x211 = bits.Add32(x201, x198, x209)
  var x212 uint32
  x212, _ = bits.Add32(x199, uint32(0x0), x211)
  var x215 uint32
  _, x215 = bits.Add32(x180, x196, 0x0)
  var x216 uint32
  var x217 uint32
  x216, x217 = bits.Add32(x182, uint32(0x0), x215)
  var x218 uint32
  var x219 uint32
  x218, x219 = bits.Add32(x184, uint32(0x0), x217)
  var x220 uint32
  var x221 uint32
  x220, x221 = bits.Add32(x186, x204, x219)
  var x222 uint32
  var x223 uint32
  x222, x223 = bits.Add32(x188, x206, x221)
  var x224 uint32
  var x225 uint32
  x224, x225 = bits.Add32(x190, x208, x223)
  var x226 uint32
  var x227 uint32
  x226, x227 = bits.Add32(x192, x210, x225)
  var x228 uint32
  var x229 uint32
  x228, x229 = bits.Add32(x194, x212, x227)
  var x230 uint32
  x230, _ = bits.Add32(x195, uint32(0x0), x229)
  var x232 uint32
  var x233 uint32
  x232, x233 = bits.Mul32(x3, (arg2[6]))
  var x234 uint32
  var x235 uint32
  x234, x235 = bits.Mul32(x3, (arg2[5]))
  var x236 uint32
  var x237 uint32
  x236, x237 = bits.Mul32(x3, (arg2[4]))
  var x238 uint32
  var x239 uint32
  x238, x239 = bits.Mul32(x3, (arg2[3]))
  var x240 uint32
  var x241 uint32
  x240, x241 = bits.Mul32(x3, (arg2[2]))
  var x242 uint32
  var x243 uint32
  x242, x243 = bits.Mul32(x3, (arg2[1]))
  var x244 uint32
  var x245 uint32
  x244, x245 = bits.Mul32(x3, (arg2[0]))
  var x246 uint32
  var x247 uint32
  x246, x247 = bits.Add32(x245, x242, 0x0)
  var x248 uint32
  var x249 uint32
  x248, x249 = bits.Add32(x243, x240, x247)
  var x250 uint32
  var x251 uint32
  x250, x251 = bits.Add32(x241, x238, x249)
  var x252 uint32
  var x253 uint32
  x252, x253 = bits.Add32(x239, x236, x251)
  var x254 uint32
  var x255 uint32
  x254, x255 = bits.Add32(x237, x234, x253)
  var x256 uint32
  var x257 uint32
  x256, x257 = bits.Add32(x235, x232, x255)
  var x258 uint32
  x258, _ = bits.Add32(x233, uint32(0x0), x257)
  var x260 uint32
  var x261 uint32
  x260, x261 = bits.Add32(x216, x244, 0x0)
  var x262 uint32
  var x263 uint32
  x262, x263 = bits.Add32(x218, x246, x261)
  var x264 uint32
  var x265 uint32
  x264, x265 = bits.Add32(x220, x248, x263)
  var x266 uint32
  var x267 uint32
  x266, x267 = bits.Add32(x222, x250, x265)
  var x268 uint32
  var x269 uint32
  x268, x269 = bits.Add32(x224, x252, x267)
  var x270 uint32
  var x271 uint32
  x270, x271 = bits.Add32(x226, x254, x269)
  var x272 uint32
  var x273 uint32
  x272, x273 = bits.Add32(x228, x256, x271)
  var x274 uint32
  var x275 uint32
  x274, x275 = bits.Add32(x230, x258, x273)
  var x276 uint32
  x276, _ = bits.Mul32(x260, 0xffffffff)
  var x278 uint32
  var x279 uint32
  x278, x279 = bits.Mul32(x276, 0xffffffff)
  var x280 uint32
  var x281 uint32
  x280, x281 = bits.Mul32(x276, 0xffffffff)
  var x282 uint32
  var x283 uint32
  x282, x283 = bits.Mul32(x276, 0xffffffff)
  var x284 uint32
  var x285 uint32
  x284, x285 = bits.Mul32(x276, 0xffffffff)
  var x286 uint32
  var x287 uint32
  x286, x287 = bits.Add32(x285, x282, 0x0)
  var x288 uint32
  var x289 uint32
  x288, x289 = bits.Add32(x283, x280, x287)
  var x290 uint32
  var x291 uint32
  x290, x291 = bits.Add32(x281, x278, x289)
  var x292 uint32
  x292, _ = bits.Add32(x279, uint32(0x0), x291)
  var x295 uint32
  _, x295 = bits.Add32(x260, x276, 0x0)
  var x296 uint32
  var x297 uint32
  x296, x297 = bits.Add32(x262, uint32(0x0), x295)
  var x298 uint32
  var x299 uint32
  x298, x299 = bits.Add32(x264, uint32(0x0), x297)
  var x300 uint32
  var x301 uint32
  x300, x301 = bits.Add32(x266, x284, x299)
  var x302 uint32
  var x303 uint32
  x302, x303 = bits.Add32(x268, x286, x301)
  var x304 uint32
  var x305 uint32
  x304, x305 = bits.Add32(x270, x288, x303)
  var x306 uint32
  var x307 uint32
  x306, x307 = bits.Add32(x272, x290, x305)
  var x308 uint32
  var x309 uint32
  x308, x309 = bits.Add32(x274, x292, x307)
  var x310 uint32
  x310, _ = bits.Add32(x275, uint32(0x0), x309)
  var x312 uint32
  var x313 uint32
  x312, x313 = bits.Mul32(x4, (arg2[6]))
  var x314 uint32
  var x315 uint32
  x314, x315 = bits.Mul32(x4, (arg2[5]))
  var x316 uint32
  var x317 uint32
  x316, x317 = bits.Mul32(x4, (arg2[4]))
  var x318 uint32
  var x319 uint32
  x318, x319 = bits.Mul32(x4, (arg2[3]))
  var x320 uint32
  var x321 uint32
  x320, x321 = bits.Mul32(x4, (arg2[2]))
  var x322 uint32
  var x323 uint32
  x322, x323 = bits.Mul32(x4, (arg2[1]))
  var x324 uint32
  var x325 uint32
  x324, x325 = bits.Mul32(x4, (arg2[0]))
  var x326 uint32
  var x327 uint32
  x326, x327 = bits.Add32(x325, x322, 0x0)
  var x328 uint32
  var x329 uint32
  x328, x329 = bits.Add32(x323, x320, x327)
  var x330 uint32
  var x331 uint32
  x330, x331 = bits.Add32(x321, x318, x329)
  var x332 uint32
  var x333 uint32
  x332, x333 = bits.Add32(x319, x316, x331)
  var x334 uint32
  var x335 uint32
  x334, x335 = bits.Add32(x317, x314, x333)
  var x336 uint32
  var x337 uint32
  x336, x337 = bits.Add32(x315, x312, x335)
  var x338 uint32
  x338, _ = bits.Add32(x313, uint32(0x0), x337)
  var x340 uint32
  var x341 uint32
  x340, x341 = bits.Add32(x296, x324, 0x0)
  var x342 uint32
  var x343 uint32
  x342, x343 = bits.Add32(x298, x326, x341)
  var x344 uint32
  var x345 uint32
  x344, x345 = bits.Add32(x300, x328, x343)
  var x346 uint32
  var x347 uint32
  x346, x347 = bits.Add32(x302, x330, x345)
  var x348 uint32
  var x349 uint32
  x348, x349 = bits.Add32(x304, x332, x347)
  var x350 uint32
  var x351 uint32
  x350, x351 = bits.Add32(x306, x334, x349)
  var x352 uint32
  var x353 uint32
  x352, x353 = bits.Add32(x308, x336, x351)
  var x354 uint32
  var x355 uint32
  x354, x355 = bits.Add32(x310, x338, x353)
  var x356 uint32
  x356, _ = bits.Mul32(x340, 0xffffffff)
  var x358 uint32
  var x359 uint32
  x358, x359 = bits.Mul32(x356, 0xffffffff)
  var x360 uint32
  var x361 uint32
  x360, x361 = bits.Mul32(x356, 0xffffffff)
  var x362 uint32
  var x363 uint32
  x362, x363 = bits.Mul32(x356, 0xffffffff)
  var x364 uint32
  var x365 uint32
  x364, x365 = bits.Mul32(x356, 0xffffffff)
  var x366 uint32
  var x367 uint32
  x366, x367 = bits.Add32(x365, x362, 0x0)
  var x368 uint32
  var x369 uint32
  x368, x369 = bits.Add32(x363, x360, x367)
  var x370 uint32
  var x371 uint32
  x370, x371 = bits.Add32(x361, x358, x369)
  var x372 uint32
  x372, _ = bits.Add32(x359, uint32(0x0), x371)
  var x375 uint32
  _, x375 = bits.Add32(x340, x356, 0x0)
  var x376 uint32
  var x377 uint32
  x376, x377 = bits.Add32(x342, uint32(0x0), x375)
  var x378 uint32
  var x379 uint32
  x378, x379 = bits.Add32(x344, uint32(0x0), x377)
  var x380 uint32
  var x381 uint32
  x380, x381 = bits.Add32(x346, x364, x379)
  var x382 uint32
  var x383 uint32
  x382, x383 = bits.Add32(x348, x366, x381)
  var x384 uint32
  var x385 uint32
  x384, x385 = bits.Add32(x350, x368, x383)
  var x386 uint32
  var x387 uint32
  x386, x387 = bits.Add32(x352, x370, x385)
  var x388 uint32
  var x389 uint32
  x388, x389 = bits.Add32(x354, x372, x387)
  var x390 uint32
  x390, _ = bits.Add32(x355, uint32(0x0), x389)
  var x392 uint32
  var x393 uint32
  x392, x393 = bits.Mul32(x5, (arg2[6]))
  var x394 uint32
  var x395 uint32
  x394, x395 = bits.Mul32(x5, (arg2[5]))
  var x396 uint32
  var x397 uint32
  x396, x397 = bits.Mul32(x5, (arg2[4]))
  var x398 uint32
  var x399 uint32
  x398, x399 = bits.Mul32(x5, (arg2[3]))
  var x400 uint32
  var x401 uint32
  x400, x401 = bits.Mul32(x5, (arg2[2]))
  var x402 uint32
  var x403 uint32
  x402, x403 = bits.Mul32(x5, (arg2[1]))
  var x404 uint32
  var x405 uint32
  x404, x405 = bits.Mul32(x5, (arg2[0]))
  var x406 uint32
  var x407 uint32
  x406, x407 = bits.Add32(x405, x402, 0x0)
  var x408 uint32
  var x409 uint32
  x408, x409 = bits.Add32(x403, x400, x407)
  var x410 uint32
  var x411 uint32
  x410, x411 = bits.Add32(x401, x398, x409)
  var x412 uint32
  var x413 uint32
  x412, x413 = bits.Add32(x399, x396, x411)
  var x414 uint32
  var x415 uint32
  x414, x415 = bits.Add32(x397, x394, x413)
  var x416 uint32
  var x417 uint32
  x416, x417 = bits.Add32(x395, x392, x415)
  var x418 uint32
  x418, _ = bits.Add32(x393, uint32(0x0), x417)
  var x420 uint32
  var x421 uint32
  x420, x421 = bits.Add32(x376, x404, 0x0)
  var x422 uint32
  var x423 uint32
  x422, x423 = bits.Add32(x378, x406, x421)
  var x424 uint32
  var x425 uint32
  x424, x425 = bits.Add32(x380, x408, x423)
  var x426 uint32
  var x427 uint32
  x426, x427 = bits.Add32(x382, x410, x425)
  var x428 uint32
  var x429 uint32
  x428, x429 = bits.Add32(x384, x412, x427)
  var x430 uint32
  var x431 uint32
  x430, x431 = bits.Add32(x386, x414, x429)
  var x432 uint32
  var x433 uint32
  x432, x433 = bits.Add32(x388, x416, x431)
  var x434 uint32
  var x435 uint32
  x434, x435 = bits.Add32(x390, x418, x433)
  var x436 uint32
  x436, _ = bits.Mul32(x420, 0xffffffff)
  var x438 uint32
  var x439 uint32
  x438, x439 = bits.Mul32(x436, 0xffffffff)
  var x440 uint32
  var x441 uint32
  x440, x441 = bits.Mul32(x436, 0xffffffff)
  var x442 uint32
  var x443 uint32
  x442, x443 = bits.Mul32(x436, 0xffffffff)
  var x444 uint32
  var x445 uint32
  x444, x445 = bits.Mul32(x436, 0xffffffff)
  var x446 uint32
  var x447 uint32
  x446, x447 = bits.Add32(x445, x442, 0x0)
  var x448 uint32
  var x449 uint32
  x448, x449 = bits.Add32(x443, x440, x447)
  var x450 uint32
  var x451 uint32
  x450, x451 = bits.Add32(x441, x438, x449)
  var x452 uint32
  x452, _ = bits.Add32(x439, uint32(0x0), x451)
  var x455 uint32
  _, x455 = bits.Add32(x420, x436, 0x0)
  var x456 uint32
  var x457 uint32
  x456, x457 = bits.Add32(x422, uint32(0x0), x455)
  var x458 uint32
  var x459 uint32
  x458, x459 = bits.Add32(x424, uint32(0x0), x457)
  var x460 uint32
  var x461 uint32
  x460, x461 = bits.Add32(x426, x444, x459)
  var x462 uint32
  var x463 uint32
  x462, x463 = bits.Add32(x428, x446, x461)
  var x464 uint32
  var x465 uint32
  x464, x465 = bits.Add32(x430, x448, x463)
  var x466 uint32
  var x467 uint32
  x466, x467 = bits.Add32(x432, x450, x465)
  var x468 uint32
  var x469 uint32
  x468, x469 = bits.Add32(x434, x452, x467)
  var x470 uint32
  x470, _ = bits.Add32(x435, uint32(0x0), x469)
  var x472 uint32
  var x473 uint32
  x472, x473 = bits.Mul32(x6, (arg2[6]))
  var x474 uint32
  var x475 uint32
  x474, x475 = bits.Mul32(x6, (arg2[5]))
  var x476 uint32
  var x477 uint32
  x476, x477 = bits.Mul32(x6, (arg2[4]))
  var x478 uint32
  var x479 uint32
  x478, x479 = bits.Mul32(x6, (arg2[3]))
  var x480 uint32
  var x481 uint32
  x480, x481 = bits.Mul32(x6, (arg2[2]))
  var x482 uint32
  var x483 uint32
  x482, x483 = bits.Mul32(x6, (arg2[1]))
  var x484 uint32
  var x485 uint32
  x484, x485 = bits.Mul32(x6, (arg2[0]))
  var x486 uint32
  var x487 uint32
  x486, x487 = bits.Add32(x485, x482, 0x0)
  var x488 uint32
  var x489 uint32
  x488, x489 = bits.Add32(x483, x480, x487)
  var x490 uint32
  var x491 uint32
  x490, x491 = bits.Add32(x481, x478, x489)
  var x492 uint32
  var x493 uint32
  x492, x493 = bits.Add32(x479, x476, x491)
  var x494 uint32
  var x495 uint32
  x494, x495 = bits.Add32(x477, x474, x493)
  var x496 uint32
  var x497 uint32
  x496, x497 = bits.Add32(x475, x472, x495)
  var x498 uint32
  x498, _ = bits.Add32(x473, uint32(0x0), x497)
  var x500 uint32
  var x501 uint32
  x500, x501 = bits.Add32(x456, x484, 0x0)
  var x502 uint32
  var x503 uint32
  x502, x503 = bits.Add32(x458, x486, x501)
  var x504 uint32
  var x505 uint32
  x504, x505 = bits.Add32(x460, x488, x503)
  var x506 uint32
  var x507 uint32
  x506, x507 = bits.Add32(x462, x490, x505)
  var x508 uint32
  var x509 uint32
  x508, x509 = bits.Add32(x464, x492, x507)
  var x510 uint32
  var x511 uint32
  x510, x511 = bits.Add32(x466, x494, x509)
  var x512 uint32
  var x513 uint32
  x512, x513 = bits.Add32(x468, x496, x511)
  var x514 uint32
  var x515 uint32
  x514, x515 = bits.Add32(x470, x498, x513)
  var x516 uint32
  x516, _ = bits.Mul32(x500, 0xffffffff)
  var x518 uint32
  var x519 uint32
  x518, x519 = bits.Mul32(x516, 0xffffffff)
  var x520 uint32
  var x521 uint32
  x520, x521 = bits.Mul32(x516, 0xffffffff)
  var x522 uint32
  var x523 uint32
  x522, x523 = bits.Mul32(x516, 0xffffffff)
  var x524 uint32
  var x525 uint32
  x524, x525 = bits.Mul32(x516, 0xffffffff)
  var x526 uint32
  var x527 uint32
  x526, x527 = bits.Add32(x525, x522, 0x0)
  var x528 uint32
  var x529 uint32
  x528, x529 = bits.Add32(x523, x520, x527)
  var x530 uint32
  var x531 uint32
  x530, x531 = bits.Add32(x521, x518, x529)
  var x532 uint32
  x532, _ = bits.Add32(x519, uint32(0x0), x531)
  var x535 uint32
  _, x535 = bits.Add32(x500, x516, 0x0)
  var x536 uint32
  var x537 uint32
  x536, x537 = bits.Add32(x502, uint32(0x0), x535)
  var x538 uint32
  var x539 uint32
  x538, x539 = bits.Add32(x504, uint32(0x0), x537)
  var x540 uint32
  var x541 uint32
  x540, x541 = bits.Add32(x506, x524, x539)
  var x542 uint32
  var x543 uint32
  x542, x543 = bits.Add32(x508, x526, x541)
  var x544 uint32
  var x545 uint32
  x544, x545 = bits.Add32(x510, x528, x543)
  var x546 uint32
  var x547 uint32
  x546, x547 = bits.Add32(x512, x530, x545)
  var x548 uint32
  var x549 uint32
  x548, x549 = bits.Add32(x514, x532, x547)
  var x550 uint32
  x550, _ = bits.Add32(x515, uint32(0x0), x549)
  var x552 uint32
  var x553 uint32
  x552, x553 = bits.Sub32(x536, 0x1, uint32(0x0))
  var x554 uint32
  var x555 uint32
  x554, x555 = bits.Sub32(x538, uint32(0x0), x553)
  var x556 uint32
  var x557 uint32
  x556, x557 = bits.Sub32(x540, uint32(0x0), x555)
  var x558 uint32
  var x559 uint32
  x558, x559 = bits.Sub32(x542, 0xffffffff, x557)
  var x560 uint32
  var x561 uint32
  x560, x561 = bits.Sub32(x544, 0xffffffff, x559)
  var x562 uint32
  var x563 uint32
  x562, x563 = bits.Sub32(x546, 0xffffffff, x561)
  var x564 uint32
  var x565 uint32
  x564, x565 = bits.Sub32(x548, 0xffffffff, x563)
  var x567 uint32
  _, x567 = bits.Sub32(x550, uint32(0x0), x565)
  var x568 uint32
  fiat_p224_cmovznz_u32(&x568, x567, x552, x536)
  var x569 uint32
  fiat_p224_cmovznz_u32(&x569, x567, x554, x538)
  var x570 uint32
  fiat_p224_cmovznz_u32(&x570, x567, x556, x540)
  var x571 uint32
  fiat_p224_cmovznz_u32(&x571, x567, x558, x542)
  var x572 uint32
  fiat_p224_cmovznz_u32(&x572, x567, x560, x544)
  var x573 uint32
  fiat_p224_cmovznz_u32(&x573, x567, x562, x546)
  var x574 uint32
  fiat_p224_cmovznz_u32(&x574, x567, x564, x548)
  out1[0] = x568
  out1[1] = x569
  out1[2] = x570
  out1[3] = x571
  out1[4] = x572
  out1[5] = x573
  out1[6] = x574
}

/*
 * The function fiat_p224_square squares a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_p224_square(out1 *[7]uint32, arg1 *[7]uint32) {
  var x1 uint32 = (arg1[1])
  var x2 uint32 = (arg1[2])
  var x3 uint32 = (arg1[3])
  var x4 uint32 = (arg1[4])
  var x5 uint32 = (arg1[5])
  var x6 uint32 = (arg1[6])
  var x7 uint32 = (arg1[0])
  var x8 uint32
  var x9 uint32
  x8, x9 = bits.Mul32(x7, (arg1[6]))
  var x10 uint32
  var x11 uint32
  x10, x11 = bits.Mul32(x7, (arg1[5]))
  var x12 uint32
  var x13 uint32
  x12, x13 = bits.Mul32(x7, (arg1[4]))
  var x14 uint32
  var x15 uint32
  x14, x15 = bits.Mul32(x7, (arg1[3]))
  var x16 uint32
  var x17 uint32
  x16, x17 = bits.Mul32(x7, (arg1[2]))
  var x18 uint32
  var x19 uint32
  x18, x19 = bits.Mul32(x7, (arg1[1]))
  var x20 uint32
  var x21 uint32
  x20, x21 = bits.Mul32(x7, (arg1[0]))
  var x22 uint32
  var x23 uint32
  x22, x23 = bits.Add32(x21, x18, 0x0)
  var x24 uint32
  var x25 uint32
  x24, x25 = bits.Add32(x19, x16, x23)
  var x26 uint32
  var x27 uint32
  x26, x27 = bits.Add32(x17, x14, x25)
  var x28 uint32
  var x29 uint32
  x28, x29 = bits.Add32(x15, x12, x27)
  var x30 uint32
  var x31 uint32
  x30, x31 = bits.Add32(x13, x10, x29)
  var x32 uint32
  var x33 uint32
  x32, x33 = bits.Add32(x11, x8, x31)
  var x34 uint32
  x34, _ = bits.Add32(x9, uint32(0x0), x33)
  var x36 uint32
  x36, _ = bits.Mul32(x20, 0xffffffff)
  var x38 uint32
  var x39 uint32
  x38, x39 = bits.Mul32(x36, 0xffffffff)
  var x40 uint32
  var x41 uint32
  x40, x41 = bits.Mul32(x36, 0xffffffff)
  var x42 uint32
  var x43 uint32
  x42, x43 = bits.Mul32(x36, 0xffffffff)
  var x44 uint32
  var x45 uint32
  x44, x45 = bits.Mul32(x36, 0xffffffff)
  var x46 uint32
  var x47 uint32
  x46, x47 = bits.Add32(x45, x42, 0x0)
  var x48 uint32
  var x49 uint32
  x48, x49 = bits.Add32(x43, x40, x47)
  var x50 uint32
  var x51 uint32
  x50, x51 = bits.Add32(x41, x38, x49)
  var x52 uint32
  x52, _ = bits.Add32(x39, uint32(0x0), x51)
  var x55 uint32
  _, x55 = bits.Add32(x20, x36, 0x0)
  var x56 uint32
  var x57 uint32
  x56, x57 = bits.Add32(x22, uint32(0x0), x55)
  var x58 uint32
  var x59 uint32
  x58, x59 = bits.Add32(x24, uint32(0x0), x57)
  var x60 uint32
  var x61 uint32
  x60, x61 = bits.Add32(x26, x44, x59)
  var x62 uint32
  var x63 uint32
  x62, x63 = bits.Add32(x28, x46, x61)
  var x64 uint32
  var x65 uint32
  x64, x65 = bits.Add32(x30, x48, x63)
  var x66 uint32
  var x67 uint32
  x66, x67 = bits.Add32(x32, x50, x65)
  var x68 uint32
  var x69 uint32
  x68, x69 = bits.Add32(x34, x52, x67)
  var x70 uint32
  x70, _ = bits.Add32(uint32(0x0), uint32(0x0), x69)
  var x72 uint32
  var x73 uint32
  x72, x73 = bits.Mul32(x1, (arg1[6]))
  var x74 uint32
  var x75 uint32
  x74, x75 = bits.Mul32(x1, (arg1[5]))
  var x76 uint32
  var x77 uint32
  x76, x77 = bits.Mul32(x1, (arg1[4]))
  var x78 uint32
  var x79 uint32
  x78, x79 = bits.Mul32(x1, (arg1[3]))
  var x80 uint32
  var x81 uint32
  x80, x81 = bits.Mul32(x1, (arg1[2]))
  var x82 uint32
  var x83 uint32
  x82, x83 = bits.Mul32(x1, (arg1[1]))
  var x84 uint32
  var x85 uint32
  x84, x85 = bits.Mul32(x1, (arg1[0]))
  var x86 uint32
  var x87 uint32
  x86, x87 = bits.Add32(x85, x82, 0x0)
  var x88 uint32
  var x89 uint32
  x88, x89 = bits.Add32(x83, x80, x87)
  var x90 uint32
  var x91 uint32
  x90, x91 = bits.Add32(x81, x78, x89)
  var x92 uint32
  var x93 uint32
  x92, x93 = bits.Add32(x79, x76, x91)
  var x94 uint32
  var x95 uint32
  x94, x95 = bits.Add32(x77, x74, x93)
  var x96 uint32
  var x97 uint32
  x96, x97 = bits.Add32(x75, x72, x95)
  var x98 uint32
  x98, _ = bits.Add32(x73, uint32(0x0), x97)
  var x100 uint32
  var x101 uint32
  x100, x101 = bits.Add32(x56, x84, 0x0)
  var x102 uint32
  var x103 uint32
  x102, x103 = bits.Add32(x58, x86, x101)
  var x104 uint32
  var x105 uint32
  x104, x105 = bits.Add32(x60, x88, x103)
  var x106 uint32
  var x107 uint32
  x106, x107 = bits.Add32(x62, x90, x105)
  var x108 uint32
  var x109 uint32
  x108, x109 = bits.Add32(x64, x92, x107)
  var x110 uint32
  var x111 uint32
  x110, x111 = bits.Add32(x66, x94, x109)
  var x112 uint32
  var x113 uint32
  x112, x113 = bits.Add32(x68, x96, x111)
  var x114 uint32
  var x115 uint32
  x114, x115 = bits.Add32(x70, x98, x113)
  var x116 uint32
  x116, _ = bits.Mul32(x100, 0xffffffff)
  var x118 uint32
  var x119 uint32
  x118, x119 = bits.Mul32(x116, 0xffffffff)
  var x120 uint32
  var x121 uint32
  x120, x121 = bits.Mul32(x116, 0xffffffff)
  var x122 uint32
  var x123 uint32
  x122, x123 = bits.Mul32(x116, 0xffffffff)
  var x124 uint32
  var x125 uint32
  x124, x125 = bits.Mul32(x116, 0xffffffff)
  var x126 uint32
  var x127 uint32
  x126, x127 = bits.Add32(x125, x122, 0x0)
  var x128 uint32
  var x129 uint32
  x128, x129 = bits.Add32(x123, x120, x127)
  var x130 uint32
  var x131 uint32
  x130, x131 = bits.Add32(x121, x118, x129)
  var x132 uint32
  x132, _ = bits.Add32(x119, uint32(0x0), x131)
  var x135 uint32
  _, x135 = bits.Add32(x100, x116, 0x0)
  var x136 uint32
  var x137 uint32
  x136, x137 = bits.Add32(x102, uint32(0x0), x135)
  var x138 uint32
  var x139 uint32
  x138, x139 = bits.Add32(x104, uint32(0x0), x137)
  var x140 uint32
  var x141 uint32
  x140, x141 = bits.Add32(x106, x124, x139)
  var x142 uint32
  var x143 uint32
  x142, x143 = bits.Add32(x108, x126, x141)
  var x144 uint32
  var x145 uint32
  x144, x145 = bits.Add32(x110, x128, x143)
  var x146 uint32
  var x147 uint32
  x146, x147 = bits.Add32(x112, x130, x145)
  var x148 uint32
  var x149 uint32
  x148, x149 = bits.Add32(x114, x132, x147)
  var x150 uint32
  x150, _ = bits.Add32(x115, uint32(0x0), x149)
  var x152 uint32
  var x153 uint32
  x152, x153 = bits.Mul32(x2, (arg1[6]))
  var x154 uint32
  var x155 uint32
  x154, x155 = bits.Mul32(x2, (arg1[5]))
  var x156 uint32
  var x157 uint32
  x156, x157 = bits.Mul32(x2, (arg1[4]))
  var x158 uint32
  var x159 uint32
  x158, x159 = bits.Mul32(x2, (arg1[3]))
  var x160 uint32
  var x161 uint32
  x160, x161 = bits.Mul32(x2, (arg1[2]))
  var x162 uint32
  var x163 uint32
  x162, x163 = bits.Mul32(x2, (arg1[1]))
  var x164 uint32
  var x165 uint32
  x164, x165 = bits.Mul32(x2, (arg1[0]))
  var x166 uint32
  var x167 uint32
  x166, x167 = bits.Add32(x165, x162, 0x0)
  var x168 uint32
  var x169 uint32
  x168, x169 = bits.Add32(x163, x160, x167)
  var x170 uint32
  var x171 uint32
  x170, x171 = bits.Add32(x161, x158, x169)
  var x172 uint32
  var x173 uint32
  x172, x173 = bits.Add32(x159, x156, x171)
  var x174 uint32
  var x175 uint32
  x174, x175 = bits.Add32(x157, x154, x173)
  var x176 uint32
  var x177 uint32
  x176, x177 = bits.Add32(x155, x152, x175)
  var x178 uint32
  x178, _ = bits.Add32(x153, uint32(0x0), x177)
  var x180 uint32
  var x181 uint32
  x180, x181 = bits.Add32(x136, x164, 0x0)
  var x182 uint32
  var x183 uint32
  x182, x183 = bits.Add32(x138, x166, x181)
  var x184 uint32
  var x185 uint32
  x184, x185 = bits.Add32(x140, x168, x183)
  var x186 uint32
  var x187 uint32
  x186, x187 = bits.Add32(x142, x170, x185)
  var x188 uint32
  var x189 uint32
  x188, x189 = bits.Add32(x144, x172, x187)
  var x190 uint32
  var x191 uint32
  x190, x191 = bits.Add32(x146, x174, x189)
  var x192 uint32
  var x193 uint32
  x192, x193 = bits.Add32(x148, x176, x191)
  var x194 uint32
  var x195 uint32
  x194, x195 = bits.Add32(x150, x178, x193)
  var x196 uint32
  x196, _ = bits.Mul32(x180, 0xffffffff)
  var x198 uint32
  var x199 uint32
  x198, x199 = bits.Mul32(x196, 0xffffffff)
  var x200 uint32
  var x201 uint32
  x200, x201 = bits.Mul32(x196, 0xffffffff)
  var x202 uint32
  var x203 uint32
  x202, x203 = bits.Mul32(x196, 0xffffffff)
  var x204 uint32
  var x205 uint32
  x204, x205 = bits.Mul32(x196, 0xffffffff)
  var x206 uint32
  var x207 uint32
  x206, x207 = bits.Add32(x205, x202, 0x0)
  var x208 uint32
  var x209 uint32
  x208, x209 = bits.Add32(x203, x200, x207)
  var x210 uint32
  var x211 uint32
  x210, x211 = bits.Add32(x201, x198, x209)
  var x212 uint32
  x212, _ = bits.Add32(x199, uint32(0x0), x211)
  var x215 uint32
  _, x215 = bits.Add32(x180, x196, 0x0)
  var x216 uint32
  var x217 uint32
  x216, x217 = bits.Add32(x182, uint32(0x0), x215)
  var x218 uint32
  var x219 uint32
  x218, x219 = bits.Add32(x184, uint32(0x0), x217)
  var x220 uint32
  var x221 uint32
  x220, x221 = bits.Add32(x186, x204, x219)
  var x222 uint32
  var x223 uint32
  x222, x223 = bits.Add32(x188, x206, x221)
  var x224 uint32
  var x225 uint32
  x224, x225 = bits.Add32(x190, x208, x223)
  var x226 uint32
  var x227 uint32
  x226, x227 = bits.Add32(x192, x210, x225)
  var x228 uint32
  var x229 uint32
  x228, x229 = bits.Add32(x194, x212, x227)
  var x230 uint32
  x230, _ = bits.Add32(x195, uint32(0x0), x229)
  var x232 uint32
  var x233 uint32
  x232, x233 = bits.Mul32(x3, (arg1[6]))
  var x234 uint32
  var x235 uint32
  x234, x235 = bits.Mul32(x3, (arg1[5]))
  var x236 uint32
  var x237 uint32
  x236, x237 = bits.Mul32(x3, (arg1[4]))
  var x238 uint32
  var x239 uint32
  x238, x239 = bits.Mul32(x3, (arg1[3]))
  var x240 uint32
  var x241 uint32
  x240, x241 = bits.Mul32(x3, (arg1[2]))
  var x242 uint32
  var x243 uint32
  x242, x243 = bits.Mul32(x3, (arg1[1]))
  var x244 uint32
  var x245 uint32
  x244, x245 = bits.Mul32(x3, (arg1[0]))
  var x246 uint32
  var x247 uint32
  x246, x247 = bits.Add32(x245, x242, 0x0)
  var x248 uint32
  var x249 uint32
  x248, x249 = bits.Add32(x243, x240, x247)
  var x250 uint32
  var x251 uint32
  x250, x251 = bits.Add32(x241, x238, x249)
  var x252 uint32
  var x253 uint32
  x252, x253 = bits.Add32(x239, x236, x251)
  var x254 uint32
  var x255 uint32
  x254, x255 = bits.Add32(x237, x234, x253)
  var x256 uint32
  var x257 uint32
  x256, x257 = bits.Add32(x235, x232, x255)
  var x258 uint32
  x258, _ = bits.Add32(x233, uint32(0x0), x257)
  var x260 uint32
  var x261 uint32
  x260, x261 = bits.Add32(x216, x244, 0x0)
  var x262 uint32
  var x263 uint32
  x262, x263 = bits.Add32(x218, x246, x261)
  var x264 uint32
  var x265 uint32
  x264, x265 = bits.Add32(x220, x248, x263)
  var x266 uint32
  var x267 uint32
  x266, x267 = bits.Add32(x222, x250, x265)
  var x268 uint32
  var x269 uint32
  x268, x269 = bits.Add32(x224, x252, x267)
  var x270 uint32
  var x271 uint32
  x270, x271 = bits.Add32(x226, x254, x269)
  var x272 uint32
  var x273 uint32
  x272, x273 = bits.Add32(x228, x256, x271)
  var x274 uint32
  var x275 uint32
  x274, x275 = bits.Add32(x230, x258, x273)
  var x276 uint32
  x276, _ = bits.Mul32(x260, 0xffffffff)
  var x278 uint32
  var x279 uint32
  x278, x279 = bits.Mul32(x276, 0xffffffff)
  var x280 uint32
  var x281 uint32
  x280, x281 = bits.Mul32(x276, 0xffffffff)
  var x282 uint32
  var x283 uint32
  x282, x283 = bits.Mul32(x276, 0xffffffff)
  var x284 uint32
  var x285 uint32
  x284, x285 = bits.Mul32(x276, 0xffffffff)
  var x286 uint32
  var x287 uint32
  x286, x287 = bits.Add32(x285, x282, 0x0)
  var x288 uint32
  var x289 uint32
  x288, x289 = bits.Add32(x283, x280, x287)
  var x290 uint32
  var x291 uint32
  x290, x291 = bits.Add32(x281, x278, x289)
  var x292 uint32
  x292, _ = bits.Add32(x279, uint32(0x0), x291)
  var x295 uint32
  _, x295 = bits.Add32(x260, x276, 0x0)
  var x296 uint32
  var x297 uint32
  x296, x297 = bits.Add32(x262, uint32(0x0), x295)
  var x298 uint32
  var x299 uint32
  x298, x299 = bits.Add32(x264, uint32(0x0), x297)
  var x300 uint32
  var x301 uint32
  x300, x301 = bits.Add32(x266, x284, x299)
  var x302 uint32
  var x303 uint32
  x302, x303 = bits.Add32(x268, x286, x301)
  var x304 uint32
  var x305 uint32
  x304, x305 = bits.Add32(x270, x288, x303)
  var x306 uint32
  var x307 uint32
  x306, x307 = bits.Add32(x272, x290, x305)
  var x308 uint32
  var x309 uint32
  x308, x309 = bits.Add32(x274, x292, x307)
  var x310 uint32
  x310, _ = bits.Add32(x275, uint32(0x0), x309)
  var x312 uint32
  var x313 uint32
  x312, x313 = bits.Mul32(x4, (arg1[6]))
  var x314 uint32
  var x315 uint32
  x314, x315 = bits.Mul32(x4, (arg1[5]))
  var x316 uint32
  var x317 uint32
  x316, x317 = bits.Mul32(x4, (arg1[4]))
  var x318 uint32
  var x319 uint32
  x318, x319 = bits.Mul32(x4, (arg1[3]))
  var x320 uint32
  var x321 uint32
  x320, x321 = bits.Mul32(x4, (arg1[2]))
  var x322 uint32
  var x323 uint32
  x322, x323 = bits.Mul32(x4, (arg1[1]))
  var x324 uint32
  var x325 uint32
  x324, x325 = bits.Mul32(x4, (arg1[0]))
  var x326 uint32
  var x327 uint32
  x326, x327 = bits.Add32(x325, x322, 0x0)
  var x328 uint32
  var x329 uint32
  x328, x329 = bits.Add32(x323, x320, x327)
  var x330 uint32
  var x331 uint32
  x330, x331 = bits.Add32(x321, x318, x329)
  var x332 uint32
  var x333 uint32
  x332, x333 = bits.Add32(x319, x316, x331)
  var x334 uint32
  var x335 uint32
  x334, x335 = bits.Add32(x317, x314, x333)
  var x336 uint32
  var x337 uint32
  x336, x337 = bits.Add32(x315, x312, x335)
  var x338 uint32
  x338, _ = bits.Add32(x313, uint32(0x0), x337)
  var x340 uint32
  var x341 uint32
  x340, x341 = bits.Add32(x296, x324, 0x0)
  var x342 uint32
  var x343 uint32
  x342, x343 = bits.Add32(x298, x326, x341)
  var x344 uint32
  var x345 uint32
  x344, x345 = bits.Add32(x300, x328, x343)
  var x346 uint32
  var x347 uint32
  x346, x347 = bits.Add32(x302, x330, x345)
  var x348 uint32
  var x349 uint32
  x348, x349 = bits.Add32(x304, x332, x347)
  var x350 uint32
  var x351 uint32
  x350, x351 = bits.Add32(x306, x334, x349)
  var x352 uint32
  var x353 uint32
  x352, x353 = bits.Add32(x308, x336, x351)
  var x354 uint32
  var x355 uint32
  x354, x355 = bits.Add32(x310, x338, x353)
  var x356 uint32
  x356, _ = bits.Mul32(x340, 0xffffffff)
  var x358 uint32
  var x359 uint32
  x358, x359 = bits.Mul32(x356, 0xffffffff)
  var x360 uint32
  var x361 uint32
  x360, x361 = bits.Mul32(x356, 0xffffffff)
  var x362 uint32
  var x363 uint32
  x362, x363 = bits.Mul32(x356, 0xffffffff)
  var x364 uint32
  var x365 uint32
  x364, x365 = bits.Mul32(x356, 0xffffffff)
  var x366 uint32
  var x367 uint32
  x366, x367 = bits.Add32(x365, x362, 0x0)
  var x368 uint32
  var x369 uint32
  x368, x369 = bits.Add32(x363, x360, x367)
  var x370 uint32
  var x371 uint32
  x370, x371 = bits.Add32(x361, x358, x369)
  var x372 uint32
  x372, _ = bits.Add32(x359, uint32(0x0), x371)
  var x375 uint32
  _, x375 = bits.Add32(x340, x356, 0x0)
  var x376 uint32
  var x377 uint32
  x376, x377 = bits.Add32(x342, uint32(0x0), x375)
  var x378 uint32
  var x379 uint32
  x378, x379 = bits.Add32(x344, uint32(0x0), x377)
  var x380 uint32
  var x381 uint32
  x380, x381 = bits.Add32(x346, x364, x379)
  var x382 uint32
  var x383 uint32
  x382, x383 = bits.Add32(x348, x366, x381)
  var x384 uint32
  var x385 uint32
  x384, x385 = bits.Add32(x350, x368, x383)
  var x386 uint32
  var x387 uint32
  x386, x387 = bits.Add32(x352, x370, x385)
  var x388 uint32
  var x389 uint32
  x388, x389 = bits.Add32(x354, x372, x387)
  var x390 uint32
  x390, _ = bits.Add32(x355, uint32(0x0), x389)
  var x392 uint32
  var x393 uint32
  x392, x393 = bits.Mul32(x5, (arg1[6]))
  var x394 uint32
  var x395 uint32
  x394, x395 = bits.Mul32(x5, (arg1[5]))
  var x396 uint32
  var x397 uint32
  x396, x397 = bits.Mul32(x5, (arg1[4]))
  var x398 uint32
  var x399 uint32
  x398, x399 = bits.Mul32(x5, (arg1[3]))
  var x400 uint32
  var x401 uint32
  x400, x401 = bits.Mul32(x5, (arg1[2]))
  var x402 uint32
  var x403 uint32
  x402, x403 = bits.Mul32(x5, (arg1[1]))
  var x404 uint32
  var x405 uint32
  x404, x405 = bits.Mul32(x5, (arg1[0]))
  var x406 uint32
  var x407 uint32
  x406, x407 = bits.Add32(x405, x402, 0x0)
  var x408 uint32
  var x409 uint32
  x408, x409 = bits.Add32(x403, x400, x407)
  var x410 uint32
  var x411 uint32
  x410, x411 = bits.Add32(x401, x398, x409)
  var x412 uint32
  var x413 uint32
  x412, x413 = bits.Add32(x399, x396, x411)
  var x414 uint32
  var x415 uint32
  x414, x415 = bits.Add32(x397, x394, x413)
  var x416 uint32
  var x417 uint32
  x416, x417 = bits.Add32(x395, x392, x415)
  var x418 uint32
  x418, _ = bits.Add32(x393, uint32(0x0), x417)
  var x420 uint32
  var x421 uint32
  x420, x421 = bits.Add32(x376, x404, 0x0)
  var x422 uint32
  var x423 uint32
  x422, x423 = bits.Add32(x378, x406, x421)
  var x424 uint32
  var x425 uint32
  x424, x425 = bits.Add32(x380, x408, x423)
  var x426 uint32
  var x427 uint32
  x426, x427 = bits.Add32(x382, x410, x425)
  var x428 uint32
  var x429 uint32
  x428, x429 = bits.Add32(x384, x412, x427)
  var x430 uint32
  var x431 uint32
  x430, x431 = bits.Add32(x386, x414, x429)
  var x432 uint32
  var x433 uint32
  x432, x433 = bits.Add32(x388, x416, x431)
  var x434 uint32
  var x435 uint32
  x434, x435 = bits.Add32(x390, x418, x433)
  var x436 uint32
  x436, _ = bits.Mul32(x420, 0xffffffff)
  var x438 uint32
  var x439 uint32
  x438, x439 = bits.Mul32(x436, 0xffffffff)
  var x440 uint32
  var x441 uint32
  x440, x441 = bits.Mul32(x436, 0xffffffff)
  var x442 uint32
  var x443 uint32
  x442, x443 = bits.Mul32(x436, 0xffffffff)
  var x444 uint32
  var x445 uint32
  x444, x445 = bits.Mul32(x436, 0xffffffff)
  var x446 uint32
  var x447 uint32
  x446, x447 = bits.Add32(x445, x442, 0x0)
  var x448 uint32
  var x449 uint32
  x448, x449 = bits.Add32(x443, x440, x447)
  var x450 uint32
  var x451 uint32
  x450, x451 = bits.Add32(x441, x438, x449)
  var x452 uint32
  x452, _ = bits.Add32(x439, uint32(0x0), x451)
  var x455 uint32
  _, x455 = bits.Add32(x420, x436, 0x0)
  var x456 uint32
  var x457 uint32
  x456, x457 = bits.Add32(x422, uint32(0x0), x455)
  var x458 uint32
  var x459 uint32
  x458, x459 = bits.Add32(x424, uint32(0x0), x457)
  var x460 uint32
  var x461 uint32
  x460, x461 = bits.Add32(x426, x444, x459)
  var x462 uint32
  var x463 uint32
  x462, x463 = bits.Add32(x428, x446, x461)
  var x464 uint32
  var x465 uint32
  x464, x465 = bits.Add32(x430, x448, x463)
  var x466 uint32
  var x467 uint32
  x466, x467 = bits.Add32(x432, x450, x465)
  var x468 uint32
  var x469 uint32
  x468, x469 = bits.Add32(x434, x452, x467)
  var x470 uint32
  x470, _ = bits.Add32(x435, uint32(0x0), x469)
  var x472 uint32
  var x473 uint32
  x472, x473 = bits.Mul32(x6, (arg1[6]))
  var x474 uint32
  var x475 uint32
  x474, x475 = bits.Mul32(x6, (arg1[5]))
  var x476 uint32
  var x477 uint32
  x476, x477 = bits.Mul32(x6, (arg1[4]))
  var x478 uint32
  var x479 uint32
  x478, x479 = bits.Mul32(x6, (arg1[3]))
  var x480 uint32
  var x481 uint32
  x480, x481 = bits.Mul32(x6, (arg1[2]))
  var x482 uint32
  var x483 uint32
  x482, x483 = bits.Mul32(x6, (arg1[1]))
  var x484 uint32
  var x485 uint32
  x484, x485 = bits.Mul32(x6, (arg1[0]))
  var x486 uint32
  var x487 uint32
  x486, x487 = bits.Add32(x485, x482, 0x0)
  var x488 uint32
  var x489 uint32
  x488, x489 = bits.Add32(x483, x480, x487)
  var x490 uint32
  var x491 uint32
  x490, x491 = bits.Add32(x481, x478, x489)
  var x492 uint32
  var x493 uint32
  x492, x493 = bits.Add32(x479, x476, x491)
  var x494 uint32
  var x495 uint32
  x494, x495 = bits.Add32(x477, x474, x493)
  var x496 uint32
  var x497 uint32
  x496, x497 = bits.Add32(x475, x472, x495)
  var x498 uint32
  x498, _ = bits.Add32(x473, uint32(0x0), x497)
  var x500 uint32
  var x501 uint32
  x500, x501 = bits.Add32(x456, x484, 0x0)
  var x502 uint32
  var x503 uint32
  x502, x503 = bits.Add32(x458, x486, x501)
  var x504 uint32
  var x505 uint32
  x504, x505 = bits.Add32(x460, x488, x503)
  var x506 uint32
  var x507 uint32
  x506, x507 = bits.Add32(x462, x490, x505)
  var x508 uint32
  var x509 uint32
  x508, x509 = bits.Add32(x464, x492, x507)
  var x510 uint32
  var x511 uint32
  x510, x511 = bits.Add32(x466, x494, x509)
  var x512 uint32
  var x513 uint32
  x512, x513 = bits.Add32(x468, x496, x511)
  var x514 uint32
  var x515 uint32
  x514, x515 = bits.Add32(x470, x498, x513)
  var x516 uint32
  x516, _ = bits.Mul32(x500, 0xffffffff)
  var x518 uint32
  var x519 uint32
  x518, x519 = bits.Mul32(x516, 0xffffffff)
  var x520 uint32
  var x521 uint32
  x520, x521 = bits.Mul32(x516, 0xffffffff)
  var x522 uint32
  var x523 uint32
  x522, x523 = bits.Mul32(x516, 0xffffffff)
  var x524 uint32
  var x525 uint32
  x524, x525 = bits.Mul32(x516, 0xffffffff)
  var x526 uint32
  var x527 uint32
  x526, x527 = bits.Add32(x525, x522, 0x0)
  var x528 uint32
  var x529 uint32
  x528, x529 = bits.Add32(x523, x520, x527)
  var x530 uint32
  var x531 uint32
  x530, x531 = bits.Add32(x521, x518, x529)
  var x532 uint32
  x532, _ = bits.Add32(x519, uint32(0x0), x531)
  var x535 uint32
  _, x535 = bits.Add32(x500, x516, 0x0)
  var x536 uint32
  var x537 uint32
  x536, x537 = bits.Add32(x502, uint32(0x0), x535)
  var x538 uint32
  var x539 uint32
  x538, x539 = bits.Add32(x504, uint32(0x0), x537)
  var x540 uint32
  var x541 uint32
  x540, x541 = bits.Add32(x506, x524, x539)
  var x542 uint32
  var x543 uint32
  x542, x543 = bits.Add32(x508, x526, x541)
  var x544 uint32
  var x545 uint32
  x544, x545 = bits.Add32(x510, x528, x543)
  var x546 uint32
  var x547 uint32
  x546, x547 = bits.Add32(x512, x530, x545)
  var x548 uint32
  var x549 uint32
  x548, x549 = bits.Add32(x514, x532, x547)
  var x550 uint32
  x550, _ = bits.Add32(x515, uint32(0x0), x549)
  var x552 uint32
  var x553 uint32
  x552, x553 = bits.Sub32(x536, 0x1, uint32(0x0))
  var x554 uint32
  var x555 uint32
  x554, x555 = bits.Sub32(x538, uint32(0x0), x553)
  var x556 uint32
  var x557 uint32
  x556, x557 = bits.Sub32(x540, uint32(0x0), x555)
  var x558 uint32
  var x559 uint32
  x558, x559 = bits.Sub32(x542, 0xffffffff, x557)
  var x560 uint32
  var x561 uint32
  x560, x561 = bits.Sub32(x544, 0xffffffff, x559)
  var x562 uint32
  var x563 uint32
  x562, x563 = bits.Sub32(x546, 0xffffffff, x561)
  var x564 uint32
  var x565 uint32
  x564, x565 = bits.Sub32(x548, 0xffffffff, x563)
  var x567 uint32
  _, x567 = bits.Sub32(x550, uint32(0x0), x565)
  var x568 uint32
  fiat_p224_cmovznz_u32(&x568, x567, x552, x536)
  var x569 uint32
  fiat_p224_cmovznz_u32(&x569, x567, x554, x538)
  var x570 uint32
  fiat_p224_cmovznz_u32(&x570, x567, x556, x540)
  var x571 uint32
  fiat_p224_cmovznz_u32(&x571, x567, x558, x542)
  var x572 uint32
  fiat_p224_cmovznz_u32(&x572, x567, x560, x544)
  var x573 uint32
  fiat_p224_cmovznz_u32(&x573, x567, x562, x546)
  var x574 uint32
  fiat_p224_cmovznz_u32(&x574, x567, x564, x548)
  out1[0] = x568
  out1[1] = x569
  out1[2] = x570
  out1[3] = x571
  out1[4] = x572
  out1[5] = x573
  out1[6] = x574
}

/*
 * The function fiat_p224_add adds two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 *   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_p224_add(out1 *[7]uint32, arg1 *[7]uint32, arg2 *[7]uint32) {
  var x1 uint32
  var x2 uint32
  x1, x2 = bits.Add32((arg1[0]), (arg2[0]), 0x0)
  var x3 uint32
  var x4 uint32
  x3, x4 = bits.Add32((arg1[1]), (arg2[1]), x2)
  var x5 uint32
  var x6 uint32
  x5, x6 = bits.Add32((arg1[2]), (arg2[2]), x4)
  var x7 uint32
  var x8 uint32
  x7, x8 = bits.Add32((arg1[3]), (arg2[3]), x6)
  var x9 uint32
  var x10 uint32
  x9, x10 = bits.Add32((arg1[4]), (arg2[4]), x8)
  var x11 uint32
  var x12 uint32
  x11, x12 = bits.Add32((arg1[5]), (arg2[5]), x10)
  var x13 uint32
  var x14 uint32
  x13, x14 = bits.Add32((arg1[6]), (arg2[6]), x12)
  var x15 uint32
  var x16 uint32
  x15, x16 = bits.Sub32(x1, 0x1, uint32(0x0))
  var x17 uint32
  var x18 uint32
  x17, x18 = bits.Sub32(x3, uint32(0x0), x16)
  var x19 uint32
  var x20 uint32
  x19, x20 = bits.Sub32(x5, uint32(0x0), x18)
  var x21 uint32
  var x22 uint32
  x21, x22 = bits.Sub32(x7, 0xffffffff, x20)
  var x23 uint32
  var x24 uint32
  x23, x24 = bits.Sub32(x9, 0xffffffff, x22)
  var x25 uint32
  var x26 uint32
  x25, x26 = bits.Sub32(x11, 0xffffffff, x24)
  var x27 uint32
  var x28 uint32
  x27, x28 = bits.Sub32(x13, 0xffffffff, x26)
  var x30 uint32
  _, x30 = bits.Sub32(x14, uint32(0x0), x28)
  var x31 uint32
  fiat_p224_cmovznz_u32(&x31, x30, x15, x1)
  var x32 uint32
  fiat_p224_cmovznz_u32(&x32, x30, x17, x3)
  var x33 uint32
  fiat_p224_cmovznz_u32(&x33, x30, x19, x5)
  var x34 uint32
  fiat_p224_cmovznz_u32(&x34, x30, x21, x7)
  var x35 uint32
  fiat_p224_cmovznz_u32(&x35, x30, x23, x9)
  var x36 uint32
  fiat_p224_cmovznz_u32(&x36, x30, x25, x11)
  var x37 uint32
  fiat_p224_cmovznz_u32(&x37, x30, x27, x13)
  out1[0] = x31
  out1[1] = x32
  out1[2] = x33
  out1[3] = x34
  out1[4] = x35
  out1[5] = x36
  out1[6] = x37
}

/*
 * The function fiat_p224_sub subtracts two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 *   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_p224_sub(out1 *[7]uint32, arg1 *[7]uint32, arg2 *[7]uint32) {
  var x1 uint32
  var x2 uint32
  x1, x2 = bits.Sub32((arg1[0]), (arg2[0]), 0x0)
  var x3 uint32
  var x4 uint32
  x3, x4 = bits.Sub32((arg1[1]), (arg2[1]), x2)
  var x5 uint32
  var x6 uint32
  x5, x6 = bits.Sub32((arg1[2]), (arg2[2]), x4)
  var x7 uint32
  var x8 uint32
  x7, x8 = bits.Sub32((arg1[3]), (arg2[3]), x6)
  var x9 uint32
  var x10 uint32
  x9, x10 = bits.Sub32((arg1[4]), (arg2[4]), x8)
  var x11 uint32
  var x12 uint32
  x11, x12 = bits.Sub32((arg1[5]), (arg2[5]), x10)
  var x13 uint32
  var x14 uint32
  x13, x14 = bits.Sub32((arg1[6]), (arg2[6]), x12)
  var x15 uint32
  fiat_p224_cmovznz_u32(&x15, x14, uint32(0x0), 0xffffffff)
  var x16 uint32
  var x17 uint32
  x16, x17 = bits.Add32(x1, (x15 & 0x1), 0x0)
  var x18 uint32
  var x19 uint32
  x18, x19 = bits.Add32(x3, uint32(0x0), x17)
  var x20 uint32
  var x21 uint32
  x20, x21 = bits.Add32(x5, uint32(0x0), x19)
  var x22 uint32
  var x23 uint32
  x22, x23 = bits.Add32(x7, (x15 & 0xffffffff), x21)
  var x24 uint32
  var x25 uint32
  x24, x25 = bits.Add32(x9, (x15 & 0xffffffff), x23)
  var x26 uint32
  var x27 uint32
  x26, x27 = bits.Add32(x11, (x15 & 0xffffffff), x25)
  var x28 uint32
  x28, _ = bits.Add32(x13, (x15 & 0xffffffff), x27)
  out1[0] = x16
  out1[1] = x18
  out1[2] = x20
  out1[3] = x22
  out1[4] = x24
  out1[5] = x26
  out1[6] = x28
}

/*
 * The function fiat_p224_opp negates a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_p224_opp(out1 *[7]uint32, arg1 *[7]uint32) {
  var x1 uint32
  var x2 uint32
  x1, x2 = bits.Sub32(uint32(0x0), (arg1[0]), 0x0)
  var x3 uint32
  var x4 uint32
  x3, x4 = bits.Sub32(uint32(0x0), (arg1[1]), x2)
  var x5 uint32
  var x6 uint32
  x5, x6 = bits.Sub32(uint32(0x0), (arg1[2]), x4)
  var x7 uint32
  var x8 uint32
  x7, x8 = bits.Sub32(uint32(0x0), (arg1[3]), x6)
  var x9 uint32
  var x10 uint32
  x9, x10 = bits.Sub32(uint32(0x0), (arg1[4]), x8)
  var x11 uint32
  var x12 uint32
  x11, x12 = bits.Sub32(uint32(0x0), (arg1[5]), x10)
  var x13 uint32
  var x14 uint32
  x13, x14 = bits.Sub32(uint32(0x0), (arg1[6]), x12)
  var x15 uint32
  fiat_p224_cmovznz_u32(&x15, x14, uint32(0x0), 0xffffffff)
  var x16 uint32
  var x17 uint32
  x16, x17 = bits.Add32(x1, (x15 & 0x1), 0x0)
  var x18 uint32
  var x19 uint32
  x18, x19 = bits.Add32(x3, uint32(0x0), x17)
  var x20 uint32
  var x21 uint32
  x20, x21 = bits.Add32(x5, uint32(0x0), x19)
  var x22 uint32
  var x23 uint32
  x22, x23 = bits.Add32(x7, (x15 & 0xffffffff), x21)
  var x24 uint32
  var x25 uint32
  x24, x25 = bits.Add32(x9, (x15 & 0xffffffff), x23)
  var x26 uint32
  var x27 uint32
  x26, x27 = bits.Add32(x11, (x15 & 0xffffffff), x25)
  var x28 uint32
  x28, _ = bits.Add32(x13, (x15 & 0xffffffff), x27)
  out1[0] = x16
  out1[1] = x18
  out1[2] = x20
  out1[3] = x22
  out1[4] = x24
  out1[5] = x26
  out1[6] = x28
}

/*
 * The function fiat_p224_from_montgomery translates a field element out of the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = (eval arg1 * ((2^32)⁻¹ mod m)^7) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_p224_from_montgomery(out1 *[7]uint32, arg1 *[7]uint32) {
  var x1 uint32 = (arg1[0])
  var x2 uint32
  x2, _ = bits.Mul32(x1, 0xffffffff)
  var x4 uint32
  var x5 uint32
  x4, x5 = bits.Mul32(x2, 0xffffffff)
  var x6 uint32
  var x7 uint32
  x6, x7 = bits.Mul32(x2, 0xffffffff)
  var x8 uint32
  var x9 uint32
  x8, x9 = bits.Mul32(x2, 0xffffffff)
  var x10 uint32
  var x11 uint32
  x10, x11 = bits.Mul32(x2, 0xffffffff)
  var x12 uint32
  var x13 uint32
  x12, x13 = bits.Add32(x11, x8, 0x0)
  var x14 uint32
  var x15 uint32
  x14, x15 = bits.Add32(x9, x6, x13)
  var x16 uint32
  var x17 uint32
  x16, x17 = bits.Add32(x7, x4, x15)
  var x19 uint32
  _, x19 = bits.Add32(x1, x2, 0x0)
  var x20 uint32
  x20, _ = bits.Add32(uint32(0x0), uint32(0x0), x19)
  var x22 uint32
  var x23 uint32
  x22, x23 = bits.Add32(x20, (arg1[1]), 0x0)
  var x24 uint32
  x24, _ = bits.Mul32(x22, 0xffffffff)
  var x26 uint32
  var x27 uint32
  x26, x27 = bits.Mul32(x24, 0xffffffff)
  var x28 uint32
  var x29 uint32
  x28, x29 = bits.Mul32(x24, 0xffffffff)
  var x30 uint32
  var x31 uint32
  x30, x31 = bits.Mul32(x24, 0xffffffff)
  var x32 uint32
  var x33 uint32
  x32, x33 = bits.Mul32(x24, 0xffffffff)
  var x34 uint32
  var x35 uint32
  x34, x35 = bits.Add32(x33, x30, 0x0)
  var x36 uint32
  var x37 uint32
  x36, x37 = bits.Add32(x31, x28, x35)
  var x38 uint32
  var x39 uint32
  x38, x39 = bits.Add32(x29, x26, x37)
  var x40 uint32
  var x41 uint32
  x40, x41 = bits.Add32(x12, x32, 0x0)
  var x42 uint32
  var x43 uint32
  x42, x43 = bits.Add32(x14, x34, x41)
  var x44 uint32
  var x45 uint32
  x44, x45 = bits.Add32(x16, x36, x43)
  var x46 uint32
  x46, _ = bits.Add32(x5, uint32(0x0), x17)
  var x48 uint32
  var x49 uint32
  x48, x49 = bits.Add32(x46, x38, x45)
  var x50 uint32
  x50, _ = bits.Add32(x27, uint32(0x0), x39)
  var x52 uint32
  var x53 uint32
  x52, x53 = bits.Add32(uint32(0x0), x50, x49)
  var x54 uint32
  x54, _ = bits.Add32(uint32(0x0), uint32(0x0), x23)
  var x57 uint32
  _, x57 = bits.Add32(x22, x24, 0x0)
  var x58 uint32
  x58, _ = bits.Add32(x54, uint32(0x0), x57)
  var x60 uint32
  var x61 uint32
  x60, x61 = bits.Add32(x58, (arg1[2]), 0x0)
  var x62 uint32
  var x63 uint32
  x62, x63 = bits.Add32(x10, uint32(0x0), x61)
  var x64 uint32
  var x65 uint32
  x64, x65 = bits.Add32(x40, uint32(0x0), x63)
  var x66 uint32
  var x67 uint32
  x66, x67 = bits.Add32(x42, uint32(0x0), x65)
  var x68 uint32
  var x69 uint32
  x68, x69 = bits.Add32(x44, uint32(0x0), x67)
  var x70 uint32
  var x71 uint32
  x70, x71 = bits.Add32(x48, uint32(0x0), x69)
  var x72 uint32
  var x73 uint32
  x72, x73 = bits.Add32(x52, uint32(0x0), x71)
  var x74 uint32
  x74, _ = bits.Mul32(x60, 0xffffffff)
  var x76 uint32
  var x77 uint32
  x76, x77 = bits.Mul32(x74, 0xffffffff)
  var x78 uint32
  var x79 uint32
  x78, x79 = bits.Mul32(x74, 0xffffffff)
  var x80 uint32
  var x81 uint32
  x80, x81 = bits.Mul32(x74, 0xffffffff)
  var x82 uint32
  var x83 uint32
  x82, x83 = bits.Mul32(x74, 0xffffffff)
  var x84 uint32
  var x85 uint32
  x84, x85 = bits.Add32(x83, x80, 0x0)
  var x86 uint32
  var x87 uint32
  x86, x87 = bits.Add32(x81, x78, x85)
  var x88 uint32
  var x89 uint32
  x88, x89 = bits.Add32(x79, x76, x87)
  var x91 uint32
  _, x91 = bits.Add32(x60, x74, 0x0)
  var x92 uint32
  var x93 uint32
  x92, x93 = bits.Add32(x62, uint32(0x0), x91)
  var x94 uint32
  var x95 uint32
  x94, x95 = bits.Add32(x64, uint32(0x0), x93)
  var x96 uint32
  var x97 uint32
  x96, x97 = bits.Add32(x66, x82, x95)
  var x98 uint32
  var x99 uint32
  x98, x99 = bits.Add32(x68, x84, x97)
  var x100 uint32
  var x101 uint32
  x100, x101 = bits.Add32(x70, x86, x99)
  var x102 uint32
  var x103 uint32
  x102, x103 = bits.Add32(x72, x88, x101)
  var x104 uint32
  x104, _ = bits.Add32(x77, uint32(0x0), x89)
  var x106 uint32
  x106, _ = bits.Add32(uint32(0x0), uint32(0x0), x53)
  var x108 uint32
  x108, _ = bits.Add32(x106, uint32(0x0), x73)
  var x110 uint32
  var x111 uint32
  x110, x111 = bits.Add32(x108, x104, x103)
  var x112 uint32
  var x113 uint32
  x112, x113 = bits.Add32(x92, (arg1[3]), 0x0)
  var x114 uint32
  var x115 uint32
  x114, x115 = bits.Add32(x94, uint32(0x0), x113)
  var x116 uint32
  var x117 uint32
  x116, x117 = bits.Add32(x96, uint32(0x0), x115)
  var x118 uint32
  var x119 uint32
  x118, x119 = bits.Add32(x98, uint32(0x0), x117)
  var x120 uint32
  var x121 uint32
  x120, x121 = bits.Add32(x100, uint32(0x0), x119)
  var x122 uint32
  var x123 uint32
  x122, x123 = bits.Add32(x102, uint32(0x0), x121)
  var x124 uint32
  var x125 uint32
  x124, x125 = bits.Add32(x110, uint32(0x0), x123)
  var x126 uint32
  x126, _ = bits.Mul32(x112, 0xffffffff)
  var x128 uint32
  var x129 uint32
  x128, x129 = bits.Mul32(x126, 0xffffffff)
  var x130 uint32
  var x131 uint32
  x130, x131 = bits.Mul32(x126, 0xffffffff)
  var x132 uint32
  var x133 uint32
  x132, x133 = bits.Mul32(x126, 0xffffffff)
  var x134 uint32
  var x135 uint32
  x134, x135 = bits.Mul32(x126, 0xffffffff)
  var x136 uint32
  var x137 uint32
  x136, x137 = bits.Add32(x135, x132, 0x0)
  var x138 uint32
  var x139 uint32
  x138, x139 = bits.Add32(x133, x130, x137)
  var x140 uint32
  var x141 uint32
  x140, x141 = bits.Add32(x131, x128, x139)
  var x143 uint32
  _, x143 = bits.Add32(x112, x126, 0x0)
  var x144 uint32
  var x145 uint32
  x144, x145 = bits.Add32(x114, uint32(0x0), x143)
  var x146 uint32
  var x147 uint32
  x146, x147 = bits.Add32(x116, uint32(0x0), x145)
  var x148 uint32
  var x149 uint32
  x148, x149 = bits.Add32(x118, x134, x147)
  var x150 uint32
  var x151 uint32
  x150, x151 = bits.Add32(x120, x136, x149)
  var x152 uint32
  var x153 uint32
  x152, x153 = bits.Add32(x122, x138, x151)
  var x154 uint32
  var x155 uint32
  x154, x155 = bits.Add32(x124, x140, x153)
  var x156 uint32
  x156, _ = bits.Add32(x129, uint32(0x0), x141)
  var x158 uint32
  x158, _ = bits.Add32(uint32(0x0), uint32(0x0), x111)
  var x160 uint32
  x160, _ = bits.Add32(x158, uint32(0x0), x125)
  var x162 uint32
  var x163 uint32
  x162, x163 = bits.Add32(x160, x156, x155)
  var x164 uint32
  var x165 uint32
  x164, x165 = bits.Add32(x144, (arg1[4]), 0x0)
  var x166 uint32
  var x167 uint32
  x166, x167 = bits.Add32(x146, uint32(0x0), x165)
  var x168 uint32
  var x169 uint32
  x168, x169 = bits.Add32(x148, uint32(0x0), x167)
  var x170 uint32
  var x171 uint32
  x170, x171 = bits.Add32(x150, uint32(0x0), x169)
  var x172 uint32
  var x173 uint32
  x172, x173 = bits.Add32(x152, uint32(0x0), x171)
  var x174 uint32
  var x175 uint32
  x174, x175 = bits.Add32(x154, uint32(0x0), x173)
  var x176 uint32
  var x177 uint32
  x176, x177 = bits.Add32(x162, uint32(0x0), x175)
  var x178 uint32
  x178, _ = bits.Mul32(x164, 0xffffffff)
  var x180 uint32
  var x181 uint32
  x180, x181 = bits.Mul32(x178, 0xffffffff)
  var x182 uint32
  var x183 uint32
  x182, x183 = bits.Mul32(x178, 0xffffffff)
  var x184 uint32
  var x185 uint32
  x184, x185 = bits.Mul32(x178, 0xffffffff)
  var x186 uint32
  var x187 uint32
  x186, x187 = bits.Mul32(x178, 0xffffffff)
  var x188 uint32
  var x189 uint32
  x188, x189 = bits.Add32(x187, x184, 0x0)
  var x190 uint32
  var x191 uint32
  x190, x191 = bits.Add32(x185, x182, x189)
  var x192 uint32
  var x193 uint32
  x192, x193 = bits.Add32(x183, x180, x191)
  var x195 uint32
  _, x195 = bits.Add32(x164, x178, 0x0)
  var x196 uint32
  var x197 uint32
  x196, x197 = bits.Add32(x166, uint32(0x0), x195)
  var x198 uint32
  var x199 uint32
  x198, x199 = bits.Add32(x168, uint32(0x0), x197)
  var x200 uint32
  var x201 uint32
  x200, x201 = bits.Add32(x170, x186, x199)
  var x202 uint32
  var x203 uint32
  x202, x203 = bits.Add32(x172, x188, x201)
  var x204 uint32
  var x205 uint32
  x204, x205 = bits.Add32(x174, x190, x203)
  var x206 uint32
  var x207 uint32
  x206, x207 = bits.Add32(x176, x192, x205)
  var x208 uint32
  x208, _ = bits.Add32(x181, uint32(0x0), x193)
  var x210 uint32
  x210, _ = bits.Add32(uint32(0x0), uint32(0x0), x163)
  var x212 uint32
  x212, _ = bits.Add32(x210, uint32(0x0), x177)
  var x214 uint32
  var x215 uint32
  x214, x215 = bits.Add32(x212, x208, x207)
  var x216 uint32
  var x217 uint32
  x216, x217 = bits.Add32(x196, (arg1[5]), 0x0)
  var x218 uint32
  var x219 uint32
  x218, x219 = bits.Add32(x198, uint32(0x0), x217)
  var x220 uint32
  var x221 uint32
  x220, x221 = bits.Add32(x200, uint32(0x0), x219)
  var x222 uint32
  var x223 uint32
  x222, x223 = bits.Add32(x202, uint32(0x0), x221)
  var x224 uint32
  var x225 uint32
  x224, x225 = bits.Add32(x204, uint32(0x0), x223)
  var x226 uint32
  var x227 uint32
  x226, x227 = bits.Add32(x206, uint32(0x0), x225)
  var x228 uint32
  var x229 uint32
  x228, x229 = bits.Add32(x214, uint32(0x0), x227)
  var x230 uint32
  x230, _ = bits.Mul32(x216, 0xffffffff)
  var x232 uint32
  var x233 uint32
  x232, x233 = bits.Mul32(x230, 0xffffffff)
  var x234 uint32
  var x235 uint32
  x234, x235 = bits.Mul32(x230, 0xffffffff)
  var x236 uint32
  var x237 uint32
  x236, x237 = bits.Mul32(x230, 0xffffffff)
  var x238 uint32
  var x239 uint32
  x238, x239 = bits.Mul32(x230, 0xffffffff)
  var x240 uint32
  var x241 uint32
  x240, x241 = bits.Add32(x239, x236, 0x0)
  var x242 uint32
  var x243 uint32
  x242, x243 = bits.Add32(x237, x234, x241)
  var x244 uint32
  var x245 uint32
  x244, x245 = bits.Add32(x235, x232, x243)
  var x247 uint32
  _, x247 = bits.Add32(x216, x230, 0x0)
  var x248 uint32
  var x249 uint32
  x248, x249 = bits.Add32(x218, uint32(0x0), x247)
  var x250 uint32
  var x251 uint32
  x250, x251 = bits.Add32(x220, uint32(0x0), x249)
  var x252 uint32
  var x253 uint32
  x252, x253 = bits.Add32(x222, x238, x251)
  var x254 uint32
  var x255 uint32
  x254, x255 = bits.Add32(x224, x240, x253)
  var x256 uint32
  var x257 uint32
  x256, x257 = bits.Add32(x226, x242, x255)
  var x258 uint32
  var x259 uint32
  x258, x259 = bits.Add32(x228, x244, x257)
  var x260 uint32
  x260, _ = bits.Add32(x233, uint32(0x0), x245)
  var x262 uint32
  x262, _ = bits.Add32(uint32(0x0), uint32(0x0), x215)
  var x264 uint32
  x264, _ = bits.Add32(x262, uint32(0x0), x229)
  var x266 uint32
  var x267 uint32
  x266, x267 = bits.Add32(x264, x260, x259)
  var x268 uint32
  var x269 uint32
  x268, x269 = bits.Add32(x248, (arg1[6]), 0x0)
  var x270 uint32
  var x271 uint32
  x270, x271 = bits.Add32(x250, uint32(0x0), x269)
  var x272 uint32
  var x273 uint32
  x272, x273 = bits.Add32(x252, uint32(0x0), x271)
  var x274 uint32
  var x275 uint32
  x274, x275 = bits.Add32(x254, uint32(0x0), x273)
  var x276 uint32
  var x277 uint32
  x276, x277 = bits.Add32(x256, uint32(0x0), x275)
  var x278 uint32
  var x279 uint32
  x278, x279 = bits.Add32(x258, uint32(0x0), x277)
  var x280 uint32
  var x281 uint32
  x280, x281 = bits.Add32(x266, uint32(0x0), x279)
  var x282 uint32
  x282, _ = bits.Mul32(x268, 0xffffffff)
  var x284 uint32
  var x285 uint32
  x284, x285 = bits.Mul32(x282, 0xffffffff)
  var x286 uint32
  var x287 uint32
  x286, x287 = bits.Mul32(x282, 0xffffffff)
  var x288 uint32
  var x289 uint32
  x288, x289 = bits.Mul32(x282, 0xffffffff)
  var x290 uint32
  var x291 uint32
  x290, x291 = bits.Mul32(x282, 0xffffffff)
  var x292 uint32
  var x293 uint32
  x292, x293 = bits.Add32(x291, x288, 0x0)
  var x294 uint32
  var x295 uint32
  x294, x295 = bits.Add32(x289, x286, x293)
  var x296 uint32
  var x297 uint32
  x296, x297 = bits.Add32(x287, x284, x295)
  var x299 uint32
  _, x299 = bits.Add32(x268, x282, 0x0)
  var x300 uint32
  var x301 uint32
  x300, x301 = bits.Add32(x270, uint32(0x0), x299)
  var x302 uint32
  var x303 uint32
  x302, x303 = bits.Add32(x272, uint32(0x0), x301)
  var x304 uint32
  var x305 uint32
  x304, x305 = bits.Add32(x274, x290, x303)
  var x306 uint32
  var x307 uint32
  x306, x307 = bits.Add32(x276, x292, x305)
  var x308 uint32
  var x309 uint32
  x308, x309 = bits.Add32(x278, x294, x307)
  var x310 uint32
  var x311 uint32
  x310, x311 = bits.Add32(x280, x296, x309)
  var x312 uint32
  x312, _ = bits.Add32(x285, uint32(0x0), x297)
  var x314 uint32
  x314, _ = bits.Add32(uint32(0x0), uint32(0x0), x267)
  var x316 uint32
  x316, _ = bits.Add32(x314, uint32(0x0), x281)
  var x318 uint32
  var x319 uint32
  x318, x319 = bits.Add32(x316, x312, x311)
  var x320 uint32
  var x321 uint32
  x320, x321 = bits.Sub32(x300, 0x1, uint32(0x0))
  var x322 uint32
  var x323 uint32
  x322, x323 = bits.Sub32(x302, uint32(0x0), x321)
  var x324 uint32
  var x325 uint32
  x324, x325 = bits.Sub32(x304, uint32(0x0), x323)
  var x326 uint32
  var x327 uint32
  x326, x327 = bits.Sub32(x306, 0xffffffff, x325)
  var x328 uint32
  var x329 uint32
  x328, x329 = bits.Sub32(x308, 0xffffffff, x327)
  var x330 uint32
  var x331 uint32
  x330, x331 = bits.Sub32(x310, 0xffffffff, x329)
  var x332 uint32
  var x333 uint32
  x332, x333 = bits.Sub32(x318, 0xffffffff, x331)
  var x334 uint32
  x334, _ = bits.Add32(uint32(0x0), uint32(0x0), x319)
  var x337 uint32
  _, x337 = bits.Sub32(x334, uint32(0x0), x333)
  var x338 uint32
  fiat_p224_cmovznz_u32(&x338, x337, x320, x300)
  var x339 uint32
  fiat_p224_cmovznz_u32(&x339, x337, x322, x302)
  var x340 uint32
  fiat_p224_cmovznz_u32(&x340, x337, x324, x304)
  var x341 uint32
  fiat_p224_cmovznz_u32(&x341, x337, x326, x306)
  var x342 uint32
  fiat_p224_cmovznz_u32(&x342, x337, x328, x308)
  var x343 uint32
  fiat_p224_cmovznz_u32(&x343, x337, x330, x310)
  var x344 uint32
  fiat_p224_cmovznz_u32(&x344, x337, x332, x318)
  out1[0] = x338
  out1[1] = x339
  out1[2] = x340
  out1[3] = x341
  out1[4] = x342
  out1[5] = x343
  out1[6] = x344
}

/*
 * The function fiat_p224_nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffff]
 */
/*inline*/
func fiat_p224_nonzero(out1 *uint32, arg1 *[7]uint32) {
  var x1 uint32 = ((arg1[0]) | ((arg1[1]) | ((arg1[2]) | ((arg1[3]) | ((arg1[4]) | ((arg1[5]) | ((arg1[6]) | uint32(0x0))))))))
  *out1 = x1
}

/*
 * The function fiat_p224_selectznz is a multi-limb conditional select.
 * Postconditions:
 *   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 *   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_p224_selectznz(out1 *[7]uint32, arg1 uint32, arg2 *[7]uint32, arg3 *[7]uint32) {
  var x1 uint32
  fiat_p224_cmovznz_u32(&x1, arg1, (arg2[0]), (arg3[0]))
  var x2 uint32
  fiat_p224_cmovznz_u32(&x2, arg1, (arg2[1]), (arg3[1]))
  var x3 uint32
  fiat_p224_cmovznz_u32(&x3, arg1, (arg2[2]), (arg3[2]))
  var x4 uint32
  fiat_p224_cmovznz_u32(&x4, arg1, (arg2[3]), (arg3[3]))
  var x5 uint32
  fiat_p224_cmovznz_u32(&x5, arg1, (arg2[4]), (arg3[4]))
  var x6 uint32
  fiat_p224_cmovznz_u32(&x6, arg1, (arg2[5]), (arg3[5]))
  var x7 uint32
  fiat_p224_cmovznz_u32(&x7, arg1, (arg2[6]), (arg3[6]))
  out1[0] = x1
  out1[1] = x2
  out1[2] = x3
  out1[3] = x4
  out1[4] = x5
  out1[5] = x6
  out1[6] = x7
}

/*
 * The function fiat_p224_to_bytes serializes a field element in the Montgomery domain to bytes in little-endian order.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..27]
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
 */
/*inline*/
func fiat_p224_to_bytes(out1 *[28]uint32, arg1 *[7]uint32) {
  var x1 uint32 = (arg1[6])
  var x2 uint32 = (arg1[5])
  var x3 uint32 = (arg1[4])
  var x4 uint32 = (arg1[3])
  var x5 uint32 = (arg1[2])
  var x6 uint32 = (arg1[1])
  var x7 uint32 = (arg1[0])
  var x8 uint32 = (x7 >> 8)
  var x9 uint32 = (x7 & 0xff)
  var x10 uint32 = (x8 >> 8)
  var x11 uint32 = (x8 & 0xff)
  var x12 uint32 = (x10 >> 8)
  var x13 uint32 = (x10 & 0xff)
  var x14 uint32 = (x12 & 0xff)
  var x15 uint32 = (x6 >> 8)
  var x16 uint32 = (x6 & 0xff)
  var x17 uint32 = (x15 >> 8)
  var x18 uint32 = (x15 & 0xff)
  var x19 uint32 = (x17 >> 8)
  var x20 uint32 = (x17 & 0xff)
  var x21 uint32 = (x19 & 0xff)
  var x22 uint32 = (x5 >> 8)
  var x23 uint32 = (x5 & 0xff)
  var x24 uint32 = (x22 >> 8)
  var x25 uint32 = (x22 & 0xff)
  var x26 uint32 = (x24 >> 8)
  var x27 uint32 = (x24 & 0xff)
  var x28 uint32 = (x26 & 0xff)
  var x29 uint32 = (x4 >> 8)
  var x30 uint32 = (x4 & 0xff)
  var x31 uint32 = (x29 >> 8)
  var x32 uint32 = (x29 & 0xff)
  var x33 uint32 = (x31 >> 8)
  var x34 uint32 = (x31 & 0xff)
  var x35 uint32 = (x33 & 0xff)
  var x36 uint32 = (x3 >> 8)
  var x37 uint32 = (x3 & 0xff)
  var x38 uint32 = (x36 >> 8)
  var x39 uint32 = (x36 & 0xff)
  var x40 uint32 = (x38 >> 8)
  var x41 uint32 = (x38 & 0xff)
  var x42 uint32 = (x40 & 0xff)
  var x43 uint32 = (x2 >> 8)
  var x44 uint32 = (x2 & 0xff)
  var x45 uint32 = (x43 >> 8)
  var x46 uint32 = (x43 & 0xff)
  var x47 uint32 = (x45 >> 8)
  var x48 uint32 = (x45 & 0xff)
  var x49 uint32 = (x47 & 0xff)
  var x50 uint32 = (x1 >> 8)
  var x51 uint32 = (x1 & 0xff)
  var x52 uint32 = (x50 >> 8)
  var x53 uint32 = (x50 & 0xff)
  var x54 uint32 = (x52 >> 8)
  var x55 uint32 = (x52 & 0xff)
  out1[0] = x9
  out1[1] = x11
  out1[2] = x13
  out1[3] = x14
  out1[4] = x16
  out1[5] = x18
  out1[6] = x20
  out1[7] = x21
  out1[8] = x23
  out1[9] = x25
  out1[10] = x27
  out1[11] = x28
  out1[12] = x30
  out1[13] = x32
  out1[14] = x34
  out1[15] = x35
  out1[16] = x37
  out1[17] = x39
  out1[18] = x41
  out1[19] = x42
  out1[20] = x44
  out1[21] = x46
  out1[22] = x48
  out1[23] = x49
  out1[24] = x51
  out1[25] = x53
  out1[26] = x55
  out1[27] = x54
}

/*
 * The function fiat_p224_from_bytes deserializes a field element in the Montgomery domain from bytes in little-endian order.
 * Preconditions:
 *   0 ≤ bytes_eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = bytes_eval arg1 mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_p224_from_bytes(out1 *[7]uint32, arg1 *[28]uint32) {
  var x1 uint32 = ((arg1[27]) << 24)
  var x2 uint32 = ((arg1[26]) << 16)
  var x3 uint32 = ((arg1[25]) << 8)
  var x4 uint32 = (arg1[24])
  var x5 uint32 = ((arg1[23]) << 24)
  var x6 uint32 = ((arg1[22]) << 16)
  var x7 uint32 = ((arg1[21]) << 8)
  var x8 uint32 = (arg1[20])
  var x9 uint32 = ((arg1[19]) << 24)
  var x10 uint32 = ((arg1[18]) << 16)
  var x11 uint32 = ((arg1[17]) << 8)
  var x12 uint32 = (arg1[16])
  var x13 uint32 = ((arg1[15]) << 24)
  var x14 uint32 = ((arg1[14]) << 16)
  var x15 uint32 = ((arg1[13]) << 8)
  var x16 uint32 = (arg1[12])
  var x17 uint32 = ((arg1[11]) << 24)
  var x18 uint32 = ((arg1[10]) << 16)
  var x19 uint32 = ((arg1[9]) << 8)
  var x20 uint32 = (arg1[8])
  var x21 uint32 = ((arg1[7]) << 24)
  var x22 uint32 = ((arg1[6]) << 16)
  var x23 uint32 = ((arg1[5]) << 8)
  var x24 uint32 = (arg1[4])
  var x25 uint32 = ((arg1[3]) << 24)
  var x26 uint32 = ((arg1[2]) << 16)
  var x27 uint32 = ((arg1[1]) << 8)
  var x28 uint32 = (arg1[0])
  var x29 uint32 = (x28 + (x27 + (x26 + x25)))
  var x30 uint32 = (x29 & 0xffffffff)
  var x31 uint32 = (x4 + (x3 + (x2 + x1)))
  var x32 uint32 = (x8 + (x7 + (x6 + x5)))
  var x33 uint32 = (x12 + (x11 + (x10 + x9)))
  var x34 uint32 = (x16 + (x15 + (x14 + x13)))
  var x35 uint32 = (x20 + (x19 + (x18 + x17)))
  var x36 uint32 = (x24 + (x23 + (x22 + x21)))
  var x37 uint32 = (x36 & 0xffffffff)
  var x38 uint32 = (x35 & 0xffffffff)
  var x39 uint32 = (x34 & 0xffffffff)
  var x40 uint32 = (x33 & 0xffffffff)
  var x41 uint32 = (x32 & 0xffffffff)
  out1[0] = x30
  out1[1] = x37
  out1[2] = x38
  out1[3] = x39
  out1[4] = x40
  out1[5] = x41
  out1[6] = x31
}

