/* Autogenerated: src/ExtractionOCaml/word_by_word_montgomery --lang=Go --cmovznz-by-mul --widen-carry --widen-bytes secp256k1 '2^256 - 2^32 - 977' 32 mul square add sub opp from_montgomery nonzero selectznz to_bytes from_bytes */
/* curve description: secp256k1 */
/* requested operations: mul, square, add, sub, opp, from_montgomery, nonzero, selectznz, to_bytes, from_bytes */
/* m = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f (from "2^256 - 2^32 - 977") */
/* machine_wordsize = 32 (from "32") */
/*                                                                    */
/* NOTE: In addition to the bounds specified above each function, all */
/*   functions synthesized for this Montgomery arithmetic require the */
/*   input to be strictly less than the prime modulus (m), and also   */
/*   require the input to be in the unique saturated representation.  */
/*   All functions also ensure that these two properties are true of  */
/*   return values.                                                   */

package fiat_secp256k1

import "math/bits"


/*
 * The function fiat_secp256k1_cmovznz_u32 is a single-word conditional move.
 * Postconditions:
 *   out1 = (if arg1 = 0 then arg2 else arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffff]
 *   arg3: [0x0 ~> 0xffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffff]
 */
/*inline*/
func fiat_secp256k1_cmovznz_u32(out1 *uint32, arg1 uint32, arg2 uint32, arg3 uint32) {
  var x1 uint32 = (arg1 * 0xffffffff)
  var x2 uint32 = ((x1 & arg3) | ((^x1) & arg2))
  *out1 = x2
}

/*
 * The function fiat_secp256k1_mul multiplies two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 *   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_secp256k1_mul(out1 *[8]uint32, arg1 *[8]uint32, arg2 *[8]uint32) {
  var x1 uint32 = (arg1[1])
  var x2 uint32 = (arg1[2])
  var x3 uint32 = (arg1[3])
  var x4 uint32 = (arg1[4])
  var x5 uint32 = (arg1[5])
  var x6 uint32 = (arg1[6])
  var x7 uint32 = (arg1[7])
  var x8 uint32 = (arg1[0])
  var x9 uint32
  var x10 uint32
  x9, x10 = bits.Mul32(x8, (arg2[7]))
  var x11 uint32
  var x12 uint32
  x11, x12 = bits.Mul32(x8, (arg2[6]))
  var x13 uint32
  var x14 uint32
  x13, x14 = bits.Mul32(x8, (arg2[5]))
  var x15 uint32
  var x16 uint32
  x15, x16 = bits.Mul32(x8, (arg2[4]))
  var x17 uint32
  var x18 uint32
  x17, x18 = bits.Mul32(x8, (arg2[3]))
  var x19 uint32
  var x20 uint32
  x19, x20 = bits.Mul32(x8, (arg2[2]))
  var x21 uint32
  var x22 uint32
  x21, x22 = bits.Mul32(x8, (arg2[1]))
  var x23 uint32
  var x24 uint32
  x23, x24 = bits.Mul32(x8, (arg2[0]))
  var x25 uint32
  var x26 uint32
  x25, x26 = bits.Add32(x24, x21, 0x0)
  var x27 uint32
  var x28 uint32
  x27, x28 = bits.Add32(x22, x19, x26)
  var x29 uint32
  var x30 uint32
  x29, x30 = bits.Add32(x20, x17, x28)
  var x31 uint32
  var x32 uint32
  x31, x32 = bits.Add32(x18, x15, x30)
  var x33 uint32
  var x34 uint32
  x33, x34 = bits.Add32(x16, x13, x32)
  var x35 uint32
  var x36 uint32
  x35, x36 = bits.Add32(x14, x11, x34)
  var x37 uint32
  var x38 uint32
  x37, x38 = bits.Add32(x12, x9, x36)
  var x39 uint32 = (x38 + x10)
  var x40 uint32
  x40, _ = bits.Mul32(x23, 0xd2253531)
  var x42 uint32
  var x43 uint32
  x42, x43 = bits.Mul32(x40, 0xffffffff)
  var x44 uint32
  var x45 uint32
  x44, x45 = bits.Mul32(x40, 0xffffffff)
  var x46 uint32
  var x47 uint32
  x46, x47 = bits.Mul32(x40, 0xffffffff)
  var x48 uint32
  var x49 uint32
  x48, x49 = bits.Mul32(x40, 0xffffffff)
  var x50 uint32
  var x51 uint32
  x50, x51 = bits.Mul32(x40, 0xffffffff)
  var x52 uint32
  var x53 uint32
  x52, x53 = bits.Mul32(x40, 0xffffffff)
  var x54 uint32
  var x55 uint32
  x54, x55 = bits.Mul32(x40, 0xfffffffe)
  var x56 uint32
  var x57 uint32
  x56, x57 = bits.Mul32(x40, 0xfffffc2f)
  var x58 uint32
  var x59 uint32
  x58, x59 = bits.Add32(x57, x54, 0x0)
  var x60 uint32
  var x61 uint32
  x60, x61 = bits.Add32(x55, x52, x59)
  var x62 uint32
  var x63 uint32
  x62, x63 = bits.Add32(x53, x50, x61)
  var x64 uint32
  var x65 uint32
  x64, x65 = bits.Add32(x51, x48, x63)
  var x66 uint32
  var x67 uint32
  x66, x67 = bits.Add32(x49, x46, x65)
  var x68 uint32
  var x69 uint32
  x68, x69 = bits.Add32(x47, x44, x67)
  var x70 uint32
  var x71 uint32
  x70, x71 = bits.Add32(x45, x42, x69)
  var x72 uint32 = (x71 + x43)
  var x74 uint32
  _, x74 = bits.Add32(x23, x56, 0x0)
  var x75 uint32
  var x76 uint32
  x75, x76 = bits.Add32(x25, x58, x74)
  var x77 uint32
  var x78 uint32
  x77, x78 = bits.Add32(x27, x60, x76)
  var x79 uint32
  var x80 uint32
  x79, x80 = bits.Add32(x29, x62, x78)
  var x81 uint32
  var x82 uint32
  x81, x82 = bits.Add32(x31, x64, x80)
  var x83 uint32
  var x84 uint32
  x83, x84 = bits.Add32(x33, x66, x82)
  var x85 uint32
  var x86 uint32
  x85, x86 = bits.Add32(x35, x68, x84)
  var x87 uint32
  var x88 uint32
  x87, x88 = bits.Add32(x37, x70, x86)
  var x89 uint32
  var x90 uint32
  x89, x90 = bits.Add32(x39, x72, x88)
  var x91 uint32
  var x92 uint32
  x91, x92 = bits.Mul32(x1, (arg2[7]))
  var x93 uint32
  var x94 uint32
  x93, x94 = bits.Mul32(x1, (arg2[6]))
  var x95 uint32
  var x96 uint32
  x95, x96 = bits.Mul32(x1, (arg2[5]))
  var x97 uint32
  var x98 uint32
  x97, x98 = bits.Mul32(x1, (arg2[4]))
  var x99 uint32
  var x100 uint32
  x99, x100 = bits.Mul32(x1, (arg2[3]))
  var x101 uint32
  var x102 uint32
  x101, x102 = bits.Mul32(x1, (arg2[2]))
  var x103 uint32
  var x104 uint32
  x103, x104 = bits.Mul32(x1, (arg2[1]))
  var x105 uint32
  var x106 uint32
  x105, x106 = bits.Mul32(x1, (arg2[0]))
  var x107 uint32
  var x108 uint32
  x107, x108 = bits.Add32(x106, x103, 0x0)
  var x109 uint32
  var x110 uint32
  x109, x110 = bits.Add32(x104, x101, x108)
  var x111 uint32
  var x112 uint32
  x111, x112 = bits.Add32(x102, x99, x110)
  var x113 uint32
  var x114 uint32
  x113, x114 = bits.Add32(x100, x97, x112)
  var x115 uint32
  var x116 uint32
  x115, x116 = bits.Add32(x98, x95, x114)
  var x117 uint32
  var x118 uint32
  x117, x118 = bits.Add32(x96, x93, x116)
  var x119 uint32
  var x120 uint32
  x119, x120 = bits.Add32(x94, x91, x118)
  var x121 uint32 = (x120 + x92)
  var x122 uint32
  var x123 uint32
  x122, x123 = bits.Add32(x75, x105, 0x0)
  var x124 uint32
  var x125 uint32
  x124, x125 = bits.Add32(x77, x107, x123)
  var x126 uint32
  var x127 uint32
  x126, x127 = bits.Add32(x79, x109, x125)
  var x128 uint32
  var x129 uint32
  x128, x129 = bits.Add32(x81, x111, x127)
  var x130 uint32
  var x131 uint32
  x130, x131 = bits.Add32(x83, x113, x129)
  var x132 uint32
  var x133 uint32
  x132, x133 = bits.Add32(x85, x115, x131)
  var x134 uint32
  var x135 uint32
  x134, x135 = bits.Add32(x87, x117, x133)
  var x136 uint32
  var x137 uint32
  x136, x137 = bits.Add32(x89, x119, x135)
  var x138 uint32
  var x139 uint32
  x138, x139 = bits.Add32(x90, x121, x137)
  var x140 uint32
  x140, _ = bits.Mul32(x122, 0xd2253531)
  var x142 uint32
  var x143 uint32
  x142, x143 = bits.Mul32(x140, 0xffffffff)
  var x144 uint32
  var x145 uint32
  x144, x145 = bits.Mul32(x140, 0xffffffff)
  var x146 uint32
  var x147 uint32
  x146, x147 = bits.Mul32(x140, 0xffffffff)
  var x148 uint32
  var x149 uint32
  x148, x149 = bits.Mul32(x140, 0xffffffff)
  var x150 uint32
  var x151 uint32
  x150, x151 = bits.Mul32(x140, 0xffffffff)
  var x152 uint32
  var x153 uint32
  x152, x153 = bits.Mul32(x140, 0xffffffff)
  var x154 uint32
  var x155 uint32
  x154, x155 = bits.Mul32(x140, 0xfffffffe)
  var x156 uint32
  var x157 uint32
  x156, x157 = bits.Mul32(x140, 0xfffffc2f)
  var x158 uint32
  var x159 uint32
  x158, x159 = bits.Add32(x157, x154, 0x0)
  var x160 uint32
  var x161 uint32
  x160, x161 = bits.Add32(x155, x152, x159)
  var x162 uint32
  var x163 uint32
  x162, x163 = bits.Add32(x153, x150, x161)
  var x164 uint32
  var x165 uint32
  x164, x165 = bits.Add32(x151, x148, x163)
  var x166 uint32
  var x167 uint32
  x166, x167 = bits.Add32(x149, x146, x165)
  var x168 uint32
  var x169 uint32
  x168, x169 = bits.Add32(x147, x144, x167)
  var x170 uint32
  var x171 uint32
  x170, x171 = bits.Add32(x145, x142, x169)
  var x172 uint32 = (x171 + x143)
  var x174 uint32
  _, x174 = bits.Add32(x122, x156, 0x0)
  var x175 uint32
  var x176 uint32
  x175, x176 = bits.Add32(x124, x158, x174)
  var x177 uint32
  var x178 uint32
  x177, x178 = bits.Add32(x126, x160, x176)
  var x179 uint32
  var x180 uint32
  x179, x180 = bits.Add32(x128, x162, x178)
  var x181 uint32
  var x182 uint32
  x181, x182 = bits.Add32(x130, x164, x180)
  var x183 uint32
  var x184 uint32
  x183, x184 = bits.Add32(x132, x166, x182)
  var x185 uint32
  var x186 uint32
  x185, x186 = bits.Add32(x134, x168, x184)
  var x187 uint32
  var x188 uint32
  x187, x188 = bits.Add32(x136, x170, x186)
  var x189 uint32
  var x190 uint32
  x189, x190 = bits.Add32(x138, x172, x188)
  var x191 uint32 = (x190 + x139)
  var x192 uint32
  var x193 uint32
  x192, x193 = bits.Mul32(x2, (arg2[7]))
  var x194 uint32
  var x195 uint32
  x194, x195 = bits.Mul32(x2, (arg2[6]))
  var x196 uint32
  var x197 uint32
  x196, x197 = bits.Mul32(x2, (arg2[5]))
  var x198 uint32
  var x199 uint32
  x198, x199 = bits.Mul32(x2, (arg2[4]))
  var x200 uint32
  var x201 uint32
  x200, x201 = bits.Mul32(x2, (arg2[3]))
  var x202 uint32
  var x203 uint32
  x202, x203 = bits.Mul32(x2, (arg2[2]))
  var x204 uint32
  var x205 uint32
  x204, x205 = bits.Mul32(x2, (arg2[1]))
  var x206 uint32
  var x207 uint32
  x206, x207 = bits.Mul32(x2, (arg2[0]))
  var x208 uint32
  var x209 uint32
  x208, x209 = bits.Add32(x207, x204, 0x0)
  var x210 uint32
  var x211 uint32
  x210, x211 = bits.Add32(x205, x202, x209)
  var x212 uint32
  var x213 uint32
  x212, x213 = bits.Add32(x203, x200, x211)
  var x214 uint32
  var x215 uint32
  x214, x215 = bits.Add32(x201, x198, x213)
  var x216 uint32
  var x217 uint32
  x216, x217 = bits.Add32(x199, x196, x215)
  var x218 uint32
  var x219 uint32
  x218, x219 = bits.Add32(x197, x194, x217)
  var x220 uint32
  var x221 uint32
  x220, x221 = bits.Add32(x195, x192, x219)
  var x222 uint32 = (x221 + x193)
  var x223 uint32
  var x224 uint32
  x223, x224 = bits.Add32(x175, x206, 0x0)
  var x225 uint32
  var x226 uint32
  x225, x226 = bits.Add32(x177, x208, x224)
  var x227 uint32
  var x228 uint32
  x227, x228 = bits.Add32(x179, x210, x226)
  var x229 uint32
  var x230 uint32
  x229, x230 = bits.Add32(x181, x212, x228)
  var x231 uint32
  var x232 uint32
  x231, x232 = bits.Add32(x183, x214, x230)
  var x233 uint32
  var x234 uint32
  x233, x234 = bits.Add32(x185, x216, x232)
  var x235 uint32
  var x236 uint32
  x235, x236 = bits.Add32(x187, x218, x234)
  var x237 uint32
  var x238 uint32
  x237, x238 = bits.Add32(x189, x220, x236)
  var x239 uint32
  var x240 uint32
  x239, x240 = bits.Add32(x191, x222, x238)
  var x241 uint32
  x241, _ = bits.Mul32(x223, 0xd2253531)
  var x243 uint32
  var x244 uint32
  x243, x244 = bits.Mul32(x241, 0xffffffff)
  var x245 uint32
  var x246 uint32
  x245, x246 = bits.Mul32(x241, 0xffffffff)
  var x247 uint32
  var x248 uint32
  x247, x248 = bits.Mul32(x241, 0xffffffff)
  var x249 uint32
  var x250 uint32
  x249, x250 = bits.Mul32(x241, 0xffffffff)
  var x251 uint32
  var x252 uint32
  x251, x252 = bits.Mul32(x241, 0xffffffff)
  var x253 uint32
  var x254 uint32
  x253, x254 = bits.Mul32(x241, 0xffffffff)
  var x255 uint32
  var x256 uint32
  x255, x256 = bits.Mul32(x241, 0xfffffffe)
  var x257 uint32
  var x258 uint32
  x257, x258 = bits.Mul32(x241, 0xfffffc2f)
  var x259 uint32
  var x260 uint32
  x259, x260 = bits.Add32(x258, x255, 0x0)
  var x261 uint32
  var x262 uint32
  x261, x262 = bits.Add32(x256, x253, x260)
  var x263 uint32
  var x264 uint32
  x263, x264 = bits.Add32(x254, x251, x262)
  var x265 uint32
  var x266 uint32
  x265, x266 = bits.Add32(x252, x249, x264)
  var x267 uint32
  var x268 uint32
  x267, x268 = bits.Add32(x250, x247, x266)
  var x269 uint32
  var x270 uint32
  x269, x270 = bits.Add32(x248, x245, x268)
  var x271 uint32
  var x272 uint32
  x271, x272 = bits.Add32(x246, x243, x270)
  var x273 uint32 = (x272 + x244)
  var x275 uint32
  _, x275 = bits.Add32(x223, x257, 0x0)
  var x276 uint32
  var x277 uint32
  x276, x277 = bits.Add32(x225, x259, x275)
  var x278 uint32
  var x279 uint32
  x278, x279 = bits.Add32(x227, x261, x277)
  var x280 uint32
  var x281 uint32
  x280, x281 = bits.Add32(x229, x263, x279)
  var x282 uint32
  var x283 uint32
  x282, x283 = bits.Add32(x231, x265, x281)
  var x284 uint32
  var x285 uint32
  x284, x285 = bits.Add32(x233, x267, x283)
  var x286 uint32
  var x287 uint32
  x286, x287 = bits.Add32(x235, x269, x285)
  var x288 uint32
  var x289 uint32
  x288, x289 = bits.Add32(x237, x271, x287)
  var x290 uint32
  var x291 uint32
  x290, x291 = bits.Add32(x239, x273, x289)
  var x292 uint32 = (x291 + x240)
  var x293 uint32
  var x294 uint32
  x293, x294 = bits.Mul32(x3, (arg2[7]))
  var x295 uint32
  var x296 uint32
  x295, x296 = bits.Mul32(x3, (arg2[6]))
  var x297 uint32
  var x298 uint32
  x297, x298 = bits.Mul32(x3, (arg2[5]))
  var x299 uint32
  var x300 uint32
  x299, x300 = bits.Mul32(x3, (arg2[4]))
  var x301 uint32
  var x302 uint32
  x301, x302 = bits.Mul32(x3, (arg2[3]))
  var x303 uint32
  var x304 uint32
  x303, x304 = bits.Mul32(x3, (arg2[2]))
  var x305 uint32
  var x306 uint32
  x305, x306 = bits.Mul32(x3, (arg2[1]))
  var x307 uint32
  var x308 uint32
  x307, x308 = bits.Mul32(x3, (arg2[0]))
  var x309 uint32
  var x310 uint32
  x309, x310 = bits.Add32(x308, x305, 0x0)
  var x311 uint32
  var x312 uint32
  x311, x312 = bits.Add32(x306, x303, x310)
  var x313 uint32
  var x314 uint32
  x313, x314 = bits.Add32(x304, x301, x312)
  var x315 uint32
  var x316 uint32
  x315, x316 = bits.Add32(x302, x299, x314)
  var x317 uint32
  var x318 uint32
  x317, x318 = bits.Add32(x300, x297, x316)
  var x319 uint32
  var x320 uint32
  x319, x320 = bits.Add32(x298, x295, x318)
  var x321 uint32
  var x322 uint32
  x321, x322 = bits.Add32(x296, x293, x320)
  var x323 uint32 = (x322 + x294)
  var x324 uint32
  var x325 uint32
  x324, x325 = bits.Add32(x276, x307, 0x0)
  var x326 uint32
  var x327 uint32
  x326, x327 = bits.Add32(x278, x309, x325)
  var x328 uint32
  var x329 uint32
  x328, x329 = bits.Add32(x280, x311, x327)
  var x330 uint32
  var x331 uint32
  x330, x331 = bits.Add32(x282, x313, x329)
  var x332 uint32
  var x333 uint32
  x332, x333 = bits.Add32(x284, x315, x331)
  var x334 uint32
  var x335 uint32
  x334, x335 = bits.Add32(x286, x317, x333)
  var x336 uint32
  var x337 uint32
  x336, x337 = bits.Add32(x288, x319, x335)
  var x338 uint32
  var x339 uint32
  x338, x339 = bits.Add32(x290, x321, x337)
  var x340 uint32
  var x341 uint32
  x340, x341 = bits.Add32(x292, x323, x339)
  var x342 uint32
  x342, _ = bits.Mul32(x324, 0xd2253531)
  var x344 uint32
  var x345 uint32
  x344, x345 = bits.Mul32(x342, 0xffffffff)
  var x346 uint32
  var x347 uint32
  x346, x347 = bits.Mul32(x342, 0xffffffff)
  var x348 uint32
  var x349 uint32
  x348, x349 = bits.Mul32(x342, 0xffffffff)
  var x350 uint32
  var x351 uint32
  x350, x351 = bits.Mul32(x342, 0xffffffff)
  var x352 uint32
  var x353 uint32
  x352, x353 = bits.Mul32(x342, 0xffffffff)
  var x354 uint32
  var x355 uint32
  x354, x355 = bits.Mul32(x342, 0xffffffff)
  var x356 uint32
  var x357 uint32
  x356, x357 = bits.Mul32(x342, 0xfffffffe)
  var x358 uint32
  var x359 uint32
  x358, x359 = bits.Mul32(x342, 0xfffffc2f)
  var x360 uint32
  var x361 uint32
  x360, x361 = bits.Add32(x359, x356, 0x0)
  var x362 uint32
  var x363 uint32
  x362, x363 = bits.Add32(x357, x354, x361)
  var x364 uint32
  var x365 uint32
  x364, x365 = bits.Add32(x355, x352, x363)
  var x366 uint32
  var x367 uint32
  x366, x367 = bits.Add32(x353, x350, x365)
  var x368 uint32
  var x369 uint32
  x368, x369 = bits.Add32(x351, x348, x367)
  var x370 uint32
  var x371 uint32
  x370, x371 = bits.Add32(x349, x346, x369)
  var x372 uint32
  var x373 uint32
  x372, x373 = bits.Add32(x347, x344, x371)
  var x374 uint32 = (x373 + x345)
  var x376 uint32
  _, x376 = bits.Add32(x324, x358, 0x0)
  var x377 uint32
  var x378 uint32
  x377, x378 = bits.Add32(x326, x360, x376)
  var x379 uint32
  var x380 uint32
  x379, x380 = bits.Add32(x328, x362, x378)
  var x381 uint32
  var x382 uint32
  x381, x382 = bits.Add32(x330, x364, x380)
  var x383 uint32
  var x384 uint32
  x383, x384 = bits.Add32(x332, x366, x382)
  var x385 uint32
  var x386 uint32
  x385, x386 = bits.Add32(x334, x368, x384)
  var x387 uint32
  var x388 uint32
  x387, x388 = bits.Add32(x336, x370, x386)
  var x389 uint32
  var x390 uint32
  x389, x390 = bits.Add32(x338, x372, x388)
  var x391 uint32
  var x392 uint32
  x391, x392 = bits.Add32(x340, x374, x390)
  var x393 uint32 = (x392 + x341)
  var x394 uint32
  var x395 uint32
  x394, x395 = bits.Mul32(x4, (arg2[7]))
  var x396 uint32
  var x397 uint32
  x396, x397 = bits.Mul32(x4, (arg2[6]))
  var x398 uint32
  var x399 uint32
  x398, x399 = bits.Mul32(x4, (arg2[5]))
  var x400 uint32
  var x401 uint32
  x400, x401 = bits.Mul32(x4, (arg2[4]))
  var x402 uint32
  var x403 uint32
  x402, x403 = bits.Mul32(x4, (arg2[3]))
  var x404 uint32
  var x405 uint32
  x404, x405 = bits.Mul32(x4, (arg2[2]))
  var x406 uint32
  var x407 uint32
  x406, x407 = bits.Mul32(x4, (arg2[1]))
  var x408 uint32
  var x409 uint32
  x408, x409 = bits.Mul32(x4, (arg2[0]))
  var x410 uint32
  var x411 uint32
  x410, x411 = bits.Add32(x409, x406, 0x0)
  var x412 uint32
  var x413 uint32
  x412, x413 = bits.Add32(x407, x404, x411)
  var x414 uint32
  var x415 uint32
  x414, x415 = bits.Add32(x405, x402, x413)
  var x416 uint32
  var x417 uint32
  x416, x417 = bits.Add32(x403, x400, x415)
  var x418 uint32
  var x419 uint32
  x418, x419 = bits.Add32(x401, x398, x417)
  var x420 uint32
  var x421 uint32
  x420, x421 = bits.Add32(x399, x396, x419)
  var x422 uint32
  var x423 uint32
  x422, x423 = bits.Add32(x397, x394, x421)
  var x424 uint32 = (x423 + x395)
  var x425 uint32
  var x426 uint32
  x425, x426 = bits.Add32(x377, x408, 0x0)
  var x427 uint32
  var x428 uint32
  x427, x428 = bits.Add32(x379, x410, x426)
  var x429 uint32
  var x430 uint32
  x429, x430 = bits.Add32(x381, x412, x428)
  var x431 uint32
  var x432 uint32
  x431, x432 = bits.Add32(x383, x414, x430)
  var x433 uint32
  var x434 uint32
  x433, x434 = bits.Add32(x385, x416, x432)
  var x435 uint32
  var x436 uint32
  x435, x436 = bits.Add32(x387, x418, x434)
  var x437 uint32
  var x438 uint32
  x437, x438 = bits.Add32(x389, x420, x436)
  var x439 uint32
  var x440 uint32
  x439, x440 = bits.Add32(x391, x422, x438)
  var x441 uint32
  var x442 uint32
  x441, x442 = bits.Add32(x393, x424, x440)
  var x443 uint32
  x443, _ = bits.Mul32(x425, 0xd2253531)
  var x445 uint32
  var x446 uint32
  x445, x446 = bits.Mul32(x443, 0xffffffff)
  var x447 uint32
  var x448 uint32
  x447, x448 = bits.Mul32(x443, 0xffffffff)
  var x449 uint32
  var x450 uint32
  x449, x450 = bits.Mul32(x443, 0xffffffff)
  var x451 uint32
  var x452 uint32
  x451, x452 = bits.Mul32(x443, 0xffffffff)
  var x453 uint32
  var x454 uint32
  x453, x454 = bits.Mul32(x443, 0xffffffff)
  var x455 uint32
  var x456 uint32
  x455, x456 = bits.Mul32(x443, 0xffffffff)
  var x457 uint32
  var x458 uint32
  x457, x458 = bits.Mul32(x443, 0xfffffffe)
  var x459 uint32
  var x460 uint32
  x459, x460 = bits.Mul32(x443, 0xfffffc2f)
  var x461 uint32
  var x462 uint32
  x461, x462 = bits.Add32(x460, x457, 0x0)
  var x463 uint32
  var x464 uint32
  x463, x464 = bits.Add32(x458, x455, x462)
  var x465 uint32
  var x466 uint32
  x465, x466 = bits.Add32(x456, x453, x464)
  var x467 uint32
  var x468 uint32
  x467, x468 = bits.Add32(x454, x451, x466)
  var x469 uint32
  var x470 uint32
  x469, x470 = bits.Add32(x452, x449, x468)
  var x471 uint32
  var x472 uint32
  x471, x472 = bits.Add32(x450, x447, x470)
  var x473 uint32
  var x474 uint32
  x473, x474 = bits.Add32(x448, x445, x472)
  var x475 uint32 = (x474 + x446)
  var x477 uint32
  _, x477 = bits.Add32(x425, x459, 0x0)
  var x478 uint32
  var x479 uint32
  x478, x479 = bits.Add32(x427, x461, x477)
  var x480 uint32
  var x481 uint32
  x480, x481 = bits.Add32(x429, x463, x479)
  var x482 uint32
  var x483 uint32
  x482, x483 = bits.Add32(x431, x465, x481)
  var x484 uint32
  var x485 uint32
  x484, x485 = bits.Add32(x433, x467, x483)
  var x486 uint32
  var x487 uint32
  x486, x487 = bits.Add32(x435, x469, x485)
  var x488 uint32
  var x489 uint32
  x488, x489 = bits.Add32(x437, x471, x487)
  var x490 uint32
  var x491 uint32
  x490, x491 = bits.Add32(x439, x473, x489)
  var x492 uint32
  var x493 uint32
  x492, x493 = bits.Add32(x441, x475, x491)
  var x494 uint32 = (x493 + x442)
  var x495 uint32
  var x496 uint32
  x495, x496 = bits.Mul32(x5, (arg2[7]))
  var x497 uint32
  var x498 uint32
  x497, x498 = bits.Mul32(x5, (arg2[6]))
  var x499 uint32
  var x500 uint32
  x499, x500 = bits.Mul32(x5, (arg2[5]))
  var x501 uint32
  var x502 uint32
  x501, x502 = bits.Mul32(x5, (arg2[4]))
  var x503 uint32
  var x504 uint32
  x503, x504 = bits.Mul32(x5, (arg2[3]))
  var x505 uint32
  var x506 uint32
  x505, x506 = bits.Mul32(x5, (arg2[2]))
  var x507 uint32
  var x508 uint32
  x507, x508 = bits.Mul32(x5, (arg2[1]))
  var x509 uint32
  var x510 uint32
  x509, x510 = bits.Mul32(x5, (arg2[0]))
  var x511 uint32
  var x512 uint32
  x511, x512 = bits.Add32(x510, x507, 0x0)
  var x513 uint32
  var x514 uint32
  x513, x514 = bits.Add32(x508, x505, x512)
  var x515 uint32
  var x516 uint32
  x515, x516 = bits.Add32(x506, x503, x514)
  var x517 uint32
  var x518 uint32
  x517, x518 = bits.Add32(x504, x501, x516)
  var x519 uint32
  var x520 uint32
  x519, x520 = bits.Add32(x502, x499, x518)
  var x521 uint32
  var x522 uint32
  x521, x522 = bits.Add32(x500, x497, x520)
  var x523 uint32
  var x524 uint32
  x523, x524 = bits.Add32(x498, x495, x522)
  var x525 uint32 = (x524 + x496)
  var x526 uint32
  var x527 uint32
  x526, x527 = bits.Add32(x478, x509, 0x0)
  var x528 uint32
  var x529 uint32
  x528, x529 = bits.Add32(x480, x511, x527)
  var x530 uint32
  var x531 uint32
  x530, x531 = bits.Add32(x482, x513, x529)
  var x532 uint32
  var x533 uint32
  x532, x533 = bits.Add32(x484, x515, x531)
  var x534 uint32
  var x535 uint32
  x534, x535 = bits.Add32(x486, x517, x533)
  var x536 uint32
  var x537 uint32
  x536, x537 = bits.Add32(x488, x519, x535)
  var x538 uint32
  var x539 uint32
  x538, x539 = bits.Add32(x490, x521, x537)
  var x540 uint32
  var x541 uint32
  x540, x541 = bits.Add32(x492, x523, x539)
  var x542 uint32
  var x543 uint32
  x542, x543 = bits.Add32(x494, x525, x541)
  var x544 uint32
  x544, _ = bits.Mul32(x526, 0xd2253531)
  var x546 uint32
  var x547 uint32
  x546, x547 = bits.Mul32(x544, 0xffffffff)
  var x548 uint32
  var x549 uint32
  x548, x549 = bits.Mul32(x544, 0xffffffff)
  var x550 uint32
  var x551 uint32
  x550, x551 = bits.Mul32(x544, 0xffffffff)
  var x552 uint32
  var x553 uint32
  x552, x553 = bits.Mul32(x544, 0xffffffff)
  var x554 uint32
  var x555 uint32
  x554, x555 = bits.Mul32(x544, 0xffffffff)
  var x556 uint32
  var x557 uint32
  x556, x557 = bits.Mul32(x544, 0xffffffff)
  var x558 uint32
  var x559 uint32
  x558, x559 = bits.Mul32(x544, 0xfffffffe)
  var x560 uint32
  var x561 uint32
  x560, x561 = bits.Mul32(x544, 0xfffffc2f)
  var x562 uint32
  var x563 uint32
  x562, x563 = bits.Add32(x561, x558, 0x0)
  var x564 uint32
  var x565 uint32
  x564, x565 = bits.Add32(x559, x556, x563)
  var x566 uint32
  var x567 uint32
  x566, x567 = bits.Add32(x557, x554, x565)
  var x568 uint32
  var x569 uint32
  x568, x569 = bits.Add32(x555, x552, x567)
  var x570 uint32
  var x571 uint32
  x570, x571 = bits.Add32(x553, x550, x569)
  var x572 uint32
  var x573 uint32
  x572, x573 = bits.Add32(x551, x548, x571)
  var x574 uint32
  var x575 uint32
  x574, x575 = bits.Add32(x549, x546, x573)
  var x576 uint32 = (x575 + x547)
  var x578 uint32
  _, x578 = bits.Add32(x526, x560, 0x0)
  var x579 uint32
  var x580 uint32
  x579, x580 = bits.Add32(x528, x562, x578)
  var x581 uint32
  var x582 uint32
  x581, x582 = bits.Add32(x530, x564, x580)
  var x583 uint32
  var x584 uint32
  x583, x584 = bits.Add32(x532, x566, x582)
  var x585 uint32
  var x586 uint32
  x585, x586 = bits.Add32(x534, x568, x584)
  var x587 uint32
  var x588 uint32
  x587, x588 = bits.Add32(x536, x570, x586)
  var x589 uint32
  var x590 uint32
  x589, x590 = bits.Add32(x538, x572, x588)
  var x591 uint32
  var x592 uint32
  x591, x592 = bits.Add32(x540, x574, x590)
  var x593 uint32
  var x594 uint32
  x593, x594 = bits.Add32(x542, x576, x592)
  var x595 uint32 = (x594 + x543)
  var x596 uint32
  var x597 uint32
  x596, x597 = bits.Mul32(x6, (arg2[7]))
  var x598 uint32
  var x599 uint32
  x598, x599 = bits.Mul32(x6, (arg2[6]))
  var x600 uint32
  var x601 uint32
  x600, x601 = bits.Mul32(x6, (arg2[5]))
  var x602 uint32
  var x603 uint32
  x602, x603 = bits.Mul32(x6, (arg2[4]))
  var x604 uint32
  var x605 uint32
  x604, x605 = bits.Mul32(x6, (arg2[3]))
  var x606 uint32
  var x607 uint32
  x606, x607 = bits.Mul32(x6, (arg2[2]))
  var x608 uint32
  var x609 uint32
  x608, x609 = bits.Mul32(x6, (arg2[1]))
  var x610 uint32
  var x611 uint32
  x610, x611 = bits.Mul32(x6, (arg2[0]))
  var x612 uint32
  var x613 uint32
  x612, x613 = bits.Add32(x611, x608, 0x0)
  var x614 uint32
  var x615 uint32
  x614, x615 = bits.Add32(x609, x606, x613)
  var x616 uint32
  var x617 uint32
  x616, x617 = bits.Add32(x607, x604, x615)
  var x618 uint32
  var x619 uint32
  x618, x619 = bits.Add32(x605, x602, x617)
  var x620 uint32
  var x621 uint32
  x620, x621 = bits.Add32(x603, x600, x619)
  var x622 uint32
  var x623 uint32
  x622, x623 = bits.Add32(x601, x598, x621)
  var x624 uint32
  var x625 uint32
  x624, x625 = bits.Add32(x599, x596, x623)
  var x626 uint32 = (x625 + x597)
  var x627 uint32
  var x628 uint32
  x627, x628 = bits.Add32(x579, x610, 0x0)
  var x629 uint32
  var x630 uint32
  x629, x630 = bits.Add32(x581, x612, x628)
  var x631 uint32
  var x632 uint32
  x631, x632 = bits.Add32(x583, x614, x630)
  var x633 uint32
  var x634 uint32
  x633, x634 = bits.Add32(x585, x616, x632)
  var x635 uint32
  var x636 uint32
  x635, x636 = bits.Add32(x587, x618, x634)
  var x637 uint32
  var x638 uint32
  x637, x638 = bits.Add32(x589, x620, x636)
  var x639 uint32
  var x640 uint32
  x639, x640 = bits.Add32(x591, x622, x638)
  var x641 uint32
  var x642 uint32
  x641, x642 = bits.Add32(x593, x624, x640)
  var x643 uint32
  var x644 uint32
  x643, x644 = bits.Add32(x595, x626, x642)
  var x645 uint32
  x645, _ = bits.Mul32(x627, 0xd2253531)
  var x647 uint32
  var x648 uint32
  x647, x648 = bits.Mul32(x645, 0xffffffff)
  var x649 uint32
  var x650 uint32
  x649, x650 = bits.Mul32(x645, 0xffffffff)
  var x651 uint32
  var x652 uint32
  x651, x652 = bits.Mul32(x645, 0xffffffff)
  var x653 uint32
  var x654 uint32
  x653, x654 = bits.Mul32(x645, 0xffffffff)
  var x655 uint32
  var x656 uint32
  x655, x656 = bits.Mul32(x645, 0xffffffff)
  var x657 uint32
  var x658 uint32
  x657, x658 = bits.Mul32(x645, 0xffffffff)
  var x659 uint32
  var x660 uint32
  x659, x660 = bits.Mul32(x645, 0xfffffffe)
  var x661 uint32
  var x662 uint32
  x661, x662 = bits.Mul32(x645, 0xfffffc2f)
  var x663 uint32
  var x664 uint32
  x663, x664 = bits.Add32(x662, x659, 0x0)
  var x665 uint32
  var x666 uint32
  x665, x666 = bits.Add32(x660, x657, x664)
  var x667 uint32
  var x668 uint32
  x667, x668 = bits.Add32(x658, x655, x666)
  var x669 uint32
  var x670 uint32
  x669, x670 = bits.Add32(x656, x653, x668)
  var x671 uint32
  var x672 uint32
  x671, x672 = bits.Add32(x654, x651, x670)
  var x673 uint32
  var x674 uint32
  x673, x674 = bits.Add32(x652, x649, x672)
  var x675 uint32
  var x676 uint32
  x675, x676 = bits.Add32(x650, x647, x674)
  var x677 uint32 = (x676 + x648)
  var x679 uint32
  _, x679 = bits.Add32(x627, x661, 0x0)
  var x680 uint32
  var x681 uint32
  x680, x681 = bits.Add32(x629, x663, x679)
  var x682 uint32
  var x683 uint32
  x682, x683 = bits.Add32(x631, x665, x681)
  var x684 uint32
  var x685 uint32
  x684, x685 = bits.Add32(x633, x667, x683)
  var x686 uint32
  var x687 uint32
  x686, x687 = bits.Add32(x635, x669, x685)
  var x688 uint32
  var x689 uint32
  x688, x689 = bits.Add32(x637, x671, x687)
  var x690 uint32
  var x691 uint32
  x690, x691 = bits.Add32(x639, x673, x689)
  var x692 uint32
  var x693 uint32
  x692, x693 = bits.Add32(x641, x675, x691)
  var x694 uint32
  var x695 uint32
  x694, x695 = bits.Add32(x643, x677, x693)
  var x696 uint32 = (x695 + x644)
  var x697 uint32
  var x698 uint32
  x697, x698 = bits.Mul32(x7, (arg2[7]))
  var x699 uint32
  var x700 uint32
  x699, x700 = bits.Mul32(x7, (arg2[6]))
  var x701 uint32
  var x702 uint32
  x701, x702 = bits.Mul32(x7, (arg2[5]))
  var x703 uint32
  var x704 uint32
  x703, x704 = bits.Mul32(x7, (arg2[4]))
  var x705 uint32
  var x706 uint32
  x705, x706 = bits.Mul32(x7, (arg2[3]))
  var x707 uint32
  var x708 uint32
  x707, x708 = bits.Mul32(x7, (arg2[2]))
  var x709 uint32
  var x710 uint32
  x709, x710 = bits.Mul32(x7, (arg2[1]))
  var x711 uint32
  var x712 uint32
  x711, x712 = bits.Mul32(x7, (arg2[0]))
  var x713 uint32
  var x714 uint32
  x713, x714 = bits.Add32(x712, x709, 0x0)
  var x715 uint32
  var x716 uint32
  x715, x716 = bits.Add32(x710, x707, x714)
  var x717 uint32
  var x718 uint32
  x717, x718 = bits.Add32(x708, x705, x716)
  var x719 uint32
  var x720 uint32
  x719, x720 = bits.Add32(x706, x703, x718)
  var x721 uint32
  var x722 uint32
  x721, x722 = bits.Add32(x704, x701, x720)
  var x723 uint32
  var x724 uint32
  x723, x724 = bits.Add32(x702, x699, x722)
  var x725 uint32
  var x726 uint32
  x725, x726 = bits.Add32(x700, x697, x724)
  var x727 uint32 = (x726 + x698)
  var x728 uint32
  var x729 uint32
  x728, x729 = bits.Add32(x680, x711, 0x0)
  var x730 uint32
  var x731 uint32
  x730, x731 = bits.Add32(x682, x713, x729)
  var x732 uint32
  var x733 uint32
  x732, x733 = bits.Add32(x684, x715, x731)
  var x734 uint32
  var x735 uint32
  x734, x735 = bits.Add32(x686, x717, x733)
  var x736 uint32
  var x737 uint32
  x736, x737 = bits.Add32(x688, x719, x735)
  var x738 uint32
  var x739 uint32
  x738, x739 = bits.Add32(x690, x721, x737)
  var x740 uint32
  var x741 uint32
  x740, x741 = bits.Add32(x692, x723, x739)
  var x742 uint32
  var x743 uint32
  x742, x743 = bits.Add32(x694, x725, x741)
  var x744 uint32
  var x745 uint32
  x744, x745 = bits.Add32(x696, x727, x743)
  var x746 uint32
  x746, _ = bits.Mul32(x728, 0xd2253531)
  var x748 uint32
  var x749 uint32
  x748, x749 = bits.Mul32(x746, 0xffffffff)
  var x750 uint32
  var x751 uint32
  x750, x751 = bits.Mul32(x746, 0xffffffff)
  var x752 uint32
  var x753 uint32
  x752, x753 = bits.Mul32(x746, 0xffffffff)
  var x754 uint32
  var x755 uint32
  x754, x755 = bits.Mul32(x746, 0xffffffff)
  var x756 uint32
  var x757 uint32
  x756, x757 = bits.Mul32(x746, 0xffffffff)
  var x758 uint32
  var x759 uint32
  x758, x759 = bits.Mul32(x746, 0xffffffff)
  var x760 uint32
  var x761 uint32
  x760, x761 = bits.Mul32(x746, 0xfffffffe)
  var x762 uint32
  var x763 uint32
  x762, x763 = bits.Mul32(x746, 0xfffffc2f)
  var x764 uint32
  var x765 uint32
  x764, x765 = bits.Add32(x763, x760, 0x0)
  var x766 uint32
  var x767 uint32
  x766, x767 = bits.Add32(x761, x758, x765)
  var x768 uint32
  var x769 uint32
  x768, x769 = bits.Add32(x759, x756, x767)
  var x770 uint32
  var x771 uint32
  x770, x771 = bits.Add32(x757, x754, x769)
  var x772 uint32
  var x773 uint32
  x772, x773 = bits.Add32(x755, x752, x771)
  var x774 uint32
  var x775 uint32
  x774, x775 = bits.Add32(x753, x750, x773)
  var x776 uint32
  var x777 uint32
  x776, x777 = bits.Add32(x751, x748, x775)
  var x778 uint32 = (x777 + x749)
  var x780 uint32
  _, x780 = bits.Add32(x728, x762, 0x0)
  var x781 uint32
  var x782 uint32
  x781, x782 = bits.Add32(x730, x764, x780)
  var x783 uint32
  var x784 uint32
  x783, x784 = bits.Add32(x732, x766, x782)
  var x785 uint32
  var x786 uint32
  x785, x786 = bits.Add32(x734, x768, x784)
  var x787 uint32
  var x788 uint32
  x787, x788 = bits.Add32(x736, x770, x786)
  var x789 uint32
  var x790 uint32
  x789, x790 = bits.Add32(x738, x772, x788)
  var x791 uint32
  var x792 uint32
  x791, x792 = bits.Add32(x740, x774, x790)
  var x793 uint32
  var x794 uint32
  x793, x794 = bits.Add32(x742, x776, x792)
  var x795 uint32
  var x796 uint32
  x795, x796 = bits.Add32(x744, x778, x794)
  var x797 uint32 = (x796 + x745)
  var x798 uint32
  var x799 uint32
  x798, x799 = bits.Sub32(x781, 0xfffffc2f, uint32(0x0))
  var x800 uint32
  var x801 uint32
  x800, x801 = bits.Sub32(x783, 0xfffffffe, x799)
  var x802 uint32
  var x803 uint32
  x802, x803 = bits.Sub32(x785, 0xffffffff, x801)
  var x804 uint32
  var x805 uint32
  x804, x805 = bits.Sub32(x787, 0xffffffff, x803)
  var x806 uint32
  var x807 uint32
  x806, x807 = bits.Sub32(x789, 0xffffffff, x805)
  var x808 uint32
  var x809 uint32
  x808, x809 = bits.Sub32(x791, 0xffffffff, x807)
  var x810 uint32
  var x811 uint32
  x810, x811 = bits.Sub32(x793, 0xffffffff, x809)
  var x812 uint32
  var x813 uint32
  x812, x813 = bits.Sub32(x795, 0xffffffff, x811)
  var x815 uint32
  _, x815 = bits.Sub32(x797, uint32(0x0), x813)
  var x816 uint32
  fiat_secp256k1_cmovznz_u32(&x816, x815, x798, x781)
  var x817 uint32
  fiat_secp256k1_cmovznz_u32(&x817, x815, x800, x783)
  var x818 uint32
  fiat_secp256k1_cmovznz_u32(&x818, x815, x802, x785)
  var x819 uint32
  fiat_secp256k1_cmovznz_u32(&x819, x815, x804, x787)
  var x820 uint32
  fiat_secp256k1_cmovznz_u32(&x820, x815, x806, x789)
  var x821 uint32
  fiat_secp256k1_cmovznz_u32(&x821, x815, x808, x791)
  var x822 uint32
  fiat_secp256k1_cmovznz_u32(&x822, x815, x810, x793)
  var x823 uint32
  fiat_secp256k1_cmovznz_u32(&x823, x815, x812, x795)
  out1[0] = x816
  out1[1] = x817
  out1[2] = x818
  out1[3] = x819
  out1[4] = x820
  out1[5] = x821
  out1[6] = x822
  out1[7] = x823
}

/*
 * The function fiat_secp256k1_square squares a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_secp256k1_square(out1 *[8]uint32, arg1 *[8]uint32) {
  var x1 uint32 = (arg1[1])
  var x2 uint32 = (arg1[2])
  var x3 uint32 = (arg1[3])
  var x4 uint32 = (arg1[4])
  var x5 uint32 = (arg1[5])
  var x6 uint32 = (arg1[6])
  var x7 uint32 = (arg1[7])
  var x8 uint32 = (arg1[0])
  var x9 uint32
  var x10 uint32
  x9, x10 = bits.Mul32(x8, (arg1[7]))
  var x11 uint32
  var x12 uint32
  x11, x12 = bits.Mul32(x8, (arg1[6]))
  var x13 uint32
  var x14 uint32
  x13, x14 = bits.Mul32(x8, (arg1[5]))
  var x15 uint32
  var x16 uint32
  x15, x16 = bits.Mul32(x8, (arg1[4]))
  var x17 uint32
  var x18 uint32
  x17, x18 = bits.Mul32(x8, (arg1[3]))
  var x19 uint32
  var x20 uint32
  x19, x20 = bits.Mul32(x8, (arg1[2]))
  var x21 uint32
  var x22 uint32
  x21, x22 = bits.Mul32(x8, (arg1[1]))
  var x23 uint32
  var x24 uint32
  x23, x24 = bits.Mul32(x8, (arg1[0]))
  var x25 uint32
  var x26 uint32
  x25, x26 = bits.Add32(x24, x21, 0x0)
  var x27 uint32
  var x28 uint32
  x27, x28 = bits.Add32(x22, x19, x26)
  var x29 uint32
  var x30 uint32
  x29, x30 = bits.Add32(x20, x17, x28)
  var x31 uint32
  var x32 uint32
  x31, x32 = bits.Add32(x18, x15, x30)
  var x33 uint32
  var x34 uint32
  x33, x34 = bits.Add32(x16, x13, x32)
  var x35 uint32
  var x36 uint32
  x35, x36 = bits.Add32(x14, x11, x34)
  var x37 uint32
  var x38 uint32
  x37, x38 = bits.Add32(x12, x9, x36)
  var x39 uint32 = (x38 + x10)
  var x40 uint32
  x40, _ = bits.Mul32(x23, 0xd2253531)
  var x42 uint32
  var x43 uint32
  x42, x43 = bits.Mul32(x40, 0xffffffff)
  var x44 uint32
  var x45 uint32
  x44, x45 = bits.Mul32(x40, 0xffffffff)
  var x46 uint32
  var x47 uint32
  x46, x47 = bits.Mul32(x40, 0xffffffff)
  var x48 uint32
  var x49 uint32
  x48, x49 = bits.Mul32(x40, 0xffffffff)
  var x50 uint32
  var x51 uint32
  x50, x51 = bits.Mul32(x40, 0xffffffff)
  var x52 uint32
  var x53 uint32
  x52, x53 = bits.Mul32(x40, 0xffffffff)
  var x54 uint32
  var x55 uint32
  x54, x55 = bits.Mul32(x40, 0xfffffffe)
  var x56 uint32
  var x57 uint32
  x56, x57 = bits.Mul32(x40, 0xfffffc2f)
  var x58 uint32
  var x59 uint32
  x58, x59 = bits.Add32(x57, x54, 0x0)
  var x60 uint32
  var x61 uint32
  x60, x61 = bits.Add32(x55, x52, x59)
  var x62 uint32
  var x63 uint32
  x62, x63 = bits.Add32(x53, x50, x61)
  var x64 uint32
  var x65 uint32
  x64, x65 = bits.Add32(x51, x48, x63)
  var x66 uint32
  var x67 uint32
  x66, x67 = bits.Add32(x49, x46, x65)
  var x68 uint32
  var x69 uint32
  x68, x69 = bits.Add32(x47, x44, x67)
  var x70 uint32
  var x71 uint32
  x70, x71 = bits.Add32(x45, x42, x69)
  var x72 uint32 = (x71 + x43)
  var x74 uint32
  _, x74 = bits.Add32(x23, x56, 0x0)
  var x75 uint32
  var x76 uint32
  x75, x76 = bits.Add32(x25, x58, x74)
  var x77 uint32
  var x78 uint32
  x77, x78 = bits.Add32(x27, x60, x76)
  var x79 uint32
  var x80 uint32
  x79, x80 = bits.Add32(x29, x62, x78)
  var x81 uint32
  var x82 uint32
  x81, x82 = bits.Add32(x31, x64, x80)
  var x83 uint32
  var x84 uint32
  x83, x84 = bits.Add32(x33, x66, x82)
  var x85 uint32
  var x86 uint32
  x85, x86 = bits.Add32(x35, x68, x84)
  var x87 uint32
  var x88 uint32
  x87, x88 = bits.Add32(x37, x70, x86)
  var x89 uint32
  var x90 uint32
  x89, x90 = bits.Add32(x39, x72, x88)
  var x91 uint32
  var x92 uint32
  x91, x92 = bits.Mul32(x1, (arg1[7]))
  var x93 uint32
  var x94 uint32
  x93, x94 = bits.Mul32(x1, (arg1[6]))
  var x95 uint32
  var x96 uint32
  x95, x96 = bits.Mul32(x1, (arg1[5]))
  var x97 uint32
  var x98 uint32
  x97, x98 = bits.Mul32(x1, (arg1[4]))
  var x99 uint32
  var x100 uint32
  x99, x100 = bits.Mul32(x1, (arg1[3]))
  var x101 uint32
  var x102 uint32
  x101, x102 = bits.Mul32(x1, (arg1[2]))
  var x103 uint32
  var x104 uint32
  x103, x104 = bits.Mul32(x1, (arg1[1]))
  var x105 uint32
  var x106 uint32
  x105, x106 = bits.Mul32(x1, (arg1[0]))
  var x107 uint32
  var x108 uint32
  x107, x108 = bits.Add32(x106, x103, 0x0)
  var x109 uint32
  var x110 uint32
  x109, x110 = bits.Add32(x104, x101, x108)
  var x111 uint32
  var x112 uint32
  x111, x112 = bits.Add32(x102, x99, x110)
  var x113 uint32
  var x114 uint32
  x113, x114 = bits.Add32(x100, x97, x112)
  var x115 uint32
  var x116 uint32
  x115, x116 = bits.Add32(x98, x95, x114)
  var x117 uint32
  var x118 uint32
  x117, x118 = bits.Add32(x96, x93, x116)
  var x119 uint32
  var x120 uint32
  x119, x120 = bits.Add32(x94, x91, x118)
  var x121 uint32 = (x120 + x92)
  var x122 uint32
  var x123 uint32
  x122, x123 = bits.Add32(x75, x105, 0x0)
  var x124 uint32
  var x125 uint32
  x124, x125 = bits.Add32(x77, x107, x123)
  var x126 uint32
  var x127 uint32
  x126, x127 = bits.Add32(x79, x109, x125)
  var x128 uint32
  var x129 uint32
  x128, x129 = bits.Add32(x81, x111, x127)
  var x130 uint32
  var x131 uint32
  x130, x131 = bits.Add32(x83, x113, x129)
  var x132 uint32
  var x133 uint32
  x132, x133 = bits.Add32(x85, x115, x131)
  var x134 uint32
  var x135 uint32
  x134, x135 = bits.Add32(x87, x117, x133)
  var x136 uint32
  var x137 uint32
  x136, x137 = bits.Add32(x89, x119, x135)
  var x138 uint32
  var x139 uint32
  x138, x139 = bits.Add32(x90, x121, x137)
  var x140 uint32
  x140, _ = bits.Mul32(x122, 0xd2253531)
  var x142 uint32
  var x143 uint32
  x142, x143 = bits.Mul32(x140, 0xffffffff)
  var x144 uint32
  var x145 uint32
  x144, x145 = bits.Mul32(x140, 0xffffffff)
  var x146 uint32
  var x147 uint32
  x146, x147 = bits.Mul32(x140, 0xffffffff)
  var x148 uint32
  var x149 uint32
  x148, x149 = bits.Mul32(x140, 0xffffffff)
  var x150 uint32
  var x151 uint32
  x150, x151 = bits.Mul32(x140, 0xffffffff)
  var x152 uint32
  var x153 uint32
  x152, x153 = bits.Mul32(x140, 0xffffffff)
  var x154 uint32
  var x155 uint32
  x154, x155 = bits.Mul32(x140, 0xfffffffe)
  var x156 uint32
  var x157 uint32
  x156, x157 = bits.Mul32(x140, 0xfffffc2f)
  var x158 uint32
  var x159 uint32
  x158, x159 = bits.Add32(x157, x154, 0x0)
  var x160 uint32
  var x161 uint32
  x160, x161 = bits.Add32(x155, x152, x159)
  var x162 uint32
  var x163 uint32
  x162, x163 = bits.Add32(x153, x150, x161)
  var x164 uint32
  var x165 uint32
  x164, x165 = bits.Add32(x151, x148, x163)
  var x166 uint32
  var x167 uint32
  x166, x167 = bits.Add32(x149, x146, x165)
  var x168 uint32
  var x169 uint32
  x168, x169 = bits.Add32(x147, x144, x167)
  var x170 uint32
  var x171 uint32
  x170, x171 = bits.Add32(x145, x142, x169)
  var x172 uint32 = (x171 + x143)
  var x174 uint32
  _, x174 = bits.Add32(x122, x156, 0x0)
  var x175 uint32
  var x176 uint32
  x175, x176 = bits.Add32(x124, x158, x174)
  var x177 uint32
  var x178 uint32
  x177, x178 = bits.Add32(x126, x160, x176)
  var x179 uint32
  var x180 uint32
  x179, x180 = bits.Add32(x128, x162, x178)
  var x181 uint32
  var x182 uint32
  x181, x182 = bits.Add32(x130, x164, x180)
  var x183 uint32
  var x184 uint32
  x183, x184 = bits.Add32(x132, x166, x182)
  var x185 uint32
  var x186 uint32
  x185, x186 = bits.Add32(x134, x168, x184)
  var x187 uint32
  var x188 uint32
  x187, x188 = bits.Add32(x136, x170, x186)
  var x189 uint32
  var x190 uint32
  x189, x190 = bits.Add32(x138, x172, x188)
  var x191 uint32 = (x190 + x139)
  var x192 uint32
  var x193 uint32
  x192, x193 = bits.Mul32(x2, (arg1[7]))
  var x194 uint32
  var x195 uint32
  x194, x195 = bits.Mul32(x2, (arg1[6]))
  var x196 uint32
  var x197 uint32
  x196, x197 = bits.Mul32(x2, (arg1[5]))
  var x198 uint32
  var x199 uint32
  x198, x199 = bits.Mul32(x2, (arg1[4]))
  var x200 uint32
  var x201 uint32
  x200, x201 = bits.Mul32(x2, (arg1[3]))
  var x202 uint32
  var x203 uint32
  x202, x203 = bits.Mul32(x2, (arg1[2]))
  var x204 uint32
  var x205 uint32
  x204, x205 = bits.Mul32(x2, (arg1[1]))
  var x206 uint32
  var x207 uint32
  x206, x207 = bits.Mul32(x2, (arg1[0]))
  var x208 uint32
  var x209 uint32
  x208, x209 = bits.Add32(x207, x204, 0x0)
  var x210 uint32
  var x211 uint32
  x210, x211 = bits.Add32(x205, x202, x209)
  var x212 uint32
  var x213 uint32
  x212, x213 = bits.Add32(x203, x200, x211)
  var x214 uint32
  var x215 uint32
  x214, x215 = bits.Add32(x201, x198, x213)
  var x216 uint32
  var x217 uint32
  x216, x217 = bits.Add32(x199, x196, x215)
  var x218 uint32
  var x219 uint32
  x218, x219 = bits.Add32(x197, x194, x217)
  var x220 uint32
  var x221 uint32
  x220, x221 = bits.Add32(x195, x192, x219)
  var x222 uint32 = (x221 + x193)
  var x223 uint32
  var x224 uint32
  x223, x224 = bits.Add32(x175, x206, 0x0)
  var x225 uint32
  var x226 uint32
  x225, x226 = bits.Add32(x177, x208, x224)
  var x227 uint32
  var x228 uint32
  x227, x228 = bits.Add32(x179, x210, x226)
  var x229 uint32
  var x230 uint32
  x229, x230 = bits.Add32(x181, x212, x228)
  var x231 uint32
  var x232 uint32
  x231, x232 = bits.Add32(x183, x214, x230)
  var x233 uint32
  var x234 uint32
  x233, x234 = bits.Add32(x185, x216, x232)
  var x235 uint32
  var x236 uint32
  x235, x236 = bits.Add32(x187, x218, x234)
  var x237 uint32
  var x238 uint32
  x237, x238 = bits.Add32(x189, x220, x236)
  var x239 uint32
  var x240 uint32
  x239, x240 = bits.Add32(x191, x222, x238)
  var x241 uint32
  x241, _ = bits.Mul32(x223, 0xd2253531)
  var x243 uint32
  var x244 uint32
  x243, x244 = bits.Mul32(x241, 0xffffffff)
  var x245 uint32
  var x246 uint32
  x245, x246 = bits.Mul32(x241, 0xffffffff)
  var x247 uint32
  var x248 uint32
  x247, x248 = bits.Mul32(x241, 0xffffffff)
  var x249 uint32
  var x250 uint32
  x249, x250 = bits.Mul32(x241, 0xffffffff)
  var x251 uint32
  var x252 uint32
  x251, x252 = bits.Mul32(x241, 0xffffffff)
  var x253 uint32
  var x254 uint32
  x253, x254 = bits.Mul32(x241, 0xffffffff)
  var x255 uint32
  var x256 uint32
  x255, x256 = bits.Mul32(x241, 0xfffffffe)
  var x257 uint32
  var x258 uint32
  x257, x258 = bits.Mul32(x241, 0xfffffc2f)
  var x259 uint32
  var x260 uint32
  x259, x260 = bits.Add32(x258, x255, 0x0)
  var x261 uint32
  var x262 uint32
  x261, x262 = bits.Add32(x256, x253, x260)
  var x263 uint32
  var x264 uint32
  x263, x264 = bits.Add32(x254, x251, x262)
  var x265 uint32
  var x266 uint32
  x265, x266 = bits.Add32(x252, x249, x264)
  var x267 uint32
  var x268 uint32
  x267, x268 = bits.Add32(x250, x247, x266)
  var x269 uint32
  var x270 uint32
  x269, x270 = bits.Add32(x248, x245, x268)
  var x271 uint32
  var x272 uint32
  x271, x272 = bits.Add32(x246, x243, x270)
  var x273 uint32 = (x272 + x244)
  var x275 uint32
  _, x275 = bits.Add32(x223, x257, 0x0)
  var x276 uint32
  var x277 uint32
  x276, x277 = bits.Add32(x225, x259, x275)
  var x278 uint32
  var x279 uint32
  x278, x279 = bits.Add32(x227, x261, x277)
  var x280 uint32
  var x281 uint32
  x280, x281 = bits.Add32(x229, x263, x279)
  var x282 uint32
  var x283 uint32
  x282, x283 = bits.Add32(x231, x265, x281)
  var x284 uint32
  var x285 uint32
  x284, x285 = bits.Add32(x233, x267, x283)
  var x286 uint32
  var x287 uint32
  x286, x287 = bits.Add32(x235, x269, x285)
  var x288 uint32
  var x289 uint32
  x288, x289 = bits.Add32(x237, x271, x287)
  var x290 uint32
  var x291 uint32
  x290, x291 = bits.Add32(x239, x273, x289)
  var x292 uint32 = (x291 + x240)
  var x293 uint32
  var x294 uint32
  x293, x294 = bits.Mul32(x3, (arg1[7]))
  var x295 uint32
  var x296 uint32
  x295, x296 = bits.Mul32(x3, (arg1[6]))
  var x297 uint32
  var x298 uint32
  x297, x298 = bits.Mul32(x3, (arg1[5]))
  var x299 uint32
  var x300 uint32
  x299, x300 = bits.Mul32(x3, (arg1[4]))
  var x301 uint32
  var x302 uint32
  x301, x302 = bits.Mul32(x3, (arg1[3]))
  var x303 uint32
  var x304 uint32
  x303, x304 = bits.Mul32(x3, (arg1[2]))
  var x305 uint32
  var x306 uint32
  x305, x306 = bits.Mul32(x3, (arg1[1]))
  var x307 uint32
  var x308 uint32
  x307, x308 = bits.Mul32(x3, (arg1[0]))
  var x309 uint32
  var x310 uint32
  x309, x310 = bits.Add32(x308, x305, 0x0)
  var x311 uint32
  var x312 uint32
  x311, x312 = bits.Add32(x306, x303, x310)
  var x313 uint32
  var x314 uint32
  x313, x314 = bits.Add32(x304, x301, x312)
  var x315 uint32
  var x316 uint32
  x315, x316 = bits.Add32(x302, x299, x314)
  var x317 uint32
  var x318 uint32
  x317, x318 = bits.Add32(x300, x297, x316)
  var x319 uint32
  var x320 uint32
  x319, x320 = bits.Add32(x298, x295, x318)
  var x321 uint32
  var x322 uint32
  x321, x322 = bits.Add32(x296, x293, x320)
  var x323 uint32 = (x322 + x294)
  var x324 uint32
  var x325 uint32
  x324, x325 = bits.Add32(x276, x307, 0x0)
  var x326 uint32
  var x327 uint32
  x326, x327 = bits.Add32(x278, x309, x325)
  var x328 uint32
  var x329 uint32
  x328, x329 = bits.Add32(x280, x311, x327)
  var x330 uint32
  var x331 uint32
  x330, x331 = bits.Add32(x282, x313, x329)
  var x332 uint32
  var x333 uint32
  x332, x333 = bits.Add32(x284, x315, x331)
  var x334 uint32
  var x335 uint32
  x334, x335 = bits.Add32(x286, x317, x333)
  var x336 uint32
  var x337 uint32
  x336, x337 = bits.Add32(x288, x319, x335)
  var x338 uint32
  var x339 uint32
  x338, x339 = bits.Add32(x290, x321, x337)
  var x340 uint32
  var x341 uint32
  x340, x341 = bits.Add32(x292, x323, x339)
  var x342 uint32
  x342, _ = bits.Mul32(x324, 0xd2253531)
  var x344 uint32
  var x345 uint32
  x344, x345 = bits.Mul32(x342, 0xffffffff)
  var x346 uint32
  var x347 uint32
  x346, x347 = bits.Mul32(x342, 0xffffffff)
  var x348 uint32
  var x349 uint32
  x348, x349 = bits.Mul32(x342, 0xffffffff)
  var x350 uint32
  var x351 uint32
  x350, x351 = bits.Mul32(x342, 0xffffffff)
  var x352 uint32
  var x353 uint32
  x352, x353 = bits.Mul32(x342, 0xffffffff)
  var x354 uint32
  var x355 uint32
  x354, x355 = bits.Mul32(x342, 0xffffffff)
  var x356 uint32
  var x357 uint32
  x356, x357 = bits.Mul32(x342, 0xfffffffe)
  var x358 uint32
  var x359 uint32
  x358, x359 = bits.Mul32(x342, 0xfffffc2f)
  var x360 uint32
  var x361 uint32
  x360, x361 = bits.Add32(x359, x356, 0x0)
  var x362 uint32
  var x363 uint32
  x362, x363 = bits.Add32(x357, x354, x361)
  var x364 uint32
  var x365 uint32
  x364, x365 = bits.Add32(x355, x352, x363)
  var x366 uint32
  var x367 uint32
  x366, x367 = bits.Add32(x353, x350, x365)
  var x368 uint32
  var x369 uint32
  x368, x369 = bits.Add32(x351, x348, x367)
  var x370 uint32
  var x371 uint32
  x370, x371 = bits.Add32(x349, x346, x369)
  var x372 uint32
  var x373 uint32
  x372, x373 = bits.Add32(x347, x344, x371)
  var x374 uint32 = (x373 + x345)
  var x376 uint32
  _, x376 = bits.Add32(x324, x358, 0x0)
  var x377 uint32
  var x378 uint32
  x377, x378 = bits.Add32(x326, x360, x376)
  var x379 uint32
  var x380 uint32
  x379, x380 = bits.Add32(x328, x362, x378)
  var x381 uint32
  var x382 uint32
  x381, x382 = bits.Add32(x330, x364, x380)
  var x383 uint32
  var x384 uint32
  x383, x384 = bits.Add32(x332, x366, x382)
  var x385 uint32
  var x386 uint32
  x385, x386 = bits.Add32(x334, x368, x384)
  var x387 uint32
  var x388 uint32
  x387, x388 = bits.Add32(x336, x370, x386)
  var x389 uint32
  var x390 uint32
  x389, x390 = bits.Add32(x338, x372, x388)
  var x391 uint32
  var x392 uint32
  x391, x392 = bits.Add32(x340, x374, x390)
  var x393 uint32 = (x392 + x341)
  var x394 uint32
  var x395 uint32
  x394, x395 = bits.Mul32(x4, (arg1[7]))
  var x396 uint32
  var x397 uint32
  x396, x397 = bits.Mul32(x4, (arg1[6]))
  var x398 uint32
  var x399 uint32
  x398, x399 = bits.Mul32(x4, (arg1[5]))
  var x400 uint32
  var x401 uint32
  x400, x401 = bits.Mul32(x4, (arg1[4]))
  var x402 uint32
  var x403 uint32
  x402, x403 = bits.Mul32(x4, (arg1[3]))
  var x404 uint32
  var x405 uint32
  x404, x405 = bits.Mul32(x4, (arg1[2]))
  var x406 uint32
  var x407 uint32
  x406, x407 = bits.Mul32(x4, (arg1[1]))
  var x408 uint32
  var x409 uint32
  x408, x409 = bits.Mul32(x4, (arg1[0]))
  var x410 uint32
  var x411 uint32
  x410, x411 = bits.Add32(x409, x406, 0x0)
  var x412 uint32
  var x413 uint32
  x412, x413 = bits.Add32(x407, x404, x411)
  var x414 uint32
  var x415 uint32
  x414, x415 = bits.Add32(x405, x402, x413)
  var x416 uint32
  var x417 uint32
  x416, x417 = bits.Add32(x403, x400, x415)
  var x418 uint32
  var x419 uint32
  x418, x419 = bits.Add32(x401, x398, x417)
  var x420 uint32
  var x421 uint32
  x420, x421 = bits.Add32(x399, x396, x419)
  var x422 uint32
  var x423 uint32
  x422, x423 = bits.Add32(x397, x394, x421)
  var x424 uint32 = (x423 + x395)
  var x425 uint32
  var x426 uint32
  x425, x426 = bits.Add32(x377, x408, 0x0)
  var x427 uint32
  var x428 uint32
  x427, x428 = bits.Add32(x379, x410, x426)
  var x429 uint32
  var x430 uint32
  x429, x430 = bits.Add32(x381, x412, x428)
  var x431 uint32
  var x432 uint32
  x431, x432 = bits.Add32(x383, x414, x430)
  var x433 uint32
  var x434 uint32
  x433, x434 = bits.Add32(x385, x416, x432)
  var x435 uint32
  var x436 uint32
  x435, x436 = bits.Add32(x387, x418, x434)
  var x437 uint32
  var x438 uint32
  x437, x438 = bits.Add32(x389, x420, x436)
  var x439 uint32
  var x440 uint32
  x439, x440 = bits.Add32(x391, x422, x438)
  var x441 uint32
  var x442 uint32
  x441, x442 = bits.Add32(x393, x424, x440)
  var x443 uint32
  x443, _ = bits.Mul32(x425, 0xd2253531)
  var x445 uint32
  var x446 uint32
  x445, x446 = bits.Mul32(x443, 0xffffffff)
  var x447 uint32
  var x448 uint32
  x447, x448 = bits.Mul32(x443, 0xffffffff)
  var x449 uint32
  var x450 uint32
  x449, x450 = bits.Mul32(x443, 0xffffffff)
  var x451 uint32
  var x452 uint32
  x451, x452 = bits.Mul32(x443, 0xffffffff)
  var x453 uint32
  var x454 uint32
  x453, x454 = bits.Mul32(x443, 0xffffffff)
  var x455 uint32
  var x456 uint32
  x455, x456 = bits.Mul32(x443, 0xffffffff)
  var x457 uint32
  var x458 uint32
  x457, x458 = bits.Mul32(x443, 0xfffffffe)
  var x459 uint32
  var x460 uint32
  x459, x460 = bits.Mul32(x443, 0xfffffc2f)
  var x461 uint32
  var x462 uint32
  x461, x462 = bits.Add32(x460, x457, 0x0)
  var x463 uint32
  var x464 uint32
  x463, x464 = bits.Add32(x458, x455, x462)
  var x465 uint32
  var x466 uint32
  x465, x466 = bits.Add32(x456, x453, x464)
  var x467 uint32
  var x468 uint32
  x467, x468 = bits.Add32(x454, x451, x466)
  var x469 uint32
  var x470 uint32
  x469, x470 = bits.Add32(x452, x449, x468)
  var x471 uint32
  var x472 uint32
  x471, x472 = bits.Add32(x450, x447, x470)
  var x473 uint32
  var x474 uint32
  x473, x474 = bits.Add32(x448, x445, x472)
  var x475 uint32 = (x474 + x446)
  var x477 uint32
  _, x477 = bits.Add32(x425, x459, 0x0)
  var x478 uint32
  var x479 uint32
  x478, x479 = bits.Add32(x427, x461, x477)
  var x480 uint32
  var x481 uint32
  x480, x481 = bits.Add32(x429, x463, x479)
  var x482 uint32
  var x483 uint32
  x482, x483 = bits.Add32(x431, x465, x481)
  var x484 uint32
  var x485 uint32
  x484, x485 = bits.Add32(x433, x467, x483)
  var x486 uint32
  var x487 uint32
  x486, x487 = bits.Add32(x435, x469, x485)
  var x488 uint32
  var x489 uint32
  x488, x489 = bits.Add32(x437, x471, x487)
  var x490 uint32
  var x491 uint32
  x490, x491 = bits.Add32(x439, x473, x489)
  var x492 uint32
  var x493 uint32
  x492, x493 = bits.Add32(x441, x475, x491)
  var x494 uint32 = (x493 + x442)
  var x495 uint32
  var x496 uint32
  x495, x496 = bits.Mul32(x5, (arg1[7]))
  var x497 uint32
  var x498 uint32
  x497, x498 = bits.Mul32(x5, (arg1[6]))
  var x499 uint32
  var x500 uint32
  x499, x500 = bits.Mul32(x5, (arg1[5]))
  var x501 uint32
  var x502 uint32
  x501, x502 = bits.Mul32(x5, (arg1[4]))
  var x503 uint32
  var x504 uint32
  x503, x504 = bits.Mul32(x5, (arg1[3]))
  var x505 uint32
  var x506 uint32
  x505, x506 = bits.Mul32(x5, (arg1[2]))
  var x507 uint32
  var x508 uint32
  x507, x508 = bits.Mul32(x5, (arg1[1]))
  var x509 uint32
  var x510 uint32
  x509, x510 = bits.Mul32(x5, (arg1[0]))
  var x511 uint32
  var x512 uint32
  x511, x512 = bits.Add32(x510, x507, 0x0)
  var x513 uint32
  var x514 uint32
  x513, x514 = bits.Add32(x508, x505, x512)
  var x515 uint32
  var x516 uint32
  x515, x516 = bits.Add32(x506, x503, x514)
  var x517 uint32
  var x518 uint32
  x517, x518 = bits.Add32(x504, x501, x516)
  var x519 uint32
  var x520 uint32
  x519, x520 = bits.Add32(x502, x499, x518)
  var x521 uint32
  var x522 uint32
  x521, x522 = bits.Add32(x500, x497, x520)
  var x523 uint32
  var x524 uint32
  x523, x524 = bits.Add32(x498, x495, x522)
  var x525 uint32 = (x524 + x496)
  var x526 uint32
  var x527 uint32
  x526, x527 = bits.Add32(x478, x509, 0x0)
  var x528 uint32
  var x529 uint32
  x528, x529 = bits.Add32(x480, x511, x527)
  var x530 uint32
  var x531 uint32
  x530, x531 = bits.Add32(x482, x513, x529)
  var x532 uint32
  var x533 uint32
  x532, x533 = bits.Add32(x484, x515, x531)
  var x534 uint32
  var x535 uint32
  x534, x535 = bits.Add32(x486, x517, x533)
  var x536 uint32
  var x537 uint32
  x536, x537 = bits.Add32(x488, x519, x535)
  var x538 uint32
  var x539 uint32
  x538, x539 = bits.Add32(x490, x521, x537)
  var x540 uint32
  var x541 uint32
  x540, x541 = bits.Add32(x492, x523, x539)
  var x542 uint32
  var x543 uint32
  x542, x543 = bits.Add32(x494, x525, x541)
  var x544 uint32
  x544, _ = bits.Mul32(x526, 0xd2253531)
  var x546 uint32
  var x547 uint32
  x546, x547 = bits.Mul32(x544, 0xffffffff)
  var x548 uint32
  var x549 uint32
  x548, x549 = bits.Mul32(x544, 0xffffffff)
  var x550 uint32
  var x551 uint32
  x550, x551 = bits.Mul32(x544, 0xffffffff)
  var x552 uint32
  var x553 uint32
  x552, x553 = bits.Mul32(x544, 0xffffffff)
  var x554 uint32
  var x555 uint32
  x554, x555 = bits.Mul32(x544, 0xffffffff)
  var x556 uint32
  var x557 uint32
  x556, x557 = bits.Mul32(x544, 0xffffffff)
  var x558 uint32
  var x559 uint32
  x558, x559 = bits.Mul32(x544, 0xfffffffe)
  var x560 uint32
  var x561 uint32
  x560, x561 = bits.Mul32(x544, 0xfffffc2f)
  var x562 uint32
  var x563 uint32
  x562, x563 = bits.Add32(x561, x558, 0x0)
  var x564 uint32
  var x565 uint32
  x564, x565 = bits.Add32(x559, x556, x563)
  var x566 uint32
  var x567 uint32
  x566, x567 = bits.Add32(x557, x554, x565)
  var x568 uint32
  var x569 uint32
  x568, x569 = bits.Add32(x555, x552, x567)
  var x570 uint32
  var x571 uint32
  x570, x571 = bits.Add32(x553, x550, x569)
  var x572 uint32
  var x573 uint32
  x572, x573 = bits.Add32(x551, x548, x571)
  var x574 uint32
  var x575 uint32
  x574, x575 = bits.Add32(x549, x546, x573)
  var x576 uint32 = (x575 + x547)
  var x578 uint32
  _, x578 = bits.Add32(x526, x560, 0x0)
  var x579 uint32
  var x580 uint32
  x579, x580 = bits.Add32(x528, x562, x578)
  var x581 uint32
  var x582 uint32
  x581, x582 = bits.Add32(x530, x564, x580)
  var x583 uint32
  var x584 uint32
  x583, x584 = bits.Add32(x532, x566, x582)
  var x585 uint32
  var x586 uint32
  x585, x586 = bits.Add32(x534, x568, x584)
  var x587 uint32
  var x588 uint32
  x587, x588 = bits.Add32(x536, x570, x586)
  var x589 uint32
  var x590 uint32
  x589, x590 = bits.Add32(x538, x572, x588)
  var x591 uint32
  var x592 uint32
  x591, x592 = bits.Add32(x540, x574, x590)
  var x593 uint32
  var x594 uint32
  x593, x594 = bits.Add32(x542, x576, x592)
  var x595 uint32 = (x594 + x543)
  var x596 uint32
  var x597 uint32
  x596, x597 = bits.Mul32(x6, (arg1[7]))
  var x598 uint32
  var x599 uint32
  x598, x599 = bits.Mul32(x6, (arg1[6]))
  var x600 uint32
  var x601 uint32
  x600, x601 = bits.Mul32(x6, (arg1[5]))
  var x602 uint32
  var x603 uint32
  x602, x603 = bits.Mul32(x6, (arg1[4]))
  var x604 uint32
  var x605 uint32
  x604, x605 = bits.Mul32(x6, (arg1[3]))
  var x606 uint32
  var x607 uint32
  x606, x607 = bits.Mul32(x6, (arg1[2]))
  var x608 uint32
  var x609 uint32
  x608, x609 = bits.Mul32(x6, (arg1[1]))
  var x610 uint32
  var x611 uint32
  x610, x611 = bits.Mul32(x6, (arg1[0]))
  var x612 uint32
  var x613 uint32
  x612, x613 = bits.Add32(x611, x608, 0x0)
  var x614 uint32
  var x615 uint32
  x614, x615 = bits.Add32(x609, x606, x613)
  var x616 uint32
  var x617 uint32
  x616, x617 = bits.Add32(x607, x604, x615)
  var x618 uint32
  var x619 uint32
  x618, x619 = bits.Add32(x605, x602, x617)
  var x620 uint32
  var x621 uint32
  x620, x621 = bits.Add32(x603, x600, x619)
  var x622 uint32
  var x623 uint32
  x622, x623 = bits.Add32(x601, x598, x621)
  var x624 uint32
  var x625 uint32
  x624, x625 = bits.Add32(x599, x596, x623)
  var x626 uint32 = (x625 + x597)
  var x627 uint32
  var x628 uint32
  x627, x628 = bits.Add32(x579, x610, 0x0)
  var x629 uint32
  var x630 uint32
  x629, x630 = bits.Add32(x581, x612, x628)
  var x631 uint32
  var x632 uint32
  x631, x632 = bits.Add32(x583, x614, x630)
  var x633 uint32
  var x634 uint32
  x633, x634 = bits.Add32(x585, x616, x632)
  var x635 uint32
  var x636 uint32
  x635, x636 = bits.Add32(x587, x618, x634)
  var x637 uint32
  var x638 uint32
  x637, x638 = bits.Add32(x589, x620, x636)
  var x639 uint32
  var x640 uint32
  x639, x640 = bits.Add32(x591, x622, x638)
  var x641 uint32
  var x642 uint32
  x641, x642 = bits.Add32(x593, x624, x640)
  var x643 uint32
  var x644 uint32
  x643, x644 = bits.Add32(x595, x626, x642)
  var x645 uint32
  x645, _ = bits.Mul32(x627, 0xd2253531)
  var x647 uint32
  var x648 uint32
  x647, x648 = bits.Mul32(x645, 0xffffffff)
  var x649 uint32
  var x650 uint32
  x649, x650 = bits.Mul32(x645, 0xffffffff)
  var x651 uint32
  var x652 uint32
  x651, x652 = bits.Mul32(x645, 0xffffffff)
  var x653 uint32
  var x654 uint32
  x653, x654 = bits.Mul32(x645, 0xffffffff)
  var x655 uint32
  var x656 uint32
  x655, x656 = bits.Mul32(x645, 0xffffffff)
  var x657 uint32
  var x658 uint32
  x657, x658 = bits.Mul32(x645, 0xffffffff)
  var x659 uint32
  var x660 uint32
  x659, x660 = bits.Mul32(x645, 0xfffffffe)
  var x661 uint32
  var x662 uint32
  x661, x662 = bits.Mul32(x645, 0xfffffc2f)
  var x663 uint32
  var x664 uint32
  x663, x664 = bits.Add32(x662, x659, 0x0)
  var x665 uint32
  var x666 uint32
  x665, x666 = bits.Add32(x660, x657, x664)
  var x667 uint32
  var x668 uint32
  x667, x668 = bits.Add32(x658, x655, x666)
  var x669 uint32
  var x670 uint32
  x669, x670 = bits.Add32(x656, x653, x668)
  var x671 uint32
  var x672 uint32
  x671, x672 = bits.Add32(x654, x651, x670)
  var x673 uint32
  var x674 uint32
  x673, x674 = bits.Add32(x652, x649, x672)
  var x675 uint32
  var x676 uint32
  x675, x676 = bits.Add32(x650, x647, x674)
  var x677 uint32 = (x676 + x648)
  var x679 uint32
  _, x679 = bits.Add32(x627, x661, 0x0)
  var x680 uint32
  var x681 uint32
  x680, x681 = bits.Add32(x629, x663, x679)
  var x682 uint32
  var x683 uint32
  x682, x683 = bits.Add32(x631, x665, x681)
  var x684 uint32
  var x685 uint32
  x684, x685 = bits.Add32(x633, x667, x683)
  var x686 uint32
  var x687 uint32
  x686, x687 = bits.Add32(x635, x669, x685)
  var x688 uint32
  var x689 uint32
  x688, x689 = bits.Add32(x637, x671, x687)
  var x690 uint32
  var x691 uint32
  x690, x691 = bits.Add32(x639, x673, x689)
  var x692 uint32
  var x693 uint32
  x692, x693 = bits.Add32(x641, x675, x691)
  var x694 uint32
  var x695 uint32
  x694, x695 = bits.Add32(x643, x677, x693)
  var x696 uint32 = (x695 + x644)
  var x697 uint32
  var x698 uint32
  x697, x698 = bits.Mul32(x7, (arg1[7]))
  var x699 uint32
  var x700 uint32
  x699, x700 = bits.Mul32(x7, (arg1[6]))
  var x701 uint32
  var x702 uint32
  x701, x702 = bits.Mul32(x7, (arg1[5]))
  var x703 uint32
  var x704 uint32
  x703, x704 = bits.Mul32(x7, (arg1[4]))
  var x705 uint32
  var x706 uint32
  x705, x706 = bits.Mul32(x7, (arg1[3]))
  var x707 uint32
  var x708 uint32
  x707, x708 = bits.Mul32(x7, (arg1[2]))
  var x709 uint32
  var x710 uint32
  x709, x710 = bits.Mul32(x7, (arg1[1]))
  var x711 uint32
  var x712 uint32
  x711, x712 = bits.Mul32(x7, (arg1[0]))
  var x713 uint32
  var x714 uint32
  x713, x714 = bits.Add32(x712, x709, 0x0)
  var x715 uint32
  var x716 uint32
  x715, x716 = bits.Add32(x710, x707, x714)
  var x717 uint32
  var x718 uint32
  x717, x718 = bits.Add32(x708, x705, x716)
  var x719 uint32
  var x720 uint32
  x719, x720 = bits.Add32(x706, x703, x718)
  var x721 uint32
  var x722 uint32
  x721, x722 = bits.Add32(x704, x701, x720)
  var x723 uint32
  var x724 uint32
  x723, x724 = bits.Add32(x702, x699, x722)
  var x725 uint32
  var x726 uint32
  x725, x726 = bits.Add32(x700, x697, x724)
  var x727 uint32 = (x726 + x698)
  var x728 uint32
  var x729 uint32
  x728, x729 = bits.Add32(x680, x711, 0x0)
  var x730 uint32
  var x731 uint32
  x730, x731 = bits.Add32(x682, x713, x729)
  var x732 uint32
  var x733 uint32
  x732, x733 = bits.Add32(x684, x715, x731)
  var x734 uint32
  var x735 uint32
  x734, x735 = bits.Add32(x686, x717, x733)
  var x736 uint32
  var x737 uint32
  x736, x737 = bits.Add32(x688, x719, x735)
  var x738 uint32
  var x739 uint32
  x738, x739 = bits.Add32(x690, x721, x737)
  var x740 uint32
  var x741 uint32
  x740, x741 = bits.Add32(x692, x723, x739)
  var x742 uint32
  var x743 uint32
  x742, x743 = bits.Add32(x694, x725, x741)
  var x744 uint32
  var x745 uint32
  x744, x745 = bits.Add32(x696, x727, x743)
  var x746 uint32
  x746, _ = bits.Mul32(x728, 0xd2253531)
  var x748 uint32
  var x749 uint32
  x748, x749 = bits.Mul32(x746, 0xffffffff)
  var x750 uint32
  var x751 uint32
  x750, x751 = bits.Mul32(x746, 0xffffffff)
  var x752 uint32
  var x753 uint32
  x752, x753 = bits.Mul32(x746, 0xffffffff)
  var x754 uint32
  var x755 uint32
  x754, x755 = bits.Mul32(x746, 0xffffffff)
  var x756 uint32
  var x757 uint32
  x756, x757 = bits.Mul32(x746, 0xffffffff)
  var x758 uint32
  var x759 uint32
  x758, x759 = bits.Mul32(x746, 0xffffffff)
  var x760 uint32
  var x761 uint32
  x760, x761 = bits.Mul32(x746, 0xfffffffe)
  var x762 uint32
  var x763 uint32
  x762, x763 = bits.Mul32(x746, 0xfffffc2f)
  var x764 uint32
  var x765 uint32
  x764, x765 = bits.Add32(x763, x760, 0x0)
  var x766 uint32
  var x767 uint32
  x766, x767 = bits.Add32(x761, x758, x765)
  var x768 uint32
  var x769 uint32
  x768, x769 = bits.Add32(x759, x756, x767)
  var x770 uint32
  var x771 uint32
  x770, x771 = bits.Add32(x757, x754, x769)
  var x772 uint32
  var x773 uint32
  x772, x773 = bits.Add32(x755, x752, x771)
  var x774 uint32
  var x775 uint32
  x774, x775 = bits.Add32(x753, x750, x773)
  var x776 uint32
  var x777 uint32
  x776, x777 = bits.Add32(x751, x748, x775)
  var x778 uint32 = (x777 + x749)
  var x780 uint32
  _, x780 = bits.Add32(x728, x762, 0x0)
  var x781 uint32
  var x782 uint32
  x781, x782 = bits.Add32(x730, x764, x780)
  var x783 uint32
  var x784 uint32
  x783, x784 = bits.Add32(x732, x766, x782)
  var x785 uint32
  var x786 uint32
  x785, x786 = bits.Add32(x734, x768, x784)
  var x787 uint32
  var x788 uint32
  x787, x788 = bits.Add32(x736, x770, x786)
  var x789 uint32
  var x790 uint32
  x789, x790 = bits.Add32(x738, x772, x788)
  var x791 uint32
  var x792 uint32
  x791, x792 = bits.Add32(x740, x774, x790)
  var x793 uint32
  var x794 uint32
  x793, x794 = bits.Add32(x742, x776, x792)
  var x795 uint32
  var x796 uint32
  x795, x796 = bits.Add32(x744, x778, x794)
  var x797 uint32 = (x796 + x745)
  var x798 uint32
  var x799 uint32
  x798, x799 = bits.Sub32(x781, 0xfffffc2f, uint32(0x0))
  var x800 uint32
  var x801 uint32
  x800, x801 = bits.Sub32(x783, 0xfffffffe, x799)
  var x802 uint32
  var x803 uint32
  x802, x803 = bits.Sub32(x785, 0xffffffff, x801)
  var x804 uint32
  var x805 uint32
  x804, x805 = bits.Sub32(x787, 0xffffffff, x803)
  var x806 uint32
  var x807 uint32
  x806, x807 = bits.Sub32(x789, 0xffffffff, x805)
  var x808 uint32
  var x809 uint32
  x808, x809 = bits.Sub32(x791, 0xffffffff, x807)
  var x810 uint32
  var x811 uint32
  x810, x811 = bits.Sub32(x793, 0xffffffff, x809)
  var x812 uint32
  var x813 uint32
  x812, x813 = bits.Sub32(x795, 0xffffffff, x811)
  var x815 uint32
  _, x815 = bits.Sub32(x797, uint32(0x0), x813)
  var x816 uint32
  fiat_secp256k1_cmovznz_u32(&x816, x815, x798, x781)
  var x817 uint32
  fiat_secp256k1_cmovznz_u32(&x817, x815, x800, x783)
  var x818 uint32
  fiat_secp256k1_cmovznz_u32(&x818, x815, x802, x785)
  var x819 uint32
  fiat_secp256k1_cmovznz_u32(&x819, x815, x804, x787)
  var x820 uint32
  fiat_secp256k1_cmovznz_u32(&x820, x815, x806, x789)
  var x821 uint32
  fiat_secp256k1_cmovznz_u32(&x821, x815, x808, x791)
  var x822 uint32
  fiat_secp256k1_cmovznz_u32(&x822, x815, x810, x793)
  var x823 uint32
  fiat_secp256k1_cmovznz_u32(&x823, x815, x812, x795)
  out1[0] = x816
  out1[1] = x817
  out1[2] = x818
  out1[3] = x819
  out1[4] = x820
  out1[5] = x821
  out1[6] = x822
  out1[7] = x823
}

/*
 * The function fiat_secp256k1_add adds two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 *   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_secp256k1_add(out1 *[8]uint32, arg1 *[8]uint32, arg2 *[8]uint32) {
  var x1 uint32
  var x2 uint32
  x1, x2 = bits.Add32((arg1[0]), (arg2[0]), 0x0)
  var x3 uint32
  var x4 uint32
  x3, x4 = bits.Add32((arg1[1]), (arg2[1]), x2)
  var x5 uint32
  var x6 uint32
  x5, x6 = bits.Add32((arg1[2]), (arg2[2]), x4)
  var x7 uint32
  var x8 uint32
  x7, x8 = bits.Add32((arg1[3]), (arg2[3]), x6)
  var x9 uint32
  var x10 uint32
  x9, x10 = bits.Add32((arg1[4]), (arg2[4]), x8)
  var x11 uint32
  var x12 uint32
  x11, x12 = bits.Add32((arg1[5]), (arg2[5]), x10)
  var x13 uint32
  var x14 uint32
  x13, x14 = bits.Add32((arg1[6]), (arg2[6]), x12)
  var x15 uint32
  var x16 uint32
  x15, x16 = bits.Add32((arg1[7]), (arg2[7]), x14)
  var x17 uint32
  var x18 uint32
  x17, x18 = bits.Sub32(x1, 0xfffffc2f, uint32(0x0))
  var x19 uint32
  var x20 uint32
  x19, x20 = bits.Sub32(x3, 0xfffffffe, x18)
  var x21 uint32
  var x22 uint32
  x21, x22 = bits.Sub32(x5, 0xffffffff, x20)
  var x23 uint32
  var x24 uint32
  x23, x24 = bits.Sub32(x7, 0xffffffff, x22)
  var x25 uint32
  var x26 uint32
  x25, x26 = bits.Sub32(x9, 0xffffffff, x24)
  var x27 uint32
  var x28 uint32
  x27, x28 = bits.Sub32(x11, 0xffffffff, x26)
  var x29 uint32
  var x30 uint32
  x29, x30 = bits.Sub32(x13, 0xffffffff, x28)
  var x31 uint32
  var x32 uint32
  x31, x32 = bits.Sub32(x15, 0xffffffff, x30)
  var x34 uint32
  _, x34 = bits.Sub32(x16, uint32(0x0), x32)
  var x35 uint32
  fiat_secp256k1_cmovznz_u32(&x35, x34, x17, x1)
  var x36 uint32
  fiat_secp256k1_cmovznz_u32(&x36, x34, x19, x3)
  var x37 uint32
  fiat_secp256k1_cmovznz_u32(&x37, x34, x21, x5)
  var x38 uint32
  fiat_secp256k1_cmovznz_u32(&x38, x34, x23, x7)
  var x39 uint32
  fiat_secp256k1_cmovznz_u32(&x39, x34, x25, x9)
  var x40 uint32
  fiat_secp256k1_cmovznz_u32(&x40, x34, x27, x11)
  var x41 uint32
  fiat_secp256k1_cmovznz_u32(&x41, x34, x29, x13)
  var x42 uint32
  fiat_secp256k1_cmovznz_u32(&x42, x34, x31, x15)
  out1[0] = x35
  out1[1] = x36
  out1[2] = x37
  out1[3] = x38
  out1[4] = x39
  out1[5] = x40
  out1[6] = x41
  out1[7] = x42
}

/*
 * The function fiat_secp256k1_sub subtracts two field elements in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 *   0 ≤ eval arg2 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 *   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_secp256k1_sub(out1 *[8]uint32, arg1 *[8]uint32, arg2 *[8]uint32) {
  var x1 uint32
  var x2 uint32
  x1, x2 = bits.Sub32((arg1[0]), (arg2[0]), 0x0)
  var x3 uint32
  var x4 uint32
  x3, x4 = bits.Sub32((arg1[1]), (arg2[1]), x2)
  var x5 uint32
  var x6 uint32
  x5, x6 = bits.Sub32((arg1[2]), (arg2[2]), x4)
  var x7 uint32
  var x8 uint32
  x7, x8 = bits.Sub32((arg1[3]), (arg2[3]), x6)
  var x9 uint32
  var x10 uint32
  x9, x10 = bits.Sub32((arg1[4]), (arg2[4]), x8)
  var x11 uint32
  var x12 uint32
  x11, x12 = bits.Sub32((arg1[5]), (arg2[5]), x10)
  var x13 uint32
  var x14 uint32
  x13, x14 = bits.Sub32((arg1[6]), (arg2[6]), x12)
  var x15 uint32
  var x16 uint32
  x15, x16 = bits.Sub32((arg1[7]), (arg2[7]), x14)
  var x17 uint32
  fiat_secp256k1_cmovznz_u32(&x17, x16, uint32(0x0), 0xffffffff)
  var x18 uint32
  var x19 uint32
  x18, x19 = bits.Add32(x1, (x17 & 0xfffffc2f), 0x0)
  var x20 uint32
  var x21 uint32
  x20, x21 = bits.Add32(x3, (x17 & 0xfffffffe), x19)
  var x22 uint32
  var x23 uint32
  x22, x23 = bits.Add32(x5, (x17 & 0xffffffff), x21)
  var x24 uint32
  var x25 uint32
  x24, x25 = bits.Add32(x7, (x17 & 0xffffffff), x23)
  var x26 uint32
  var x27 uint32
  x26, x27 = bits.Add32(x9, (x17 & 0xffffffff), x25)
  var x28 uint32
  var x29 uint32
  x28, x29 = bits.Add32(x11, (x17 & 0xffffffff), x27)
  var x30 uint32
  var x31 uint32
  x30, x31 = bits.Add32(x13, (x17 & 0xffffffff), x29)
  var x32 uint32
  x32, _ = bits.Add32(x15, (x17 & 0xffffffff), x31)
  out1[0] = x18
  out1[1] = x20
  out1[2] = x22
  out1[3] = x24
  out1[4] = x26
  out1[5] = x28
  out1[6] = x30
  out1[7] = x32
}

/*
 * The function fiat_secp256k1_opp negates a field element in the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_secp256k1_opp(out1 *[8]uint32, arg1 *[8]uint32) {
  var x1 uint32
  var x2 uint32
  x1, x2 = bits.Sub32(uint32(0x0), (arg1[0]), 0x0)
  var x3 uint32
  var x4 uint32
  x3, x4 = bits.Sub32(uint32(0x0), (arg1[1]), x2)
  var x5 uint32
  var x6 uint32
  x5, x6 = bits.Sub32(uint32(0x0), (arg1[2]), x4)
  var x7 uint32
  var x8 uint32
  x7, x8 = bits.Sub32(uint32(0x0), (arg1[3]), x6)
  var x9 uint32
  var x10 uint32
  x9, x10 = bits.Sub32(uint32(0x0), (arg1[4]), x8)
  var x11 uint32
  var x12 uint32
  x11, x12 = bits.Sub32(uint32(0x0), (arg1[5]), x10)
  var x13 uint32
  var x14 uint32
  x13, x14 = bits.Sub32(uint32(0x0), (arg1[6]), x12)
  var x15 uint32
  var x16 uint32
  x15, x16 = bits.Sub32(uint32(0x0), (arg1[7]), x14)
  var x17 uint32
  fiat_secp256k1_cmovznz_u32(&x17, x16, uint32(0x0), 0xffffffff)
  var x18 uint32
  var x19 uint32
  x18, x19 = bits.Add32(x1, (x17 & 0xfffffc2f), 0x0)
  var x20 uint32
  var x21 uint32
  x20, x21 = bits.Add32(x3, (x17 & 0xfffffffe), x19)
  var x22 uint32
  var x23 uint32
  x22, x23 = bits.Add32(x5, (x17 & 0xffffffff), x21)
  var x24 uint32
  var x25 uint32
  x24, x25 = bits.Add32(x7, (x17 & 0xffffffff), x23)
  var x26 uint32
  var x27 uint32
  x26, x27 = bits.Add32(x9, (x17 & 0xffffffff), x25)
  var x28 uint32
  var x29 uint32
  x28, x29 = bits.Add32(x11, (x17 & 0xffffffff), x27)
  var x30 uint32
  var x31 uint32
  x30, x31 = bits.Add32(x13, (x17 & 0xffffffff), x29)
  var x32 uint32
  x32, _ = bits.Add32(x15, (x17 & 0xffffffff), x31)
  out1[0] = x18
  out1[1] = x20
  out1[2] = x22
  out1[3] = x24
  out1[4] = x26
  out1[5] = x28
  out1[6] = x30
  out1[7] = x32
}

/*
 * The function fiat_secp256k1_from_montgomery translates a field element out of the Montgomery domain.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = (eval arg1 * ((2^32)⁻¹ mod m)^8) mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_secp256k1_from_montgomery(out1 *[8]uint32, arg1 *[8]uint32) {
  var x1 uint32 = (arg1[0])
  var x2 uint32
  x2, _ = bits.Mul32(x1, 0xd2253531)
  var x4 uint32
  var x5 uint32
  x4, x5 = bits.Mul32(x2, 0xffffffff)
  var x6 uint32
  var x7 uint32
  x6, x7 = bits.Mul32(x2, 0xffffffff)
  var x8 uint32
  var x9 uint32
  x8, x9 = bits.Mul32(x2, 0xffffffff)
  var x10 uint32
  var x11 uint32
  x10, x11 = bits.Mul32(x2, 0xffffffff)
  var x12 uint32
  var x13 uint32
  x12, x13 = bits.Mul32(x2, 0xffffffff)
  var x14 uint32
  var x15 uint32
  x14, x15 = bits.Mul32(x2, 0xffffffff)
  var x16 uint32
  var x17 uint32
  x16, x17 = bits.Mul32(x2, 0xfffffffe)
  var x18 uint32
  var x19 uint32
  x18, x19 = bits.Mul32(x2, 0xfffffc2f)
  var x20 uint32
  var x21 uint32
  x20, x21 = bits.Add32(x19, x16, 0x0)
  var x22 uint32
  var x23 uint32
  x22, x23 = bits.Add32(x17, x14, x21)
  var x24 uint32
  var x25 uint32
  x24, x25 = bits.Add32(x15, x12, x23)
  var x26 uint32
  var x27 uint32
  x26, x27 = bits.Add32(x13, x10, x25)
  var x28 uint32
  var x29 uint32
  x28, x29 = bits.Add32(x11, x8, x27)
  var x30 uint32
  var x31 uint32
  x30, x31 = bits.Add32(x9, x6, x29)
  var x32 uint32
  var x33 uint32
  x32, x33 = bits.Add32(x7, x4, x31)
  var x35 uint32
  _, x35 = bits.Add32(x1, x18, 0x0)
  var x36 uint32
  var x37 uint32
  x36, x37 = bits.Add32(uint32(0x0), x20, x35)
  var x38 uint32
  var x39 uint32
  x38, x39 = bits.Add32(uint32(0x0), x22, x37)
  var x40 uint32
  var x41 uint32
  x40, x41 = bits.Add32(uint32(0x0), x24, x39)
  var x42 uint32
  var x43 uint32
  x42, x43 = bits.Add32(uint32(0x0), x26, x41)
  var x44 uint32
  var x45 uint32
  x44, x45 = bits.Add32(uint32(0x0), x28, x43)
  var x46 uint32
  var x47 uint32
  x46, x47 = bits.Add32(uint32(0x0), x30, x45)
  var x48 uint32
  var x49 uint32
  x48, x49 = bits.Add32(uint32(0x0), x32, x47)
  var x50 uint32
  var x51 uint32
  x50, x51 = bits.Add32(uint32(0x0), (x33 + x5), x49)
  var x52 uint32
  var x53 uint32
  x52, x53 = bits.Add32(x36, (arg1[1]), 0x0)
  var x54 uint32
  var x55 uint32
  x54, x55 = bits.Add32(x38, uint32(0x0), x53)
  var x56 uint32
  var x57 uint32
  x56, x57 = bits.Add32(x40, uint32(0x0), x55)
  var x58 uint32
  var x59 uint32
  x58, x59 = bits.Add32(x42, uint32(0x0), x57)
  var x60 uint32
  var x61 uint32
  x60, x61 = bits.Add32(x44, uint32(0x0), x59)
  var x62 uint32
  var x63 uint32
  x62, x63 = bits.Add32(x46, uint32(0x0), x61)
  var x64 uint32
  var x65 uint32
  x64, x65 = bits.Add32(x48, uint32(0x0), x63)
  var x66 uint32
  var x67 uint32
  x66, x67 = bits.Add32(x50, uint32(0x0), x65)
  var x68 uint32
  x68, _ = bits.Mul32(x52, 0xd2253531)
  var x70 uint32
  var x71 uint32
  x70, x71 = bits.Mul32(x68, 0xffffffff)
  var x72 uint32
  var x73 uint32
  x72, x73 = bits.Mul32(x68, 0xffffffff)
  var x74 uint32
  var x75 uint32
  x74, x75 = bits.Mul32(x68, 0xffffffff)
  var x76 uint32
  var x77 uint32
  x76, x77 = bits.Mul32(x68, 0xffffffff)
  var x78 uint32
  var x79 uint32
  x78, x79 = bits.Mul32(x68, 0xffffffff)
  var x80 uint32
  var x81 uint32
  x80, x81 = bits.Mul32(x68, 0xffffffff)
  var x82 uint32
  var x83 uint32
  x82, x83 = bits.Mul32(x68, 0xfffffffe)
  var x84 uint32
  var x85 uint32
  x84, x85 = bits.Mul32(x68, 0xfffffc2f)
  var x86 uint32
  var x87 uint32
  x86, x87 = bits.Add32(x85, x82, 0x0)
  var x88 uint32
  var x89 uint32
  x88, x89 = bits.Add32(x83, x80, x87)
  var x90 uint32
  var x91 uint32
  x90, x91 = bits.Add32(x81, x78, x89)
  var x92 uint32
  var x93 uint32
  x92, x93 = bits.Add32(x79, x76, x91)
  var x94 uint32
  var x95 uint32
  x94, x95 = bits.Add32(x77, x74, x93)
  var x96 uint32
  var x97 uint32
  x96, x97 = bits.Add32(x75, x72, x95)
  var x98 uint32
  var x99 uint32
  x98, x99 = bits.Add32(x73, x70, x97)
  var x101 uint32
  _, x101 = bits.Add32(x52, x84, 0x0)
  var x102 uint32
  var x103 uint32
  x102, x103 = bits.Add32(x54, x86, x101)
  var x104 uint32
  var x105 uint32
  x104, x105 = bits.Add32(x56, x88, x103)
  var x106 uint32
  var x107 uint32
  x106, x107 = bits.Add32(x58, x90, x105)
  var x108 uint32
  var x109 uint32
  x108, x109 = bits.Add32(x60, x92, x107)
  var x110 uint32
  var x111 uint32
  x110, x111 = bits.Add32(x62, x94, x109)
  var x112 uint32
  var x113 uint32
  x112, x113 = bits.Add32(x64, x96, x111)
  var x114 uint32
  var x115 uint32
  x114, x115 = bits.Add32(x66, x98, x113)
  var x116 uint32
  var x117 uint32
  x116, x117 = bits.Add32((x67 + x51), (x99 + x71), x115)
  var x118 uint32
  var x119 uint32
  x118, x119 = bits.Add32(x102, (arg1[2]), 0x0)
  var x120 uint32
  var x121 uint32
  x120, x121 = bits.Add32(x104, uint32(0x0), x119)
  var x122 uint32
  var x123 uint32
  x122, x123 = bits.Add32(x106, uint32(0x0), x121)
  var x124 uint32
  var x125 uint32
  x124, x125 = bits.Add32(x108, uint32(0x0), x123)
  var x126 uint32
  var x127 uint32
  x126, x127 = bits.Add32(x110, uint32(0x0), x125)
  var x128 uint32
  var x129 uint32
  x128, x129 = bits.Add32(x112, uint32(0x0), x127)
  var x130 uint32
  var x131 uint32
  x130, x131 = bits.Add32(x114, uint32(0x0), x129)
  var x132 uint32
  var x133 uint32
  x132, x133 = bits.Add32(x116, uint32(0x0), x131)
  var x134 uint32
  x134, _ = bits.Mul32(x118, 0xd2253531)
  var x136 uint32
  var x137 uint32
  x136, x137 = bits.Mul32(x134, 0xffffffff)
  var x138 uint32
  var x139 uint32
  x138, x139 = bits.Mul32(x134, 0xffffffff)
  var x140 uint32
  var x141 uint32
  x140, x141 = bits.Mul32(x134, 0xffffffff)
  var x142 uint32
  var x143 uint32
  x142, x143 = bits.Mul32(x134, 0xffffffff)
  var x144 uint32
  var x145 uint32
  x144, x145 = bits.Mul32(x134, 0xffffffff)
  var x146 uint32
  var x147 uint32
  x146, x147 = bits.Mul32(x134, 0xffffffff)
  var x148 uint32
  var x149 uint32
  x148, x149 = bits.Mul32(x134, 0xfffffffe)
  var x150 uint32
  var x151 uint32
  x150, x151 = bits.Mul32(x134, 0xfffffc2f)
  var x152 uint32
  var x153 uint32
  x152, x153 = bits.Add32(x151, x148, 0x0)
  var x154 uint32
  var x155 uint32
  x154, x155 = bits.Add32(x149, x146, x153)
  var x156 uint32
  var x157 uint32
  x156, x157 = bits.Add32(x147, x144, x155)
  var x158 uint32
  var x159 uint32
  x158, x159 = bits.Add32(x145, x142, x157)
  var x160 uint32
  var x161 uint32
  x160, x161 = bits.Add32(x143, x140, x159)
  var x162 uint32
  var x163 uint32
  x162, x163 = bits.Add32(x141, x138, x161)
  var x164 uint32
  var x165 uint32
  x164, x165 = bits.Add32(x139, x136, x163)
  var x167 uint32
  _, x167 = bits.Add32(x118, x150, 0x0)
  var x168 uint32
  var x169 uint32
  x168, x169 = bits.Add32(x120, x152, x167)
  var x170 uint32
  var x171 uint32
  x170, x171 = bits.Add32(x122, x154, x169)
  var x172 uint32
  var x173 uint32
  x172, x173 = bits.Add32(x124, x156, x171)
  var x174 uint32
  var x175 uint32
  x174, x175 = bits.Add32(x126, x158, x173)
  var x176 uint32
  var x177 uint32
  x176, x177 = bits.Add32(x128, x160, x175)
  var x178 uint32
  var x179 uint32
  x178, x179 = bits.Add32(x130, x162, x177)
  var x180 uint32
  var x181 uint32
  x180, x181 = bits.Add32(x132, x164, x179)
  var x182 uint32
  var x183 uint32
  x182, x183 = bits.Add32((x133 + x117), (x165 + x137), x181)
  var x184 uint32
  var x185 uint32
  x184, x185 = bits.Add32(x168, (arg1[3]), 0x0)
  var x186 uint32
  var x187 uint32
  x186, x187 = bits.Add32(x170, uint32(0x0), x185)
  var x188 uint32
  var x189 uint32
  x188, x189 = bits.Add32(x172, uint32(0x0), x187)
  var x190 uint32
  var x191 uint32
  x190, x191 = bits.Add32(x174, uint32(0x0), x189)
  var x192 uint32
  var x193 uint32
  x192, x193 = bits.Add32(x176, uint32(0x0), x191)
  var x194 uint32
  var x195 uint32
  x194, x195 = bits.Add32(x178, uint32(0x0), x193)
  var x196 uint32
  var x197 uint32
  x196, x197 = bits.Add32(x180, uint32(0x0), x195)
  var x198 uint32
  var x199 uint32
  x198, x199 = bits.Add32(x182, uint32(0x0), x197)
  var x200 uint32
  x200, _ = bits.Mul32(x184, 0xd2253531)
  var x202 uint32
  var x203 uint32
  x202, x203 = bits.Mul32(x200, 0xffffffff)
  var x204 uint32
  var x205 uint32
  x204, x205 = bits.Mul32(x200, 0xffffffff)
  var x206 uint32
  var x207 uint32
  x206, x207 = bits.Mul32(x200, 0xffffffff)
  var x208 uint32
  var x209 uint32
  x208, x209 = bits.Mul32(x200, 0xffffffff)
  var x210 uint32
  var x211 uint32
  x210, x211 = bits.Mul32(x200, 0xffffffff)
  var x212 uint32
  var x213 uint32
  x212, x213 = bits.Mul32(x200, 0xffffffff)
  var x214 uint32
  var x215 uint32
  x214, x215 = bits.Mul32(x200, 0xfffffffe)
  var x216 uint32
  var x217 uint32
  x216, x217 = bits.Mul32(x200, 0xfffffc2f)
  var x218 uint32
  var x219 uint32
  x218, x219 = bits.Add32(x217, x214, 0x0)
  var x220 uint32
  var x221 uint32
  x220, x221 = bits.Add32(x215, x212, x219)
  var x222 uint32
  var x223 uint32
  x222, x223 = bits.Add32(x213, x210, x221)
  var x224 uint32
  var x225 uint32
  x224, x225 = bits.Add32(x211, x208, x223)
  var x226 uint32
  var x227 uint32
  x226, x227 = bits.Add32(x209, x206, x225)
  var x228 uint32
  var x229 uint32
  x228, x229 = bits.Add32(x207, x204, x227)
  var x230 uint32
  var x231 uint32
  x230, x231 = bits.Add32(x205, x202, x229)
  var x233 uint32
  _, x233 = bits.Add32(x184, x216, 0x0)
  var x234 uint32
  var x235 uint32
  x234, x235 = bits.Add32(x186, x218, x233)
  var x236 uint32
  var x237 uint32
  x236, x237 = bits.Add32(x188, x220, x235)
  var x238 uint32
  var x239 uint32
  x238, x239 = bits.Add32(x190, x222, x237)
  var x240 uint32
  var x241 uint32
  x240, x241 = bits.Add32(x192, x224, x239)
  var x242 uint32
  var x243 uint32
  x242, x243 = bits.Add32(x194, x226, x241)
  var x244 uint32
  var x245 uint32
  x244, x245 = bits.Add32(x196, x228, x243)
  var x246 uint32
  var x247 uint32
  x246, x247 = bits.Add32(x198, x230, x245)
  var x248 uint32
  var x249 uint32
  x248, x249 = bits.Add32((x199 + x183), (x231 + x203), x247)
  var x250 uint32
  var x251 uint32
  x250, x251 = bits.Add32(x234, (arg1[4]), 0x0)
  var x252 uint32
  var x253 uint32
  x252, x253 = bits.Add32(x236, uint32(0x0), x251)
  var x254 uint32
  var x255 uint32
  x254, x255 = bits.Add32(x238, uint32(0x0), x253)
  var x256 uint32
  var x257 uint32
  x256, x257 = bits.Add32(x240, uint32(0x0), x255)
  var x258 uint32
  var x259 uint32
  x258, x259 = bits.Add32(x242, uint32(0x0), x257)
  var x260 uint32
  var x261 uint32
  x260, x261 = bits.Add32(x244, uint32(0x0), x259)
  var x262 uint32
  var x263 uint32
  x262, x263 = bits.Add32(x246, uint32(0x0), x261)
  var x264 uint32
  var x265 uint32
  x264, x265 = bits.Add32(x248, uint32(0x0), x263)
  var x266 uint32
  x266, _ = bits.Mul32(x250, 0xd2253531)
  var x268 uint32
  var x269 uint32
  x268, x269 = bits.Mul32(x266, 0xffffffff)
  var x270 uint32
  var x271 uint32
  x270, x271 = bits.Mul32(x266, 0xffffffff)
  var x272 uint32
  var x273 uint32
  x272, x273 = bits.Mul32(x266, 0xffffffff)
  var x274 uint32
  var x275 uint32
  x274, x275 = bits.Mul32(x266, 0xffffffff)
  var x276 uint32
  var x277 uint32
  x276, x277 = bits.Mul32(x266, 0xffffffff)
  var x278 uint32
  var x279 uint32
  x278, x279 = bits.Mul32(x266, 0xffffffff)
  var x280 uint32
  var x281 uint32
  x280, x281 = bits.Mul32(x266, 0xfffffffe)
  var x282 uint32
  var x283 uint32
  x282, x283 = bits.Mul32(x266, 0xfffffc2f)
  var x284 uint32
  var x285 uint32
  x284, x285 = bits.Add32(x283, x280, 0x0)
  var x286 uint32
  var x287 uint32
  x286, x287 = bits.Add32(x281, x278, x285)
  var x288 uint32
  var x289 uint32
  x288, x289 = bits.Add32(x279, x276, x287)
  var x290 uint32
  var x291 uint32
  x290, x291 = bits.Add32(x277, x274, x289)
  var x292 uint32
  var x293 uint32
  x292, x293 = bits.Add32(x275, x272, x291)
  var x294 uint32
  var x295 uint32
  x294, x295 = bits.Add32(x273, x270, x293)
  var x296 uint32
  var x297 uint32
  x296, x297 = bits.Add32(x271, x268, x295)
  var x299 uint32
  _, x299 = bits.Add32(x250, x282, 0x0)
  var x300 uint32
  var x301 uint32
  x300, x301 = bits.Add32(x252, x284, x299)
  var x302 uint32
  var x303 uint32
  x302, x303 = bits.Add32(x254, x286, x301)
  var x304 uint32
  var x305 uint32
  x304, x305 = bits.Add32(x256, x288, x303)
  var x306 uint32
  var x307 uint32
  x306, x307 = bits.Add32(x258, x290, x305)
  var x308 uint32
  var x309 uint32
  x308, x309 = bits.Add32(x260, x292, x307)
  var x310 uint32
  var x311 uint32
  x310, x311 = bits.Add32(x262, x294, x309)
  var x312 uint32
  var x313 uint32
  x312, x313 = bits.Add32(x264, x296, x311)
  var x314 uint32
  var x315 uint32
  x314, x315 = bits.Add32((x265 + x249), (x297 + x269), x313)
  var x316 uint32
  var x317 uint32
  x316, x317 = bits.Add32(x300, (arg1[5]), 0x0)
  var x318 uint32
  var x319 uint32
  x318, x319 = bits.Add32(x302, uint32(0x0), x317)
  var x320 uint32
  var x321 uint32
  x320, x321 = bits.Add32(x304, uint32(0x0), x319)
  var x322 uint32
  var x323 uint32
  x322, x323 = bits.Add32(x306, uint32(0x0), x321)
  var x324 uint32
  var x325 uint32
  x324, x325 = bits.Add32(x308, uint32(0x0), x323)
  var x326 uint32
  var x327 uint32
  x326, x327 = bits.Add32(x310, uint32(0x0), x325)
  var x328 uint32
  var x329 uint32
  x328, x329 = bits.Add32(x312, uint32(0x0), x327)
  var x330 uint32
  var x331 uint32
  x330, x331 = bits.Add32(x314, uint32(0x0), x329)
  var x332 uint32
  x332, _ = bits.Mul32(x316, 0xd2253531)
  var x334 uint32
  var x335 uint32
  x334, x335 = bits.Mul32(x332, 0xffffffff)
  var x336 uint32
  var x337 uint32
  x336, x337 = bits.Mul32(x332, 0xffffffff)
  var x338 uint32
  var x339 uint32
  x338, x339 = bits.Mul32(x332, 0xffffffff)
  var x340 uint32
  var x341 uint32
  x340, x341 = bits.Mul32(x332, 0xffffffff)
  var x342 uint32
  var x343 uint32
  x342, x343 = bits.Mul32(x332, 0xffffffff)
  var x344 uint32
  var x345 uint32
  x344, x345 = bits.Mul32(x332, 0xffffffff)
  var x346 uint32
  var x347 uint32
  x346, x347 = bits.Mul32(x332, 0xfffffffe)
  var x348 uint32
  var x349 uint32
  x348, x349 = bits.Mul32(x332, 0xfffffc2f)
  var x350 uint32
  var x351 uint32
  x350, x351 = bits.Add32(x349, x346, 0x0)
  var x352 uint32
  var x353 uint32
  x352, x353 = bits.Add32(x347, x344, x351)
  var x354 uint32
  var x355 uint32
  x354, x355 = bits.Add32(x345, x342, x353)
  var x356 uint32
  var x357 uint32
  x356, x357 = bits.Add32(x343, x340, x355)
  var x358 uint32
  var x359 uint32
  x358, x359 = bits.Add32(x341, x338, x357)
  var x360 uint32
  var x361 uint32
  x360, x361 = bits.Add32(x339, x336, x359)
  var x362 uint32
  var x363 uint32
  x362, x363 = bits.Add32(x337, x334, x361)
  var x365 uint32
  _, x365 = bits.Add32(x316, x348, 0x0)
  var x366 uint32
  var x367 uint32
  x366, x367 = bits.Add32(x318, x350, x365)
  var x368 uint32
  var x369 uint32
  x368, x369 = bits.Add32(x320, x352, x367)
  var x370 uint32
  var x371 uint32
  x370, x371 = bits.Add32(x322, x354, x369)
  var x372 uint32
  var x373 uint32
  x372, x373 = bits.Add32(x324, x356, x371)
  var x374 uint32
  var x375 uint32
  x374, x375 = bits.Add32(x326, x358, x373)
  var x376 uint32
  var x377 uint32
  x376, x377 = bits.Add32(x328, x360, x375)
  var x378 uint32
  var x379 uint32
  x378, x379 = bits.Add32(x330, x362, x377)
  var x380 uint32
  var x381 uint32
  x380, x381 = bits.Add32((x331 + x315), (x363 + x335), x379)
  var x382 uint32
  var x383 uint32
  x382, x383 = bits.Add32(x366, (arg1[6]), 0x0)
  var x384 uint32
  var x385 uint32
  x384, x385 = bits.Add32(x368, uint32(0x0), x383)
  var x386 uint32
  var x387 uint32
  x386, x387 = bits.Add32(x370, uint32(0x0), x385)
  var x388 uint32
  var x389 uint32
  x388, x389 = bits.Add32(x372, uint32(0x0), x387)
  var x390 uint32
  var x391 uint32
  x390, x391 = bits.Add32(x374, uint32(0x0), x389)
  var x392 uint32
  var x393 uint32
  x392, x393 = bits.Add32(x376, uint32(0x0), x391)
  var x394 uint32
  var x395 uint32
  x394, x395 = bits.Add32(x378, uint32(0x0), x393)
  var x396 uint32
  var x397 uint32
  x396, x397 = bits.Add32(x380, uint32(0x0), x395)
  var x398 uint32
  x398, _ = bits.Mul32(x382, 0xd2253531)
  var x400 uint32
  var x401 uint32
  x400, x401 = bits.Mul32(x398, 0xffffffff)
  var x402 uint32
  var x403 uint32
  x402, x403 = bits.Mul32(x398, 0xffffffff)
  var x404 uint32
  var x405 uint32
  x404, x405 = bits.Mul32(x398, 0xffffffff)
  var x406 uint32
  var x407 uint32
  x406, x407 = bits.Mul32(x398, 0xffffffff)
  var x408 uint32
  var x409 uint32
  x408, x409 = bits.Mul32(x398, 0xffffffff)
  var x410 uint32
  var x411 uint32
  x410, x411 = bits.Mul32(x398, 0xffffffff)
  var x412 uint32
  var x413 uint32
  x412, x413 = bits.Mul32(x398, 0xfffffffe)
  var x414 uint32
  var x415 uint32
  x414, x415 = bits.Mul32(x398, 0xfffffc2f)
  var x416 uint32
  var x417 uint32
  x416, x417 = bits.Add32(x415, x412, 0x0)
  var x418 uint32
  var x419 uint32
  x418, x419 = bits.Add32(x413, x410, x417)
  var x420 uint32
  var x421 uint32
  x420, x421 = bits.Add32(x411, x408, x419)
  var x422 uint32
  var x423 uint32
  x422, x423 = bits.Add32(x409, x406, x421)
  var x424 uint32
  var x425 uint32
  x424, x425 = bits.Add32(x407, x404, x423)
  var x426 uint32
  var x427 uint32
  x426, x427 = bits.Add32(x405, x402, x425)
  var x428 uint32
  var x429 uint32
  x428, x429 = bits.Add32(x403, x400, x427)
  var x431 uint32
  _, x431 = bits.Add32(x382, x414, 0x0)
  var x432 uint32
  var x433 uint32
  x432, x433 = bits.Add32(x384, x416, x431)
  var x434 uint32
  var x435 uint32
  x434, x435 = bits.Add32(x386, x418, x433)
  var x436 uint32
  var x437 uint32
  x436, x437 = bits.Add32(x388, x420, x435)
  var x438 uint32
  var x439 uint32
  x438, x439 = bits.Add32(x390, x422, x437)
  var x440 uint32
  var x441 uint32
  x440, x441 = bits.Add32(x392, x424, x439)
  var x442 uint32
  var x443 uint32
  x442, x443 = bits.Add32(x394, x426, x441)
  var x444 uint32
  var x445 uint32
  x444, x445 = bits.Add32(x396, x428, x443)
  var x446 uint32
  var x447 uint32
  x446, x447 = bits.Add32((x397 + x381), (x429 + x401), x445)
  var x448 uint32
  var x449 uint32
  x448, x449 = bits.Add32(x432, (arg1[7]), 0x0)
  var x450 uint32
  var x451 uint32
  x450, x451 = bits.Add32(x434, uint32(0x0), x449)
  var x452 uint32
  var x453 uint32
  x452, x453 = bits.Add32(x436, uint32(0x0), x451)
  var x454 uint32
  var x455 uint32
  x454, x455 = bits.Add32(x438, uint32(0x0), x453)
  var x456 uint32
  var x457 uint32
  x456, x457 = bits.Add32(x440, uint32(0x0), x455)
  var x458 uint32
  var x459 uint32
  x458, x459 = bits.Add32(x442, uint32(0x0), x457)
  var x460 uint32
  var x461 uint32
  x460, x461 = bits.Add32(x444, uint32(0x0), x459)
  var x462 uint32
  var x463 uint32
  x462, x463 = bits.Add32(x446, uint32(0x0), x461)
  var x464 uint32
  x464, _ = bits.Mul32(x448, 0xd2253531)
  var x466 uint32
  var x467 uint32
  x466, x467 = bits.Mul32(x464, 0xffffffff)
  var x468 uint32
  var x469 uint32
  x468, x469 = bits.Mul32(x464, 0xffffffff)
  var x470 uint32
  var x471 uint32
  x470, x471 = bits.Mul32(x464, 0xffffffff)
  var x472 uint32
  var x473 uint32
  x472, x473 = bits.Mul32(x464, 0xffffffff)
  var x474 uint32
  var x475 uint32
  x474, x475 = bits.Mul32(x464, 0xffffffff)
  var x476 uint32
  var x477 uint32
  x476, x477 = bits.Mul32(x464, 0xffffffff)
  var x478 uint32
  var x479 uint32
  x478, x479 = bits.Mul32(x464, 0xfffffffe)
  var x480 uint32
  var x481 uint32
  x480, x481 = bits.Mul32(x464, 0xfffffc2f)
  var x482 uint32
  var x483 uint32
  x482, x483 = bits.Add32(x481, x478, 0x0)
  var x484 uint32
  var x485 uint32
  x484, x485 = bits.Add32(x479, x476, x483)
  var x486 uint32
  var x487 uint32
  x486, x487 = bits.Add32(x477, x474, x485)
  var x488 uint32
  var x489 uint32
  x488, x489 = bits.Add32(x475, x472, x487)
  var x490 uint32
  var x491 uint32
  x490, x491 = bits.Add32(x473, x470, x489)
  var x492 uint32
  var x493 uint32
  x492, x493 = bits.Add32(x471, x468, x491)
  var x494 uint32
  var x495 uint32
  x494, x495 = bits.Add32(x469, x466, x493)
  var x497 uint32
  _, x497 = bits.Add32(x448, x480, 0x0)
  var x498 uint32
  var x499 uint32
  x498, x499 = bits.Add32(x450, x482, x497)
  var x500 uint32
  var x501 uint32
  x500, x501 = bits.Add32(x452, x484, x499)
  var x502 uint32
  var x503 uint32
  x502, x503 = bits.Add32(x454, x486, x501)
  var x504 uint32
  var x505 uint32
  x504, x505 = bits.Add32(x456, x488, x503)
  var x506 uint32
  var x507 uint32
  x506, x507 = bits.Add32(x458, x490, x505)
  var x508 uint32
  var x509 uint32
  x508, x509 = bits.Add32(x460, x492, x507)
  var x510 uint32
  var x511 uint32
  x510, x511 = bits.Add32(x462, x494, x509)
  var x512 uint32
  var x513 uint32
  x512, x513 = bits.Add32((x463 + x447), (x495 + x467), x511)
  var x514 uint32
  var x515 uint32
  x514, x515 = bits.Sub32(x498, 0xfffffc2f, uint32(0x0))
  var x516 uint32
  var x517 uint32
  x516, x517 = bits.Sub32(x500, 0xfffffffe, x515)
  var x518 uint32
  var x519 uint32
  x518, x519 = bits.Sub32(x502, 0xffffffff, x517)
  var x520 uint32
  var x521 uint32
  x520, x521 = bits.Sub32(x504, 0xffffffff, x519)
  var x522 uint32
  var x523 uint32
  x522, x523 = bits.Sub32(x506, 0xffffffff, x521)
  var x524 uint32
  var x525 uint32
  x524, x525 = bits.Sub32(x508, 0xffffffff, x523)
  var x526 uint32
  var x527 uint32
  x526, x527 = bits.Sub32(x510, 0xffffffff, x525)
  var x528 uint32
  var x529 uint32
  x528, x529 = bits.Sub32(x512, 0xffffffff, x527)
  var x531 uint32
  _, x531 = bits.Sub32(x513, uint32(0x0), x529)
  var x532 uint32
  fiat_secp256k1_cmovznz_u32(&x532, x531, x514, x498)
  var x533 uint32
  fiat_secp256k1_cmovznz_u32(&x533, x531, x516, x500)
  var x534 uint32
  fiat_secp256k1_cmovznz_u32(&x534, x531, x518, x502)
  var x535 uint32
  fiat_secp256k1_cmovznz_u32(&x535, x531, x520, x504)
  var x536 uint32
  fiat_secp256k1_cmovznz_u32(&x536, x531, x522, x506)
  var x537 uint32
  fiat_secp256k1_cmovznz_u32(&x537, x531, x524, x508)
  var x538 uint32
  fiat_secp256k1_cmovznz_u32(&x538, x531, x526, x510)
  var x539 uint32
  fiat_secp256k1_cmovznz_u32(&x539, x531, x528, x512)
  out1[0] = x532
  out1[1] = x533
  out1[2] = x534
  out1[3] = x535
  out1[4] = x536
  out1[5] = x537
  out1[6] = x538
  out1[7] = x539
}

/*
 * The function fiat_secp256k1_nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffff]
 */
/*inline*/
func fiat_secp256k1_nonzero(out1 *uint32, arg1 *[8]uint32) {
  var x1 uint32 = ((arg1[0]) | ((arg1[1]) | ((arg1[2]) | ((arg1[3]) | ((arg1[4]) | ((arg1[5]) | ((arg1[6]) | ((arg1[7]) | uint32(0x0)))))))))
  *out1 = x1
}

/*
 * The function fiat_secp256k1_selectznz is a multi-limb conditional select.
 * Postconditions:
 *   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 *   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_secp256k1_selectznz(out1 *[8]uint32, arg1 uint32, arg2 *[8]uint32, arg3 *[8]uint32) {
  var x1 uint32
  fiat_secp256k1_cmovznz_u32(&x1, arg1, (arg2[0]), (arg3[0]))
  var x2 uint32
  fiat_secp256k1_cmovznz_u32(&x2, arg1, (arg2[1]), (arg3[1]))
  var x3 uint32
  fiat_secp256k1_cmovznz_u32(&x3, arg1, (arg2[2]), (arg3[2]))
  var x4 uint32
  fiat_secp256k1_cmovznz_u32(&x4, arg1, (arg2[3]), (arg3[3]))
  var x5 uint32
  fiat_secp256k1_cmovznz_u32(&x5, arg1, (arg2[4]), (arg3[4]))
  var x6 uint32
  fiat_secp256k1_cmovznz_u32(&x6, arg1, (arg2[5]), (arg3[5]))
  var x7 uint32
  fiat_secp256k1_cmovznz_u32(&x7, arg1, (arg2[6]), (arg3[6]))
  var x8 uint32
  fiat_secp256k1_cmovznz_u32(&x8, arg1, (arg2[7]), (arg3[7]))
  out1[0] = x1
  out1[1] = x2
  out1[2] = x3
  out1[3] = x4
  out1[4] = x5
  out1[5] = x6
  out1[6] = x7
  out1[7] = x8
}

/*
 * The function fiat_secp256k1_to_bytes serializes a field element in the Montgomery domain to bytes in little-endian order.
 * Preconditions:
 *   0 ≤ eval arg1 < m
 * Postconditions:
 *   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..31]
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
 */
/*inline*/
func fiat_secp256k1_to_bytes(out1 *[32]uint32, arg1 *[8]uint32) {
  var x1 uint32 = (arg1[7])
  var x2 uint32 = (arg1[6])
  var x3 uint32 = (arg1[5])
  var x4 uint32 = (arg1[4])
  var x5 uint32 = (arg1[3])
  var x6 uint32 = (arg1[2])
  var x7 uint32 = (arg1[1])
  var x8 uint32 = (arg1[0])
  var x9 uint32 = (x8 >> 8)
  var x10 uint32 = (x8 & 0xff)
  var x11 uint32 = (x9 >> 8)
  var x12 uint32 = (x9 & 0xff)
  var x13 uint32 = (x11 >> 8)
  var x14 uint32 = (x11 & 0xff)
  var x15 uint32 = (x13 & 0xff)
  var x16 uint32 = (x7 >> 8)
  var x17 uint32 = (x7 & 0xff)
  var x18 uint32 = (x16 >> 8)
  var x19 uint32 = (x16 & 0xff)
  var x20 uint32 = (x18 >> 8)
  var x21 uint32 = (x18 & 0xff)
  var x22 uint32 = (x20 & 0xff)
  var x23 uint32 = (x6 >> 8)
  var x24 uint32 = (x6 & 0xff)
  var x25 uint32 = (x23 >> 8)
  var x26 uint32 = (x23 & 0xff)
  var x27 uint32 = (x25 >> 8)
  var x28 uint32 = (x25 & 0xff)
  var x29 uint32 = (x27 & 0xff)
  var x30 uint32 = (x5 >> 8)
  var x31 uint32 = (x5 & 0xff)
  var x32 uint32 = (x30 >> 8)
  var x33 uint32 = (x30 & 0xff)
  var x34 uint32 = (x32 >> 8)
  var x35 uint32 = (x32 & 0xff)
  var x36 uint32 = (x34 & 0xff)
  var x37 uint32 = (x4 >> 8)
  var x38 uint32 = (x4 & 0xff)
  var x39 uint32 = (x37 >> 8)
  var x40 uint32 = (x37 & 0xff)
  var x41 uint32 = (x39 >> 8)
  var x42 uint32 = (x39 & 0xff)
  var x43 uint32 = (x41 & 0xff)
  var x44 uint32 = (x3 >> 8)
  var x45 uint32 = (x3 & 0xff)
  var x46 uint32 = (x44 >> 8)
  var x47 uint32 = (x44 & 0xff)
  var x48 uint32 = (x46 >> 8)
  var x49 uint32 = (x46 & 0xff)
  var x50 uint32 = (x48 & 0xff)
  var x51 uint32 = (x2 >> 8)
  var x52 uint32 = (x2 & 0xff)
  var x53 uint32 = (x51 >> 8)
  var x54 uint32 = (x51 & 0xff)
  var x55 uint32 = (x53 >> 8)
  var x56 uint32 = (x53 & 0xff)
  var x57 uint32 = (x55 & 0xff)
  var x58 uint32 = (x1 >> 8)
  var x59 uint32 = (x1 & 0xff)
  var x60 uint32 = (x58 >> 8)
  var x61 uint32 = (x58 & 0xff)
  var x62 uint32 = (x60 >> 8)
  var x63 uint32 = (x60 & 0xff)
  out1[0] = x10
  out1[1] = x12
  out1[2] = x14
  out1[3] = x15
  out1[4] = x17
  out1[5] = x19
  out1[6] = x21
  out1[7] = x22
  out1[8] = x24
  out1[9] = x26
  out1[10] = x28
  out1[11] = x29
  out1[12] = x31
  out1[13] = x33
  out1[14] = x35
  out1[15] = x36
  out1[16] = x38
  out1[17] = x40
  out1[18] = x42
  out1[19] = x43
  out1[20] = x45
  out1[21] = x47
  out1[22] = x49
  out1[23] = x50
  out1[24] = x52
  out1[25] = x54
  out1[26] = x56
  out1[27] = x57
  out1[28] = x59
  out1[29] = x61
  out1[30] = x63
  out1[31] = x62
}

/*
 * The function fiat_secp256k1_from_bytes deserializes a field element in the Montgomery domain from bytes in little-endian order.
 * Preconditions:
 *   0 ≤ bytes_eval arg1 < m
 * Postconditions:
 *   eval out1 mod m = bytes_eval arg1 mod m
 *   0 ≤ eval out1 < m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
 */
/*inline*/
func fiat_secp256k1_from_bytes(out1 *[8]uint32, arg1 *[32]uint32) {
  var x1 uint32 = ((arg1[31]) << 24)
  var x2 uint32 = ((arg1[30]) << 16)
  var x3 uint32 = ((arg1[29]) << 8)
  var x4 uint32 = (arg1[28])
  var x5 uint32 = ((arg1[27]) << 24)
  var x6 uint32 = ((arg1[26]) << 16)
  var x7 uint32 = ((arg1[25]) << 8)
  var x8 uint32 = (arg1[24])
  var x9 uint32 = ((arg1[23]) << 24)
  var x10 uint32 = ((arg1[22]) << 16)
  var x11 uint32 = ((arg1[21]) << 8)
  var x12 uint32 = (arg1[20])
  var x13 uint32 = ((arg1[19]) << 24)
  var x14 uint32 = ((arg1[18]) << 16)
  var x15 uint32 = ((arg1[17]) << 8)
  var x16 uint32 = (arg1[16])
  var x17 uint32 = ((arg1[15]) << 24)
  var x18 uint32 = ((arg1[14]) << 16)
  var x19 uint32 = ((arg1[13]) << 8)
  var x20 uint32 = (arg1[12])
  var x21 uint32 = ((arg1[11]) << 24)
  var x22 uint32 = ((arg1[10]) << 16)
  var x23 uint32 = ((arg1[9]) << 8)
  var x24 uint32 = (arg1[8])
  var x25 uint32 = ((arg1[7]) << 24)
  var x26 uint32 = ((arg1[6]) << 16)
  var x27 uint32 = ((arg1[5]) << 8)
  var x28 uint32 = (arg1[4])
  var x29 uint32 = ((arg1[3]) << 24)
  var x30 uint32 = ((arg1[2]) << 16)
  var x31 uint32 = ((arg1[1]) << 8)
  var x32 uint32 = (arg1[0])
  var x33 uint32 = (x32 + (x31 + (x30 + x29)))
  var x34 uint32 = (x33 & 0xffffffff)
  var x35 uint32 = (x4 + (x3 + (x2 + x1)))
  var x36 uint32 = (x8 + (x7 + (x6 + x5)))
  var x37 uint32 = (x12 + (x11 + (x10 + x9)))
  var x38 uint32 = (x16 + (x15 + (x14 + x13)))
  var x39 uint32 = (x20 + (x19 + (x18 + x17)))
  var x40 uint32 = (x24 + (x23 + (x22 + x21)))
  var x41 uint32 = (x28 + (x27 + (x26 + x25)))
  var x42 uint32 = (x41 & 0xffffffff)
  var x43 uint32 = (x40 & 0xffffffff)
  var x44 uint32 = (x39 & 0xffffffff)
  var x45 uint32 = (x38 & 0xffffffff)
  var x46 uint32 = (x37 & 0xffffffff)
  var x47 uint32 = (x36 & 0xffffffff)
  out1[0] = x34
  out1[1] = x42
  out1[2] = x43
  out1[3] = x44
  out1[4] = x45
  out1[5] = x46
  out1[6] = x47
  out1[7] = x35
}

