/* Autogenerated: src/ExtractionOCaml/unsaturated_solinas --lang=Go --no-wide-int --cmovznz-by-mul --widen-carry --widen-bytes p521 9 '2^521 - 1' 64 carry_mul carry_square carry add sub opp selectznz to_bytes from_bytes */
/* curve description: p521 */
/* requested operations: carry_mul, carry_square, carry, add, sub, opp, selectznz, to_bytes, from_bytes */
/* n = 9 (from "9") */
/* s-c = 2^521 - [(1, 1)] (from "2^521 - 1") */
/* machine_wordsize = 64 (from "64") */
/*  */
/* Computed values: */
/* carry_chain = [0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1] */
/* eval z = z[0] + (z[1] << 58) + (z[2] << 116) + (z[3] << 174) + (z[4] << 232) + (z[5] << 0x122) + (z[6] << 0x15c) + (z[7] << 0x196) + (z[8] << 0x1d0) */
/* bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17] << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168) + (z[22] << 176) + (z[23] << 184) + (z[24] << 192) + (z[25] << 200) + (z[26] << 208) + (z[27] << 216) + (z[28] << 224) + (z[29] << 232) + (z[30] << 240) + (z[31] << 248) + (z[32] << 256) + (z[33] << 0x108) + (z[34] << 0x110) + (z[35] << 0x118) + (z[36] << 0x120) + (z[37] << 0x128) + (z[38] << 0x130) + (z[39] << 0x138) + (z[40] << 0x140) + (z[41] << 0x148) + (z[42] << 0x150) + (z[43] << 0x158) + (z[44] << 0x160) + (z[45] << 0x168) + (z[46] << 0x170) + (z[47] << 0x178) + (z[48] << 0x180) + (z[49] << 0x188) + (z[50] << 0x190) + (z[51] << 0x198) + (z[52] << 0x1a0) + (z[53] << 0x1a8) + (z[54] << 0x1b0) + (z[55] << 0x1b8) + (z[56] << 0x1c0) + (z[57] << 0x1c8) + (z[58] << 0x1d0) + (z[59] << 0x1d8) + (z[60] << 0x1e0) + (z[61] << 0x1e8) + (z[62] << 0x1f0) + (z[63] << 0x1f8) + (z[64] << 2^9) + (z[65] << 0x208) */

package fiat_p521

import "math/bits"


/*
 * The function fiat_p521_addcarryx_u58 is an addition with carry.
 * Postconditions:
 *   out1 = (arg1 + arg2 + arg3) mod 2^58
 *   out2 = ⌊(arg1 + arg2 + arg3) / 2^58⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0x3ffffffffffffff]
 *   arg3: [0x0 ~> 0x3ffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0x3ffffffffffffff]
 *   out2: [0x0 ~> 0x1]
 */
/*inline*/
func fiat_p521_addcarryx_u58(out1 *uint64, out2 *uint64, arg1 uint64, arg2 uint64, arg3 uint64) {
  var x1 uint64 = ((arg1 + arg2) + arg3)
  var x2 uint64 = (x1 & 0x3ffffffffffffff)
  var x3 uint64 = (x1 >> 58)
  *out1 = x2
  *out2 = x3
}

/*
 * The function fiat_p521_subborrowx_u58 is a subtraction with borrow.
 * Postconditions:
 *   out1 = (-arg1 + arg2 + -arg3) mod 2^58
 *   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^58⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0x3ffffffffffffff]
 *   arg3: [0x0 ~> 0x3ffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0x3ffffffffffffff]
 *   out2: [0x0 ~> 0x1]
 */
/*inline*/
func fiat_p521_subborrowx_u58(out1 *uint64, out2 *uint64, arg1 uint64, arg2 uint64, arg3 uint64) {
  var x1 int64 = ((int64(arg2) - int64(arg1)) - int64(arg3))
  var x2 int64 = (x1 >> 58)
  var x3 uint64 = (uint64(x1) & 0x3ffffffffffffff)
  *out1 = x3
  *out2 = (uint64(0x0) - uint64(x2))
}

/*
 * The function fiat_p521_addcarryx_u57 is an addition with carry.
 * Postconditions:
 *   out1 = (arg1 + arg2 + arg3) mod 2^57
 *   out2 = ⌊(arg1 + arg2 + arg3) / 2^57⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0x1ffffffffffffff]
 *   arg3: [0x0 ~> 0x1ffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0x1ffffffffffffff]
 *   out2: [0x0 ~> 0x1]
 */
/*inline*/
func fiat_p521_addcarryx_u57(out1 *uint64, out2 *uint64, arg1 uint64, arg2 uint64, arg3 uint64) {
  var x1 uint64 = ((arg1 + arg2) + arg3)
  var x2 uint64 = (x1 & 0x1ffffffffffffff)
  var x3 uint64 = (x1 >> 57)
  *out1 = x2
  *out2 = x3
}

/*
 * The function fiat_p521_subborrowx_u57 is a subtraction with borrow.
 * Postconditions:
 *   out1 = (-arg1 + arg2 + -arg3) mod 2^57
 *   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^57⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0x1ffffffffffffff]
 *   arg3: [0x0 ~> 0x1ffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0x1ffffffffffffff]
 *   out2: [0x0 ~> 0x1]
 */
/*inline*/
func fiat_p521_subborrowx_u57(out1 *uint64, out2 *uint64, arg1 uint64, arg2 uint64, arg3 uint64) {
  var x1 int64 = ((int64(arg2) - int64(arg1)) - int64(arg3))
  var x2 int64 = (x1 >> 57)
  var x3 uint64 = (uint64(x1) & 0x1ffffffffffffff)
  *out1 = x3
  *out2 = (uint64(0x0) - uint64(x2))
}

/*
 * The function fiat_p521_cmovznz_u64 is a single-word conditional move.
 * Postconditions:
 *   out1 = (if arg1 = 0 then arg2 else arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 *   arg3: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 */
/*inline*/
func fiat_p521_cmovznz_u64(out1 *uint64, arg1 uint64, arg2 uint64, arg3 uint64) {
  var x1 uint64 = (arg1 * 0xffffffffffffffff)
  var x2 uint64 = ((x1 & arg3) | ((^x1) & arg2))
  *out1 = x2
}

/*
 * The function fiat_p521_carry_mul multiplies two field elements and reduces the result.
 * Postconditions:
 *   eval out1 mod m = (eval arg1 * eval arg2) mod m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0x699999999999999]]
 *   arg2: [[0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0x699999999999999]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x233333333333333]]
 */
/*inline*/
func fiat_p521_carry_mul(out1 *[9]uint64, arg1 *[9]uint64, arg2 *[9]uint64) {
  var x1 uint64
  var x2 uint64
  x1, x2 = bits.Mul64((arg1[8]), ((arg2[8]) * 0x2))
  var x3 uint64
  var x4 uint64
  x3, x4 = bits.Mul64((arg1[8]), ((arg2[7]) * 0x2))
  var x5 uint64
  var x6 uint64
  x5, x6 = bits.Mul64((arg1[8]), ((arg2[6]) * 0x2))
  var x7 uint64
  var x8 uint64
  x7, x8 = bits.Mul64((arg1[8]), ((arg2[5]) * 0x2))
  var x9 uint64
  var x10 uint64
  x9, x10 = bits.Mul64((arg1[8]), ((arg2[4]) * 0x2))
  var x11 uint64
  var x12 uint64
  x11, x12 = bits.Mul64((arg1[8]), ((arg2[3]) * 0x2))
  var x13 uint64
  var x14 uint64
  x13, x14 = bits.Mul64((arg1[8]), ((arg2[2]) * 0x2))
  var x15 uint64
  var x16 uint64
  x15, x16 = bits.Mul64((arg1[8]), ((arg2[1]) * 0x2))
  var x17 uint64
  var x18 uint64
  x17, x18 = bits.Mul64((arg1[7]), ((arg2[8]) * 0x2))
  var x19 uint64
  var x20 uint64
  x19, x20 = bits.Mul64((arg1[7]), ((arg2[7]) * 0x2))
  var x21 uint64
  var x22 uint64
  x21, x22 = bits.Mul64((arg1[7]), ((arg2[6]) * 0x2))
  var x23 uint64
  var x24 uint64
  x23, x24 = bits.Mul64((arg1[7]), ((arg2[5]) * 0x2))
  var x25 uint64
  var x26 uint64
  x25, x26 = bits.Mul64((arg1[7]), ((arg2[4]) * 0x2))
  var x27 uint64
  var x28 uint64
  x27, x28 = bits.Mul64((arg1[7]), ((arg2[3]) * 0x2))
  var x29 uint64
  var x30 uint64
  x29, x30 = bits.Mul64((arg1[7]), ((arg2[2]) * 0x2))
  var x31 uint64
  var x32 uint64
  x31, x32 = bits.Mul64((arg1[6]), ((arg2[8]) * 0x2))
  var x33 uint64
  var x34 uint64
  x33, x34 = bits.Mul64((arg1[6]), ((arg2[7]) * 0x2))
  var x35 uint64
  var x36 uint64
  x35, x36 = bits.Mul64((arg1[6]), ((arg2[6]) * 0x2))
  var x37 uint64
  var x38 uint64
  x37, x38 = bits.Mul64((arg1[6]), ((arg2[5]) * 0x2))
  var x39 uint64
  var x40 uint64
  x39, x40 = bits.Mul64((arg1[6]), ((arg2[4]) * 0x2))
  var x41 uint64
  var x42 uint64
  x41, x42 = bits.Mul64((arg1[6]), ((arg2[3]) * 0x2))
  var x43 uint64
  var x44 uint64
  x43, x44 = bits.Mul64((arg1[5]), ((arg2[8]) * 0x2))
  var x45 uint64
  var x46 uint64
  x45, x46 = bits.Mul64((arg1[5]), ((arg2[7]) * 0x2))
  var x47 uint64
  var x48 uint64
  x47, x48 = bits.Mul64((arg1[5]), ((arg2[6]) * 0x2))
  var x49 uint64
  var x50 uint64
  x49, x50 = bits.Mul64((arg1[5]), ((arg2[5]) * 0x2))
  var x51 uint64
  var x52 uint64
  x51, x52 = bits.Mul64((arg1[5]), ((arg2[4]) * 0x2))
  var x53 uint64
  var x54 uint64
  x53, x54 = bits.Mul64((arg1[4]), ((arg2[8]) * 0x2))
  var x55 uint64
  var x56 uint64
  x55, x56 = bits.Mul64((arg1[4]), ((arg2[7]) * 0x2))
  var x57 uint64
  var x58 uint64
  x57, x58 = bits.Mul64((arg1[4]), ((arg2[6]) * 0x2))
  var x59 uint64
  var x60 uint64
  x59, x60 = bits.Mul64((arg1[4]), ((arg2[5]) * 0x2))
  var x61 uint64
  var x62 uint64
  x61, x62 = bits.Mul64((arg1[3]), ((arg2[8]) * 0x2))
  var x63 uint64
  var x64 uint64
  x63, x64 = bits.Mul64((arg1[3]), ((arg2[7]) * 0x2))
  var x65 uint64
  var x66 uint64
  x65, x66 = bits.Mul64((arg1[3]), ((arg2[6]) * 0x2))
  var x67 uint64
  var x68 uint64
  x67, x68 = bits.Mul64((arg1[2]), ((arg2[8]) * 0x2))
  var x69 uint64
  var x70 uint64
  x69, x70 = bits.Mul64((arg1[2]), ((arg2[7]) * 0x2))
  var x71 uint64
  var x72 uint64
  x71, x72 = bits.Mul64((arg1[1]), ((arg2[8]) * 0x2))
  var x73 uint64
  var x74 uint64
  x73, x74 = bits.Mul64((arg1[8]), (arg2[0]))
  var x75 uint64
  var x76 uint64
  x75, x76 = bits.Mul64((arg1[7]), (arg2[1]))
  var x77 uint64
  var x78 uint64
  x77, x78 = bits.Mul64((arg1[7]), (arg2[0]))
  var x79 uint64
  var x80 uint64
  x79, x80 = bits.Mul64((arg1[6]), (arg2[2]))
  var x81 uint64
  var x82 uint64
  x81, x82 = bits.Mul64((arg1[6]), (arg2[1]))
  var x83 uint64
  var x84 uint64
  x83, x84 = bits.Mul64((arg1[6]), (arg2[0]))
  var x85 uint64
  var x86 uint64
  x85, x86 = bits.Mul64((arg1[5]), (arg2[3]))
  var x87 uint64
  var x88 uint64
  x87, x88 = bits.Mul64((arg1[5]), (arg2[2]))
  var x89 uint64
  var x90 uint64
  x89, x90 = bits.Mul64((arg1[5]), (arg2[1]))
  var x91 uint64
  var x92 uint64
  x91, x92 = bits.Mul64((arg1[5]), (arg2[0]))
  var x93 uint64
  var x94 uint64
  x93, x94 = bits.Mul64((arg1[4]), (arg2[4]))
  var x95 uint64
  var x96 uint64
  x95, x96 = bits.Mul64((arg1[4]), (arg2[3]))
  var x97 uint64
  var x98 uint64
  x97, x98 = bits.Mul64((arg1[4]), (arg2[2]))
  var x99 uint64
  var x100 uint64
  x99, x100 = bits.Mul64((arg1[4]), (arg2[1]))
  var x101 uint64
  var x102 uint64
  x101, x102 = bits.Mul64((arg1[4]), (arg2[0]))
  var x103 uint64
  var x104 uint64
  x103, x104 = bits.Mul64((arg1[3]), (arg2[5]))
  var x105 uint64
  var x106 uint64
  x105, x106 = bits.Mul64((arg1[3]), (arg2[4]))
  var x107 uint64
  var x108 uint64
  x107, x108 = bits.Mul64((arg1[3]), (arg2[3]))
  var x109 uint64
  var x110 uint64
  x109, x110 = bits.Mul64((arg1[3]), (arg2[2]))
  var x111 uint64
  var x112 uint64
  x111, x112 = bits.Mul64((arg1[3]), (arg2[1]))
  var x113 uint64
  var x114 uint64
  x113, x114 = bits.Mul64((arg1[3]), (arg2[0]))
  var x115 uint64
  var x116 uint64
  x115, x116 = bits.Mul64((arg1[2]), (arg2[6]))
  var x117 uint64
  var x118 uint64
  x117, x118 = bits.Mul64((arg1[2]), (arg2[5]))
  var x119 uint64
  var x120 uint64
  x119, x120 = bits.Mul64((arg1[2]), (arg2[4]))
  var x121 uint64
  var x122 uint64
  x121, x122 = bits.Mul64((arg1[2]), (arg2[3]))
  var x123 uint64
  var x124 uint64
  x123, x124 = bits.Mul64((arg1[2]), (arg2[2]))
  var x125 uint64
  var x126 uint64
  x125, x126 = bits.Mul64((arg1[2]), (arg2[1]))
  var x127 uint64
  var x128 uint64
  x127, x128 = bits.Mul64((arg1[2]), (arg2[0]))
  var x129 uint64
  var x130 uint64
  x129, x130 = bits.Mul64((arg1[1]), (arg2[7]))
  var x131 uint64
  var x132 uint64
  x131, x132 = bits.Mul64((arg1[1]), (arg2[6]))
  var x133 uint64
  var x134 uint64
  x133, x134 = bits.Mul64((arg1[1]), (arg2[5]))
  var x135 uint64
  var x136 uint64
  x135, x136 = bits.Mul64((arg1[1]), (arg2[4]))
  var x137 uint64
  var x138 uint64
  x137, x138 = bits.Mul64((arg1[1]), (arg2[3]))
  var x139 uint64
  var x140 uint64
  x139, x140 = bits.Mul64((arg1[1]), (arg2[2]))
  var x141 uint64
  var x142 uint64
  x141, x142 = bits.Mul64((arg1[1]), (arg2[1]))
  var x143 uint64
  var x144 uint64
  x143, x144 = bits.Mul64((arg1[1]), (arg2[0]))
  var x145 uint64
  var x146 uint64
  x145, x146 = bits.Mul64((arg1[0]), (arg2[8]))
  var x147 uint64
  var x148 uint64
  x147, x148 = bits.Mul64((arg1[0]), (arg2[7]))
  var x149 uint64
  var x150 uint64
  x149, x150 = bits.Mul64((arg1[0]), (arg2[6]))
  var x151 uint64
  var x152 uint64
  x151, x152 = bits.Mul64((arg1[0]), (arg2[5]))
  var x153 uint64
  var x154 uint64
  x153, x154 = bits.Mul64((arg1[0]), (arg2[4]))
  var x155 uint64
  var x156 uint64
  x155, x156 = bits.Mul64((arg1[0]), (arg2[3]))
  var x157 uint64
  var x158 uint64
  x157, x158 = bits.Mul64((arg1[0]), (arg2[2]))
  var x159 uint64
  var x160 uint64
  x159, x160 = bits.Mul64((arg1[0]), (arg2[1]))
  var x161 uint64
  var x162 uint64
  x161, x162 = bits.Mul64((arg1[0]), (arg2[0]))
  var x163 uint64
  var x164 uint64
  x163, x164 = bits.Add64(x29, x15, 0x0)
  var x165 uint64
  x165, _ = bits.Add64(x30, x16, x164)
  var x167 uint64
  var x168 uint64
  x167, x168 = bits.Add64(x41, x163, 0x0)
  var x169 uint64
  x169, _ = bits.Add64(x42, x165, x168)
  var x171 uint64
  var x172 uint64
  x171, x172 = bits.Add64(x51, x167, 0x0)
  var x173 uint64
  x173, _ = bits.Add64(x52, x169, x172)
  var x175 uint64
  var x176 uint64
  x175, x176 = bits.Add64(x59, x171, 0x0)
  var x177 uint64
  x177, _ = bits.Add64(x60, x173, x176)
  var x179 uint64
  var x180 uint64
  x179, x180 = bits.Add64(x65, x175, 0x0)
  var x181 uint64
  x181, _ = bits.Add64(x66, x177, x180)
  var x183 uint64
  var x184 uint64
  x183, x184 = bits.Add64(x69, x179, 0x0)
  var x185 uint64
  x185, _ = bits.Add64(x70, x181, x184)
  var x187 uint64
  var x188 uint64
  x187, x188 = bits.Add64(x71, x183, 0x0)
  var x189 uint64
  x189, _ = bits.Add64(x72, x185, x188)
  var x191 uint64
  var x192 uint64
  x191, x192 = bits.Add64(x161, x187, 0x0)
  var x193 uint64
  x193, _ = bits.Add64(x162, x189, x192)
  var x195 uint64 = ((x191 >> 58) | ((x193 << 6) & 0xffffffffffffffff))
  var x196 uint64 = (x193 >> 58)
  var x197 uint64 = (x191 & 0x3ffffffffffffff)
  var x198 uint64
  var x199 uint64
  x198, x199 = bits.Add64(x75, x73, 0x0)
  var x200 uint64
  x200, _ = bits.Add64(x76, x74, x199)
  var x202 uint64
  var x203 uint64
  x202, x203 = bits.Add64(x79, x198, 0x0)
  var x204 uint64
  x204, _ = bits.Add64(x80, x200, x203)
  var x206 uint64
  var x207 uint64
  x206, x207 = bits.Add64(x85, x202, 0x0)
  var x208 uint64
  x208, _ = bits.Add64(x86, x204, x207)
  var x210 uint64
  var x211 uint64
  x210, x211 = bits.Add64(x93, x206, 0x0)
  var x212 uint64
  x212, _ = bits.Add64(x94, x208, x211)
  var x214 uint64
  var x215 uint64
  x214, x215 = bits.Add64(x103, x210, 0x0)
  var x216 uint64
  x216, _ = bits.Add64(x104, x212, x215)
  var x218 uint64
  var x219 uint64
  x218, x219 = bits.Add64(x115, x214, 0x0)
  var x220 uint64
  x220, _ = bits.Add64(x116, x216, x219)
  var x222 uint64
  var x223 uint64
  x222, x223 = bits.Add64(x129, x218, 0x0)
  var x224 uint64
  x224, _ = bits.Add64(x130, x220, x223)
  var x226 uint64
  var x227 uint64
  x226, x227 = bits.Add64(x145, x222, 0x0)
  var x228 uint64
  x228, _ = bits.Add64(x146, x224, x227)
  var x230 uint64
  var x231 uint64
  x230, x231 = bits.Add64(x77, x1, 0x0)
  var x232 uint64
  x232, _ = bits.Add64(x78, x2, x231)
  var x234 uint64
  var x235 uint64
  x234, x235 = bits.Add64(x81, x230, 0x0)
  var x236 uint64
  x236, _ = bits.Add64(x82, x232, x235)
  var x238 uint64
  var x239 uint64
  x238, x239 = bits.Add64(x87, x234, 0x0)
  var x240 uint64
  x240, _ = bits.Add64(x88, x236, x239)
  var x242 uint64
  var x243 uint64
  x242, x243 = bits.Add64(x95, x238, 0x0)
  var x244 uint64
  x244, _ = bits.Add64(x96, x240, x243)
  var x246 uint64
  var x247 uint64
  x246, x247 = bits.Add64(x105, x242, 0x0)
  var x248 uint64
  x248, _ = bits.Add64(x106, x244, x247)
  var x250 uint64
  var x251 uint64
  x250, x251 = bits.Add64(x117, x246, 0x0)
  var x252 uint64
  x252, _ = bits.Add64(x118, x248, x251)
  var x254 uint64
  var x255 uint64
  x254, x255 = bits.Add64(x131, x250, 0x0)
  var x256 uint64
  x256, _ = bits.Add64(x132, x252, x255)
  var x258 uint64
  var x259 uint64
  x258, x259 = bits.Add64(x147, x254, 0x0)
  var x260 uint64
  x260, _ = bits.Add64(x148, x256, x259)
  var x262 uint64
  var x263 uint64
  x262, x263 = bits.Add64(x17, x3, 0x0)
  var x264 uint64
  x264, _ = bits.Add64(x18, x4, x263)
  var x266 uint64
  var x267 uint64
  x266, x267 = bits.Add64(x83, x262, 0x0)
  var x268 uint64
  x268, _ = bits.Add64(x84, x264, x267)
  var x270 uint64
  var x271 uint64
  x270, x271 = bits.Add64(x89, x266, 0x0)
  var x272 uint64
  x272, _ = bits.Add64(x90, x268, x271)
  var x274 uint64
  var x275 uint64
  x274, x275 = bits.Add64(x97, x270, 0x0)
  var x276 uint64
  x276, _ = bits.Add64(x98, x272, x275)
  var x278 uint64
  var x279 uint64
  x278, x279 = bits.Add64(x107, x274, 0x0)
  var x280 uint64
  x280, _ = bits.Add64(x108, x276, x279)
  var x282 uint64
  var x283 uint64
  x282, x283 = bits.Add64(x119, x278, 0x0)
  var x284 uint64
  x284, _ = bits.Add64(x120, x280, x283)
  var x286 uint64
  var x287 uint64
  x286, x287 = bits.Add64(x133, x282, 0x0)
  var x288 uint64
  x288, _ = bits.Add64(x134, x284, x287)
  var x290 uint64
  var x291 uint64
  x290, x291 = bits.Add64(x149, x286, 0x0)
  var x292 uint64
  x292, _ = bits.Add64(x150, x288, x291)
  var x294 uint64
  var x295 uint64
  x294, x295 = bits.Add64(x19, x5, 0x0)
  var x296 uint64
  x296, _ = bits.Add64(x20, x6, x295)
  var x298 uint64
  var x299 uint64
  x298, x299 = bits.Add64(x31, x294, 0x0)
  var x300 uint64
  x300, _ = bits.Add64(x32, x296, x299)
  var x302 uint64
  var x303 uint64
  x302, x303 = bits.Add64(x91, x298, 0x0)
  var x304 uint64
  x304, _ = bits.Add64(x92, x300, x303)
  var x306 uint64
  var x307 uint64
  x306, x307 = bits.Add64(x99, x302, 0x0)
  var x308 uint64
  x308, _ = bits.Add64(x100, x304, x307)
  var x310 uint64
  var x311 uint64
  x310, x311 = bits.Add64(x109, x306, 0x0)
  var x312 uint64
  x312, _ = bits.Add64(x110, x308, x311)
  var x314 uint64
  var x315 uint64
  x314, x315 = bits.Add64(x121, x310, 0x0)
  var x316 uint64
  x316, _ = bits.Add64(x122, x312, x315)
  var x318 uint64
  var x319 uint64
  x318, x319 = bits.Add64(x135, x314, 0x0)
  var x320 uint64
  x320, _ = bits.Add64(x136, x316, x319)
  var x322 uint64
  var x323 uint64
  x322, x323 = bits.Add64(x151, x318, 0x0)
  var x324 uint64
  x324, _ = bits.Add64(x152, x320, x323)
  var x326 uint64
  var x327 uint64
  x326, x327 = bits.Add64(x21, x7, 0x0)
  var x328 uint64
  x328, _ = bits.Add64(x22, x8, x327)
  var x330 uint64
  var x331 uint64
  x330, x331 = bits.Add64(x33, x326, 0x0)
  var x332 uint64
  x332, _ = bits.Add64(x34, x328, x331)
  var x334 uint64
  var x335 uint64
  x334, x335 = bits.Add64(x43, x330, 0x0)
  var x336 uint64
  x336, _ = bits.Add64(x44, x332, x335)
  var x338 uint64
  var x339 uint64
  x338, x339 = bits.Add64(x101, x334, 0x0)
  var x340 uint64
  x340, _ = bits.Add64(x102, x336, x339)
  var x342 uint64
  var x343 uint64
  x342, x343 = bits.Add64(x111, x338, 0x0)
  var x344 uint64
  x344, _ = bits.Add64(x112, x340, x343)
  var x346 uint64
  var x347 uint64
  x346, x347 = bits.Add64(x123, x342, 0x0)
  var x348 uint64
  x348, _ = bits.Add64(x124, x344, x347)
  var x350 uint64
  var x351 uint64
  x350, x351 = bits.Add64(x137, x346, 0x0)
  var x352 uint64
  x352, _ = bits.Add64(x138, x348, x351)
  var x354 uint64
  var x355 uint64
  x354, x355 = bits.Add64(x153, x350, 0x0)
  var x356 uint64
  x356, _ = bits.Add64(x154, x352, x355)
  var x358 uint64
  var x359 uint64
  x358, x359 = bits.Add64(x23, x9, 0x0)
  var x360 uint64
  x360, _ = bits.Add64(x24, x10, x359)
  var x362 uint64
  var x363 uint64
  x362, x363 = bits.Add64(x35, x358, 0x0)
  var x364 uint64
  x364, _ = bits.Add64(x36, x360, x363)
  var x366 uint64
  var x367 uint64
  x366, x367 = bits.Add64(x45, x362, 0x0)
  var x368 uint64
  x368, _ = bits.Add64(x46, x364, x367)
  var x370 uint64
  var x371 uint64
  x370, x371 = bits.Add64(x53, x366, 0x0)
  var x372 uint64
  x372, _ = bits.Add64(x54, x368, x371)
  var x374 uint64
  var x375 uint64
  x374, x375 = bits.Add64(x113, x370, 0x0)
  var x376 uint64
  x376, _ = bits.Add64(x114, x372, x375)
  var x378 uint64
  var x379 uint64
  x378, x379 = bits.Add64(x125, x374, 0x0)
  var x380 uint64
  x380, _ = bits.Add64(x126, x376, x379)
  var x382 uint64
  var x383 uint64
  x382, x383 = bits.Add64(x139, x378, 0x0)
  var x384 uint64
  x384, _ = bits.Add64(x140, x380, x383)
  var x386 uint64
  var x387 uint64
  x386, x387 = bits.Add64(x155, x382, 0x0)
  var x388 uint64
  x388, _ = bits.Add64(x156, x384, x387)
  var x390 uint64
  var x391 uint64
  x390, x391 = bits.Add64(x25, x11, 0x0)
  var x392 uint64
  x392, _ = bits.Add64(x26, x12, x391)
  var x394 uint64
  var x395 uint64
  x394, x395 = bits.Add64(x37, x390, 0x0)
  var x396 uint64
  x396, _ = bits.Add64(x38, x392, x395)
  var x398 uint64
  var x399 uint64
  x398, x399 = bits.Add64(x47, x394, 0x0)
  var x400 uint64
  x400, _ = bits.Add64(x48, x396, x399)
  var x402 uint64
  var x403 uint64
  x402, x403 = bits.Add64(x55, x398, 0x0)
  var x404 uint64
  x404, _ = bits.Add64(x56, x400, x403)
  var x406 uint64
  var x407 uint64
  x406, x407 = bits.Add64(x61, x402, 0x0)
  var x408 uint64
  x408, _ = bits.Add64(x62, x404, x407)
  var x410 uint64
  var x411 uint64
  x410, x411 = bits.Add64(x127, x406, 0x0)
  var x412 uint64
  x412, _ = bits.Add64(x128, x408, x411)
  var x414 uint64
  var x415 uint64
  x414, x415 = bits.Add64(x141, x410, 0x0)
  var x416 uint64
  x416, _ = bits.Add64(x142, x412, x415)
  var x418 uint64
  var x419 uint64
  x418, x419 = bits.Add64(x157, x414, 0x0)
  var x420 uint64
  x420, _ = bits.Add64(x158, x416, x419)
  var x422 uint64
  var x423 uint64
  x422, x423 = bits.Add64(x27, x13, 0x0)
  var x424 uint64
  x424, _ = bits.Add64(x28, x14, x423)
  var x426 uint64
  var x427 uint64
  x426, x427 = bits.Add64(x39, x422, 0x0)
  var x428 uint64
  x428, _ = bits.Add64(x40, x424, x427)
  var x430 uint64
  var x431 uint64
  x430, x431 = bits.Add64(x49, x426, 0x0)
  var x432 uint64
  x432, _ = bits.Add64(x50, x428, x431)
  var x434 uint64
  var x435 uint64
  x434, x435 = bits.Add64(x57, x430, 0x0)
  var x436 uint64
  x436, _ = bits.Add64(x58, x432, x435)
  var x438 uint64
  var x439 uint64
  x438, x439 = bits.Add64(x63, x434, 0x0)
  var x440 uint64
  x440, _ = bits.Add64(x64, x436, x439)
  var x442 uint64
  var x443 uint64
  x442, x443 = bits.Add64(x67, x438, 0x0)
  var x444 uint64
  x444, _ = bits.Add64(x68, x440, x443)
  var x446 uint64
  var x447 uint64
  x446, x447 = bits.Add64(x143, x442, 0x0)
  var x448 uint64
  x448, _ = bits.Add64(x144, x444, x447)
  var x450 uint64
  var x451 uint64
  x450, x451 = bits.Add64(x159, x446, 0x0)
  var x452 uint64
  x452, _ = bits.Add64(x160, x448, x451)
  var x454 uint64
  var x455 uint64
  x454, x455 = bits.Add64(x195, x450, 0x0)
  var x456 uint64
  x456, _ = bits.Add64(x196, x452, x455)
  var x458 uint64 = ((x454 >> 58) | ((x456 << 6) & 0xffffffffffffffff))
  var x459 uint64 = (x456 >> 58)
  var x460 uint64 = (x454 & 0x3ffffffffffffff)
  var x461 uint64
  var x462 uint64
  x461, x462 = bits.Add64(x458, x418, 0x0)
  var x463 uint64
  x463, _ = bits.Add64(x459, x420, x462)
  var x465 uint64 = ((x461 >> 58) | ((x463 << 6) & 0xffffffffffffffff))
  var x466 uint64 = (x463 >> 58)
  var x467 uint64 = (x461 & 0x3ffffffffffffff)
  var x468 uint64
  var x469 uint64
  x468, x469 = bits.Add64(x465, x386, 0x0)
  var x470 uint64
  x470, _ = bits.Add64(x466, x388, x469)
  var x472 uint64 = ((x468 >> 58) | ((x470 << 6) & 0xffffffffffffffff))
  var x473 uint64 = (x470 >> 58)
  var x474 uint64 = (x468 & 0x3ffffffffffffff)
  var x475 uint64
  var x476 uint64
  x475, x476 = bits.Add64(x472, x354, 0x0)
  var x477 uint64
  x477, _ = bits.Add64(x473, x356, x476)
  var x479 uint64 = ((x475 >> 58) | ((x477 << 6) & 0xffffffffffffffff))
  var x480 uint64 = (x477 >> 58)
  var x481 uint64 = (x475 & 0x3ffffffffffffff)
  var x482 uint64
  var x483 uint64
  x482, x483 = bits.Add64(x479, x322, 0x0)
  var x484 uint64
  x484, _ = bits.Add64(x480, x324, x483)
  var x486 uint64 = ((x482 >> 58) | ((x484 << 6) & 0xffffffffffffffff))
  var x487 uint64 = (x484 >> 58)
  var x488 uint64 = (x482 & 0x3ffffffffffffff)
  var x489 uint64
  var x490 uint64
  x489, x490 = bits.Add64(x486, x290, 0x0)
  var x491 uint64
  x491, _ = bits.Add64(x487, x292, x490)
  var x493 uint64 = ((x489 >> 58) | ((x491 << 6) & 0xffffffffffffffff))
  var x494 uint64 = (x491 >> 58)
  var x495 uint64 = (x489 & 0x3ffffffffffffff)
  var x496 uint64
  var x497 uint64
  x496, x497 = bits.Add64(x493, x258, 0x0)
  var x498 uint64
  x498, _ = bits.Add64(x494, x260, x497)
  var x500 uint64 = ((x496 >> 58) | ((x498 << 6) & 0xffffffffffffffff))
  var x501 uint64 = (x498 >> 58)
  var x502 uint64 = (x496 & 0x3ffffffffffffff)
  var x503 uint64
  var x504 uint64
  x503, x504 = bits.Add64(x500, x226, 0x0)
  var x505 uint64
  x505, _ = bits.Add64(x501, x228, x504)
  var x507 uint64 = ((x503 >> 57) | ((x505 << 7) & 0xffffffffffffffff))
  var x508 uint64 = (x505 >> 57)
  var x509 uint64 = (x503 & 0x1ffffffffffffff)
  var x510 uint64
  var x511 uint64
  x510, x511 = bits.Add64(x197, x507, 0x0)
  var x512 uint64 = (x511 + x508)
  var x513 uint64 = ((x510 >> 58) | ((x512 << 6) & 0xffffffffffffffff))
  var x514 uint64 = (x510 & 0x3ffffffffffffff)
  var x515 uint64 = (x513 + x460)
  var x516 uint64 = (x515 >> 58)
  var x517 uint64 = (x515 & 0x3ffffffffffffff)
  var x518 uint64 = (x516 + x467)
  out1[0] = x514
  out1[1] = x517
  out1[2] = x518
  out1[3] = x474
  out1[4] = x481
  out1[5] = x488
  out1[6] = x495
  out1[7] = x502
  out1[8] = x509
}

/*
 * The function fiat_p521_carry_square squares a field element and reduces the result.
 * Postconditions:
 *   eval out1 mod m = (eval arg1 * eval arg1) mod m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0x699999999999999]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x233333333333333]]
 */
/*inline*/
func fiat_p521_carry_square(out1 *[9]uint64, arg1 *[9]uint64) {
  var x1 uint64 = (arg1[8])
  var x2 uint64 = (x1 * 0x2)
  var x3 uint64 = ((arg1[8]) * 0x2)
  var x4 uint64 = (arg1[7])
  var x5 uint64 = (x4 * 0x2)
  var x6 uint64 = ((arg1[7]) * 0x2)
  var x7 uint64 = (arg1[6])
  var x8 uint64 = (x7 * 0x2)
  var x9 uint64 = ((arg1[6]) * 0x2)
  var x10 uint64 = (arg1[5])
  var x11 uint64 = (x10 * 0x2)
  var x12 uint64 = ((arg1[5]) * 0x2)
  var x13 uint64 = ((arg1[4]) * 0x2)
  var x14 uint64 = ((arg1[3]) * 0x2)
  var x15 uint64 = ((arg1[2]) * 0x2)
  var x16 uint64 = ((arg1[1]) * 0x2)
  var x17 uint64
  var x18 uint64
  x17, x18 = bits.Mul64((arg1[8]), (x1 * 0x2))
  var x19 uint64
  var x20 uint64
  x19, x20 = bits.Mul64((arg1[7]), (x2 * 0x2))
  var x21 uint64
  var x22 uint64
  x21, x22 = bits.Mul64((arg1[7]), (x4 * 0x2))
  var x23 uint64
  var x24 uint64
  x23, x24 = bits.Mul64((arg1[6]), (x2 * 0x2))
  var x25 uint64
  var x26 uint64
  x25, x26 = bits.Mul64((arg1[6]), (x5 * 0x2))
  var x27 uint64
  var x28 uint64
  x27, x28 = bits.Mul64((arg1[6]), (x7 * 0x2))
  var x29 uint64
  var x30 uint64
  x29, x30 = bits.Mul64((arg1[5]), (x2 * 0x2))
  var x31 uint64
  var x32 uint64
  x31, x32 = bits.Mul64((arg1[5]), (x5 * 0x2))
  var x33 uint64
  var x34 uint64
  x33, x34 = bits.Mul64((arg1[5]), (x8 * 0x2))
  var x35 uint64
  var x36 uint64
  x35, x36 = bits.Mul64((arg1[5]), (x10 * 0x2))
  var x37 uint64
  var x38 uint64
  x37, x38 = bits.Mul64((arg1[4]), (x2 * 0x2))
  var x39 uint64
  var x40 uint64
  x39, x40 = bits.Mul64((arg1[4]), (x5 * 0x2))
  var x41 uint64
  var x42 uint64
  x41, x42 = bits.Mul64((arg1[4]), (x8 * 0x2))
  var x43 uint64
  var x44 uint64
  x43, x44 = bits.Mul64((arg1[4]), (x11 * 0x2))
  var x45 uint64
  var x46 uint64
  x45, x46 = bits.Mul64((arg1[4]), (arg1[4]))
  var x47 uint64
  var x48 uint64
  x47, x48 = bits.Mul64((arg1[3]), (x2 * 0x2))
  var x49 uint64
  var x50 uint64
  x49, x50 = bits.Mul64((arg1[3]), (x5 * 0x2))
  var x51 uint64
  var x52 uint64
  x51, x52 = bits.Mul64((arg1[3]), (x8 * 0x2))
  var x53 uint64
  var x54 uint64
  x53, x54 = bits.Mul64((arg1[3]), x12)
  var x55 uint64
  var x56 uint64
  x55, x56 = bits.Mul64((arg1[3]), x13)
  var x57 uint64
  var x58 uint64
  x57, x58 = bits.Mul64((arg1[3]), (arg1[3]))
  var x59 uint64
  var x60 uint64
  x59, x60 = bits.Mul64((arg1[2]), (x2 * 0x2))
  var x61 uint64
  var x62 uint64
  x61, x62 = bits.Mul64((arg1[2]), (x5 * 0x2))
  var x63 uint64
  var x64 uint64
  x63, x64 = bits.Mul64((arg1[2]), x9)
  var x65 uint64
  var x66 uint64
  x65, x66 = bits.Mul64((arg1[2]), x12)
  var x67 uint64
  var x68 uint64
  x67, x68 = bits.Mul64((arg1[2]), x13)
  var x69 uint64
  var x70 uint64
  x69, x70 = bits.Mul64((arg1[2]), x14)
  var x71 uint64
  var x72 uint64
  x71, x72 = bits.Mul64((arg1[2]), (arg1[2]))
  var x73 uint64
  var x74 uint64
  x73, x74 = bits.Mul64((arg1[1]), (x2 * 0x2))
  var x75 uint64
  var x76 uint64
  x75, x76 = bits.Mul64((arg1[1]), x6)
  var x77 uint64
  var x78 uint64
  x77, x78 = bits.Mul64((arg1[1]), x9)
  var x79 uint64
  var x80 uint64
  x79, x80 = bits.Mul64((arg1[1]), x12)
  var x81 uint64
  var x82 uint64
  x81, x82 = bits.Mul64((arg1[1]), x13)
  var x83 uint64
  var x84 uint64
  x83, x84 = bits.Mul64((arg1[1]), x14)
  var x85 uint64
  var x86 uint64
  x85, x86 = bits.Mul64((arg1[1]), x15)
  var x87 uint64
  var x88 uint64
  x87, x88 = bits.Mul64((arg1[1]), (arg1[1]))
  var x89 uint64
  var x90 uint64
  x89, x90 = bits.Mul64((arg1[0]), x3)
  var x91 uint64
  var x92 uint64
  x91, x92 = bits.Mul64((arg1[0]), x6)
  var x93 uint64
  var x94 uint64
  x93, x94 = bits.Mul64((arg1[0]), x9)
  var x95 uint64
  var x96 uint64
  x95, x96 = bits.Mul64((arg1[0]), x12)
  var x97 uint64
  var x98 uint64
  x97, x98 = bits.Mul64((arg1[0]), x13)
  var x99 uint64
  var x100 uint64
  x99, x100 = bits.Mul64((arg1[0]), x14)
  var x101 uint64
  var x102 uint64
  x101, x102 = bits.Mul64((arg1[0]), x15)
  var x103 uint64
  var x104 uint64
  x103, x104 = bits.Mul64((arg1[0]), x16)
  var x105 uint64
  var x106 uint64
  x105, x106 = bits.Mul64((arg1[0]), (arg1[0]))
  var x107 uint64
  var x108 uint64
  x107, x108 = bits.Add64(x51, x43, 0x0)
  var x109 uint64
  x109, _ = bits.Add64(x52, x44, x108)
  var x111 uint64
  var x112 uint64
  x111, x112 = bits.Add64(x61, x107, 0x0)
  var x113 uint64
  x113, _ = bits.Add64(x62, x109, x112)
  var x115 uint64
  var x116 uint64
  x115, x116 = bits.Add64(x73, x111, 0x0)
  var x117 uint64
  x117, _ = bits.Add64(x74, x113, x116)
  var x119 uint64
  var x120 uint64
  x119, x120 = bits.Add64(x105, x115, 0x0)
  var x121 uint64
  x121, _ = bits.Add64(x106, x117, x120)
  var x123 uint64 = ((x119 >> 58) | ((x121 << 6) & 0xffffffffffffffff))
  var x124 uint64 = (x121 >> 58)
  var x125 uint64 = (x119 & 0x3ffffffffffffff)
  var x126 uint64
  var x127 uint64
  x126, x127 = bits.Add64(x53, x45, 0x0)
  var x128 uint64
  x128, _ = bits.Add64(x54, x46, x127)
  var x130 uint64
  var x131 uint64
  x130, x131 = bits.Add64(x63, x126, 0x0)
  var x132 uint64
  x132, _ = bits.Add64(x64, x128, x131)
  var x134 uint64
  var x135 uint64
  x134, x135 = bits.Add64(x75, x130, 0x0)
  var x136 uint64
  x136, _ = bits.Add64(x76, x132, x135)
  var x138 uint64
  var x139 uint64
  x138, x139 = bits.Add64(x89, x134, 0x0)
  var x140 uint64
  x140, _ = bits.Add64(x90, x136, x139)
  var x142 uint64
  var x143 uint64
  x142, x143 = bits.Add64(x55, x17, 0x0)
  var x144 uint64
  x144, _ = bits.Add64(x56, x18, x143)
  var x146 uint64
  var x147 uint64
  x146, x147 = bits.Add64(x65, x142, 0x0)
  var x148 uint64
  x148, _ = bits.Add64(x66, x144, x147)
  var x150 uint64
  var x151 uint64
  x150, x151 = bits.Add64(x77, x146, 0x0)
  var x152 uint64
  x152, _ = bits.Add64(x78, x148, x151)
  var x154 uint64
  var x155 uint64
  x154, x155 = bits.Add64(x91, x150, 0x0)
  var x156 uint64
  x156, _ = bits.Add64(x92, x152, x155)
  var x158 uint64
  var x159 uint64
  x158, x159 = bits.Add64(x57, x19, 0x0)
  var x160 uint64
  x160, _ = bits.Add64(x58, x20, x159)
  var x162 uint64
  var x163 uint64
  x162, x163 = bits.Add64(x67, x158, 0x0)
  var x164 uint64
  x164, _ = bits.Add64(x68, x160, x163)
  var x166 uint64
  var x167 uint64
  x166, x167 = bits.Add64(x79, x162, 0x0)
  var x168 uint64
  x168, _ = bits.Add64(x80, x164, x167)
  var x170 uint64
  var x171 uint64
  x170, x171 = bits.Add64(x93, x166, 0x0)
  var x172 uint64
  x172, _ = bits.Add64(x94, x168, x171)
  var x174 uint64
  var x175 uint64
  x174, x175 = bits.Add64(x23, x21, 0x0)
  var x176 uint64
  x176, _ = bits.Add64(x24, x22, x175)
  var x178 uint64
  var x179 uint64
  x178, x179 = bits.Add64(x69, x174, 0x0)
  var x180 uint64
  x180, _ = bits.Add64(x70, x176, x179)
  var x182 uint64
  var x183 uint64
  x182, x183 = bits.Add64(x81, x178, 0x0)
  var x184 uint64
  x184, _ = bits.Add64(x82, x180, x183)
  var x186 uint64
  var x187 uint64
  x186, x187 = bits.Add64(x95, x182, 0x0)
  var x188 uint64
  x188, _ = bits.Add64(x96, x184, x187)
  var x190 uint64
  var x191 uint64
  x190, x191 = bits.Add64(x29, x25, 0x0)
  var x192 uint64
  x192, _ = bits.Add64(x30, x26, x191)
  var x194 uint64
  var x195 uint64
  x194, x195 = bits.Add64(x71, x190, 0x0)
  var x196 uint64
  x196, _ = bits.Add64(x72, x192, x195)
  var x198 uint64
  var x199 uint64
  x198, x199 = bits.Add64(x83, x194, 0x0)
  var x200 uint64
  x200, _ = bits.Add64(x84, x196, x199)
  var x202 uint64
  var x203 uint64
  x202, x203 = bits.Add64(x97, x198, 0x0)
  var x204 uint64
  x204, _ = bits.Add64(x98, x200, x203)
  var x206 uint64
  var x207 uint64
  x206, x207 = bits.Add64(x31, x27, 0x0)
  var x208 uint64
  x208, _ = bits.Add64(x32, x28, x207)
  var x210 uint64
  var x211 uint64
  x210, x211 = bits.Add64(x37, x206, 0x0)
  var x212 uint64
  x212, _ = bits.Add64(x38, x208, x211)
  var x214 uint64
  var x215 uint64
  x214, x215 = bits.Add64(x85, x210, 0x0)
  var x216 uint64
  x216, _ = bits.Add64(x86, x212, x215)
  var x218 uint64
  var x219 uint64
  x218, x219 = bits.Add64(x99, x214, 0x0)
  var x220 uint64
  x220, _ = bits.Add64(x100, x216, x219)
  var x222 uint64
  var x223 uint64
  x222, x223 = bits.Add64(x39, x33, 0x0)
  var x224 uint64
  x224, _ = bits.Add64(x40, x34, x223)
  var x226 uint64
  var x227 uint64
  x226, x227 = bits.Add64(x47, x222, 0x0)
  var x228 uint64
  x228, _ = bits.Add64(x48, x224, x227)
  var x230 uint64
  var x231 uint64
  x230, x231 = bits.Add64(x87, x226, 0x0)
  var x232 uint64
  x232, _ = bits.Add64(x88, x228, x231)
  var x234 uint64
  var x235 uint64
  x234, x235 = bits.Add64(x101, x230, 0x0)
  var x236 uint64
  x236, _ = bits.Add64(x102, x232, x235)
  var x238 uint64
  var x239 uint64
  x238, x239 = bits.Add64(x41, x35, 0x0)
  var x240 uint64
  x240, _ = bits.Add64(x42, x36, x239)
  var x242 uint64
  var x243 uint64
  x242, x243 = bits.Add64(x49, x238, 0x0)
  var x244 uint64
  x244, _ = bits.Add64(x50, x240, x243)
  var x246 uint64
  var x247 uint64
  x246, x247 = bits.Add64(x59, x242, 0x0)
  var x248 uint64
  x248, _ = bits.Add64(x60, x244, x247)
  var x250 uint64
  var x251 uint64
  x250, x251 = bits.Add64(x103, x246, 0x0)
  var x252 uint64
  x252, _ = bits.Add64(x104, x248, x251)
  var x254 uint64
  var x255 uint64
  x254, x255 = bits.Add64(x123, x250, 0x0)
  var x256 uint64
  x256, _ = bits.Add64(x124, x252, x255)
  var x258 uint64 = ((x254 >> 58) | ((x256 << 6) & 0xffffffffffffffff))
  var x259 uint64 = (x256 >> 58)
  var x260 uint64 = (x254 & 0x3ffffffffffffff)
  var x261 uint64
  var x262 uint64
  x261, x262 = bits.Add64(x258, x234, 0x0)
  var x263 uint64
  x263, _ = bits.Add64(x259, x236, x262)
  var x265 uint64 = ((x261 >> 58) | ((x263 << 6) & 0xffffffffffffffff))
  var x266 uint64 = (x263 >> 58)
  var x267 uint64 = (x261 & 0x3ffffffffffffff)
  var x268 uint64
  var x269 uint64
  x268, x269 = bits.Add64(x265, x218, 0x0)
  var x270 uint64
  x270, _ = bits.Add64(x266, x220, x269)
  var x272 uint64 = ((x268 >> 58) | ((x270 << 6) & 0xffffffffffffffff))
  var x273 uint64 = (x270 >> 58)
  var x274 uint64 = (x268 & 0x3ffffffffffffff)
  var x275 uint64
  var x276 uint64
  x275, x276 = bits.Add64(x272, x202, 0x0)
  var x277 uint64
  x277, _ = bits.Add64(x273, x204, x276)
  var x279 uint64 = ((x275 >> 58) | ((x277 << 6) & 0xffffffffffffffff))
  var x280 uint64 = (x277 >> 58)
  var x281 uint64 = (x275 & 0x3ffffffffffffff)
  var x282 uint64
  var x283 uint64
  x282, x283 = bits.Add64(x279, x186, 0x0)
  var x284 uint64
  x284, _ = bits.Add64(x280, x188, x283)
  var x286 uint64 = ((x282 >> 58) | ((x284 << 6) & 0xffffffffffffffff))
  var x287 uint64 = (x284 >> 58)
  var x288 uint64 = (x282 & 0x3ffffffffffffff)
  var x289 uint64
  var x290 uint64
  x289, x290 = bits.Add64(x286, x170, 0x0)
  var x291 uint64
  x291, _ = bits.Add64(x287, x172, x290)
  var x293 uint64 = ((x289 >> 58) | ((x291 << 6) & 0xffffffffffffffff))
  var x294 uint64 = (x291 >> 58)
  var x295 uint64 = (x289 & 0x3ffffffffffffff)
  var x296 uint64
  var x297 uint64
  x296, x297 = bits.Add64(x293, x154, 0x0)
  var x298 uint64
  x298, _ = bits.Add64(x294, x156, x297)
  var x300 uint64 = ((x296 >> 58) | ((x298 << 6) & 0xffffffffffffffff))
  var x301 uint64 = (x298 >> 58)
  var x302 uint64 = (x296 & 0x3ffffffffffffff)
  var x303 uint64
  var x304 uint64
  x303, x304 = bits.Add64(x300, x138, 0x0)
  var x305 uint64
  x305, _ = bits.Add64(x301, x140, x304)
  var x307 uint64 = ((x303 >> 57) | ((x305 << 7) & 0xffffffffffffffff))
  var x308 uint64 = (x305 >> 57)
  var x309 uint64 = (x303 & 0x1ffffffffffffff)
  var x310 uint64
  var x311 uint64
  x310, x311 = bits.Add64(x125, x307, 0x0)
  var x312 uint64 = (x311 + x308)
  var x313 uint64 = ((x310 >> 58) | ((x312 << 6) & 0xffffffffffffffff))
  var x314 uint64 = (x310 & 0x3ffffffffffffff)
  var x315 uint64 = (x313 + x260)
  var x316 uint64 = (x315 >> 58)
  var x317 uint64 = (x315 & 0x3ffffffffffffff)
  var x318 uint64 = (x316 + x267)
  out1[0] = x314
  out1[1] = x317
  out1[2] = x318
  out1[3] = x274
  out1[4] = x281
  out1[5] = x288
  out1[6] = x295
  out1[7] = x302
  out1[8] = x309
}

/*
 * The function fiat_p521_carry reduces a field element.
 * Postconditions:
 *   eval out1 mod m = eval arg1 mod m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0x699999999999999]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x233333333333333]]
 */
/*inline*/
func fiat_p521_carry(out1 *[9]uint64, arg1 *[9]uint64) {
  var x1 uint64 = (arg1[0])
  var x2 uint64 = ((x1 >> 58) + (arg1[1]))
  var x3 uint64 = ((x2 >> 58) + (arg1[2]))
  var x4 uint64 = ((x3 >> 58) + (arg1[3]))
  var x5 uint64 = ((x4 >> 58) + (arg1[4]))
  var x6 uint64 = ((x5 >> 58) + (arg1[5]))
  var x7 uint64 = ((x6 >> 58) + (arg1[6]))
  var x8 uint64 = ((x7 >> 58) + (arg1[7]))
  var x9 uint64 = ((x8 >> 58) + (arg1[8]))
  var x10 uint64 = ((x1 & 0x3ffffffffffffff) + (x9 >> 57))
  var x11 uint64 = ((x10 >> 58) + (x2 & 0x3ffffffffffffff))
  var x12 uint64 = (x10 & 0x3ffffffffffffff)
  var x13 uint64 = (x11 & 0x3ffffffffffffff)
  var x14 uint64 = ((x11 >> 58) + (x3 & 0x3ffffffffffffff))
  var x15 uint64 = (x4 & 0x3ffffffffffffff)
  var x16 uint64 = (x5 & 0x3ffffffffffffff)
  var x17 uint64 = (x6 & 0x3ffffffffffffff)
  var x18 uint64 = (x7 & 0x3ffffffffffffff)
  var x19 uint64 = (x8 & 0x3ffffffffffffff)
  var x20 uint64 = (x9 & 0x1ffffffffffffff)
  out1[0] = x12
  out1[1] = x13
  out1[2] = x14
  out1[3] = x15
  out1[4] = x16
  out1[5] = x17
  out1[6] = x18
  out1[7] = x19
  out1[8] = x20
}

/*
 * The function fiat_p521_add adds two field elements.
 * Postconditions:
 *   eval out1 mod m = (eval arg1 + eval arg2) mod m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x233333333333333]]
 *   arg2: [[0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x233333333333333]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0x699999999999999]]
 */
/*inline*/
func fiat_p521_add(out1 *[9]uint64, arg1 *[9]uint64, arg2 *[9]uint64) {
  var x1 uint64 = ((arg1[0]) + (arg2[0]))
  var x2 uint64 = ((arg1[1]) + (arg2[1]))
  var x3 uint64 = ((arg1[2]) + (arg2[2]))
  var x4 uint64 = ((arg1[3]) + (arg2[3]))
  var x5 uint64 = ((arg1[4]) + (arg2[4]))
  var x6 uint64 = ((arg1[5]) + (arg2[5]))
  var x7 uint64 = ((arg1[6]) + (arg2[6]))
  var x8 uint64 = ((arg1[7]) + (arg2[7]))
  var x9 uint64 = ((arg1[8]) + (arg2[8]))
  out1[0] = x1
  out1[1] = x2
  out1[2] = x3
  out1[3] = x4
  out1[4] = x5
  out1[5] = x6
  out1[6] = x7
  out1[7] = x8
  out1[8] = x9
}

/*
 * The function fiat_p521_sub subtracts two field elements.
 * Postconditions:
 *   eval out1 mod m = (eval arg1 - eval arg2) mod m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x233333333333333]]
 *   arg2: [[0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x233333333333333]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0x699999999999999]]
 */
/*inline*/
func fiat_p521_sub(out1 *[9]uint64, arg1 *[9]uint64, arg2 *[9]uint64) {
  var x1 uint64 = ((0x7fffffffffffffe + (arg1[0])) - (arg2[0]))
  var x2 uint64 = ((0x7fffffffffffffe + (arg1[1])) - (arg2[1]))
  var x3 uint64 = ((0x7fffffffffffffe + (arg1[2])) - (arg2[2]))
  var x4 uint64 = ((0x7fffffffffffffe + (arg1[3])) - (arg2[3]))
  var x5 uint64 = ((0x7fffffffffffffe + (arg1[4])) - (arg2[4]))
  var x6 uint64 = ((0x7fffffffffffffe + (arg1[5])) - (arg2[5]))
  var x7 uint64 = ((0x7fffffffffffffe + (arg1[6])) - (arg2[6]))
  var x8 uint64 = ((0x7fffffffffffffe + (arg1[7])) - (arg2[7]))
  var x9 uint64 = ((0x3fffffffffffffe + (arg1[8])) - (arg2[8]))
  out1[0] = x1
  out1[1] = x2
  out1[2] = x3
  out1[3] = x4
  out1[4] = x5
  out1[5] = x6
  out1[6] = x7
  out1[7] = x8
  out1[8] = x9
}

/*
 * The function fiat_p521_opp negates a field element.
 * Postconditions:
 *   eval out1 mod m = -eval arg1 mod m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x233333333333333]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0xd33333333333332], [0x0 ~> 0x699999999999999]]
 */
/*inline*/
func fiat_p521_opp(out1 *[9]uint64, arg1 *[9]uint64) {
  var x1 uint64 = (0x7fffffffffffffe - (arg1[0]))
  var x2 uint64 = (0x7fffffffffffffe - (arg1[1]))
  var x3 uint64 = (0x7fffffffffffffe - (arg1[2]))
  var x4 uint64 = (0x7fffffffffffffe - (arg1[3]))
  var x5 uint64 = (0x7fffffffffffffe - (arg1[4]))
  var x6 uint64 = (0x7fffffffffffffe - (arg1[5]))
  var x7 uint64 = (0x7fffffffffffffe - (arg1[6]))
  var x8 uint64 = (0x7fffffffffffffe - (arg1[7]))
  var x9 uint64 = (0x3fffffffffffffe - (arg1[8]))
  out1[0] = x1
  out1[1] = x2
  out1[2] = x3
  out1[3] = x4
  out1[4] = x5
  out1[5] = x6
  out1[6] = x7
  out1[7] = x8
  out1[8] = x9
}

/*
 * The function fiat_p521_selectznz is a multi-limb conditional select.
 * Postconditions:
 *   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 *   arg3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
 */
/*inline*/
func fiat_p521_selectznz(out1 *[9]uint64, arg1 uint64, arg2 *[9]uint64, arg3 *[9]uint64) {
  var x1 uint64
  fiat_p521_cmovznz_u64(&x1, arg1, (arg2[0]), (arg3[0]))
  var x2 uint64
  fiat_p521_cmovznz_u64(&x2, arg1, (arg2[1]), (arg3[1]))
  var x3 uint64
  fiat_p521_cmovznz_u64(&x3, arg1, (arg2[2]), (arg3[2]))
  var x4 uint64
  fiat_p521_cmovznz_u64(&x4, arg1, (arg2[3]), (arg3[3]))
  var x5 uint64
  fiat_p521_cmovznz_u64(&x5, arg1, (arg2[4]), (arg3[4]))
  var x6 uint64
  fiat_p521_cmovznz_u64(&x6, arg1, (arg2[5]), (arg3[5]))
  var x7 uint64
  fiat_p521_cmovznz_u64(&x7, arg1, (arg2[6]), (arg3[6]))
  var x8 uint64
  fiat_p521_cmovznz_u64(&x8, arg1, (arg2[7]), (arg3[7]))
  var x9 uint64
  fiat_p521_cmovznz_u64(&x9, arg1, (arg2[8]), (arg3[8]))
  out1[0] = x1
  out1[1] = x2
  out1[2] = x3
  out1[3] = x4
  out1[4] = x5
  out1[5] = x6
  out1[6] = x7
  out1[7] = x8
  out1[8] = x9
}

/*
 * The function fiat_p521_to_bytes serializes a field element to bytes in little-endian order.
 * Postconditions:
 *   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..65]
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x233333333333333]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0x1]]
 */
/*inline*/
func fiat_p521_to_bytes(out1 *[66]uint64, arg1 *[9]uint64) {
  var x1 uint64
  var x2 uint64
  fiat_p521_subborrowx_u58(&x1, &x2, uint64(0x0), (arg1[0]), 0x3ffffffffffffff)
  var x3 uint64
  var x4 uint64
  fiat_p521_subborrowx_u58(&x3, &x4, x2, (arg1[1]), 0x3ffffffffffffff)
  var x5 uint64
  var x6 uint64
  fiat_p521_subborrowx_u58(&x5, &x6, x4, (arg1[2]), 0x3ffffffffffffff)
  var x7 uint64
  var x8 uint64
  fiat_p521_subborrowx_u58(&x7, &x8, x6, (arg1[3]), 0x3ffffffffffffff)
  var x9 uint64
  var x10 uint64
  fiat_p521_subborrowx_u58(&x9, &x10, x8, (arg1[4]), 0x3ffffffffffffff)
  var x11 uint64
  var x12 uint64
  fiat_p521_subborrowx_u58(&x11, &x12, x10, (arg1[5]), 0x3ffffffffffffff)
  var x13 uint64
  var x14 uint64
  fiat_p521_subborrowx_u58(&x13, &x14, x12, (arg1[6]), 0x3ffffffffffffff)
  var x15 uint64
  var x16 uint64
  fiat_p521_subborrowx_u58(&x15, &x16, x14, (arg1[7]), 0x3ffffffffffffff)
  var x17 uint64
  var x18 uint64
  fiat_p521_subborrowx_u57(&x17, &x18, x16, (arg1[8]), 0x1ffffffffffffff)
  var x19 uint64
  fiat_p521_cmovznz_u64(&x19, x18, uint64(0x0), 0xffffffffffffffff)
  var x20 uint64
  var x21 uint64
  fiat_p521_addcarryx_u58(&x20, &x21, 0x0, x1, (x19 & 0x3ffffffffffffff))
  var x22 uint64
  var x23 uint64
  fiat_p521_addcarryx_u58(&x22, &x23, x21, x3, (x19 & 0x3ffffffffffffff))
  var x24 uint64
  var x25 uint64
  fiat_p521_addcarryx_u58(&x24, &x25, x23, x5, (x19 & 0x3ffffffffffffff))
  var x26 uint64
  var x27 uint64
  fiat_p521_addcarryx_u58(&x26, &x27, x25, x7, (x19 & 0x3ffffffffffffff))
  var x28 uint64
  var x29 uint64
  fiat_p521_addcarryx_u58(&x28, &x29, x27, x9, (x19 & 0x3ffffffffffffff))
  var x30 uint64
  var x31 uint64
  fiat_p521_addcarryx_u58(&x30, &x31, x29, x11, (x19 & 0x3ffffffffffffff))
  var x32 uint64
  var x33 uint64
  fiat_p521_addcarryx_u58(&x32, &x33, x31, x13, (x19 & 0x3ffffffffffffff))
  var x34 uint64
  var x35 uint64
  fiat_p521_addcarryx_u58(&x34, &x35, x33, x15, (x19 & 0x3ffffffffffffff))
  var x36 uint64
  var x37 uint64
  fiat_p521_addcarryx_u57(&x36, &x37, x35, x17, (x19 & 0x1ffffffffffffff))
  var x38 uint64 = (x34 << 6)
  var x39 uint64 = (x32 << 4)
  var x40 uint64 = (x30 << 2)
  var x41 uint64 = (x26 << 6)
  var x42 uint64 = (x24 << 4)
  var x43 uint64 = (x22 << 2)
  var x44 uint64 = (x20 >> 8)
  var x45 uint64 = (x20 & 0xff)
  var x46 uint64 = (x44 >> 8)
  var x47 uint64 = (x44 & 0xff)
  var x48 uint64 = (x46 >> 8)
  var x49 uint64 = (x46 & 0xff)
  var x50 uint64 = (x48 >> 8)
  var x51 uint64 = (x48 & 0xff)
  var x52 uint64 = (x50 >> 8)
  var x53 uint64 = (x50 & 0xff)
  var x54 uint64 = (x52 >> 8)
  var x55 uint64 = (x52 & 0xff)
  var x56 uint64 = (x54 >> 8)
  var x57 uint64 = (x54 & 0xff)
  var x58 uint64 = (x56 + x43)
  var x59 uint64 = (x58 >> 8)
  var x60 uint64 = (x58 & 0xff)
  var x61 uint64 = (x59 >> 8)
  var x62 uint64 = (x59 & 0xff)
  var x63 uint64 = (x61 >> 8)
  var x64 uint64 = (x61 & 0xff)
  var x65 uint64 = (x63 >> 8)
  var x66 uint64 = (x63 & 0xff)
  var x67 uint64 = (x65 >> 8)
  var x68 uint64 = (x65 & 0xff)
  var x69 uint64 = (x67 >> 8)
  var x70 uint64 = (x67 & 0xff)
  var x71 uint64 = (x69 >> 8)
  var x72 uint64 = (x69 & 0xff)
  var x73 uint64 = (x71 + x42)
  var x74 uint64 = (x73 >> 8)
  var x75 uint64 = (x73 & 0xff)
  var x76 uint64 = (x74 >> 8)
  var x77 uint64 = (x74 & 0xff)
  var x78 uint64 = (x76 >> 8)
  var x79 uint64 = (x76 & 0xff)
  var x80 uint64 = (x78 >> 8)
  var x81 uint64 = (x78 & 0xff)
  var x82 uint64 = (x80 >> 8)
  var x83 uint64 = (x80 & 0xff)
  var x84 uint64 = (x82 >> 8)
  var x85 uint64 = (x82 & 0xff)
  var x86 uint64 = (x84 >> 8)
  var x87 uint64 = (x84 & 0xff)
  var x88 uint64 = (x86 + x41)
  var x89 uint64 = (x88 >> 8)
  var x90 uint64 = (x88 & 0xff)
  var x91 uint64 = (x89 >> 8)
  var x92 uint64 = (x89 & 0xff)
  var x93 uint64 = (x91 >> 8)
  var x94 uint64 = (x91 & 0xff)
  var x95 uint64 = (x93 >> 8)
  var x96 uint64 = (x93 & 0xff)
  var x97 uint64 = (x95 >> 8)
  var x98 uint64 = (x95 & 0xff)
  var x99 uint64 = (x97 >> 8)
  var x100 uint64 = (x97 & 0xff)
  var x101 uint64 = (x99 >> 8)
  var x102 uint64 = (x99 & 0xff)
  var x103 uint64 = (x101 & 0xff)
  var x104 uint64 = (x28 >> 8)
  var x105 uint64 = (x28 & 0xff)
  var x106 uint64 = (x104 >> 8)
  var x107 uint64 = (x104 & 0xff)
  var x108 uint64 = (x106 >> 8)
  var x109 uint64 = (x106 & 0xff)
  var x110 uint64 = (x108 >> 8)
  var x111 uint64 = (x108 & 0xff)
  var x112 uint64 = (x110 >> 8)
  var x113 uint64 = (x110 & 0xff)
  var x114 uint64 = (x112 >> 8)
  var x115 uint64 = (x112 & 0xff)
  var x116 uint64 = (x114 >> 8)
  var x117 uint64 = (x114 & 0xff)
  var x118 uint64 = (x116 + x40)
  var x119 uint64 = (x118 >> 8)
  var x120 uint64 = (x118 & 0xff)
  var x121 uint64 = (x119 >> 8)
  var x122 uint64 = (x119 & 0xff)
  var x123 uint64 = (x121 >> 8)
  var x124 uint64 = (x121 & 0xff)
  var x125 uint64 = (x123 >> 8)
  var x126 uint64 = (x123 & 0xff)
  var x127 uint64 = (x125 >> 8)
  var x128 uint64 = (x125 & 0xff)
  var x129 uint64 = (x127 >> 8)
  var x130 uint64 = (x127 & 0xff)
  var x131 uint64 = (x129 >> 8)
  var x132 uint64 = (x129 & 0xff)
  var x133 uint64 = (x131 + x39)
  var x134 uint64 = (x133 >> 8)
  var x135 uint64 = (x133 & 0xff)
  var x136 uint64 = (x134 >> 8)
  var x137 uint64 = (x134 & 0xff)
  var x138 uint64 = (x136 >> 8)
  var x139 uint64 = (x136 & 0xff)
  var x140 uint64 = (x138 >> 8)
  var x141 uint64 = (x138 & 0xff)
  var x142 uint64 = (x140 >> 8)
  var x143 uint64 = (x140 & 0xff)
  var x144 uint64 = (x142 >> 8)
  var x145 uint64 = (x142 & 0xff)
  var x146 uint64 = (x144 >> 8)
  var x147 uint64 = (x144 & 0xff)
  var x148 uint64 = (x146 + x38)
  var x149 uint64 = (x148 >> 8)
  var x150 uint64 = (x148 & 0xff)
  var x151 uint64 = (x149 >> 8)
  var x152 uint64 = (x149 & 0xff)
  var x153 uint64 = (x151 >> 8)
  var x154 uint64 = (x151 & 0xff)
  var x155 uint64 = (x153 >> 8)
  var x156 uint64 = (x153 & 0xff)
  var x157 uint64 = (x155 >> 8)
  var x158 uint64 = (x155 & 0xff)
  var x159 uint64 = (x157 >> 8)
  var x160 uint64 = (x157 & 0xff)
  var x161 uint64 = (x159 >> 8)
  var x162 uint64 = (x159 & 0xff)
  var x163 uint64 = (x161 & 0xff)
  var x164 uint64 = (x36 >> 8)
  var x165 uint64 = (x36 & 0xff)
  var x166 uint64 = (x164 >> 8)
  var x167 uint64 = (x164 & 0xff)
  var x168 uint64 = (x166 >> 8)
  var x169 uint64 = (x166 & 0xff)
  var x170 uint64 = (x168 >> 8)
  var x171 uint64 = (x168 & 0xff)
  var x172 uint64 = (x170 >> 8)
  var x173 uint64 = (x170 & 0xff)
  var x174 uint64 = (x172 >> 8)
  var x175 uint64 = (x172 & 0xff)
  var x176 uint64 = (x174 >> 8)
  var x177 uint64 = (x174 & 0xff)
  out1[0] = x45
  out1[1] = x47
  out1[2] = x49
  out1[3] = x51
  out1[4] = x53
  out1[5] = x55
  out1[6] = x57
  out1[7] = x60
  out1[8] = x62
  out1[9] = x64
  out1[10] = x66
  out1[11] = x68
  out1[12] = x70
  out1[13] = x72
  out1[14] = x75
  out1[15] = x77
  out1[16] = x79
  out1[17] = x81
  out1[18] = x83
  out1[19] = x85
  out1[20] = x87
  out1[21] = x90
  out1[22] = x92
  out1[23] = x94
  out1[24] = x96
  out1[25] = x98
  out1[26] = x100
  out1[27] = x102
  out1[28] = x103
  out1[29] = x105
  out1[30] = x107
  out1[31] = x109
  out1[32] = x111
  out1[33] = x113
  out1[34] = x115
  out1[35] = x117
  out1[36] = x120
  out1[37] = x122
  out1[38] = x124
  out1[39] = x126
  out1[40] = x128
  out1[41] = x130
  out1[42] = x132
  out1[43] = x135
  out1[44] = x137
  out1[45] = x139
  out1[46] = x141
  out1[47] = x143
  out1[48] = x145
  out1[49] = x147
  out1[50] = x150
  out1[51] = x152
  out1[52] = x154
  out1[53] = x156
  out1[54] = x158
  out1[55] = x160
  out1[56] = x162
  out1[57] = x163
  out1[58] = x165
  out1[59] = x167
  out1[60] = x169
  out1[61] = x171
  out1[62] = x173
  out1[63] = x175
  out1[64] = x177
  out1[65] = x176
}

/*
 * The function fiat_p521_from_bytes deserializes a field element from bytes in little-endian order.
 * Postconditions:
 *   eval out1 mod m = bytes_eval arg1 mod m
 *
 * Input Bounds:
 *   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0x1]]
 * Output Bounds:
 *   out1: [[0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x466666666666666], [0x0 ~> 0x233333333333333]]
 */
/*inline*/
func fiat_p521_from_bytes(out1 *[9]uint64, arg1 *[66]uint64) {
  var x1 uint64 = ((arg1[65]) << 56)
  var x2 uint64 = ((arg1[64]) << 48)
  var x3 uint64 = ((arg1[63]) << 40)
  var x4 uint64 = ((arg1[62]) << 32)
  var x5 uint64 = ((arg1[61]) << 24)
  var x6 uint64 = ((arg1[60]) << 16)
  var x7 uint64 = ((arg1[59]) << 8)
  var x8 uint64 = (arg1[58])
  var x9 uint64 = ((arg1[57]) << 50)
  var x10 uint64 = ((arg1[56]) << 42)
  var x11 uint64 = ((arg1[55]) << 34)
  var x12 uint64 = ((arg1[54]) << 26)
  var x13 uint64 = ((arg1[53]) << 18)
  var x14 uint64 = ((arg1[52]) << 10)
  var x15 uint64 = ((arg1[51]) << 2)
  var x16 uint64 = ((arg1[50]) << 52)
  var x17 uint64 = ((arg1[49]) << 44)
  var x18 uint64 = ((arg1[48]) << 36)
  var x19 uint64 = ((arg1[47]) << 28)
  var x20 uint64 = ((arg1[46]) << 20)
  var x21 uint64 = ((arg1[45]) << 12)
  var x22 uint64 = ((arg1[44]) << 4)
  var x23 uint64 = ((arg1[43]) << 54)
  var x24 uint64 = ((arg1[42]) << 46)
  var x25 uint64 = ((arg1[41]) << 38)
  var x26 uint64 = ((arg1[40]) << 30)
  var x27 uint64 = ((arg1[39]) << 22)
  var x28 uint64 = ((arg1[38]) << 14)
  var x29 uint64 = ((arg1[37]) << 6)
  var x30 uint64 = ((arg1[36]) << 56)
  var x31 uint64 = ((arg1[35]) << 48)
  var x32 uint64 = ((arg1[34]) << 40)
  var x33 uint64 = ((arg1[33]) << 32)
  var x34 uint64 = ((arg1[32]) << 24)
  var x35 uint64 = ((arg1[31]) << 16)
  var x36 uint64 = ((arg1[30]) << 8)
  var x37 uint64 = (arg1[29])
  var x38 uint64 = ((arg1[28]) << 50)
  var x39 uint64 = ((arg1[27]) << 42)
  var x40 uint64 = ((arg1[26]) << 34)
  var x41 uint64 = ((arg1[25]) << 26)
  var x42 uint64 = ((arg1[24]) << 18)
  var x43 uint64 = ((arg1[23]) << 10)
  var x44 uint64 = ((arg1[22]) << 2)
  var x45 uint64 = ((arg1[21]) << 52)
  var x46 uint64 = ((arg1[20]) << 44)
  var x47 uint64 = ((arg1[19]) << 36)
  var x48 uint64 = ((arg1[18]) << 28)
  var x49 uint64 = ((arg1[17]) << 20)
  var x50 uint64 = ((arg1[16]) << 12)
  var x51 uint64 = ((arg1[15]) << 4)
  var x52 uint64 = ((arg1[14]) << 54)
  var x53 uint64 = ((arg1[13]) << 46)
  var x54 uint64 = ((arg1[12]) << 38)
  var x55 uint64 = ((arg1[11]) << 30)
  var x56 uint64 = ((arg1[10]) << 22)
  var x57 uint64 = ((arg1[9]) << 14)
  var x58 uint64 = ((arg1[8]) << 6)
  var x59 uint64 = ((arg1[7]) << 56)
  var x60 uint64 = ((arg1[6]) << 48)
  var x61 uint64 = ((arg1[5]) << 40)
  var x62 uint64 = ((arg1[4]) << 32)
  var x63 uint64 = ((arg1[3]) << 24)
  var x64 uint64 = ((arg1[2]) << 16)
  var x65 uint64 = ((arg1[1]) << 8)
  var x66 uint64 = (arg1[0])
  var x67 uint64 = (x66 + (x65 + (x64 + (x63 + (x62 + (x61 + (x60 + x59)))))))
  var x68 uint64 = (x67 >> 58)
  var x69 uint64 = (x67 & 0x3ffffffffffffff)
  var x70 uint64 = (x8 + (x7 + (x6 + (x5 + (x4 + (x3 + (x2 + x1)))))))
  var x71 uint64 = (x15 + (x14 + (x13 + (x12 + (x11 + (x10 + x9))))))
  var x72 uint64 = (x22 + (x21 + (x20 + (x19 + (x18 + (x17 + x16))))))
  var x73 uint64 = (x29 + (x28 + (x27 + (x26 + (x25 + (x24 + x23))))))
  var x74 uint64 = (x37 + (x36 + (x35 + (x34 + (x33 + (x32 + (x31 + x30)))))))
  var x75 uint64 = (x44 + (x43 + (x42 + (x41 + (x40 + (x39 + x38))))))
  var x76 uint64 = (x51 + (x50 + (x49 + (x48 + (x47 + (x46 + x45))))))
  var x77 uint64 = (x58 + (x57 + (x56 + (x55 + (x54 + (x53 + x52))))))
  var x78 uint64 = (x68 + x77)
  var x79 uint64 = (x78 >> 58)
  var x80 uint64 = (x78 & 0x3ffffffffffffff)
  var x81 uint64 = (x79 + x76)
  var x82 uint64 = (x81 >> 58)
  var x83 uint64 = (x81 & 0x3ffffffffffffff)
  var x84 uint64 = (x82 + x75)
  var x85 uint64 = (x84 & 0x3ffffffffffffff)
  var x86 uint64 = (x74 >> 58)
  var x87 uint64 = (x74 & 0x3ffffffffffffff)
  var x88 uint64 = (x86 + x73)
  var x89 uint64 = (x88 >> 58)
  var x90 uint64 = (x88 & 0x3ffffffffffffff)
  var x91 uint64 = (x89 + x72)
  var x92 uint64 = (x91 >> 58)
  var x93 uint64 = (x91 & 0x3ffffffffffffff)
  var x94 uint64 = (x92 + x71)
  var x95 uint64 = (x94 & 0x3ffffffffffffff)
  out1[0] = x69
  out1[1] = x80
  out1[2] = x83
  out1[3] = x85
  out1[4] = x87
  out1[5] = x90
  out1[6] = x93
  out1[7] = x95
  out1[8] = x70
}

