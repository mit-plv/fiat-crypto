// Code generated by Fiat Cryptography. DO NOT EDIT.
//
// Autogenerated: 'src/ExtractionOCaml/word_by_word_montgomery' --lang Go --relax-primitive-carry-to-bitwidth 32,64 --cmovznz-by-mul --internal-static --package-case flatcase --public-function-case UpperCamelCase --private-function-case camelCase --public-type-case UpperCamelCase --private-type-case camelCase --no-prefix-fiat --doc-newline-in-typedef-bounds --doc-prepend-header 'Code generated by Fiat Cryptography. DO NOT EDIT.' --doc-text-before-function-name '' --doc-text-before-type-name '' --package-name secp256k1scalar '' 32 '2^256 - 432420386565659656852420866394968145599' mul square add sub opp from_montgomery to_montgomery nonzero selectznz to_bytes from_bytes one msat divstep divstep_precomp
//
// curve description (via package name): secp256k1scalar
//
// machine_wordsize = 32 (from "32")
//
// requested operations: mul, square, add, sub, opp, from_montgomery, to_montgomery, nonzero, selectznz, to_bytes, from_bytes, one, msat, divstep, divstep_precomp
//
// m = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141 (from "2^256 - 432420386565659656852420866394968145599")
//
//
//
// NOTE: In addition to the bounds specified above each function, all
//
//   functions synthesized for this Montgomery arithmetic require the
//
//   input to be strictly less than the prime modulus (m), and also
//
//   require the input to be in the unique saturated representation.
//
//   All functions also ensure that these two properties are true of
//
//   return values.
//
//
//
// Computed values:
//
//   eval z = z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192) + (z[7] << 224)
//
//   bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17] << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168) + (z[22] << 176) + (z[23] << 184) + (z[24] << 192) + (z[25] << 200) + (z[26] << 208) + (z[27] << 216) + (z[28] << 224) + (z[29] << 232) + (z[30] << 240) + (z[31] << 248)
//
//   twos_complement_eval z = let x1 := z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192) + (z[7] << 224) in
//
//                            if x1 & (2^256-1) < 2^255 then x1 & (2^256-1) else (x1 & (2^256-1)) - 2^256
package secp256k1scalar

import "math/bits"

type uint1 uint64 // We use uint64 instead of a more narrow type for performance reasons; see https://github.com/mit-plv/fiat-crypto/pull/1006#issuecomment-892625927
type int1 int64 // We use uint64 instead of a more narrow type for performance reasons; see https://github.com/mit-plv/fiat-crypto/pull/1006#issuecomment-892625927

// MontgomeryDomainFieldElement is a field element in the Montgomery domain.
//
// Bounds:
//
//   [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
type MontgomeryDomainFieldElement [8]uint32

// NonMontgomeryDomainFieldElement is a field element NOT in the Montgomery domain.
//
// Bounds:
//
//   [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
type NonMontgomeryDomainFieldElement [8]uint32

// cmovznzU32 is a single-word conditional move.
//
// Postconditions:
//   out1 = (if arg1 = 0 then arg2 else arg3)
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [0x0 ~> 0xffffffff]
//   arg3: [0x0 ~> 0xffffffff]
// Output Bounds:
//   out1: [0x0 ~> 0xffffffff]
func cmovznzU32(out1 *uint32, arg1 uint1, arg2 uint32, arg3 uint32) {
	x1 := (uint32(arg1) * 0xffffffff)
	x2 := ((x1 & arg3) | ((^x1) & arg2))
	*out1 = x2
}

// Mul multiplies two field elements in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
//   0 ≤ eval arg2 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
//   0 ≤ eval out1 < m
//
func Mul(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement, arg2 *MontgomeryDomainFieldElement) {
	x1 := arg1[1]
	x2 := arg1[2]
	x3 := arg1[3]
	x4 := arg1[4]
	x5 := arg1[5]
	x6 := arg1[6]
	x7 := arg1[7]
	x8 := arg1[0]
	var x9 uint32
	var x10 uint32
	x10, x9 = bits.Mul32(x8, arg2[7])
	var x11 uint32
	var x12 uint32
	x12, x11 = bits.Mul32(x8, arg2[6])
	var x13 uint32
	var x14 uint32
	x14, x13 = bits.Mul32(x8, arg2[5])
	var x15 uint32
	var x16 uint32
	x16, x15 = bits.Mul32(x8, arg2[4])
	var x17 uint32
	var x18 uint32
	x18, x17 = bits.Mul32(x8, arg2[3])
	var x19 uint32
	var x20 uint32
	x20, x19 = bits.Mul32(x8, arg2[2])
	var x21 uint32
	var x22 uint32
	x22, x21 = bits.Mul32(x8, arg2[1])
	var x23 uint32
	var x24 uint32
	x24, x23 = bits.Mul32(x8, arg2[0])
	var x25 uint32
	var x26 uint32
	x25, x26 = bits.Add32(x24, x21, uint32(0x0))
	var x27 uint32
	var x28 uint32
	x27, x28 = bits.Add32(x22, x19, uint32(uint1(x26)))
	var x29 uint32
	var x30 uint32
	x29, x30 = bits.Add32(x20, x17, uint32(uint1(x28)))
	var x31 uint32
	var x32 uint32
	x31, x32 = bits.Add32(x18, x15, uint32(uint1(x30)))
	var x33 uint32
	var x34 uint32
	x33, x34 = bits.Add32(x16, x13, uint32(uint1(x32)))
	var x35 uint32
	var x36 uint32
	x35, x36 = bits.Add32(x14, x11, uint32(uint1(x34)))
	var x37 uint32
	var x38 uint32
	x37, x38 = bits.Add32(x12, x9, uint32(uint1(x36)))
	x39 := (uint32(uint1(x38)) + x10)
	var x40 uint32
	_, x40 = bits.Mul32(x23, 0x5588b13f)
	var x42 uint32
	var x43 uint32
	x43, x42 = bits.Mul32(x40, 0xffffffff)
	var x44 uint32
	var x45 uint32
	x45, x44 = bits.Mul32(x40, 0xffffffff)
	var x46 uint32
	var x47 uint32
	x47, x46 = bits.Mul32(x40, 0xffffffff)
	var x48 uint32
	var x49 uint32
	x49, x48 = bits.Mul32(x40, 0xfffffffe)
	var x50 uint32
	var x51 uint32
	x51, x50 = bits.Mul32(x40, 0xbaaedce6)
	var x52 uint32
	var x53 uint32
	x53, x52 = bits.Mul32(x40, 0xaf48a03b)
	var x54 uint32
	var x55 uint32
	x55, x54 = bits.Mul32(x40, 0xbfd25e8c)
	var x56 uint32
	var x57 uint32
	x57, x56 = bits.Mul32(x40, 0xd0364141)
	var x58 uint32
	var x59 uint32
	x58, x59 = bits.Add32(x57, x54, uint32(0x0))
	var x60 uint32
	var x61 uint32
	x60, x61 = bits.Add32(x55, x52, uint32(uint1(x59)))
	var x62 uint32
	var x63 uint32
	x62, x63 = bits.Add32(x53, x50, uint32(uint1(x61)))
	var x64 uint32
	var x65 uint32
	x64, x65 = bits.Add32(x51, x48, uint32(uint1(x63)))
	var x66 uint32
	var x67 uint32
	x66, x67 = bits.Add32(x49, x46, uint32(uint1(x65)))
	var x68 uint32
	var x69 uint32
	x68, x69 = bits.Add32(x47, x44, uint32(uint1(x67)))
	var x70 uint32
	var x71 uint32
	x70, x71 = bits.Add32(x45, x42, uint32(uint1(x69)))
	x72 := (uint32(uint1(x71)) + x43)
	var x74 uint32
	_, x74 = bits.Add32(x23, x56, uint32(0x0))
	var x75 uint32
	var x76 uint32
	x75, x76 = bits.Add32(x25, x58, uint32(uint1(x74)))
	var x77 uint32
	var x78 uint32
	x77, x78 = bits.Add32(x27, x60, uint32(uint1(x76)))
	var x79 uint32
	var x80 uint32
	x79, x80 = bits.Add32(x29, x62, uint32(uint1(x78)))
	var x81 uint32
	var x82 uint32
	x81, x82 = bits.Add32(x31, x64, uint32(uint1(x80)))
	var x83 uint32
	var x84 uint32
	x83, x84 = bits.Add32(x33, x66, uint32(uint1(x82)))
	var x85 uint32
	var x86 uint32
	x85, x86 = bits.Add32(x35, x68, uint32(uint1(x84)))
	var x87 uint32
	var x88 uint32
	x87, x88 = bits.Add32(x37, x70, uint32(uint1(x86)))
	var x89 uint32
	var x90 uint32
	x89, x90 = bits.Add32(x39, x72, uint32(uint1(x88)))
	var x91 uint32
	var x92 uint32
	x92, x91 = bits.Mul32(x1, arg2[7])
	var x93 uint32
	var x94 uint32
	x94, x93 = bits.Mul32(x1, arg2[6])
	var x95 uint32
	var x96 uint32
	x96, x95 = bits.Mul32(x1, arg2[5])
	var x97 uint32
	var x98 uint32
	x98, x97 = bits.Mul32(x1, arg2[4])
	var x99 uint32
	var x100 uint32
	x100, x99 = bits.Mul32(x1, arg2[3])
	var x101 uint32
	var x102 uint32
	x102, x101 = bits.Mul32(x1, arg2[2])
	var x103 uint32
	var x104 uint32
	x104, x103 = bits.Mul32(x1, arg2[1])
	var x105 uint32
	var x106 uint32
	x106, x105 = bits.Mul32(x1, arg2[0])
	var x107 uint32
	var x108 uint32
	x107, x108 = bits.Add32(x106, x103, uint32(0x0))
	var x109 uint32
	var x110 uint32
	x109, x110 = bits.Add32(x104, x101, uint32(uint1(x108)))
	var x111 uint32
	var x112 uint32
	x111, x112 = bits.Add32(x102, x99, uint32(uint1(x110)))
	var x113 uint32
	var x114 uint32
	x113, x114 = bits.Add32(x100, x97, uint32(uint1(x112)))
	var x115 uint32
	var x116 uint32
	x115, x116 = bits.Add32(x98, x95, uint32(uint1(x114)))
	var x117 uint32
	var x118 uint32
	x117, x118 = bits.Add32(x96, x93, uint32(uint1(x116)))
	var x119 uint32
	var x120 uint32
	x119, x120 = bits.Add32(x94, x91, uint32(uint1(x118)))
	x121 := (uint32(uint1(x120)) + x92)
	var x122 uint32
	var x123 uint32
	x122, x123 = bits.Add32(x75, x105, uint32(0x0))
	var x124 uint32
	var x125 uint32
	x124, x125 = bits.Add32(x77, x107, uint32(uint1(x123)))
	var x126 uint32
	var x127 uint32
	x126, x127 = bits.Add32(x79, x109, uint32(uint1(x125)))
	var x128 uint32
	var x129 uint32
	x128, x129 = bits.Add32(x81, x111, uint32(uint1(x127)))
	var x130 uint32
	var x131 uint32
	x130, x131 = bits.Add32(x83, x113, uint32(uint1(x129)))
	var x132 uint32
	var x133 uint32
	x132, x133 = bits.Add32(x85, x115, uint32(uint1(x131)))
	var x134 uint32
	var x135 uint32
	x134, x135 = bits.Add32(x87, x117, uint32(uint1(x133)))
	var x136 uint32
	var x137 uint32
	x136, x137 = bits.Add32(x89, x119, uint32(uint1(x135)))
	var x138 uint32
	var x139 uint32
	x138, x139 = bits.Add32(uint32(uint1(x90)), x121, uint32(uint1(x137)))
	var x140 uint32
	_, x140 = bits.Mul32(x122, 0x5588b13f)
	var x142 uint32
	var x143 uint32
	x143, x142 = bits.Mul32(x140, 0xffffffff)
	var x144 uint32
	var x145 uint32
	x145, x144 = bits.Mul32(x140, 0xffffffff)
	var x146 uint32
	var x147 uint32
	x147, x146 = bits.Mul32(x140, 0xffffffff)
	var x148 uint32
	var x149 uint32
	x149, x148 = bits.Mul32(x140, 0xfffffffe)
	var x150 uint32
	var x151 uint32
	x151, x150 = bits.Mul32(x140, 0xbaaedce6)
	var x152 uint32
	var x153 uint32
	x153, x152 = bits.Mul32(x140, 0xaf48a03b)
	var x154 uint32
	var x155 uint32
	x155, x154 = bits.Mul32(x140, 0xbfd25e8c)
	var x156 uint32
	var x157 uint32
	x157, x156 = bits.Mul32(x140, 0xd0364141)
	var x158 uint32
	var x159 uint32
	x158, x159 = bits.Add32(x157, x154, uint32(0x0))
	var x160 uint32
	var x161 uint32
	x160, x161 = bits.Add32(x155, x152, uint32(uint1(x159)))
	var x162 uint32
	var x163 uint32
	x162, x163 = bits.Add32(x153, x150, uint32(uint1(x161)))
	var x164 uint32
	var x165 uint32
	x164, x165 = bits.Add32(x151, x148, uint32(uint1(x163)))
	var x166 uint32
	var x167 uint32
	x166, x167 = bits.Add32(x149, x146, uint32(uint1(x165)))
	var x168 uint32
	var x169 uint32
	x168, x169 = bits.Add32(x147, x144, uint32(uint1(x167)))
	var x170 uint32
	var x171 uint32
	x170, x171 = bits.Add32(x145, x142, uint32(uint1(x169)))
	x172 := (uint32(uint1(x171)) + x143)
	var x174 uint32
	_, x174 = bits.Add32(x122, x156, uint32(0x0))
	var x175 uint32
	var x176 uint32
	x175, x176 = bits.Add32(x124, x158, uint32(uint1(x174)))
	var x177 uint32
	var x178 uint32
	x177, x178 = bits.Add32(x126, x160, uint32(uint1(x176)))
	var x179 uint32
	var x180 uint32
	x179, x180 = bits.Add32(x128, x162, uint32(uint1(x178)))
	var x181 uint32
	var x182 uint32
	x181, x182 = bits.Add32(x130, x164, uint32(uint1(x180)))
	var x183 uint32
	var x184 uint32
	x183, x184 = bits.Add32(x132, x166, uint32(uint1(x182)))
	var x185 uint32
	var x186 uint32
	x185, x186 = bits.Add32(x134, x168, uint32(uint1(x184)))
	var x187 uint32
	var x188 uint32
	x187, x188 = bits.Add32(x136, x170, uint32(uint1(x186)))
	var x189 uint32
	var x190 uint32
	x189, x190 = bits.Add32(x138, x172, uint32(uint1(x188)))
	x191 := (uint32(uint1(x190)) + uint32(uint1(x139)))
	var x192 uint32
	var x193 uint32
	x193, x192 = bits.Mul32(x2, arg2[7])
	var x194 uint32
	var x195 uint32
	x195, x194 = bits.Mul32(x2, arg2[6])
	var x196 uint32
	var x197 uint32
	x197, x196 = bits.Mul32(x2, arg2[5])
	var x198 uint32
	var x199 uint32
	x199, x198 = bits.Mul32(x2, arg2[4])
	var x200 uint32
	var x201 uint32
	x201, x200 = bits.Mul32(x2, arg2[3])
	var x202 uint32
	var x203 uint32
	x203, x202 = bits.Mul32(x2, arg2[2])
	var x204 uint32
	var x205 uint32
	x205, x204 = bits.Mul32(x2, arg2[1])
	var x206 uint32
	var x207 uint32
	x207, x206 = bits.Mul32(x2, arg2[0])
	var x208 uint32
	var x209 uint32
	x208, x209 = bits.Add32(x207, x204, uint32(0x0))
	var x210 uint32
	var x211 uint32
	x210, x211 = bits.Add32(x205, x202, uint32(uint1(x209)))
	var x212 uint32
	var x213 uint32
	x212, x213 = bits.Add32(x203, x200, uint32(uint1(x211)))
	var x214 uint32
	var x215 uint32
	x214, x215 = bits.Add32(x201, x198, uint32(uint1(x213)))
	var x216 uint32
	var x217 uint32
	x216, x217 = bits.Add32(x199, x196, uint32(uint1(x215)))
	var x218 uint32
	var x219 uint32
	x218, x219 = bits.Add32(x197, x194, uint32(uint1(x217)))
	var x220 uint32
	var x221 uint32
	x220, x221 = bits.Add32(x195, x192, uint32(uint1(x219)))
	x222 := (uint32(uint1(x221)) + x193)
	var x223 uint32
	var x224 uint32
	x223, x224 = bits.Add32(x175, x206, uint32(0x0))
	var x225 uint32
	var x226 uint32
	x225, x226 = bits.Add32(x177, x208, uint32(uint1(x224)))
	var x227 uint32
	var x228 uint32
	x227, x228 = bits.Add32(x179, x210, uint32(uint1(x226)))
	var x229 uint32
	var x230 uint32
	x229, x230 = bits.Add32(x181, x212, uint32(uint1(x228)))
	var x231 uint32
	var x232 uint32
	x231, x232 = bits.Add32(x183, x214, uint32(uint1(x230)))
	var x233 uint32
	var x234 uint32
	x233, x234 = bits.Add32(x185, x216, uint32(uint1(x232)))
	var x235 uint32
	var x236 uint32
	x235, x236 = bits.Add32(x187, x218, uint32(uint1(x234)))
	var x237 uint32
	var x238 uint32
	x237, x238 = bits.Add32(x189, x220, uint32(uint1(x236)))
	var x239 uint32
	var x240 uint32
	x239, x240 = bits.Add32(x191, x222, uint32(uint1(x238)))
	var x241 uint32
	_, x241 = bits.Mul32(x223, 0x5588b13f)
	var x243 uint32
	var x244 uint32
	x244, x243 = bits.Mul32(x241, 0xffffffff)
	var x245 uint32
	var x246 uint32
	x246, x245 = bits.Mul32(x241, 0xffffffff)
	var x247 uint32
	var x248 uint32
	x248, x247 = bits.Mul32(x241, 0xffffffff)
	var x249 uint32
	var x250 uint32
	x250, x249 = bits.Mul32(x241, 0xfffffffe)
	var x251 uint32
	var x252 uint32
	x252, x251 = bits.Mul32(x241, 0xbaaedce6)
	var x253 uint32
	var x254 uint32
	x254, x253 = bits.Mul32(x241, 0xaf48a03b)
	var x255 uint32
	var x256 uint32
	x256, x255 = bits.Mul32(x241, 0xbfd25e8c)
	var x257 uint32
	var x258 uint32
	x258, x257 = bits.Mul32(x241, 0xd0364141)
	var x259 uint32
	var x260 uint32
	x259, x260 = bits.Add32(x258, x255, uint32(0x0))
	var x261 uint32
	var x262 uint32
	x261, x262 = bits.Add32(x256, x253, uint32(uint1(x260)))
	var x263 uint32
	var x264 uint32
	x263, x264 = bits.Add32(x254, x251, uint32(uint1(x262)))
	var x265 uint32
	var x266 uint32
	x265, x266 = bits.Add32(x252, x249, uint32(uint1(x264)))
	var x267 uint32
	var x268 uint32
	x267, x268 = bits.Add32(x250, x247, uint32(uint1(x266)))
	var x269 uint32
	var x270 uint32
	x269, x270 = bits.Add32(x248, x245, uint32(uint1(x268)))
	var x271 uint32
	var x272 uint32
	x271, x272 = bits.Add32(x246, x243, uint32(uint1(x270)))
	x273 := (uint32(uint1(x272)) + x244)
	var x275 uint32
	_, x275 = bits.Add32(x223, x257, uint32(0x0))
	var x276 uint32
	var x277 uint32
	x276, x277 = bits.Add32(x225, x259, uint32(uint1(x275)))
	var x278 uint32
	var x279 uint32
	x278, x279 = bits.Add32(x227, x261, uint32(uint1(x277)))
	var x280 uint32
	var x281 uint32
	x280, x281 = bits.Add32(x229, x263, uint32(uint1(x279)))
	var x282 uint32
	var x283 uint32
	x282, x283 = bits.Add32(x231, x265, uint32(uint1(x281)))
	var x284 uint32
	var x285 uint32
	x284, x285 = bits.Add32(x233, x267, uint32(uint1(x283)))
	var x286 uint32
	var x287 uint32
	x286, x287 = bits.Add32(x235, x269, uint32(uint1(x285)))
	var x288 uint32
	var x289 uint32
	x288, x289 = bits.Add32(x237, x271, uint32(uint1(x287)))
	var x290 uint32
	var x291 uint32
	x290, x291 = bits.Add32(x239, x273, uint32(uint1(x289)))
	x292 := (uint32(uint1(x291)) + uint32(uint1(x240)))
	var x293 uint32
	var x294 uint32
	x294, x293 = bits.Mul32(x3, arg2[7])
	var x295 uint32
	var x296 uint32
	x296, x295 = bits.Mul32(x3, arg2[6])
	var x297 uint32
	var x298 uint32
	x298, x297 = bits.Mul32(x3, arg2[5])
	var x299 uint32
	var x300 uint32
	x300, x299 = bits.Mul32(x3, arg2[4])
	var x301 uint32
	var x302 uint32
	x302, x301 = bits.Mul32(x3, arg2[3])
	var x303 uint32
	var x304 uint32
	x304, x303 = bits.Mul32(x3, arg2[2])
	var x305 uint32
	var x306 uint32
	x306, x305 = bits.Mul32(x3, arg2[1])
	var x307 uint32
	var x308 uint32
	x308, x307 = bits.Mul32(x3, arg2[0])
	var x309 uint32
	var x310 uint32
	x309, x310 = bits.Add32(x308, x305, uint32(0x0))
	var x311 uint32
	var x312 uint32
	x311, x312 = bits.Add32(x306, x303, uint32(uint1(x310)))
	var x313 uint32
	var x314 uint32
	x313, x314 = bits.Add32(x304, x301, uint32(uint1(x312)))
	var x315 uint32
	var x316 uint32
	x315, x316 = bits.Add32(x302, x299, uint32(uint1(x314)))
	var x317 uint32
	var x318 uint32
	x317, x318 = bits.Add32(x300, x297, uint32(uint1(x316)))
	var x319 uint32
	var x320 uint32
	x319, x320 = bits.Add32(x298, x295, uint32(uint1(x318)))
	var x321 uint32
	var x322 uint32
	x321, x322 = bits.Add32(x296, x293, uint32(uint1(x320)))
	x323 := (uint32(uint1(x322)) + x294)
	var x324 uint32
	var x325 uint32
	x324, x325 = bits.Add32(x276, x307, uint32(0x0))
	var x326 uint32
	var x327 uint32
	x326, x327 = bits.Add32(x278, x309, uint32(uint1(x325)))
	var x328 uint32
	var x329 uint32
	x328, x329 = bits.Add32(x280, x311, uint32(uint1(x327)))
	var x330 uint32
	var x331 uint32
	x330, x331 = bits.Add32(x282, x313, uint32(uint1(x329)))
	var x332 uint32
	var x333 uint32
	x332, x333 = bits.Add32(x284, x315, uint32(uint1(x331)))
	var x334 uint32
	var x335 uint32
	x334, x335 = bits.Add32(x286, x317, uint32(uint1(x333)))
	var x336 uint32
	var x337 uint32
	x336, x337 = bits.Add32(x288, x319, uint32(uint1(x335)))
	var x338 uint32
	var x339 uint32
	x338, x339 = bits.Add32(x290, x321, uint32(uint1(x337)))
	var x340 uint32
	var x341 uint32
	x340, x341 = bits.Add32(x292, x323, uint32(uint1(x339)))
	var x342 uint32
	_, x342 = bits.Mul32(x324, 0x5588b13f)
	var x344 uint32
	var x345 uint32
	x345, x344 = bits.Mul32(x342, 0xffffffff)
	var x346 uint32
	var x347 uint32
	x347, x346 = bits.Mul32(x342, 0xffffffff)
	var x348 uint32
	var x349 uint32
	x349, x348 = bits.Mul32(x342, 0xffffffff)
	var x350 uint32
	var x351 uint32
	x351, x350 = bits.Mul32(x342, 0xfffffffe)
	var x352 uint32
	var x353 uint32
	x353, x352 = bits.Mul32(x342, 0xbaaedce6)
	var x354 uint32
	var x355 uint32
	x355, x354 = bits.Mul32(x342, 0xaf48a03b)
	var x356 uint32
	var x357 uint32
	x357, x356 = bits.Mul32(x342, 0xbfd25e8c)
	var x358 uint32
	var x359 uint32
	x359, x358 = bits.Mul32(x342, 0xd0364141)
	var x360 uint32
	var x361 uint32
	x360, x361 = bits.Add32(x359, x356, uint32(0x0))
	var x362 uint32
	var x363 uint32
	x362, x363 = bits.Add32(x357, x354, uint32(uint1(x361)))
	var x364 uint32
	var x365 uint32
	x364, x365 = bits.Add32(x355, x352, uint32(uint1(x363)))
	var x366 uint32
	var x367 uint32
	x366, x367 = bits.Add32(x353, x350, uint32(uint1(x365)))
	var x368 uint32
	var x369 uint32
	x368, x369 = bits.Add32(x351, x348, uint32(uint1(x367)))
	var x370 uint32
	var x371 uint32
	x370, x371 = bits.Add32(x349, x346, uint32(uint1(x369)))
	var x372 uint32
	var x373 uint32
	x372, x373 = bits.Add32(x347, x344, uint32(uint1(x371)))
	x374 := (uint32(uint1(x373)) + x345)
	var x376 uint32
	_, x376 = bits.Add32(x324, x358, uint32(0x0))
	var x377 uint32
	var x378 uint32
	x377, x378 = bits.Add32(x326, x360, uint32(uint1(x376)))
	var x379 uint32
	var x380 uint32
	x379, x380 = bits.Add32(x328, x362, uint32(uint1(x378)))
	var x381 uint32
	var x382 uint32
	x381, x382 = bits.Add32(x330, x364, uint32(uint1(x380)))
	var x383 uint32
	var x384 uint32
	x383, x384 = bits.Add32(x332, x366, uint32(uint1(x382)))
	var x385 uint32
	var x386 uint32
	x385, x386 = bits.Add32(x334, x368, uint32(uint1(x384)))
	var x387 uint32
	var x388 uint32
	x387, x388 = bits.Add32(x336, x370, uint32(uint1(x386)))
	var x389 uint32
	var x390 uint32
	x389, x390 = bits.Add32(x338, x372, uint32(uint1(x388)))
	var x391 uint32
	var x392 uint32
	x391, x392 = bits.Add32(x340, x374, uint32(uint1(x390)))
	x393 := (uint32(uint1(x392)) + uint32(uint1(x341)))
	var x394 uint32
	var x395 uint32
	x395, x394 = bits.Mul32(x4, arg2[7])
	var x396 uint32
	var x397 uint32
	x397, x396 = bits.Mul32(x4, arg2[6])
	var x398 uint32
	var x399 uint32
	x399, x398 = bits.Mul32(x4, arg2[5])
	var x400 uint32
	var x401 uint32
	x401, x400 = bits.Mul32(x4, arg2[4])
	var x402 uint32
	var x403 uint32
	x403, x402 = bits.Mul32(x4, arg2[3])
	var x404 uint32
	var x405 uint32
	x405, x404 = bits.Mul32(x4, arg2[2])
	var x406 uint32
	var x407 uint32
	x407, x406 = bits.Mul32(x4, arg2[1])
	var x408 uint32
	var x409 uint32
	x409, x408 = bits.Mul32(x4, arg2[0])
	var x410 uint32
	var x411 uint32
	x410, x411 = bits.Add32(x409, x406, uint32(0x0))
	var x412 uint32
	var x413 uint32
	x412, x413 = bits.Add32(x407, x404, uint32(uint1(x411)))
	var x414 uint32
	var x415 uint32
	x414, x415 = bits.Add32(x405, x402, uint32(uint1(x413)))
	var x416 uint32
	var x417 uint32
	x416, x417 = bits.Add32(x403, x400, uint32(uint1(x415)))
	var x418 uint32
	var x419 uint32
	x418, x419 = bits.Add32(x401, x398, uint32(uint1(x417)))
	var x420 uint32
	var x421 uint32
	x420, x421 = bits.Add32(x399, x396, uint32(uint1(x419)))
	var x422 uint32
	var x423 uint32
	x422, x423 = bits.Add32(x397, x394, uint32(uint1(x421)))
	x424 := (uint32(uint1(x423)) + x395)
	var x425 uint32
	var x426 uint32
	x425, x426 = bits.Add32(x377, x408, uint32(0x0))
	var x427 uint32
	var x428 uint32
	x427, x428 = bits.Add32(x379, x410, uint32(uint1(x426)))
	var x429 uint32
	var x430 uint32
	x429, x430 = bits.Add32(x381, x412, uint32(uint1(x428)))
	var x431 uint32
	var x432 uint32
	x431, x432 = bits.Add32(x383, x414, uint32(uint1(x430)))
	var x433 uint32
	var x434 uint32
	x433, x434 = bits.Add32(x385, x416, uint32(uint1(x432)))
	var x435 uint32
	var x436 uint32
	x435, x436 = bits.Add32(x387, x418, uint32(uint1(x434)))
	var x437 uint32
	var x438 uint32
	x437, x438 = bits.Add32(x389, x420, uint32(uint1(x436)))
	var x439 uint32
	var x440 uint32
	x439, x440 = bits.Add32(x391, x422, uint32(uint1(x438)))
	var x441 uint32
	var x442 uint32
	x441, x442 = bits.Add32(x393, x424, uint32(uint1(x440)))
	var x443 uint32
	_, x443 = bits.Mul32(x425, 0x5588b13f)
	var x445 uint32
	var x446 uint32
	x446, x445 = bits.Mul32(x443, 0xffffffff)
	var x447 uint32
	var x448 uint32
	x448, x447 = bits.Mul32(x443, 0xffffffff)
	var x449 uint32
	var x450 uint32
	x450, x449 = bits.Mul32(x443, 0xffffffff)
	var x451 uint32
	var x452 uint32
	x452, x451 = bits.Mul32(x443, 0xfffffffe)
	var x453 uint32
	var x454 uint32
	x454, x453 = bits.Mul32(x443, 0xbaaedce6)
	var x455 uint32
	var x456 uint32
	x456, x455 = bits.Mul32(x443, 0xaf48a03b)
	var x457 uint32
	var x458 uint32
	x458, x457 = bits.Mul32(x443, 0xbfd25e8c)
	var x459 uint32
	var x460 uint32
	x460, x459 = bits.Mul32(x443, 0xd0364141)
	var x461 uint32
	var x462 uint32
	x461, x462 = bits.Add32(x460, x457, uint32(0x0))
	var x463 uint32
	var x464 uint32
	x463, x464 = bits.Add32(x458, x455, uint32(uint1(x462)))
	var x465 uint32
	var x466 uint32
	x465, x466 = bits.Add32(x456, x453, uint32(uint1(x464)))
	var x467 uint32
	var x468 uint32
	x467, x468 = bits.Add32(x454, x451, uint32(uint1(x466)))
	var x469 uint32
	var x470 uint32
	x469, x470 = bits.Add32(x452, x449, uint32(uint1(x468)))
	var x471 uint32
	var x472 uint32
	x471, x472 = bits.Add32(x450, x447, uint32(uint1(x470)))
	var x473 uint32
	var x474 uint32
	x473, x474 = bits.Add32(x448, x445, uint32(uint1(x472)))
	x475 := (uint32(uint1(x474)) + x446)
	var x477 uint32
	_, x477 = bits.Add32(x425, x459, uint32(0x0))
	var x478 uint32
	var x479 uint32
	x478, x479 = bits.Add32(x427, x461, uint32(uint1(x477)))
	var x480 uint32
	var x481 uint32
	x480, x481 = bits.Add32(x429, x463, uint32(uint1(x479)))
	var x482 uint32
	var x483 uint32
	x482, x483 = bits.Add32(x431, x465, uint32(uint1(x481)))
	var x484 uint32
	var x485 uint32
	x484, x485 = bits.Add32(x433, x467, uint32(uint1(x483)))
	var x486 uint32
	var x487 uint32
	x486, x487 = bits.Add32(x435, x469, uint32(uint1(x485)))
	var x488 uint32
	var x489 uint32
	x488, x489 = bits.Add32(x437, x471, uint32(uint1(x487)))
	var x490 uint32
	var x491 uint32
	x490, x491 = bits.Add32(x439, x473, uint32(uint1(x489)))
	var x492 uint32
	var x493 uint32
	x492, x493 = bits.Add32(x441, x475, uint32(uint1(x491)))
	x494 := (uint32(uint1(x493)) + uint32(uint1(x442)))
	var x495 uint32
	var x496 uint32
	x496, x495 = bits.Mul32(x5, arg2[7])
	var x497 uint32
	var x498 uint32
	x498, x497 = bits.Mul32(x5, arg2[6])
	var x499 uint32
	var x500 uint32
	x500, x499 = bits.Mul32(x5, arg2[5])
	var x501 uint32
	var x502 uint32
	x502, x501 = bits.Mul32(x5, arg2[4])
	var x503 uint32
	var x504 uint32
	x504, x503 = bits.Mul32(x5, arg2[3])
	var x505 uint32
	var x506 uint32
	x506, x505 = bits.Mul32(x5, arg2[2])
	var x507 uint32
	var x508 uint32
	x508, x507 = bits.Mul32(x5, arg2[1])
	var x509 uint32
	var x510 uint32
	x510, x509 = bits.Mul32(x5, arg2[0])
	var x511 uint32
	var x512 uint32
	x511, x512 = bits.Add32(x510, x507, uint32(0x0))
	var x513 uint32
	var x514 uint32
	x513, x514 = bits.Add32(x508, x505, uint32(uint1(x512)))
	var x515 uint32
	var x516 uint32
	x515, x516 = bits.Add32(x506, x503, uint32(uint1(x514)))
	var x517 uint32
	var x518 uint32
	x517, x518 = bits.Add32(x504, x501, uint32(uint1(x516)))
	var x519 uint32
	var x520 uint32
	x519, x520 = bits.Add32(x502, x499, uint32(uint1(x518)))
	var x521 uint32
	var x522 uint32
	x521, x522 = bits.Add32(x500, x497, uint32(uint1(x520)))
	var x523 uint32
	var x524 uint32
	x523, x524 = bits.Add32(x498, x495, uint32(uint1(x522)))
	x525 := (uint32(uint1(x524)) + x496)
	var x526 uint32
	var x527 uint32
	x526, x527 = bits.Add32(x478, x509, uint32(0x0))
	var x528 uint32
	var x529 uint32
	x528, x529 = bits.Add32(x480, x511, uint32(uint1(x527)))
	var x530 uint32
	var x531 uint32
	x530, x531 = bits.Add32(x482, x513, uint32(uint1(x529)))
	var x532 uint32
	var x533 uint32
	x532, x533 = bits.Add32(x484, x515, uint32(uint1(x531)))
	var x534 uint32
	var x535 uint32
	x534, x535 = bits.Add32(x486, x517, uint32(uint1(x533)))
	var x536 uint32
	var x537 uint32
	x536, x537 = bits.Add32(x488, x519, uint32(uint1(x535)))
	var x538 uint32
	var x539 uint32
	x538, x539 = bits.Add32(x490, x521, uint32(uint1(x537)))
	var x540 uint32
	var x541 uint32
	x540, x541 = bits.Add32(x492, x523, uint32(uint1(x539)))
	var x542 uint32
	var x543 uint32
	x542, x543 = bits.Add32(x494, x525, uint32(uint1(x541)))
	var x544 uint32
	_, x544 = bits.Mul32(x526, 0x5588b13f)
	var x546 uint32
	var x547 uint32
	x547, x546 = bits.Mul32(x544, 0xffffffff)
	var x548 uint32
	var x549 uint32
	x549, x548 = bits.Mul32(x544, 0xffffffff)
	var x550 uint32
	var x551 uint32
	x551, x550 = bits.Mul32(x544, 0xffffffff)
	var x552 uint32
	var x553 uint32
	x553, x552 = bits.Mul32(x544, 0xfffffffe)
	var x554 uint32
	var x555 uint32
	x555, x554 = bits.Mul32(x544, 0xbaaedce6)
	var x556 uint32
	var x557 uint32
	x557, x556 = bits.Mul32(x544, 0xaf48a03b)
	var x558 uint32
	var x559 uint32
	x559, x558 = bits.Mul32(x544, 0xbfd25e8c)
	var x560 uint32
	var x561 uint32
	x561, x560 = bits.Mul32(x544, 0xd0364141)
	var x562 uint32
	var x563 uint32
	x562, x563 = bits.Add32(x561, x558, uint32(0x0))
	var x564 uint32
	var x565 uint32
	x564, x565 = bits.Add32(x559, x556, uint32(uint1(x563)))
	var x566 uint32
	var x567 uint32
	x566, x567 = bits.Add32(x557, x554, uint32(uint1(x565)))
	var x568 uint32
	var x569 uint32
	x568, x569 = bits.Add32(x555, x552, uint32(uint1(x567)))
	var x570 uint32
	var x571 uint32
	x570, x571 = bits.Add32(x553, x550, uint32(uint1(x569)))
	var x572 uint32
	var x573 uint32
	x572, x573 = bits.Add32(x551, x548, uint32(uint1(x571)))
	var x574 uint32
	var x575 uint32
	x574, x575 = bits.Add32(x549, x546, uint32(uint1(x573)))
	x576 := (uint32(uint1(x575)) + x547)
	var x578 uint32
	_, x578 = bits.Add32(x526, x560, uint32(0x0))
	var x579 uint32
	var x580 uint32
	x579, x580 = bits.Add32(x528, x562, uint32(uint1(x578)))
	var x581 uint32
	var x582 uint32
	x581, x582 = bits.Add32(x530, x564, uint32(uint1(x580)))
	var x583 uint32
	var x584 uint32
	x583, x584 = bits.Add32(x532, x566, uint32(uint1(x582)))
	var x585 uint32
	var x586 uint32
	x585, x586 = bits.Add32(x534, x568, uint32(uint1(x584)))
	var x587 uint32
	var x588 uint32
	x587, x588 = bits.Add32(x536, x570, uint32(uint1(x586)))
	var x589 uint32
	var x590 uint32
	x589, x590 = bits.Add32(x538, x572, uint32(uint1(x588)))
	var x591 uint32
	var x592 uint32
	x591, x592 = bits.Add32(x540, x574, uint32(uint1(x590)))
	var x593 uint32
	var x594 uint32
	x593, x594 = bits.Add32(x542, x576, uint32(uint1(x592)))
	x595 := (uint32(uint1(x594)) + uint32(uint1(x543)))
	var x596 uint32
	var x597 uint32
	x597, x596 = bits.Mul32(x6, arg2[7])
	var x598 uint32
	var x599 uint32
	x599, x598 = bits.Mul32(x6, arg2[6])
	var x600 uint32
	var x601 uint32
	x601, x600 = bits.Mul32(x6, arg2[5])
	var x602 uint32
	var x603 uint32
	x603, x602 = bits.Mul32(x6, arg2[4])
	var x604 uint32
	var x605 uint32
	x605, x604 = bits.Mul32(x6, arg2[3])
	var x606 uint32
	var x607 uint32
	x607, x606 = bits.Mul32(x6, arg2[2])
	var x608 uint32
	var x609 uint32
	x609, x608 = bits.Mul32(x6, arg2[1])
	var x610 uint32
	var x611 uint32
	x611, x610 = bits.Mul32(x6, arg2[0])
	var x612 uint32
	var x613 uint32
	x612, x613 = bits.Add32(x611, x608, uint32(0x0))
	var x614 uint32
	var x615 uint32
	x614, x615 = bits.Add32(x609, x606, uint32(uint1(x613)))
	var x616 uint32
	var x617 uint32
	x616, x617 = bits.Add32(x607, x604, uint32(uint1(x615)))
	var x618 uint32
	var x619 uint32
	x618, x619 = bits.Add32(x605, x602, uint32(uint1(x617)))
	var x620 uint32
	var x621 uint32
	x620, x621 = bits.Add32(x603, x600, uint32(uint1(x619)))
	var x622 uint32
	var x623 uint32
	x622, x623 = bits.Add32(x601, x598, uint32(uint1(x621)))
	var x624 uint32
	var x625 uint32
	x624, x625 = bits.Add32(x599, x596, uint32(uint1(x623)))
	x626 := (uint32(uint1(x625)) + x597)
	var x627 uint32
	var x628 uint32
	x627, x628 = bits.Add32(x579, x610, uint32(0x0))
	var x629 uint32
	var x630 uint32
	x629, x630 = bits.Add32(x581, x612, uint32(uint1(x628)))
	var x631 uint32
	var x632 uint32
	x631, x632 = bits.Add32(x583, x614, uint32(uint1(x630)))
	var x633 uint32
	var x634 uint32
	x633, x634 = bits.Add32(x585, x616, uint32(uint1(x632)))
	var x635 uint32
	var x636 uint32
	x635, x636 = bits.Add32(x587, x618, uint32(uint1(x634)))
	var x637 uint32
	var x638 uint32
	x637, x638 = bits.Add32(x589, x620, uint32(uint1(x636)))
	var x639 uint32
	var x640 uint32
	x639, x640 = bits.Add32(x591, x622, uint32(uint1(x638)))
	var x641 uint32
	var x642 uint32
	x641, x642 = bits.Add32(x593, x624, uint32(uint1(x640)))
	var x643 uint32
	var x644 uint32
	x643, x644 = bits.Add32(x595, x626, uint32(uint1(x642)))
	var x645 uint32
	_, x645 = bits.Mul32(x627, 0x5588b13f)
	var x647 uint32
	var x648 uint32
	x648, x647 = bits.Mul32(x645, 0xffffffff)
	var x649 uint32
	var x650 uint32
	x650, x649 = bits.Mul32(x645, 0xffffffff)
	var x651 uint32
	var x652 uint32
	x652, x651 = bits.Mul32(x645, 0xffffffff)
	var x653 uint32
	var x654 uint32
	x654, x653 = bits.Mul32(x645, 0xfffffffe)
	var x655 uint32
	var x656 uint32
	x656, x655 = bits.Mul32(x645, 0xbaaedce6)
	var x657 uint32
	var x658 uint32
	x658, x657 = bits.Mul32(x645, 0xaf48a03b)
	var x659 uint32
	var x660 uint32
	x660, x659 = bits.Mul32(x645, 0xbfd25e8c)
	var x661 uint32
	var x662 uint32
	x662, x661 = bits.Mul32(x645, 0xd0364141)
	var x663 uint32
	var x664 uint32
	x663, x664 = bits.Add32(x662, x659, uint32(0x0))
	var x665 uint32
	var x666 uint32
	x665, x666 = bits.Add32(x660, x657, uint32(uint1(x664)))
	var x667 uint32
	var x668 uint32
	x667, x668 = bits.Add32(x658, x655, uint32(uint1(x666)))
	var x669 uint32
	var x670 uint32
	x669, x670 = bits.Add32(x656, x653, uint32(uint1(x668)))
	var x671 uint32
	var x672 uint32
	x671, x672 = bits.Add32(x654, x651, uint32(uint1(x670)))
	var x673 uint32
	var x674 uint32
	x673, x674 = bits.Add32(x652, x649, uint32(uint1(x672)))
	var x675 uint32
	var x676 uint32
	x675, x676 = bits.Add32(x650, x647, uint32(uint1(x674)))
	x677 := (uint32(uint1(x676)) + x648)
	var x679 uint32
	_, x679 = bits.Add32(x627, x661, uint32(0x0))
	var x680 uint32
	var x681 uint32
	x680, x681 = bits.Add32(x629, x663, uint32(uint1(x679)))
	var x682 uint32
	var x683 uint32
	x682, x683 = bits.Add32(x631, x665, uint32(uint1(x681)))
	var x684 uint32
	var x685 uint32
	x684, x685 = bits.Add32(x633, x667, uint32(uint1(x683)))
	var x686 uint32
	var x687 uint32
	x686, x687 = bits.Add32(x635, x669, uint32(uint1(x685)))
	var x688 uint32
	var x689 uint32
	x688, x689 = bits.Add32(x637, x671, uint32(uint1(x687)))
	var x690 uint32
	var x691 uint32
	x690, x691 = bits.Add32(x639, x673, uint32(uint1(x689)))
	var x692 uint32
	var x693 uint32
	x692, x693 = bits.Add32(x641, x675, uint32(uint1(x691)))
	var x694 uint32
	var x695 uint32
	x694, x695 = bits.Add32(x643, x677, uint32(uint1(x693)))
	x696 := (uint32(uint1(x695)) + uint32(uint1(x644)))
	var x697 uint32
	var x698 uint32
	x698, x697 = bits.Mul32(x7, arg2[7])
	var x699 uint32
	var x700 uint32
	x700, x699 = bits.Mul32(x7, arg2[6])
	var x701 uint32
	var x702 uint32
	x702, x701 = bits.Mul32(x7, arg2[5])
	var x703 uint32
	var x704 uint32
	x704, x703 = bits.Mul32(x7, arg2[4])
	var x705 uint32
	var x706 uint32
	x706, x705 = bits.Mul32(x7, arg2[3])
	var x707 uint32
	var x708 uint32
	x708, x707 = bits.Mul32(x7, arg2[2])
	var x709 uint32
	var x710 uint32
	x710, x709 = bits.Mul32(x7, arg2[1])
	var x711 uint32
	var x712 uint32
	x712, x711 = bits.Mul32(x7, arg2[0])
	var x713 uint32
	var x714 uint32
	x713, x714 = bits.Add32(x712, x709, uint32(0x0))
	var x715 uint32
	var x716 uint32
	x715, x716 = bits.Add32(x710, x707, uint32(uint1(x714)))
	var x717 uint32
	var x718 uint32
	x717, x718 = bits.Add32(x708, x705, uint32(uint1(x716)))
	var x719 uint32
	var x720 uint32
	x719, x720 = bits.Add32(x706, x703, uint32(uint1(x718)))
	var x721 uint32
	var x722 uint32
	x721, x722 = bits.Add32(x704, x701, uint32(uint1(x720)))
	var x723 uint32
	var x724 uint32
	x723, x724 = bits.Add32(x702, x699, uint32(uint1(x722)))
	var x725 uint32
	var x726 uint32
	x725, x726 = bits.Add32(x700, x697, uint32(uint1(x724)))
	x727 := (uint32(uint1(x726)) + x698)
	var x728 uint32
	var x729 uint32
	x728, x729 = bits.Add32(x680, x711, uint32(0x0))
	var x730 uint32
	var x731 uint32
	x730, x731 = bits.Add32(x682, x713, uint32(uint1(x729)))
	var x732 uint32
	var x733 uint32
	x732, x733 = bits.Add32(x684, x715, uint32(uint1(x731)))
	var x734 uint32
	var x735 uint32
	x734, x735 = bits.Add32(x686, x717, uint32(uint1(x733)))
	var x736 uint32
	var x737 uint32
	x736, x737 = bits.Add32(x688, x719, uint32(uint1(x735)))
	var x738 uint32
	var x739 uint32
	x738, x739 = bits.Add32(x690, x721, uint32(uint1(x737)))
	var x740 uint32
	var x741 uint32
	x740, x741 = bits.Add32(x692, x723, uint32(uint1(x739)))
	var x742 uint32
	var x743 uint32
	x742, x743 = bits.Add32(x694, x725, uint32(uint1(x741)))
	var x744 uint32
	var x745 uint32
	x744, x745 = bits.Add32(x696, x727, uint32(uint1(x743)))
	var x746 uint32
	_, x746 = bits.Mul32(x728, 0x5588b13f)
	var x748 uint32
	var x749 uint32
	x749, x748 = bits.Mul32(x746, 0xffffffff)
	var x750 uint32
	var x751 uint32
	x751, x750 = bits.Mul32(x746, 0xffffffff)
	var x752 uint32
	var x753 uint32
	x753, x752 = bits.Mul32(x746, 0xffffffff)
	var x754 uint32
	var x755 uint32
	x755, x754 = bits.Mul32(x746, 0xfffffffe)
	var x756 uint32
	var x757 uint32
	x757, x756 = bits.Mul32(x746, 0xbaaedce6)
	var x758 uint32
	var x759 uint32
	x759, x758 = bits.Mul32(x746, 0xaf48a03b)
	var x760 uint32
	var x761 uint32
	x761, x760 = bits.Mul32(x746, 0xbfd25e8c)
	var x762 uint32
	var x763 uint32
	x763, x762 = bits.Mul32(x746, 0xd0364141)
	var x764 uint32
	var x765 uint32
	x764, x765 = bits.Add32(x763, x760, uint32(0x0))
	var x766 uint32
	var x767 uint32
	x766, x767 = bits.Add32(x761, x758, uint32(uint1(x765)))
	var x768 uint32
	var x769 uint32
	x768, x769 = bits.Add32(x759, x756, uint32(uint1(x767)))
	var x770 uint32
	var x771 uint32
	x770, x771 = bits.Add32(x757, x754, uint32(uint1(x769)))
	var x772 uint32
	var x773 uint32
	x772, x773 = bits.Add32(x755, x752, uint32(uint1(x771)))
	var x774 uint32
	var x775 uint32
	x774, x775 = bits.Add32(x753, x750, uint32(uint1(x773)))
	var x776 uint32
	var x777 uint32
	x776, x777 = bits.Add32(x751, x748, uint32(uint1(x775)))
	x778 := (uint32(uint1(x777)) + x749)
	var x780 uint32
	_, x780 = bits.Add32(x728, x762, uint32(0x0))
	var x781 uint32
	var x782 uint32
	x781, x782 = bits.Add32(x730, x764, uint32(uint1(x780)))
	var x783 uint32
	var x784 uint32
	x783, x784 = bits.Add32(x732, x766, uint32(uint1(x782)))
	var x785 uint32
	var x786 uint32
	x785, x786 = bits.Add32(x734, x768, uint32(uint1(x784)))
	var x787 uint32
	var x788 uint32
	x787, x788 = bits.Add32(x736, x770, uint32(uint1(x786)))
	var x789 uint32
	var x790 uint32
	x789, x790 = bits.Add32(x738, x772, uint32(uint1(x788)))
	var x791 uint32
	var x792 uint32
	x791, x792 = bits.Add32(x740, x774, uint32(uint1(x790)))
	var x793 uint32
	var x794 uint32
	x793, x794 = bits.Add32(x742, x776, uint32(uint1(x792)))
	var x795 uint32
	var x796 uint32
	x795, x796 = bits.Add32(x744, x778, uint32(uint1(x794)))
	x797 := (uint32(uint1(x796)) + uint32(uint1(x745)))
	var x798 uint32
	var x799 uint32
	x798, x799 = bits.Sub32(x781, 0xd0364141, uint32(0x0))
	var x800 uint32
	var x801 uint32
	x800, x801 = bits.Sub32(x783, 0xbfd25e8c, uint32(uint1(x799)))
	var x802 uint32
	var x803 uint32
	x802, x803 = bits.Sub32(x785, 0xaf48a03b, uint32(uint1(x801)))
	var x804 uint32
	var x805 uint32
	x804, x805 = bits.Sub32(x787, 0xbaaedce6, uint32(uint1(x803)))
	var x806 uint32
	var x807 uint32
	x806, x807 = bits.Sub32(x789, 0xfffffffe, uint32(uint1(x805)))
	var x808 uint32
	var x809 uint32
	x808, x809 = bits.Sub32(x791, 0xffffffff, uint32(uint1(x807)))
	var x810 uint32
	var x811 uint32
	x810, x811 = bits.Sub32(x793, 0xffffffff, uint32(uint1(x809)))
	var x812 uint32
	var x813 uint32
	x812, x813 = bits.Sub32(x795, 0xffffffff, uint32(uint1(x811)))
	var x815 uint32
	_, x815 = bits.Sub32(x797, uint32(0x0), uint32(uint1(x813)))
	var x816 uint32
	cmovznzU32(&x816, uint1(x815), x798, x781)
	var x817 uint32
	cmovznzU32(&x817, uint1(x815), x800, x783)
	var x818 uint32
	cmovznzU32(&x818, uint1(x815), x802, x785)
	var x819 uint32
	cmovznzU32(&x819, uint1(x815), x804, x787)
	var x820 uint32
	cmovznzU32(&x820, uint1(x815), x806, x789)
	var x821 uint32
	cmovznzU32(&x821, uint1(x815), x808, x791)
	var x822 uint32
	cmovznzU32(&x822, uint1(x815), x810, x793)
	var x823 uint32
	cmovznzU32(&x823, uint1(x815), x812, x795)
	out1[0] = x816
	out1[1] = x817
	out1[2] = x818
	out1[3] = x819
	out1[4] = x820
	out1[5] = x821
	out1[6] = x822
	out1[7] = x823
}

// Square squares a field element in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
//   0 ≤ eval out1 < m
//
func Square(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement) {
	x1 := arg1[1]
	x2 := arg1[2]
	x3 := arg1[3]
	x4 := arg1[4]
	x5 := arg1[5]
	x6 := arg1[6]
	x7 := arg1[7]
	x8 := arg1[0]
	var x9 uint32
	var x10 uint32
	x10, x9 = bits.Mul32(x8, arg1[7])
	var x11 uint32
	var x12 uint32
	x12, x11 = bits.Mul32(x8, arg1[6])
	var x13 uint32
	var x14 uint32
	x14, x13 = bits.Mul32(x8, arg1[5])
	var x15 uint32
	var x16 uint32
	x16, x15 = bits.Mul32(x8, arg1[4])
	var x17 uint32
	var x18 uint32
	x18, x17 = bits.Mul32(x8, arg1[3])
	var x19 uint32
	var x20 uint32
	x20, x19 = bits.Mul32(x8, arg1[2])
	var x21 uint32
	var x22 uint32
	x22, x21 = bits.Mul32(x8, arg1[1])
	var x23 uint32
	var x24 uint32
	x24, x23 = bits.Mul32(x8, arg1[0])
	var x25 uint32
	var x26 uint32
	x25, x26 = bits.Add32(x24, x21, uint32(0x0))
	var x27 uint32
	var x28 uint32
	x27, x28 = bits.Add32(x22, x19, uint32(uint1(x26)))
	var x29 uint32
	var x30 uint32
	x29, x30 = bits.Add32(x20, x17, uint32(uint1(x28)))
	var x31 uint32
	var x32 uint32
	x31, x32 = bits.Add32(x18, x15, uint32(uint1(x30)))
	var x33 uint32
	var x34 uint32
	x33, x34 = bits.Add32(x16, x13, uint32(uint1(x32)))
	var x35 uint32
	var x36 uint32
	x35, x36 = bits.Add32(x14, x11, uint32(uint1(x34)))
	var x37 uint32
	var x38 uint32
	x37, x38 = bits.Add32(x12, x9, uint32(uint1(x36)))
	x39 := (uint32(uint1(x38)) + x10)
	var x40 uint32
	_, x40 = bits.Mul32(x23, 0x5588b13f)
	var x42 uint32
	var x43 uint32
	x43, x42 = bits.Mul32(x40, 0xffffffff)
	var x44 uint32
	var x45 uint32
	x45, x44 = bits.Mul32(x40, 0xffffffff)
	var x46 uint32
	var x47 uint32
	x47, x46 = bits.Mul32(x40, 0xffffffff)
	var x48 uint32
	var x49 uint32
	x49, x48 = bits.Mul32(x40, 0xfffffffe)
	var x50 uint32
	var x51 uint32
	x51, x50 = bits.Mul32(x40, 0xbaaedce6)
	var x52 uint32
	var x53 uint32
	x53, x52 = bits.Mul32(x40, 0xaf48a03b)
	var x54 uint32
	var x55 uint32
	x55, x54 = bits.Mul32(x40, 0xbfd25e8c)
	var x56 uint32
	var x57 uint32
	x57, x56 = bits.Mul32(x40, 0xd0364141)
	var x58 uint32
	var x59 uint32
	x58, x59 = bits.Add32(x57, x54, uint32(0x0))
	var x60 uint32
	var x61 uint32
	x60, x61 = bits.Add32(x55, x52, uint32(uint1(x59)))
	var x62 uint32
	var x63 uint32
	x62, x63 = bits.Add32(x53, x50, uint32(uint1(x61)))
	var x64 uint32
	var x65 uint32
	x64, x65 = bits.Add32(x51, x48, uint32(uint1(x63)))
	var x66 uint32
	var x67 uint32
	x66, x67 = bits.Add32(x49, x46, uint32(uint1(x65)))
	var x68 uint32
	var x69 uint32
	x68, x69 = bits.Add32(x47, x44, uint32(uint1(x67)))
	var x70 uint32
	var x71 uint32
	x70, x71 = bits.Add32(x45, x42, uint32(uint1(x69)))
	x72 := (uint32(uint1(x71)) + x43)
	var x74 uint32
	_, x74 = bits.Add32(x23, x56, uint32(0x0))
	var x75 uint32
	var x76 uint32
	x75, x76 = bits.Add32(x25, x58, uint32(uint1(x74)))
	var x77 uint32
	var x78 uint32
	x77, x78 = bits.Add32(x27, x60, uint32(uint1(x76)))
	var x79 uint32
	var x80 uint32
	x79, x80 = bits.Add32(x29, x62, uint32(uint1(x78)))
	var x81 uint32
	var x82 uint32
	x81, x82 = bits.Add32(x31, x64, uint32(uint1(x80)))
	var x83 uint32
	var x84 uint32
	x83, x84 = bits.Add32(x33, x66, uint32(uint1(x82)))
	var x85 uint32
	var x86 uint32
	x85, x86 = bits.Add32(x35, x68, uint32(uint1(x84)))
	var x87 uint32
	var x88 uint32
	x87, x88 = bits.Add32(x37, x70, uint32(uint1(x86)))
	var x89 uint32
	var x90 uint32
	x89, x90 = bits.Add32(x39, x72, uint32(uint1(x88)))
	var x91 uint32
	var x92 uint32
	x92, x91 = bits.Mul32(x1, arg1[7])
	var x93 uint32
	var x94 uint32
	x94, x93 = bits.Mul32(x1, arg1[6])
	var x95 uint32
	var x96 uint32
	x96, x95 = bits.Mul32(x1, arg1[5])
	var x97 uint32
	var x98 uint32
	x98, x97 = bits.Mul32(x1, arg1[4])
	var x99 uint32
	var x100 uint32
	x100, x99 = bits.Mul32(x1, arg1[3])
	var x101 uint32
	var x102 uint32
	x102, x101 = bits.Mul32(x1, arg1[2])
	var x103 uint32
	var x104 uint32
	x104, x103 = bits.Mul32(x1, arg1[1])
	var x105 uint32
	var x106 uint32
	x106, x105 = bits.Mul32(x1, arg1[0])
	var x107 uint32
	var x108 uint32
	x107, x108 = bits.Add32(x106, x103, uint32(0x0))
	var x109 uint32
	var x110 uint32
	x109, x110 = bits.Add32(x104, x101, uint32(uint1(x108)))
	var x111 uint32
	var x112 uint32
	x111, x112 = bits.Add32(x102, x99, uint32(uint1(x110)))
	var x113 uint32
	var x114 uint32
	x113, x114 = bits.Add32(x100, x97, uint32(uint1(x112)))
	var x115 uint32
	var x116 uint32
	x115, x116 = bits.Add32(x98, x95, uint32(uint1(x114)))
	var x117 uint32
	var x118 uint32
	x117, x118 = bits.Add32(x96, x93, uint32(uint1(x116)))
	var x119 uint32
	var x120 uint32
	x119, x120 = bits.Add32(x94, x91, uint32(uint1(x118)))
	x121 := (uint32(uint1(x120)) + x92)
	var x122 uint32
	var x123 uint32
	x122, x123 = bits.Add32(x75, x105, uint32(0x0))
	var x124 uint32
	var x125 uint32
	x124, x125 = bits.Add32(x77, x107, uint32(uint1(x123)))
	var x126 uint32
	var x127 uint32
	x126, x127 = bits.Add32(x79, x109, uint32(uint1(x125)))
	var x128 uint32
	var x129 uint32
	x128, x129 = bits.Add32(x81, x111, uint32(uint1(x127)))
	var x130 uint32
	var x131 uint32
	x130, x131 = bits.Add32(x83, x113, uint32(uint1(x129)))
	var x132 uint32
	var x133 uint32
	x132, x133 = bits.Add32(x85, x115, uint32(uint1(x131)))
	var x134 uint32
	var x135 uint32
	x134, x135 = bits.Add32(x87, x117, uint32(uint1(x133)))
	var x136 uint32
	var x137 uint32
	x136, x137 = bits.Add32(x89, x119, uint32(uint1(x135)))
	var x138 uint32
	var x139 uint32
	x138, x139 = bits.Add32(uint32(uint1(x90)), x121, uint32(uint1(x137)))
	var x140 uint32
	_, x140 = bits.Mul32(x122, 0x5588b13f)
	var x142 uint32
	var x143 uint32
	x143, x142 = bits.Mul32(x140, 0xffffffff)
	var x144 uint32
	var x145 uint32
	x145, x144 = bits.Mul32(x140, 0xffffffff)
	var x146 uint32
	var x147 uint32
	x147, x146 = bits.Mul32(x140, 0xffffffff)
	var x148 uint32
	var x149 uint32
	x149, x148 = bits.Mul32(x140, 0xfffffffe)
	var x150 uint32
	var x151 uint32
	x151, x150 = bits.Mul32(x140, 0xbaaedce6)
	var x152 uint32
	var x153 uint32
	x153, x152 = bits.Mul32(x140, 0xaf48a03b)
	var x154 uint32
	var x155 uint32
	x155, x154 = bits.Mul32(x140, 0xbfd25e8c)
	var x156 uint32
	var x157 uint32
	x157, x156 = bits.Mul32(x140, 0xd0364141)
	var x158 uint32
	var x159 uint32
	x158, x159 = bits.Add32(x157, x154, uint32(0x0))
	var x160 uint32
	var x161 uint32
	x160, x161 = bits.Add32(x155, x152, uint32(uint1(x159)))
	var x162 uint32
	var x163 uint32
	x162, x163 = bits.Add32(x153, x150, uint32(uint1(x161)))
	var x164 uint32
	var x165 uint32
	x164, x165 = bits.Add32(x151, x148, uint32(uint1(x163)))
	var x166 uint32
	var x167 uint32
	x166, x167 = bits.Add32(x149, x146, uint32(uint1(x165)))
	var x168 uint32
	var x169 uint32
	x168, x169 = bits.Add32(x147, x144, uint32(uint1(x167)))
	var x170 uint32
	var x171 uint32
	x170, x171 = bits.Add32(x145, x142, uint32(uint1(x169)))
	x172 := (uint32(uint1(x171)) + x143)
	var x174 uint32
	_, x174 = bits.Add32(x122, x156, uint32(0x0))
	var x175 uint32
	var x176 uint32
	x175, x176 = bits.Add32(x124, x158, uint32(uint1(x174)))
	var x177 uint32
	var x178 uint32
	x177, x178 = bits.Add32(x126, x160, uint32(uint1(x176)))
	var x179 uint32
	var x180 uint32
	x179, x180 = bits.Add32(x128, x162, uint32(uint1(x178)))
	var x181 uint32
	var x182 uint32
	x181, x182 = bits.Add32(x130, x164, uint32(uint1(x180)))
	var x183 uint32
	var x184 uint32
	x183, x184 = bits.Add32(x132, x166, uint32(uint1(x182)))
	var x185 uint32
	var x186 uint32
	x185, x186 = bits.Add32(x134, x168, uint32(uint1(x184)))
	var x187 uint32
	var x188 uint32
	x187, x188 = bits.Add32(x136, x170, uint32(uint1(x186)))
	var x189 uint32
	var x190 uint32
	x189, x190 = bits.Add32(x138, x172, uint32(uint1(x188)))
	x191 := (uint32(uint1(x190)) + uint32(uint1(x139)))
	var x192 uint32
	var x193 uint32
	x193, x192 = bits.Mul32(x2, arg1[7])
	var x194 uint32
	var x195 uint32
	x195, x194 = bits.Mul32(x2, arg1[6])
	var x196 uint32
	var x197 uint32
	x197, x196 = bits.Mul32(x2, arg1[5])
	var x198 uint32
	var x199 uint32
	x199, x198 = bits.Mul32(x2, arg1[4])
	var x200 uint32
	var x201 uint32
	x201, x200 = bits.Mul32(x2, arg1[3])
	var x202 uint32
	var x203 uint32
	x203, x202 = bits.Mul32(x2, arg1[2])
	var x204 uint32
	var x205 uint32
	x205, x204 = bits.Mul32(x2, arg1[1])
	var x206 uint32
	var x207 uint32
	x207, x206 = bits.Mul32(x2, arg1[0])
	var x208 uint32
	var x209 uint32
	x208, x209 = bits.Add32(x207, x204, uint32(0x0))
	var x210 uint32
	var x211 uint32
	x210, x211 = bits.Add32(x205, x202, uint32(uint1(x209)))
	var x212 uint32
	var x213 uint32
	x212, x213 = bits.Add32(x203, x200, uint32(uint1(x211)))
	var x214 uint32
	var x215 uint32
	x214, x215 = bits.Add32(x201, x198, uint32(uint1(x213)))
	var x216 uint32
	var x217 uint32
	x216, x217 = bits.Add32(x199, x196, uint32(uint1(x215)))
	var x218 uint32
	var x219 uint32
	x218, x219 = bits.Add32(x197, x194, uint32(uint1(x217)))
	var x220 uint32
	var x221 uint32
	x220, x221 = bits.Add32(x195, x192, uint32(uint1(x219)))
	x222 := (uint32(uint1(x221)) + x193)
	var x223 uint32
	var x224 uint32
	x223, x224 = bits.Add32(x175, x206, uint32(0x0))
	var x225 uint32
	var x226 uint32
	x225, x226 = bits.Add32(x177, x208, uint32(uint1(x224)))
	var x227 uint32
	var x228 uint32
	x227, x228 = bits.Add32(x179, x210, uint32(uint1(x226)))
	var x229 uint32
	var x230 uint32
	x229, x230 = bits.Add32(x181, x212, uint32(uint1(x228)))
	var x231 uint32
	var x232 uint32
	x231, x232 = bits.Add32(x183, x214, uint32(uint1(x230)))
	var x233 uint32
	var x234 uint32
	x233, x234 = bits.Add32(x185, x216, uint32(uint1(x232)))
	var x235 uint32
	var x236 uint32
	x235, x236 = bits.Add32(x187, x218, uint32(uint1(x234)))
	var x237 uint32
	var x238 uint32
	x237, x238 = bits.Add32(x189, x220, uint32(uint1(x236)))
	var x239 uint32
	var x240 uint32
	x239, x240 = bits.Add32(x191, x222, uint32(uint1(x238)))
	var x241 uint32
	_, x241 = bits.Mul32(x223, 0x5588b13f)
	var x243 uint32
	var x244 uint32
	x244, x243 = bits.Mul32(x241, 0xffffffff)
	var x245 uint32
	var x246 uint32
	x246, x245 = bits.Mul32(x241, 0xffffffff)
	var x247 uint32
	var x248 uint32
	x248, x247 = bits.Mul32(x241, 0xffffffff)
	var x249 uint32
	var x250 uint32
	x250, x249 = bits.Mul32(x241, 0xfffffffe)
	var x251 uint32
	var x252 uint32
	x252, x251 = bits.Mul32(x241, 0xbaaedce6)
	var x253 uint32
	var x254 uint32
	x254, x253 = bits.Mul32(x241, 0xaf48a03b)
	var x255 uint32
	var x256 uint32
	x256, x255 = bits.Mul32(x241, 0xbfd25e8c)
	var x257 uint32
	var x258 uint32
	x258, x257 = bits.Mul32(x241, 0xd0364141)
	var x259 uint32
	var x260 uint32
	x259, x260 = bits.Add32(x258, x255, uint32(0x0))
	var x261 uint32
	var x262 uint32
	x261, x262 = bits.Add32(x256, x253, uint32(uint1(x260)))
	var x263 uint32
	var x264 uint32
	x263, x264 = bits.Add32(x254, x251, uint32(uint1(x262)))
	var x265 uint32
	var x266 uint32
	x265, x266 = bits.Add32(x252, x249, uint32(uint1(x264)))
	var x267 uint32
	var x268 uint32
	x267, x268 = bits.Add32(x250, x247, uint32(uint1(x266)))
	var x269 uint32
	var x270 uint32
	x269, x270 = bits.Add32(x248, x245, uint32(uint1(x268)))
	var x271 uint32
	var x272 uint32
	x271, x272 = bits.Add32(x246, x243, uint32(uint1(x270)))
	x273 := (uint32(uint1(x272)) + x244)
	var x275 uint32
	_, x275 = bits.Add32(x223, x257, uint32(0x0))
	var x276 uint32
	var x277 uint32
	x276, x277 = bits.Add32(x225, x259, uint32(uint1(x275)))
	var x278 uint32
	var x279 uint32
	x278, x279 = bits.Add32(x227, x261, uint32(uint1(x277)))
	var x280 uint32
	var x281 uint32
	x280, x281 = bits.Add32(x229, x263, uint32(uint1(x279)))
	var x282 uint32
	var x283 uint32
	x282, x283 = bits.Add32(x231, x265, uint32(uint1(x281)))
	var x284 uint32
	var x285 uint32
	x284, x285 = bits.Add32(x233, x267, uint32(uint1(x283)))
	var x286 uint32
	var x287 uint32
	x286, x287 = bits.Add32(x235, x269, uint32(uint1(x285)))
	var x288 uint32
	var x289 uint32
	x288, x289 = bits.Add32(x237, x271, uint32(uint1(x287)))
	var x290 uint32
	var x291 uint32
	x290, x291 = bits.Add32(x239, x273, uint32(uint1(x289)))
	x292 := (uint32(uint1(x291)) + uint32(uint1(x240)))
	var x293 uint32
	var x294 uint32
	x294, x293 = bits.Mul32(x3, arg1[7])
	var x295 uint32
	var x296 uint32
	x296, x295 = bits.Mul32(x3, arg1[6])
	var x297 uint32
	var x298 uint32
	x298, x297 = bits.Mul32(x3, arg1[5])
	var x299 uint32
	var x300 uint32
	x300, x299 = bits.Mul32(x3, arg1[4])
	var x301 uint32
	var x302 uint32
	x302, x301 = bits.Mul32(x3, arg1[3])
	var x303 uint32
	var x304 uint32
	x304, x303 = bits.Mul32(x3, arg1[2])
	var x305 uint32
	var x306 uint32
	x306, x305 = bits.Mul32(x3, arg1[1])
	var x307 uint32
	var x308 uint32
	x308, x307 = bits.Mul32(x3, arg1[0])
	var x309 uint32
	var x310 uint32
	x309, x310 = bits.Add32(x308, x305, uint32(0x0))
	var x311 uint32
	var x312 uint32
	x311, x312 = bits.Add32(x306, x303, uint32(uint1(x310)))
	var x313 uint32
	var x314 uint32
	x313, x314 = bits.Add32(x304, x301, uint32(uint1(x312)))
	var x315 uint32
	var x316 uint32
	x315, x316 = bits.Add32(x302, x299, uint32(uint1(x314)))
	var x317 uint32
	var x318 uint32
	x317, x318 = bits.Add32(x300, x297, uint32(uint1(x316)))
	var x319 uint32
	var x320 uint32
	x319, x320 = bits.Add32(x298, x295, uint32(uint1(x318)))
	var x321 uint32
	var x322 uint32
	x321, x322 = bits.Add32(x296, x293, uint32(uint1(x320)))
	x323 := (uint32(uint1(x322)) + x294)
	var x324 uint32
	var x325 uint32
	x324, x325 = bits.Add32(x276, x307, uint32(0x0))
	var x326 uint32
	var x327 uint32
	x326, x327 = bits.Add32(x278, x309, uint32(uint1(x325)))
	var x328 uint32
	var x329 uint32
	x328, x329 = bits.Add32(x280, x311, uint32(uint1(x327)))
	var x330 uint32
	var x331 uint32
	x330, x331 = bits.Add32(x282, x313, uint32(uint1(x329)))
	var x332 uint32
	var x333 uint32
	x332, x333 = bits.Add32(x284, x315, uint32(uint1(x331)))
	var x334 uint32
	var x335 uint32
	x334, x335 = bits.Add32(x286, x317, uint32(uint1(x333)))
	var x336 uint32
	var x337 uint32
	x336, x337 = bits.Add32(x288, x319, uint32(uint1(x335)))
	var x338 uint32
	var x339 uint32
	x338, x339 = bits.Add32(x290, x321, uint32(uint1(x337)))
	var x340 uint32
	var x341 uint32
	x340, x341 = bits.Add32(x292, x323, uint32(uint1(x339)))
	var x342 uint32
	_, x342 = bits.Mul32(x324, 0x5588b13f)
	var x344 uint32
	var x345 uint32
	x345, x344 = bits.Mul32(x342, 0xffffffff)
	var x346 uint32
	var x347 uint32
	x347, x346 = bits.Mul32(x342, 0xffffffff)
	var x348 uint32
	var x349 uint32
	x349, x348 = bits.Mul32(x342, 0xffffffff)
	var x350 uint32
	var x351 uint32
	x351, x350 = bits.Mul32(x342, 0xfffffffe)
	var x352 uint32
	var x353 uint32
	x353, x352 = bits.Mul32(x342, 0xbaaedce6)
	var x354 uint32
	var x355 uint32
	x355, x354 = bits.Mul32(x342, 0xaf48a03b)
	var x356 uint32
	var x357 uint32
	x357, x356 = bits.Mul32(x342, 0xbfd25e8c)
	var x358 uint32
	var x359 uint32
	x359, x358 = bits.Mul32(x342, 0xd0364141)
	var x360 uint32
	var x361 uint32
	x360, x361 = bits.Add32(x359, x356, uint32(0x0))
	var x362 uint32
	var x363 uint32
	x362, x363 = bits.Add32(x357, x354, uint32(uint1(x361)))
	var x364 uint32
	var x365 uint32
	x364, x365 = bits.Add32(x355, x352, uint32(uint1(x363)))
	var x366 uint32
	var x367 uint32
	x366, x367 = bits.Add32(x353, x350, uint32(uint1(x365)))
	var x368 uint32
	var x369 uint32
	x368, x369 = bits.Add32(x351, x348, uint32(uint1(x367)))
	var x370 uint32
	var x371 uint32
	x370, x371 = bits.Add32(x349, x346, uint32(uint1(x369)))
	var x372 uint32
	var x373 uint32
	x372, x373 = bits.Add32(x347, x344, uint32(uint1(x371)))
	x374 := (uint32(uint1(x373)) + x345)
	var x376 uint32
	_, x376 = bits.Add32(x324, x358, uint32(0x0))
	var x377 uint32
	var x378 uint32
	x377, x378 = bits.Add32(x326, x360, uint32(uint1(x376)))
	var x379 uint32
	var x380 uint32
	x379, x380 = bits.Add32(x328, x362, uint32(uint1(x378)))
	var x381 uint32
	var x382 uint32
	x381, x382 = bits.Add32(x330, x364, uint32(uint1(x380)))
	var x383 uint32
	var x384 uint32
	x383, x384 = bits.Add32(x332, x366, uint32(uint1(x382)))
	var x385 uint32
	var x386 uint32
	x385, x386 = bits.Add32(x334, x368, uint32(uint1(x384)))
	var x387 uint32
	var x388 uint32
	x387, x388 = bits.Add32(x336, x370, uint32(uint1(x386)))
	var x389 uint32
	var x390 uint32
	x389, x390 = bits.Add32(x338, x372, uint32(uint1(x388)))
	var x391 uint32
	var x392 uint32
	x391, x392 = bits.Add32(x340, x374, uint32(uint1(x390)))
	x393 := (uint32(uint1(x392)) + uint32(uint1(x341)))
	var x394 uint32
	var x395 uint32
	x395, x394 = bits.Mul32(x4, arg1[7])
	var x396 uint32
	var x397 uint32
	x397, x396 = bits.Mul32(x4, arg1[6])
	var x398 uint32
	var x399 uint32
	x399, x398 = bits.Mul32(x4, arg1[5])
	var x400 uint32
	var x401 uint32
	x401, x400 = bits.Mul32(x4, arg1[4])
	var x402 uint32
	var x403 uint32
	x403, x402 = bits.Mul32(x4, arg1[3])
	var x404 uint32
	var x405 uint32
	x405, x404 = bits.Mul32(x4, arg1[2])
	var x406 uint32
	var x407 uint32
	x407, x406 = bits.Mul32(x4, arg1[1])
	var x408 uint32
	var x409 uint32
	x409, x408 = bits.Mul32(x4, arg1[0])
	var x410 uint32
	var x411 uint32
	x410, x411 = bits.Add32(x409, x406, uint32(0x0))
	var x412 uint32
	var x413 uint32
	x412, x413 = bits.Add32(x407, x404, uint32(uint1(x411)))
	var x414 uint32
	var x415 uint32
	x414, x415 = bits.Add32(x405, x402, uint32(uint1(x413)))
	var x416 uint32
	var x417 uint32
	x416, x417 = bits.Add32(x403, x400, uint32(uint1(x415)))
	var x418 uint32
	var x419 uint32
	x418, x419 = bits.Add32(x401, x398, uint32(uint1(x417)))
	var x420 uint32
	var x421 uint32
	x420, x421 = bits.Add32(x399, x396, uint32(uint1(x419)))
	var x422 uint32
	var x423 uint32
	x422, x423 = bits.Add32(x397, x394, uint32(uint1(x421)))
	x424 := (uint32(uint1(x423)) + x395)
	var x425 uint32
	var x426 uint32
	x425, x426 = bits.Add32(x377, x408, uint32(0x0))
	var x427 uint32
	var x428 uint32
	x427, x428 = bits.Add32(x379, x410, uint32(uint1(x426)))
	var x429 uint32
	var x430 uint32
	x429, x430 = bits.Add32(x381, x412, uint32(uint1(x428)))
	var x431 uint32
	var x432 uint32
	x431, x432 = bits.Add32(x383, x414, uint32(uint1(x430)))
	var x433 uint32
	var x434 uint32
	x433, x434 = bits.Add32(x385, x416, uint32(uint1(x432)))
	var x435 uint32
	var x436 uint32
	x435, x436 = bits.Add32(x387, x418, uint32(uint1(x434)))
	var x437 uint32
	var x438 uint32
	x437, x438 = bits.Add32(x389, x420, uint32(uint1(x436)))
	var x439 uint32
	var x440 uint32
	x439, x440 = bits.Add32(x391, x422, uint32(uint1(x438)))
	var x441 uint32
	var x442 uint32
	x441, x442 = bits.Add32(x393, x424, uint32(uint1(x440)))
	var x443 uint32
	_, x443 = bits.Mul32(x425, 0x5588b13f)
	var x445 uint32
	var x446 uint32
	x446, x445 = bits.Mul32(x443, 0xffffffff)
	var x447 uint32
	var x448 uint32
	x448, x447 = bits.Mul32(x443, 0xffffffff)
	var x449 uint32
	var x450 uint32
	x450, x449 = bits.Mul32(x443, 0xffffffff)
	var x451 uint32
	var x452 uint32
	x452, x451 = bits.Mul32(x443, 0xfffffffe)
	var x453 uint32
	var x454 uint32
	x454, x453 = bits.Mul32(x443, 0xbaaedce6)
	var x455 uint32
	var x456 uint32
	x456, x455 = bits.Mul32(x443, 0xaf48a03b)
	var x457 uint32
	var x458 uint32
	x458, x457 = bits.Mul32(x443, 0xbfd25e8c)
	var x459 uint32
	var x460 uint32
	x460, x459 = bits.Mul32(x443, 0xd0364141)
	var x461 uint32
	var x462 uint32
	x461, x462 = bits.Add32(x460, x457, uint32(0x0))
	var x463 uint32
	var x464 uint32
	x463, x464 = bits.Add32(x458, x455, uint32(uint1(x462)))
	var x465 uint32
	var x466 uint32
	x465, x466 = bits.Add32(x456, x453, uint32(uint1(x464)))
	var x467 uint32
	var x468 uint32
	x467, x468 = bits.Add32(x454, x451, uint32(uint1(x466)))
	var x469 uint32
	var x470 uint32
	x469, x470 = bits.Add32(x452, x449, uint32(uint1(x468)))
	var x471 uint32
	var x472 uint32
	x471, x472 = bits.Add32(x450, x447, uint32(uint1(x470)))
	var x473 uint32
	var x474 uint32
	x473, x474 = bits.Add32(x448, x445, uint32(uint1(x472)))
	x475 := (uint32(uint1(x474)) + x446)
	var x477 uint32
	_, x477 = bits.Add32(x425, x459, uint32(0x0))
	var x478 uint32
	var x479 uint32
	x478, x479 = bits.Add32(x427, x461, uint32(uint1(x477)))
	var x480 uint32
	var x481 uint32
	x480, x481 = bits.Add32(x429, x463, uint32(uint1(x479)))
	var x482 uint32
	var x483 uint32
	x482, x483 = bits.Add32(x431, x465, uint32(uint1(x481)))
	var x484 uint32
	var x485 uint32
	x484, x485 = bits.Add32(x433, x467, uint32(uint1(x483)))
	var x486 uint32
	var x487 uint32
	x486, x487 = bits.Add32(x435, x469, uint32(uint1(x485)))
	var x488 uint32
	var x489 uint32
	x488, x489 = bits.Add32(x437, x471, uint32(uint1(x487)))
	var x490 uint32
	var x491 uint32
	x490, x491 = bits.Add32(x439, x473, uint32(uint1(x489)))
	var x492 uint32
	var x493 uint32
	x492, x493 = bits.Add32(x441, x475, uint32(uint1(x491)))
	x494 := (uint32(uint1(x493)) + uint32(uint1(x442)))
	var x495 uint32
	var x496 uint32
	x496, x495 = bits.Mul32(x5, arg1[7])
	var x497 uint32
	var x498 uint32
	x498, x497 = bits.Mul32(x5, arg1[6])
	var x499 uint32
	var x500 uint32
	x500, x499 = bits.Mul32(x5, arg1[5])
	var x501 uint32
	var x502 uint32
	x502, x501 = bits.Mul32(x5, arg1[4])
	var x503 uint32
	var x504 uint32
	x504, x503 = bits.Mul32(x5, arg1[3])
	var x505 uint32
	var x506 uint32
	x506, x505 = bits.Mul32(x5, arg1[2])
	var x507 uint32
	var x508 uint32
	x508, x507 = bits.Mul32(x5, arg1[1])
	var x509 uint32
	var x510 uint32
	x510, x509 = bits.Mul32(x5, arg1[0])
	var x511 uint32
	var x512 uint32
	x511, x512 = bits.Add32(x510, x507, uint32(0x0))
	var x513 uint32
	var x514 uint32
	x513, x514 = bits.Add32(x508, x505, uint32(uint1(x512)))
	var x515 uint32
	var x516 uint32
	x515, x516 = bits.Add32(x506, x503, uint32(uint1(x514)))
	var x517 uint32
	var x518 uint32
	x517, x518 = bits.Add32(x504, x501, uint32(uint1(x516)))
	var x519 uint32
	var x520 uint32
	x519, x520 = bits.Add32(x502, x499, uint32(uint1(x518)))
	var x521 uint32
	var x522 uint32
	x521, x522 = bits.Add32(x500, x497, uint32(uint1(x520)))
	var x523 uint32
	var x524 uint32
	x523, x524 = bits.Add32(x498, x495, uint32(uint1(x522)))
	x525 := (uint32(uint1(x524)) + x496)
	var x526 uint32
	var x527 uint32
	x526, x527 = bits.Add32(x478, x509, uint32(0x0))
	var x528 uint32
	var x529 uint32
	x528, x529 = bits.Add32(x480, x511, uint32(uint1(x527)))
	var x530 uint32
	var x531 uint32
	x530, x531 = bits.Add32(x482, x513, uint32(uint1(x529)))
	var x532 uint32
	var x533 uint32
	x532, x533 = bits.Add32(x484, x515, uint32(uint1(x531)))
	var x534 uint32
	var x535 uint32
	x534, x535 = bits.Add32(x486, x517, uint32(uint1(x533)))
	var x536 uint32
	var x537 uint32
	x536, x537 = bits.Add32(x488, x519, uint32(uint1(x535)))
	var x538 uint32
	var x539 uint32
	x538, x539 = bits.Add32(x490, x521, uint32(uint1(x537)))
	var x540 uint32
	var x541 uint32
	x540, x541 = bits.Add32(x492, x523, uint32(uint1(x539)))
	var x542 uint32
	var x543 uint32
	x542, x543 = bits.Add32(x494, x525, uint32(uint1(x541)))
	var x544 uint32
	_, x544 = bits.Mul32(x526, 0x5588b13f)
	var x546 uint32
	var x547 uint32
	x547, x546 = bits.Mul32(x544, 0xffffffff)
	var x548 uint32
	var x549 uint32
	x549, x548 = bits.Mul32(x544, 0xffffffff)
	var x550 uint32
	var x551 uint32
	x551, x550 = bits.Mul32(x544, 0xffffffff)
	var x552 uint32
	var x553 uint32
	x553, x552 = bits.Mul32(x544, 0xfffffffe)
	var x554 uint32
	var x555 uint32
	x555, x554 = bits.Mul32(x544, 0xbaaedce6)
	var x556 uint32
	var x557 uint32
	x557, x556 = bits.Mul32(x544, 0xaf48a03b)
	var x558 uint32
	var x559 uint32
	x559, x558 = bits.Mul32(x544, 0xbfd25e8c)
	var x560 uint32
	var x561 uint32
	x561, x560 = bits.Mul32(x544, 0xd0364141)
	var x562 uint32
	var x563 uint32
	x562, x563 = bits.Add32(x561, x558, uint32(0x0))
	var x564 uint32
	var x565 uint32
	x564, x565 = bits.Add32(x559, x556, uint32(uint1(x563)))
	var x566 uint32
	var x567 uint32
	x566, x567 = bits.Add32(x557, x554, uint32(uint1(x565)))
	var x568 uint32
	var x569 uint32
	x568, x569 = bits.Add32(x555, x552, uint32(uint1(x567)))
	var x570 uint32
	var x571 uint32
	x570, x571 = bits.Add32(x553, x550, uint32(uint1(x569)))
	var x572 uint32
	var x573 uint32
	x572, x573 = bits.Add32(x551, x548, uint32(uint1(x571)))
	var x574 uint32
	var x575 uint32
	x574, x575 = bits.Add32(x549, x546, uint32(uint1(x573)))
	x576 := (uint32(uint1(x575)) + x547)
	var x578 uint32
	_, x578 = bits.Add32(x526, x560, uint32(0x0))
	var x579 uint32
	var x580 uint32
	x579, x580 = bits.Add32(x528, x562, uint32(uint1(x578)))
	var x581 uint32
	var x582 uint32
	x581, x582 = bits.Add32(x530, x564, uint32(uint1(x580)))
	var x583 uint32
	var x584 uint32
	x583, x584 = bits.Add32(x532, x566, uint32(uint1(x582)))
	var x585 uint32
	var x586 uint32
	x585, x586 = bits.Add32(x534, x568, uint32(uint1(x584)))
	var x587 uint32
	var x588 uint32
	x587, x588 = bits.Add32(x536, x570, uint32(uint1(x586)))
	var x589 uint32
	var x590 uint32
	x589, x590 = bits.Add32(x538, x572, uint32(uint1(x588)))
	var x591 uint32
	var x592 uint32
	x591, x592 = bits.Add32(x540, x574, uint32(uint1(x590)))
	var x593 uint32
	var x594 uint32
	x593, x594 = bits.Add32(x542, x576, uint32(uint1(x592)))
	x595 := (uint32(uint1(x594)) + uint32(uint1(x543)))
	var x596 uint32
	var x597 uint32
	x597, x596 = bits.Mul32(x6, arg1[7])
	var x598 uint32
	var x599 uint32
	x599, x598 = bits.Mul32(x6, arg1[6])
	var x600 uint32
	var x601 uint32
	x601, x600 = bits.Mul32(x6, arg1[5])
	var x602 uint32
	var x603 uint32
	x603, x602 = bits.Mul32(x6, arg1[4])
	var x604 uint32
	var x605 uint32
	x605, x604 = bits.Mul32(x6, arg1[3])
	var x606 uint32
	var x607 uint32
	x607, x606 = bits.Mul32(x6, arg1[2])
	var x608 uint32
	var x609 uint32
	x609, x608 = bits.Mul32(x6, arg1[1])
	var x610 uint32
	var x611 uint32
	x611, x610 = bits.Mul32(x6, arg1[0])
	var x612 uint32
	var x613 uint32
	x612, x613 = bits.Add32(x611, x608, uint32(0x0))
	var x614 uint32
	var x615 uint32
	x614, x615 = bits.Add32(x609, x606, uint32(uint1(x613)))
	var x616 uint32
	var x617 uint32
	x616, x617 = bits.Add32(x607, x604, uint32(uint1(x615)))
	var x618 uint32
	var x619 uint32
	x618, x619 = bits.Add32(x605, x602, uint32(uint1(x617)))
	var x620 uint32
	var x621 uint32
	x620, x621 = bits.Add32(x603, x600, uint32(uint1(x619)))
	var x622 uint32
	var x623 uint32
	x622, x623 = bits.Add32(x601, x598, uint32(uint1(x621)))
	var x624 uint32
	var x625 uint32
	x624, x625 = bits.Add32(x599, x596, uint32(uint1(x623)))
	x626 := (uint32(uint1(x625)) + x597)
	var x627 uint32
	var x628 uint32
	x627, x628 = bits.Add32(x579, x610, uint32(0x0))
	var x629 uint32
	var x630 uint32
	x629, x630 = bits.Add32(x581, x612, uint32(uint1(x628)))
	var x631 uint32
	var x632 uint32
	x631, x632 = bits.Add32(x583, x614, uint32(uint1(x630)))
	var x633 uint32
	var x634 uint32
	x633, x634 = bits.Add32(x585, x616, uint32(uint1(x632)))
	var x635 uint32
	var x636 uint32
	x635, x636 = bits.Add32(x587, x618, uint32(uint1(x634)))
	var x637 uint32
	var x638 uint32
	x637, x638 = bits.Add32(x589, x620, uint32(uint1(x636)))
	var x639 uint32
	var x640 uint32
	x639, x640 = bits.Add32(x591, x622, uint32(uint1(x638)))
	var x641 uint32
	var x642 uint32
	x641, x642 = bits.Add32(x593, x624, uint32(uint1(x640)))
	var x643 uint32
	var x644 uint32
	x643, x644 = bits.Add32(x595, x626, uint32(uint1(x642)))
	var x645 uint32
	_, x645 = bits.Mul32(x627, 0x5588b13f)
	var x647 uint32
	var x648 uint32
	x648, x647 = bits.Mul32(x645, 0xffffffff)
	var x649 uint32
	var x650 uint32
	x650, x649 = bits.Mul32(x645, 0xffffffff)
	var x651 uint32
	var x652 uint32
	x652, x651 = bits.Mul32(x645, 0xffffffff)
	var x653 uint32
	var x654 uint32
	x654, x653 = bits.Mul32(x645, 0xfffffffe)
	var x655 uint32
	var x656 uint32
	x656, x655 = bits.Mul32(x645, 0xbaaedce6)
	var x657 uint32
	var x658 uint32
	x658, x657 = bits.Mul32(x645, 0xaf48a03b)
	var x659 uint32
	var x660 uint32
	x660, x659 = bits.Mul32(x645, 0xbfd25e8c)
	var x661 uint32
	var x662 uint32
	x662, x661 = bits.Mul32(x645, 0xd0364141)
	var x663 uint32
	var x664 uint32
	x663, x664 = bits.Add32(x662, x659, uint32(0x0))
	var x665 uint32
	var x666 uint32
	x665, x666 = bits.Add32(x660, x657, uint32(uint1(x664)))
	var x667 uint32
	var x668 uint32
	x667, x668 = bits.Add32(x658, x655, uint32(uint1(x666)))
	var x669 uint32
	var x670 uint32
	x669, x670 = bits.Add32(x656, x653, uint32(uint1(x668)))
	var x671 uint32
	var x672 uint32
	x671, x672 = bits.Add32(x654, x651, uint32(uint1(x670)))
	var x673 uint32
	var x674 uint32
	x673, x674 = bits.Add32(x652, x649, uint32(uint1(x672)))
	var x675 uint32
	var x676 uint32
	x675, x676 = bits.Add32(x650, x647, uint32(uint1(x674)))
	x677 := (uint32(uint1(x676)) + x648)
	var x679 uint32
	_, x679 = bits.Add32(x627, x661, uint32(0x0))
	var x680 uint32
	var x681 uint32
	x680, x681 = bits.Add32(x629, x663, uint32(uint1(x679)))
	var x682 uint32
	var x683 uint32
	x682, x683 = bits.Add32(x631, x665, uint32(uint1(x681)))
	var x684 uint32
	var x685 uint32
	x684, x685 = bits.Add32(x633, x667, uint32(uint1(x683)))
	var x686 uint32
	var x687 uint32
	x686, x687 = bits.Add32(x635, x669, uint32(uint1(x685)))
	var x688 uint32
	var x689 uint32
	x688, x689 = bits.Add32(x637, x671, uint32(uint1(x687)))
	var x690 uint32
	var x691 uint32
	x690, x691 = bits.Add32(x639, x673, uint32(uint1(x689)))
	var x692 uint32
	var x693 uint32
	x692, x693 = bits.Add32(x641, x675, uint32(uint1(x691)))
	var x694 uint32
	var x695 uint32
	x694, x695 = bits.Add32(x643, x677, uint32(uint1(x693)))
	x696 := (uint32(uint1(x695)) + uint32(uint1(x644)))
	var x697 uint32
	var x698 uint32
	x698, x697 = bits.Mul32(x7, arg1[7])
	var x699 uint32
	var x700 uint32
	x700, x699 = bits.Mul32(x7, arg1[6])
	var x701 uint32
	var x702 uint32
	x702, x701 = bits.Mul32(x7, arg1[5])
	var x703 uint32
	var x704 uint32
	x704, x703 = bits.Mul32(x7, arg1[4])
	var x705 uint32
	var x706 uint32
	x706, x705 = bits.Mul32(x7, arg1[3])
	var x707 uint32
	var x708 uint32
	x708, x707 = bits.Mul32(x7, arg1[2])
	var x709 uint32
	var x710 uint32
	x710, x709 = bits.Mul32(x7, arg1[1])
	var x711 uint32
	var x712 uint32
	x712, x711 = bits.Mul32(x7, arg1[0])
	var x713 uint32
	var x714 uint32
	x713, x714 = bits.Add32(x712, x709, uint32(0x0))
	var x715 uint32
	var x716 uint32
	x715, x716 = bits.Add32(x710, x707, uint32(uint1(x714)))
	var x717 uint32
	var x718 uint32
	x717, x718 = bits.Add32(x708, x705, uint32(uint1(x716)))
	var x719 uint32
	var x720 uint32
	x719, x720 = bits.Add32(x706, x703, uint32(uint1(x718)))
	var x721 uint32
	var x722 uint32
	x721, x722 = bits.Add32(x704, x701, uint32(uint1(x720)))
	var x723 uint32
	var x724 uint32
	x723, x724 = bits.Add32(x702, x699, uint32(uint1(x722)))
	var x725 uint32
	var x726 uint32
	x725, x726 = bits.Add32(x700, x697, uint32(uint1(x724)))
	x727 := (uint32(uint1(x726)) + x698)
	var x728 uint32
	var x729 uint32
	x728, x729 = bits.Add32(x680, x711, uint32(0x0))
	var x730 uint32
	var x731 uint32
	x730, x731 = bits.Add32(x682, x713, uint32(uint1(x729)))
	var x732 uint32
	var x733 uint32
	x732, x733 = bits.Add32(x684, x715, uint32(uint1(x731)))
	var x734 uint32
	var x735 uint32
	x734, x735 = bits.Add32(x686, x717, uint32(uint1(x733)))
	var x736 uint32
	var x737 uint32
	x736, x737 = bits.Add32(x688, x719, uint32(uint1(x735)))
	var x738 uint32
	var x739 uint32
	x738, x739 = bits.Add32(x690, x721, uint32(uint1(x737)))
	var x740 uint32
	var x741 uint32
	x740, x741 = bits.Add32(x692, x723, uint32(uint1(x739)))
	var x742 uint32
	var x743 uint32
	x742, x743 = bits.Add32(x694, x725, uint32(uint1(x741)))
	var x744 uint32
	var x745 uint32
	x744, x745 = bits.Add32(x696, x727, uint32(uint1(x743)))
	var x746 uint32
	_, x746 = bits.Mul32(x728, 0x5588b13f)
	var x748 uint32
	var x749 uint32
	x749, x748 = bits.Mul32(x746, 0xffffffff)
	var x750 uint32
	var x751 uint32
	x751, x750 = bits.Mul32(x746, 0xffffffff)
	var x752 uint32
	var x753 uint32
	x753, x752 = bits.Mul32(x746, 0xffffffff)
	var x754 uint32
	var x755 uint32
	x755, x754 = bits.Mul32(x746, 0xfffffffe)
	var x756 uint32
	var x757 uint32
	x757, x756 = bits.Mul32(x746, 0xbaaedce6)
	var x758 uint32
	var x759 uint32
	x759, x758 = bits.Mul32(x746, 0xaf48a03b)
	var x760 uint32
	var x761 uint32
	x761, x760 = bits.Mul32(x746, 0xbfd25e8c)
	var x762 uint32
	var x763 uint32
	x763, x762 = bits.Mul32(x746, 0xd0364141)
	var x764 uint32
	var x765 uint32
	x764, x765 = bits.Add32(x763, x760, uint32(0x0))
	var x766 uint32
	var x767 uint32
	x766, x767 = bits.Add32(x761, x758, uint32(uint1(x765)))
	var x768 uint32
	var x769 uint32
	x768, x769 = bits.Add32(x759, x756, uint32(uint1(x767)))
	var x770 uint32
	var x771 uint32
	x770, x771 = bits.Add32(x757, x754, uint32(uint1(x769)))
	var x772 uint32
	var x773 uint32
	x772, x773 = bits.Add32(x755, x752, uint32(uint1(x771)))
	var x774 uint32
	var x775 uint32
	x774, x775 = bits.Add32(x753, x750, uint32(uint1(x773)))
	var x776 uint32
	var x777 uint32
	x776, x777 = bits.Add32(x751, x748, uint32(uint1(x775)))
	x778 := (uint32(uint1(x777)) + x749)
	var x780 uint32
	_, x780 = bits.Add32(x728, x762, uint32(0x0))
	var x781 uint32
	var x782 uint32
	x781, x782 = bits.Add32(x730, x764, uint32(uint1(x780)))
	var x783 uint32
	var x784 uint32
	x783, x784 = bits.Add32(x732, x766, uint32(uint1(x782)))
	var x785 uint32
	var x786 uint32
	x785, x786 = bits.Add32(x734, x768, uint32(uint1(x784)))
	var x787 uint32
	var x788 uint32
	x787, x788 = bits.Add32(x736, x770, uint32(uint1(x786)))
	var x789 uint32
	var x790 uint32
	x789, x790 = bits.Add32(x738, x772, uint32(uint1(x788)))
	var x791 uint32
	var x792 uint32
	x791, x792 = bits.Add32(x740, x774, uint32(uint1(x790)))
	var x793 uint32
	var x794 uint32
	x793, x794 = bits.Add32(x742, x776, uint32(uint1(x792)))
	var x795 uint32
	var x796 uint32
	x795, x796 = bits.Add32(x744, x778, uint32(uint1(x794)))
	x797 := (uint32(uint1(x796)) + uint32(uint1(x745)))
	var x798 uint32
	var x799 uint32
	x798, x799 = bits.Sub32(x781, 0xd0364141, uint32(0x0))
	var x800 uint32
	var x801 uint32
	x800, x801 = bits.Sub32(x783, 0xbfd25e8c, uint32(uint1(x799)))
	var x802 uint32
	var x803 uint32
	x802, x803 = bits.Sub32(x785, 0xaf48a03b, uint32(uint1(x801)))
	var x804 uint32
	var x805 uint32
	x804, x805 = bits.Sub32(x787, 0xbaaedce6, uint32(uint1(x803)))
	var x806 uint32
	var x807 uint32
	x806, x807 = bits.Sub32(x789, 0xfffffffe, uint32(uint1(x805)))
	var x808 uint32
	var x809 uint32
	x808, x809 = bits.Sub32(x791, 0xffffffff, uint32(uint1(x807)))
	var x810 uint32
	var x811 uint32
	x810, x811 = bits.Sub32(x793, 0xffffffff, uint32(uint1(x809)))
	var x812 uint32
	var x813 uint32
	x812, x813 = bits.Sub32(x795, 0xffffffff, uint32(uint1(x811)))
	var x815 uint32
	_, x815 = bits.Sub32(x797, uint32(0x0), uint32(uint1(x813)))
	var x816 uint32
	cmovznzU32(&x816, uint1(x815), x798, x781)
	var x817 uint32
	cmovznzU32(&x817, uint1(x815), x800, x783)
	var x818 uint32
	cmovznzU32(&x818, uint1(x815), x802, x785)
	var x819 uint32
	cmovznzU32(&x819, uint1(x815), x804, x787)
	var x820 uint32
	cmovznzU32(&x820, uint1(x815), x806, x789)
	var x821 uint32
	cmovznzU32(&x821, uint1(x815), x808, x791)
	var x822 uint32
	cmovznzU32(&x822, uint1(x815), x810, x793)
	var x823 uint32
	cmovznzU32(&x823, uint1(x815), x812, x795)
	out1[0] = x816
	out1[1] = x817
	out1[2] = x818
	out1[3] = x819
	out1[4] = x820
	out1[5] = x821
	out1[6] = x822
	out1[7] = x823
}

// Add adds two field elements in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
//   0 ≤ eval arg2 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
//   0 ≤ eval out1 < m
//
func Add(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement, arg2 *MontgomeryDomainFieldElement) {
	var x1 uint32
	var x2 uint32
	x1, x2 = bits.Add32(arg1[0], arg2[0], uint32(0x0))
	var x3 uint32
	var x4 uint32
	x3, x4 = bits.Add32(arg1[1], arg2[1], uint32(uint1(x2)))
	var x5 uint32
	var x6 uint32
	x5, x6 = bits.Add32(arg1[2], arg2[2], uint32(uint1(x4)))
	var x7 uint32
	var x8 uint32
	x7, x8 = bits.Add32(arg1[3], arg2[3], uint32(uint1(x6)))
	var x9 uint32
	var x10 uint32
	x9, x10 = bits.Add32(arg1[4], arg2[4], uint32(uint1(x8)))
	var x11 uint32
	var x12 uint32
	x11, x12 = bits.Add32(arg1[5], arg2[5], uint32(uint1(x10)))
	var x13 uint32
	var x14 uint32
	x13, x14 = bits.Add32(arg1[6], arg2[6], uint32(uint1(x12)))
	var x15 uint32
	var x16 uint32
	x15, x16 = bits.Add32(arg1[7], arg2[7], uint32(uint1(x14)))
	var x17 uint32
	var x18 uint32
	x17, x18 = bits.Sub32(x1, 0xd0364141, uint32(0x0))
	var x19 uint32
	var x20 uint32
	x19, x20 = bits.Sub32(x3, 0xbfd25e8c, uint32(uint1(x18)))
	var x21 uint32
	var x22 uint32
	x21, x22 = bits.Sub32(x5, 0xaf48a03b, uint32(uint1(x20)))
	var x23 uint32
	var x24 uint32
	x23, x24 = bits.Sub32(x7, 0xbaaedce6, uint32(uint1(x22)))
	var x25 uint32
	var x26 uint32
	x25, x26 = bits.Sub32(x9, 0xfffffffe, uint32(uint1(x24)))
	var x27 uint32
	var x28 uint32
	x27, x28 = bits.Sub32(x11, 0xffffffff, uint32(uint1(x26)))
	var x29 uint32
	var x30 uint32
	x29, x30 = bits.Sub32(x13, 0xffffffff, uint32(uint1(x28)))
	var x31 uint32
	var x32 uint32
	x31, x32 = bits.Sub32(x15, 0xffffffff, uint32(uint1(x30)))
	var x34 uint32
	_, x34 = bits.Sub32(uint32(uint1(x16)), uint32(0x0), uint32(uint1(x32)))
	var x35 uint32
	cmovznzU32(&x35, uint1(x34), x17, x1)
	var x36 uint32
	cmovznzU32(&x36, uint1(x34), x19, x3)
	var x37 uint32
	cmovznzU32(&x37, uint1(x34), x21, x5)
	var x38 uint32
	cmovznzU32(&x38, uint1(x34), x23, x7)
	var x39 uint32
	cmovznzU32(&x39, uint1(x34), x25, x9)
	var x40 uint32
	cmovznzU32(&x40, uint1(x34), x27, x11)
	var x41 uint32
	cmovznzU32(&x41, uint1(x34), x29, x13)
	var x42 uint32
	cmovznzU32(&x42, uint1(x34), x31, x15)
	out1[0] = x35
	out1[1] = x36
	out1[2] = x37
	out1[3] = x38
	out1[4] = x39
	out1[5] = x40
	out1[6] = x41
	out1[7] = x42
}

// Sub subtracts two field elements in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
//   0 ≤ eval arg2 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
//   0 ≤ eval out1 < m
//
func Sub(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement, arg2 *MontgomeryDomainFieldElement) {
	var x1 uint32
	var x2 uint32
	x1, x2 = bits.Sub32(arg1[0], arg2[0], uint32(0x0))
	var x3 uint32
	var x4 uint32
	x3, x4 = bits.Sub32(arg1[1], arg2[1], uint32(uint1(x2)))
	var x5 uint32
	var x6 uint32
	x5, x6 = bits.Sub32(arg1[2], arg2[2], uint32(uint1(x4)))
	var x7 uint32
	var x8 uint32
	x7, x8 = bits.Sub32(arg1[3], arg2[3], uint32(uint1(x6)))
	var x9 uint32
	var x10 uint32
	x9, x10 = bits.Sub32(arg1[4], arg2[4], uint32(uint1(x8)))
	var x11 uint32
	var x12 uint32
	x11, x12 = bits.Sub32(arg1[5], arg2[5], uint32(uint1(x10)))
	var x13 uint32
	var x14 uint32
	x13, x14 = bits.Sub32(arg1[6], arg2[6], uint32(uint1(x12)))
	var x15 uint32
	var x16 uint32
	x15, x16 = bits.Sub32(arg1[7], arg2[7], uint32(uint1(x14)))
	var x17 uint32
	cmovznzU32(&x17, uint1(x16), uint32(0x0), 0xffffffff)
	var x18 uint32
	var x19 uint32
	x18, x19 = bits.Add32(x1, (x17 & 0xd0364141), uint32(0x0))
	var x20 uint32
	var x21 uint32
	x20, x21 = bits.Add32(x3, (x17 & 0xbfd25e8c), uint32(uint1(x19)))
	var x22 uint32
	var x23 uint32
	x22, x23 = bits.Add32(x5, (x17 & 0xaf48a03b), uint32(uint1(x21)))
	var x24 uint32
	var x25 uint32
	x24, x25 = bits.Add32(x7, (x17 & 0xbaaedce6), uint32(uint1(x23)))
	var x26 uint32
	var x27 uint32
	x26, x27 = bits.Add32(x9, (x17 & 0xfffffffe), uint32(uint1(x25)))
	var x28 uint32
	var x29 uint32
	x28, x29 = bits.Add32(x11, x17, uint32(uint1(x27)))
	var x30 uint32
	var x31 uint32
	x30, x31 = bits.Add32(x13, x17, uint32(uint1(x29)))
	var x32 uint32
	x32, _ = bits.Add32(x15, x17, uint32(uint1(x31)))
	out1[0] = x18
	out1[1] = x20
	out1[2] = x22
	out1[3] = x24
	out1[4] = x26
	out1[5] = x28
	out1[6] = x30
	out1[7] = x32
}

// Opp negates a field element in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
//   0 ≤ eval out1 < m
//
func Opp(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement) {
	var x1 uint32
	var x2 uint32
	x1, x2 = bits.Sub32(uint32(0x0), arg1[0], uint32(0x0))
	var x3 uint32
	var x4 uint32
	x3, x4 = bits.Sub32(uint32(0x0), arg1[1], uint32(uint1(x2)))
	var x5 uint32
	var x6 uint32
	x5, x6 = bits.Sub32(uint32(0x0), arg1[2], uint32(uint1(x4)))
	var x7 uint32
	var x8 uint32
	x7, x8 = bits.Sub32(uint32(0x0), arg1[3], uint32(uint1(x6)))
	var x9 uint32
	var x10 uint32
	x9, x10 = bits.Sub32(uint32(0x0), arg1[4], uint32(uint1(x8)))
	var x11 uint32
	var x12 uint32
	x11, x12 = bits.Sub32(uint32(0x0), arg1[5], uint32(uint1(x10)))
	var x13 uint32
	var x14 uint32
	x13, x14 = bits.Sub32(uint32(0x0), arg1[6], uint32(uint1(x12)))
	var x15 uint32
	var x16 uint32
	x15, x16 = bits.Sub32(uint32(0x0), arg1[7], uint32(uint1(x14)))
	var x17 uint32
	cmovznzU32(&x17, uint1(x16), uint32(0x0), 0xffffffff)
	var x18 uint32
	var x19 uint32
	x18, x19 = bits.Add32(x1, (x17 & 0xd0364141), uint32(0x0))
	var x20 uint32
	var x21 uint32
	x20, x21 = bits.Add32(x3, (x17 & 0xbfd25e8c), uint32(uint1(x19)))
	var x22 uint32
	var x23 uint32
	x22, x23 = bits.Add32(x5, (x17 & 0xaf48a03b), uint32(uint1(x21)))
	var x24 uint32
	var x25 uint32
	x24, x25 = bits.Add32(x7, (x17 & 0xbaaedce6), uint32(uint1(x23)))
	var x26 uint32
	var x27 uint32
	x26, x27 = bits.Add32(x9, (x17 & 0xfffffffe), uint32(uint1(x25)))
	var x28 uint32
	var x29 uint32
	x28, x29 = bits.Add32(x11, x17, uint32(uint1(x27)))
	var x30 uint32
	var x31 uint32
	x30, x31 = bits.Add32(x13, x17, uint32(uint1(x29)))
	var x32 uint32
	x32, _ = bits.Add32(x15, x17, uint32(uint1(x31)))
	out1[0] = x18
	out1[1] = x20
	out1[2] = x22
	out1[3] = x24
	out1[4] = x26
	out1[5] = x28
	out1[6] = x30
	out1[7] = x32
}

// FromMontgomery translates a field element out of the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval out1 mod m = (eval arg1 * ((2^32)⁻¹ mod m)^8) mod m
//   0 ≤ eval out1 < m
//
func FromMontgomery(out1 *NonMontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement) {
	x1 := arg1[0]
	var x2 uint32
	_, x2 = bits.Mul32(x1, 0x5588b13f)
	var x4 uint32
	var x5 uint32
	x5, x4 = bits.Mul32(x2, 0xffffffff)
	var x6 uint32
	var x7 uint32
	x7, x6 = bits.Mul32(x2, 0xffffffff)
	var x8 uint32
	var x9 uint32
	x9, x8 = bits.Mul32(x2, 0xffffffff)
	var x10 uint32
	var x11 uint32
	x11, x10 = bits.Mul32(x2, 0xfffffffe)
	var x12 uint32
	var x13 uint32
	x13, x12 = bits.Mul32(x2, 0xbaaedce6)
	var x14 uint32
	var x15 uint32
	x15, x14 = bits.Mul32(x2, 0xaf48a03b)
	var x16 uint32
	var x17 uint32
	x17, x16 = bits.Mul32(x2, 0xbfd25e8c)
	var x18 uint32
	var x19 uint32
	x19, x18 = bits.Mul32(x2, 0xd0364141)
	var x20 uint32
	var x21 uint32
	x20, x21 = bits.Add32(x19, x16, uint32(0x0))
	var x22 uint32
	var x23 uint32
	x22, x23 = bits.Add32(x17, x14, uint32(uint1(x21)))
	var x24 uint32
	var x25 uint32
	x24, x25 = bits.Add32(x15, x12, uint32(uint1(x23)))
	var x26 uint32
	var x27 uint32
	x26, x27 = bits.Add32(x13, x10, uint32(uint1(x25)))
	var x28 uint32
	var x29 uint32
	x28, x29 = bits.Add32(x11, x8, uint32(uint1(x27)))
	var x30 uint32
	var x31 uint32
	x30, x31 = bits.Add32(x9, x6, uint32(uint1(x29)))
	var x32 uint32
	var x33 uint32
	x32, x33 = bits.Add32(x7, x4, uint32(uint1(x31)))
	var x35 uint32
	_, x35 = bits.Add32(x1, x18, uint32(0x0))
	var x36 uint32
	var x37 uint32
	x36, x37 = bits.Add32(uint32(0x0), x20, uint32(uint1(x35)))
	var x38 uint32
	var x39 uint32
	x38, x39 = bits.Add32(uint32(0x0), x22, uint32(uint1(x37)))
	var x40 uint32
	var x41 uint32
	x40, x41 = bits.Add32(uint32(0x0), x24, uint32(uint1(x39)))
	var x42 uint32
	var x43 uint32
	x42, x43 = bits.Add32(uint32(0x0), x26, uint32(uint1(x41)))
	var x44 uint32
	var x45 uint32
	x44, x45 = bits.Add32(uint32(0x0), x28, uint32(uint1(x43)))
	var x46 uint32
	var x47 uint32
	x46, x47 = bits.Add32(uint32(0x0), x30, uint32(uint1(x45)))
	var x48 uint32
	var x49 uint32
	x48, x49 = bits.Add32(uint32(0x0), x32, uint32(uint1(x47)))
	var x50 uint32
	var x51 uint32
	x50, x51 = bits.Add32(uint32(0x0), (uint32(uint1(x33)) + x5), uint32(uint1(x49)))
	var x52 uint32
	var x53 uint32
	x52, x53 = bits.Add32(x36, arg1[1], uint32(0x0))
	var x54 uint32
	var x55 uint32
	x54, x55 = bits.Add32(x38, uint32(0x0), uint32(uint1(x53)))
	var x56 uint32
	var x57 uint32
	x56, x57 = bits.Add32(x40, uint32(0x0), uint32(uint1(x55)))
	var x58 uint32
	var x59 uint32
	x58, x59 = bits.Add32(x42, uint32(0x0), uint32(uint1(x57)))
	var x60 uint32
	var x61 uint32
	x60, x61 = bits.Add32(x44, uint32(0x0), uint32(uint1(x59)))
	var x62 uint32
	var x63 uint32
	x62, x63 = bits.Add32(x46, uint32(0x0), uint32(uint1(x61)))
	var x64 uint32
	var x65 uint32
	x64, x65 = bits.Add32(x48, uint32(0x0), uint32(uint1(x63)))
	var x66 uint32
	var x67 uint32
	x66, x67 = bits.Add32(x50, uint32(0x0), uint32(uint1(x65)))
	var x68 uint32
	_, x68 = bits.Mul32(x52, 0x5588b13f)
	var x70 uint32
	var x71 uint32
	x71, x70 = bits.Mul32(x68, 0xffffffff)
	var x72 uint32
	var x73 uint32
	x73, x72 = bits.Mul32(x68, 0xffffffff)
	var x74 uint32
	var x75 uint32
	x75, x74 = bits.Mul32(x68, 0xffffffff)
	var x76 uint32
	var x77 uint32
	x77, x76 = bits.Mul32(x68, 0xfffffffe)
	var x78 uint32
	var x79 uint32
	x79, x78 = bits.Mul32(x68, 0xbaaedce6)
	var x80 uint32
	var x81 uint32
	x81, x80 = bits.Mul32(x68, 0xaf48a03b)
	var x82 uint32
	var x83 uint32
	x83, x82 = bits.Mul32(x68, 0xbfd25e8c)
	var x84 uint32
	var x85 uint32
	x85, x84 = bits.Mul32(x68, 0xd0364141)
	var x86 uint32
	var x87 uint32
	x86, x87 = bits.Add32(x85, x82, uint32(0x0))
	var x88 uint32
	var x89 uint32
	x88, x89 = bits.Add32(x83, x80, uint32(uint1(x87)))
	var x90 uint32
	var x91 uint32
	x90, x91 = bits.Add32(x81, x78, uint32(uint1(x89)))
	var x92 uint32
	var x93 uint32
	x92, x93 = bits.Add32(x79, x76, uint32(uint1(x91)))
	var x94 uint32
	var x95 uint32
	x94, x95 = bits.Add32(x77, x74, uint32(uint1(x93)))
	var x96 uint32
	var x97 uint32
	x96, x97 = bits.Add32(x75, x72, uint32(uint1(x95)))
	var x98 uint32
	var x99 uint32
	x98, x99 = bits.Add32(x73, x70, uint32(uint1(x97)))
	var x101 uint32
	_, x101 = bits.Add32(x52, x84, uint32(0x0))
	var x102 uint32
	var x103 uint32
	x102, x103 = bits.Add32(x54, x86, uint32(uint1(x101)))
	var x104 uint32
	var x105 uint32
	x104, x105 = bits.Add32(x56, x88, uint32(uint1(x103)))
	var x106 uint32
	var x107 uint32
	x106, x107 = bits.Add32(x58, x90, uint32(uint1(x105)))
	var x108 uint32
	var x109 uint32
	x108, x109 = bits.Add32(x60, x92, uint32(uint1(x107)))
	var x110 uint32
	var x111 uint32
	x110, x111 = bits.Add32(x62, x94, uint32(uint1(x109)))
	var x112 uint32
	var x113 uint32
	x112, x113 = bits.Add32(x64, x96, uint32(uint1(x111)))
	var x114 uint32
	var x115 uint32
	x114, x115 = bits.Add32(x66, x98, uint32(uint1(x113)))
	var x116 uint32
	var x117 uint32
	x116, x117 = bits.Add32((uint32(uint1(x67)) + uint32(uint1(x51))), (uint32(uint1(x99)) + x71), uint32(uint1(x115)))
	var x118 uint32
	var x119 uint32
	x118, x119 = bits.Add32(x102, arg1[2], uint32(0x0))
	var x120 uint32
	var x121 uint32
	x120, x121 = bits.Add32(x104, uint32(0x0), uint32(uint1(x119)))
	var x122 uint32
	var x123 uint32
	x122, x123 = bits.Add32(x106, uint32(0x0), uint32(uint1(x121)))
	var x124 uint32
	var x125 uint32
	x124, x125 = bits.Add32(x108, uint32(0x0), uint32(uint1(x123)))
	var x126 uint32
	var x127 uint32
	x126, x127 = bits.Add32(x110, uint32(0x0), uint32(uint1(x125)))
	var x128 uint32
	var x129 uint32
	x128, x129 = bits.Add32(x112, uint32(0x0), uint32(uint1(x127)))
	var x130 uint32
	var x131 uint32
	x130, x131 = bits.Add32(x114, uint32(0x0), uint32(uint1(x129)))
	var x132 uint32
	var x133 uint32
	x132, x133 = bits.Add32(x116, uint32(0x0), uint32(uint1(x131)))
	var x134 uint32
	_, x134 = bits.Mul32(x118, 0x5588b13f)
	var x136 uint32
	var x137 uint32
	x137, x136 = bits.Mul32(x134, 0xffffffff)
	var x138 uint32
	var x139 uint32
	x139, x138 = bits.Mul32(x134, 0xffffffff)
	var x140 uint32
	var x141 uint32
	x141, x140 = bits.Mul32(x134, 0xffffffff)
	var x142 uint32
	var x143 uint32
	x143, x142 = bits.Mul32(x134, 0xfffffffe)
	var x144 uint32
	var x145 uint32
	x145, x144 = bits.Mul32(x134, 0xbaaedce6)
	var x146 uint32
	var x147 uint32
	x147, x146 = bits.Mul32(x134, 0xaf48a03b)
	var x148 uint32
	var x149 uint32
	x149, x148 = bits.Mul32(x134, 0xbfd25e8c)
	var x150 uint32
	var x151 uint32
	x151, x150 = bits.Mul32(x134, 0xd0364141)
	var x152 uint32
	var x153 uint32
	x152, x153 = bits.Add32(x151, x148, uint32(0x0))
	var x154 uint32
	var x155 uint32
	x154, x155 = bits.Add32(x149, x146, uint32(uint1(x153)))
	var x156 uint32
	var x157 uint32
	x156, x157 = bits.Add32(x147, x144, uint32(uint1(x155)))
	var x158 uint32
	var x159 uint32
	x158, x159 = bits.Add32(x145, x142, uint32(uint1(x157)))
	var x160 uint32
	var x161 uint32
	x160, x161 = bits.Add32(x143, x140, uint32(uint1(x159)))
	var x162 uint32
	var x163 uint32
	x162, x163 = bits.Add32(x141, x138, uint32(uint1(x161)))
	var x164 uint32
	var x165 uint32
	x164, x165 = bits.Add32(x139, x136, uint32(uint1(x163)))
	var x167 uint32
	_, x167 = bits.Add32(x118, x150, uint32(0x0))
	var x168 uint32
	var x169 uint32
	x168, x169 = bits.Add32(x120, x152, uint32(uint1(x167)))
	var x170 uint32
	var x171 uint32
	x170, x171 = bits.Add32(x122, x154, uint32(uint1(x169)))
	var x172 uint32
	var x173 uint32
	x172, x173 = bits.Add32(x124, x156, uint32(uint1(x171)))
	var x174 uint32
	var x175 uint32
	x174, x175 = bits.Add32(x126, x158, uint32(uint1(x173)))
	var x176 uint32
	var x177 uint32
	x176, x177 = bits.Add32(x128, x160, uint32(uint1(x175)))
	var x178 uint32
	var x179 uint32
	x178, x179 = bits.Add32(x130, x162, uint32(uint1(x177)))
	var x180 uint32
	var x181 uint32
	x180, x181 = bits.Add32(x132, x164, uint32(uint1(x179)))
	var x182 uint32
	var x183 uint32
	x182, x183 = bits.Add32((uint32(uint1(x133)) + uint32(uint1(x117))), (uint32(uint1(x165)) + x137), uint32(uint1(x181)))
	var x184 uint32
	var x185 uint32
	x184, x185 = bits.Add32(x168, arg1[3], uint32(0x0))
	var x186 uint32
	var x187 uint32
	x186, x187 = bits.Add32(x170, uint32(0x0), uint32(uint1(x185)))
	var x188 uint32
	var x189 uint32
	x188, x189 = bits.Add32(x172, uint32(0x0), uint32(uint1(x187)))
	var x190 uint32
	var x191 uint32
	x190, x191 = bits.Add32(x174, uint32(0x0), uint32(uint1(x189)))
	var x192 uint32
	var x193 uint32
	x192, x193 = bits.Add32(x176, uint32(0x0), uint32(uint1(x191)))
	var x194 uint32
	var x195 uint32
	x194, x195 = bits.Add32(x178, uint32(0x0), uint32(uint1(x193)))
	var x196 uint32
	var x197 uint32
	x196, x197 = bits.Add32(x180, uint32(0x0), uint32(uint1(x195)))
	var x198 uint32
	var x199 uint32
	x198, x199 = bits.Add32(x182, uint32(0x0), uint32(uint1(x197)))
	var x200 uint32
	_, x200 = bits.Mul32(x184, 0x5588b13f)
	var x202 uint32
	var x203 uint32
	x203, x202 = bits.Mul32(x200, 0xffffffff)
	var x204 uint32
	var x205 uint32
	x205, x204 = bits.Mul32(x200, 0xffffffff)
	var x206 uint32
	var x207 uint32
	x207, x206 = bits.Mul32(x200, 0xffffffff)
	var x208 uint32
	var x209 uint32
	x209, x208 = bits.Mul32(x200, 0xfffffffe)
	var x210 uint32
	var x211 uint32
	x211, x210 = bits.Mul32(x200, 0xbaaedce6)
	var x212 uint32
	var x213 uint32
	x213, x212 = bits.Mul32(x200, 0xaf48a03b)
	var x214 uint32
	var x215 uint32
	x215, x214 = bits.Mul32(x200, 0xbfd25e8c)
	var x216 uint32
	var x217 uint32
	x217, x216 = bits.Mul32(x200, 0xd0364141)
	var x218 uint32
	var x219 uint32
	x218, x219 = bits.Add32(x217, x214, uint32(0x0))
	var x220 uint32
	var x221 uint32
	x220, x221 = bits.Add32(x215, x212, uint32(uint1(x219)))
	var x222 uint32
	var x223 uint32
	x222, x223 = bits.Add32(x213, x210, uint32(uint1(x221)))
	var x224 uint32
	var x225 uint32
	x224, x225 = bits.Add32(x211, x208, uint32(uint1(x223)))
	var x226 uint32
	var x227 uint32
	x226, x227 = bits.Add32(x209, x206, uint32(uint1(x225)))
	var x228 uint32
	var x229 uint32
	x228, x229 = bits.Add32(x207, x204, uint32(uint1(x227)))
	var x230 uint32
	var x231 uint32
	x230, x231 = bits.Add32(x205, x202, uint32(uint1(x229)))
	var x233 uint32
	_, x233 = bits.Add32(x184, x216, uint32(0x0))
	var x234 uint32
	var x235 uint32
	x234, x235 = bits.Add32(x186, x218, uint32(uint1(x233)))
	var x236 uint32
	var x237 uint32
	x236, x237 = bits.Add32(x188, x220, uint32(uint1(x235)))
	var x238 uint32
	var x239 uint32
	x238, x239 = bits.Add32(x190, x222, uint32(uint1(x237)))
	var x240 uint32
	var x241 uint32
	x240, x241 = bits.Add32(x192, x224, uint32(uint1(x239)))
	var x242 uint32
	var x243 uint32
	x242, x243 = bits.Add32(x194, x226, uint32(uint1(x241)))
	var x244 uint32
	var x245 uint32
	x244, x245 = bits.Add32(x196, x228, uint32(uint1(x243)))
	var x246 uint32
	var x247 uint32
	x246, x247 = bits.Add32(x198, x230, uint32(uint1(x245)))
	var x248 uint32
	var x249 uint32
	x248, x249 = bits.Add32((uint32(uint1(x199)) + uint32(uint1(x183))), (uint32(uint1(x231)) + x203), uint32(uint1(x247)))
	var x250 uint32
	var x251 uint32
	x250, x251 = bits.Add32(x234, arg1[4], uint32(0x0))
	var x252 uint32
	var x253 uint32
	x252, x253 = bits.Add32(x236, uint32(0x0), uint32(uint1(x251)))
	var x254 uint32
	var x255 uint32
	x254, x255 = bits.Add32(x238, uint32(0x0), uint32(uint1(x253)))
	var x256 uint32
	var x257 uint32
	x256, x257 = bits.Add32(x240, uint32(0x0), uint32(uint1(x255)))
	var x258 uint32
	var x259 uint32
	x258, x259 = bits.Add32(x242, uint32(0x0), uint32(uint1(x257)))
	var x260 uint32
	var x261 uint32
	x260, x261 = bits.Add32(x244, uint32(0x0), uint32(uint1(x259)))
	var x262 uint32
	var x263 uint32
	x262, x263 = bits.Add32(x246, uint32(0x0), uint32(uint1(x261)))
	var x264 uint32
	var x265 uint32
	x264, x265 = bits.Add32(x248, uint32(0x0), uint32(uint1(x263)))
	var x266 uint32
	_, x266 = bits.Mul32(x250, 0x5588b13f)
	var x268 uint32
	var x269 uint32
	x269, x268 = bits.Mul32(x266, 0xffffffff)
	var x270 uint32
	var x271 uint32
	x271, x270 = bits.Mul32(x266, 0xffffffff)
	var x272 uint32
	var x273 uint32
	x273, x272 = bits.Mul32(x266, 0xffffffff)
	var x274 uint32
	var x275 uint32
	x275, x274 = bits.Mul32(x266, 0xfffffffe)
	var x276 uint32
	var x277 uint32
	x277, x276 = bits.Mul32(x266, 0xbaaedce6)
	var x278 uint32
	var x279 uint32
	x279, x278 = bits.Mul32(x266, 0xaf48a03b)
	var x280 uint32
	var x281 uint32
	x281, x280 = bits.Mul32(x266, 0xbfd25e8c)
	var x282 uint32
	var x283 uint32
	x283, x282 = bits.Mul32(x266, 0xd0364141)
	var x284 uint32
	var x285 uint32
	x284, x285 = bits.Add32(x283, x280, uint32(0x0))
	var x286 uint32
	var x287 uint32
	x286, x287 = bits.Add32(x281, x278, uint32(uint1(x285)))
	var x288 uint32
	var x289 uint32
	x288, x289 = bits.Add32(x279, x276, uint32(uint1(x287)))
	var x290 uint32
	var x291 uint32
	x290, x291 = bits.Add32(x277, x274, uint32(uint1(x289)))
	var x292 uint32
	var x293 uint32
	x292, x293 = bits.Add32(x275, x272, uint32(uint1(x291)))
	var x294 uint32
	var x295 uint32
	x294, x295 = bits.Add32(x273, x270, uint32(uint1(x293)))
	var x296 uint32
	var x297 uint32
	x296, x297 = bits.Add32(x271, x268, uint32(uint1(x295)))
	var x299 uint32
	_, x299 = bits.Add32(x250, x282, uint32(0x0))
	var x300 uint32
	var x301 uint32
	x300, x301 = bits.Add32(x252, x284, uint32(uint1(x299)))
	var x302 uint32
	var x303 uint32
	x302, x303 = bits.Add32(x254, x286, uint32(uint1(x301)))
	var x304 uint32
	var x305 uint32
	x304, x305 = bits.Add32(x256, x288, uint32(uint1(x303)))
	var x306 uint32
	var x307 uint32
	x306, x307 = bits.Add32(x258, x290, uint32(uint1(x305)))
	var x308 uint32
	var x309 uint32
	x308, x309 = bits.Add32(x260, x292, uint32(uint1(x307)))
	var x310 uint32
	var x311 uint32
	x310, x311 = bits.Add32(x262, x294, uint32(uint1(x309)))
	var x312 uint32
	var x313 uint32
	x312, x313 = bits.Add32(x264, x296, uint32(uint1(x311)))
	var x314 uint32
	var x315 uint32
	x314, x315 = bits.Add32((uint32(uint1(x265)) + uint32(uint1(x249))), (uint32(uint1(x297)) + x269), uint32(uint1(x313)))
	var x316 uint32
	var x317 uint32
	x316, x317 = bits.Add32(x300, arg1[5], uint32(0x0))
	var x318 uint32
	var x319 uint32
	x318, x319 = bits.Add32(x302, uint32(0x0), uint32(uint1(x317)))
	var x320 uint32
	var x321 uint32
	x320, x321 = bits.Add32(x304, uint32(0x0), uint32(uint1(x319)))
	var x322 uint32
	var x323 uint32
	x322, x323 = bits.Add32(x306, uint32(0x0), uint32(uint1(x321)))
	var x324 uint32
	var x325 uint32
	x324, x325 = bits.Add32(x308, uint32(0x0), uint32(uint1(x323)))
	var x326 uint32
	var x327 uint32
	x326, x327 = bits.Add32(x310, uint32(0x0), uint32(uint1(x325)))
	var x328 uint32
	var x329 uint32
	x328, x329 = bits.Add32(x312, uint32(0x0), uint32(uint1(x327)))
	var x330 uint32
	var x331 uint32
	x330, x331 = bits.Add32(x314, uint32(0x0), uint32(uint1(x329)))
	var x332 uint32
	_, x332 = bits.Mul32(x316, 0x5588b13f)
	var x334 uint32
	var x335 uint32
	x335, x334 = bits.Mul32(x332, 0xffffffff)
	var x336 uint32
	var x337 uint32
	x337, x336 = bits.Mul32(x332, 0xffffffff)
	var x338 uint32
	var x339 uint32
	x339, x338 = bits.Mul32(x332, 0xffffffff)
	var x340 uint32
	var x341 uint32
	x341, x340 = bits.Mul32(x332, 0xfffffffe)
	var x342 uint32
	var x343 uint32
	x343, x342 = bits.Mul32(x332, 0xbaaedce6)
	var x344 uint32
	var x345 uint32
	x345, x344 = bits.Mul32(x332, 0xaf48a03b)
	var x346 uint32
	var x347 uint32
	x347, x346 = bits.Mul32(x332, 0xbfd25e8c)
	var x348 uint32
	var x349 uint32
	x349, x348 = bits.Mul32(x332, 0xd0364141)
	var x350 uint32
	var x351 uint32
	x350, x351 = bits.Add32(x349, x346, uint32(0x0))
	var x352 uint32
	var x353 uint32
	x352, x353 = bits.Add32(x347, x344, uint32(uint1(x351)))
	var x354 uint32
	var x355 uint32
	x354, x355 = bits.Add32(x345, x342, uint32(uint1(x353)))
	var x356 uint32
	var x357 uint32
	x356, x357 = bits.Add32(x343, x340, uint32(uint1(x355)))
	var x358 uint32
	var x359 uint32
	x358, x359 = bits.Add32(x341, x338, uint32(uint1(x357)))
	var x360 uint32
	var x361 uint32
	x360, x361 = bits.Add32(x339, x336, uint32(uint1(x359)))
	var x362 uint32
	var x363 uint32
	x362, x363 = bits.Add32(x337, x334, uint32(uint1(x361)))
	var x365 uint32
	_, x365 = bits.Add32(x316, x348, uint32(0x0))
	var x366 uint32
	var x367 uint32
	x366, x367 = bits.Add32(x318, x350, uint32(uint1(x365)))
	var x368 uint32
	var x369 uint32
	x368, x369 = bits.Add32(x320, x352, uint32(uint1(x367)))
	var x370 uint32
	var x371 uint32
	x370, x371 = bits.Add32(x322, x354, uint32(uint1(x369)))
	var x372 uint32
	var x373 uint32
	x372, x373 = bits.Add32(x324, x356, uint32(uint1(x371)))
	var x374 uint32
	var x375 uint32
	x374, x375 = bits.Add32(x326, x358, uint32(uint1(x373)))
	var x376 uint32
	var x377 uint32
	x376, x377 = bits.Add32(x328, x360, uint32(uint1(x375)))
	var x378 uint32
	var x379 uint32
	x378, x379 = bits.Add32(x330, x362, uint32(uint1(x377)))
	var x380 uint32
	var x381 uint32
	x380, x381 = bits.Add32((uint32(uint1(x331)) + uint32(uint1(x315))), (uint32(uint1(x363)) + x335), uint32(uint1(x379)))
	var x382 uint32
	var x383 uint32
	x382, x383 = bits.Add32(x366, arg1[6], uint32(0x0))
	var x384 uint32
	var x385 uint32
	x384, x385 = bits.Add32(x368, uint32(0x0), uint32(uint1(x383)))
	var x386 uint32
	var x387 uint32
	x386, x387 = bits.Add32(x370, uint32(0x0), uint32(uint1(x385)))
	var x388 uint32
	var x389 uint32
	x388, x389 = bits.Add32(x372, uint32(0x0), uint32(uint1(x387)))
	var x390 uint32
	var x391 uint32
	x390, x391 = bits.Add32(x374, uint32(0x0), uint32(uint1(x389)))
	var x392 uint32
	var x393 uint32
	x392, x393 = bits.Add32(x376, uint32(0x0), uint32(uint1(x391)))
	var x394 uint32
	var x395 uint32
	x394, x395 = bits.Add32(x378, uint32(0x0), uint32(uint1(x393)))
	var x396 uint32
	var x397 uint32
	x396, x397 = bits.Add32(x380, uint32(0x0), uint32(uint1(x395)))
	var x398 uint32
	_, x398 = bits.Mul32(x382, 0x5588b13f)
	var x400 uint32
	var x401 uint32
	x401, x400 = bits.Mul32(x398, 0xffffffff)
	var x402 uint32
	var x403 uint32
	x403, x402 = bits.Mul32(x398, 0xffffffff)
	var x404 uint32
	var x405 uint32
	x405, x404 = bits.Mul32(x398, 0xffffffff)
	var x406 uint32
	var x407 uint32
	x407, x406 = bits.Mul32(x398, 0xfffffffe)
	var x408 uint32
	var x409 uint32
	x409, x408 = bits.Mul32(x398, 0xbaaedce6)
	var x410 uint32
	var x411 uint32
	x411, x410 = bits.Mul32(x398, 0xaf48a03b)
	var x412 uint32
	var x413 uint32
	x413, x412 = bits.Mul32(x398, 0xbfd25e8c)
	var x414 uint32
	var x415 uint32
	x415, x414 = bits.Mul32(x398, 0xd0364141)
	var x416 uint32
	var x417 uint32
	x416, x417 = bits.Add32(x415, x412, uint32(0x0))
	var x418 uint32
	var x419 uint32
	x418, x419 = bits.Add32(x413, x410, uint32(uint1(x417)))
	var x420 uint32
	var x421 uint32
	x420, x421 = bits.Add32(x411, x408, uint32(uint1(x419)))
	var x422 uint32
	var x423 uint32
	x422, x423 = bits.Add32(x409, x406, uint32(uint1(x421)))
	var x424 uint32
	var x425 uint32
	x424, x425 = bits.Add32(x407, x404, uint32(uint1(x423)))
	var x426 uint32
	var x427 uint32
	x426, x427 = bits.Add32(x405, x402, uint32(uint1(x425)))
	var x428 uint32
	var x429 uint32
	x428, x429 = bits.Add32(x403, x400, uint32(uint1(x427)))
	var x431 uint32
	_, x431 = bits.Add32(x382, x414, uint32(0x0))
	var x432 uint32
	var x433 uint32
	x432, x433 = bits.Add32(x384, x416, uint32(uint1(x431)))
	var x434 uint32
	var x435 uint32
	x434, x435 = bits.Add32(x386, x418, uint32(uint1(x433)))
	var x436 uint32
	var x437 uint32
	x436, x437 = bits.Add32(x388, x420, uint32(uint1(x435)))
	var x438 uint32
	var x439 uint32
	x438, x439 = bits.Add32(x390, x422, uint32(uint1(x437)))
	var x440 uint32
	var x441 uint32
	x440, x441 = bits.Add32(x392, x424, uint32(uint1(x439)))
	var x442 uint32
	var x443 uint32
	x442, x443 = bits.Add32(x394, x426, uint32(uint1(x441)))
	var x444 uint32
	var x445 uint32
	x444, x445 = bits.Add32(x396, x428, uint32(uint1(x443)))
	var x446 uint32
	var x447 uint32
	x446, x447 = bits.Add32((uint32(uint1(x397)) + uint32(uint1(x381))), (uint32(uint1(x429)) + x401), uint32(uint1(x445)))
	var x448 uint32
	var x449 uint32
	x448, x449 = bits.Add32(x432, arg1[7], uint32(0x0))
	var x450 uint32
	var x451 uint32
	x450, x451 = bits.Add32(x434, uint32(0x0), uint32(uint1(x449)))
	var x452 uint32
	var x453 uint32
	x452, x453 = bits.Add32(x436, uint32(0x0), uint32(uint1(x451)))
	var x454 uint32
	var x455 uint32
	x454, x455 = bits.Add32(x438, uint32(0x0), uint32(uint1(x453)))
	var x456 uint32
	var x457 uint32
	x456, x457 = bits.Add32(x440, uint32(0x0), uint32(uint1(x455)))
	var x458 uint32
	var x459 uint32
	x458, x459 = bits.Add32(x442, uint32(0x0), uint32(uint1(x457)))
	var x460 uint32
	var x461 uint32
	x460, x461 = bits.Add32(x444, uint32(0x0), uint32(uint1(x459)))
	var x462 uint32
	var x463 uint32
	x462, x463 = bits.Add32(x446, uint32(0x0), uint32(uint1(x461)))
	var x464 uint32
	_, x464 = bits.Mul32(x448, 0x5588b13f)
	var x466 uint32
	var x467 uint32
	x467, x466 = bits.Mul32(x464, 0xffffffff)
	var x468 uint32
	var x469 uint32
	x469, x468 = bits.Mul32(x464, 0xffffffff)
	var x470 uint32
	var x471 uint32
	x471, x470 = bits.Mul32(x464, 0xffffffff)
	var x472 uint32
	var x473 uint32
	x473, x472 = bits.Mul32(x464, 0xfffffffe)
	var x474 uint32
	var x475 uint32
	x475, x474 = bits.Mul32(x464, 0xbaaedce6)
	var x476 uint32
	var x477 uint32
	x477, x476 = bits.Mul32(x464, 0xaf48a03b)
	var x478 uint32
	var x479 uint32
	x479, x478 = bits.Mul32(x464, 0xbfd25e8c)
	var x480 uint32
	var x481 uint32
	x481, x480 = bits.Mul32(x464, 0xd0364141)
	var x482 uint32
	var x483 uint32
	x482, x483 = bits.Add32(x481, x478, uint32(0x0))
	var x484 uint32
	var x485 uint32
	x484, x485 = bits.Add32(x479, x476, uint32(uint1(x483)))
	var x486 uint32
	var x487 uint32
	x486, x487 = bits.Add32(x477, x474, uint32(uint1(x485)))
	var x488 uint32
	var x489 uint32
	x488, x489 = bits.Add32(x475, x472, uint32(uint1(x487)))
	var x490 uint32
	var x491 uint32
	x490, x491 = bits.Add32(x473, x470, uint32(uint1(x489)))
	var x492 uint32
	var x493 uint32
	x492, x493 = bits.Add32(x471, x468, uint32(uint1(x491)))
	var x494 uint32
	var x495 uint32
	x494, x495 = bits.Add32(x469, x466, uint32(uint1(x493)))
	var x497 uint32
	_, x497 = bits.Add32(x448, x480, uint32(0x0))
	var x498 uint32
	var x499 uint32
	x498, x499 = bits.Add32(x450, x482, uint32(uint1(x497)))
	var x500 uint32
	var x501 uint32
	x500, x501 = bits.Add32(x452, x484, uint32(uint1(x499)))
	var x502 uint32
	var x503 uint32
	x502, x503 = bits.Add32(x454, x486, uint32(uint1(x501)))
	var x504 uint32
	var x505 uint32
	x504, x505 = bits.Add32(x456, x488, uint32(uint1(x503)))
	var x506 uint32
	var x507 uint32
	x506, x507 = bits.Add32(x458, x490, uint32(uint1(x505)))
	var x508 uint32
	var x509 uint32
	x508, x509 = bits.Add32(x460, x492, uint32(uint1(x507)))
	var x510 uint32
	var x511 uint32
	x510, x511 = bits.Add32(x462, x494, uint32(uint1(x509)))
	var x512 uint32
	var x513 uint32
	x512, x513 = bits.Add32((uint32(uint1(x463)) + uint32(uint1(x447))), (uint32(uint1(x495)) + x467), uint32(uint1(x511)))
	var x514 uint32
	var x515 uint32
	x514, x515 = bits.Sub32(x498, 0xd0364141, uint32(0x0))
	var x516 uint32
	var x517 uint32
	x516, x517 = bits.Sub32(x500, 0xbfd25e8c, uint32(uint1(x515)))
	var x518 uint32
	var x519 uint32
	x518, x519 = bits.Sub32(x502, 0xaf48a03b, uint32(uint1(x517)))
	var x520 uint32
	var x521 uint32
	x520, x521 = bits.Sub32(x504, 0xbaaedce6, uint32(uint1(x519)))
	var x522 uint32
	var x523 uint32
	x522, x523 = bits.Sub32(x506, 0xfffffffe, uint32(uint1(x521)))
	var x524 uint32
	var x525 uint32
	x524, x525 = bits.Sub32(x508, 0xffffffff, uint32(uint1(x523)))
	var x526 uint32
	var x527 uint32
	x526, x527 = bits.Sub32(x510, 0xffffffff, uint32(uint1(x525)))
	var x528 uint32
	var x529 uint32
	x528, x529 = bits.Sub32(x512, 0xffffffff, uint32(uint1(x527)))
	var x531 uint32
	_, x531 = bits.Sub32(uint32(uint1(x513)), uint32(0x0), uint32(uint1(x529)))
	var x532 uint32
	cmovznzU32(&x532, uint1(x531), x514, x498)
	var x533 uint32
	cmovznzU32(&x533, uint1(x531), x516, x500)
	var x534 uint32
	cmovznzU32(&x534, uint1(x531), x518, x502)
	var x535 uint32
	cmovznzU32(&x535, uint1(x531), x520, x504)
	var x536 uint32
	cmovznzU32(&x536, uint1(x531), x522, x506)
	var x537 uint32
	cmovznzU32(&x537, uint1(x531), x524, x508)
	var x538 uint32
	cmovznzU32(&x538, uint1(x531), x526, x510)
	var x539 uint32
	cmovznzU32(&x539, uint1(x531), x528, x512)
	out1[0] = x532
	out1[1] = x533
	out1[2] = x534
	out1[3] = x535
	out1[4] = x536
	out1[5] = x537
	out1[6] = x538
	out1[7] = x539
}

// ToMontgomery translates a field element into the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = eval arg1 mod m
//   0 ≤ eval out1 < m
//
func ToMontgomery(out1 *MontgomeryDomainFieldElement, arg1 *NonMontgomeryDomainFieldElement) {
	x1 := arg1[1]
	x2 := arg1[2]
	x3 := arg1[3]
	x4 := arg1[4]
	x5 := arg1[5]
	x6 := arg1[6]
	x7 := arg1[7]
	x8 := arg1[0]
	var x9 uint32
	var x10 uint32
	x10, x9 = bits.Mul32(x8, 0x9d671cd5)
	var x11 uint32
	var x12 uint32
	x12, x11 = bits.Mul32(x8, 0x81c69bc5)
	var x13 uint32
	var x14 uint32
	x14, x13 = bits.Mul32(x8, 0xe697f5e4)
	var x15 uint32
	var x16 uint32
	x16, x15 = bits.Mul32(x8, 0x5bcd07c6)
	var x17 uint32
	var x18 uint32
	x18, x17 = bits.Mul32(x8, 0x741496c2)
	var x19 uint32
	var x20 uint32
	x20, x19 = bits.Mul32(x8, 0xe7cf878)
	var x21 uint32
	var x22 uint32
	x22, x21 = bits.Mul32(x8, 0x896cf214)
	var x23 uint32
	var x24 uint32
	x24, x23 = bits.Mul32(x8, 0x67d7d140)
	var x25 uint32
	var x26 uint32
	x25, x26 = bits.Add32(x24, x21, uint32(0x0))
	var x27 uint32
	var x28 uint32
	x27, x28 = bits.Add32(x22, x19, uint32(uint1(x26)))
	var x29 uint32
	var x30 uint32
	x29, x30 = bits.Add32(x20, x17, uint32(uint1(x28)))
	var x31 uint32
	var x32 uint32
	x31, x32 = bits.Add32(x18, x15, uint32(uint1(x30)))
	var x33 uint32
	var x34 uint32
	x33, x34 = bits.Add32(x16, x13, uint32(uint1(x32)))
	var x35 uint32
	var x36 uint32
	x35, x36 = bits.Add32(x14, x11, uint32(uint1(x34)))
	var x37 uint32
	var x38 uint32
	x37, x38 = bits.Add32(x12, x9, uint32(uint1(x36)))
	var x39 uint32
	_, x39 = bits.Mul32(x23, 0x5588b13f)
	var x41 uint32
	var x42 uint32
	x42, x41 = bits.Mul32(x39, 0xffffffff)
	var x43 uint32
	var x44 uint32
	x44, x43 = bits.Mul32(x39, 0xffffffff)
	var x45 uint32
	var x46 uint32
	x46, x45 = bits.Mul32(x39, 0xffffffff)
	var x47 uint32
	var x48 uint32
	x48, x47 = bits.Mul32(x39, 0xfffffffe)
	var x49 uint32
	var x50 uint32
	x50, x49 = bits.Mul32(x39, 0xbaaedce6)
	var x51 uint32
	var x52 uint32
	x52, x51 = bits.Mul32(x39, 0xaf48a03b)
	var x53 uint32
	var x54 uint32
	x54, x53 = bits.Mul32(x39, 0xbfd25e8c)
	var x55 uint32
	var x56 uint32
	x56, x55 = bits.Mul32(x39, 0xd0364141)
	var x57 uint32
	var x58 uint32
	x57, x58 = bits.Add32(x56, x53, uint32(0x0))
	var x59 uint32
	var x60 uint32
	x59, x60 = bits.Add32(x54, x51, uint32(uint1(x58)))
	var x61 uint32
	var x62 uint32
	x61, x62 = bits.Add32(x52, x49, uint32(uint1(x60)))
	var x63 uint32
	var x64 uint32
	x63, x64 = bits.Add32(x50, x47, uint32(uint1(x62)))
	var x65 uint32
	var x66 uint32
	x65, x66 = bits.Add32(x48, x45, uint32(uint1(x64)))
	var x67 uint32
	var x68 uint32
	x67, x68 = bits.Add32(x46, x43, uint32(uint1(x66)))
	var x69 uint32
	var x70 uint32
	x69, x70 = bits.Add32(x44, x41, uint32(uint1(x68)))
	var x72 uint32
	_, x72 = bits.Add32(x23, x55, uint32(0x0))
	var x73 uint32
	var x74 uint32
	x73, x74 = bits.Add32(x25, x57, uint32(uint1(x72)))
	var x75 uint32
	var x76 uint32
	x75, x76 = bits.Add32(x27, x59, uint32(uint1(x74)))
	var x77 uint32
	var x78 uint32
	x77, x78 = bits.Add32(x29, x61, uint32(uint1(x76)))
	var x79 uint32
	var x80 uint32
	x79, x80 = bits.Add32(x31, x63, uint32(uint1(x78)))
	var x81 uint32
	var x82 uint32
	x81, x82 = bits.Add32(x33, x65, uint32(uint1(x80)))
	var x83 uint32
	var x84 uint32
	x83, x84 = bits.Add32(x35, x67, uint32(uint1(x82)))
	var x85 uint32
	var x86 uint32
	x85, x86 = bits.Add32(x37, x69, uint32(uint1(x84)))
	var x87 uint32
	var x88 uint32
	x87, x88 = bits.Add32((uint32(uint1(x38)) + x10), (uint32(uint1(x70)) + x42), uint32(uint1(x86)))
	var x89 uint32
	var x90 uint32
	x90, x89 = bits.Mul32(x1, 0x9d671cd5)
	var x91 uint32
	var x92 uint32
	x92, x91 = bits.Mul32(x1, 0x81c69bc5)
	var x93 uint32
	var x94 uint32
	x94, x93 = bits.Mul32(x1, 0xe697f5e4)
	var x95 uint32
	var x96 uint32
	x96, x95 = bits.Mul32(x1, 0x5bcd07c6)
	var x97 uint32
	var x98 uint32
	x98, x97 = bits.Mul32(x1, 0x741496c2)
	var x99 uint32
	var x100 uint32
	x100, x99 = bits.Mul32(x1, 0xe7cf878)
	var x101 uint32
	var x102 uint32
	x102, x101 = bits.Mul32(x1, 0x896cf214)
	var x103 uint32
	var x104 uint32
	x104, x103 = bits.Mul32(x1, 0x67d7d140)
	var x105 uint32
	var x106 uint32
	x105, x106 = bits.Add32(x104, x101, uint32(0x0))
	var x107 uint32
	var x108 uint32
	x107, x108 = bits.Add32(x102, x99, uint32(uint1(x106)))
	var x109 uint32
	var x110 uint32
	x109, x110 = bits.Add32(x100, x97, uint32(uint1(x108)))
	var x111 uint32
	var x112 uint32
	x111, x112 = bits.Add32(x98, x95, uint32(uint1(x110)))
	var x113 uint32
	var x114 uint32
	x113, x114 = bits.Add32(x96, x93, uint32(uint1(x112)))
	var x115 uint32
	var x116 uint32
	x115, x116 = bits.Add32(x94, x91, uint32(uint1(x114)))
	var x117 uint32
	var x118 uint32
	x117, x118 = bits.Add32(x92, x89, uint32(uint1(x116)))
	var x119 uint32
	var x120 uint32
	x119, x120 = bits.Add32(x73, x103, uint32(0x0))
	var x121 uint32
	var x122 uint32
	x121, x122 = bits.Add32(x75, x105, uint32(uint1(x120)))
	var x123 uint32
	var x124 uint32
	x123, x124 = bits.Add32(x77, x107, uint32(uint1(x122)))
	var x125 uint32
	var x126 uint32
	x125, x126 = bits.Add32(x79, x109, uint32(uint1(x124)))
	var x127 uint32
	var x128 uint32
	x127, x128 = bits.Add32(x81, x111, uint32(uint1(x126)))
	var x129 uint32
	var x130 uint32
	x129, x130 = bits.Add32(x83, x113, uint32(uint1(x128)))
	var x131 uint32
	var x132 uint32
	x131, x132 = bits.Add32(x85, x115, uint32(uint1(x130)))
	var x133 uint32
	var x134 uint32
	x133, x134 = bits.Add32(x87, x117, uint32(uint1(x132)))
	var x135 uint32
	_, x135 = bits.Mul32(x119, 0x5588b13f)
	var x137 uint32
	var x138 uint32
	x138, x137 = bits.Mul32(x135, 0xffffffff)
	var x139 uint32
	var x140 uint32
	x140, x139 = bits.Mul32(x135, 0xffffffff)
	var x141 uint32
	var x142 uint32
	x142, x141 = bits.Mul32(x135, 0xffffffff)
	var x143 uint32
	var x144 uint32
	x144, x143 = bits.Mul32(x135, 0xfffffffe)
	var x145 uint32
	var x146 uint32
	x146, x145 = bits.Mul32(x135, 0xbaaedce6)
	var x147 uint32
	var x148 uint32
	x148, x147 = bits.Mul32(x135, 0xaf48a03b)
	var x149 uint32
	var x150 uint32
	x150, x149 = bits.Mul32(x135, 0xbfd25e8c)
	var x151 uint32
	var x152 uint32
	x152, x151 = bits.Mul32(x135, 0xd0364141)
	var x153 uint32
	var x154 uint32
	x153, x154 = bits.Add32(x152, x149, uint32(0x0))
	var x155 uint32
	var x156 uint32
	x155, x156 = bits.Add32(x150, x147, uint32(uint1(x154)))
	var x157 uint32
	var x158 uint32
	x157, x158 = bits.Add32(x148, x145, uint32(uint1(x156)))
	var x159 uint32
	var x160 uint32
	x159, x160 = bits.Add32(x146, x143, uint32(uint1(x158)))
	var x161 uint32
	var x162 uint32
	x161, x162 = bits.Add32(x144, x141, uint32(uint1(x160)))
	var x163 uint32
	var x164 uint32
	x163, x164 = bits.Add32(x142, x139, uint32(uint1(x162)))
	var x165 uint32
	var x166 uint32
	x165, x166 = bits.Add32(x140, x137, uint32(uint1(x164)))
	var x168 uint32
	_, x168 = bits.Add32(x119, x151, uint32(0x0))
	var x169 uint32
	var x170 uint32
	x169, x170 = bits.Add32(x121, x153, uint32(uint1(x168)))
	var x171 uint32
	var x172 uint32
	x171, x172 = bits.Add32(x123, x155, uint32(uint1(x170)))
	var x173 uint32
	var x174 uint32
	x173, x174 = bits.Add32(x125, x157, uint32(uint1(x172)))
	var x175 uint32
	var x176 uint32
	x175, x176 = bits.Add32(x127, x159, uint32(uint1(x174)))
	var x177 uint32
	var x178 uint32
	x177, x178 = bits.Add32(x129, x161, uint32(uint1(x176)))
	var x179 uint32
	var x180 uint32
	x179, x180 = bits.Add32(x131, x163, uint32(uint1(x178)))
	var x181 uint32
	var x182 uint32
	x181, x182 = bits.Add32(x133, x165, uint32(uint1(x180)))
	var x183 uint32
	var x184 uint32
	x183, x184 = bits.Add32(((uint32(uint1(x134)) + uint32(uint1(x88))) + (uint32(uint1(x118)) + x90)), (uint32(uint1(x166)) + x138), uint32(uint1(x182)))
	var x185 uint32
	var x186 uint32
	x186, x185 = bits.Mul32(x2, 0x9d671cd5)
	var x187 uint32
	var x188 uint32
	x188, x187 = bits.Mul32(x2, 0x81c69bc5)
	var x189 uint32
	var x190 uint32
	x190, x189 = bits.Mul32(x2, 0xe697f5e4)
	var x191 uint32
	var x192 uint32
	x192, x191 = bits.Mul32(x2, 0x5bcd07c6)
	var x193 uint32
	var x194 uint32
	x194, x193 = bits.Mul32(x2, 0x741496c2)
	var x195 uint32
	var x196 uint32
	x196, x195 = bits.Mul32(x2, 0xe7cf878)
	var x197 uint32
	var x198 uint32
	x198, x197 = bits.Mul32(x2, 0x896cf214)
	var x199 uint32
	var x200 uint32
	x200, x199 = bits.Mul32(x2, 0x67d7d140)
	var x201 uint32
	var x202 uint32
	x201, x202 = bits.Add32(x200, x197, uint32(0x0))
	var x203 uint32
	var x204 uint32
	x203, x204 = bits.Add32(x198, x195, uint32(uint1(x202)))
	var x205 uint32
	var x206 uint32
	x205, x206 = bits.Add32(x196, x193, uint32(uint1(x204)))
	var x207 uint32
	var x208 uint32
	x207, x208 = bits.Add32(x194, x191, uint32(uint1(x206)))
	var x209 uint32
	var x210 uint32
	x209, x210 = bits.Add32(x192, x189, uint32(uint1(x208)))
	var x211 uint32
	var x212 uint32
	x211, x212 = bits.Add32(x190, x187, uint32(uint1(x210)))
	var x213 uint32
	var x214 uint32
	x213, x214 = bits.Add32(x188, x185, uint32(uint1(x212)))
	var x215 uint32
	var x216 uint32
	x215, x216 = bits.Add32(x169, x199, uint32(0x0))
	var x217 uint32
	var x218 uint32
	x217, x218 = bits.Add32(x171, x201, uint32(uint1(x216)))
	var x219 uint32
	var x220 uint32
	x219, x220 = bits.Add32(x173, x203, uint32(uint1(x218)))
	var x221 uint32
	var x222 uint32
	x221, x222 = bits.Add32(x175, x205, uint32(uint1(x220)))
	var x223 uint32
	var x224 uint32
	x223, x224 = bits.Add32(x177, x207, uint32(uint1(x222)))
	var x225 uint32
	var x226 uint32
	x225, x226 = bits.Add32(x179, x209, uint32(uint1(x224)))
	var x227 uint32
	var x228 uint32
	x227, x228 = bits.Add32(x181, x211, uint32(uint1(x226)))
	var x229 uint32
	var x230 uint32
	x229, x230 = bits.Add32(x183, x213, uint32(uint1(x228)))
	var x231 uint32
	_, x231 = bits.Mul32(x215, 0x5588b13f)
	var x233 uint32
	var x234 uint32
	x234, x233 = bits.Mul32(x231, 0xffffffff)
	var x235 uint32
	var x236 uint32
	x236, x235 = bits.Mul32(x231, 0xffffffff)
	var x237 uint32
	var x238 uint32
	x238, x237 = bits.Mul32(x231, 0xffffffff)
	var x239 uint32
	var x240 uint32
	x240, x239 = bits.Mul32(x231, 0xfffffffe)
	var x241 uint32
	var x242 uint32
	x242, x241 = bits.Mul32(x231, 0xbaaedce6)
	var x243 uint32
	var x244 uint32
	x244, x243 = bits.Mul32(x231, 0xaf48a03b)
	var x245 uint32
	var x246 uint32
	x246, x245 = bits.Mul32(x231, 0xbfd25e8c)
	var x247 uint32
	var x248 uint32
	x248, x247 = bits.Mul32(x231, 0xd0364141)
	var x249 uint32
	var x250 uint32
	x249, x250 = bits.Add32(x248, x245, uint32(0x0))
	var x251 uint32
	var x252 uint32
	x251, x252 = bits.Add32(x246, x243, uint32(uint1(x250)))
	var x253 uint32
	var x254 uint32
	x253, x254 = bits.Add32(x244, x241, uint32(uint1(x252)))
	var x255 uint32
	var x256 uint32
	x255, x256 = bits.Add32(x242, x239, uint32(uint1(x254)))
	var x257 uint32
	var x258 uint32
	x257, x258 = bits.Add32(x240, x237, uint32(uint1(x256)))
	var x259 uint32
	var x260 uint32
	x259, x260 = bits.Add32(x238, x235, uint32(uint1(x258)))
	var x261 uint32
	var x262 uint32
	x261, x262 = bits.Add32(x236, x233, uint32(uint1(x260)))
	var x264 uint32
	_, x264 = bits.Add32(x215, x247, uint32(0x0))
	var x265 uint32
	var x266 uint32
	x265, x266 = bits.Add32(x217, x249, uint32(uint1(x264)))
	var x267 uint32
	var x268 uint32
	x267, x268 = bits.Add32(x219, x251, uint32(uint1(x266)))
	var x269 uint32
	var x270 uint32
	x269, x270 = bits.Add32(x221, x253, uint32(uint1(x268)))
	var x271 uint32
	var x272 uint32
	x271, x272 = bits.Add32(x223, x255, uint32(uint1(x270)))
	var x273 uint32
	var x274 uint32
	x273, x274 = bits.Add32(x225, x257, uint32(uint1(x272)))
	var x275 uint32
	var x276 uint32
	x275, x276 = bits.Add32(x227, x259, uint32(uint1(x274)))
	var x277 uint32
	var x278 uint32
	x277, x278 = bits.Add32(x229, x261, uint32(uint1(x276)))
	var x279 uint32
	var x280 uint32
	x279, x280 = bits.Add32(((uint32(uint1(x230)) + uint32(uint1(x184))) + (uint32(uint1(x214)) + x186)), (uint32(uint1(x262)) + x234), uint32(uint1(x278)))
	var x281 uint32
	var x282 uint32
	x282, x281 = bits.Mul32(x3, 0x9d671cd5)
	var x283 uint32
	var x284 uint32
	x284, x283 = bits.Mul32(x3, 0x81c69bc5)
	var x285 uint32
	var x286 uint32
	x286, x285 = bits.Mul32(x3, 0xe697f5e4)
	var x287 uint32
	var x288 uint32
	x288, x287 = bits.Mul32(x3, 0x5bcd07c6)
	var x289 uint32
	var x290 uint32
	x290, x289 = bits.Mul32(x3, 0x741496c2)
	var x291 uint32
	var x292 uint32
	x292, x291 = bits.Mul32(x3, 0xe7cf878)
	var x293 uint32
	var x294 uint32
	x294, x293 = bits.Mul32(x3, 0x896cf214)
	var x295 uint32
	var x296 uint32
	x296, x295 = bits.Mul32(x3, 0x67d7d140)
	var x297 uint32
	var x298 uint32
	x297, x298 = bits.Add32(x296, x293, uint32(0x0))
	var x299 uint32
	var x300 uint32
	x299, x300 = bits.Add32(x294, x291, uint32(uint1(x298)))
	var x301 uint32
	var x302 uint32
	x301, x302 = bits.Add32(x292, x289, uint32(uint1(x300)))
	var x303 uint32
	var x304 uint32
	x303, x304 = bits.Add32(x290, x287, uint32(uint1(x302)))
	var x305 uint32
	var x306 uint32
	x305, x306 = bits.Add32(x288, x285, uint32(uint1(x304)))
	var x307 uint32
	var x308 uint32
	x307, x308 = bits.Add32(x286, x283, uint32(uint1(x306)))
	var x309 uint32
	var x310 uint32
	x309, x310 = bits.Add32(x284, x281, uint32(uint1(x308)))
	var x311 uint32
	var x312 uint32
	x311, x312 = bits.Add32(x265, x295, uint32(0x0))
	var x313 uint32
	var x314 uint32
	x313, x314 = bits.Add32(x267, x297, uint32(uint1(x312)))
	var x315 uint32
	var x316 uint32
	x315, x316 = bits.Add32(x269, x299, uint32(uint1(x314)))
	var x317 uint32
	var x318 uint32
	x317, x318 = bits.Add32(x271, x301, uint32(uint1(x316)))
	var x319 uint32
	var x320 uint32
	x319, x320 = bits.Add32(x273, x303, uint32(uint1(x318)))
	var x321 uint32
	var x322 uint32
	x321, x322 = bits.Add32(x275, x305, uint32(uint1(x320)))
	var x323 uint32
	var x324 uint32
	x323, x324 = bits.Add32(x277, x307, uint32(uint1(x322)))
	var x325 uint32
	var x326 uint32
	x325, x326 = bits.Add32(x279, x309, uint32(uint1(x324)))
	var x327 uint32
	_, x327 = bits.Mul32(x311, 0x5588b13f)
	var x329 uint32
	var x330 uint32
	x330, x329 = bits.Mul32(x327, 0xffffffff)
	var x331 uint32
	var x332 uint32
	x332, x331 = bits.Mul32(x327, 0xffffffff)
	var x333 uint32
	var x334 uint32
	x334, x333 = bits.Mul32(x327, 0xffffffff)
	var x335 uint32
	var x336 uint32
	x336, x335 = bits.Mul32(x327, 0xfffffffe)
	var x337 uint32
	var x338 uint32
	x338, x337 = bits.Mul32(x327, 0xbaaedce6)
	var x339 uint32
	var x340 uint32
	x340, x339 = bits.Mul32(x327, 0xaf48a03b)
	var x341 uint32
	var x342 uint32
	x342, x341 = bits.Mul32(x327, 0xbfd25e8c)
	var x343 uint32
	var x344 uint32
	x344, x343 = bits.Mul32(x327, 0xd0364141)
	var x345 uint32
	var x346 uint32
	x345, x346 = bits.Add32(x344, x341, uint32(0x0))
	var x347 uint32
	var x348 uint32
	x347, x348 = bits.Add32(x342, x339, uint32(uint1(x346)))
	var x349 uint32
	var x350 uint32
	x349, x350 = bits.Add32(x340, x337, uint32(uint1(x348)))
	var x351 uint32
	var x352 uint32
	x351, x352 = bits.Add32(x338, x335, uint32(uint1(x350)))
	var x353 uint32
	var x354 uint32
	x353, x354 = bits.Add32(x336, x333, uint32(uint1(x352)))
	var x355 uint32
	var x356 uint32
	x355, x356 = bits.Add32(x334, x331, uint32(uint1(x354)))
	var x357 uint32
	var x358 uint32
	x357, x358 = bits.Add32(x332, x329, uint32(uint1(x356)))
	var x360 uint32
	_, x360 = bits.Add32(x311, x343, uint32(0x0))
	var x361 uint32
	var x362 uint32
	x361, x362 = bits.Add32(x313, x345, uint32(uint1(x360)))
	var x363 uint32
	var x364 uint32
	x363, x364 = bits.Add32(x315, x347, uint32(uint1(x362)))
	var x365 uint32
	var x366 uint32
	x365, x366 = bits.Add32(x317, x349, uint32(uint1(x364)))
	var x367 uint32
	var x368 uint32
	x367, x368 = bits.Add32(x319, x351, uint32(uint1(x366)))
	var x369 uint32
	var x370 uint32
	x369, x370 = bits.Add32(x321, x353, uint32(uint1(x368)))
	var x371 uint32
	var x372 uint32
	x371, x372 = bits.Add32(x323, x355, uint32(uint1(x370)))
	var x373 uint32
	var x374 uint32
	x373, x374 = bits.Add32(x325, x357, uint32(uint1(x372)))
	var x375 uint32
	var x376 uint32
	x375, x376 = bits.Add32(((uint32(uint1(x326)) + uint32(uint1(x280))) + (uint32(uint1(x310)) + x282)), (uint32(uint1(x358)) + x330), uint32(uint1(x374)))
	var x377 uint32
	var x378 uint32
	x378, x377 = bits.Mul32(x4, 0x9d671cd5)
	var x379 uint32
	var x380 uint32
	x380, x379 = bits.Mul32(x4, 0x81c69bc5)
	var x381 uint32
	var x382 uint32
	x382, x381 = bits.Mul32(x4, 0xe697f5e4)
	var x383 uint32
	var x384 uint32
	x384, x383 = bits.Mul32(x4, 0x5bcd07c6)
	var x385 uint32
	var x386 uint32
	x386, x385 = bits.Mul32(x4, 0x741496c2)
	var x387 uint32
	var x388 uint32
	x388, x387 = bits.Mul32(x4, 0xe7cf878)
	var x389 uint32
	var x390 uint32
	x390, x389 = bits.Mul32(x4, 0x896cf214)
	var x391 uint32
	var x392 uint32
	x392, x391 = bits.Mul32(x4, 0x67d7d140)
	var x393 uint32
	var x394 uint32
	x393, x394 = bits.Add32(x392, x389, uint32(0x0))
	var x395 uint32
	var x396 uint32
	x395, x396 = bits.Add32(x390, x387, uint32(uint1(x394)))
	var x397 uint32
	var x398 uint32
	x397, x398 = bits.Add32(x388, x385, uint32(uint1(x396)))
	var x399 uint32
	var x400 uint32
	x399, x400 = bits.Add32(x386, x383, uint32(uint1(x398)))
	var x401 uint32
	var x402 uint32
	x401, x402 = bits.Add32(x384, x381, uint32(uint1(x400)))
	var x403 uint32
	var x404 uint32
	x403, x404 = bits.Add32(x382, x379, uint32(uint1(x402)))
	var x405 uint32
	var x406 uint32
	x405, x406 = bits.Add32(x380, x377, uint32(uint1(x404)))
	var x407 uint32
	var x408 uint32
	x407, x408 = bits.Add32(x361, x391, uint32(0x0))
	var x409 uint32
	var x410 uint32
	x409, x410 = bits.Add32(x363, x393, uint32(uint1(x408)))
	var x411 uint32
	var x412 uint32
	x411, x412 = bits.Add32(x365, x395, uint32(uint1(x410)))
	var x413 uint32
	var x414 uint32
	x413, x414 = bits.Add32(x367, x397, uint32(uint1(x412)))
	var x415 uint32
	var x416 uint32
	x415, x416 = bits.Add32(x369, x399, uint32(uint1(x414)))
	var x417 uint32
	var x418 uint32
	x417, x418 = bits.Add32(x371, x401, uint32(uint1(x416)))
	var x419 uint32
	var x420 uint32
	x419, x420 = bits.Add32(x373, x403, uint32(uint1(x418)))
	var x421 uint32
	var x422 uint32
	x421, x422 = bits.Add32(x375, x405, uint32(uint1(x420)))
	var x423 uint32
	_, x423 = bits.Mul32(x407, 0x5588b13f)
	var x425 uint32
	var x426 uint32
	x426, x425 = bits.Mul32(x423, 0xffffffff)
	var x427 uint32
	var x428 uint32
	x428, x427 = bits.Mul32(x423, 0xffffffff)
	var x429 uint32
	var x430 uint32
	x430, x429 = bits.Mul32(x423, 0xffffffff)
	var x431 uint32
	var x432 uint32
	x432, x431 = bits.Mul32(x423, 0xfffffffe)
	var x433 uint32
	var x434 uint32
	x434, x433 = bits.Mul32(x423, 0xbaaedce6)
	var x435 uint32
	var x436 uint32
	x436, x435 = bits.Mul32(x423, 0xaf48a03b)
	var x437 uint32
	var x438 uint32
	x438, x437 = bits.Mul32(x423, 0xbfd25e8c)
	var x439 uint32
	var x440 uint32
	x440, x439 = bits.Mul32(x423, 0xd0364141)
	var x441 uint32
	var x442 uint32
	x441, x442 = bits.Add32(x440, x437, uint32(0x0))
	var x443 uint32
	var x444 uint32
	x443, x444 = bits.Add32(x438, x435, uint32(uint1(x442)))
	var x445 uint32
	var x446 uint32
	x445, x446 = bits.Add32(x436, x433, uint32(uint1(x444)))
	var x447 uint32
	var x448 uint32
	x447, x448 = bits.Add32(x434, x431, uint32(uint1(x446)))
	var x449 uint32
	var x450 uint32
	x449, x450 = bits.Add32(x432, x429, uint32(uint1(x448)))
	var x451 uint32
	var x452 uint32
	x451, x452 = bits.Add32(x430, x427, uint32(uint1(x450)))
	var x453 uint32
	var x454 uint32
	x453, x454 = bits.Add32(x428, x425, uint32(uint1(x452)))
	var x456 uint32
	_, x456 = bits.Add32(x407, x439, uint32(0x0))
	var x457 uint32
	var x458 uint32
	x457, x458 = bits.Add32(x409, x441, uint32(uint1(x456)))
	var x459 uint32
	var x460 uint32
	x459, x460 = bits.Add32(x411, x443, uint32(uint1(x458)))
	var x461 uint32
	var x462 uint32
	x461, x462 = bits.Add32(x413, x445, uint32(uint1(x460)))
	var x463 uint32
	var x464 uint32
	x463, x464 = bits.Add32(x415, x447, uint32(uint1(x462)))
	var x465 uint32
	var x466 uint32
	x465, x466 = bits.Add32(x417, x449, uint32(uint1(x464)))
	var x467 uint32
	var x468 uint32
	x467, x468 = bits.Add32(x419, x451, uint32(uint1(x466)))
	var x469 uint32
	var x470 uint32
	x469, x470 = bits.Add32(x421, x453, uint32(uint1(x468)))
	var x471 uint32
	var x472 uint32
	x471, x472 = bits.Add32(((uint32(uint1(x422)) + uint32(uint1(x376))) + (uint32(uint1(x406)) + x378)), (uint32(uint1(x454)) + x426), uint32(uint1(x470)))
	var x473 uint32
	var x474 uint32
	x474, x473 = bits.Mul32(x5, 0x9d671cd5)
	var x475 uint32
	var x476 uint32
	x476, x475 = bits.Mul32(x5, 0x81c69bc5)
	var x477 uint32
	var x478 uint32
	x478, x477 = bits.Mul32(x5, 0xe697f5e4)
	var x479 uint32
	var x480 uint32
	x480, x479 = bits.Mul32(x5, 0x5bcd07c6)
	var x481 uint32
	var x482 uint32
	x482, x481 = bits.Mul32(x5, 0x741496c2)
	var x483 uint32
	var x484 uint32
	x484, x483 = bits.Mul32(x5, 0xe7cf878)
	var x485 uint32
	var x486 uint32
	x486, x485 = bits.Mul32(x5, 0x896cf214)
	var x487 uint32
	var x488 uint32
	x488, x487 = bits.Mul32(x5, 0x67d7d140)
	var x489 uint32
	var x490 uint32
	x489, x490 = bits.Add32(x488, x485, uint32(0x0))
	var x491 uint32
	var x492 uint32
	x491, x492 = bits.Add32(x486, x483, uint32(uint1(x490)))
	var x493 uint32
	var x494 uint32
	x493, x494 = bits.Add32(x484, x481, uint32(uint1(x492)))
	var x495 uint32
	var x496 uint32
	x495, x496 = bits.Add32(x482, x479, uint32(uint1(x494)))
	var x497 uint32
	var x498 uint32
	x497, x498 = bits.Add32(x480, x477, uint32(uint1(x496)))
	var x499 uint32
	var x500 uint32
	x499, x500 = bits.Add32(x478, x475, uint32(uint1(x498)))
	var x501 uint32
	var x502 uint32
	x501, x502 = bits.Add32(x476, x473, uint32(uint1(x500)))
	var x503 uint32
	var x504 uint32
	x503, x504 = bits.Add32(x457, x487, uint32(0x0))
	var x505 uint32
	var x506 uint32
	x505, x506 = bits.Add32(x459, x489, uint32(uint1(x504)))
	var x507 uint32
	var x508 uint32
	x507, x508 = bits.Add32(x461, x491, uint32(uint1(x506)))
	var x509 uint32
	var x510 uint32
	x509, x510 = bits.Add32(x463, x493, uint32(uint1(x508)))
	var x511 uint32
	var x512 uint32
	x511, x512 = bits.Add32(x465, x495, uint32(uint1(x510)))
	var x513 uint32
	var x514 uint32
	x513, x514 = bits.Add32(x467, x497, uint32(uint1(x512)))
	var x515 uint32
	var x516 uint32
	x515, x516 = bits.Add32(x469, x499, uint32(uint1(x514)))
	var x517 uint32
	var x518 uint32
	x517, x518 = bits.Add32(x471, x501, uint32(uint1(x516)))
	var x519 uint32
	_, x519 = bits.Mul32(x503, 0x5588b13f)
	var x521 uint32
	var x522 uint32
	x522, x521 = bits.Mul32(x519, 0xffffffff)
	var x523 uint32
	var x524 uint32
	x524, x523 = bits.Mul32(x519, 0xffffffff)
	var x525 uint32
	var x526 uint32
	x526, x525 = bits.Mul32(x519, 0xffffffff)
	var x527 uint32
	var x528 uint32
	x528, x527 = bits.Mul32(x519, 0xfffffffe)
	var x529 uint32
	var x530 uint32
	x530, x529 = bits.Mul32(x519, 0xbaaedce6)
	var x531 uint32
	var x532 uint32
	x532, x531 = bits.Mul32(x519, 0xaf48a03b)
	var x533 uint32
	var x534 uint32
	x534, x533 = bits.Mul32(x519, 0xbfd25e8c)
	var x535 uint32
	var x536 uint32
	x536, x535 = bits.Mul32(x519, 0xd0364141)
	var x537 uint32
	var x538 uint32
	x537, x538 = bits.Add32(x536, x533, uint32(0x0))
	var x539 uint32
	var x540 uint32
	x539, x540 = bits.Add32(x534, x531, uint32(uint1(x538)))
	var x541 uint32
	var x542 uint32
	x541, x542 = bits.Add32(x532, x529, uint32(uint1(x540)))
	var x543 uint32
	var x544 uint32
	x543, x544 = bits.Add32(x530, x527, uint32(uint1(x542)))
	var x545 uint32
	var x546 uint32
	x545, x546 = bits.Add32(x528, x525, uint32(uint1(x544)))
	var x547 uint32
	var x548 uint32
	x547, x548 = bits.Add32(x526, x523, uint32(uint1(x546)))
	var x549 uint32
	var x550 uint32
	x549, x550 = bits.Add32(x524, x521, uint32(uint1(x548)))
	var x552 uint32
	_, x552 = bits.Add32(x503, x535, uint32(0x0))
	var x553 uint32
	var x554 uint32
	x553, x554 = bits.Add32(x505, x537, uint32(uint1(x552)))
	var x555 uint32
	var x556 uint32
	x555, x556 = bits.Add32(x507, x539, uint32(uint1(x554)))
	var x557 uint32
	var x558 uint32
	x557, x558 = bits.Add32(x509, x541, uint32(uint1(x556)))
	var x559 uint32
	var x560 uint32
	x559, x560 = bits.Add32(x511, x543, uint32(uint1(x558)))
	var x561 uint32
	var x562 uint32
	x561, x562 = bits.Add32(x513, x545, uint32(uint1(x560)))
	var x563 uint32
	var x564 uint32
	x563, x564 = bits.Add32(x515, x547, uint32(uint1(x562)))
	var x565 uint32
	var x566 uint32
	x565, x566 = bits.Add32(x517, x549, uint32(uint1(x564)))
	var x567 uint32
	var x568 uint32
	x567, x568 = bits.Add32(((uint32(uint1(x518)) + uint32(uint1(x472))) + (uint32(uint1(x502)) + x474)), (uint32(uint1(x550)) + x522), uint32(uint1(x566)))
	var x569 uint32
	var x570 uint32
	x570, x569 = bits.Mul32(x6, 0x9d671cd5)
	var x571 uint32
	var x572 uint32
	x572, x571 = bits.Mul32(x6, 0x81c69bc5)
	var x573 uint32
	var x574 uint32
	x574, x573 = bits.Mul32(x6, 0xe697f5e4)
	var x575 uint32
	var x576 uint32
	x576, x575 = bits.Mul32(x6, 0x5bcd07c6)
	var x577 uint32
	var x578 uint32
	x578, x577 = bits.Mul32(x6, 0x741496c2)
	var x579 uint32
	var x580 uint32
	x580, x579 = bits.Mul32(x6, 0xe7cf878)
	var x581 uint32
	var x582 uint32
	x582, x581 = bits.Mul32(x6, 0x896cf214)
	var x583 uint32
	var x584 uint32
	x584, x583 = bits.Mul32(x6, 0x67d7d140)
	var x585 uint32
	var x586 uint32
	x585, x586 = bits.Add32(x584, x581, uint32(0x0))
	var x587 uint32
	var x588 uint32
	x587, x588 = bits.Add32(x582, x579, uint32(uint1(x586)))
	var x589 uint32
	var x590 uint32
	x589, x590 = bits.Add32(x580, x577, uint32(uint1(x588)))
	var x591 uint32
	var x592 uint32
	x591, x592 = bits.Add32(x578, x575, uint32(uint1(x590)))
	var x593 uint32
	var x594 uint32
	x593, x594 = bits.Add32(x576, x573, uint32(uint1(x592)))
	var x595 uint32
	var x596 uint32
	x595, x596 = bits.Add32(x574, x571, uint32(uint1(x594)))
	var x597 uint32
	var x598 uint32
	x597, x598 = bits.Add32(x572, x569, uint32(uint1(x596)))
	var x599 uint32
	var x600 uint32
	x599, x600 = bits.Add32(x553, x583, uint32(0x0))
	var x601 uint32
	var x602 uint32
	x601, x602 = bits.Add32(x555, x585, uint32(uint1(x600)))
	var x603 uint32
	var x604 uint32
	x603, x604 = bits.Add32(x557, x587, uint32(uint1(x602)))
	var x605 uint32
	var x606 uint32
	x605, x606 = bits.Add32(x559, x589, uint32(uint1(x604)))
	var x607 uint32
	var x608 uint32
	x607, x608 = bits.Add32(x561, x591, uint32(uint1(x606)))
	var x609 uint32
	var x610 uint32
	x609, x610 = bits.Add32(x563, x593, uint32(uint1(x608)))
	var x611 uint32
	var x612 uint32
	x611, x612 = bits.Add32(x565, x595, uint32(uint1(x610)))
	var x613 uint32
	var x614 uint32
	x613, x614 = bits.Add32(x567, x597, uint32(uint1(x612)))
	var x615 uint32
	_, x615 = bits.Mul32(x599, 0x5588b13f)
	var x617 uint32
	var x618 uint32
	x618, x617 = bits.Mul32(x615, 0xffffffff)
	var x619 uint32
	var x620 uint32
	x620, x619 = bits.Mul32(x615, 0xffffffff)
	var x621 uint32
	var x622 uint32
	x622, x621 = bits.Mul32(x615, 0xffffffff)
	var x623 uint32
	var x624 uint32
	x624, x623 = bits.Mul32(x615, 0xfffffffe)
	var x625 uint32
	var x626 uint32
	x626, x625 = bits.Mul32(x615, 0xbaaedce6)
	var x627 uint32
	var x628 uint32
	x628, x627 = bits.Mul32(x615, 0xaf48a03b)
	var x629 uint32
	var x630 uint32
	x630, x629 = bits.Mul32(x615, 0xbfd25e8c)
	var x631 uint32
	var x632 uint32
	x632, x631 = bits.Mul32(x615, 0xd0364141)
	var x633 uint32
	var x634 uint32
	x633, x634 = bits.Add32(x632, x629, uint32(0x0))
	var x635 uint32
	var x636 uint32
	x635, x636 = bits.Add32(x630, x627, uint32(uint1(x634)))
	var x637 uint32
	var x638 uint32
	x637, x638 = bits.Add32(x628, x625, uint32(uint1(x636)))
	var x639 uint32
	var x640 uint32
	x639, x640 = bits.Add32(x626, x623, uint32(uint1(x638)))
	var x641 uint32
	var x642 uint32
	x641, x642 = bits.Add32(x624, x621, uint32(uint1(x640)))
	var x643 uint32
	var x644 uint32
	x643, x644 = bits.Add32(x622, x619, uint32(uint1(x642)))
	var x645 uint32
	var x646 uint32
	x645, x646 = bits.Add32(x620, x617, uint32(uint1(x644)))
	var x648 uint32
	_, x648 = bits.Add32(x599, x631, uint32(0x0))
	var x649 uint32
	var x650 uint32
	x649, x650 = bits.Add32(x601, x633, uint32(uint1(x648)))
	var x651 uint32
	var x652 uint32
	x651, x652 = bits.Add32(x603, x635, uint32(uint1(x650)))
	var x653 uint32
	var x654 uint32
	x653, x654 = bits.Add32(x605, x637, uint32(uint1(x652)))
	var x655 uint32
	var x656 uint32
	x655, x656 = bits.Add32(x607, x639, uint32(uint1(x654)))
	var x657 uint32
	var x658 uint32
	x657, x658 = bits.Add32(x609, x641, uint32(uint1(x656)))
	var x659 uint32
	var x660 uint32
	x659, x660 = bits.Add32(x611, x643, uint32(uint1(x658)))
	var x661 uint32
	var x662 uint32
	x661, x662 = bits.Add32(x613, x645, uint32(uint1(x660)))
	var x663 uint32
	var x664 uint32
	x663, x664 = bits.Add32(((uint32(uint1(x614)) + uint32(uint1(x568))) + (uint32(uint1(x598)) + x570)), (uint32(uint1(x646)) + x618), uint32(uint1(x662)))
	var x665 uint32
	var x666 uint32
	x666, x665 = bits.Mul32(x7, 0x9d671cd5)
	var x667 uint32
	var x668 uint32
	x668, x667 = bits.Mul32(x7, 0x81c69bc5)
	var x669 uint32
	var x670 uint32
	x670, x669 = bits.Mul32(x7, 0xe697f5e4)
	var x671 uint32
	var x672 uint32
	x672, x671 = bits.Mul32(x7, 0x5bcd07c6)
	var x673 uint32
	var x674 uint32
	x674, x673 = bits.Mul32(x7, 0x741496c2)
	var x675 uint32
	var x676 uint32
	x676, x675 = bits.Mul32(x7, 0xe7cf878)
	var x677 uint32
	var x678 uint32
	x678, x677 = bits.Mul32(x7, 0x896cf214)
	var x679 uint32
	var x680 uint32
	x680, x679 = bits.Mul32(x7, 0x67d7d140)
	var x681 uint32
	var x682 uint32
	x681, x682 = bits.Add32(x680, x677, uint32(0x0))
	var x683 uint32
	var x684 uint32
	x683, x684 = bits.Add32(x678, x675, uint32(uint1(x682)))
	var x685 uint32
	var x686 uint32
	x685, x686 = bits.Add32(x676, x673, uint32(uint1(x684)))
	var x687 uint32
	var x688 uint32
	x687, x688 = bits.Add32(x674, x671, uint32(uint1(x686)))
	var x689 uint32
	var x690 uint32
	x689, x690 = bits.Add32(x672, x669, uint32(uint1(x688)))
	var x691 uint32
	var x692 uint32
	x691, x692 = bits.Add32(x670, x667, uint32(uint1(x690)))
	var x693 uint32
	var x694 uint32
	x693, x694 = bits.Add32(x668, x665, uint32(uint1(x692)))
	var x695 uint32
	var x696 uint32
	x695, x696 = bits.Add32(x649, x679, uint32(0x0))
	var x697 uint32
	var x698 uint32
	x697, x698 = bits.Add32(x651, x681, uint32(uint1(x696)))
	var x699 uint32
	var x700 uint32
	x699, x700 = bits.Add32(x653, x683, uint32(uint1(x698)))
	var x701 uint32
	var x702 uint32
	x701, x702 = bits.Add32(x655, x685, uint32(uint1(x700)))
	var x703 uint32
	var x704 uint32
	x703, x704 = bits.Add32(x657, x687, uint32(uint1(x702)))
	var x705 uint32
	var x706 uint32
	x705, x706 = bits.Add32(x659, x689, uint32(uint1(x704)))
	var x707 uint32
	var x708 uint32
	x707, x708 = bits.Add32(x661, x691, uint32(uint1(x706)))
	var x709 uint32
	var x710 uint32
	x709, x710 = bits.Add32(x663, x693, uint32(uint1(x708)))
	var x711 uint32
	_, x711 = bits.Mul32(x695, 0x5588b13f)
	var x713 uint32
	var x714 uint32
	x714, x713 = bits.Mul32(x711, 0xffffffff)
	var x715 uint32
	var x716 uint32
	x716, x715 = bits.Mul32(x711, 0xffffffff)
	var x717 uint32
	var x718 uint32
	x718, x717 = bits.Mul32(x711, 0xffffffff)
	var x719 uint32
	var x720 uint32
	x720, x719 = bits.Mul32(x711, 0xfffffffe)
	var x721 uint32
	var x722 uint32
	x722, x721 = bits.Mul32(x711, 0xbaaedce6)
	var x723 uint32
	var x724 uint32
	x724, x723 = bits.Mul32(x711, 0xaf48a03b)
	var x725 uint32
	var x726 uint32
	x726, x725 = bits.Mul32(x711, 0xbfd25e8c)
	var x727 uint32
	var x728 uint32
	x728, x727 = bits.Mul32(x711, 0xd0364141)
	var x729 uint32
	var x730 uint32
	x729, x730 = bits.Add32(x728, x725, uint32(0x0))
	var x731 uint32
	var x732 uint32
	x731, x732 = bits.Add32(x726, x723, uint32(uint1(x730)))
	var x733 uint32
	var x734 uint32
	x733, x734 = bits.Add32(x724, x721, uint32(uint1(x732)))
	var x735 uint32
	var x736 uint32
	x735, x736 = bits.Add32(x722, x719, uint32(uint1(x734)))
	var x737 uint32
	var x738 uint32
	x737, x738 = bits.Add32(x720, x717, uint32(uint1(x736)))
	var x739 uint32
	var x740 uint32
	x739, x740 = bits.Add32(x718, x715, uint32(uint1(x738)))
	var x741 uint32
	var x742 uint32
	x741, x742 = bits.Add32(x716, x713, uint32(uint1(x740)))
	var x744 uint32
	_, x744 = bits.Add32(x695, x727, uint32(0x0))
	var x745 uint32
	var x746 uint32
	x745, x746 = bits.Add32(x697, x729, uint32(uint1(x744)))
	var x747 uint32
	var x748 uint32
	x747, x748 = bits.Add32(x699, x731, uint32(uint1(x746)))
	var x749 uint32
	var x750 uint32
	x749, x750 = bits.Add32(x701, x733, uint32(uint1(x748)))
	var x751 uint32
	var x752 uint32
	x751, x752 = bits.Add32(x703, x735, uint32(uint1(x750)))
	var x753 uint32
	var x754 uint32
	x753, x754 = bits.Add32(x705, x737, uint32(uint1(x752)))
	var x755 uint32
	var x756 uint32
	x755, x756 = bits.Add32(x707, x739, uint32(uint1(x754)))
	var x757 uint32
	var x758 uint32
	x757, x758 = bits.Add32(x709, x741, uint32(uint1(x756)))
	var x759 uint32
	var x760 uint32
	x759, x760 = bits.Add32(((uint32(uint1(x710)) + uint32(uint1(x664))) + (uint32(uint1(x694)) + x666)), (uint32(uint1(x742)) + x714), uint32(uint1(x758)))
	var x761 uint32
	var x762 uint32
	x761, x762 = bits.Sub32(x745, 0xd0364141, uint32(0x0))
	var x763 uint32
	var x764 uint32
	x763, x764 = bits.Sub32(x747, 0xbfd25e8c, uint32(uint1(x762)))
	var x765 uint32
	var x766 uint32
	x765, x766 = bits.Sub32(x749, 0xaf48a03b, uint32(uint1(x764)))
	var x767 uint32
	var x768 uint32
	x767, x768 = bits.Sub32(x751, 0xbaaedce6, uint32(uint1(x766)))
	var x769 uint32
	var x770 uint32
	x769, x770 = bits.Sub32(x753, 0xfffffffe, uint32(uint1(x768)))
	var x771 uint32
	var x772 uint32
	x771, x772 = bits.Sub32(x755, 0xffffffff, uint32(uint1(x770)))
	var x773 uint32
	var x774 uint32
	x773, x774 = bits.Sub32(x757, 0xffffffff, uint32(uint1(x772)))
	var x775 uint32
	var x776 uint32
	x775, x776 = bits.Sub32(x759, 0xffffffff, uint32(uint1(x774)))
	var x778 uint32
	_, x778 = bits.Sub32(uint32(uint1(x760)), uint32(0x0), uint32(uint1(x776)))
	var x779 uint32
	cmovznzU32(&x779, uint1(x778), x761, x745)
	var x780 uint32
	cmovznzU32(&x780, uint1(x778), x763, x747)
	var x781 uint32
	cmovznzU32(&x781, uint1(x778), x765, x749)
	var x782 uint32
	cmovznzU32(&x782, uint1(x778), x767, x751)
	var x783 uint32
	cmovznzU32(&x783, uint1(x778), x769, x753)
	var x784 uint32
	cmovznzU32(&x784, uint1(x778), x771, x755)
	var x785 uint32
	cmovznzU32(&x785, uint1(x778), x773, x757)
	var x786 uint32
	cmovznzU32(&x786, uint1(x778), x775, x759)
	out1[0] = x779
	out1[1] = x780
	out1[2] = x781
	out1[3] = x782
	out1[4] = x783
	out1[5] = x784
	out1[6] = x785
	out1[7] = x786
}

// Nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [0x0 ~> 0xffffffff]
func Nonzero(out1 *uint32, arg1 *[8]uint32) {
	x1 := (arg1[0] | (arg1[1] | (arg1[2] | (arg1[3] | (arg1[4] | (arg1[5] | (arg1[6] | arg1[7])))))))
	*out1 = x1
}

// Selectznz is a multi-limb conditional select.
//
// Postconditions:
//   out1 = (if arg1 = 0 then arg2 else arg3)
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func Selectznz(out1 *[8]uint32, arg1 uint1, arg2 *[8]uint32, arg3 *[8]uint32) {
	var x1 uint32
	cmovznzU32(&x1, arg1, arg2[0], arg3[0])
	var x2 uint32
	cmovznzU32(&x2, arg1, arg2[1], arg3[1])
	var x3 uint32
	cmovznzU32(&x3, arg1, arg2[2], arg3[2])
	var x4 uint32
	cmovznzU32(&x4, arg1, arg2[3], arg3[3])
	var x5 uint32
	cmovznzU32(&x5, arg1, arg2[4], arg3[4])
	var x6 uint32
	cmovznzU32(&x6, arg1, arg2[5], arg3[5])
	var x7 uint32
	cmovznzU32(&x7, arg1, arg2[6], arg3[6])
	var x8 uint32
	cmovznzU32(&x8, arg1, arg2[7], arg3[7])
	out1[0] = x1
	out1[1] = x2
	out1[2] = x3
	out1[3] = x4
	out1[4] = x5
	out1[5] = x6
	out1[6] = x7
	out1[7] = x8
}

// ToBytes serializes a field element NOT in the Montgomery domain to bytes in little-endian order.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..31]
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
func ToBytes(out1 *[32]uint8, arg1 *[8]uint32) {
	x1 := arg1[7]
	x2 := arg1[6]
	x3 := arg1[5]
	x4 := arg1[4]
	x5 := arg1[3]
	x6 := arg1[2]
	x7 := arg1[1]
	x8 := arg1[0]
	x9 := (uint8(x8) & 0xff)
	x10 := (x8 >> 8)
	x11 := (uint8(x10) & 0xff)
	x12 := (x10 >> 8)
	x13 := (uint8(x12) & 0xff)
	x14 := uint8((x12 >> 8))
	x15 := (uint8(x7) & 0xff)
	x16 := (x7 >> 8)
	x17 := (uint8(x16) & 0xff)
	x18 := (x16 >> 8)
	x19 := (uint8(x18) & 0xff)
	x20 := uint8((x18 >> 8))
	x21 := (uint8(x6) & 0xff)
	x22 := (x6 >> 8)
	x23 := (uint8(x22) & 0xff)
	x24 := (x22 >> 8)
	x25 := (uint8(x24) & 0xff)
	x26 := uint8((x24 >> 8))
	x27 := (uint8(x5) & 0xff)
	x28 := (x5 >> 8)
	x29 := (uint8(x28) & 0xff)
	x30 := (x28 >> 8)
	x31 := (uint8(x30) & 0xff)
	x32 := uint8((x30 >> 8))
	x33 := (uint8(x4) & 0xff)
	x34 := (x4 >> 8)
	x35 := (uint8(x34) & 0xff)
	x36 := (x34 >> 8)
	x37 := (uint8(x36) & 0xff)
	x38 := uint8((x36 >> 8))
	x39 := (uint8(x3) & 0xff)
	x40 := (x3 >> 8)
	x41 := (uint8(x40) & 0xff)
	x42 := (x40 >> 8)
	x43 := (uint8(x42) & 0xff)
	x44 := uint8((x42 >> 8))
	x45 := (uint8(x2) & 0xff)
	x46 := (x2 >> 8)
	x47 := (uint8(x46) & 0xff)
	x48 := (x46 >> 8)
	x49 := (uint8(x48) & 0xff)
	x50 := uint8((x48 >> 8))
	x51 := (uint8(x1) & 0xff)
	x52 := (x1 >> 8)
	x53 := (uint8(x52) & 0xff)
	x54 := (x52 >> 8)
	x55 := (uint8(x54) & 0xff)
	x56 := uint8((x54 >> 8))
	out1[0] = x9
	out1[1] = x11
	out1[2] = x13
	out1[3] = x14
	out1[4] = x15
	out1[5] = x17
	out1[6] = x19
	out1[7] = x20
	out1[8] = x21
	out1[9] = x23
	out1[10] = x25
	out1[11] = x26
	out1[12] = x27
	out1[13] = x29
	out1[14] = x31
	out1[15] = x32
	out1[16] = x33
	out1[17] = x35
	out1[18] = x37
	out1[19] = x38
	out1[20] = x39
	out1[21] = x41
	out1[22] = x43
	out1[23] = x44
	out1[24] = x45
	out1[25] = x47
	out1[26] = x49
	out1[27] = x50
	out1[28] = x51
	out1[29] = x53
	out1[30] = x55
	out1[31] = x56
}

// FromBytes deserializes a field element NOT in the Montgomery domain from bytes in little-endian order.
//
// Preconditions:
//   0 ≤ bytes_eval arg1 < m
// Postconditions:
//   eval out1 mod m = bytes_eval arg1 mod m
//   0 ≤ eval out1 < m
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func FromBytes(out1 *[8]uint32, arg1 *[32]uint8) {
	x1 := (uint32(arg1[31]) << 24)
	x2 := (uint32(arg1[30]) << 16)
	x3 := (uint32(arg1[29]) << 8)
	x4 := arg1[28]
	x5 := (uint32(arg1[27]) << 24)
	x6 := (uint32(arg1[26]) << 16)
	x7 := (uint32(arg1[25]) << 8)
	x8 := arg1[24]
	x9 := (uint32(arg1[23]) << 24)
	x10 := (uint32(arg1[22]) << 16)
	x11 := (uint32(arg1[21]) << 8)
	x12 := arg1[20]
	x13 := (uint32(arg1[19]) << 24)
	x14 := (uint32(arg1[18]) << 16)
	x15 := (uint32(arg1[17]) << 8)
	x16 := arg1[16]
	x17 := (uint32(arg1[15]) << 24)
	x18 := (uint32(arg1[14]) << 16)
	x19 := (uint32(arg1[13]) << 8)
	x20 := arg1[12]
	x21 := (uint32(arg1[11]) << 24)
	x22 := (uint32(arg1[10]) << 16)
	x23 := (uint32(arg1[9]) << 8)
	x24 := arg1[8]
	x25 := (uint32(arg1[7]) << 24)
	x26 := (uint32(arg1[6]) << 16)
	x27 := (uint32(arg1[5]) << 8)
	x28 := arg1[4]
	x29 := (uint32(arg1[3]) << 24)
	x30 := (uint32(arg1[2]) << 16)
	x31 := (uint32(arg1[1]) << 8)
	x32 := arg1[0]
	x33 := (x31 + uint32(x32))
	x34 := (x30 + x33)
	x35 := (x29 + x34)
	x36 := (x27 + uint32(x28))
	x37 := (x26 + x36)
	x38 := (x25 + x37)
	x39 := (x23 + uint32(x24))
	x40 := (x22 + x39)
	x41 := (x21 + x40)
	x42 := (x19 + uint32(x20))
	x43 := (x18 + x42)
	x44 := (x17 + x43)
	x45 := (x15 + uint32(x16))
	x46 := (x14 + x45)
	x47 := (x13 + x46)
	x48 := (x11 + uint32(x12))
	x49 := (x10 + x48)
	x50 := (x9 + x49)
	x51 := (x7 + uint32(x8))
	x52 := (x6 + x51)
	x53 := (x5 + x52)
	x54 := (x3 + uint32(x4))
	x55 := (x2 + x54)
	x56 := (x1 + x55)
	out1[0] = x35
	out1[1] = x38
	out1[2] = x41
	out1[3] = x44
	out1[4] = x47
	out1[5] = x50
	out1[6] = x53
	out1[7] = x56
}

// SetOne returns the field element one in the Montgomery domain.
//
// Postconditions:
//   eval (from_montgomery out1) mod m = 1 mod m
//   0 ≤ eval out1 < m
//
func SetOne(out1 *MontgomeryDomainFieldElement) {
	out1[0] = 0x2fc9bebf
	out1[1] = 0x402da173
	out1[2] = 0x50b75fc4
	out1[3] = 0x45512319
	out1[4] = uint32(0x1)
	out1[5] = uint32(0x0)
	out1[6] = uint32(0x0)
	out1[7] = uint32(0x0)
}

// Msat returns the saturated representation of the prime modulus.
//
// Postconditions:
//   twos_complement_eval out1 = m
//   0 ≤ eval out1 < m
//
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func Msat(out1 *[9]uint32) {
	out1[0] = 0xd0364141
	out1[1] = 0xbfd25e8c
	out1[2] = 0xaf48a03b
	out1[3] = 0xbaaedce6
	out1[4] = 0xfffffffe
	out1[5] = 0xffffffff
	out1[6] = 0xffffffff
	out1[7] = 0xffffffff
	out1[8] = uint32(0x0)
}

// Divstep computes a divstep.
//
// Preconditions:
//   0 ≤ eval arg4 < m
//   0 ≤ eval arg5 < m
// Postconditions:
//   out1 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then 1 - arg1 else 1 + arg1)
//   twos_complement_eval out2 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then twos_complement_eval arg3 else twos_complement_eval arg2)
//   twos_complement_eval out3 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then ⌊(twos_complement_eval arg3 - twos_complement_eval arg2) / 2⌋ else ⌊(twos_complement_eval arg3 + (twos_complement_eval arg3 mod 2) * twos_complement_eval arg2) / 2⌋)
//   eval (from_montgomery out4) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (2 * eval (from_montgomery arg5)) mod m else (2 * eval (from_montgomery arg4)) mod m)
//   eval (from_montgomery out5) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (eval (from_montgomery arg4) - eval (from_montgomery arg4)) mod m else (eval (from_montgomery arg5) + (twos_complement_eval arg3 mod 2) * eval (from_montgomery arg4)) mod m)
//   0 ≤ eval out5 < m
//   0 ≤ eval out5 < m
//   0 ≤ eval out2 < m
//   0 ≤ eval out3 < m
//
// Input Bounds:
//   arg1: [0x0 ~> 0xffffffff]
//   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [0x0 ~> 0xffffffff]
//   out2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   out3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   out4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   out5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func Divstep(out1 *uint32, out2 *[9]uint32, out3 *[9]uint32, out4 *[8]uint32, out5 *[8]uint32, arg1 uint32, arg2 *[9]uint32, arg3 *[9]uint32, arg4 *[8]uint32, arg5 *[8]uint32) {
	var x1 uint32
	x1, _ = bits.Add32((^arg1), uint32(0x1), uint32(0x0))
	x3 := (uint1((x1 >> 31)) & (uint1(arg3[0]) & 0x1))
	var x4 uint32
	x4, _ = bits.Add32((^arg1), uint32(0x1), uint32(0x0))
	var x6 uint32
	cmovznzU32(&x6, x3, arg1, x4)
	var x7 uint32
	cmovznzU32(&x7, x3, arg2[0], arg3[0])
	var x8 uint32
	cmovznzU32(&x8, x3, arg2[1], arg3[1])
	var x9 uint32
	cmovznzU32(&x9, x3, arg2[2], arg3[2])
	var x10 uint32
	cmovznzU32(&x10, x3, arg2[3], arg3[3])
	var x11 uint32
	cmovznzU32(&x11, x3, arg2[4], arg3[4])
	var x12 uint32
	cmovznzU32(&x12, x3, arg2[5], arg3[5])
	var x13 uint32
	cmovznzU32(&x13, x3, arg2[6], arg3[6])
	var x14 uint32
	cmovznzU32(&x14, x3, arg2[7], arg3[7])
	var x15 uint32
	cmovznzU32(&x15, x3, arg2[8], arg3[8])
	var x16 uint32
	var x17 uint32
	x16, x17 = bits.Add32(uint32(0x1), (^arg2[0]), uint32(0x0))
	var x18 uint32
	var x19 uint32
	x18, x19 = bits.Add32(uint32(0x0), (^arg2[1]), uint32(uint1(x17)))
	var x20 uint32
	var x21 uint32
	x20, x21 = bits.Add32(uint32(0x0), (^arg2[2]), uint32(uint1(x19)))
	var x22 uint32
	var x23 uint32
	x22, x23 = bits.Add32(uint32(0x0), (^arg2[3]), uint32(uint1(x21)))
	var x24 uint32
	var x25 uint32
	x24, x25 = bits.Add32(uint32(0x0), (^arg2[4]), uint32(uint1(x23)))
	var x26 uint32
	var x27 uint32
	x26, x27 = bits.Add32(uint32(0x0), (^arg2[5]), uint32(uint1(x25)))
	var x28 uint32
	var x29 uint32
	x28, x29 = bits.Add32(uint32(0x0), (^arg2[6]), uint32(uint1(x27)))
	var x30 uint32
	var x31 uint32
	x30, x31 = bits.Add32(uint32(0x0), (^arg2[7]), uint32(uint1(x29)))
	var x32 uint32
	x32, _ = bits.Add32(uint32(0x0), (^arg2[8]), uint32(uint1(x31)))
	var x34 uint32
	cmovznzU32(&x34, x3, arg3[0], x16)
	var x35 uint32
	cmovznzU32(&x35, x3, arg3[1], x18)
	var x36 uint32
	cmovznzU32(&x36, x3, arg3[2], x20)
	var x37 uint32
	cmovznzU32(&x37, x3, arg3[3], x22)
	var x38 uint32
	cmovznzU32(&x38, x3, arg3[4], x24)
	var x39 uint32
	cmovznzU32(&x39, x3, arg3[5], x26)
	var x40 uint32
	cmovznzU32(&x40, x3, arg3[6], x28)
	var x41 uint32
	cmovznzU32(&x41, x3, arg3[7], x30)
	var x42 uint32
	cmovznzU32(&x42, x3, arg3[8], x32)
	var x43 uint32
	cmovznzU32(&x43, x3, arg4[0], arg5[0])
	var x44 uint32
	cmovznzU32(&x44, x3, arg4[1], arg5[1])
	var x45 uint32
	cmovznzU32(&x45, x3, arg4[2], arg5[2])
	var x46 uint32
	cmovznzU32(&x46, x3, arg4[3], arg5[3])
	var x47 uint32
	cmovznzU32(&x47, x3, arg4[4], arg5[4])
	var x48 uint32
	cmovznzU32(&x48, x3, arg4[5], arg5[5])
	var x49 uint32
	cmovznzU32(&x49, x3, arg4[6], arg5[6])
	var x50 uint32
	cmovznzU32(&x50, x3, arg4[7], arg5[7])
	var x51 uint32
	var x52 uint32
	x51, x52 = bits.Add32(x43, x43, uint32(0x0))
	var x53 uint32
	var x54 uint32
	x53, x54 = bits.Add32(x44, x44, uint32(uint1(x52)))
	var x55 uint32
	var x56 uint32
	x55, x56 = bits.Add32(x45, x45, uint32(uint1(x54)))
	var x57 uint32
	var x58 uint32
	x57, x58 = bits.Add32(x46, x46, uint32(uint1(x56)))
	var x59 uint32
	var x60 uint32
	x59, x60 = bits.Add32(x47, x47, uint32(uint1(x58)))
	var x61 uint32
	var x62 uint32
	x61, x62 = bits.Add32(x48, x48, uint32(uint1(x60)))
	var x63 uint32
	var x64 uint32
	x63, x64 = bits.Add32(x49, x49, uint32(uint1(x62)))
	var x65 uint32
	var x66 uint32
	x65, x66 = bits.Add32(x50, x50, uint32(uint1(x64)))
	var x67 uint32
	var x68 uint32
	x67, x68 = bits.Sub32(x51, 0xd0364141, uint32(0x0))
	var x69 uint32
	var x70 uint32
	x69, x70 = bits.Sub32(x53, 0xbfd25e8c, uint32(uint1(x68)))
	var x71 uint32
	var x72 uint32
	x71, x72 = bits.Sub32(x55, 0xaf48a03b, uint32(uint1(x70)))
	var x73 uint32
	var x74 uint32
	x73, x74 = bits.Sub32(x57, 0xbaaedce6, uint32(uint1(x72)))
	var x75 uint32
	var x76 uint32
	x75, x76 = bits.Sub32(x59, 0xfffffffe, uint32(uint1(x74)))
	var x77 uint32
	var x78 uint32
	x77, x78 = bits.Sub32(x61, 0xffffffff, uint32(uint1(x76)))
	var x79 uint32
	var x80 uint32
	x79, x80 = bits.Sub32(x63, 0xffffffff, uint32(uint1(x78)))
	var x81 uint32
	var x82 uint32
	x81, x82 = bits.Sub32(x65, 0xffffffff, uint32(uint1(x80)))
	var x84 uint32
	_, x84 = bits.Sub32(uint32(uint1(x66)), uint32(0x0), uint32(uint1(x82)))
	x85 := arg4[7]
	x86 := arg4[6]
	x87 := arg4[5]
	x88 := arg4[4]
	x89 := arg4[3]
	x90 := arg4[2]
	x91 := arg4[1]
	x92 := arg4[0]
	var x93 uint32
	var x94 uint32
	x93, x94 = bits.Sub32(uint32(0x0), x92, uint32(0x0))
	var x95 uint32
	var x96 uint32
	x95, x96 = bits.Sub32(uint32(0x0), x91, uint32(uint1(x94)))
	var x97 uint32
	var x98 uint32
	x97, x98 = bits.Sub32(uint32(0x0), x90, uint32(uint1(x96)))
	var x99 uint32
	var x100 uint32
	x99, x100 = bits.Sub32(uint32(0x0), x89, uint32(uint1(x98)))
	var x101 uint32
	var x102 uint32
	x101, x102 = bits.Sub32(uint32(0x0), x88, uint32(uint1(x100)))
	var x103 uint32
	var x104 uint32
	x103, x104 = bits.Sub32(uint32(0x0), x87, uint32(uint1(x102)))
	var x105 uint32
	var x106 uint32
	x105, x106 = bits.Sub32(uint32(0x0), x86, uint32(uint1(x104)))
	var x107 uint32
	var x108 uint32
	x107, x108 = bits.Sub32(uint32(0x0), x85, uint32(uint1(x106)))
	var x109 uint32
	cmovznzU32(&x109, uint1(x108), uint32(0x0), 0xffffffff)
	var x110 uint32
	var x111 uint32
	x110, x111 = bits.Add32(x93, (x109 & 0xd0364141), uint32(0x0))
	var x112 uint32
	var x113 uint32
	x112, x113 = bits.Add32(x95, (x109 & 0xbfd25e8c), uint32(uint1(x111)))
	var x114 uint32
	var x115 uint32
	x114, x115 = bits.Add32(x97, (x109 & 0xaf48a03b), uint32(uint1(x113)))
	var x116 uint32
	var x117 uint32
	x116, x117 = bits.Add32(x99, (x109 & 0xbaaedce6), uint32(uint1(x115)))
	var x118 uint32
	var x119 uint32
	x118, x119 = bits.Add32(x101, (x109 & 0xfffffffe), uint32(uint1(x117)))
	var x120 uint32
	var x121 uint32
	x120, x121 = bits.Add32(x103, x109, uint32(uint1(x119)))
	var x122 uint32
	var x123 uint32
	x122, x123 = bits.Add32(x105, x109, uint32(uint1(x121)))
	var x124 uint32
	x124, _ = bits.Add32(x107, x109, uint32(uint1(x123)))
	var x126 uint32
	cmovznzU32(&x126, x3, arg5[0], x110)
	var x127 uint32
	cmovznzU32(&x127, x3, arg5[1], x112)
	var x128 uint32
	cmovznzU32(&x128, x3, arg5[2], x114)
	var x129 uint32
	cmovznzU32(&x129, x3, arg5[3], x116)
	var x130 uint32
	cmovznzU32(&x130, x3, arg5[4], x118)
	var x131 uint32
	cmovznzU32(&x131, x3, arg5[5], x120)
	var x132 uint32
	cmovznzU32(&x132, x3, arg5[6], x122)
	var x133 uint32
	cmovznzU32(&x133, x3, arg5[7], x124)
	x134 := (uint1(x34) & 0x1)
	var x135 uint32
	cmovznzU32(&x135, x134, uint32(0x0), x7)
	var x136 uint32
	cmovznzU32(&x136, x134, uint32(0x0), x8)
	var x137 uint32
	cmovznzU32(&x137, x134, uint32(0x0), x9)
	var x138 uint32
	cmovznzU32(&x138, x134, uint32(0x0), x10)
	var x139 uint32
	cmovznzU32(&x139, x134, uint32(0x0), x11)
	var x140 uint32
	cmovznzU32(&x140, x134, uint32(0x0), x12)
	var x141 uint32
	cmovznzU32(&x141, x134, uint32(0x0), x13)
	var x142 uint32
	cmovznzU32(&x142, x134, uint32(0x0), x14)
	var x143 uint32
	cmovznzU32(&x143, x134, uint32(0x0), x15)
	var x144 uint32
	var x145 uint32
	x144, x145 = bits.Add32(x34, x135, uint32(0x0))
	var x146 uint32
	var x147 uint32
	x146, x147 = bits.Add32(x35, x136, uint32(uint1(x145)))
	var x148 uint32
	var x149 uint32
	x148, x149 = bits.Add32(x36, x137, uint32(uint1(x147)))
	var x150 uint32
	var x151 uint32
	x150, x151 = bits.Add32(x37, x138, uint32(uint1(x149)))
	var x152 uint32
	var x153 uint32
	x152, x153 = bits.Add32(x38, x139, uint32(uint1(x151)))
	var x154 uint32
	var x155 uint32
	x154, x155 = bits.Add32(x39, x140, uint32(uint1(x153)))
	var x156 uint32
	var x157 uint32
	x156, x157 = bits.Add32(x40, x141, uint32(uint1(x155)))
	var x158 uint32
	var x159 uint32
	x158, x159 = bits.Add32(x41, x142, uint32(uint1(x157)))
	var x160 uint32
	x160, _ = bits.Add32(x42, x143, uint32(uint1(x159)))
	var x162 uint32
	cmovznzU32(&x162, x134, uint32(0x0), x43)
	var x163 uint32
	cmovznzU32(&x163, x134, uint32(0x0), x44)
	var x164 uint32
	cmovznzU32(&x164, x134, uint32(0x0), x45)
	var x165 uint32
	cmovznzU32(&x165, x134, uint32(0x0), x46)
	var x166 uint32
	cmovznzU32(&x166, x134, uint32(0x0), x47)
	var x167 uint32
	cmovznzU32(&x167, x134, uint32(0x0), x48)
	var x168 uint32
	cmovznzU32(&x168, x134, uint32(0x0), x49)
	var x169 uint32
	cmovznzU32(&x169, x134, uint32(0x0), x50)
	var x170 uint32
	var x171 uint32
	x170, x171 = bits.Add32(x126, x162, uint32(0x0))
	var x172 uint32
	var x173 uint32
	x172, x173 = bits.Add32(x127, x163, uint32(uint1(x171)))
	var x174 uint32
	var x175 uint32
	x174, x175 = bits.Add32(x128, x164, uint32(uint1(x173)))
	var x176 uint32
	var x177 uint32
	x176, x177 = bits.Add32(x129, x165, uint32(uint1(x175)))
	var x178 uint32
	var x179 uint32
	x178, x179 = bits.Add32(x130, x166, uint32(uint1(x177)))
	var x180 uint32
	var x181 uint32
	x180, x181 = bits.Add32(x131, x167, uint32(uint1(x179)))
	var x182 uint32
	var x183 uint32
	x182, x183 = bits.Add32(x132, x168, uint32(uint1(x181)))
	var x184 uint32
	var x185 uint32
	x184, x185 = bits.Add32(x133, x169, uint32(uint1(x183)))
	var x186 uint32
	var x187 uint32
	x186, x187 = bits.Sub32(x170, 0xd0364141, uint32(0x0))
	var x188 uint32
	var x189 uint32
	x188, x189 = bits.Sub32(x172, 0xbfd25e8c, uint32(uint1(x187)))
	var x190 uint32
	var x191 uint32
	x190, x191 = bits.Sub32(x174, 0xaf48a03b, uint32(uint1(x189)))
	var x192 uint32
	var x193 uint32
	x192, x193 = bits.Sub32(x176, 0xbaaedce6, uint32(uint1(x191)))
	var x194 uint32
	var x195 uint32
	x194, x195 = bits.Sub32(x178, 0xfffffffe, uint32(uint1(x193)))
	var x196 uint32
	var x197 uint32
	x196, x197 = bits.Sub32(x180, 0xffffffff, uint32(uint1(x195)))
	var x198 uint32
	var x199 uint32
	x198, x199 = bits.Sub32(x182, 0xffffffff, uint32(uint1(x197)))
	var x200 uint32
	var x201 uint32
	x200, x201 = bits.Sub32(x184, 0xffffffff, uint32(uint1(x199)))
	var x203 uint32
	_, x203 = bits.Sub32(uint32(uint1(x185)), uint32(0x0), uint32(uint1(x201)))
	var x204 uint32
	x204, _ = bits.Add32(x6, uint32(0x1), uint32(0x0))
	x206 := ((x144 >> 1) | ((x146 << 31) & 0xffffffff))
	x207 := ((x146 >> 1) | ((x148 << 31) & 0xffffffff))
	x208 := ((x148 >> 1) | ((x150 << 31) & 0xffffffff))
	x209 := ((x150 >> 1) | ((x152 << 31) & 0xffffffff))
	x210 := ((x152 >> 1) | ((x154 << 31) & 0xffffffff))
	x211 := ((x154 >> 1) | ((x156 << 31) & 0xffffffff))
	x212 := ((x156 >> 1) | ((x158 << 31) & 0xffffffff))
	x213 := ((x158 >> 1) | ((x160 << 31) & 0xffffffff))
	x214 := ((x160 & 0x80000000) | (x160 >> 1))
	var x215 uint32
	cmovznzU32(&x215, uint1(x84), x67, x51)
	var x216 uint32
	cmovznzU32(&x216, uint1(x84), x69, x53)
	var x217 uint32
	cmovznzU32(&x217, uint1(x84), x71, x55)
	var x218 uint32
	cmovznzU32(&x218, uint1(x84), x73, x57)
	var x219 uint32
	cmovznzU32(&x219, uint1(x84), x75, x59)
	var x220 uint32
	cmovznzU32(&x220, uint1(x84), x77, x61)
	var x221 uint32
	cmovznzU32(&x221, uint1(x84), x79, x63)
	var x222 uint32
	cmovznzU32(&x222, uint1(x84), x81, x65)
	var x223 uint32
	cmovznzU32(&x223, uint1(x203), x186, x170)
	var x224 uint32
	cmovznzU32(&x224, uint1(x203), x188, x172)
	var x225 uint32
	cmovznzU32(&x225, uint1(x203), x190, x174)
	var x226 uint32
	cmovznzU32(&x226, uint1(x203), x192, x176)
	var x227 uint32
	cmovznzU32(&x227, uint1(x203), x194, x178)
	var x228 uint32
	cmovznzU32(&x228, uint1(x203), x196, x180)
	var x229 uint32
	cmovznzU32(&x229, uint1(x203), x198, x182)
	var x230 uint32
	cmovznzU32(&x230, uint1(x203), x200, x184)
	*out1 = x204
	out2[0] = x7
	out2[1] = x8
	out2[2] = x9
	out2[3] = x10
	out2[4] = x11
	out2[5] = x12
	out2[6] = x13
	out2[7] = x14
	out2[8] = x15
	out3[0] = x206
	out3[1] = x207
	out3[2] = x208
	out3[3] = x209
	out3[4] = x210
	out3[5] = x211
	out3[6] = x212
	out3[7] = x213
	out3[8] = x214
	out4[0] = x215
	out4[1] = x216
	out4[2] = x217
	out4[3] = x218
	out4[4] = x219
	out4[5] = x220
	out4[6] = x221
	out4[7] = x222
	out5[0] = x223
	out5[1] = x224
	out5[2] = x225
	out5[3] = x226
	out5[4] = x227
	out5[5] = x228
	out5[6] = x229
	out5[7] = x230
}

// DivstepPrecomp returns the precomputed value for Bernstein-Yang-inversion (in montgomery form).
//
// Postconditions:
//   eval (from_montgomery out1) = ⌊(m - 1) / 2⌋^(if ⌊log2 m⌋ + 1 < 46 then ⌊(49 * (⌊log2 m⌋ + 1) + 80) / 17⌋ else ⌊(49 * (⌊log2 m⌋ + 1) + 57) / 17⌋)
//   0 ≤ eval out1 < m
//
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func DivstepPrecomp(out1 *[8]uint32) {
	out1[0] = 0x2b9cb4e9
	out1[1] = 0xd7431a4d
	out1[2] = 0x32d9c503
	out1[3] = 0xab67d35a
	out1[4] = 0x859ce35f
	out1[5] = 0xadf6c7e5
	out1[6] = 0x1df6c379
	out1[7] = 0x61544145
}
