// Code generated by Fiat Cryptography. DO NOT EDIT.
//
// Autogenerated: 'src/ExtractionOCaml/word_by_word_montgomery' --lang Go --relax-primitive-carry-to-bitwidth 32,64 --cmovznz-by-mul --internal-static --package-case flatcase --public-function-case UpperCamelCase --private-function-case camelCase --public-type-case UpperCamelCase --private-type-case camelCase --no-prefix-fiat --doc-newline-in-typedef-bounds --doc-prepend-header 'Code generated by Fiat Cryptography. DO NOT EDIT.' --doc-text-before-function-name '' --doc-text-before-type-name '' --package-name p224 '' 32 '2^224 - 2^96 + 1' mul square add sub opp from_montgomery to_montgomery nonzero selectznz to_bytes from_bytes one msat divstep divstep_precomp
//
// curve description (via package name): p224
//
// machine_wordsize = 32 (from "32")
//
// requested operations: mul, square, add, sub, opp, from_montgomery, to_montgomery, nonzero, selectznz, to_bytes, from_bytes, one, msat, divstep, divstep_precomp
//
// m = 0xffffffffffffffffffffffffffffffff000000000000000000000001 (from "2^224 - 2^96 + 1")
//
//
//
// NOTE: In addition to the bounds specified above each function, all
//
//   functions synthesized for this Montgomery arithmetic require the
//
//   input to be strictly less than the prime modulus (m), and also
//
//   require the input to be in the unique saturated representation.
//
//   All functions also ensure that these two properties are true of
//
//   return values.
//
//
//
// Computed values:
//
//   eval z = z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192)
//
//   bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17] << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168) + (z[22] << 176) + (z[23] << 184) + (z[24] << 192) + (z[25] << 200) + (z[26] << 208) + (z[27] << 216)
//
//   twos_complement_eval z = let x1 := z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192) in
//
//                            if x1 & (2^224-1) < 2^223 then x1 & (2^224-1) else (x1 & (2^224-1)) - 2^224
package p224

import "math/bits"

type uint1 uint64 // We use uint64 instead of a more narrow type for performance reasons; see https://github.com/mit-plv/fiat-crypto/pull/1006#issuecomment-892625927
type int1 int64 // We use uint64 instead of a more narrow type for performance reasons; see https://github.com/mit-plv/fiat-crypto/pull/1006#issuecomment-892625927

// MontgomeryDomainFieldElement is a field element in the Montgomery domain.
//
// Bounds:
//
//   [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
type MontgomeryDomainFieldElement [7]uint32

// NonMontgomeryDomainFieldElement is a field element NOT in the Montgomery domain.
//
// Bounds:
//
//   [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
type NonMontgomeryDomainFieldElement [7]uint32

// cmovznzU32 is a single-word conditional move.
//
// Postconditions:
//   out1 = (if arg1 = 0 then arg2 else arg3)
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [0x0 ~> 0xffffffff]
//   arg3: [0x0 ~> 0xffffffff]
// Output Bounds:
//   out1: [0x0 ~> 0xffffffff]
func cmovznzU32(out1 *uint32, arg1 uint1, arg2 uint32, arg3 uint32) {
	x1 := (uint32(arg1) * 0xffffffff)
	x2 := ((x1 & arg3) | ((^x1) & arg2))
	*out1 = x2
}

// Mul multiplies two field elements in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
//   0 ≤ eval arg2 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
//   0 ≤ eval out1 < m
//
func Mul(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement, arg2 *MontgomeryDomainFieldElement) {
	x1 := arg1[1]
	x2 := arg1[2]
	x3 := arg1[3]
	x4 := arg1[4]
	x5 := arg1[5]
	x6 := arg1[6]
	x7 := arg1[0]
	var x8 uint32
	var x9 uint32
	x9, x8 = bits.Mul32(x7, arg2[6])
	var x10 uint32
	var x11 uint32
	x11, x10 = bits.Mul32(x7, arg2[5])
	var x12 uint32
	var x13 uint32
	x13, x12 = bits.Mul32(x7, arg2[4])
	var x14 uint32
	var x15 uint32
	x15, x14 = bits.Mul32(x7, arg2[3])
	var x16 uint32
	var x17 uint32
	x17, x16 = bits.Mul32(x7, arg2[2])
	var x18 uint32
	var x19 uint32
	x19, x18 = bits.Mul32(x7, arg2[1])
	var x20 uint32
	var x21 uint32
	x21, x20 = bits.Mul32(x7, arg2[0])
	var x22 uint32
	var x23 uint32
	x22, x23 = bits.Add32(x21, x18, uint32(0x0))
	var x24 uint32
	var x25 uint32
	x24, x25 = bits.Add32(x19, x16, uint32(uint1(x23)))
	var x26 uint32
	var x27 uint32
	x26, x27 = bits.Add32(x17, x14, uint32(uint1(x25)))
	var x28 uint32
	var x29 uint32
	x28, x29 = bits.Add32(x15, x12, uint32(uint1(x27)))
	var x30 uint32
	var x31 uint32
	x30, x31 = bits.Add32(x13, x10, uint32(uint1(x29)))
	var x32 uint32
	var x33 uint32
	x32, x33 = bits.Add32(x11, x8, uint32(uint1(x31)))
	x34 := (uint32(uint1(x33)) + x9)
	var x35 uint32
	_, x35 = bits.Mul32(x20, 0xffffffff)
	var x37 uint32
	var x38 uint32
	x38, x37 = bits.Mul32(x35, 0xffffffff)
	var x39 uint32
	var x40 uint32
	x40, x39 = bits.Mul32(x35, 0xffffffff)
	var x41 uint32
	var x42 uint32
	x42, x41 = bits.Mul32(x35, 0xffffffff)
	var x43 uint32
	var x44 uint32
	x44, x43 = bits.Mul32(x35, 0xffffffff)
	var x45 uint32
	var x46 uint32
	x45, x46 = bits.Add32(x44, x41, uint32(0x0))
	var x47 uint32
	var x48 uint32
	x47, x48 = bits.Add32(x42, x39, uint32(uint1(x46)))
	var x49 uint32
	var x50 uint32
	x49, x50 = bits.Add32(x40, x37, uint32(uint1(x48)))
	x51 := (uint32(uint1(x50)) + x38)
	var x53 uint32
	_, x53 = bits.Add32(x20, x35, uint32(0x0))
	var x54 uint32
	var x55 uint32
	x54, x55 = bits.Add32(x22, uint32(0x0), uint32(uint1(x53)))
	var x56 uint32
	var x57 uint32
	x56, x57 = bits.Add32(x24, uint32(0x0), uint32(uint1(x55)))
	var x58 uint32
	var x59 uint32
	x58, x59 = bits.Add32(x26, x43, uint32(uint1(x57)))
	var x60 uint32
	var x61 uint32
	x60, x61 = bits.Add32(x28, x45, uint32(uint1(x59)))
	var x62 uint32
	var x63 uint32
	x62, x63 = bits.Add32(x30, x47, uint32(uint1(x61)))
	var x64 uint32
	var x65 uint32
	x64, x65 = bits.Add32(x32, x49, uint32(uint1(x63)))
	var x66 uint32
	var x67 uint32
	x66, x67 = bits.Add32(x34, x51, uint32(uint1(x65)))
	var x68 uint32
	var x69 uint32
	x69, x68 = bits.Mul32(x1, arg2[6])
	var x70 uint32
	var x71 uint32
	x71, x70 = bits.Mul32(x1, arg2[5])
	var x72 uint32
	var x73 uint32
	x73, x72 = bits.Mul32(x1, arg2[4])
	var x74 uint32
	var x75 uint32
	x75, x74 = bits.Mul32(x1, arg2[3])
	var x76 uint32
	var x77 uint32
	x77, x76 = bits.Mul32(x1, arg2[2])
	var x78 uint32
	var x79 uint32
	x79, x78 = bits.Mul32(x1, arg2[1])
	var x80 uint32
	var x81 uint32
	x81, x80 = bits.Mul32(x1, arg2[0])
	var x82 uint32
	var x83 uint32
	x82, x83 = bits.Add32(x81, x78, uint32(0x0))
	var x84 uint32
	var x85 uint32
	x84, x85 = bits.Add32(x79, x76, uint32(uint1(x83)))
	var x86 uint32
	var x87 uint32
	x86, x87 = bits.Add32(x77, x74, uint32(uint1(x85)))
	var x88 uint32
	var x89 uint32
	x88, x89 = bits.Add32(x75, x72, uint32(uint1(x87)))
	var x90 uint32
	var x91 uint32
	x90, x91 = bits.Add32(x73, x70, uint32(uint1(x89)))
	var x92 uint32
	var x93 uint32
	x92, x93 = bits.Add32(x71, x68, uint32(uint1(x91)))
	x94 := (uint32(uint1(x93)) + x69)
	var x95 uint32
	var x96 uint32
	x95, x96 = bits.Add32(x54, x80, uint32(0x0))
	var x97 uint32
	var x98 uint32
	x97, x98 = bits.Add32(x56, x82, uint32(uint1(x96)))
	var x99 uint32
	var x100 uint32
	x99, x100 = bits.Add32(x58, x84, uint32(uint1(x98)))
	var x101 uint32
	var x102 uint32
	x101, x102 = bits.Add32(x60, x86, uint32(uint1(x100)))
	var x103 uint32
	var x104 uint32
	x103, x104 = bits.Add32(x62, x88, uint32(uint1(x102)))
	var x105 uint32
	var x106 uint32
	x105, x106 = bits.Add32(x64, x90, uint32(uint1(x104)))
	var x107 uint32
	var x108 uint32
	x107, x108 = bits.Add32(x66, x92, uint32(uint1(x106)))
	var x109 uint32
	var x110 uint32
	x109, x110 = bits.Add32(uint32(uint1(x67)), x94, uint32(uint1(x108)))
	var x111 uint32
	_, x111 = bits.Mul32(x95, 0xffffffff)
	var x113 uint32
	var x114 uint32
	x114, x113 = bits.Mul32(x111, 0xffffffff)
	var x115 uint32
	var x116 uint32
	x116, x115 = bits.Mul32(x111, 0xffffffff)
	var x117 uint32
	var x118 uint32
	x118, x117 = bits.Mul32(x111, 0xffffffff)
	var x119 uint32
	var x120 uint32
	x120, x119 = bits.Mul32(x111, 0xffffffff)
	var x121 uint32
	var x122 uint32
	x121, x122 = bits.Add32(x120, x117, uint32(0x0))
	var x123 uint32
	var x124 uint32
	x123, x124 = bits.Add32(x118, x115, uint32(uint1(x122)))
	var x125 uint32
	var x126 uint32
	x125, x126 = bits.Add32(x116, x113, uint32(uint1(x124)))
	x127 := (uint32(uint1(x126)) + x114)
	var x129 uint32
	_, x129 = bits.Add32(x95, x111, uint32(0x0))
	var x130 uint32
	var x131 uint32
	x130, x131 = bits.Add32(x97, uint32(0x0), uint32(uint1(x129)))
	var x132 uint32
	var x133 uint32
	x132, x133 = bits.Add32(x99, uint32(0x0), uint32(uint1(x131)))
	var x134 uint32
	var x135 uint32
	x134, x135 = bits.Add32(x101, x119, uint32(uint1(x133)))
	var x136 uint32
	var x137 uint32
	x136, x137 = bits.Add32(x103, x121, uint32(uint1(x135)))
	var x138 uint32
	var x139 uint32
	x138, x139 = bits.Add32(x105, x123, uint32(uint1(x137)))
	var x140 uint32
	var x141 uint32
	x140, x141 = bits.Add32(x107, x125, uint32(uint1(x139)))
	var x142 uint32
	var x143 uint32
	x142, x143 = bits.Add32(x109, x127, uint32(uint1(x141)))
	x144 := (uint32(uint1(x143)) + uint32(uint1(x110)))
	var x145 uint32
	var x146 uint32
	x146, x145 = bits.Mul32(x2, arg2[6])
	var x147 uint32
	var x148 uint32
	x148, x147 = bits.Mul32(x2, arg2[5])
	var x149 uint32
	var x150 uint32
	x150, x149 = bits.Mul32(x2, arg2[4])
	var x151 uint32
	var x152 uint32
	x152, x151 = bits.Mul32(x2, arg2[3])
	var x153 uint32
	var x154 uint32
	x154, x153 = bits.Mul32(x2, arg2[2])
	var x155 uint32
	var x156 uint32
	x156, x155 = bits.Mul32(x2, arg2[1])
	var x157 uint32
	var x158 uint32
	x158, x157 = bits.Mul32(x2, arg2[0])
	var x159 uint32
	var x160 uint32
	x159, x160 = bits.Add32(x158, x155, uint32(0x0))
	var x161 uint32
	var x162 uint32
	x161, x162 = bits.Add32(x156, x153, uint32(uint1(x160)))
	var x163 uint32
	var x164 uint32
	x163, x164 = bits.Add32(x154, x151, uint32(uint1(x162)))
	var x165 uint32
	var x166 uint32
	x165, x166 = bits.Add32(x152, x149, uint32(uint1(x164)))
	var x167 uint32
	var x168 uint32
	x167, x168 = bits.Add32(x150, x147, uint32(uint1(x166)))
	var x169 uint32
	var x170 uint32
	x169, x170 = bits.Add32(x148, x145, uint32(uint1(x168)))
	x171 := (uint32(uint1(x170)) + x146)
	var x172 uint32
	var x173 uint32
	x172, x173 = bits.Add32(x130, x157, uint32(0x0))
	var x174 uint32
	var x175 uint32
	x174, x175 = bits.Add32(x132, x159, uint32(uint1(x173)))
	var x176 uint32
	var x177 uint32
	x176, x177 = bits.Add32(x134, x161, uint32(uint1(x175)))
	var x178 uint32
	var x179 uint32
	x178, x179 = bits.Add32(x136, x163, uint32(uint1(x177)))
	var x180 uint32
	var x181 uint32
	x180, x181 = bits.Add32(x138, x165, uint32(uint1(x179)))
	var x182 uint32
	var x183 uint32
	x182, x183 = bits.Add32(x140, x167, uint32(uint1(x181)))
	var x184 uint32
	var x185 uint32
	x184, x185 = bits.Add32(x142, x169, uint32(uint1(x183)))
	var x186 uint32
	var x187 uint32
	x186, x187 = bits.Add32(x144, x171, uint32(uint1(x185)))
	var x188 uint32
	_, x188 = bits.Mul32(x172, 0xffffffff)
	var x190 uint32
	var x191 uint32
	x191, x190 = bits.Mul32(x188, 0xffffffff)
	var x192 uint32
	var x193 uint32
	x193, x192 = bits.Mul32(x188, 0xffffffff)
	var x194 uint32
	var x195 uint32
	x195, x194 = bits.Mul32(x188, 0xffffffff)
	var x196 uint32
	var x197 uint32
	x197, x196 = bits.Mul32(x188, 0xffffffff)
	var x198 uint32
	var x199 uint32
	x198, x199 = bits.Add32(x197, x194, uint32(0x0))
	var x200 uint32
	var x201 uint32
	x200, x201 = bits.Add32(x195, x192, uint32(uint1(x199)))
	var x202 uint32
	var x203 uint32
	x202, x203 = bits.Add32(x193, x190, uint32(uint1(x201)))
	x204 := (uint32(uint1(x203)) + x191)
	var x206 uint32
	_, x206 = bits.Add32(x172, x188, uint32(0x0))
	var x207 uint32
	var x208 uint32
	x207, x208 = bits.Add32(x174, uint32(0x0), uint32(uint1(x206)))
	var x209 uint32
	var x210 uint32
	x209, x210 = bits.Add32(x176, uint32(0x0), uint32(uint1(x208)))
	var x211 uint32
	var x212 uint32
	x211, x212 = bits.Add32(x178, x196, uint32(uint1(x210)))
	var x213 uint32
	var x214 uint32
	x213, x214 = bits.Add32(x180, x198, uint32(uint1(x212)))
	var x215 uint32
	var x216 uint32
	x215, x216 = bits.Add32(x182, x200, uint32(uint1(x214)))
	var x217 uint32
	var x218 uint32
	x217, x218 = bits.Add32(x184, x202, uint32(uint1(x216)))
	var x219 uint32
	var x220 uint32
	x219, x220 = bits.Add32(x186, x204, uint32(uint1(x218)))
	x221 := (uint32(uint1(x220)) + uint32(uint1(x187)))
	var x222 uint32
	var x223 uint32
	x223, x222 = bits.Mul32(x3, arg2[6])
	var x224 uint32
	var x225 uint32
	x225, x224 = bits.Mul32(x3, arg2[5])
	var x226 uint32
	var x227 uint32
	x227, x226 = bits.Mul32(x3, arg2[4])
	var x228 uint32
	var x229 uint32
	x229, x228 = bits.Mul32(x3, arg2[3])
	var x230 uint32
	var x231 uint32
	x231, x230 = bits.Mul32(x3, arg2[2])
	var x232 uint32
	var x233 uint32
	x233, x232 = bits.Mul32(x3, arg2[1])
	var x234 uint32
	var x235 uint32
	x235, x234 = bits.Mul32(x3, arg2[0])
	var x236 uint32
	var x237 uint32
	x236, x237 = bits.Add32(x235, x232, uint32(0x0))
	var x238 uint32
	var x239 uint32
	x238, x239 = bits.Add32(x233, x230, uint32(uint1(x237)))
	var x240 uint32
	var x241 uint32
	x240, x241 = bits.Add32(x231, x228, uint32(uint1(x239)))
	var x242 uint32
	var x243 uint32
	x242, x243 = bits.Add32(x229, x226, uint32(uint1(x241)))
	var x244 uint32
	var x245 uint32
	x244, x245 = bits.Add32(x227, x224, uint32(uint1(x243)))
	var x246 uint32
	var x247 uint32
	x246, x247 = bits.Add32(x225, x222, uint32(uint1(x245)))
	x248 := (uint32(uint1(x247)) + x223)
	var x249 uint32
	var x250 uint32
	x249, x250 = bits.Add32(x207, x234, uint32(0x0))
	var x251 uint32
	var x252 uint32
	x251, x252 = bits.Add32(x209, x236, uint32(uint1(x250)))
	var x253 uint32
	var x254 uint32
	x253, x254 = bits.Add32(x211, x238, uint32(uint1(x252)))
	var x255 uint32
	var x256 uint32
	x255, x256 = bits.Add32(x213, x240, uint32(uint1(x254)))
	var x257 uint32
	var x258 uint32
	x257, x258 = bits.Add32(x215, x242, uint32(uint1(x256)))
	var x259 uint32
	var x260 uint32
	x259, x260 = bits.Add32(x217, x244, uint32(uint1(x258)))
	var x261 uint32
	var x262 uint32
	x261, x262 = bits.Add32(x219, x246, uint32(uint1(x260)))
	var x263 uint32
	var x264 uint32
	x263, x264 = bits.Add32(x221, x248, uint32(uint1(x262)))
	var x265 uint32
	_, x265 = bits.Mul32(x249, 0xffffffff)
	var x267 uint32
	var x268 uint32
	x268, x267 = bits.Mul32(x265, 0xffffffff)
	var x269 uint32
	var x270 uint32
	x270, x269 = bits.Mul32(x265, 0xffffffff)
	var x271 uint32
	var x272 uint32
	x272, x271 = bits.Mul32(x265, 0xffffffff)
	var x273 uint32
	var x274 uint32
	x274, x273 = bits.Mul32(x265, 0xffffffff)
	var x275 uint32
	var x276 uint32
	x275, x276 = bits.Add32(x274, x271, uint32(0x0))
	var x277 uint32
	var x278 uint32
	x277, x278 = bits.Add32(x272, x269, uint32(uint1(x276)))
	var x279 uint32
	var x280 uint32
	x279, x280 = bits.Add32(x270, x267, uint32(uint1(x278)))
	x281 := (uint32(uint1(x280)) + x268)
	var x283 uint32
	_, x283 = bits.Add32(x249, x265, uint32(0x0))
	var x284 uint32
	var x285 uint32
	x284, x285 = bits.Add32(x251, uint32(0x0), uint32(uint1(x283)))
	var x286 uint32
	var x287 uint32
	x286, x287 = bits.Add32(x253, uint32(0x0), uint32(uint1(x285)))
	var x288 uint32
	var x289 uint32
	x288, x289 = bits.Add32(x255, x273, uint32(uint1(x287)))
	var x290 uint32
	var x291 uint32
	x290, x291 = bits.Add32(x257, x275, uint32(uint1(x289)))
	var x292 uint32
	var x293 uint32
	x292, x293 = bits.Add32(x259, x277, uint32(uint1(x291)))
	var x294 uint32
	var x295 uint32
	x294, x295 = bits.Add32(x261, x279, uint32(uint1(x293)))
	var x296 uint32
	var x297 uint32
	x296, x297 = bits.Add32(x263, x281, uint32(uint1(x295)))
	x298 := (uint32(uint1(x297)) + uint32(uint1(x264)))
	var x299 uint32
	var x300 uint32
	x300, x299 = bits.Mul32(x4, arg2[6])
	var x301 uint32
	var x302 uint32
	x302, x301 = bits.Mul32(x4, arg2[5])
	var x303 uint32
	var x304 uint32
	x304, x303 = bits.Mul32(x4, arg2[4])
	var x305 uint32
	var x306 uint32
	x306, x305 = bits.Mul32(x4, arg2[3])
	var x307 uint32
	var x308 uint32
	x308, x307 = bits.Mul32(x4, arg2[2])
	var x309 uint32
	var x310 uint32
	x310, x309 = bits.Mul32(x4, arg2[1])
	var x311 uint32
	var x312 uint32
	x312, x311 = bits.Mul32(x4, arg2[0])
	var x313 uint32
	var x314 uint32
	x313, x314 = bits.Add32(x312, x309, uint32(0x0))
	var x315 uint32
	var x316 uint32
	x315, x316 = bits.Add32(x310, x307, uint32(uint1(x314)))
	var x317 uint32
	var x318 uint32
	x317, x318 = bits.Add32(x308, x305, uint32(uint1(x316)))
	var x319 uint32
	var x320 uint32
	x319, x320 = bits.Add32(x306, x303, uint32(uint1(x318)))
	var x321 uint32
	var x322 uint32
	x321, x322 = bits.Add32(x304, x301, uint32(uint1(x320)))
	var x323 uint32
	var x324 uint32
	x323, x324 = bits.Add32(x302, x299, uint32(uint1(x322)))
	x325 := (uint32(uint1(x324)) + x300)
	var x326 uint32
	var x327 uint32
	x326, x327 = bits.Add32(x284, x311, uint32(0x0))
	var x328 uint32
	var x329 uint32
	x328, x329 = bits.Add32(x286, x313, uint32(uint1(x327)))
	var x330 uint32
	var x331 uint32
	x330, x331 = bits.Add32(x288, x315, uint32(uint1(x329)))
	var x332 uint32
	var x333 uint32
	x332, x333 = bits.Add32(x290, x317, uint32(uint1(x331)))
	var x334 uint32
	var x335 uint32
	x334, x335 = bits.Add32(x292, x319, uint32(uint1(x333)))
	var x336 uint32
	var x337 uint32
	x336, x337 = bits.Add32(x294, x321, uint32(uint1(x335)))
	var x338 uint32
	var x339 uint32
	x338, x339 = bits.Add32(x296, x323, uint32(uint1(x337)))
	var x340 uint32
	var x341 uint32
	x340, x341 = bits.Add32(x298, x325, uint32(uint1(x339)))
	var x342 uint32
	_, x342 = bits.Mul32(x326, 0xffffffff)
	var x344 uint32
	var x345 uint32
	x345, x344 = bits.Mul32(x342, 0xffffffff)
	var x346 uint32
	var x347 uint32
	x347, x346 = bits.Mul32(x342, 0xffffffff)
	var x348 uint32
	var x349 uint32
	x349, x348 = bits.Mul32(x342, 0xffffffff)
	var x350 uint32
	var x351 uint32
	x351, x350 = bits.Mul32(x342, 0xffffffff)
	var x352 uint32
	var x353 uint32
	x352, x353 = bits.Add32(x351, x348, uint32(0x0))
	var x354 uint32
	var x355 uint32
	x354, x355 = bits.Add32(x349, x346, uint32(uint1(x353)))
	var x356 uint32
	var x357 uint32
	x356, x357 = bits.Add32(x347, x344, uint32(uint1(x355)))
	x358 := (uint32(uint1(x357)) + x345)
	var x360 uint32
	_, x360 = bits.Add32(x326, x342, uint32(0x0))
	var x361 uint32
	var x362 uint32
	x361, x362 = bits.Add32(x328, uint32(0x0), uint32(uint1(x360)))
	var x363 uint32
	var x364 uint32
	x363, x364 = bits.Add32(x330, uint32(0x0), uint32(uint1(x362)))
	var x365 uint32
	var x366 uint32
	x365, x366 = bits.Add32(x332, x350, uint32(uint1(x364)))
	var x367 uint32
	var x368 uint32
	x367, x368 = bits.Add32(x334, x352, uint32(uint1(x366)))
	var x369 uint32
	var x370 uint32
	x369, x370 = bits.Add32(x336, x354, uint32(uint1(x368)))
	var x371 uint32
	var x372 uint32
	x371, x372 = bits.Add32(x338, x356, uint32(uint1(x370)))
	var x373 uint32
	var x374 uint32
	x373, x374 = bits.Add32(x340, x358, uint32(uint1(x372)))
	x375 := (uint32(uint1(x374)) + uint32(uint1(x341)))
	var x376 uint32
	var x377 uint32
	x377, x376 = bits.Mul32(x5, arg2[6])
	var x378 uint32
	var x379 uint32
	x379, x378 = bits.Mul32(x5, arg2[5])
	var x380 uint32
	var x381 uint32
	x381, x380 = bits.Mul32(x5, arg2[4])
	var x382 uint32
	var x383 uint32
	x383, x382 = bits.Mul32(x5, arg2[3])
	var x384 uint32
	var x385 uint32
	x385, x384 = bits.Mul32(x5, arg2[2])
	var x386 uint32
	var x387 uint32
	x387, x386 = bits.Mul32(x5, arg2[1])
	var x388 uint32
	var x389 uint32
	x389, x388 = bits.Mul32(x5, arg2[0])
	var x390 uint32
	var x391 uint32
	x390, x391 = bits.Add32(x389, x386, uint32(0x0))
	var x392 uint32
	var x393 uint32
	x392, x393 = bits.Add32(x387, x384, uint32(uint1(x391)))
	var x394 uint32
	var x395 uint32
	x394, x395 = bits.Add32(x385, x382, uint32(uint1(x393)))
	var x396 uint32
	var x397 uint32
	x396, x397 = bits.Add32(x383, x380, uint32(uint1(x395)))
	var x398 uint32
	var x399 uint32
	x398, x399 = bits.Add32(x381, x378, uint32(uint1(x397)))
	var x400 uint32
	var x401 uint32
	x400, x401 = bits.Add32(x379, x376, uint32(uint1(x399)))
	x402 := (uint32(uint1(x401)) + x377)
	var x403 uint32
	var x404 uint32
	x403, x404 = bits.Add32(x361, x388, uint32(0x0))
	var x405 uint32
	var x406 uint32
	x405, x406 = bits.Add32(x363, x390, uint32(uint1(x404)))
	var x407 uint32
	var x408 uint32
	x407, x408 = bits.Add32(x365, x392, uint32(uint1(x406)))
	var x409 uint32
	var x410 uint32
	x409, x410 = bits.Add32(x367, x394, uint32(uint1(x408)))
	var x411 uint32
	var x412 uint32
	x411, x412 = bits.Add32(x369, x396, uint32(uint1(x410)))
	var x413 uint32
	var x414 uint32
	x413, x414 = bits.Add32(x371, x398, uint32(uint1(x412)))
	var x415 uint32
	var x416 uint32
	x415, x416 = bits.Add32(x373, x400, uint32(uint1(x414)))
	var x417 uint32
	var x418 uint32
	x417, x418 = bits.Add32(x375, x402, uint32(uint1(x416)))
	var x419 uint32
	_, x419 = bits.Mul32(x403, 0xffffffff)
	var x421 uint32
	var x422 uint32
	x422, x421 = bits.Mul32(x419, 0xffffffff)
	var x423 uint32
	var x424 uint32
	x424, x423 = bits.Mul32(x419, 0xffffffff)
	var x425 uint32
	var x426 uint32
	x426, x425 = bits.Mul32(x419, 0xffffffff)
	var x427 uint32
	var x428 uint32
	x428, x427 = bits.Mul32(x419, 0xffffffff)
	var x429 uint32
	var x430 uint32
	x429, x430 = bits.Add32(x428, x425, uint32(0x0))
	var x431 uint32
	var x432 uint32
	x431, x432 = bits.Add32(x426, x423, uint32(uint1(x430)))
	var x433 uint32
	var x434 uint32
	x433, x434 = bits.Add32(x424, x421, uint32(uint1(x432)))
	x435 := (uint32(uint1(x434)) + x422)
	var x437 uint32
	_, x437 = bits.Add32(x403, x419, uint32(0x0))
	var x438 uint32
	var x439 uint32
	x438, x439 = bits.Add32(x405, uint32(0x0), uint32(uint1(x437)))
	var x440 uint32
	var x441 uint32
	x440, x441 = bits.Add32(x407, uint32(0x0), uint32(uint1(x439)))
	var x442 uint32
	var x443 uint32
	x442, x443 = bits.Add32(x409, x427, uint32(uint1(x441)))
	var x444 uint32
	var x445 uint32
	x444, x445 = bits.Add32(x411, x429, uint32(uint1(x443)))
	var x446 uint32
	var x447 uint32
	x446, x447 = bits.Add32(x413, x431, uint32(uint1(x445)))
	var x448 uint32
	var x449 uint32
	x448, x449 = bits.Add32(x415, x433, uint32(uint1(x447)))
	var x450 uint32
	var x451 uint32
	x450, x451 = bits.Add32(x417, x435, uint32(uint1(x449)))
	x452 := (uint32(uint1(x451)) + uint32(uint1(x418)))
	var x453 uint32
	var x454 uint32
	x454, x453 = bits.Mul32(x6, arg2[6])
	var x455 uint32
	var x456 uint32
	x456, x455 = bits.Mul32(x6, arg2[5])
	var x457 uint32
	var x458 uint32
	x458, x457 = bits.Mul32(x6, arg2[4])
	var x459 uint32
	var x460 uint32
	x460, x459 = bits.Mul32(x6, arg2[3])
	var x461 uint32
	var x462 uint32
	x462, x461 = bits.Mul32(x6, arg2[2])
	var x463 uint32
	var x464 uint32
	x464, x463 = bits.Mul32(x6, arg2[1])
	var x465 uint32
	var x466 uint32
	x466, x465 = bits.Mul32(x6, arg2[0])
	var x467 uint32
	var x468 uint32
	x467, x468 = bits.Add32(x466, x463, uint32(0x0))
	var x469 uint32
	var x470 uint32
	x469, x470 = bits.Add32(x464, x461, uint32(uint1(x468)))
	var x471 uint32
	var x472 uint32
	x471, x472 = bits.Add32(x462, x459, uint32(uint1(x470)))
	var x473 uint32
	var x474 uint32
	x473, x474 = bits.Add32(x460, x457, uint32(uint1(x472)))
	var x475 uint32
	var x476 uint32
	x475, x476 = bits.Add32(x458, x455, uint32(uint1(x474)))
	var x477 uint32
	var x478 uint32
	x477, x478 = bits.Add32(x456, x453, uint32(uint1(x476)))
	x479 := (uint32(uint1(x478)) + x454)
	var x480 uint32
	var x481 uint32
	x480, x481 = bits.Add32(x438, x465, uint32(0x0))
	var x482 uint32
	var x483 uint32
	x482, x483 = bits.Add32(x440, x467, uint32(uint1(x481)))
	var x484 uint32
	var x485 uint32
	x484, x485 = bits.Add32(x442, x469, uint32(uint1(x483)))
	var x486 uint32
	var x487 uint32
	x486, x487 = bits.Add32(x444, x471, uint32(uint1(x485)))
	var x488 uint32
	var x489 uint32
	x488, x489 = bits.Add32(x446, x473, uint32(uint1(x487)))
	var x490 uint32
	var x491 uint32
	x490, x491 = bits.Add32(x448, x475, uint32(uint1(x489)))
	var x492 uint32
	var x493 uint32
	x492, x493 = bits.Add32(x450, x477, uint32(uint1(x491)))
	var x494 uint32
	var x495 uint32
	x494, x495 = bits.Add32(x452, x479, uint32(uint1(x493)))
	var x496 uint32
	_, x496 = bits.Mul32(x480, 0xffffffff)
	var x498 uint32
	var x499 uint32
	x499, x498 = bits.Mul32(x496, 0xffffffff)
	var x500 uint32
	var x501 uint32
	x501, x500 = bits.Mul32(x496, 0xffffffff)
	var x502 uint32
	var x503 uint32
	x503, x502 = bits.Mul32(x496, 0xffffffff)
	var x504 uint32
	var x505 uint32
	x505, x504 = bits.Mul32(x496, 0xffffffff)
	var x506 uint32
	var x507 uint32
	x506, x507 = bits.Add32(x505, x502, uint32(0x0))
	var x508 uint32
	var x509 uint32
	x508, x509 = bits.Add32(x503, x500, uint32(uint1(x507)))
	var x510 uint32
	var x511 uint32
	x510, x511 = bits.Add32(x501, x498, uint32(uint1(x509)))
	x512 := (uint32(uint1(x511)) + x499)
	var x514 uint32
	_, x514 = bits.Add32(x480, x496, uint32(0x0))
	var x515 uint32
	var x516 uint32
	x515, x516 = bits.Add32(x482, uint32(0x0), uint32(uint1(x514)))
	var x517 uint32
	var x518 uint32
	x517, x518 = bits.Add32(x484, uint32(0x0), uint32(uint1(x516)))
	var x519 uint32
	var x520 uint32
	x519, x520 = bits.Add32(x486, x504, uint32(uint1(x518)))
	var x521 uint32
	var x522 uint32
	x521, x522 = bits.Add32(x488, x506, uint32(uint1(x520)))
	var x523 uint32
	var x524 uint32
	x523, x524 = bits.Add32(x490, x508, uint32(uint1(x522)))
	var x525 uint32
	var x526 uint32
	x525, x526 = bits.Add32(x492, x510, uint32(uint1(x524)))
	var x527 uint32
	var x528 uint32
	x527, x528 = bits.Add32(x494, x512, uint32(uint1(x526)))
	x529 := (uint32(uint1(x528)) + uint32(uint1(x495)))
	var x530 uint32
	var x531 uint32
	x530, x531 = bits.Sub32(x515, uint32(0x1), uint32(0x0))
	var x532 uint32
	var x533 uint32
	x532, x533 = bits.Sub32(x517, uint32(0x0), uint32(uint1(x531)))
	var x534 uint32
	var x535 uint32
	x534, x535 = bits.Sub32(x519, uint32(0x0), uint32(uint1(x533)))
	var x536 uint32
	var x537 uint32
	x536, x537 = bits.Sub32(x521, 0xffffffff, uint32(uint1(x535)))
	var x538 uint32
	var x539 uint32
	x538, x539 = bits.Sub32(x523, 0xffffffff, uint32(uint1(x537)))
	var x540 uint32
	var x541 uint32
	x540, x541 = bits.Sub32(x525, 0xffffffff, uint32(uint1(x539)))
	var x542 uint32
	var x543 uint32
	x542, x543 = bits.Sub32(x527, 0xffffffff, uint32(uint1(x541)))
	var x545 uint32
	_, x545 = bits.Sub32(x529, uint32(0x0), uint32(uint1(x543)))
	var x546 uint32
	cmovznzU32(&x546, uint1(x545), x530, x515)
	var x547 uint32
	cmovznzU32(&x547, uint1(x545), x532, x517)
	var x548 uint32
	cmovznzU32(&x548, uint1(x545), x534, x519)
	var x549 uint32
	cmovznzU32(&x549, uint1(x545), x536, x521)
	var x550 uint32
	cmovznzU32(&x550, uint1(x545), x538, x523)
	var x551 uint32
	cmovznzU32(&x551, uint1(x545), x540, x525)
	var x552 uint32
	cmovznzU32(&x552, uint1(x545), x542, x527)
	out1[0] = x546
	out1[1] = x547
	out1[2] = x548
	out1[3] = x549
	out1[4] = x550
	out1[5] = x551
	out1[6] = x552
}

// Square squares a field element in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
//   0 ≤ eval out1 < m
//
func Square(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement) {
	x1 := arg1[1]
	x2 := arg1[2]
	x3 := arg1[3]
	x4 := arg1[4]
	x5 := arg1[5]
	x6 := arg1[6]
	x7 := arg1[0]
	var x8 uint32
	var x9 uint32
	x9, x8 = bits.Mul32(x7, arg1[6])
	var x10 uint32
	var x11 uint32
	x11, x10 = bits.Mul32(x7, arg1[5])
	var x12 uint32
	var x13 uint32
	x13, x12 = bits.Mul32(x7, arg1[4])
	var x14 uint32
	var x15 uint32
	x15, x14 = bits.Mul32(x7, arg1[3])
	var x16 uint32
	var x17 uint32
	x17, x16 = bits.Mul32(x7, arg1[2])
	var x18 uint32
	var x19 uint32
	x19, x18 = bits.Mul32(x7, arg1[1])
	var x20 uint32
	var x21 uint32
	x21, x20 = bits.Mul32(x7, arg1[0])
	var x22 uint32
	var x23 uint32
	x22, x23 = bits.Add32(x21, x18, uint32(0x0))
	var x24 uint32
	var x25 uint32
	x24, x25 = bits.Add32(x19, x16, uint32(uint1(x23)))
	var x26 uint32
	var x27 uint32
	x26, x27 = bits.Add32(x17, x14, uint32(uint1(x25)))
	var x28 uint32
	var x29 uint32
	x28, x29 = bits.Add32(x15, x12, uint32(uint1(x27)))
	var x30 uint32
	var x31 uint32
	x30, x31 = bits.Add32(x13, x10, uint32(uint1(x29)))
	var x32 uint32
	var x33 uint32
	x32, x33 = bits.Add32(x11, x8, uint32(uint1(x31)))
	x34 := (uint32(uint1(x33)) + x9)
	var x35 uint32
	_, x35 = bits.Mul32(x20, 0xffffffff)
	var x37 uint32
	var x38 uint32
	x38, x37 = bits.Mul32(x35, 0xffffffff)
	var x39 uint32
	var x40 uint32
	x40, x39 = bits.Mul32(x35, 0xffffffff)
	var x41 uint32
	var x42 uint32
	x42, x41 = bits.Mul32(x35, 0xffffffff)
	var x43 uint32
	var x44 uint32
	x44, x43 = bits.Mul32(x35, 0xffffffff)
	var x45 uint32
	var x46 uint32
	x45, x46 = bits.Add32(x44, x41, uint32(0x0))
	var x47 uint32
	var x48 uint32
	x47, x48 = bits.Add32(x42, x39, uint32(uint1(x46)))
	var x49 uint32
	var x50 uint32
	x49, x50 = bits.Add32(x40, x37, uint32(uint1(x48)))
	x51 := (uint32(uint1(x50)) + x38)
	var x53 uint32
	_, x53 = bits.Add32(x20, x35, uint32(0x0))
	var x54 uint32
	var x55 uint32
	x54, x55 = bits.Add32(x22, uint32(0x0), uint32(uint1(x53)))
	var x56 uint32
	var x57 uint32
	x56, x57 = bits.Add32(x24, uint32(0x0), uint32(uint1(x55)))
	var x58 uint32
	var x59 uint32
	x58, x59 = bits.Add32(x26, x43, uint32(uint1(x57)))
	var x60 uint32
	var x61 uint32
	x60, x61 = bits.Add32(x28, x45, uint32(uint1(x59)))
	var x62 uint32
	var x63 uint32
	x62, x63 = bits.Add32(x30, x47, uint32(uint1(x61)))
	var x64 uint32
	var x65 uint32
	x64, x65 = bits.Add32(x32, x49, uint32(uint1(x63)))
	var x66 uint32
	var x67 uint32
	x66, x67 = bits.Add32(x34, x51, uint32(uint1(x65)))
	var x68 uint32
	var x69 uint32
	x69, x68 = bits.Mul32(x1, arg1[6])
	var x70 uint32
	var x71 uint32
	x71, x70 = bits.Mul32(x1, arg1[5])
	var x72 uint32
	var x73 uint32
	x73, x72 = bits.Mul32(x1, arg1[4])
	var x74 uint32
	var x75 uint32
	x75, x74 = bits.Mul32(x1, arg1[3])
	var x76 uint32
	var x77 uint32
	x77, x76 = bits.Mul32(x1, arg1[2])
	var x78 uint32
	var x79 uint32
	x79, x78 = bits.Mul32(x1, arg1[1])
	var x80 uint32
	var x81 uint32
	x81, x80 = bits.Mul32(x1, arg1[0])
	var x82 uint32
	var x83 uint32
	x82, x83 = bits.Add32(x81, x78, uint32(0x0))
	var x84 uint32
	var x85 uint32
	x84, x85 = bits.Add32(x79, x76, uint32(uint1(x83)))
	var x86 uint32
	var x87 uint32
	x86, x87 = bits.Add32(x77, x74, uint32(uint1(x85)))
	var x88 uint32
	var x89 uint32
	x88, x89 = bits.Add32(x75, x72, uint32(uint1(x87)))
	var x90 uint32
	var x91 uint32
	x90, x91 = bits.Add32(x73, x70, uint32(uint1(x89)))
	var x92 uint32
	var x93 uint32
	x92, x93 = bits.Add32(x71, x68, uint32(uint1(x91)))
	x94 := (uint32(uint1(x93)) + x69)
	var x95 uint32
	var x96 uint32
	x95, x96 = bits.Add32(x54, x80, uint32(0x0))
	var x97 uint32
	var x98 uint32
	x97, x98 = bits.Add32(x56, x82, uint32(uint1(x96)))
	var x99 uint32
	var x100 uint32
	x99, x100 = bits.Add32(x58, x84, uint32(uint1(x98)))
	var x101 uint32
	var x102 uint32
	x101, x102 = bits.Add32(x60, x86, uint32(uint1(x100)))
	var x103 uint32
	var x104 uint32
	x103, x104 = bits.Add32(x62, x88, uint32(uint1(x102)))
	var x105 uint32
	var x106 uint32
	x105, x106 = bits.Add32(x64, x90, uint32(uint1(x104)))
	var x107 uint32
	var x108 uint32
	x107, x108 = bits.Add32(x66, x92, uint32(uint1(x106)))
	var x109 uint32
	var x110 uint32
	x109, x110 = bits.Add32(uint32(uint1(x67)), x94, uint32(uint1(x108)))
	var x111 uint32
	_, x111 = bits.Mul32(x95, 0xffffffff)
	var x113 uint32
	var x114 uint32
	x114, x113 = bits.Mul32(x111, 0xffffffff)
	var x115 uint32
	var x116 uint32
	x116, x115 = bits.Mul32(x111, 0xffffffff)
	var x117 uint32
	var x118 uint32
	x118, x117 = bits.Mul32(x111, 0xffffffff)
	var x119 uint32
	var x120 uint32
	x120, x119 = bits.Mul32(x111, 0xffffffff)
	var x121 uint32
	var x122 uint32
	x121, x122 = bits.Add32(x120, x117, uint32(0x0))
	var x123 uint32
	var x124 uint32
	x123, x124 = bits.Add32(x118, x115, uint32(uint1(x122)))
	var x125 uint32
	var x126 uint32
	x125, x126 = bits.Add32(x116, x113, uint32(uint1(x124)))
	x127 := (uint32(uint1(x126)) + x114)
	var x129 uint32
	_, x129 = bits.Add32(x95, x111, uint32(0x0))
	var x130 uint32
	var x131 uint32
	x130, x131 = bits.Add32(x97, uint32(0x0), uint32(uint1(x129)))
	var x132 uint32
	var x133 uint32
	x132, x133 = bits.Add32(x99, uint32(0x0), uint32(uint1(x131)))
	var x134 uint32
	var x135 uint32
	x134, x135 = bits.Add32(x101, x119, uint32(uint1(x133)))
	var x136 uint32
	var x137 uint32
	x136, x137 = bits.Add32(x103, x121, uint32(uint1(x135)))
	var x138 uint32
	var x139 uint32
	x138, x139 = bits.Add32(x105, x123, uint32(uint1(x137)))
	var x140 uint32
	var x141 uint32
	x140, x141 = bits.Add32(x107, x125, uint32(uint1(x139)))
	var x142 uint32
	var x143 uint32
	x142, x143 = bits.Add32(x109, x127, uint32(uint1(x141)))
	x144 := (uint32(uint1(x143)) + uint32(uint1(x110)))
	var x145 uint32
	var x146 uint32
	x146, x145 = bits.Mul32(x2, arg1[6])
	var x147 uint32
	var x148 uint32
	x148, x147 = bits.Mul32(x2, arg1[5])
	var x149 uint32
	var x150 uint32
	x150, x149 = bits.Mul32(x2, arg1[4])
	var x151 uint32
	var x152 uint32
	x152, x151 = bits.Mul32(x2, arg1[3])
	var x153 uint32
	var x154 uint32
	x154, x153 = bits.Mul32(x2, arg1[2])
	var x155 uint32
	var x156 uint32
	x156, x155 = bits.Mul32(x2, arg1[1])
	var x157 uint32
	var x158 uint32
	x158, x157 = bits.Mul32(x2, arg1[0])
	var x159 uint32
	var x160 uint32
	x159, x160 = bits.Add32(x158, x155, uint32(0x0))
	var x161 uint32
	var x162 uint32
	x161, x162 = bits.Add32(x156, x153, uint32(uint1(x160)))
	var x163 uint32
	var x164 uint32
	x163, x164 = bits.Add32(x154, x151, uint32(uint1(x162)))
	var x165 uint32
	var x166 uint32
	x165, x166 = bits.Add32(x152, x149, uint32(uint1(x164)))
	var x167 uint32
	var x168 uint32
	x167, x168 = bits.Add32(x150, x147, uint32(uint1(x166)))
	var x169 uint32
	var x170 uint32
	x169, x170 = bits.Add32(x148, x145, uint32(uint1(x168)))
	x171 := (uint32(uint1(x170)) + x146)
	var x172 uint32
	var x173 uint32
	x172, x173 = bits.Add32(x130, x157, uint32(0x0))
	var x174 uint32
	var x175 uint32
	x174, x175 = bits.Add32(x132, x159, uint32(uint1(x173)))
	var x176 uint32
	var x177 uint32
	x176, x177 = bits.Add32(x134, x161, uint32(uint1(x175)))
	var x178 uint32
	var x179 uint32
	x178, x179 = bits.Add32(x136, x163, uint32(uint1(x177)))
	var x180 uint32
	var x181 uint32
	x180, x181 = bits.Add32(x138, x165, uint32(uint1(x179)))
	var x182 uint32
	var x183 uint32
	x182, x183 = bits.Add32(x140, x167, uint32(uint1(x181)))
	var x184 uint32
	var x185 uint32
	x184, x185 = bits.Add32(x142, x169, uint32(uint1(x183)))
	var x186 uint32
	var x187 uint32
	x186, x187 = bits.Add32(x144, x171, uint32(uint1(x185)))
	var x188 uint32
	_, x188 = bits.Mul32(x172, 0xffffffff)
	var x190 uint32
	var x191 uint32
	x191, x190 = bits.Mul32(x188, 0xffffffff)
	var x192 uint32
	var x193 uint32
	x193, x192 = bits.Mul32(x188, 0xffffffff)
	var x194 uint32
	var x195 uint32
	x195, x194 = bits.Mul32(x188, 0xffffffff)
	var x196 uint32
	var x197 uint32
	x197, x196 = bits.Mul32(x188, 0xffffffff)
	var x198 uint32
	var x199 uint32
	x198, x199 = bits.Add32(x197, x194, uint32(0x0))
	var x200 uint32
	var x201 uint32
	x200, x201 = bits.Add32(x195, x192, uint32(uint1(x199)))
	var x202 uint32
	var x203 uint32
	x202, x203 = bits.Add32(x193, x190, uint32(uint1(x201)))
	x204 := (uint32(uint1(x203)) + x191)
	var x206 uint32
	_, x206 = bits.Add32(x172, x188, uint32(0x0))
	var x207 uint32
	var x208 uint32
	x207, x208 = bits.Add32(x174, uint32(0x0), uint32(uint1(x206)))
	var x209 uint32
	var x210 uint32
	x209, x210 = bits.Add32(x176, uint32(0x0), uint32(uint1(x208)))
	var x211 uint32
	var x212 uint32
	x211, x212 = bits.Add32(x178, x196, uint32(uint1(x210)))
	var x213 uint32
	var x214 uint32
	x213, x214 = bits.Add32(x180, x198, uint32(uint1(x212)))
	var x215 uint32
	var x216 uint32
	x215, x216 = bits.Add32(x182, x200, uint32(uint1(x214)))
	var x217 uint32
	var x218 uint32
	x217, x218 = bits.Add32(x184, x202, uint32(uint1(x216)))
	var x219 uint32
	var x220 uint32
	x219, x220 = bits.Add32(x186, x204, uint32(uint1(x218)))
	x221 := (uint32(uint1(x220)) + uint32(uint1(x187)))
	var x222 uint32
	var x223 uint32
	x223, x222 = bits.Mul32(x3, arg1[6])
	var x224 uint32
	var x225 uint32
	x225, x224 = bits.Mul32(x3, arg1[5])
	var x226 uint32
	var x227 uint32
	x227, x226 = bits.Mul32(x3, arg1[4])
	var x228 uint32
	var x229 uint32
	x229, x228 = bits.Mul32(x3, arg1[3])
	var x230 uint32
	var x231 uint32
	x231, x230 = bits.Mul32(x3, arg1[2])
	var x232 uint32
	var x233 uint32
	x233, x232 = bits.Mul32(x3, arg1[1])
	var x234 uint32
	var x235 uint32
	x235, x234 = bits.Mul32(x3, arg1[0])
	var x236 uint32
	var x237 uint32
	x236, x237 = bits.Add32(x235, x232, uint32(0x0))
	var x238 uint32
	var x239 uint32
	x238, x239 = bits.Add32(x233, x230, uint32(uint1(x237)))
	var x240 uint32
	var x241 uint32
	x240, x241 = bits.Add32(x231, x228, uint32(uint1(x239)))
	var x242 uint32
	var x243 uint32
	x242, x243 = bits.Add32(x229, x226, uint32(uint1(x241)))
	var x244 uint32
	var x245 uint32
	x244, x245 = bits.Add32(x227, x224, uint32(uint1(x243)))
	var x246 uint32
	var x247 uint32
	x246, x247 = bits.Add32(x225, x222, uint32(uint1(x245)))
	x248 := (uint32(uint1(x247)) + x223)
	var x249 uint32
	var x250 uint32
	x249, x250 = bits.Add32(x207, x234, uint32(0x0))
	var x251 uint32
	var x252 uint32
	x251, x252 = bits.Add32(x209, x236, uint32(uint1(x250)))
	var x253 uint32
	var x254 uint32
	x253, x254 = bits.Add32(x211, x238, uint32(uint1(x252)))
	var x255 uint32
	var x256 uint32
	x255, x256 = bits.Add32(x213, x240, uint32(uint1(x254)))
	var x257 uint32
	var x258 uint32
	x257, x258 = bits.Add32(x215, x242, uint32(uint1(x256)))
	var x259 uint32
	var x260 uint32
	x259, x260 = bits.Add32(x217, x244, uint32(uint1(x258)))
	var x261 uint32
	var x262 uint32
	x261, x262 = bits.Add32(x219, x246, uint32(uint1(x260)))
	var x263 uint32
	var x264 uint32
	x263, x264 = bits.Add32(x221, x248, uint32(uint1(x262)))
	var x265 uint32
	_, x265 = bits.Mul32(x249, 0xffffffff)
	var x267 uint32
	var x268 uint32
	x268, x267 = bits.Mul32(x265, 0xffffffff)
	var x269 uint32
	var x270 uint32
	x270, x269 = bits.Mul32(x265, 0xffffffff)
	var x271 uint32
	var x272 uint32
	x272, x271 = bits.Mul32(x265, 0xffffffff)
	var x273 uint32
	var x274 uint32
	x274, x273 = bits.Mul32(x265, 0xffffffff)
	var x275 uint32
	var x276 uint32
	x275, x276 = bits.Add32(x274, x271, uint32(0x0))
	var x277 uint32
	var x278 uint32
	x277, x278 = bits.Add32(x272, x269, uint32(uint1(x276)))
	var x279 uint32
	var x280 uint32
	x279, x280 = bits.Add32(x270, x267, uint32(uint1(x278)))
	x281 := (uint32(uint1(x280)) + x268)
	var x283 uint32
	_, x283 = bits.Add32(x249, x265, uint32(0x0))
	var x284 uint32
	var x285 uint32
	x284, x285 = bits.Add32(x251, uint32(0x0), uint32(uint1(x283)))
	var x286 uint32
	var x287 uint32
	x286, x287 = bits.Add32(x253, uint32(0x0), uint32(uint1(x285)))
	var x288 uint32
	var x289 uint32
	x288, x289 = bits.Add32(x255, x273, uint32(uint1(x287)))
	var x290 uint32
	var x291 uint32
	x290, x291 = bits.Add32(x257, x275, uint32(uint1(x289)))
	var x292 uint32
	var x293 uint32
	x292, x293 = bits.Add32(x259, x277, uint32(uint1(x291)))
	var x294 uint32
	var x295 uint32
	x294, x295 = bits.Add32(x261, x279, uint32(uint1(x293)))
	var x296 uint32
	var x297 uint32
	x296, x297 = bits.Add32(x263, x281, uint32(uint1(x295)))
	x298 := (uint32(uint1(x297)) + uint32(uint1(x264)))
	var x299 uint32
	var x300 uint32
	x300, x299 = bits.Mul32(x4, arg1[6])
	var x301 uint32
	var x302 uint32
	x302, x301 = bits.Mul32(x4, arg1[5])
	var x303 uint32
	var x304 uint32
	x304, x303 = bits.Mul32(x4, arg1[4])
	var x305 uint32
	var x306 uint32
	x306, x305 = bits.Mul32(x4, arg1[3])
	var x307 uint32
	var x308 uint32
	x308, x307 = bits.Mul32(x4, arg1[2])
	var x309 uint32
	var x310 uint32
	x310, x309 = bits.Mul32(x4, arg1[1])
	var x311 uint32
	var x312 uint32
	x312, x311 = bits.Mul32(x4, arg1[0])
	var x313 uint32
	var x314 uint32
	x313, x314 = bits.Add32(x312, x309, uint32(0x0))
	var x315 uint32
	var x316 uint32
	x315, x316 = bits.Add32(x310, x307, uint32(uint1(x314)))
	var x317 uint32
	var x318 uint32
	x317, x318 = bits.Add32(x308, x305, uint32(uint1(x316)))
	var x319 uint32
	var x320 uint32
	x319, x320 = bits.Add32(x306, x303, uint32(uint1(x318)))
	var x321 uint32
	var x322 uint32
	x321, x322 = bits.Add32(x304, x301, uint32(uint1(x320)))
	var x323 uint32
	var x324 uint32
	x323, x324 = bits.Add32(x302, x299, uint32(uint1(x322)))
	x325 := (uint32(uint1(x324)) + x300)
	var x326 uint32
	var x327 uint32
	x326, x327 = bits.Add32(x284, x311, uint32(0x0))
	var x328 uint32
	var x329 uint32
	x328, x329 = bits.Add32(x286, x313, uint32(uint1(x327)))
	var x330 uint32
	var x331 uint32
	x330, x331 = bits.Add32(x288, x315, uint32(uint1(x329)))
	var x332 uint32
	var x333 uint32
	x332, x333 = bits.Add32(x290, x317, uint32(uint1(x331)))
	var x334 uint32
	var x335 uint32
	x334, x335 = bits.Add32(x292, x319, uint32(uint1(x333)))
	var x336 uint32
	var x337 uint32
	x336, x337 = bits.Add32(x294, x321, uint32(uint1(x335)))
	var x338 uint32
	var x339 uint32
	x338, x339 = bits.Add32(x296, x323, uint32(uint1(x337)))
	var x340 uint32
	var x341 uint32
	x340, x341 = bits.Add32(x298, x325, uint32(uint1(x339)))
	var x342 uint32
	_, x342 = bits.Mul32(x326, 0xffffffff)
	var x344 uint32
	var x345 uint32
	x345, x344 = bits.Mul32(x342, 0xffffffff)
	var x346 uint32
	var x347 uint32
	x347, x346 = bits.Mul32(x342, 0xffffffff)
	var x348 uint32
	var x349 uint32
	x349, x348 = bits.Mul32(x342, 0xffffffff)
	var x350 uint32
	var x351 uint32
	x351, x350 = bits.Mul32(x342, 0xffffffff)
	var x352 uint32
	var x353 uint32
	x352, x353 = bits.Add32(x351, x348, uint32(0x0))
	var x354 uint32
	var x355 uint32
	x354, x355 = bits.Add32(x349, x346, uint32(uint1(x353)))
	var x356 uint32
	var x357 uint32
	x356, x357 = bits.Add32(x347, x344, uint32(uint1(x355)))
	x358 := (uint32(uint1(x357)) + x345)
	var x360 uint32
	_, x360 = bits.Add32(x326, x342, uint32(0x0))
	var x361 uint32
	var x362 uint32
	x361, x362 = bits.Add32(x328, uint32(0x0), uint32(uint1(x360)))
	var x363 uint32
	var x364 uint32
	x363, x364 = bits.Add32(x330, uint32(0x0), uint32(uint1(x362)))
	var x365 uint32
	var x366 uint32
	x365, x366 = bits.Add32(x332, x350, uint32(uint1(x364)))
	var x367 uint32
	var x368 uint32
	x367, x368 = bits.Add32(x334, x352, uint32(uint1(x366)))
	var x369 uint32
	var x370 uint32
	x369, x370 = bits.Add32(x336, x354, uint32(uint1(x368)))
	var x371 uint32
	var x372 uint32
	x371, x372 = bits.Add32(x338, x356, uint32(uint1(x370)))
	var x373 uint32
	var x374 uint32
	x373, x374 = bits.Add32(x340, x358, uint32(uint1(x372)))
	x375 := (uint32(uint1(x374)) + uint32(uint1(x341)))
	var x376 uint32
	var x377 uint32
	x377, x376 = bits.Mul32(x5, arg1[6])
	var x378 uint32
	var x379 uint32
	x379, x378 = bits.Mul32(x5, arg1[5])
	var x380 uint32
	var x381 uint32
	x381, x380 = bits.Mul32(x5, arg1[4])
	var x382 uint32
	var x383 uint32
	x383, x382 = bits.Mul32(x5, arg1[3])
	var x384 uint32
	var x385 uint32
	x385, x384 = bits.Mul32(x5, arg1[2])
	var x386 uint32
	var x387 uint32
	x387, x386 = bits.Mul32(x5, arg1[1])
	var x388 uint32
	var x389 uint32
	x389, x388 = bits.Mul32(x5, arg1[0])
	var x390 uint32
	var x391 uint32
	x390, x391 = bits.Add32(x389, x386, uint32(0x0))
	var x392 uint32
	var x393 uint32
	x392, x393 = bits.Add32(x387, x384, uint32(uint1(x391)))
	var x394 uint32
	var x395 uint32
	x394, x395 = bits.Add32(x385, x382, uint32(uint1(x393)))
	var x396 uint32
	var x397 uint32
	x396, x397 = bits.Add32(x383, x380, uint32(uint1(x395)))
	var x398 uint32
	var x399 uint32
	x398, x399 = bits.Add32(x381, x378, uint32(uint1(x397)))
	var x400 uint32
	var x401 uint32
	x400, x401 = bits.Add32(x379, x376, uint32(uint1(x399)))
	x402 := (uint32(uint1(x401)) + x377)
	var x403 uint32
	var x404 uint32
	x403, x404 = bits.Add32(x361, x388, uint32(0x0))
	var x405 uint32
	var x406 uint32
	x405, x406 = bits.Add32(x363, x390, uint32(uint1(x404)))
	var x407 uint32
	var x408 uint32
	x407, x408 = bits.Add32(x365, x392, uint32(uint1(x406)))
	var x409 uint32
	var x410 uint32
	x409, x410 = bits.Add32(x367, x394, uint32(uint1(x408)))
	var x411 uint32
	var x412 uint32
	x411, x412 = bits.Add32(x369, x396, uint32(uint1(x410)))
	var x413 uint32
	var x414 uint32
	x413, x414 = bits.Add32(x371, x398, uint32(uint1(x412)))
	var x415 uint32
	var x416 uint32
	x415, x416 = bits.Add32(x373, x400, uint32(uint1(x414)))
	var x417 uint32
	var x418 uint32
	x417, x418 = bits.Add32(x375, x402, uint32(uint1(x416)))
	var x419 uint32
	_, x419 = bits.Mul32(x403, 0xffffffff)
	var x421 uint32
	var x422 uint32
	x422, x421 = bits.Mul32(x419, 0xffffffff)
	var x423 uint32
	var x424 uint32
	x424, x423 = bits.Mul32(x419, 0xffffffff)
	var x425 uint32
	var x426 uint32
	x426, x425 = bits.Mul32(x419, 0xffffffff)
	var x427 uint32
	var x428 uint32
	x428, x427 = bits.Mul32(x419, 0xffffffff)
	var x429 uint32
	var x430 uint32
	x429, x430 = bits.Add32(x428, x425, uint32(0x0))
	var x431 uint32
	var x432 uint32
	x431, x432 = bits.Add32(x426, x423, uint32(uint1(x430)))
	var x433 uint32
	var x434 uint32
	x433, x434 = bits.Add32(x424, x421, uint32(uint1(x432)))
	x435 := (uint32(uint1(x434)) + x422)
	var x437 uint32
	_, x437 = bits.Add32(x403, x419, uint32(0x0))
	var x438 uint32
	var x439 uint32
	x438, x439 = bits.Add32(x405, uint32(0x0), uint32(uint1(x437)))
	var x440 uint32
	var x441 uint32
	x440, x441 = bits.Add32(x407, uint32(0x0), uint32(uint1(x439)))
	var x442 uint32
	var x443 uint32
	x442, x443 = bits.Add32(x409, x427, uint32(uint1(x441)))
	var x444 uint32
	var x445 uint32
	x444, x445 = bits.Add32(x411, x429, uint32(uint1(x443)))
	var x446 uint32
	var x447 uint32
	x446, x447 = bits.Add32(x413, x431, uint32(uint1(x445)))
	var x448 uint32
	var x449 uint32
	x448, x449 = bits.Add32(x415, x433, uint32(uint1(x447)))
	var x450 uint32
	var x451 uint32
	x450, x451 = bits.Add32(x417, x435, uint32(uint1(x449)))
	x452 := (uint32(uint1(x451)) + uint32(uint1(x418)))
	var x453 uint32
	var x454 uint32
	x454, x453 = bits.Mul32(x6, arg1[6])
	var x455 uint32
	var x456 uint32
	x456, x455 = bits.Mul32(x6, arg1[5])
	var x457 uint32
	var x458 uint32
	x458, x457 = bits.Mul32(x6, arg1[4])
	var x459 uint32
	var x460 uint32
	x460, x459 = bits.Mul32(x6, arg1[3])
	var x461 uint32
	var x462 uint32
	x462, x461 = bits.Mul32(x6, arg1[2])
	var x463 uint32
	var x464 uint32
	x464, x463 = bits.Mul32(x6, arg1[1])
	var x465 uint32
	var x466 uint32
	x466, x465 = bits.Mul32(x6, arg1[0])
	var x467 uint32
	var x468 uint32
	x467, x468 = bits.Add32(x466, x463, uint32(0x0))
	var x469 uint32
	var x470 uint32
	x469, x470 = bits.Add32(x464, x461, uint32(uint1(x468)))
	var x471 uint32
	var x472 uint32
	x471, x472 = bits.Add32(x462, x459, uint32(uint1(x470)))
	var x473 uint32
	var x474 uint32
	x473, x474 = bits.Add32(x460, x457, uint32(uint1(x472)))
	var x475 uint32
	var x476 uint32
	x475, x476 = bits.Add32(x458, x455, uint32(uint1(x474)))
	var x477 uint32
	var x478 uint32
	x477, x478 = bits.Add32(x456, x453, uint32(uint1(x476)))
	x479 := (uint32(uint1(x478)) + x454)
	var x480 uint32
	var x481 uint32
	x480, x481 = bits.Add32(x438, x465, uint32(0x0))
	var x482 uint32
	var x483 uint32
	x482, x483 = bits.Add32(x440, x467, uint32(uint1(x481)))
	var x484 uint32
	var x485 uint32
	x484, x485 = bits.Add32(x442, x469, uint32(uint1(x483)))
	var x486 uint32
	var x487 uint32
	x486, x487 = bits.Add32(x444, x471, uint32(uint1(x485)))
	var x488 uint32
	var x489 uint32
	x488, x489 = bits.Add32(x446, x473, uint32(uint1(x487)))
	var x490 uint32
	var x491 uint32
	x490, x491 = bits.Add32(x448, x475, uint32(uint1(x489)))
	var x492 uint32
	var x493 uint32
	x492, x493 = bits.Add32(x450, x477, uint32(uint1(x491)))
	var x494 uint32
	var x495 uint32
	x494, x495 = bits.Add32(x452, x479, uint32(uint1(x493)))
	var x496 uint32
	_, x496 = bits.Mul32(x480, 0xffffffff)
	var x498 uint32
	var x499 uint32
	x499, x498 = bits.Mul32(x496, 0xffffffff)
	var x500 uint32
	var x501 uint32
	x501, x500 = bits.Mul32(x496, 0xffffffff)
	var x502 uint32
	var x503 uint32
	x503, x502 = bits.Mul32(x496, 0xffffffff)
	var x504 uint32
	var x505 uint32
	x505, x504 = bits.Mul32(x496, 0xffffffff)
	var x506 uint32
	var x507 uint32
	x506, x507 = bits.Add32(x505, x502, uint32(0x0))
	var x508 uint32
	var x509 uint32
	x508, x509 = bits.Add32(x503, x500, uint32(uint1(x507)))
	var x510 uint32
	var x511 uint32
	x510, x511 = bits.Add32(x501, x498, uint32(uint1(x509)))
	x512 := (uint32(uint1(x511)) + x499)
	var x514 uint32
	_, x514 = bits.Add32(x480, x496, uint32(0x0))
	var x515 uint32
	var x516 uint32
	x515, x516 = bits.Add32(x482, uint32(0x0), uint32(uint1(x514)))
	var x517 uint32
	var x518 uint32
	x517, x518 = bits.Add32(x484, uint32(0x0), uint32(uint1(x516)))
	var x519 uint32
	var x520 uint32
	x519, x520 = bits.Add32(x486, x504, uint32(uint1(x518)))
	var x521 uint32
	var x522 uint32
	x521, x522 = bits.Add32(x488, x506, uint32(uint1(x520)))
	var x523 uint32
	var x524 uint32
	x523, x524 = bits.Add32(x490, x508, uint32(uint1(x522)))
	var x525 uint32
	var x526 uint32
	x525, x526 = bits.Add32(x492, x510, uint32(uint1(x524)))
	var x527 uint32
	var x528 uint32
	x527, x528 = bits.Add32(x494, x512, uint32(uint1(x526)))
	x529 := (uint32(uint1(x528)) + uint32(uint1(x495)))
	var x530 uint32
	var x531 uint32
	x530, x531 = bits.Sub32(x515, uint32(0x1), uint32(0x0))
	var x532 uint32
	var x533 uint32
	x532, x533 = bits.Sub32(x517, uint32(0x0), uint32(uint1(x531)))
	var x534 uint32
	var x535 uint32
	x534, x535 = bits.Sub32(x519, uint32(0x0), uint32(uint1(x533)))
	var x536 uint32
	var x537 uint32
	x536, x537 = bits.Sub32(x521, 0xffffffff, uint32(uint1(x535)))
	var x538 uint32
	var x539 uint32
	x538, x539 = bits.Sub32(x523, 0xffffffff, uint32(uint1(x537)))
	var x540 uint32
	var x541 uint32
	x540, x541 = bits.Sub32(x525, 0xffffffff, uint32(uint1(x539)))
	var x542 uint32
	var x543 uint32
	x542, x543 = bits.Sub32(x527, 0xffffffff, uint32(uint1(x541)))
	var x545 uint32
	_, x545 = bits.Sub32(x529, uint32(0x0), uint32(uint1(x543)))
	var x546 uint32
	cmovznzU32(&x546, uint1(x545), x530, x515)
	var x547 uint32
	cmovznzU32(&x547, uint1(x545), x532, x517)
	var x548 uint32
	cmovznzU32(&x548, uint1(x545), x534, x519)
	var x549 uint32
	cmovznzU32(&x549, uint1(x545), x536, x521)
	var x550 uint32
	cmovznzU32(&x550, uint1(x545), x538, x523)
	var x551 uint32
	cmovznzU32(&x551, uint1(x545), x540, x525)
	var x552 uint32
	cmovznzU32(&x552, uint1(x545), x542, x527)
	out1[0] = x546
	out1[1] = x547
	out1[2] = x548
	out1[3] = x549
	out1[4] = x550
	out1[5] = x551
	out1[6] = x552
}

// Add adds two field elements in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
//   0 ≤ eval arg2 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
//   0 ≤ eval out1 < m
//
func Add(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement, arg2 *MontgomeryDomainFieldElement) {
	var x1 uint32
	var x2 uint32
	x1, x2 = bits.Add32(arg1[0], arg2[0], uint32(0x0))
	var x3 uint32
	var x4 uint32
	x3, x4 = bits.Add32(arg1[1], arg2[1], uint32(uint1(x2)))
	var x5 uint32
	var x6 uint32
	x5, x6 = bits.Add32(arg1[2], arg2[2], uint32(uint1(x4)))
	var x7 uint32
	var x8 uint32
	x7, x8 = bits.Add32(arg1[3], arg2[3], uint32(uint1(x6)))
	var x9 uint32
	var x10 uint32
	x9, x10 = bits.Add32(arg1[4], arg2[4], uint32(uint1(x8)))
	var x11 uint32
	var x12 uint32
	x11, x12 = bits.Add32(arg1[5], arg2[5], uint32(uint1(x10)))
	var x13 uint32
	var x14 uint32
	x13, x14 = bits.Add32(arg1[6], arg2[6], uint32(uint1(x12)))
	var x15 uint32
	var x16 uint32
	x15, x16 = bits.Sub32(x1, uint32(0x1), uint32(0x0))
	var x17 uint32
	var x18 uint32
	x17, x18 = bits.Sub32(x3, uint32(0x0), uint32(uint1(x16)))
	var x19 uint32
	var x20 uint32
	x19, x20 = bits.Sub32(x5, uint32(0x0), uint32(uint1(x18)))
	var x21 uint32
	var x22 uint32
	x21, x22 = bits.Sub32(x7, 0xffffffff, uint32(uint1(x20)))
	var x23 uint32
	var x24 uint32
	x23, x24 = bits.Sub32(x9, 0xffffffff, uint32(uint1(x22)))
	var x25 uint32
	var x26 uint32
	x25, x26 = bits.Sub32(x11, 0xffffffff, uint32(uint1(x24)))
	var x27 uint32
	var x28 uint32
	x27, x28 = bits.Sub32(x13, 0xffffffff, uint32(uint1(x26)))
	var x30 uint32
	_, x30 = bits.Sub32(uint32(uint1(x14)), uint32(0x0), uint32(uint1(x28)))
	var x31 uint32
	cmovznzU32(&x31, uint1(x30), x15, x1)
	var x32 uint32
	cmovznzU32(&x32, uint1(x30), x17, x3)
	var x33 uint32
	cmovznzU32(&x33, uint1(x30), x19, x5)
	var x34 uint32
	cmovznzU32(&x34, uint1(x30), x21, x7)
	var x35 uint32
	cmovznzU32(&x35, uint1(x30), x23, x9)
	var x36 uint32
	cmovznzU32(&x36, uint1(x30), x25, x11)
	var x37 uint32
	cmovznzU32(&x37, uint1(x30), x27, x13)
	out1[0] = x31
	out1[1] = x32
	out1[2] = x33
	out1[3] = x34
	out1[4] = x35
	out1[5] = x36
	out1[6] = x37
}

// Sub subtracts two field elements in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
//   0 ≤ eval arg2 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
//   0 ≤ eval out1 < m
//
func Sub(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement, arg2 *MontgomeryDomainFieldElement) {
	var x1 uint32
	var x2 uint32
	x1, x2 = bits.Sub32(arg1[0], arg2[0], uint32(0x0))
	var x3 uint32
	var x4 uint32
	x3, x4 = bits.Sub32(arg1[1], arg2[1], uint32(uint1(x2)))
	var x5 uint32
	var x6 uint32
	x5, x6 = bits.Sub32(arg1[2], arg2[2], uint32(uint1(x4)))
	var x7 uint32
	var x8 uint32
	x7, x8 = bits.Sub32(arg1[3], arg2[3], uint32(uint1(x6)))
	var x9 uint32
	var x10 uint32
	x9, x10 = bits.Sub32(arg1[4], arg2[4], uint32(uint1(x8)))
	var x11 uint32
	var x12 uint32
	x11, x12 = bits.Sub32(arg1[5], arg2[5], uint32(uint1(x10)))
	var x13 uint32
	var x14 uint32
	x13, x14 = bits.Sub32(arg1[6], arg2[6], uint32(uint1(x12)))
	var x15 uint32
	cmovznzU32(&x15, uint1(x14), uint32(0x0), 0xffffffff)
	var x16 uint32
	var x17 uint32
	x16, x17 = bits.Add32(x1, uint32((uint1(x15) & 0x1)), uint32(0x0))
	var x18 uint32
	var x19 uint32
	x18, x19 = bits.Add32(x3, uint32(0x0), uint32(uint1(x17)))
	var x20 uint32
	var x21 uint32
	x20, x21 = bits.Add32(x5, uint32(0x0), uint32(uint1(x19)))
	var x22 uint32
	var x23 uint32
	x22, x23 = bits.Add32(x7, x15, uint32(uint1(x21)))
	var x24 uint32
	var x25 uint32
	x24, x25 = bits.Add32(x9, x15, uint32(uint1(x23)))
	var x26 uint32
	var x27 uint32
	x26, x27 = bits.Add32(x11, x15, uint32(uint1(x25)))
	var x28 uint32
	x28, _ = bits.Add32(x13, x15, uint32(uint1(x27)))
	out1[0] = x16
	out1[1] = x18
	out1[2] = x20
	out1[3] = x22
	out1[4] = x24
	out1[5] = x26
	out1[6] = x28
}

// Opp negates a field element in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
//   0 ≤ eval out1 < m
//
func Opp(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement) {
	var x1 uint32
	var x2 uint32
	x1, x2 = bits.Sub32(uint32(0x0), arg1[0], uint32(0x0))
	var x3 uint32
	var x4 uint32
	x3, x4 = bits.Sub32(uint32(0x0), arg1[1], uint32(uint1(x2)))
	var x5 uint32
	var x6 uint32
	x5, x6 = bits.Sub32(uint32(0x0), arg1[2], uint32(uint1(x4)))
	var x7 uint32
	var x8 uint32
	x7, x8 = bits.Sub32(uint32(0x0), arg1[3], uint32(uint1(x6)))
	var x9 uint32
	var x10 uint32
	x9, x10 = bits.Sub32(uint32(0x0), arg1[4], uint32(uint1(x8)))
	var x11 uint32
	var x12 uint32
	x11, x12 = bits.Sub32(uint32(0x0), arg1[5], uint32(uint1(x10)))
	var x13 uint32
	var x14 uint32
	x13, x14 = bits.Sub32(uint32(0x0), arg1[6], uint32(uint1(x12)))
	var x15 uint32
	cmovznzU32(&x15, uint1(x14), uint32(0x0), 0xffffffff)
	var x16 uint32
	var x17 uint32
	x16, x17 = bits.Add32(x1, uint32((uint1(x15) & 0x1)), uint32(0x0))
	var x18 uint32
	var x19 uint32
	x18, x19 = bits.Add32(x3, uint32(0x0), uint32(uint1(x17)))
	var x20 uint32
	var x21 uint32
	x20, x21 = bits.Add32(x5, uint32(0x0), uint32(uint1(x19)))
	var x22 uint32
	var x23 uint32
	x22, x23 = bits.Add32(x7, x15, uint32(uint1(x21)))
	var x24 uint32
	var x25 uint32
	x24, x25 = bits.Add32(x9, x15, uint32(uint1(x23)))
	var x26 uint32
	var x27 uint32
	x26, x27 = bits.Add32(x11, x15, uint32(uint1(x25)))
	var x28 uint32
	x28, _ = bits.Add32(x13, x15, uint32(uint1(x27)))
	out1[0] = x16
	out1[1] = x18
	out1[2] = x20
	out1[3] = x22
	out1[4] = x24
	out1[5] = x26
	out1[6] = x28
}

// FromMontgomery translates a field element out of the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval out1 mod m = (eval arg1 * ((2^32)⁻¹ mod m)^7) mod m
//   0 ≤ eval out1 < m
//
func FromMontgomery(out1 *NonMontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement) {
	x1 := arg1[0]
	var x2 uint32
	_, x2 = bits.Mul32(x1, 0xffffffff)
	var x4 uint32
	var x5 uint32
	x5, x4 = bits.Mul32(x2, 0xffffffff)
	var x6 uint32
	var x7 uint32
	x7, x6 = bits.Mul32(x2, 0xffffffff)
	var x8 uint32
	var x9 uint32
	x9, x8 = bits.Mul32(x2, 0xffffffff)
	var x10 uint32
	var x11 uint32
	x11, x10 = bits.Mul32(x2, 0xffffffff)
	var x12 uint32
	var x13 uint32
	x12, x13 = bits.Add32(x11, x8, uint32(0x0))
	var x14 uint32
	var x15 uint32
	x14, x15 = bits.Add32(x9, x6, uint32(uint1(x13)))
	var x16 uint32
	var x17 uint32
	x16, x17 = bits.Add32(x7, x4, uint32(uint1(x15)))
	var x19 uint32
	_, x19 = bits.Add32(x1, x2, uint32(0x0))
	var x20 uint32
	var x21 uint32
	x20, x21 = bits.Add32(uint32(uint1(x19)), arg1[1], uint32(0x0))
	var x22 uint32
	_, x22 = bits.Mul32(x20, 0xffffffff)
	var x24 uint32
	var x25 uint32
	x25, x24 = bits.Mul32(x22, 0xffffffff)
	var x26 uint32
	var x27 uint32
	x27, x26 = bits.Mul32(x22, 0xffffffff)
	var x28 uint32
	var x29 uint32
	x29, x28 = bits.Mul32(x22, 0xffffffff)
	var x30 uint32
	var x31 uint32
	x31, x30 = bits.Mul32(x22, 0xffffffff)
	var x32 uint32
	var x33 uint32
	x32, x33 = bits.Add32(x31, x28, uint32(0x0))
	var x34 uint32
	var x35 uint32
	x34, x35 = bits.Add32(x29, x26, uint32(uint1(x33)))
	var x36 uint32
	var x37 uint32
	x36, x37 = bits.Add32(x27, x24, uint32(uint1(x35)))
	var x38 uint32
	var x39 uint32
	x38, x39 = bits.Add32(x12, x30, uint32(0x0))
	var x40 uint32
	var x41 uint32
	x40, x41 = bits.Add32(x14, x32, uint32(uint1(x39)))
	var x42 uint32
	var x43 uint32
	x42, x43 = bits.Add32(x16, x34, uint32(uint1(x41)))
	var x44 uint32
	var x45 uint32
	x44, x45 = bits.Add32((uint32(uint1(x17)) + x5), x36, uint32(uint1(x43)))
	var x46 uint32
	var x47 uint32
	x46, x47 = bits.Add32(uint32(0x0), (uint32(uint1(x37)) + x25), uint32(uint1(x45)))
	var x49 uint32
	_, x49 = bits.Add32(x20, x22, uint32(0x0))
	var x50 uint32
	var x51 uint32
	x50, x51 = bits.Add32((uint32(uint1(x49)) + uint32(uint1(x21))), arg1[2], uint32(0x0))
	var x52 uint32
	var x53 uint32
	x52, x53 = bits.Add32(x10, uint32(0x0), uint32(uint1(x51)))
	var x54 uint32
	var x55 uint32
	x54, x55 = bits.Add32(x38, uint32(0x0), uint32(uint1(x53)))
	var x56 uint32
	var x57 uint32
	x56, x57 = bits.Add32(x40, uint32(0x0), uint32(uint1(x55)))
	var x58 uint32
	var x59 uint32
	x58, x59 = bits.Add32(x42, uint32(0x0), uint32(uint1(x57)))
	var x60 uint32
	var x61 uint32
	x60, x61 = bits.Add32(x44, uint32(0x0), uint32(uint1(x59)))
	var x62 uint32
	var x63 uint32
	x62, x63 = bits.Add32(x46, uint32(0x0), uint32(uint1(x61)))
	var x64 uint32
	_, x64 = bits.Mul32(x50, 0xffffffff)
	var x66 uint32
	var x67 uint32
	x67, x66 = bits.Mul32(x64, 0xffffffff)
	var x68 uint32
	var x69 uint32
	x69, x68 = bits.Mul32(x64, 0xffffffff)
	var x70 uint32
	var x71 uint32
	x71, x70 = bits.Mul32(x64, 0xffffffff)
	var x72 uint32
	var x73 uint32
	x73, x72 = bits.Mul32(x64, 0xffffffff)
	var x74 uint32
	var x75 uint32
	x74, x75 = bits.Add32(x73, x70, uint32(0x0))
	var x76 uint32
	var x77 uint32
	x76, x77 = bits.Add32(x71, x68, uint32(uint1(x75)))
	var x78 uint32
	var x79 uint32
	x78, x79 = bits.Add32(x69, x66, uint32(uint1(x77)))
	var x81 uint32
	_, x81 = bits.Add32(x50, x64, uint32(0x0))
	var x82 uint32
	var x83 uint32
	x82, x83 = bits.Add32(x52, uint32(0x0), uint32(uint1(x81)))
	var x84 uint32
	var x85 uint32
	x84, x85 = bits.Add32(x54, uint32(0x0), uint32(uint1(x83)))
	var x86 uint32
	var x87 uint32
	x86, x87 = bits.Add32(x56, x72, uint32(uint1(x85)))
	var x88 uint32
	var x89 uint32
	x88, x89 = bits.Add32(x58, x74, uint32(uint1(x87)))
	var x90 uint32
	var x91 uint32
	x90, x91 = bits.Add32(x60, x76, uint32(uint1(x89)))
	var x92 uint32
	var x93 uint32
	x92, x93 = bits.Add32(x62, x78, uint32(uint1(x91)))
	var x94 uint32
	var x95 uint32
	x94, x95 = bits.Add32((uint32(uint1(x63)) + uint32(uint1(x47))), (uint32(uint1(x79)) + x67), uint32(uint1(x93)))
	var x96 uint32
	var x97 uint32
	x96, x97 = bits.Add32(x82, arg1[3], uint32(0x0))
	var x98 uint32
	var x99 uint32
	x98, x99 = bits.Add32(x84, uint32(0x0), uint32(uint1(x97)))
	var x100 uint32
	var x101 uint32
	x100, x101 = bits.Add32(x86, uint32(0x0), uint32(uint1(x99)))
	var x102 uint32
	var x103 uint32
	x102, x103 = bits.Add32(x88, uint32(0x0), uint32(uint1(x101)))
	var x104 uint32
	var x105 uint32
	x104, x105 = bits.Add32(x90, uint32(0x0), uint32(uint1(x103)))
	var x106 uint32
	var x107 uint32
	x106, x107 = bits.Add32(x92, uint32(0x0), uint32(uint1(x105)))
	var x108 uint32
	var x109 uint32
	x108, x109 = bits.Add32(x94, uint32(0x0), uint32(uint1(x107)))
	var x110 uint32
	_, x110 = bits.Mul32(x96, 0xffffffff)
	var x112 uint32
	var x113 uint32
	x113, x112 = bits.Mul32(x110, 0xffffffff)
	var x114 uint32
	var x115 uint32
	x115, x114 = bits.Mul32(x110, 0xffffffff)
	var x116 uint32
	var x117 uint32
	x117, x116 = bits.Mul32(x110, 0xffffffff)
	var x118 uint32
	var x119 uint32
	x119, x118 = bits.Mul32(x110, 0xffffffff)
	var x120 uint32
	var x121 uint32
	x120, x121 = bits.Add32(x119, x116, uint32(0x0))
	var x122 uint32
	var x123 uint32
	x122, x123 = bits.Add32(x117, x114, uint32(uint1(x121)))
	var x124 uint32
	var x125 uint32
	x124, x125 = bits.Add32(x115, x112, uint32(uint1(x123)))
	var x127 uint32
	_, x127 = bits.Add32(x96, x110, uint32(0x0))
	var x128 uint32
	var x129 uint32
	x128, x129 = bits.Add32(x98, uint32(0x0), uint32(uint1(x127)))
	var x130 uint32
	var x131 uint32
	x130, x131 = bits.Add32(x100, uint32(0x0), uint32(uint1(x129)))
	var x132 uint32
	var x133 uint32
	x132, x133 = bits.Add32(x102, x118, uint32(uint1(x131)))
	var x134 uint32
	var x135 uint32
	x134, x135 = bits.Add32(x104, x120, uint32(uint1(x133)))
	var x136 uint32
	var x137 uint32
	x136, x137 = bits.Add32(x106, x122, uint32(uint1(x135)))
	var x138 uint32
	var x139 uint32
	x138, x139 = bits.Add32(x108, x124, uint32(uint1(x137)))
	var x140 uint32
	var x141 uint32
	x140, x141 = bits.Add32((uint32(uint1(x109)) + uint32(uint1(x95))), (uint32(uint1(x125)) + x113), uint32(uint1(x139)))
	var x142 uint32
	var x143 uint32
	x142, x143 = bits.Add32(x128, arg1[4], uint32(0x0))
	var x144 uint32
	var x145 uint32
	x144, x145 = bits.Add32(x130, uint32(0x0), uint32(uint1(x143)))
	var x146 uint32
	var x147 uint32
	x146, x147 = bits.Add32(x132, uint32(0x0), uint32(uint1(x145)))
	var x148 uint32
	var x149 uint32
	x148, x149 = bits.Add32(x134, uint32(0x0), uint32(uint1(x147)))
	var x150 uint32
	var x151 uint32
	x150, x151 = bits.Add32(x136, uint32(0x0), uint32(uint1(x149)))
	var x152 uint32
	var x153 uint32
	x152, x153 = bits.Add32(x138, uint32(0x0), uint32(uint1(x151)))
	var x154 uint32
	var x155 uint32
	x154, x155 = bits.Add32(x140, uint32(0x0), uint32(uint1(x153)))
	var x156 uint32
	_, x156 = bits.Mul32(x142, 0xffffffff)
	var x158 uint32
	var x159 uint32
	x159, x158 = bits.Mul32(x156, 0xffffffff)
	var x160 uint32
	var x161 uint32
	x161, x160 = bits.Mul32(x156, 0xffffffff)
	var x162 uint32
	var x163 uint32
	x163, x162 = bits.Mul32(x156, 0xffffffff)
	var x164 uint32
	var x165 uint32
	x165, x164 = bits.Mul32(x156, 0xffffffff)
	var x166 uint32
	var x167 uint32
	x166, x167 = bits.Add32(x165, x162, uint32(0x0))
	var x168 uint32
	var x169 uint32
	x168, x169 = bits.Add32(x163, x160, uint32(uint1(x167)))
	var x170 uint32
	var x171 uint32
	x170, x171 = bits.Add32(x161, x158, uint32(uint1(x169)))
	var x173 uint32
	_, x173 = bits.Add32(x142, x156, uint32(0x0))
	var x174 uint32
	var x175 uint32
	x174, x175 = bits.Add32(x144, uint32(0x0), uint32(uint1(x173)))
	var x176 uint32
	var x177 uint32
	x176, x177 = bits.Add32(x146, uint32(0x0), uint32(uint1(x175)))
	var x178 uint32
	var x179 uint32
	x178, x179 = bits.Add32(x148, x164, uint32(uint1(x177)))
	var x180 uint32
	var x181 uint32
	x180, x181 = bits.Add32(x150, x166, uint32(uint1(x179)))
	var x182 uint32
	var x183 uint32
	x182, x183 = bits.Add32(x152, x168, uint32(uint1(x181)))
	var x184 uint32
	var x185 uint32
	x184, x185 = bits.Add32(x154, x170, uint32(uint1(x183)))
	var x186 uint32
	var x187 uint32
	x186, x187 = bits.Add32((uint32(uint1(x155)) + uint32(uint1(x141))), (uint32(uint1(x171)) + x159), uint32(uint1(x185)))
	var x188 uint32
	var x189 uint32
	x188, x189 = bits.Add32(x174, arg1[5], uint32(0x0))
	var x190 uint32
	var x191 uint32
	x190, x191 = bits.Add32(x176, uint32(0x0), uint32(uint1(x189)))
	var x192 uint32
	var x193 uint32
	x192, x193 = bits.Add32(x178, uint32(0x0), uint32(uint1(x191)))
	var x194 uint32
	var x195 uint32
	x194, x195 = bits.Add32(x180, uint32(0x0), uint32(uint1(x193)))
	var x196 uint32
	var x197 uint32
	x196, x197 = bits.Add32(x182, uint32(0x0), uint32(uint1(x195)))
	var x198 uint32
	var x199 uint32
	x198, x199 = bits.Add32(x184, uint32(0x0), uint32(uint1(x197)))
	var x200 uint32
	var x201 uint32
	x200, x201 = bits.Add32(x186, uint32(0x0), uint32(uint1(x199)))
	var x202 uint32
	_, x202 = bits.Mul32(x188, 0xffffffff)
	var x204 uint32
	var x205 uint32
	x205, x204 = bits.Mul32(x202, 0xffffffff)
	var x206 uint32
	var x207 uint32
	x207, x206 = bits.Mul32(x202, 0xffffffff)
	var x208 uint32
	var x209 uint32
	x209, x208 = bits.Mul32(x202, 0xffffffff)
	var x210 uint32
	var x211 uint32
	x211, x210 = bits.Mul32(x202, 0xffffffff)
	var x212 uint32
	var x213 uint32
	x212, x213 = bits.Add32(x211, x208, uint32(0x0))
	var x214 uint32
	var x215 uint32
	x214, x215 = bits.Add32(x209, x206, uint32(uint1(x213)))
	var x216 uint32
	var x217 uint32
	x216, x217 = bits.Add32(x207, x204, uint32(uint1(x215)))
	var x219 uint32
	_, x219 = bits.Add32(x188, x202, uint32(0x0))
	var x220 uint32
	var x221 uint32
	x220, x221 = bits.Add32(x190, uint32(0x0), uint32(uint1(x219)))
	var x222 uint32
	var x223 uint32
	x222, x223 = bits.Add32(x192, uint32(0x0), uint32(uint1(x221)))
	var x224 uint32
	var x225 uint32
	x224, x225 = bits.Add32(x194, x210, uint32(uint1(x223)))
	var x226 uint32
	var x227 uint32
	x226, x227 = bits.Add32(x196, x212, uint32(uint1(x225)))
	var x228 uint32
	var x229 uint32
	x228, x229 = bits.Add32(x198, x214, uint32(uint1(x227)))
	var x230 uint32
	var x231 uint32
	x230, x231 = bits.Add32(x200, x216, uint32(uint1(x229)))
	var x232 uint32
	var x233 uint32
	x232, x233 = bits.Add32((uint32(uint1(x201)) + uint32(uint1(x187))), (uint32(uint1(x217)) + x205), uint32(uint1(x231)))
	var x234 uint32
	var x235 uint32
	x234, x235 = bits.Add32(x220, arg1[6], uint32(0x0))
	var x236 uint32
	var x237 uint32
	x236, x237 = bits.Add32(x222, uint32(0x0), uint32(uint1(x235)))
	var x238 uint32
	var x239 uint32
	x238, x239 = bits.Add32(x224, uint32(0x0), uint32(uint1(x237)))
	var x240 uint32
	var x241 uint32
	x240, x241 = bits.Add32(x226, uint32(0x0), uint32(uint1(x239)))
	var x242 uint32
	var x243 uint32
	x242, x243 = bits.Add32(x228, uint32(0x0), uint32(uint1(x241)))
	var x244 uint32
	var x245 uint32
	x244, x245 = bits.Add32(x230, uint32(0x0), uint32(uint1(x243)))
	var x246 uint32
	var x247 uint32
	x246, x247 = bits.Add32(x232, uint32(0x0), uint32(uint1(x245)))
	var x248 uint32
	_, x248 = bits.Mul32(x234, 0xffffffff)
	var x250 uint32
	var x251 uint32
	x251, x250 = bits.Mul32(x248, 0xffffffff)
	var x252 uint32
	var x253 uint32
	x253, x252 = bits.Mul32(x248, 0xffffffff)
	var x254 uint32
	var x255 uint32
	x255, x254 = bits.Mul32(x248, 0xffffffff)
	var x256 uint32
	var x257 uint32
	x257, x256 = bits.Mul32(x248, 0xffffffff)
	var x258 uint32
	var x259 uint32
	x258, x259 = bits.Add32(x257, x254, uint32(0x0))
	var x260 uint32
	var x261 uint32
	x260, x261 = bits.Add32(x255, x252, uint32(uint1(x259)))
	var x262 uint32
	var x263 uint32
	x262, x263 = bits.Add32(x253, x250, uint32(uint1(x261)))
	var x265 uint32
	_, x265 = bits.Add32(x234, x248, uint32(0x0))
	var x266 uint32
	var x267 uint32
	x266, x267 = bits.Add32(x236, uint32(0x0), uint32(uint1(x265)))
	var x268 uint32
	var x269 uint32
	x268, x269 = bits.Add32(x238, uint32(0x0), uint32(uint1(x267)))
	var x270 uint32
	var x271 uint32
	x270, x271 = bits.Add32(x240, x256, uint32(uint1(x269)))
	var x272 uint32
	var x273 uint32
	x272, x273 = bits.Add32(x242, x258, uint32(uint1(x271)))
	var x274 uint32
	var x275 uint32
	x274, x275 = bits.Add32(x244, x260, uint32(uint1(x273)))
	var x276 uint32
	var x277 uint32
	x276, x277 = bits.Add32(x246, x262, uint32(uint1(x275)))
	var x278 uint32
	var x279 uint32
	x278, x279 = bits.Add32((uint32(uint1(x247)) + uint32(uint1(x233))), (uint32(uint1(x263)) + x251), uint32(uint1(x277)))
	var x280 uint32
	var x281 uint32
	x280, x281 = bits.Sub32(x266, uint32(0x1), uint32(0x0))
	var x282 uint32
	var x283 uint32
	x282, x283 = bits.Sub32(x268, uint32(0x0), uint32(uint1(x281)))
	var x284 uint32
	var x285 uint32
	x284, x285 = bits.Sub32(x270, uint32(0x0), uint32(uint1(x283)))
	var x286 uint32
	var x287 uint32
	x286, x287 = bits.Sub32(x272, 0xffffffff, uint32(uint1(x285)))
	var x288 uint32
	var x289 uint32
	x288, x289 = bits.Sub32(x274, 0xffffffff, uint32(uint1(x287)))
	var x290 uint32
	var x291 uint32
	x290, x291 = bits.Sub32(x276, 0xffffffff, uint32(uint1(x289)))
	var x292 uint32
	var x293 uint32
	x292, x293 = bits.Sub32(x278, 0xffffffff, uint32(uint1(x291)))
	var x295 uint32
	_, x295 = bits.Sub32(uint32(uint1(x279)), uint32(0x0), uint32(uint1(x293)))
	var x296 uint32
	cmovznzU32(&x296, uint1(x295), x280, x266)
	var x297 uint32
	cmovznzU32(&x297, uint1(x295), x282, x268)
	var x298 uint32
	cmovznzU32(&x298, uint1(x295), x284, x270)
	var x299 uint32
	cmovznzU32(&x299, uint1(x295), x286, x272)
	var x300 uint32
	cmovznzU32(&x300, uint1(x295), x288, x274)
	var x301 uint32
	cmovznzU32(&x301, uint1(x295), x290, x276)
	var x302 uint32
	cmovznzU32(&x302, uint1(x295), x292, x278)
	out1[0] = x296
	out1[1] = x297
	out1[2] = x298
	out1[3] = x299
	out1[4] = x300
	out1[5] = x301
	out1[6] = x302
}

// ToMontgomery translates a field element into the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = eval arg1 mod m
//   0 ≤ eval out1 < m
//
func ToMontgomery(out1 *MontgomeryDomainFieldElement, arg1 *NonMontgomeryDomainFieldElement) {
	x1 := arg1[1]
	x2 := arg1[2]
	x3 := arg1[3]
	x4 := arg1[4]
	x5 := arg1[5]
	x6 := arg1[6]
	x7 := arg1[0]
	var x8 uint32
	var x9 uint32
	x9, x8 = bits.Mul32(x7, 0xffffffff)
	var x10 uint32
	var x11 uint32
	x11, x10 = bits.Mul32(x7, 0xffffffff)
	var x12 uint32
	var x13 uint32
	x13, x12 = bits.Mul32(x7, 0xfffffffe)
	var x14 uint32
	var x15 uint32
	x14, x15 = bits.Add32(x13, x10, uint32(0x0))
	var x16 uint32
	var x17 uint32
	x16, x17 = bits.Add32(x11, x8, uint32(uint1(x15)))
	var x18 uint32
	_, x18 = bits.Mul32(x7, 0xffffffff)
	var x20 uint32
	var x21 uint32
	x21, x20 = bits.Mul32(x18, 0xffffffff)
	var x22 uint32
	var x23 uint32
	x23, x22 = bits.Mul32(x18, 0xffffffff)
	var x24 uint32
	var x25 uint32
	x25, x24 = bits.Mul32(x18, 0xffffffff)
	var x26 uint32
	var x27 uint32
	x27, x26 = bits.Mul32(x18, 0xffffffff)
	var x28 uint32
	var x29 uint32
	x28, x29 = bits.Add32(x27, x24, uint32(0x0))
	var x30 uint32
	var x31 uint32
	x30, x31 = bits.Add32(x25, x22, uint32(uint1(x29)))
	var x32 uint32
	var x33 uint32
	x32, x33 = bits.Add32(x23, x20, uint32(uint1(x31)))
	var x34 uint32
	var x35 uint32
	x34, x35 = bits.Add32(x12, x26, uint32(0x0))
	var x36 uint32
	var x37 uint32
	x36, x37 = bits.Add32(x14, x28, uint32(uint1(x35)))
	var x38 uint32
	var x39 uint32
	x38, x39 = bits.Add32(x16, x30, uint32(uint1(x37)))
	var x40 uint32
	var x41 uint32
	x40, x41 = bits.Add32((uint32(uint1(x17)) + x9), x32, uint32(uint1(x39)))
	var x42 uint32
	var x43 uint32
	x42, x43 = bits.Add32(uint32(0x0), (uint32(uint1(x33)) + x21), uint32(uint1(x41)))
	var x44 uint32
	var x45 uint32
	x45, x44 = bits.Mul32(x1, 0xffffffff)
	var x46 uint32
	var x47 uint32
	x47, x46 = bits.Mul32(x1, 0xffffffff)
	var x48 uint32
	var x49 uint32
	x49, x48 = bits.Mul32(x1, 0xfffffffe)
	var x50 uint32
	var x51 uint32
	x50, x51 = bits.Add32(x49, x46, uint32(0x0))
	var x52 uint32
	var x53 uint32
	x52, x53 = bits.Add32(x47, x44, uint32(uint1(x51)))
	var x55 uint32
	_, x55 = bits.Add32(x7, x18, uint32(0x0))
	var x56 uint32
	var x57 uint32
	x56, x57 = bits.Add32(uint32(uint1(x55)), x1, uint32(0x0))
	var x58 uint32
	var x59 uint32
	x58, x59 = bits.Add32(x36, x48, uint32(0x0))
	var x60 uint32
	var x61 uint32
	x60, x61 = bits.Add32(x38, x50, uint32(uint1(x59)))
	var x62 uint32
	var x63 uint32
	x62, x63 = bits.Add32(x40, x52, uint32(uint1(x61)))
	var x64 uint32
	var x65 uint32
	x64, x65 = bits.Add32(x42, (uint32(uint1(x53)) + x45), uint32(uint1(x63)))
	var x66 uint32
	_, x66 = bits.Mul32(x56, 0xffffffff)
	var x68 uint32
	var x69 uint32
	x69, x68 = bits.Mul32(x66, 0xffffffff)
	var x70 uint32
	var x71 uint32
	x71, x70 = bits.Mul32(x66, 0xffffffff)
	var x72 uint32
	var x73 uint32
	x73, x72 = bits.Mul32(x66, 0xffffffff)
	var x74 uint32
	var x75 uint32
	x75, x74 = bits.Mul32(x66, 0xffffffff)
	var x76 uint32
	var x77 uint32
	x76, x77 = bits.Add32(x75, x72, uint32(0x0))
	var x78 uint32
	var x79 uint32
	x78, x79 = bits.Add32(x73, x70, uint32(uint1(x77)))
	var x80 uint32
	var x81 uint32
	x80, x81 = bits.Add32(x71, x68, uint32(uint1(x79)))
	var x82 uint32
	var x83 uint32
	x82, x83 = bits.Add32(x58, x74, uint32(0x0))
	var x84 uint32
	var x85 uint32
	x84, x85 = bits.Add32(x60, x76, uint32(uint1(x83)))
	var x86 uint32
	var x87 uint32
	x86, x87 = bits.Add32(x62, x78, uint32(uint1(x85)))
	var x88 uint32
	var x89 uint32
	x88, x89 = bits.Add32(x64, x80, uint32(uint1(x87)))
	var x90 uint32
	var x91 uint32
	x90, x91 = bits.Add32((uint32(uint1(x65)) + uint32(uint1(x43))), (uint32(uint1(x81)) + x69), uint32(uint1(x89)))
	var x92 uint32
	var x93 uint32
	x93, x92 = bits.Mul32(x2, 0xffffffff)
	var x94 uint32
	var x95 uint32
	x95, x94 = bits.Mul32(x2, 0xffffffff)
	var x96 uint32
	var x97 uint32
	x97, x96 = bits.Mul32(x2, 0xfffffffe)
	var x98 uint32
	var x99 uint32
	x98, x99 = bits.Add32(x97, x94, uint32(0x0))
	var x100 uint32
	var x101 uint32
	x100, x101 = bits.Add32(x95, x92, uint32(uint1(x99)))
	var x103 uint32
	_, x103 = bits.Add32(x56, x66, uint32(0x0))
	var x104 uint32
	var x105 uint32
	x104, x105 = bits.Add32((uint32(uint1(x103)) + uint32(uint1(x57))), x2, uint32(0x0))
	var x106 uint32
	var x107 uint32
	x106, x107 = bits.Add32(x34, uint32(0x0), uint32(uint1(x105)))
	var x108 uint32
	var x109 uint32
	x108, x109 = bits.Add32(x82, uint32(0x0), uint32(uint1(x107)))
	var x110 uint32
	var x111 uint32
	x110, x111 = bits.Add32(x84, x96, uint32(uint1(x109)))
	var x112 uint32
	var x113 uint32
	x112, x113 = bits.Add32(x86, x98, uint32(uint1(x111)))
	var x114 uint32
	var x115 uint32
	x114, x115 = bits.Add32(x88, x100, uint32(uint1(x113)))
	var x116 uint32
	var x117 uint32
	x116, x117 = bits.Add32(x90, (uint32(uint1(x101)) + x93), uint32(uint1(x115)))
	var x118 uint32
	_, x118 = bits.Mul32(x104, 0xffffffff)
	var x120 uint32
	var x121 uint32
	x121, x120 = bits.Mul32(x118, 0xffffffff)
	var x122 uint32
	var x123 uint32
	x123, x122 = bits.Mul32(x118, 0xffffffff)
	var x124 uint32
	var x125 uint32
	x125, x124 = bits.Mul32(x118, 0xffffffff)
	var x126 uint32
	var x127 uint32
	x127, x126 = bits.Mul32(x118, 0xffffffff)
	var x128 uint32
	var x129 uint32
	x128, x129 = bits.Add32(x127, x124, uint32(0x0))
	var x130 uint32
	var x131 uint32
	x130, x131 = bits.Add32(x125, x122, uint32(uint1(x129)))
	var x132 uint32
	var x133 uint32
	x132, x133 = bits.Add32(x123, x120, uint32(uint1(x131)))
	var x135 uint32
	_, x135 = bits.Add32(x104, x118, uint32(0x0))
	var x136 uint32
	var x137 uint32
	x136, x137 = bits.Add32(x106, uint32(0x0), uint32(uint1(x135)))
	var x138 uint32
	var x139 uint32
	x138, x139 = bits.Add32(x108, uint32(0x0), uint32(uint1(x137)))
	var x140 uint32
	var x141 uint32
	x140, x141 = bits.Add32(x110, x126, uint32(uint1(x139)))
	var x142 uint32
	var x143 uint32
	x142, x143 = bits.Add32(x112, x128, uint32(uint1(x141)))
	var x144 uint32
	var x145 uint32
	x144, x145 = bits.Add32(x114, x130, uint32(uint1(x143)))
	var x146 uint32
	var x147 uint32
	x146, x147 = bits.Add32(x116, x132, uint32(uint1(x145)))
	var x148 uint32
	var x149 uint32
	x148, x149 = bits.Add32((uint32(uint1(x117)) + uint32(uint1(x91))), (uint32(uint1(x133)) + x121), uint32(uint1(x147)))
	var x150 uint32
	var x151 uint32
	x151, x150 = bits.Mul32(x3, 0xffffffff)
	var x152 uint32
	var x153 uint32
	x153, x152 = bits.Mul32(x3, 0xffffffff)
	var x154 uint32
	var x155 uint32
	x155, x154 = bits.Mul32(x3, 0xfffffffe)
	var x156 uint32
	var x157 uint32
	x156, x157 = bits.Add32(x155, x152, uint32(0x0))
	var x158 uint32
	var x159 uint32
	x158, x159 = bits.Add32(x153, x150, uint32(uint1(x157)))
	var x160 uint32
	var x161 uint32
	x160, x161 = bits.Add32(x136, x3, uint32(0x0))
	var x162 uint32
	var x163 uint32
	x162, x163 = bits.Add32(x138, uint32(0x0), uint32(uint1(x161)))
	var x164 uint32
	var x165 uint32
	x164, x165 = bits.Add32(x140, uint32(0x0), uint32(uint1(x163)))
	var x166 uint32
	var x167 uint32
	x166, x167 = bits.Add32(x142, x154, uint32(uint1(x165)))
	var x168 uint32
	var x169 uint32
	x168, x169 = bits.Add32(x144, x156, uint32(uint1(x167)))
	var x170 uint32
	var x171 uint32
	x170, x171 = bits.Add32(x146, x158, uint32(uint1(x169)))
	var x172 uint32
	var x173 uint32
	x172, x173 = bits.Add32(x148, (uint32(uint1(x159)) + x151), uint32(uint1(x171)))
	var x174 uint32
	_, x174 = bits.Mul32(x160, 0xffffffff)
	var x176 uint32
	var x177 uint32
	x177, x176 = bits.Mul32(x174, 0xffffffff)
	var x178 uint32
	var x179 uint32
	x179, x178 = bits.Mul32(x174, 0xffffffff)
	var x180 uint32
	var x181 uint32
	x181, x180 = bits.Mul32(x174, 0xffffffff)
	var x182 uint32
	var x183 uint32
	x183, x182 = bits.Mul32(x174, 0xffffffff)
	var x184 uint32
	var x185 uint32
	x184, x185 = bits.Add32(x183, x180, uint32(0x0))
	var x186 uint32
	var x187 uint32
	x186, x187 = bits.Add32(x181, x178, uint32(uint1(x185)))
	var x188 uint32
	var x189 uint32
	x188, x189 = bits.Add32(x179, x176, uint32(uint1(x187)))
	var x191 uint32
	_, x191 = bits.Add32(x160, x174, uint32(0x0))
	var x192 uint32
	var x193 uint32
	x192, x193 = bits.Add32(x162, uint32(0x0), uint32(uint1(x191)))
	var x194 uint32
	var x195 uint32
	x194, x195 = bits.Add32(x164, uint32(0x0), uint32(uint1(x193)))
	var x196 uint32
	var x197 uint32
	x196, x197 = bits.Add32(x166, x182, uint32(uint1(x195)))
	var x198 uint32
	var x199 uint32
	x198, x199 = bits.Add32(x168, x184, uint32(uint1(x197)))
	var x200 uint32
	var x201 uint32
	x200, x201 = bits.Add32(x170, x186, uint32(uint1(x199)))
	var x202 uint32
	var x203 uint32
	x202, x203 = bits.Add32(x172, x188, uint32(uint1(x201)))
	var x204 uint32
	var x205 uint32
	x204, x205 = bits.Add32((uint32(uint1(x173)) + uint32(uint1(x149))), (uint32(uint1(x189)) + x177), uint32(uint1(x203)))
	var x206 uint32
	var x207 uint32
	x207, x206 = bits.Mul32(x4, 0xffffffff)
	var x208 uint32
	var x209 uint32
	x209, x208 = bits.Mul32(x4, 0xffffffff)
	var x210 uint32
	var x211 uint32
	x211, x210 = bits.Mul32(x4, 0xfffffffe)
	var x212 uint32
	var x213 uint32
	x212, x213 = bits.Add32(x211, x208, uint32(0x0))
	var x214 uint32
	var x215 uint32
	x214, x215 = bits.Add32(x209, x206, uint32(uint1(x213)))
	var x216 uint32
	var x217 uint32
	x216, x217 = bits.Add32(x192, x4, uint32(0x0))
	var x218 uint32
	var x219 uint32
	x218, x219 = bits.Add32(x194, uint32(0x0), uint32(uint1(x217)))
	var x220 uint32
	var x221 uint32
	x220, x221 = bits.Add32(x196, uint32(0x0), uint32(uint1(x219)))
	var x222 uint32
	var x223 uint32
	x222, x223 = bits.Add32(x198, x210, uint32(uint1(x221)))
	var x224 uint32
	var x225 uint32
	x224, x225 = bits.Add32(x200, x212, uint32(uint1(x223)))
	var x226 uint32
	var x227 uint32
	x226, x227 = bits.Add32(x202, x214, uint32(uint1(x225)))
	var x228 uint32
	var x229 uint32
	x228, x229 = bits.Add32(x204, (uint32(uint1(x215)) + x207), uint32(uint1(x227)))
	var x230 uint32
	_, x230 = bits.Mul32(x216, 0xffffffff)
	var x232 uint32
	var x233 uint32
	x233, x232 = bits.Mul32(x230, 0xffffffff)
	var x234 uint32
	var x235 uint32
	x235, x234 = bits.Mul32(x230, 0xffffffff)
	var x236 uint32
	var x237 uint32
	x237, x236 = bits.Mul32(x230, 0xffffffff)
	var x238 uint32
	var x239 uint32
	x239, x238 = bits.Mul32(x230, 0xffffffff)
	var x240 uint32
	var x241 uint32
	x240, x241 = bits.Add32(x239, x236, uint32(0x0))
	var x242 uint32
	var x243 uint32
	x242, x243 = bits.Add32(x237, x234, uint32(uint1(x241)))
	var x244 uint32
	var x245 uint32
	x244, x245 = bits.Add32(x235, x232, uint32(uint1(x243)))
	var x247 uint32
	_, x247 = bits.Add32(x216, x230, uint32(0x0))
	var x248 uint32
	var x249 uint32
	x248, x249 = bits.Add32(x218, uint32(0x0), uint32(uint1(x247)))
	var x250 uint32
	var x251 uint32
	x250, x251 = bits.Add32(x220, uint32(0x0), uint32(uint1(x249)))
	var x252 uint32
	var x253 uint32
	x252, x253 = bits.Add32(x222, x238, uint32(uint1(x251)))
	var x254 uint32
	var x255 uint32
	x254, x255 = bits.Add32(x224, x240, uint32(uint1(x253)))
	var x256 uint32
	var x257 uint32
	x256, x257 = bits.Add32(x226, x242, uint32(uint1(x255)))
	var x258 uint32
	var x259 uint32
	x258, x259 = bits.Add32(x228, x244, uint32(uint1(x257)))
	var x260 uint32
	var x261 uint32
	x260, x261 = bits.Add32((uint32(uint1(x229)) + uint32(uint1(x205))), (uint32(uint1(x245)) + x233), uint32(uint1(x259)))
	var x262 uint32
	var x263 uint32
	x263, x262 = bits.Mul32(x5, 0xffffffff)
	var x264 uint32
	var x265 uint32
	x265, x264 = bits.Mul32(x5, 0xffffffff)
	var x266 uint32
	var x267 uint32
	x267, x266 = bits.Mul32(x5, 0xfffffffe)
	var x268 uint32
	var x269 uint32
	x268, x269 = bits.Add32(x267, x264, uint32(0x0))
	var x270 uint32
	var x271 uint32
	x270, x271 = bits.Add32(x265, x262, uint32(uint1(x269)))
	var x272 uint32
	var x273 uint32
	x272, x273 = bits.Add32(x248, x5, uint32(0x0))
	var x274 uint32
	var x275 uint32
	x274, x275 = bits.Add32(x250, uint32(0x0), uint32(uint1(x273)))
	var x276 uint32
	var x277 uint32
	x276, x277 = bits.Add32(x252, uint32(0x0), uint32(uint1(x275)))
	var x278 uint32
	var x279 uint32
	x278, x279 = bits.Add32(x254, x266, uint32(uint1(x277)))
	var x280 uint32
	var x281 uint32
	x280, x281 = bits.Add32(x256, x268, uint32(uint1(x279)))
	var x282 uint32
	var x283 uint32
	x282, x283 = bits.Add32(x258, x270, uint32(uint1(x281)))
	var x284 uint32
	var x285 uint32
	x284, x285 = bits.Add32(x260, (uint32(uint1(x271)) + x263), uint32(uint1(x283)))
	var x286 uint32
	_, x286 = bits.Mul32(x272, 0xffffffff)
	var x288 uint32
	var x289 uint32
	x289, x288 = bits.Mul32(x286, 0xffffffff)
	var x290 uint32
	var x291 uint32
	x291, x290 = bits.Mul32(x286, 0xffffffff)
	var x292 uint32
	var x293 uint32
	x293, x292 = bits.Mul32(x286, 0xffffffff)
	var x294 uint32
	var x295 uint32
	x295, x294 = bits.Mul32(x286, 0xffffffff)
	var x296 uint32
	var x297 uint32
	x296, x297 = bits.Add32(x295, x292, uint32(0x0))
	var x298 uint32
	var x299 uint32
	x298, x299 = bits.Add32(x293, x290, uint32(uint1(x297)))
	var x300 uint32
	var x301 uint32
	x300, x301 = bits.Add32(x291, x288, uint32(uint1(x299)))
	var x303 uint32
	_, x303 = bits.Add32(x272, x286, uint32(0x0))
	var x304 uint32
	var x305 uint32
	x304, x305 = bits.Add32(x274, uint32(0x0), uint32(uint1(x303)))
	var x306 uint32
	var x307 uint32
	x306, x307 = bits.Add32(x276, uint32(0x0), uint32(uint1(x305)))
	var x308 uint32
	var x309 uint32
	x308, x309 = bits.Add32(x278, x294, uint32(uint1(x307)))
	var x310 uint32
	var x311 uint32
	x310, x311 = bits.Add32(x280, x296, uint32(uint1(x309)))
	var x312 uint32
	var x313 uint32
	x312, x313 = bits.Add32(x282, x298, uint32(uint1(x311)))
	var x314 uint32
	var x315 uint32
	x314, x315 = bits.Add32(x284, x300, uint32(uint1(x313)))
	var x316 uint32
	var x317 uint32
	x316, x317 = bits.Add32((uint32(uint1(x285)) + uint32(uint1(x261))), (uint32(uint1(x301)) + x289), uint32(uint1(x315)))
	var x318 uint32
	var x319 uint32
	x319, x318 = bits.Mul32(x6, 0xffffffff)
	var x320 uint32
	var x321 uint32
	x321, x320 = bits.Mul32(x6, 0xffffffff)
	var x322 uint32
	var x323 uint32
	x323, x322 = bits.Mul32(x6, 0xfffffffe)
	var x324 uint32
	var x325 uint32
	x324, x325 = bits.Add32(x323, x320, uint32(0x0))
	var x326 uint32
	var x327 uint32
	x326, x327 = bits.Add32(x321, x318, uint32(uint1(x325)))
	var x328 uint32
	var x329 uint32
	x328, x329 = bits.Add32(x304, x6, uint32(0x0))
	var x330 uint32
	var x331 uint32
	x330, x331 = bits.Add32(x306, uint32(0x0), uint32(uint1(x329)))
	var x332 uint32
	var x333 uint32
	x332, x333 = bits.Add32(x308, uint32(0x0), uint32(uint1(x331)))
	var x334 uint32
	var x335 uint32
	x334, x335 = bits.Add32(x310, x322, uint32(uint1(x333)))
	var x336 uint32
	var x337 uint32
	x336, x337 = bits.Add32(x312, x324, uint32(uint1(x335)))
	var x338 uint32
	var x339 uint32
	x338, x339 = bits.Add32(x314, x326, uint32(uint1(x337)))
	var x340 uint32
	var x341 uint32
	x340, x341 = bits.Add32(x316, (uint32(uint1(x327)) + x319), uint32(uint1(x339)))
	var x342 uint32
	_, x342 = bits.Mul32(x328, 0xffffffff)
	var x344 uint32
	var x345 uint32
	x345, x344 = bits.Mul32(x342, 0xffffffff)
	var x346 uint32
	var x347 uint32
	x347, x346 = bits.Mul32(x342, 0xffffffff)
	var x348 uint32
	var x349 uint32
	x349, x348 = bits.Mul32(x342, 0xffffffff)
	var x350 uint32
	var x351 uint32
	x351, x350 = bits.Mul32(x342, 0xffffffff)
	var x352 uint32
	var x353 uint32
	x352, x353 = bits.Add32(x351, x348, uint32(0x0))
	var x354 uint32
	var x355 uint32
	x354, x355 = bits.Add32(x349, x346, uint32(uint1(x353)))
	var x356 uint32
	var x357 uint32
	x356, x357 = bits.Add32(x347, x344, uint32(uint1(x355)))
	var x359 uint32
	_, x359 = bits.Add32(x328, x342, uint32(0x0))
	var x360 uint32
	var x361 uint32
	x360, x361 = bits.Add32(x330, uint32(0x0), uint32(uint1(x359)))
	var x362 uint32
	var x363 uint32
	x362, x363 = bits.Add32(x332, uint32(0x0), uint32(uint1(x361)))
	var x364 uint32
	var x365 uint32
	x364, x365 = bits.Add32(x334, x350, uint32(uint1(x363)))
	var x366 uint32
	var x367 uint32
	x366, x367 = bits.Add32(x336, x352, uint32(uint1(x365)))
	var x368 uint32
	var x369 uint32
	x368, x369 = bits.Add32(x338, x354, uint32(uint1(x367)))
	var x370 uint32
	var x371 uint32
	x370, x371 = bits.Add32(x340, x356, uint32(uint1(x369)))
	var x372 uint32
	var x373 uint32
	x372, x373 = bits.Add32((uint32(uint1(x341)) + uint32(uint1(x317))), (uint32(uint1(x357)) + x345), uint32(uint1(x371)))
	var x374 uint32
	var x375 uint32
	x374, x375 = bits.Sub32(x360, uint32(0x1), uint32(0x0))
	var x376 uint32
	var x377 uint32
	x376, x377 = bits.Sub32(x362, uint32(0x0), uint32(uint1(x375)))
	var x378 uint32
	var x379 uint32
	x378, x379 = bits.Sub32(x364, uint32(0x0), uint32(uint1(x377)))
	var x380 uint32
	var x381 uint32
	x380, x381 = bits.Sub32(x366, 0xffffffff, uint32(uint1(x379)))
	var x382 uint32
	var x383 uint32
	x382, x383 = bits.Sub32(x368, 0xffffffff, uint32(uint1(x381)))
	var x384 uint32
	var x385 uint32
	x384, x385 = bits.Sub32(x370, 0xffffffff, uint32(uint1(x383)))
	var x386 uint32
	var x387 uint32
	x386, x387 = bits.Sub32(x372, 0xffffffff, uint32(uint1(x385)))
	var x389 uint32
	_, x389 = bits.Sub32(uint32(uint1(x373)), uint32(0x0), uint32(uint1(x387)))
	var x390 uint32
	cmovznzU32(&x390, uint1(x389), x374, x360)
	var x391 uint32
	cmovznzU32(&x391, uint1(x389), x376, x362)
	var x392 uint32
	cmovznzU32(&x392, uint1(x389), x378, x364)
	var x393 uint32
	cmovznzU32(&x393, uint1(x389), x380, x366)
	var x394 uint32
	cmovznzU32(&x394, uint1(x389), x382, x368)
	var x395 uint32
	cmovznzU32(&x395, uint1(x389), x384, x370)
	var x396 uint32
	cmovznzU32(&x396, uint1(x389), x386, x372)
	out1[0] = x390
	out1[1] = x391
	out1[2] = x392
	out1[3] = x393
	out1[4] = x394
	out1[5] = x395
	out1[6] = x396
}

// Nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [0x0 ~> 0xffffffff]
func Nonzero(out1 *uint32, arg1 *[7]uint32) {
	x1 := (arg1[0] | (arg1[1] | (arg1[2] | (arg1[3] | (arg1[4] | (arg1[5] | arg1[6]))))))
	*out1 = x1
}

// Selectznz is a multi-limb conditional select.
//
// Postconditions:
//   out1 = (if arg1 = 0 then arg2 else arg3)
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func Selectznz(out1 *[7]uint32, arg1 uint1, arg2 *[7]uint32, arg3 *[7]uint32) {
	var x1 uint32
	cmovznzU32(&x1, arg1, arg2[0], arg3[0])
	var x2 uint32
	cmovznzU32(&x2, arg1, arg2[1], arg3[1])
	var x3 uint32
	cmovznzU32(&x3, arg1, arg2[2], arg3[2])
	var x4 uint32
	cmovznzU32(&x4, arg1, arg2[3], arg3[3])
	var x5 uint32
	cmovznzU32(&x5, arg1, arg2[4], arg3[4])
	var x6 uint32
	cmovznzU32(&x6, arg1, arg2[5], arg3[5])
	var x7 uint32
	cmovznzU32(&x7, arg1, arg2[6], arg3[6])
	out1[0] = x1
	out1[1] = x2
	out1[2] = x3
	out1[3] = x4
	out1[4] = x5
	out1[5] = x6
	out1[6] = x7
}

// ToBytes serializes a field element NOT in the Montgomery domain to bytes in little-endian order.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..27]
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
func ToBytes(out1 *[28]uint8, arg1 *[7]uint32) {
	x1 := arg1[6]
	x2 := arg1[5]
	x3 := arg1[4]
	x4 := arg1[3]
	x5 := arg1[2]
	x6 := arg1[1]
	x7 := arg1[0]
	x8 := (uint8(x7) & 0xff)
	x9 := (x7 >> 8)
	x10 := (uint8(x9) & 0xff)
	x11 := (x9 >> 8)
	x12 := (uint8(x11) & 0xff)
	x13 := uint8((x11 >> 8))
	x14 := (uint8(x6) & 0xff)
	x15 := (x6 >> 8)
	x16 := (uint8(x15) & 0xff)
	x17 := (x15 >> 8)
	x18 := (uint8(x17) & 0xff)
	x19 := uint8((x17 >> 8))
	x20 := (uint8(x5) & 0xff)
	x21 := (x5 >> 8)
	x22 := (uint8(x21) & 0xff)
	x23 := (x21 >> 8)
	x24 := (uint8(x23) & 0xff)
	x25 := uint8((x23 >> 8))
	x26 := (uint8(x4) & 0xff)
	x27 := (x4 >> 8)
	x28 := (uint8(x27) & 0xff)
	x29 := (x27 >> 8)
	x30 := (uint8(x29) & 0xff)
	x31 := uint8((x29 >> 8))
	x32 := (uint8(x3) & 0xff)
	x33 := (x3 >> 8)
	x34 := (uint8(x33) & 0xff)
	x35 := (x33 >> 8)
	x36 := (uint8(x35) & 0xff)
	x37 := uint8((x35 >> 8))
	x38 := (uint8(x2) & 0xff)
	x39 := (x2 >> 8)
	x40 := (uint8(x39) & 0xff)
	x41 := (x39 >> 8)
	x42 := (uint8(x41) & 0xff)
	x43 := uint8((x41 >> 8))
	x44 := (uint8(x1) & 0xff)
	x45 := (x1 >> 8)
	x46 := (uint8(x45) & 0xff)
	x47 := (x45 >> 8)
	x48 := (uint8(x47) & 0xff)
	x49 := uint8((x47 >> 8))
	out1[0] = x8
	out1[1] = x10
	out1[2] = x12
	out1[3] = x13
	out1[4] = x14
	out1[5] = x16
	out1[6] = x18
	out1[7] = x19
	out1[8] = x20
	out1[9] = x22
	out1[10] = x24
	out1[11] = x25
	out1[12] = x26
	out1[13] = x28
	out1[14] = x30
	out1[15] = x31
	out1[16] = x32
	out1[17] = x34
	out1[18] = x36
	out1[19] = x37
	out1[20] = x38
	out1[21] = x40
	out1[22] = x42
	out1[23] = x43
	out1[24] = x44
	out1[25] = x46
	out1[26] = x48
	out1[27] = x49
}

// FromBytes deserializes a field element NOT in the Montgomery domain from bytes in little-endian order.
//
// Preconditions:
//   0 ≤ bytes_eval arg1 < m
// Postconditions:
//   eval out1 mod m = bytes_eval arg1 mod m
//   0 ≤ eval out1 < m
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func FromBytes(out1 *[7]uint32, arg1 *[28]uint8) {
	x1 := (uint32(arg1[27]) << 24)
	x2 := (uint32(arg1[26]) << 16)
	x3 := (uint32(arg1[25]) << 8)
	x4 := arg1[24]
	x5 := (uint32(arg1[23]) << 24)
	x6 := (uint32(arg1[22]) << 16)
	x7 := (uint32(arg1[21]) << 8)
	x8 := arg1[20]
	x9 := (uint32(arg1[19]) << 24)
	x10 := (uint32(arg1[18]) << 16)
	x11 := (uint32(arg1[17]) << 8)
	x12 := arg1[16]
	x13 := (uint32(arg1[15]) << 24)
	x14 := (uint32(arg1[14]) << 16)
	x15 := (uint32(arg1[13]) << 8)
	x16 := arg1[12]
	x17 := (uint32(arg1[11]) << 24)
	x18 := (uint32(arg1[10]) << 16)
	x19 := (uint32(arg1[9]) << 8)
	x20 := arg1[8]
	x21 := (uint32(arg1[7]) << 24)
	x22 := (uint32(arg1[6]) << 16)
	x23 := (uint32(arg1[5]) << 8)
	x24 := arg1[4]
	x25 := (uint32(arg1[3]) << 24)
	x26 := (uint32(arg1[2]) << 16)
	x27 := (uint32(arg1[1]) << 8)
	x28 := arg1[0]
	x29 := (x27 + uint32(x28))
	x30 := (x26 + x29)
	x31 := (x25 + x30)
	x32 := (x23 + uint32(x24))
	x33 := (x22 + x32)
	x34 := (x21 + x33)
	x35 := (x19 + uint32(x20))
	x36 := (x18 + x35)
	x37 := (x17 + x36)
	x38 := (x15 + uint32(x16))
	x39 := (x14 + x38)
	x40 := (x13 + x39)
	x41 := (x11 + uint32(x12))
	x42 := (x10 + x41)
	x43 := (x9 + x42)
	x44 := (x7 + uint32(x8))
	x45 := (x6 + x44)
	x46 := (x5 + x45)
	x47 := (x3 + uint32(x4))
	x48 := (x2 + x47)
	x49 := (x1 + x48)
	out1[0] = x31
	out1[1] = x34
	out1[2] = x37
	out1[3] = x40
	out1[4] = x43
	out1[5] = x46
	out1[6] = x49
}

// SetOne returns the field element one in the Montgomery domain.
//
// Postconditions:
//   eval (from_montgomery out1) mod m = 1 mod m
//   0 ≤ eval out1 < m
//
func SetOne(out1 *MontgomeryDomainFieldElement) {
	out1[0] = 0xffffffff
	out1[1] = 0xffffffff
	out1[2] = 0xffffffff
	out1[3] = uint32(0x0)
	out1[4] = uint32(0x0)
	out1[5] = uint32(0x0)
	out1[6] = uint32(0x0)
}

// Msat returns the saturated representation of the prime modulus.
//
// Postconditions:
//   twos_complement_eval out1 = m
//   0 ≤ eval out1 < m
//
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func Msat(out1 *[8]uint32) {
	out1[0] = uint32(0x1)
	out1[1] = uint32(0x0)
	out1[2] = uint32(0x0)
	out1[3] = 0xffffffff
	out1[4] = 0xffffffff
	out1[5] = 0xffffffff
	out1[6] = 0xffffffff
	out1[7] = uint32(0x0)
}

// Divstep computes a divstep.
//
// Preconditions:
//   0 ≤ eval arg4 < m
//   0 ≤ eval arg5 < m
// Postconditions:
//   out1 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then 1 - arg1 else 1 + arg1)
//   twos_complement_eval out2 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then twos_complement_eval arg3 else twos_complement_eval arg2)
//   twos_complement_eval out3 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then ⌊(twos_complement_eval arg3 - twos_complement_eval arg2) / 2⌋ else ⌊(twos_complement_eval arg3 + (twos_complement_eval arg3 mod 2) * twos_complement_eval arg2) / 2⌋)
//   eval (from_montgomery out4) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (2 * eval (from_montgomery arg5)) mod m else (2 * eval (from_montgomery arg4)) mod m)
//   eval (from_montgomery out5) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (eval (from_montgomery arg4) - eval (from_montgomery arg4)) mod m else (eval (from_montgomery arg5) + (twos_complement_eval arg3 mod 2) * eval (from_montgomery arg4)) mod m)
//   0 ≤ eval out5 < m
//   0 ≤ eval out5 < m
//   0 ≤ eval out2 < m
//   0 ≤ eval out3 < m
//
// Input Bounds:
//   arg1: [0x0 ~> 0xffffffff]
//   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [0x0 ~> 0xffffffff]
//   out2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   out3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   out4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   out5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func Divstep(out1 *uint32, out2 *[8]uint32, out3 *[8]uint32, out4 *[7]uint32, out5 *[7]uint32, arg1 uint32, arg2 *[8]uint32, arg3 *[8]uint32, arg4 *[7]uint32, arg5 *[7]uint32) {
	var x1 uint32
	x1, _ = bits.Add32((^arg1), uint32(0x1), uint32(0x0))
	x3 := (uint1((x1 >> 31)) & (uint1(arg3[0]) & 0x1))
	var x4 uint32
	x4, _ = bits.Add32((^arg1), uint32(0x1), uint32(0x0))
	var x6 uint32
	cmovznzU32(&x6, x3, arg1, x4)
	var x7 uint32
	cmovznzU32(&x7, x3, arg2[0], arg3[0])
	var x8 uint32
	cmovznzU32(&x8, x3, arg2[1], arg3[1])
	var x9 uint32
	cmovznzU32(&x9, x3, arg2[2], arg3[2])
	var x10 uint32
	cmovznzU32(&x10, x3, arg2[3], arg3[3])
	var x11 uint32
	cmovznzU32(&x11, x3, arg2[4], arg3[4])
	var x12 uint32
	cmovznzU32(&x12, x3, arg2[5], arg3[5])
	var x13 uint32
	cmovznzU32(&x13, x3, arg2[6], arg3[6])
	var x14 uint32
	cmovznzU32(&x14, x3, arg2[7], arg3[7])
	var x15 uint32
	var x16 uint32
	x15, x16 = bits.Add32(uint32(0x1), (^arg2[0]), uint32(0x0))
	var x17 uint32
	var x18 uint32
	x17, x18 = bits.Add32(uint32(0x0), (^arg2[1]), uint32(uint1(x16)))
	var x19 uint32
	var x20 uint32
	x19, x20 = bits.Add32(uint32(0x0), (^arg2[2]), uint32(uint1(x18)))
	var x21 uint32
	var x22 uint32
	x21, x22 = bits.Add32(uint32(0x0), (^arg2[3]), uint32(uint1(x20)))
	var x23 uint32
	var x24 uint32
	x23, x24 = bits.Add32(uint32(0x0), (^arg2[4]), uint32(uint1(x22)))
	var x25 uint32
	var x26 uint32
	x25, x26 = bits.Add32(uint32(0x0), (^arg2[5]), uint32(uint1(x24)))
	var x27 uint32
	var x28 uint32
	x27, x28 = bits.Add32(uint32(0x0), (^arg2[6]), uint32(uint1(x26)))
	var x29 uint32
	x29, _ = bits.Add32(uint32(0x0), (^arg2[7]), uint32(uint1(x28)))
	var x31 uint32
	cmovznzU32(&x31, x3, arg3[0], x15)
	var x32 uint32
	cmovznzU32(&x32, x3, arg3[1], x17)
	var x33 uint32
	cmovznzU32(&x33, x3, arg3[2], x19)
	var x34 uint32
	cmovznzU32(&x34, x3, arg3[3], x21)
	var x35 uint32
	cmovznzU32(&x35, x3, arg3[4], x23)
	var x36 uint32
	cmovznzU32(&x36, x3, arg3[5], x25)
	var x37 uint32
	cmovznzU32(&x37, x3, arg3[6], x27)
	var x38 uint32
	cmovznzU32(&x38, x3, arg3[7], x29)
	var x39 uint32
	cmovznzU32(&x39, x3, arg4[0], arg5[0])
	var x40 uint32
	cmovznzU32(&x40, x3, arg4[1], arg5[1])
	var x41 uint32
	cmovznzU32(&x41, x3, arg4[2], arg5[2])
	var x42 uint32
	cmovznzU32(&x42, x3, arg4[3], arg5[3])
	var x43 uint32
	cmovznzU32(&x43, x3, arg4[4], arg5[4])
	var x44 uint32
	cmovznzU32(&x44, x3, arg4[5], arg5[5])
	var x45 uint32
	cmovznzU32(&x45, x3, arg4[6], arg5[6])
	var x46 uint32
	var x47 uint32
	x46, x47 = bits.Add32(x39, x39, uint32(0x0))
	var x48 uint32
	var x49 uint32
	x48, x49 = bits.Add32(x40, x40, uint32(uint1(x47)))
	var x50 uint32
	var x51 uint32
	x50, x51 = bits.Add32(x41, x41, uint32(uint1(x49)))
	var x52 uint32
	var x53 uint32
	x52, x53 = bits.Add32(x42, x42, uint32(uint1(x51)))
	var x54 uint32
	var x55 uint32
	x54, x55 = bits.Add32(x43, x43, uint32(uint1(x53)))
	var x56 uint32
	var x57 uint32
	x56, x57 = bits.Add32(x44, x44, uint32(uint1(x55)))
	var x58 uint32
	var x59 uint32
	x58, x59 = bits.Add32(x45, x45, uint32(uint1(x57)))
	var x60 uint32
	var x61 uint32
	x60, x61 = bits.Sub32(x46, uint32(0x1), uint32(0x0))
	var x62 uint32
	var x63 uint32
	x62, x63 = bits.Sub32(x48, uint32(0x0), uint32(uint1(x61)))
	var x64 uint32
	var x65 uint32
	x64, x65 = bits.Sub32(x50, uint32(0x0), uint32(uint1(x63)))
	var x66 uint32
	var x67 uint32
	x66, x67 = bits.Sub32(x52, 0xffffffff, uint32(uint1(x65)))
	var x68 uint32
	var x69 uint32
	x68, x69 = bits.Sub32(x54, 0xffffffff, uint32(uint1(x67)))
	var x70 uint32
	var x71 uint32
	x70, x71 = bits.Sub32(x56, 0xffffffff, uint32(uint1(x69)))
	var x72 uint32
	var x73 uint32
	x72, x73 = bits.Sub32(x58, 0xffffffff, uint32(uint1(x71)))
	var x75 uint32
	_, x75 = bits.Sub32(uint32(uint1(x59)), uint32(0x0), uint32(uint1(x73)))
	x76 := arg4[6]
	x77 := arg4[5]
	x78 := arg4[4]
	x79 := arg4[3]
	x80 := arg4[2]
	x81 := arg4[1]
	x82 := arg4[0]
	var x83 uint32
	var x84 uint32
	x83, x84 = bits.Sub32(uint32(0x0), x82, uint32(0x0))
	var x85 uint32
	var x86 uint32
	x85, x86 = bits.Sub32(uint32(0x0), x81, uint32(uint1(x84)))
	var x87 uint32
	var x88 uint32
	x87, x88 = bits.Sub32(uint32(0x0), x80, uint32(uint1(x86)))
	var x89 uint32
	var x90 uint32
	x89, x90 = bits.Sub32(uint32(0x0), x79, uint32(uint1(x88)))
	var x91 uint32
	var x92 uint32
	x91, x92 = bits.Sub32(uint32(0x0), x78, uint32(uint1(x90)))
	var x93 uint32
	var x94 uint32
	x93, x94 = bits.Sub32(uint32(0x0), x77, uint32(uint1(x92)))
	var x95 uint32
	var x96 uint32
	x95, x96 = bits.Sub32(uint32(0x0), x76, uint32(uint1(x94)))
	var x97 uint32
	cmovznzU32(&x97, uint1(x96), uint32(0x0), 0xffffffff)
	var x98 uint32
	var x99 uint32
	x98, x99 = bits.Add32(x83, uint32((uint1(x97) & 0x1)), uint32(0x0))
	var x100 uint32
	var x101 uint32
	x100, x101 = bits.Add32(x85, uint32(0x0), uint32(uint1(x99)))
	var x102 uint32
	var x103 uint32
	x102, x103 = bits.Add32(x87, uint32(0x0), uint32(uint1(x101)))
	var x104 uint32
	var x105 uint32
	x104, x105 = bits.Add32(x89, x97, uint32(uint1(x103)))
	var x106 uint32
	var x107 uint32
	x106, x107 = bits.Add32(x91, x97, uint32(uint1(x105)))
	var x108 uint32
	var x109 uint32
	x108, x109 = bits.Add32(x93, x97, uint32(uint1(x107)))
	var x110 uint32
	x110, _ = bits.Add32(x95, x97, uint32(uint1(x109)))
	var x112 uint32
	cmovznzU32(&x112, x3, arg5[0], x98)
	var x113 uint32
	cmovznzU32(&x113, x3, arg5[1], x100)
	var x114 uint32
	cmovznzU32(&x114, x3, arg5[2], x102)
	var x115 uint32
	cmovznzU32(&x115, x3, arg5[3], x104)
	var x116 uint32
	cmovznzU32(&x116, x3, arg5[4], x106)
	var x117 uint32
	cmovznzU32(&x117, x3, arg5[5], x108)
	var x118 uint32
	cmovznzU32(&x118, x3, arg5[6], x110)
	x119 := (uint1(x31) & 0x1)
	var x120 uint32
	cmovznzU32(&x120, x119, uint32(0x0), x7)
	var x121 uint32
	cmovznzU32(&x121, x119, uint32(0x0), x8)
	var x122 uint32
	cmovznzU32(&x122, x119, uint32(0x0), x9)
	var x123 uint32
	cmovznzU32(&x123, x119, uint32(0x0), x10)
	var x124 uint32
	cmovznzU32(&x124, x119, uint32(0x0), x11)
	var x125 uint32
	cmovznzU32(&x125, x119, uint32(0x0), x12)
	var x126 uint32
	cmovznzU32(&x126, x119, uint32(0x0), x13)
	var x127 uint32
	cmovznzU32(&x127, x119, uint32(0x0), x14)
	var x128 uint32
	var x129 uint32
	x128, x129 = bits.Add32(x31, x120, uint32(0x0))
	var x130 uint32
	var x131 uint32
	x130, x131 = bits.Add32(x32, x121, uint32(uint1(x129)))
	var x132 uint32
	var x133 uint32
	x132, x133 = bits.Add32(x33, x122, uint32(uint1(x131)))
	var x134 uint32
	var x135 uint32
	x134, x135 = bits.Add32(x34, x123, uint32(uint1(x133)))
	var x136 uint32
	var x137 uint32
	x136, x137 = bits.Add32(x35, x124, uint32(uint1(x135)))
	var x138 uint32
	var x139 uint32
	x138, x139 = bits.Add32(x36, x125, uint32(uint1(x137)))
	var x140 uint32
	var x141 uint32
	x140, x141 = bits.Add32(x37, x126, uint32(uint1(x139)))
	var x142 uint32
	x142, _ = bits.Add32(x38, x127, uint32(uint1(x141)))
	var x144 uint32
	cmovznzU32(&x144, x119, uint32(0x0), x39)
	var x145 uint32
	cmovznzU32(&x145, x119, uint32(0x0), x40)
	var x146 uint32
	cmovznzU32(&x146, x119, uint32(0x0), x41)
	var x147 uint32
	cmovznzU32(&x147, x119, uint32(0x0), x42)
	var x148 uint32
	cmovznzU32(&x148, x119, uint32(0x0), x43)
	var x149 uint32
	cmovznzU32(&x149, x119, uint32(0x0), x44)
	var x150 uint32
	cmovznzU32(&x150, x119, uint32(0x0), x45)
	var x151 uint32
	var x152 uint32
	x151, x152 = bits.Add32(x112, x144, uint32(0x0))
	var x153 uint32
	var x154 uint32
	x153, x154 = bits.Add32(x113, x145, uint32(uint1(x152)))
	var x155 uint32
	var x156 uint32
	x155, x156 = bits.Add32(x114, x146, uint32(uint1(x154)))
	var x157 uint32
	var x158 uint32
	x157, x158 = bits.Add32(x115, x147, uint32(uint1(x156)))
	var x159 uint32
	var x160 uint32
	x159, x160 = bits.Add32(x116, x148, uint32(uint1(x158)))
	var x161 uint32
	var x162 uint32
	x161, x162 = bits.Add32(x117, x149, uint32(uint1(x160)))
	var x163 uint32
	var x164 uint32
	x163, x164 = bits.Add32(x118, x150, uint32(uint1(x162)))
	var x165 uint32
	var x166 uint32
	x165, x166 = bits.Sub32(x151, uint32(0x1), uint32(0x0))
	var x167 uint32
	var x168 uint32
	x167, x168 = bits.Sub32(x153, uint32(0x0), uint32(uint1(x166)))
	var x169 uint32
	var x170 uint32
	x169, x170 = bits.Sub32(x155, uint32(0x0), uint32(uint1(x168)))
	var x171 uint32
	var x172 uint32
	x171, x172 = bits.Sub32(x157, 0xffffffff, uint32(uint1(x170)))
	var x173 uint32
	var x174 uint32
	x173, x174 = bits.Sub32(x159, 0xffffffff, uint32(uint1(x172)))
	var x175 uint32
	var x176 uint32
	x175, x176 = bits.Sub32(x161, 0xffffffff, uint32(uint1(x174)))
	var x177 uint32
	var x178 uint32
	x177, x178 = bits.Sub32(x163, 0xffffffff, uint32(uint1(x176)))
	var x180 uint32
	_, x180 = bits.Sub32(uint32(uint1(x164)), uint32(0x0), uint32(uint1(x178)))
	var x181 uint32
	x181, _ = bits.Add32(x6, uint32(0x1), uint32(0x0))
	x183 := ((x128 >> 1) | ((x130 << 31) & 0xffffffff))
	x184 := ((x130 >> 1) | ((x132 << 31) & 0xffffffff))
	x185 := ((x132 >> 1) | ((x134 << 31) & 0xffffffff))
	x186 := ((x134 >> 1) | ((x136 << 31) & 0xffffffff))
	x187 := ((x136 >> 1) | ((x138 << 31) & 0xffffffff))
	x188 := ((x138 >> 1) | ((x140 << 31) & 0xffffffff))
	x189 := ((x140 >> 1) | ((x142 << 31) & 0xffffffff))
	x190 := ((x142 & 0x80000000) | (x142 >> 1))
	var x191 uint32
	cmovznzU32(&x191, uint1(x75), x60, x46)
	var x192 uint32
	cmovznzU32(&x192, uint1(x75), x62, x48)
	var x193 uint32
	cmovznzU32(&x193, uint1(x75), x64, x50)
	var x194 uint32
	cmovznzU32(&x194, uint1(x75), x66, x52)
	var x195 uint32
	cmovznzU32(&x195, uint1(x75), x68, x54)
	var x196 uint32
	cmovznzU32(&x196, uint1(x75), x70, x56)
	var x197 uint32
	cmovznzU32(&x197, uint1(x75), x72, x58)
	var x198 uint32
	cmovznzU32(&x198, uint1(x180), x165, x151)
	var x199 uint32
	cmovznzU32(&x199, uint1(x180), x167, x153)
	var x200 uint32
	cmovznzU32(&x200, uint1(x180), x169, x155)
	var x201 uint32
	cmovznzU32(&x201, uint1(x180), x171, x157)
	var x202 uint32
	cmovznzU32(&x202, uint1(x180), x173, x159)
	var x203 uint32
	cmovznzU32(&x203, uint1(x180), x175, x161)
	var x204 uint32
	cmovznzU32(&x204, uint1(x180), x177, x163)
	*out1 = x181
	out2[0] = x7
	out2[1] = x8
	out2[2] = x9
	out2[3] = x10
	out2[4] = x11
	out2[5] = x12
	out2[6] = x13
	out2[7] = x14
	out3[0] = x183
	out3[1] = x184
	out3[2] = x185
	out3[3] = x186
	out3[4] = x187
	out3[5] = x188
	out3[6] = x189
	out3[7] = x190
	out4[0] = x191
	out4[1] = x192
	out4[2] = x193
	out4[3] = x194
	out4[4] = x195
	out4[5] = x196
	out4[6] = x197
	out5[0] = x198
	out5[1] = x199
	out5[2] = x200
	out5[3] = x201
	out5[4] = x202
	out5[5] = x203
	out5[6] = x204
}

// DivstepPrecomp returns the precomputed value for Bernstein-Yang-inversion (in montgomery form).
//
// Postconditions:
//   eval (from_montgomery out1) = ⌊(m - 1) / 2⌋^(if ⌊log2 m⌋ + 1 < 46 then ⌊(49 * (⌊log2 m⌋ + 1) + 80) / 17⌋ else ⌊(49 * (⌊log2 m⌋ + 1) + 57) / 17⌋)
//   0 ≤ eval out1 < m
//
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func DivstepPrecomp(out1 *[7]uint32) {
	out1[0] = 0x800000
	out1[1] = 0x800000
	out1[2] = 0xfe000000
	out1[3] = 0xffffff
	out1[4] = uint32(0x0)
	out1[5] = 0xff800000
	out1[6] = 0x17fffff
}
