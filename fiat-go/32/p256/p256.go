// Code generated by Fiat Cryptography. DO NOT EDIT.
//
// Autogenerated: 'src/ExtractionOCaml/word_by_word_montgomery' --lang Go --cmovznz-by-mul --internal-static --package-case flatcase --public-function-case UpperCamelCase --private-function-case camelCase --public-type-case UpperCamelCase --private-type-case camelCase --no-prefix-fiat --doc-prepend-header 'Code generated by Fiat Cryptography. DO NOT EDIT.' --doc-text-before-function-name '' --package-name p256 '' 32 '2^256 - 2^224 + 2^192 + 2^96 - 1' mul square add sub opp from_montgomery to_montgomery nonzero selectznz to_bytes from_bytes one msat divstep divstep_precomp
//
// curve description (via package name): p256
//
// machine_wordsize = 32 (from "32")
//
// requested operations: mul, square, add, sub, opp, from_montgomery, to_montgomery, nonzero, selectznz, to_bytes, from_bytes, one, msat, divstep, divstep_precomp
//
// m = 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff (from "2^256 - 2^224 + 2^192 + 2^96 - 1")
//
//
//
// NOTE: In addition to the bounds specified above each function, all
//
//   functions synthesized for this Montgomery arithmetic require the
//
//   input to be strictly less than the prime modulus (m), and also
//
//   require the input to be in the unique saturated representation.
//
//   All functions also ensure that these two properties are true of
//
//   return values.
//
//
//
// Computed values:
//
//   eval z = z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192) + (z[7] << 224)
//
//   bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17] << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168) + (z[22] << 176) + (z[23] << 184) + (z[24] << 192) + (z[25] << 200) + (z[26] << 208) + (z[27] << 216) + (z[28] << 224) + (z[29] << 232) + (z[30] << 240) + (z[31] << 248)
//
//   twos_complement_eval z = let x1 := z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192) + (z[7] << 224) in
//
//                            if x1 & (2^256-1) < 2^255 then x1 & (2^256-1) else (x1 & (2^256-1)) - 2^256
package p256

import "math/bits"

type uint1 uint8
type int1 int8

// addcarryxU32 is a thin wrapper around bits.Add32 that uses uint1 rather than uint32
func addcarryxU32(x uint32, y uint32, carry uint1) (uint32, uint1) {
	sum, carryOut := bits.Add32(x, y, uint32(carry))
	return sum, uint1(carryOut)
}

// subborrowxU32 is a thin wrapper around bits.Sub32 that uses uint1 rather than uint32
func subborrowxU32(x uint32, y uint32, carry uint1) (uint32, uint1) {
	sum, carryOut := bits.Sub32(x, y, uint32(carry))
	return sum, uint1(carryOut)
}

// cmovznzU32 is a single-word conditional move.
//
// Postconditions:
//   out1 = (if arg1 = 0 then arg2 else arg3)
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [0x0 ~> 0xffffffff]
//   arg3: [0x0 ~> 0xffffffff]
// Output Bounds:
//   out1: [0x0 ~> 0xffffffff]
func cmovznzU32(out1 *uint32, arg1 uint1, arg2 uint32, arg3 uint32) {
	x1 := (uint32(arg1) * 0xffffffff)
	x2 := ((x1 & arg3) | ((^x1) & arg2))
	*out1 = x2
}

// Mul multiplies two field elements in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
//   0 ≤ eval arg2 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
//   0 ≤ eval out1 < m
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func Mul(out1 *[8]uint32, arg1 *[8]uint32, arg2 *[8]uint32) {
	x1 := arg1[1]
	x2 := arg1[2]
	x3 := arg1[3]
	x4 := arg1[4]
	x5 := arg1[5]
	x6 := arg1[6]
	x7 := arg1[7]
	x8 := arg1[0]
	var x9 uint32
	var x10 uint32
	x10, x9 = bits.Mul32(x8, arg2[7])
	var x11 uint32
	var x12 uint32
	x12, x11 = bits.Mul32(x8, arg2[6])
	var x13 uint32
	var x14 uint32
	x14, x13 = bits.Mul32(x8, arg2[5])
	var x15 uint32
	var x16 uint32
	x16, x15 = bits.Mul32(x8, arg2[4])
	var x17 uint32
	var x18 uint32
	x18, x17 = bits.Mul32(x8, arg2[3])
	var x19 uint32
	var x20 uint32
	x20, x19 = bits.Mul32(x8, arg2[2])
	var x21 uint32
	var x22 uint32
	x22, x21 = bits.Mul32(x8, arg2[1])
	var x23 uint32
	var x24 uint32
	x24, x23 = bits.Mul32(x8, arg2[0])
	var x25 uint32
	var x26 uint1
	x25, x26 = addcarryxU32(x24, x21, 0x0)
	var x27 uint32
	var x28 uint1
	x27, x28 = addcarryxU32(x22, x19, x26)
	var x29 uint32
	var x30 uint1
	x29, x30 = addcarryxU32(x20, x17, x28)
	var x31 uint32
	var x32 uint1
	x31, x32 = addcarryxU32(x18, x15, x30)
	var x33 uint32
	var x34 uint1
	x33, x34 = addcarryxU32(x16, x13, x32)
	var x35 uint32
	var x36 uint1
	x35, x36 = addcarryxU32(x14, x11, x34)
	var x37 uint32
	var x38 uint1
	x37, x38 = addcarryxU32(x12, x9, x36)
	x39 := (uint32(x38) + x10)
	var x40 uint32
	var x41 uint32
	x41, x40 = bits.Mul32(x23, 0xffffffff)
	var x42 uint32
	var x43 uint32
	x43, x42 = bits.Mul32(x23, 0xffffffff)
	var x44 uint32
	var x45 uint32
	x45, x44 = bits.Mul32(x23, 0xffffffff)
	var x46 uint32
	var x47 uint32
	x47, x46 = bits.Mul32(x23, 0xffffffff)
	var x48 uint32
	var x49 uint1
	x48, x49 = addcarryxU32(x47, x44, 0x0)
	var x50 uint32
	var x51 uint1
	x50, x51 = addcarryxU32(x45, x42, x49)
	x52 := (uint32(x51) + x43)
	var x54 uint1
	_, x54 = addcarryxU32(x23, x46, 0x0)
	var x55 uint32
	var x56 uint1
	x55, x56 = addcarryxU32(x25, x48, x54)
	var x57 uint32
	var x58 uint1
	x57, x58 = addcarryxU32(x27, x50, x56)
	var x59 uint32
	var x60 uint1
	x59, x60 = addcarryxU32(x29, x52, x58)
	var x61 uint32
	var x62 uint1
	x61, x62 = addcarryxU32(x31, uint32(0x0), x60)
	var x63 uint32
	var x64 uint1
	x63, x64 = addcarryxU32(x33, uint32(0x0), x62)
	var x65 uint32
	var x66 uint1
	x65, x66 = addcarryxU32(x35, x23, x64)
	var x67 uint32
	var x68 uint1
	x67, x68 = addcarryxU32(x37, x40, x66)
	var x69 uint32
	var x70 uint1
	x69, x70 = addcarryxU32(x39, x41, x68)
	var x71 uint32
	var x72 uint32
	x72, x71 = bits.Mul32(x1, arg2[7])
	var x73 uint32
	var x74 uint32
	x74, x73 = bits.Mul32(x1, arg2[6])
	var x75 uint32
	var x76 uint32
	x76, x75 = bits.Mul32(x1, arg2[5])
	var x77 uint32
	var x78 uint32
	x78, x77 = bits.Mul32(x1, arg2[4])
	var x79 uint32
	var x80 uint32
	x80, x79 = bits.Mul32(x1, arg2[3])
	var x81 uint32
	var x82 uint32
	x82, x81 = bits.Mul32(x1, arg2[2])
	var x83 uint32
	var x84 uint32
	x84, x83 = bits.Mul32(x1, arg2[1])
	var x85 uint32
	var x86 uint32
	x86, x85 = bits.Mul32(x1, arg2[0])
	var x87 uint32
	var x88 uint1
	x87, x88 = addcarryxU32(x86, x83, 0x0)
	var x89 uint32
	var x90 uint1
	x89, x90 = addcarryxU32(x84, x81, x88)
	var x91 uint32
	var x92 uint1
	x91, x92 = addcarryxU32(x82, x79, x90)
	var x93 uint32
	var x94 uint1
	x93, x94 = addcarryxU32(x80, x77, x92)
	var x95 uint32
	var x96 uint1
	x95, x96 = addcarryxU32(x78, x75, x94)
	var x97 uint32
	var x98 uint1
	x97, x98 = addcarryxU32(x76, x73, x96)
	var x99 uint32
	var x100 uint1
	x99, x100 = addcarryxU32(x74, x71, x98)
	x101 := (uint32(x100) + x72)
	var x102 uint32
	var x103 uint1
	x102, x103 = addcarryxU32(x55, x85, 0x0)
	var x104 uint32
	var x105 uint1
	x104, x105 = addcarryxU32(x57, x87, x103)
	var x106 uint32
	var x107 uint1
	x106, x107 = addcarryxU32(x59, x89, x105)
	var x108 uint32
	var x109 uint1
	x108, x109 = addcarryxU32(x61, x91, x107)
	var x110 uint32
	var x111 uint1
	x110, x111 = addcarryxU32(x63, x93, x109)
	var x112 uint32
	var x113 uint1
	x112, x113 = addcarryxU32(x65, x95, x111)
	var x114 uint32
	var x115 uint1
	x114, x115 = addcarryxU32(x67, x97, x113)
	var x116 uint32
	var x117 uint1
	x116, x117 = addcarryxU32(x69, x99, x115)
	var x118 uint32
	var x119 uint1
	x118, x119 = addcarryxU32(uint32(x70), x101, x117)
	var x120 uint32
	var x121 uint32
	x121, x120 = bits.Mul32(x102, 0xffffffff)
	var x122 uint32
	var x123 uint32
	x123, x122 = bits.Mul32(x102, 0xffffffff)
	var x124 uint32
	var x125 uint32
	x125, x124 = bits.Mul32(x102, 0xffffffff)
	var x126 uint32
	var x127 uint32
	x127, x126 = bits.Mul32(x102, 0xffffffff)
	var x128 uint32
	var x129 uint1
	x128, x129 = addcarryxU32(x127, x124, 0x0)
	var x130 uint32
	var x131 uint1
	x130, x131 = addcarryxU32(x125, x122, x129)
	x132 := (uint32(x131) + x123)
	var x134 uint1
	_, x134 = addcarryxU32(x102, x126, 0x0)
	var x135 uint32
	var x136 uint1
	x135, x136 = addcarryxU32(x104, x128, x134)
	var x137 uint32
	var x138 uint1
	x137, x138 = addcarryxU32(x106, x130, x136)
	var x139 uint32
	var x140 uint1
	x139, x140 = addcarryxU32(x108, x132, x138)
	var x141 uint32
	var x142 uint1
	x141, x142 = addcarryxU32(x110, uint32(0x0), x140)
	var x143 uint32
	var x144 uint1
	x143, x144 = addcarryxU32(x112, uint32(0x0), x142)
	var x145 uint32
	var x146 uint1
	x145, x146 = addcarryxU32(x114, x102, x144)
	var x147 uint32
	var x148 uint1
	x147, x148 = addcarryxU32(x116, x120, x146)
	var x149 uint32
	var x150 uint1
	x149, x150 = addcarryxU32(x118, x121, x148)
	x151 := (uint32(x150) + uint32(x119))
	var x152 uint32
	var x153 uint32
	x153, x152 = bits.Mul32(x2, arg2[7])
	var x154 uint32
	var x155 uint32
	x155, x154 = bits.Mul32(x2, arg2[6])
	var x156 uint32
	var x157 uint32
	x157, x156 = bits.Mul32(x2, arg2[5])
	var x158 uint32
	var x159 uint32
	x159, x158 = bits.Mul32(x2, arg2[4])
	var x160 uint32
	var x161 uint32
	x161, x160 = bits.Mul32(x2, arg2[3])
	var x162 uint32
	var x163 uint32
	x163, x162 = bits.Mul32(x2, arg2[2])
	var x164 uint32
	var x165 uint32
	x165, x164 = bits.Mul32(x2, arg2[1])
	var x166 uint32
	var x167 uint32
	x167, x166 = bits.Mul32(x2, arg2[0])
	var x168 uint32
	var x169 uint1
	x168, x169 = addcarryxU32(x167, x164, 0x0)
	var x170 uint32
	var x171 uint1
	x170, x171 = addcarryxU32(x165, x162, x169)
	var x172 uint32
	var x173 uint1
	x172, x173 = addcarryxU32(x163, x160, x171)
	var x174 uint32
	var x175 uint1
	x174, x175 = addcarryxU32(x161, x158, x173)
	var x176 uint32
	var x177 uint1
	x176, x177 = addcarryxU32(x159, x156, x175)
	var x178 uint32
	var x179 uint1
	x178, x179 = addcarryxU32(x157, x154, x177)
	var x180 uint32
	var x181 uint1
	x180, x181 = addcarryxU32(x155, x152, x179)
	x182 := (uint32(x181) + x153)
	var x183 uint32
	var x184 uint1
	x183, x184 = addcarryxU32(x135, x166, 0x0)
	var x185 uint32
	var x186 uint1
	x185, x186 = addcarryxU32(x137, x168, x184)
	var x187 uint32
	var x188 uint1
	x187, x188 = addcarryxU32(x139, x170, x186)
	var x189 uint32
	var x190 uint1
	x189, x190 = addcarryxU32(x141, x172, x188)
	var x191 uint32
	var x192 uint1
	x191, x192 = addcarryxU32(x143, x174, x190)
	var x193 uint32
	var x194 uint1
	x193, x194 = addcarryxU32(x145, x176, x192)
	var x195 uint32
	var x196 uint1
	x195, x196 = addcarryxU32(x147, x178, x194)
	var x197 uint32
	var x198 uint1
	x197, x198 = addcarryxU32(x149, x180, x196)
	var x199 uint32
	var x200 uint1
	x199, x200 = addcarryxU32(x151, x182, x198)
	var x201 uint32
	var x202 uint32
	x202, x201 = bits.Mul32(x183, 0xffffffff)
	var x203 uint32
	var x204 uint32
	x204, x203 = bits.Mul32(x183, 0xffffffff)
	var x205 uint32
	var x206 uint32
	x206, x205 = bits.Mul32(x183, 0xffffffff)
	var x207 uint32
	var x208 uint32
	x208, x207 = bits.Mul32(x183, 0xffffffff)
	var x209 uint32
	var x210 uint1
	x209, x210 = addcarryxU32(x208, x205, 0x0)
	var x211 uint32
	var x212 uint1
	x211, x212 = addcarryxU32(x206, x203, x210)
	x213 := (uint32(x212) + x204)
	var x215 uint1
	_, x215 = addcarryxU32(x183, x207, 0x0)
	var x216 uint32
	var x217 uint1
	x216, x217 = addcarryxU32(x185, x209, x215)
	var x218 uint32
	var x219 uint1
	x218, x219 = addcarryxU32(x187, x211, x217)
	var x220 uint32
	var x221 uint1
	x220, x221 = addcarryxU32(x189, x213, x219)
	var x222 uint32
	var x223 uint1
	x222, x223 = addcarryxU32(x191, uint32(0x0), x221)
	var x224 uint32
	var x225 uint1
	x224, x225 = addcarryxU32(x193, uint32(0x0), x223)
	var x226 uint32
	var x227 uint1
	x226, x227 = addcarryxU32(x195, x183, x225)
	var x228 uint32
	var x229 uint1
	x228, x229 = addcarryxU32(x197, x201, x227)
	var x230 uint32
	var x231 uint1
	x230, x231 = addcarryxU32(x199, x202, x229)
	x232 := (uint32(x231) + uint32(x200))
	var x233 uint32
	var x234 uint32
	x234, x233 = bits.Mul32(x3, arg2[7])
	var x235 uint32
	var x236 uint32
	x236, x235 = bits.Mul32(x3, arg2[6])
	var x237 uint32
	var x238 uint32
	x238, x237 = bits.Mul32(x3, arg2[5])
	var x239 uint32
	var x240 uint32
	x240, x239 = bits.Mul32(x3, arg2[4])
	var x241 uint32
	var x242 uint32
	x242, x241 = bits.Mul32(x3, arg2[3])
	var x243 uint32
	var x244 uint32
	x244, x243 = bits.Mul32(x3, arg2[2])
	var x245 uint32
	var x246 uint32
	x246, x245 = bits.Mul32(x3, arg2[1])
	var x247 uint32
	var x248 uint32
	x248, x247 = bits.Mul32(x3, arg2[0])
	var x249 uint32
	var x250 uint1
	x249, x250 = addcarryxU32(x248, x245, 0x0)
	var x251 uint32
	var x252 uint1
	x251, x252 = addcarryxU32(x246, x243, x250)
	var x253 uint32
	var x254 uint1
	x253, x254 = addcarryxU32(x244, x241, x252)
	var x255 uint32
	var x256 uint1
	x255, x256 = addcarryxU32(x242, x239, x254)
	var x257 uint32
	var x258 uint1
	x257, x258 = addcarryxU32(x240, x237, x256)
	var x259 uint32
	var x260 uint1
	x259, x260 = addcarryxU32(x238, x235, x258)
	var x261 uint32
	var x262 uint1
	x261, x262 = addcarryxU32(x236, x233, x260)
	x263 := (uint32(x262) + x234)
	var x264 uint32
	var x265 uint1
	x264, x265 = addcarryxU32(x216, x247, 0x0)
	var x266 uint32
	var x267 uint1
	x266, x267 = addcarryxU32(x218, x249, x265)
	var x268 uint32
	var x269 uint1
	x268, x269 = addcarryxU32(x220, x251, x267)
	var x270 uint32
	var x271 uint1
	x270, x271 = addcarryxU32(x222, x253, x269)
	var x272 uint32
	var x273 uint1
	x272, x273 = addcarryxU32(x224, x255, x271)
	var x274 uint32
	var x275 uint1
	x274, x275 = addcarryxU32(x226, x257, x273)
	var x276 uint32
	var x277 uint1
	x276, x277 = addcarryxU32(x228, x259, x275)
	var x278 uint32
	var x279 uint1
	x278, x279 = addcarryxU32(x230, x261, x277)
	var x280 uint32
	var x281 uint1
	x280, x281 = addcarryxU32(x232, x263, x279)
	var x282 uint32
	var x283 uint32
	x283, x282 = bits.Mul32(x264, 0xffffffff)
	var x284 uint32
	var x285 uint32
	x285, x284 = bits.Mul32(x264, 0xffffffff)
	var x286 uint32
	var x287 uint32
	x287, x286 = bits.Mul32(x264, 0xffffffff)
	var x288 uint32
	var x289 uint32
	x289, x288 = bits.Mul32(x264, 0xffffffff)
	var x290 uint32
	var x291 uint1
	x290, x291 = addcarryxU32(x289, x286, 0x0)
	var x292 uint32
	var x293 uint1
	x292, x293 = addcarryxU32(x287, x284, x291)
	x294 := (uint32(x293) + x285)
	var x296 uint1
	_, x296 = addcarryxU32(x264, x288, 0x0)
	var x297 uint32
	var x298 uint1
	x297, x298 = addcarryxU32(x266, x290, x296)
	var x299 uint32
	var x300 uint1
	x299, x300 = addcarryxU32(x268, x292, x298)
	var x301 uint32
	var x302 uint1
	x301, x302 = addcarryxU32(x270, x294, x300)
	var x303 uint32
	var x304 uint1
	x303, x304 = addcarryxU32(x272, uint32(0x0), x302)
	var x305 uint32
	var x306 uint1
	x305, x306 = addcarryxU32(x274, uint32(0x0), x304)
	var x307 uint32
	var x308 uint1
	x307, x308 = addcarryxU32(x276, x264, x306)
	var x309 uint32
	var x310 uint1
	x309, x310 = addcarryxU32(x278, x282, x308)
	var x311 uint32
	var x312 uint1
	x311, x312 = addcarryxU32(x280, x283, x310)
	x313 := (uint32(x312) + uint32(x281))
	var x314 uint32
	var x315 uint32
	x315, x314 = bits.Mul32(x4, arg2[7])
	var x316 uint32
	var x317 uint32
	x317, x316 = bits.Mul32(x4, arg2[6])
	var x318 uint32
	var x319 uint32
	x319, x318 = bits.Mul32(x4, arg2[5])
	var x320 uint32
	var x321 uint32
	x321, x320 = bits.Mul32(x4, arg2[4])
	var x322 uint32
	var x323 uint32
	x323, x322 = bits.Mul32(x4, arg2[3])
	var x324 uint32
	var x325 uint32
	x325, x324 = bits.Mul32(x4, arg2[2])
	var x326 uint32
	var x327 uint32
	x327, x326 = bits.Mul32(x4, arg2[1])
	var x328 uint32
	var x329 uint32
	x329, x328 = bits.Mul32(x4, arg2[0])
	var x330 uint32
	var x331 uint1
	x330, x331 = addcarryxU32(x329, x326, 0x0)
	var x332 uint32
	var x333 uint1
	x332, x333 = addcarryxU32(x327, x324, x331)
	var x334 uint32
	var x335 uint1
	x334, x335 = addcarryxU32(x325, x322, x333)
	var x336 uint32
	var x337 uint1
	x336, x337 = addcarryxU32(x323, x320, x335)
	var x338 uint32
	var x339 uint1
	x338, x339 = addcarryxU32(x321, x318, x337)
	var x340 uint32
	var x341 uint1
	x340, x341 = addcarryxU32(x319, x316, x339)
	var x342 uint32
	var x343 uint1
	x342, x343 = addcarryxU32(x317, x314, x341)
	x344 := (uint32(x343) + x315)
	var x345 uint32
	var x346 uint1
	x345, x346 = addcarryxU32(x297, x328, 0x0)
	var x347 uint32
	var x348 uint1
	x347, x348 = addcarryxU32(x299, x330, x346)
	var x349 uint32
	var x350 uint1
	x349, x350 = addcarryxU32(x301, x332, x348)
	var x351 uint32
	var x352 uint1
	x351, x352 = addcarryxU32(x303, x334, x350)
	var x353 uint32
	var x354 uint1
	x353, x354 = addcarryxU32(x305, x336, x352)
	var x355 uint32
	var x356 uint1
	x355, x356 = addcarryxU32(x307, x338, x354)
	var x357 uint32
	var x358 uint1
	x357, x358 = addcarryxU32(x309, x340, x356)
	var x359 uint32
	var x360 uint1
	x359, x360 = addcarryxU32(x311, x342, x358)
	var x361 uint32
	var x362 uint1
	x361, x362 = addcarryxU32(x313, x344, x360)
	var x363 uint32
	var x364 uint32
	x364, x363 = bits.Mul32(x345, 0xffffffff)
	var x365 uint32
	var x366 uint32
	x366, x365 = bits.Mul32(x345, 0xffffffff)
	var x367 uint32
	var x368 uint32
	x368, x367 = bits.Mul32(x345, 0xffffffff)
	var x369 uint32
	var x370 uint32
	x370, x369 = bits.Mul32(x345, 0xffffffff)
	var x371 uint32
	var x372 uint1
	x371, x372 = addcarryxU32(x370, x367, 0x0)
	var x373 uint32
	var x374 uint1
	x373, x374 = addcarryxU32(x368, x365, x372)
	x375 := (uint32(x374) + x366)
	var x377 uint1
	_, x377 = addcarryxU32(x345, x369, 0x0)
	var x378 uint32
	var x379 uint1
	x378, x379 = addcarryxU32(x347, x371, x377)
	var x380 uint32
	var x381 uint1
	x380, x381 = addcarryxU32(x349, x373, x379)
	var x382 uint32
	var x383 uint1
	x382, x383 = addcarryxU32(x351, x375, x381)
	var x384 uint32
	var x385 uint1
	x384, x385 = addcarryxU32(x353, uint32(0x0), x383)
	var x386 uint32
	var x387 uint1
	x386, x387 = addcarryxU32(x355, uint32(0x0), x385)
	var x388 uint32
	var x389 uint1
	x388, x389 = addcarryxU32(x357, x345, x387)
	var x390 uint32
	var x391 uint1
	x390, x391 = addcarryxU32(x359, x363, x389)
	var x392 uint32
	var x393 uint1
	x392, x393 = addcarryxU32(x361, x364, x391)
	x394 := (uint32(x393) + uint32(x362))
	var x395 uint32
	var x396 uint32
	x396, x395 = bits.Mul32(x5, arg2[7])
	var x397 uint32
	var x398 uint32
	x398, x397 = bits.Mul32(x5, arg2[6])
	var x399 uint32
	var x400 uint32
	x400, x399 = bits.Mul32(x5, arg2[5])
	var x401 uint32
	var x402 uint32
	x402, x401 = bits.Mul32(x5, arg2[4])
	var x403 uint32
	var x404 uint32
	x404, x403 = bits.Mul32(x5, arg2[3])
	var x405 uint32
	var x406 uint32
	x406, x405 = bits.Mul32(x5, arg2[2])
	var x407 uint32
	var x408 uint32
	x408, x407 = bits.Mul32(x5, arg2[1])
	var x409 uint32
	var x410 uint32
	x410, x409 = bits.Mul32(x5, arg2[0])
	var x411 uint32
	var x412 uint1
	x411, x412 = addcarryxU32(x410, x407, 0x0)
	var x413 uint32
	var x414 uint1
	x413, x414 = addcarryxU32(x408, x405, x412)
	var x415 uint32
	var x416 uint1
	x415, x416 = addcarryxU32(x406, x403, x414)
	var x417 uint32
	var x418 uint1
	x417, x418 = addcarryxU32(x404, x401, x416)
	var x419 uint32
	var x420 uint1
	x419, x420 = addcarryxU32(x402, x399, x418)
	var x421 uint32
	var x422 uint1
	x421, x422 = addcarryxU32(x400, x397, x420)
	var x423 uint32
	var x424 uint1
	x423, x424 = addcarryxU32(x398, x395, x422)
	x425 := (uint32(x424) + x396)
	var x426 uint32
	var x427 uint1
	x426, x427 = addcarryxU32(x378, x409, 0x0)
	var x428 uint32
	var x429 uint1
	x428, x429 = addcarryxU32(x380, x411, x427)
	var x430 uint32
	var x431 uint1
	x430, x431 = addcarryxU32(x382, x413, x429)
	var x432 uint32
	var x433 uint1
	x432, x433 = addcarryxU32(x384, x415, x431)
	var x434 uint32
	var x435 uint1
	x434, x435 = addcarryxU32(x386, x417, x433)
	var x436 uint32
	var x437 uint1
	x436, x437 = addcarryxU32(x388, x419, x435)
	var x438 uint32
	var x439 uint1
	x438, x439 = addcarryxU32(x390, x421, x437)
	var x440 uint32
	var x441 uint1
	x440, x441 = addcarryxU32(x392, x423, x439)
	var x442 uint32
	var x443 uint1
	x442, x443 = addcarryxU32(x394, x425, x441)
	var x444 uint32
	var x445 uint32
	x445, x444 = bits.Mul32(x426, 0xffffffff)
	var x446 uint32
	var x447 uint32
	x447, x446 = bits.Mul32(x426, 0xffffffff)
	var x448 uint32
	var x449 uint32
	x449, x448 = bits.Mul32(x426, 0xffffffff)
	var x450 uint32
	var x451 uint32
	x451, x450 = bits.Mul32(x426, 0xffffffff)
	var x452 uint32
	var x453 uint1
	x452, x453 = addcarryxU32(x451, x448, 0x0)
	var x454 uint32
	var x455 uint1
	x454, x455 = addcarryxU32(x449, x446, x453)
	x456 := (uint32(x455) + x447)
	var x458 uint1
	_, x458 = addcarryxU32(x426, x450, 0x0)
	var x459 uint32
	var x460 uint1
	x459, x460 = addcarryxU32(x428, x452, x458)
	var x461 uint32
	var x462 uint1
	x461, x462 = addcarryxU32(x430, x454, x460)
	var x463 uint32
	var x464 uint1
	x463, x464 = addcarryxU32(x432, x456, x462)
	var x465 uint32
	var x466 uint1
	x465, x466 = addcarryxU32(x434, uint32(0x0), x464)
	var x467 uint32
	var x468 uint1
	x467, x468 = addcarryxU32(x436, uint32(0x0), x466)
	var x469 uint32
	var x470 uint1
	x469, x470 = addcarryxU32(x438, x426, x468)
	var x471 uint32
	var x472 uint1
	x471, x472 = addcarryxU32(x440, x444, x470)
	var x473 uint32
	var x474 uint1
	x473, x474 = addcarryxU32(x442, x445, x472)
	x475 := (uint32(x474) + uint32(x443))
	var x476 uint32
	var x477 uint32
	x477, x476 = bits.Mul32(x6, arg2[7])
	var x478 uint32
	var x479 uint32
	x479, x478 = bits.Mul32(x6, arg2[6])
	var x480 uint32
	var x481 uint32
	x481, x480 = bits.Mul32(x6, arg2[5])
	var x482 uint32
	var x483 uint32
	x483, x482 = bits.Mul32(x6, arg2[4])
	var x484 uint32
	var x485 uint32
	x485, x484 = bits.Mul32(x6, arg2[3])
	var x486 uint32
	var x487 uint32
	x487, x486 = bits.Mul32(x6, arg2[2])
	var x488 uint32
	var x489 uint32
	x489, x488 = bits.Mul32(x6, arg2[1])
	var x490 uint32
	var x491 uint32
	x491, x490 = bits.Mul32(x6, arg2[0])
	var x492 uint32
	var x493 uint1
	x492, x493 = addcarryxU32(x491, x488, 0x0)
	var x494 uint32
	var x495 uint1
	x494, x495 = addcarryxU32(x489, x486, x493)
	var x496 uint32
	var x497 uint1
	x496, x497 = addcarryxU32(x487, x484, x495)
	var x498 uint32
	var x499 uint1
	x498, x499 = addcarryxU32(x485, x482, x497)
	var x500 uint32
	var x501 uint1
	x500, x501 = addcarryxU32(x483, x480, x499)
	var x502 uint32
	var x503 uint1
	x502, x503 = addcarryxU32(x481, x478, x501)
	var x504 uint32
	var x505 uint1
	x504, x505 = addcarryxU32(x479, x476, x503)
	x506 := (uint32(x505) + x477)
	var x507 uint32
	var x508 uint1
	x507, x508 = addcarryxU32(x459, x490, 0x0)
	var x509 uint32
	var x510 uint1
	x509, x510 = addcarryxU32(x461, x492, x508)
	var x511 uint32
	var x512 uint1
	x511, x512 = addcarryxU32(x463, x494, x510)
	var x513 uint32
	var x514 uint1
	x513, x514 = addcarryxU32(x465, x496, x512)
	var x515 uint32
	var x516 uint1
	x515, x516 = addcarryxU32(x467, x498, x514)
	var x517 uint32
	var x518 uint1
	x517, x518 = addcarryxU32(x469, x500, x516)
	var x519 uint32
	var x520 uint1
	x519, x520 = addcarryxU32(x471, x502, x518)
	var x521 uint32
	var x522 uint1
	x521, x522 = addcarryxU32(x473, x504, x520)
	var x523 uint32
	var x524 uint1
	x523, x524 = addcarryxU32(x475, x506, x522)
	var x525 uint32
	var x526 uint32
	x526, x525 = bits.Mul32(x507, 0xffffffff)
	var x527 uint32
	var x528 uint32
	x528, x527 = bits.Mul32(x507, 0xffffffff)
	var x529 uint32
	var x530 uint32
	x530, x529 = bits.Mul32(x507, 0xffffffff)
	var x531 uint32
	var x532 uint32
	x532, x531 = bits.Mul32(x507, 0xffffffff)
	var x533 uint32
	var x534 uint1
	x533, x534 = addcarryxU32(x532, x529, 0x0)
	var x535 uint32
	var x536 uint1
	x535, x536 = addcarryxU32(x530, x527, x534)
	x537 := (uint32(x536) + x528)
	var x539 uint1
	_, x539 = addcarryxU32(x507, x531, 0x0)
	var x540 uint32
	var x541 uint1
	x540, x541 = addcarryxU32(x509, x533, x539)
	var x542 uint32
	var x543 uint1
	x542, x543 = addcarryxU32(x511, x535, x541)
	var x544 uint32
	var x545 uint1
	x544, x545 = addcarryxU32(x513, x537, x543)
	var x546 uint32
	var x547 uint1
	x546, x547 = addcarryxU32(x515, uint32(0x0), x545)
	var x548 uint32
	var x549 uint1
	x548, x549 = addcarryxU32(x517, uint32(0x0), x547)
	var x550 uint32
	var x551 uint1
	x550, x551 = addcarryxU32(x519, x507, x549)
	var x552 uint32
	var x553 uint1
	x552, x553 = addcarryxU32(x521, x525, x551)
	var x554 uint32
	var x555 uint1
	x554, x555 = addcarryxU32(x523, x526, x553)
	x556 := (uint32(x555) + uint32(x524))
	var x557 uint32
	var x558 uint32
	x558, x557 = bits.Mul32(x7, arg2[7])
	var x559 uint32
	var x560 uint32
	x560, x559 = bits.Mul32(x7, arg2[6])
	var x561 uint32
	var x562 uint32
	x562, x561 = bits.Mul32(x7, arg2[5])
	var x563 uint32
	var x564 uint32
	x564, x563 = bits.Mul32(x7, arg2[4])
	var x565 uint32
	var x566 uint32
	x566, x565 = bits.Mul32(x7, arg2[3])
	var x567 uint32
	var x568 uint32
	x568, x567 = bits.Mul32(x7, arg2[2])
	var x569 uint32
	var x570 uint32
	x570, x569 = bits.Mul32(x7, arg2[1])
	var x571 uint32
	var x572 uint32
	x572, x571 = bits.Mul32(x7, arg2[0])
	var x573 uint32
	var x574 uint1
	x573, x574 = addcarryxU32(x572, x569, 0x0)
	var x575 uint32
	var x576 uint1
	x575, x576 = addcarryxU32(x570, x567, x574)
	var x577 uint32
	var x578 uint1
	x577, x578 = addcarryxU32(x568, x565, x576)
	var x579 uint32
	var x580 uint1
	x579, x580 = addcarryxU32(x566, x563, x578)
	var x581 uint32
	var x582 uint1
	x581, x582 = addcarryxU32(x564, x561, x580)
	var x583 uint32
	var x584 uint1
	x583, x584 = addcarryxU32(x562, x559, x582)
	var x585 uint32
	var x586 uint1
	x585, x586 = addcarryxU32(x560, x557, x584)
	x587 := (uint32(x586) + x558)
	var x588 uint32
	var x589 uint1
	x588, x589 = addcarryxU32(x540, x571, 0x0)
	var x590 uint32
	var x591 uint1
	x590, x591 = addcarryxU32(x542, x573, x589)
	var x592 uint32
	var x593 uint1
	x592, x593 = addcarryxU32(x544, x575, x591)
	var x594 uint32
	var x595 uint1
	x594, x595 = addcarryxU32(x546, x577, x593)
	var x596 uint32
	var x597 uint1
	x596, x597 = addcarryxU32(x548, x579, x595)
	var x598 uint32
	var x599 uint1
	x598, x599 = addcarryxU32(x550, x581, x597)
	var x600 uint32
	var x601 uint1
	x600, x601 = addcarryxU32(x552, x583, x599)
	var x602 uint32
	var x603 uint1
	x602, x603 = addcarryxU32(x554, x585, x601)
	var x604 uint32
	var x605 uint1
	x604, x605 = addcarryxU32(x556, x587, x603)
	var x606 uint32
	var x607 uint32
	x607, x606 = bits.Mul32(x588, 0xffffffff)
	var x608 uint32
	var x609 uint32
	x609, x608 = bits.Mul32(x588, 0xffffffff)
	var x610 uint32
	var x611 uint32
	x611, x610 = bits.Mul32(x588, 0xffffffff)
	var x612 uint32
	var x613 uint32
	x613, x612 = bits.Mul32(x588, 0xffffffff)
	var x614 uint32
	var x615 uint1
	x614, x615 = addcarryxU32(x613, x610, 0x0)
	var x616 uint32
	var x617 uint1
	x616, x617 = addcarryxU32(x611, x608, x615)
	x618 := (uint32(x617) + x609)
	var x620 uint1
	_, x620 = addcarryxU32(x588, x612, 0x0)
	var x621 uint32
	var x622 uint1
	x621, x622 = addcarryxU32(x590, x614, x620)
	var x623 uint32
	var x624 uint1
	x623, x624 = addcarryxU32(x592, x616, x622)
	var x625 uint32
	var x626 uint1
	x625, x626 = addcarryxU32(x594, x618, x624)
	var x627 uint32
	var x628 uint1
	x627, x628 = addcarryxU32(x596, uint32(0x0), x626)
	var x629 uint32
	var x630 uint1
	x629, x630 = addcarryxU32(x598, uint32(0x0), x628)
	var x631 uint32
	var x632 uint1
	x631, x632 = addcarryxU32(x600, x588, x630)
	var x633 uint32
	var x634 uint1
	x633, x634 = addcarryxU32(x602, x606, x632)
	var x635 uint32
	var x636 uint1
	x635, x636 = addcarryxU32(x604, x607, x634)
	x637 := (uint32(x636) + uint32(x605))
	var x638 uint32
	var x639 uint1
	x638, x639 = subborrowxU32(x621, 0xffffffff, 0x0)
	var x640 uint32
	var x641 uint1
	x640, x641 = subborrowxU32(x623, 0xffffffff, x639)
	var x642 uint32
	var x643 uint1
	x642, x643 = subborrowxU32(x625, 0xffffffff, x641)
	var x644 uint32
	var x645 uint1
	x644, x645 = subborrowxU32(x627, uint32(0x0), x643)
	var x646 uint32
	var x647 uint1
	x646, x647 = subborrowxU32(x629, uint32(0x0), x645)
	var x648 uint32
	var x649 uint1
	x648, x649 = subborrowxU32(x631, uint32(0x0), x647)
	var x650 uint32
	var x651 uint1
	x650, x651 = subborrowxU32(x633, uint32(0x1), x649)
	var x652 uint32
	var x653 uint1
	x652, x653 = subborrowxU32(x635, 0xffffffff, x651)
	var x655 uint1
	_, x655 = subborrowxU32(x637, uint32(0x0), x653)
	var x656 uint32
	cmovznzU32(&x656, x655, x638, x621)
	var x657 uint32
	cmovznzU32(&x657, x655, x640, x623)
	var x658 uint32
	cmovznzU32(&x658, x655, x642, x625)
	var x659 uint32
	cmovznzU32(&x659, x655, x644, x627)
	var x660 uint32
	cmovznzU32(&x660, x655, x646, x629)
	var x661 uint32
	cmovznzU32(&x661, x655, x648, x631)
	var x662 uint32
	cmovznzU32(&x662, x655, x650, x633)
	var x663 uint32
	cmovznzU32(&x663, x655, x652, x635)
	out1[0] = x656
	out1[1] = x657
	out1[2] = x658
	out1[3] = x659
	out1[4] = x660
	out1[5] = x661
	out1[6] = x662
	out1[7] = x663
}

// Square squares a field element in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
//   0 ≤ eval out1 < m
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func Square(out1 *[8]uint32, arg1 *[8]uint32) {
	x1 := arg1[1]
	x2 := arg1[2]
	x3 := arg1[3]
	x4 := arg1[4]
	x5 := arg1[5]
	x6 := arg1[6]
	x7 := arg1[7]
	x8 := arg1[0]
	var x9 uint32
	var x10 uint32
	x10, x9 = bits.Mul32(x8, arg1[7])
	var x11 uint32
	var x12 uint32
	x12, x11 = bits.Mul32(x8, arg1[6])
	var x13 uint32
	var x14 uint32
	x14, x13 = bits.Mul32(x8, arg1[5])
	var x15 uint32
	var x16 uint32
	x16, x15 = bits.Mul32(x8, arg1[4])
	var x17 uint32
	var x18 uint32
	x18, x17 = bits.Mul32(x8, arg1[3])
	var x19 uint32
	var x20 uint32
	x20, x19 = bits.Mul32(x8, arg1[2])
	var x21 uint32
	var x22 uint32
	x22, x21 = bits.Mul32(x8, arg1[1])
	var x23 uint32
	var x24 uint32
	x24, x23 = bits.Mul32(x8, arg1[0])
	var x25 uint32
	var x26 uint1
	x25, x26 = addcarryxU32(x24, x21, 0x0)
	var x27 uint32
	var x28 uint1
	x27, x28 = addcarryxU32(x22, x19, x26)
	var x29 uint32
	var x30 uint1
	x29, x30 = addcarryxU32(x20, x17, x28)
	var x31 uint32
	var x32 uint1
	x31, x32 = addcarryxU32(x18, x15, x30)
	var x33 uint32
	var x34 uint1
	x33, x34 = addcarryxU32(x16, x13, x32)
	var x35 uint32
	var x36 uint1
	x35, x36 = addcarryxU32(x14, x11, x34)
	var x37 uint32
	var x38 uint1
	x37, x38 = addcarryxU32(x12, x9, x36)
	x39 := (uint32(x38) + x10)
	var x40 uint32
	var x41 uint32
	x41, x40 = bits.Mul32(x23, 0xffffffff)
	var x42 uint32
	var x43 uint32
	x43, x42 = bits.Mul32(x23, 0xffffffff)
	var x44 uint32
	var x45 uint32
	x45, x44 = bits.Mul32(x23, 0xffffffff)
	var x46 uint32
	var x47 uint32
	x47, x46 = bits.Mul32(x23, 0xffffffff)
	var x48 uint32
	var x49 uint1
	x48, x49 = addcarryxU32(x47, x44, 0x0)
	var x50 uint32
	var x51 uint1
	x50, x51 = addcarryxU32(x45, x42, x49)
	x52 := (uint32(x51) + x43)
	var x54 uint1
	_, x54 = addcarryxU32(x23, x46, 0x0)
	var x55 uint32
	var x56 uint1
	x55, x56 = addcarryxU32(x25, x48, x54)
	var x57 uint32
	var x58 uint1
	x57, x58 = addcarryxU32(x27, x50, x56)
	var x59 uint32
	var x60 uint1
	x59, x60 = addcarryxU32(x29, x52, x58)
	var x61 uint32
	var x62 uint1
	x61, x62 = addcarryxU32(x31, uint32(0x0), x60)
	var x63 uint32
	var x64 uint1
	x63, x64 = addcarryxU32(x33, uint32(0x0), x62)
	var x65 uint32
	var x66 uint1
	x65, x66 = addcarryxU32(x35, x23, x64)
	var x67 uint32
	var x68 uint1
	x67, x68 = addcarryxU32(x37, x40, x66)
	var x69 uint32
	var x70 uint1
	x69, x70 = addcarryxU32(x39, x41, x68)
	var x71 uint32
	var x72 uint32
	x72, x71 = bits.Mul32(x1, arg1[7])
	var x73 uint32
	var x74 uint32
	x74, x73 = bits.Mul32(x1, arg1[6])
	var x75 uint32
	var x76 uint32
	x76, x75 = bits.Mul32(x1, arg1[5])
	var x77 uint32
	var x78 uint32
	x78, x77 = bits.Mul32(x1, arg1[4])
	var x79 uint32
	var x80 uint32
	x80, x79 = bits.Mul32(x1, arg1[3])
	var x81 uint32
	var x82 uint32
	x82, x81 = bits.Mul32(x1, arg1[2])
	var x83 uint32
	var x84 uint32
	x84, x83 = bits.Mul32(x1, arg1[1])
	var x85 uint32
	var x86 uint32
	x86, x85 = bits.Mul32(x1, arg1[0])
	var x87 uint32
	var x88 uint1
	x87, x88 = addcarryxU32(x86, x83, 0x0)
	var x89 uint32
	var x90 uint1
	x89, x90 = addcarryxU32(x84, x81, x88)
	var x91 uint32
	var x92 uint1
	x91, x92 = addcarryxU32(x82, x79, x90)
	var x93 uint32
	var x94 uint1
	x93, x94 = addcarryxU32(x80, x77, x92)
	var x95 uint32
	var x96 uint1
	x95, x96 = addcarryxU32(x78, x75, x94)
	var x97 uint32
	var x98 uint1
	x97, x98 = addcarryxU32(x76, x73, x96)
	var x99 uint32
	var x100 uint1
	x99, x100 = addcarryxU32(x74, x71, x98)
	x101 := (uint32(x100) + x72)
	var x102 uint32
	var x103 uint1
	x102, x103 = addcarryxU32(x55, x85, 0x0)
	var x104 uint32
	var x105 uint1
	x104, x105 = addcarryxU32(x57, x87, x103)
	var x106 uint32
	var x107 uint1
	x106, x107 = addcarryxU32(x59, x89, x105)
	var x108 uint32
	var x109 uint1
	x108, x109 = addcarryxU32(x61, x91, x107)
	var x110 uint32
	var x111 uint1
	x110, x111 = addcarryxU32(x63, x93, x109)
	var x112 uint32
	var x113 uint1
	x112, x113 = addcarryxU32(x65, x95, x111)
	var x114 uint32
	var x115 uint1
	x114, x115 = addcarryxU32(x67, x97, x113)
	var x116 uint32
	var x117 uint1
	x116, x117 = addcarryxU32(x69, x99, x115)
	var x118 uint32
	var x119 uint1
	x118, x119 = addcarryxU32(uint32(x70), x101, x117)
	var x120 uint32
	var x121 uint32
	x121, x120 = bits.Mul32(x102, 0xffffffff)
	var x122 uint32
	var x123 uint32
	x123, x122 = bits.Mul32(x102, 0xffffffff)
	var x124 uint32
	var x125 uint32
	x125, x124 = bits.Mul32(x102, 0xffffffff)
	var x126 uint32
	var x127 uint32
	x127, x126 = bits.Mul32(x102, 0xffffffff)
	var x128 uint32
	var x129 uint1
	x128, x129 = addcarryxU32(x127, x124, 0x0)
	var x130 uint32
	var x131 uint1
	x130, x131 = addcarryxU32(x125, x122, x129)
	x132 := (uint32(x131) + x123)
	var x134 uint1
	_, x134 = addcarryxU32(x102, x126, 0x0)
	var x135 uint32
	var x136 uint1
	x135, x136 = addcarryxU32(x104, x128, x134)
	var x137 uint32
	var x138 uint1
	x137, x138 = addcarryxU32(x106, x130, x136)
	var x139 uint32
	var x140 uint1
	x139, x140 = addcarryxU32(x108, x132, x138)
	var x141 uint32
	var x142 uint1
	x141, x142 = addcarryxU32(x110, uint32(0x0), x140)
	var x143 uint32
	var x144 uint1
	x143, x144 = addcarryxU32(x112, uint32(0x0), x142)
	var x145 uint32
	var x146 uint1
	x145, x146 = addcarryxU32(x114, x102, x144)
	var x147 uint32
	var x148 uint1
	x147, x148 = addcarryxU32(x116, x120, x146)
	var x149 uint32
	var x150 uint1
	x149, x150 = addcarryxU32(x118, x121, x148)
	x151 := (uint32(x150) + uint32(x119))
	var x152 uint32
	var x153 uint32
	x153, x152 = bits.Mul32(x2, arg1[7])
	var x154 uint32
	var x155 uint32
	x155, x154 = bits.Mul32(x2, arg1[6])
	var x156 uint32
	var x157 uint32
	x157, x156 = bits.Mul32(x2, arg1[5])
	var x158 uint32
	var x159 uint32
	x159, x158 = bits.Mul32(x2, arg1[4])
	var x160 uint32
	var x161 uint32
	x161, x160 = bits.Mul32(x2, arg1[3])
	var x162 uint32
	var x163 uint32
	x163, x162 = bits.Mul32(x2, arg1[2])
	var x164 uint32
	var x165 uint32
	x165, x164 = bits.Mul32(x2, arg1[1])
	var x166 uint32
	var x167 uint32
	x167, x166 = bits.Mul32(x2, arg1[0])
	var x168 uint32
	var x169 uint1
	x168, x169 = addcarryxU32(x167, x164, 0x0)
	var x170 uint32
	var x171 uint1
	x170, x171 = addcarryxU32(x165, x162, x169)
	var x172 uint32
	var x173 uint1
	x172, x173 = addcarryxU32(x163, x160, x171)
	var x174 uint32
	var x175 uint1
	x174, x175 = addcarryxU32(x161, x158, x173)
	var x176 uint32
	var x177 uint1
	x176, x177 = addcarryxU32(x159, x156, x175)
	var x178 uint32
	var x179 uint1
	x178, x179 = addcarryxU32(x157, x154, x177)
	var x180 uint32
	var x181 uint1
	x180, x181 = addcarryxU32(x155, x152, x179)
	x182 := (uint32(x181) + x153)
	var x183 uint32
	var x184 uint1
	x183, x184 = addcarryxU32(x135, x166, 0x0)
	var x185 uint32
	var x186 uint1
	x185, x186 = addcarryxU32(x137, x168, x184)
	var x187 uint32
	var x188 uint1
	x187, x188 = addcarryxU32(x139, x170, x186)
	var x189 uint32
	var x190 uint1
	x189, x190 = addcarryxU32(x141, x172, x188)
	var x191 uint32
	var x192 uint1
	x191, x192 = addcarryxU32(x143, x174, x190)
	var x193 uint32
	var x194 uint1
	x193, x194 = addcarryxU32(x145, x176, x192)
	var x195 uint32
	var x196 uint1
	x195, x196 = addcarryxU32(x147, x178, x194)
	var x197 uint32
	var x198 uint1
	x197, x198 = addcarryxU32(x149, x180, x196)
	var x199 uint32
	var x200 uint1
	x199, x200 = addcarryxU32(x151, x182, x198)
	var x201 uint32
	var x202 uint32
	x202, x201 = bits.Mul32(x183, 0xffffffff)
	var x203 uint32
	var x204 uint32
	x204, x203 = bits.Mul32(x183, 0xffffffff)
	var x205 uint32
	var x206 uint32
	x206, x205 = bits.Mul32(x183, 0xffffffff)
	var x207 uint32
	var x208 uint32
	x208, x207 = bits.Mul32(x183, 0xffffffff)
	var x209 uint32
	var x210 uint1
	x209, x210 = addcarryxU32(x208, x205, 0x0)
	var x211 uint32
	var x212 uint1
	x211, x212 = addcarryxU32(x206, x203, x210)
	x213 := (uint32(x212) + x204)
	var x215 uint1
	_, x215 = addcarryxU32(x183, x207, 0x0)
	var x216 uint32
	var x217 uint1
	x216, x217 = addcarryxU32(x185, x209, x215)
	var x218 uint32
	var x219 uint1
	x218, x219 = addcarryxU32(x187, x211, x217)
	var x220 uint32
	var x221 uint1
	x220, x221 = addcarryxU32(x189, x213, x219)
	var x222 uint32
	var x223 uint1
	x222, x223 = addcarryxU32(x191, uint32(0x0), x221)
	var x224 uint32
	var x225 uint1
	x224, x225 = addcarryxU32(x193, uint32(0x0), x223)
	var x226 uint32
	var x227 uint1
	x226, x227 = addcarryxU32(x195, x183, x225)
	var x228 uint32
	var x229 uint1
	x228, x229 = addcarryxU32(x197, x201, x227)
	var x230 uint32
	var x231 uint1
	x230, x231 = addcarryxU32(x199, x202, x229)
	x232 := (uint32(x231) + uint32(x200))
	var x233 uint32
	var x234 uint32
	x234, x233 = bits.Mul32(x3, arg1[7])
	var x235 uint32
	var x236 uint32
	x236, x235 = bits.Mul32(x3, arg1[6])
	var x237 uint32
	var x238 uint32
	x238, x237 = bits.Mul32(x3, arg1[5])
	var x239 uint32
	var x240 uint32
	x240, x239 = bits.Mul32(x3, arg1[4])
	var x241 uint32
	var x242 uint32
	x242, x241 = bits.Mul32(x3, arg1[3])
	var x243 uint32
	var x244 uint32
	x244, x243 = bits.Mul32(x3, arg1[2])
	var x245 uint32
	var x246 uint32
	x246, x245 = bits.Mul32(x3, arg1[1])
	var x247 uint32
	var x248 uint32
	x248, x247 = bits.Mul32(x3, arg1[0])
	var x249 uint32
	var x250 uint1
	x249, x250 = addcarryxU32(x248, x245, 0x0)
	var x251 uint32
	var x252 uint1
	x251, x252 = addcarryxU32(x246, x243, x250)
	var x253 uint32
	var x254 uint1
	x253, x254 = addcarryxU32(x244, x241, x252)
	var x255 uint32
	var x256 uint1
	x255, x256 = addcarryxU32(x242, x239, x254)
	var x257 uint32
	var x258 uint1
	x257, x258 = addcarryxU32(x240, x237, x256)
	var x259 uint32
	var x260 uint1
	x259, x260 = addcarryxU32(x238, x235, x258)
	var x261 uint32
	var x262 uint1
	x261, x262 = addcarryxU32(x236, x233, x260)
	x263 := (uint32(x262) + x234)
	var x264 uint32
	var x265 uint1
	x264, x265 = addcarryxU32(x216, x247, 0x0)
	var x266 uint32
	var x267 uint1
	x266, x267 = addcarryxU32(x218, x249, x265)
	var x268 uint32
	var x269 uint1
	x268, x269 = addcarryxU32(x220, x251, x267)
	var x270 uint32
	var x271 uint1
	x270, x271 = addcarryxU32(x222, x253, x269)
	var x272 uint32
	var x273 uint1
	x272, x273 = addcarryxU32(x224, x255, x271)
	var x274 uint32
	var x275 uint1
	x274, x275 = addcarryxU32(x226, x257, x273)
	var x276 uint32
	var x277 uint1
	x276, x277 = addcarryxU32(x228, x259, x275)
	var x278 uint32
	var x279 uint1
	x278, x279 = addcarryxU32(x230, x261, x277)
	var x280 uint32
	var x281 uint1
	x280, x281 = addcarryxU32(x232, x263, x279)
	var x282 uint32
	var x283 uint32
	x283, x282 = bits.Mul32(x264, 0xffffffff)
	var x284 uint32
	var x285 uint32
	x285, x284 = bits.Mul32(x264, 0xffffffff)
	var x286 uint32
	var x287 uint32
	x287, x286 = bits.Mul32(x264, 0xffffffff)
	var x288 uint32
	var x289 uint32
	x289, x288 = bits.Mul32(x264, 0xffffffff)
	var x290 uint32
	var x291 uint1
	x290, x291 = addcarryxU32(x289, x286, 0x0)
	var x292 uint32
	var x293 uint1
	x292, x293 = addcarryxU32(x287, x284, x291)
	x294 := (uint32(x293) + x285)
	var x296 uint1
	_, x296 = addcarryxU32(x264, x288, 0x0)
	var x297 uint32
	var x298 uint1
	x297, x298 = addcarryxU32(x266, x290, x296)
	var x299 uint32
	var x300 uint1
	x299, x300 = addcarryxU32(x268, x292, x298)
	var x301 uint32
	var x302 uint1
	x301, x302 = addcarryxU32(x270, x294, x300)
	var x303 uint32
	var x304 uint1
	x303, x304 = addcarryxU32(x272, uint32(0x0), x302)
	var x305 uint32
	var x306 uint1
	x305, x306 = addcarryxU32(x274, uint32(0x0), x304)
	var x307 uint32
	var x308 uint1
	x307, x308 = addcarryxU32(x276, x264, x306)
	var x309 uint32
	var x310 uint1
	x309, x310 = addcarryxU32(x278, x282, x308)
	var x311 uint32
	var x312 uint1
	x311, x312 = addcarryxU32(x280, x283, x310)
	x313 := (uint32(x312) + uint32(x281))
	var x314 uint32
	var x315 uint32
	x315, x314 = bits.Mul32(x4, arg1[7])
	var x316 uint32
	var x317 uint32
	x317, x316 = bits.Mul32(x4, arg1[6])
	var x318 uint32
	var x319 uint32
	x319, x318 = bits.Mul32(x4, arg1[5])
	var x320 uint32
	var x321 uint32
	x321, x320 = bits.Mul32(x4, arg1[4])
	var x322 uint32
	var x323 uint32
	x323, x322 = bits.Mul32(x4, arg1[3])
	var x324 uint32
	var x325 uint32
	x325, x324 = bits.Mul32(x4, arg1[2])
	var x326 uint32
	var x327 uint32
	x327, x326 = bits.Mul32(x4, arg1[1])
	var x328 uint32
	var x329 uint32
	x329, x328 = bits.Mul32(x4, arg1[0])
	var x330 uint32
	var x331 uint1
	x330, x331 = addcarryxU32(x329, x326, 0x0)
	var x332 uint32
	var x333 uint1
	x332, x333 = addcarryxU32(x327, x324, x331)
	var x334 uint32
	var x335 uint1
	x334, x335 = addcarryxU32(x325, x322, x333)
	var x336 uint32
	var x337 uint1
	x336, x337 = addcarryxU32(x323, x320, x335)
	var x338 uint32
	var x339 uint1
	x338, x339 = addcarryxU32(x321, x318, x337)
	var x340 uint32
	var x341 uint1
	x340, x341 = addcarryxU32(x319, x316, x339)
	var x342 uint32
	var x343 uint1
	x342, x343 = addcarryxU32(x317, x314, x341)
	x344 := (uint32(x343) + x315)
	var x345 uint32
	var x346 uint1
	x345, x346 = addcarryxU32(x297, x328, 0x0)
	var x347 uint32
	var x348 uint1
	x347, x348 = addcarryxU32(x299, x330, x346)
	var x349 uint32
	var x350 uint1
	x349, x350 = addcarryxU32(x301, x332, x348)
	var x351 uint32
	var x352 uint1
	x351, x352 = addcarryxU32(x303, x334, x350)
	var x353 uint32
	var x354 uint1
	x353, x354 = addcarryxU32(x305, x336, x352)
	var x355 uint32
	var x356 uint1
	x355, x356 = addcarryxU32(x307, x338, x354)
	var x357 uint32
	var x358 uint1
	x357, x358 = addcarryxU32(x309, x340, x356)
	var x359 uint32
	var x360 uint1
	x359, x360 = addcarryxU32(x311, x342, x358)
	var x361 uint32
	var x362 uint1
	x361, x362 = addcarryxU32(x313, x344, x360)
	var x363 uint32
	var x364 uint32
	x364, x363 = bits.Mul32(x345, 0xffffffff)
	var x365 uint32
	var x366 uint32
	x366, x365 = bits.Mul32(x345, 0xffffffff)
	var x367 uint32
	var x368 uint32
	x368, x367 = bits.Mul32(x345, 0xffffffff)
	var x369 uint32
	var x370 uint32
	x370, x369 = bits.Mul32(x345, 0xffffffff)
	var x371 uint32
	var x372 uint1
	x371, x372 = addcarryxU32(x370, x367, 0x0)
	var x373 uint32
	var x374 uint1
	x373, x374 = addcarryxU32(x368, x365, x372)
	x375 := (uint32(x374) + x366)
	var x377 uint1
	_, x377 = addcarryxU32(x345, x369, 0x0)
	var x378 uint32
	var x379 uint1
	x378, x379 = addcarryxU32(x347, x371, x377)
	var x380 uint32
	var x381 uint1
	x380, x381 = addcarryxU32(x349, x373, x379)
	var x382 uint32
	var x383 uint1
	x382, x383 = addcarryxU32(x351, x375, x381)
	var x384 uint32
	var x385 uint1
	x384, x385 = addcarryxU32(x353, uint32(0x0), x383)
	var x386 uint32
	var x387 uint1
	x386, x387 = addcarryxU32(x355, uint32(0x0), x385)
	var x388 uint32
	var x389 uint1
	x388, x389 = addcarryxU32(x357, x345, x387)
	var x390 uint32
	var x391 uint1
	x390, x391 = addcarryxU32(x359, x363, x389)
	var x392 uint32
	var x393 uint1
	x392, x393 = addcarryxU32(x361, x364, x391)
	x394 := (uint32(x393) + uint32(x362))
	var x395 uint32
	var x396 uint32
	x396, x395 = bits.Mul32(x5, arg1[7])
	var x397 uint32
	var x398 uint32
	x398, x397 = bits.Mul32(x5, arg1[6])
	var x399 uint32
	var x400 uint32
	x400, x399 = bits.Mul32(x5, arg1[5])
	var x401 uint32
	var x402 uint32
	x402, x401 = bits.Mul32(x5, arg1[4])
	var x403 uint32
	var x404 uint32
	x404, x403 = bits.Mul32(x5, arg1[3])
	var x405 uint32
	var x406 uint32
	x406, x405 = bits.Mul32(x5, arg1[2])
	var x407 uint32
	var x408 uint32
	x408, x407 = bits.Mul32(x5, arg1[1])
	var x409 uint32
	var x410 uint32
	x410, x409 = bits.Mul32(x5, arg1[0])
	var x411 uint32
	var x412 uint1
	x411, x412 = addcarryxU32(x410, x407, 0x0)
	var x413 uint32
	var x414 uint1
	x413, x414 = addcarryxU32(x408, x405, x412)
	var x415 uint32
	var x416 uint1
	x415, x416 = addcarryxU32(x406, x403, x414)
	var x417 uint32
	var x418 uint1
	x417, x418 = addcarryxU32(x404, x401, x416)
	var x419 uint32
	var x420 uint1
	x419, x420 = addcarryxU32(x402, x399, x418)
	var x421 uint32
	var x422 uint1
	x421, x422 = addcarryxU32(x400, x397, x420)
	var x423 uint32
	var x424 uint1
	x423, x424 = addcarryxU32(x398, x395, x422)
	x425 := (uint32(x424) + x396)
	var x426 uint32
	var x427 uint1
	x426, x427 = addcarryxU32(x378, x409, 0x0)
	var x428 uint32
	var x429 uint1
	x428, x429 = addcarryxU32(x380, x411, x427)
	var x430 uint32
	var x431 uint1
	x430, x431 = addcarryxU32(x382, x413, x429)
	var x432 uint32
	var x433 uint1
	x432, x433 = addcarryxU32(x384, x415, x431)
	var x434 uint32
	var x435 uint1
	x434, x435 = addcarryxU32(x386, x417, x433)
	var x436 uint32
	var x437 uint1
	x436, x437 = addcarryxU32(x388, x419, x435)
	var x438 uint32
	var x439 uint1
	x438, x439 = addcarryxU32(x390, x421, x437)
	var x440 uint32
	var x441 uint1
	x440, x441 = addcarryxU32(x392, x423, x439)
	var x442 uint32
	var x443 uint1
	x442, x443 = addcarryxU32(x394, x425, x441)
	var x444 uint32
	var x445 uint32
	x445, x444 = bits.Mul32(x426, 0xffffffff)
	var x446 uint32
	var x447 uint32
	x447, x446 = bits.Mul32(x426, 0xffffffff)
	var x448 uint32
	var x449 uint32
	x449, x448 = bits.Mul32(x426, 0xffffffff)
	var x450 uint32
	var x451 uint32
	x451, x450 = bits.Mul32(x426, 0xffffffff)
	var x452 uint32
	var x453 uint1
	x452, x453 = addcarryxU32(x451, x448, 0x0)
	var x454 uint32
	var x455 uint1
	x454, x455 = addcarryxU32(x449, x446, x453)
	x456 := (uint32(x455) + x447)
	var x458 uint1
	_, x458 = addcarryxU32(x426, x450, 0x0)
	var x459 uint32
	var x460 uint1
	x459, x460 = addcarryxU32(x428, x452, x458)
	var x461 uint32
	var x462 uint1
	x461, x462 = addcarryxU32(x430, x454, x460)
	var x463 uint32
	var x464 uint1
	x463, x464 = addcarryxU32(x432, x456, x462)
	var x465 uint32
	var x466 uint1
	x465, x466 = addcarryxU32(x434, uint32(0x0), x464)
	var x467 uint32
	var x468 uint1
	x467, x468 = addcarryxU32(x436, uint32(0x0), x466)
	var x469 uint32
	var x470 uint1
	x469, x470 = addcarryxU32(x438, x426, x468)
	var x471 uint32
	var x472 uint1
	x471, x472 = addcarryxU32(x440, x444, x470)
	var x473 uint32
	var x474 uint1
	x473, x474 = addcarryxU32(x442, x445, x472)
	x475 := (uint32(x474) + uint32(x443))
	var x476 uint32
	var x477 uint32
	x477, x476 = bits.Mul32(x6, arg1[7])
	var x478 uint32
	var x479 uint32
	x479, x478 = bits.Mul32(x6, arg1[6])
	var x480 uint32
	var x481 uint32
	x481, x480 = bits.Mul32(x6, arg1[5])
	var x482 uint32
	var x483 uint32
	x483, x482 = bits.Mul32(x6, arg1[4])
	var x484 uint32
	var x485 uint32
	x485, x484 = bits.Mul32(x6, arg1[3])
	var x486 uint32
	var x487 uint32
	x487, x486 = bits.Mul32(x6, arg1[2])
	var x488 uint32
	var x489 uint32
	x489, x488 = bits.Mul32(x6, arg1[1])
	var x490 uint32
	var x491 uint32
	x491, x490 = bits.Mul32(x6, arg1[0])
	var x492 uint32
	var x493 uint1
	x492, x493 = addcarryxU32(x491, x488, 0x0)
	var x494 uint32
	var x495 uint1
	x494, x495 = addcarryxU32(x489, x486, x493)
	var x496 uint32
	var x497 uint1
	x496, x497 = addcarryxU32(x487, x484, x495)
	var x498 uint32
	var x499 uint1
	x498, x499 = addcarryxU32(x485, x482, x497)
	var x500 uint32
	var x501 uint1
	x500, x501 = addcarryxU32(x483, x480, x499)
	var x502 uint32
	var x503 uint1
	x502, x503 = addcarryxU32(x481, x478, x501)
	var x504 uint32
	var x505 uint1
	x504, x505 = addcarryxU32(x479, x476, x503)
	x506 := (uint32(x505) + x477)
	var x507 uint32
	var x508 uint1
	x507, x508 = addcarryxU32(x459, x490, 0x0)
	var x509 uint32
	var x510 uint1
	x509, x510 = addcarryxU32(x461, x492, x508)
	var x511 uint32
	var x512 uint1
	x511, x512 = addcarryxU32(x463, x494, x510)
	var x513 uint32
	var x514 uint1
	x513, x514 = addcarryxU32(x465, x496, x512)
	var x515 uint32
	var x516 uint1
	x515, x516 = addcarryxU32(x467, x498, x514)
	var x517 uint32
	var x518 uint1
	x517, x518 = addcarryxU32(x469, x500, x516)
	var x519 uint32
	var x520 uint1
	x519, x520 = addcarryxU32(x471, x502, x518)
	var x521 uint32
	var x522 uint1
	x521, x522 = addcarryxU32(x473, x504, x520)
	var x523 uint32
	var x524 uint1
	x523, x524 = addcarryxU32(x475, x506, x522)
	var x525 uint32
	var x526 uint32
	x526, x525 = bits.Mul32(x507, 0xffffffff)
	var x527 uint32
	var x528 uint32
	x528, x527 = bits.Mul32(x507, 0xffffffff)
	var x529 uint32
	var x530 uint32
	x530, x529 = bits.Mul32(x507, 0xffffffff)
	var x531 uint32
	var x532 uint32
	x532, x531 = bits.Mul32(x507, 0xffffffff)
	var x533 uint32
	var x534 uint1
	x533, x534 = addcarryxU32(x532, x529, 0x0)
	var x535 uint32
	var x536 uint1
	x535, x536 = addcarryxU32(x530, x527, x534)
	x537 := (uint32(x536) + x528)
	var x539 uint1
	_, x539 = addcarryxU32(x507, x531, 0x0)
	var x540 uint32
	var x541 uint1
	x540, x541 = addcarryxU32(x509, x533, x539)
	var x542 uint32
	var x543 uint1
	x542, x543 = addcarryxU32(x511, x535, x541)
	var x544 uint32
	var x545 uint1
	x544, x545 = addcarryxU32(x513, x537, x543)
	var x546 uint32
	var x547 uint1
	x546, x547 = addcarryxU32(x515, uint32(0x0), x545)
	var x548 uint32
	var x549 uint1
	x548, x549 = addcarryxU32(x517, uint32(0x0), x547)
	var x550 uint32
	var x551 uint1
	x550, x551 = addcarryxU32(x519, x507, x549)
	var x552 uint32
	var x553 uint1
	x552, x553 = addcarryxU32(x521, x525, x551)
	var x554 uint32
	var x555 uint1
	x554, x555 = addcarryxU32(x523, x526, x553)
	x556 := (uint32(x555) + uint32(x524))
	var x557 uint32
	var x558 uint32
	x558, x557 = bits.Mul32(x7, arg1[7])
	var x559 uint32
	var x560 uint32
	x560, x559 = bits.Mul32(x7, arg1[6])
	var x561 uint32
	var x562 uint32
	x562, x561 = bits.Mul32(x7, arg1[5])
	var x563 uint32
	var x564 uint32
	x564, x563 = bits.Mul32(x7, arg1[4])
	var x565 uint32
	var x566 uint32
	x566, x565 = bits.Mul32(x7, arg1[3])
	var x567 uint32
	var x568 uint32
	x568, x567 = bits.Mul32(x7, arg1[2])
	var x569 uint32
	var x570 uint32
	x570, x569 = bits.Mul32(x7, arg1[1])
	var x571 uint32
	var x572 uint32
	x572, x571 = bits.Mul32(x7, arg1[0])
	var x573 uint32
	var x574 uint1
	x573, x574 = addcarryxU32(x572, x569, 0x0)
	var x575 uint32
	var x576 uint1
	x575, x576 = addcarryxU32(x570, x567, x574)
	var x577 uint32
	var x578 uint1
	x577, x578 = addcarryxU32(x568, x565, x576)
	var x579 uint32
	var x580 uint1
	x579, x580 = addcarryxU32(x566, x563, x578)
	var x581 uint32
	var x582 uint1
	x581, x582 = addcarryxU32(x564, x561, x580)
	var x583 uint32
	var x584 uint1
	x583, x584 = addcarryxU32(x562, x559, x582)
	var x585 uint32
	var x586 uint1
	x585, x586 = addcarryxU32(x560, x557, x584)
	x587 := (uint32(x586) + x558)
	var x588 uint32
	var x589 uint1
	x588, x589 = addcarryxU32(x540, x571, 0x0)
	var x590 uint32
	var x591 uint1
	x590, x591 = addcarryxU32(x542, x573, x589)
	var x592 uint32
	var x593 uint1
	x592, x593 = addcarryxU32(x544, x575, x591)
	var x594 uint32
	var x595 uint1
	x594, x595 = addcarryxU32(x546, x577, x593)
	var x596 uint32
	var x597 uint1
	x596, x597 = addcarryxU32(x548, x579, x595)
	var x598 uint32
	var x599 uint1
	x598, x599 = addcarryxU32(x550, x581, x597)
	var x600 uint32
	var x601 uint1
	x600, x601 = addcarryxU32(x552, x583, x599)
	var x602 uint32
	var x603 uint1
	x602, x603 = addcarryxU32(x554, x585, x601)
	var x604 uint32
	var x605 uint1
	x604, x605 = addcarryxU32(x556, x587, x603)
	var x606 uint32
	var x607 uint32
	x607, x606 = bits.Mul32(x588, 0xffffffff)
	var x608 uint32
	var x609 uint32
	x609, x608 = bits.Mul32(x588, 0xffffffff)
	var x610 uint32
	var x611 uint32
	x611, x610 = bits.Mul32(x588, 0xffffffff)
	var x612 uint32
	var x613 uint32
	x613, x612 = bits.Mul32(x588, 0xffffffff)
	var x614 uint32
	var x615 uint1
	x614, x615 = addcarryxU32(x613, x610, 0x0)
	var x616 uint32
	var x617 uint1
	x616, x617 = addcarryxU32(x611, x608, x615)
	x618 := (uint32(x617) + x609)
	var x620 uint1
	_, x620 = addcarryxU32(x588, x612, 0x0)
	var x621 uint32
	var x622 uint1
	x621, x622 = addcarryxU32(x590, x614, x620)
	var x623 uint32
	var x624 uint1
	x623, x624 = addcarryxU32(x592, x616, x622)
	var x625 uint32
	var x626 uint1
	x625, x626 = addcarryxU32(x594, x618, x624)
	var x627 uint32
	var x628 uint1
	x627, x628 = addcarryxU32(x596, uint32(0x0), x626)
	var x629 uint32
	var x630 uint1
	x629, x630 = addcarryxU32(x598, uint32(0x0), x628)
	var x631 uint32
	var x632 uint1
	x631, x632 = addcarryxU32(x600, x588, x630)
	var x633 uint32
	var x634 uint1
	x633, x634 = addcarryxU32(x602, x606, x632)
	var x635 uint32
	var x636 uint1
	x635, x636 = addcarryxU32(x604, x607, x634)
	x637 := (uint32(x636) + uint32(x605))
	var x638 uint32
	var x639 uint1
	x638, x639 = subborrowxU32(x621, 0xffffffff, 0x0)
	var x640 uint32
	var x641 uint1
	x640, x641 = subborrowxU32(x623, 0xffffffff, x639)
	var x642 uint32
	var x643 uint1
	x642, x643 = subborrowxU32(x625, 0xffffffff, x641)
	var x644 uint32
	var x645 uint1
	x644, x645 = subborrowxU32(x627, uint32(0x0), x643)
	var x646 uint32
	var x647 uint1
	x646, x647 = subborrowxU32(x629, uint32(0x0), x645)
	var x648 uint32
	var x649 uint1
	x648, x649 = subborrowxU32(x631, uint32(0x0), x647)
	var x650 uint32
	var x651 uint1
	x650, x651 = subborrowxU32(x633, uint32(0x1), x649)
	var x652 uint32
	var x653 uint1
	x652, x653 = subborrowxU32(x635, 0xffffffff, x651)
	var x655 uint1
	_, x655 = subborrowxU32(x637, uint32(0x0), x653)
	var x656 uint32
	cmovznzU32(&x656, x655, x638, x621)
	var x657 uint32
	cmovznzU32(&x657, x655, x640, x623)
	var x658 uint32
	cmovznzU32(&x658, x655, x642, x625)
	var x659 uint32
	cmovznzU32(&x659, x655, x644, x627)
	var x660 uint32
	cmovznzU32(&x660, x655, x646, x629)
	var x661 uint32
	cmovznzU32(&x661, x655, x648, x631)
	var x662 uint32
	cmovznzU32(&x662, x655, x650, x633)
	var x663 uint32
	cmovznzU32(&x663, x655, x652, x635)
	out1[0] = x656
	out1[1] = x657
	out1[2] = x658
	out1[3] = x659
	out1[4] = x660
	out1[5] = x661
	out1[6] = x662
	out1[7] = x663
}

// Add adds two field elements in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
//   0 ≤ eval arg2 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
//   0 ≤ eval out1 < m
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func Add(out1 *[8]uint32, arg1 *[8]uint32, arg2 *[8]uint32) {
	var x1 uint32
	var x2 uint1
	x1, x2 = addcarryxU32(arg1[0], arg2[0], 0x0)
	var x3 uint32
	var x4 uint1
	x3, x4 = addcarryxU32(arg1[1], arg2[1], x2)
	var x5 uint32
	var x6 uint1
	x5, x6 = addcarryxU32(arg1[2], arg2[2], x4)
	var x7 uint32
	var x8 uint1
	x7, x8 = addcarryxU32(arg1[3], arg2[3], x6)
	var x9 uint32
	var x10 uint1
	x9, x10 = addcarryxU32(arg1[4], arg2[4], x8)
	var x11 uint32
	var x12 uint1
	x11, x12 = addcarryxU32(arg1[5], arg2[5], x10)
	var x13 uint32
	var x14 uint1
	x13, x14 = addcarryxU32(arg1[6], arg2[6], x12)
	var x15 uint32
	var x16 uint1
	x15, x16 = addcarryxU32(arg1[7], arg2[7], x14)
	var x17 uint32
	var x18 uint1
	x17, x18 = subborrowxU32(x1, 0xffffffff, 0x0)
	var x19 uint32
	var x20 uint1
	x19, x20 = subborrowxU32(x3, 0xffffffff, x18)
	var x21 uint32
	var x22 uint1
	x21, x22 = subborrowxU32(x5, 0xffffffff, x20)
	var x23 uint32
	var x24 uint1
	x23, x24 = subborrowxU32(x7, uint32(0x0), x22)
	var x25 uint32
	var x26 uint1
	x25, x26 = subborrowxU32(x9, uint32(0x0), x24)
	var x27 uint32
	var x28 uint1
	x27, x28 = subborrowxU32(x11, uint32(0x0), x26)
	var x29 uint32
	var x30 uint1
	x29, x30 = subborrowxU32(x13, uint32(0x1), x28)
	var x31 uint32
	var x32 uint1
	x31, x32 = subborrowxU32(x15, 0xffffffff, x30)
	var x34 uint1
	_, x34 = subborrowxU32(uint32(x16), uint32(0x0), x32)
	var x35 uint32
	cmovznzU32(&x35, x34, x17, x1)
	var x36 uint32
	cmovznzU32(&x36, x34, x19, x3)
	var x37 uint32
	cmovznzU32(&x37, x34, x21, x5)
	var x38 uint32
	cmovznzU32(&x38, x34, x23, x7)
	var x39 uint32
	cmovznzU32(&x39, x34, x25, x9)
	var x40 uint32
	cmovznzU32(&x40, x34, x27, x11)
	var x41 uint32
	cmovznzU32(&x41, x34, x29, x13)
	var x42 uint32
	cmovznzU32(&x42, x34, x31, x15)
	out1[0] = x35
	out1[1] = x36
	out1[2] = x37
	out1[3] = x38
	out1[4] = x39
	out1[5] = x40
	out1[6] = x41
	out1[7] = x42
}

// Sub subtracts two field elements in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
//   0 ≤ eval arg2 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
//   0 ≤ eval out1 < m
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func Sub(out1 *[8]uint32, arg1 *[8]uint32, arg2 *[8]uint32) {
	var x1 uint32
	var x2 uint1
	x1, x2 = subborrowxU32(arg1[0], arg2[0], 0x0)
	var x3 uint32
	var x4 uint1
	x3, x4 = subborrowxU32(arg1[1], arg2[1], x2)
	var x5 uint32
	var x6 uint1
	x5, x6 = subborrowxU32(arg1[2], arg2[2], x4)
	var x7 uint32
	var x8 uint1
	x7, x8 = subborrowxU32(arg1[3], arg2[3], x6)
	var x9 uint32
	var x10 uint1
	x9, x10 = subborrowxU32(arg1[4], arg2[4], x8)
	var x11 uint32
	var x12 uint1
	x11, x12 = subborrowxU32(arg1[5], arg2[5], x10)
	var x13 uint32
	var x14 uint1
	x13, x14 = subborrowxU32(arg1[6], arg2[6], x12)
	var x15 uint32
	var x16 uint1
	x15, x16 = subborrowxU32(arg1[7], arg2[7], x14)
	var x17 uint32
	cmovznzU32(&x17, x16, uint32(0x0), 0xffffffff)
	var x18 uint32
	var x19 uint1
	x18, x19 = addcarryxU32(x1, x17, 0x0)
	var x20 uint32
	var x21 uint1
	x20, x21 = addcarryxU32(x3, x17, x19)
	var x22 uint32
	var x23 uint1
	x22, x23 = addcarryxU32(x5, x17, x21)
	var x24 uint32
	var x25 uint1
	x24, x25 = addcarryxU32(x7, uint32(0x0), x23)
	var x26 uint32
	var x27 uint1
	x26, x27 = addcarryxU32(x9, uint32(0x0), x25)
	var x28 uint32
	var x29 uint1
	x28, x29 = addcarryxU32(x11, uint32(0x0), x27)
	var x30 uint32
	var x31 uint1
	x30, x31 = addcarryxU32(x13, uint32((uint1(x17) & 0x1)), x29)
	var x32 uint32
	x32, _ = addcarryxU32(x15, x17, x31)
	out1[0] = x18
	out1[1] = x20
	out1[2] = x22
	out1[3] = x24
	out1[4] = x26
	out1[5] = x28
	out1[6] = x30
	out1[7] = x32
}

// Opp negates a field element in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
//   0 ≤ eval out1 < m
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func Opp(out1 *[8]uint32, arg1 *[8]uint32) {
	var x1 uint32
	var x2 uint1
	x1, x2 = subborrowxU32(uint32(0x0), arg1[0], 0x0)
	var x3 uint32
	var x4 uint1
	x3, x4 = subborrowxU32(uint32(0x0), arg1[1], x2)
	var x5 uint32
	var x6 uint1
	x5, x6 = subborrowxU32(uint32(0x0), arg1[2], x4)
	var x7 uint32
	var x8 uint1
	x7, x8 = subborrowxU32(uint32(0x0), arg1[3], x6)
	var x9 uint32
	var x10 uint1
	x9, x10 = subborrowxU32(uint32(0x0), arg1[4], x8)
	var x11 uint32
	var x12 uint1
	x11, x12 = subborrowxU32(uint32(0x0), arg1[5], x10)
	var x13 uint32
	var x14 uint1
	x13, x14 = subborrowxU32(uint32(0x0), arg1[6], x12)
	var x15 uint32
	var x16 uint1
	x15, x16 = subborrowxU32(uint32(0x0), arg1[7], x14)
	var x17 uint32
	cmovznzU32(&x17, x16, uint32(0x0), 0xffffffff)
	var x18 uint32
	var x19 uint1
	x18, x19 = addcarryxU32(x1, x17, 0x0)
	var x20 uint32
	var x21 uint1
	x20, x21 = addcarryxU32(x3, x17, x19)
	var x22 uint32
	var x23 uint1
	x22, x23 = addcarryxU32(x5, x17, x21)
	var x24 uint32
	var x25 uint1
	x24, x25 = addcarryxU32(x7, uint32(0x0), x23)
	var x26 uint32
	var x27 uint1
	x26, x27 = addcarryxU32(x9, uint32(0x0), x25)
	var x28 uint32
	var x29 uint1
	x28, x29 = addcarryxU32(x11, uint32(0x0), x27)
	var x30 uint32
	var x31 uint1
	x30, x31 = addcarryxU32(x13, uint32((uint1(x17) & 0x1)), x29)
	var x32 uint32
	x32, _ = addcarryxU32(x15, x17, x31)
	out1[0] = x18
	out1[1] = x20
	out1[2] = x22
	out1[3] = x24
	out1[4] = x26
	out1[5] = x28
	out1[6] = x30
	out1[7] = x32
}

// FromMontgomery translates a field element out of the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval out1 mod m = (eval arg1 * ((2^32)⁻¹ mod m)^8) mod m
//   0 ≤ eval out1 < m
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func FromMontgomery(out1 *[8]uint32, arg1 *[8]uint32) {
	x1 := arg1[0]
	var x2 uint32
	var x3 uint32
	x3, x2 = bits.Mul32(x1, 0xffffffff)
	var x4 uint32
	var x5 uint32
	x5, x4 = bits.Mul32(x1, 0xffffffff)
	var x6 uint32
	var x7 uint32
	x7, x6 = bits.Mul32(x1, 0xffffffff)
	var x8 uint32
	var x9 uint32
	x9, x8 = bits.Mul32(x1, 0xffffffff)
	var x10 uint32
	var x11 uint1
	x10, x11 = addcarryxU32(x9, x6, 0x0)
	var x12 uint32
	var x13 uint1
	x12, x13 = addcarryxU32(x7, x4, x11)
	var x15 uint1
	_, x15 = addcarryxU32(x1, x8, 0x0)
	var x16 uint32
	var x17 uint1
	x16, x17 = addcarryxU32(uint32(0x0), x10, x15)
	var x18 uint32
	var x19 uint1
	x18, x19 = addcarryxU32(uint32(0x0), x12, x17)
	var x20 uint32
	var x21 uint1
	x20, x21 = addcarryxU32(uint32(0x0), (uint32(x13) + x5), x19)
	var x22 uint32
	var x23 uint1
	x22, x23 = addcarryxU32(x16, arg1[1], 0x0)
	var x24 uint32
	var x25 uint1
	x24, x25 = addcarryxU32(x18, uint32(0x0), x23)
	var x26 uint32
	var x27 uint1
	x26, x27 = addcarryxU32(x20, uint32(0x0), x25)
	var x28 uint32
	var x29 uint32
	x29, x28 = bits.Mul32(x22, 0xffffffff)
	var x30 uint32
	var x31 uint32
	x31, x30 = bits.Mul32(x22, 0xffffffff)
	var x32 uint32
	var x33 uint32
	x33, x32 = bits.Mul32(x22, 0xffffffff)
	var x34 uint32
	var x35 uint32
	x35, x34 = bits.Mul32(x22, 0xffffffff)
	var x36 uint32
	var x37 uint1
	x36, x37 = addcarryxU32(x35, x32, 0x0)
	var x38 uint32
	var x39 uint1
	x38, x39 = addcarryxU32(x33, x30, x37)
	var x41 uint1
	_, x41 = addcarryxU32(x22, x34, 0x0)
	var x42 uint32
	var x43 uint1
	x42, x43 = addcarryxU32(x24, x36, x41)
	var x44 uint32
	var x45 uint1
	x44, x45 = addcarryxU32(x26, x38, x43)
	var x46 uint32
	var x47 uint1
	x46, x47 = addcarryxU32((uint32(x27) + uint32(x21)), (uint32(x39) + x31), x45)
	var x48 uint32
	var x49 uint1
	x48, x49 = addcarryxU32(x2, x22, 0x0)
	var x50 uint32
	var x51 uint1
	x50, x51 = addcarryxU32(x3, x28, x49)
	var x52 uint32
	var x53 uint1
	x52, x53 = addcarryxU32(x42, arg1[2], 0x0)
	var x54 uint32
	var x55 uint1
	x54, x55 = addcarryxU32(x44, uint32(0x0), x53)
	var x56 uint32
	var x57 uint1
	x56, x57 = addcarryxU32(x46, uint32(0x0), x55)
	var x58 uint32
	var x59 uint32
	x59, x58 = bits.Mul32(x52, 0xffffffff)
	var x60 uint32
	var x61 uint32
	x61, x60 = bits.Mul32(x52, 0xffffffff)
	var x62 uint32
	var x63 uint32
	x63, x62 = bits.Mul32(x52, 0xffffffff)
	var x64 uint32
	var x65 uint32
	x65, x64 = bits.Mul32(x52, 0xffffffff)
	var x66 uint32
	var x67 uint1
	x66, x67 = addcarryxU32(x65, x62, 0x0)
	var x68 uint32
	var x69 uint1
	x68, x69 = addcarryxU32(x63, x60, x67)
	var x71 uint1
	_, x71 = addcarryxU32(x52, x64, 0x0)
	var x72 uint32
	var x73 uint1
	x72, x73 = addcarryxU32(x54, x66, x71)
	var x74 uint32
	var x75 uint1
	x74, x75 = addcarryxU32(x56, x68, x73)
	var x76 uint32
	var x77 uint1
	x76, x77 = addcarryxU32((uint32(x57) + uint32(x47)), (uint32(x69) + x61), x75)
	var x78 uint32
	var x79 uint1
	x78, x79 = addcarryxU32(x1, uint32(0x0), x77)
	var x80 uint32
	var x81 uint1
	x80, x81 = addcarryxU32(x48, uint32(0x0), x79)
	var x82 uint32
	var x83 uint1
	x82, x83 = addcarryxU32(x50, x52, x81)
	var x84 uint32
	var x85 uint1
	x84, x85 = addcarryxU32((uint32(x51) + x29), x58, x83)
	var x86 uint32
	var x87 uint1
	x86, x87 = addcarryxU32(x72, arg1[3], 0x0)
	var x88 uint32
	var x89 uint1
	x88, x89 = addcarryxU32(x74, uint32(0x0), x87)
	var x90 uint32
	var x91 uint1
	x90, x91 = addcarryxU32(x76, uint32(0x0), x89)
	var x92 uint32
	var x93 uint1
	x92, x93 = addcarryxU32(x78, uint32(0x0), x91)
	var x94 uint32
	var x95 uint1
	x94, x95 = addcarryxU32(x80, uint32(0x0), x93)
	var x96 uint32
	var x97 uint1
	x96, x97 = addcarryxU32(x82, uint32(0x0), x95)
	var x98 uint32
	var x99 uint1
	x98, x99 = addcarryxU32(x84, uint32(0x0), x97)
	var x100 uint32
	var x101 uint1
	x100, x101 = addcarryxU32((uint32(x85) + x59), uint32(0x0), x99)
	var x102 uint32
	var x103 uint32
	x103, x102 = bits.Mul32(x86, 0xffffffff)
	var x104 uint32
	var x105 uint32
	x105, x104 = bits.Mul32(x86, 0xffffffff)
	var x106 uint32
	var x107 uint32
	x107, x106 = bits.Mul32(x86, 0xffffffff)
	var x108 uint32
	var x109 uint32
	x109, x108 = bits.Mul32(x86, 0xffffffff)
	var x110 uint32
	var x111 uint1
	x110, x111 = addcarryxU32(x109, x106, 0x0)
	var x112 uint32
	var x113 uint1
	x112, x113 = addcarryxU32(x107, x104, x111)
	var x115 uint1
	_, x115 = addcarryxU32(x86, x108, 0x0)
	var x116 uint32
	var x117 uint1
	x116, x117 = addcarryxU32(x88, x110, x115)
	var x118 uint32
	var x119 uint1
	x118, x119 = addcarryxU32(x90, x112, x117)
	var x120 uint32
	var x121 uint1
	x120, x121 = addcarryxU32(x92, (uint32(x113) + x105), x119)
	var x122 uint32
	var x123 uint1
	x122, x123 = addcarryxU32(x94, uint32(0x0), x121)
	var x124 uint32
	var x125 uint1
	x124, x125 = addcarryxU32(x96, uint32(0x0), x123)
	var x126 uint32
	var x127 uint1
	x126, x127 = addcarryxU32(x98, x86, x125)
	var x128 uint32
	var x129 uint1
	x128, x129 = addcarryxU32(x100, x102, x127)
	var x130 uint32
	var x131 uint1
	x130, x131 = addcarryxU32(uint32(x101), x103, x129)
	var x132 uint32
	var x133 uint1
	x132, x133 = addcarryxU32(x116, arg1[4], 0x0)
	var x134 uint32
	var x135 uint1
	x134, x135 = addcarryxU32(x118, uint32(0x0), x133)
	var x136 uint32
	var x137 uint1
	x136, x137 = addcarryxU32(x120, uint32(0x0), x135)
	var x138 uint32
	var x139 uint1
	x138, x139 = addcarryxU32(x122, uint32(0x0), x137)
	var x140 uint32
	var x141 uint1
	x140, x141 = addcarryxU32(x124, uint32(0x0), x139)
	var x142 uint32
	var x143 uint1
	x142, x143 = addcarryxU32(x126, uint32(0x0), x141)
	var x144 uint32
	var x145 uint1
	x144, x145 = addcarryxU32(x128, uint32(0x0), x143)
	var x146 uint32
	var x147 uint1
	x146, x147 = addcarryxU32(x130, uint32(0x0), x145)
	var x148 uint32
	var x149 uint32
	x149, x148 = bits.Mul32(x132, 0xffffffff)
	var x150 uint32
	var x151 uint32
	x151, x150 = bits.Mul32(x132, 0xffffffff)
	var x152 uint32
	var x153 uint32
	x153, x152 = bits.Mul32(x132, 0xffffffff)
	var x154 uint32
	var x155 uint32
	x155, x154 = bits.Mul32(x132, 0xffffffff)
	var x156 uint32
	var x157 uint1
	x156, x157 = addcarryxU32(x155, x152, 0x0)
	var x158 uint32
	var x159 uint1
	x158, x159 = addcarryxU32(x153, x150, x157)
	var x161 uint1
	_, x161 = addcarryxU32(x132, x154, 0x0)
	var x162 uint32
	var x163 uint1
	x162, x163 = addcarryxU32(x134, x156, x161)
	var x164 uint32
	var x165 uint1
	x164, x165 = addcarryxU32(x136, x158, x163)
	var x166 uint32
	var x167 uint1
	x166, x167 = addcarryxU32(x138, (uint32(x159) + x151), x165)
	var x168 uint32
	var x169 uint1
	x168, x169 = addcarryxU32(x140, uint32(0x0), x167)
	var x170 uint32
	var x171 uint1
	x170, x171 = addcarryxU32(x142, uint32(0x0), x169)
	var x172 uint32
	var x173 uint1
	x172, x173 = addcarryxU32(x144, x132, x171)
	var x174 uint32
	var x175 uint1
	x174, x175 = addcarryxU32(x146, x148, x173)
	var x176 uint32
	var x177 uint1
	x176, x177 = addcarryxU32((uint32(x147) + uint32(x131)), x149, x175)
	var x178 uint32
	var x179 uint1
	x178, x179 = addcarryxU32(x162, arg1[5], 0x0)
	var x180 uint32
	var x181 uint1
	x180, x181 = addcarryxU32(x164, uint32(0x0), x179)
	var x182 uint32
	var x183 uint1
	x182, x183 = addcarryxU32(x166, uint32(0x0), x181)
	var x184 uint32
	var x185 uint1
	x184, x185 = addcarryxU32(x168, uint32(0x0), x183)
	var x186 uint32
	var x187 uint1
	x186, x187 = addcarryxU32(x170, uint32(0x0), x185)
	var x188 uint32
	var x189 uint1
	x188, x189 = addcarryxU32(x172, uint32(0x0), x187)
	var x190 uint32
	var x191 uint1
	x190, x191 = addcarryxU32(x174, uint32(0x0), x189)
	var x192 uint32
	var x193 uint1
	x192, x193 = addcarryxU32(x176, uint32(0x0), x191)
	var x194 uint32
	var x195 uint32
	x195, x194 = bits.Mul32(x178, 0xffffffff)
	var x196 uint32
	var x197 uint32
	x197, x196 = bits.Mul32(x178, 0xffffffff)
	var x198 uint32
	var x199 uint32
	x199, x198 = bits.Mul32(x178, 0xffffffff)
	var x200 uint32
	var x201 uint32
	x201, x200 = bits.Mul32(x178, 0xffffffff)
	var x202 uint32
	var x203 uint1
	x202, x203 = addcarryxU32(x201, x198, 0x0)
	var x204 uint32
	var x205 uint1
	x204, x205 = addcarryxU32(x199, x196, x203)
	var x207 uint1
	_, x207 = addcarryxU32(x178, x200, 0x0)
	var x208 uint32
	var x209 uint1
	x208, x209 = addcarryxU32(x180, x202, x207)
	var x210 uint32
	var x211 uint1
	x210, x211 = addcarryxU32(x182, x204, x209)
	var x212 uint32
	var x213 uint1
	x212, x213 = addcarryxU32(x184, (uint32(x205) + x197), x211)
	var x214 uint32
	var x215 uint1
	x214, x215 = addcarryxU32(x186, uint32(0x0), x213)
	var x216 uint32
	var x217 uint1
	x216, x217 = addcarryxU32(x188, uint32(0x0), x215)
	var x218 uint32
	var x219 uint1
	x218, x219 = addcarryxU32(x190, x178, x217)
	var x220 uint32
	var x221 uint1
	x220, x221 = addcarryxU32(x192, x194, x219)
	var x222 uint32
	var x223 uint1
	x222, x223 = addcarryxU32((uint32(x193) + uint32(x177)), x195, x221)
	var x224 uint32
	var x225 uint1
	x224, x225 = addcarryxU32(x208, arg1[6], 0x0)
	var x226 uint32
	var x227 uint1
	x226, x227 = addcarryxU32(x210, uint32(0x0), x225)
	var x228 uint32
	var x229 uint1
	x228, x229 = addcarryxU32(x212, uint32(0x0), x227)
	var x230 uint32
	var x231 uint1
	x230, x231 = addcarryxU32(x214, uint32(0x0), x229)
	var x232 uint32
	var x233 uint1
	x232, x233 = addcarryxU32(x216, uint32(0x0), x231)
	var x234 uint32
	var x235 uint1
	x234, x235 = addcarryxU32(x218, uint32(0x0), x233)
	var x236 uint32
	var x237 uint1
	x236, x237 = addcarryxU32(x220, uint32(0x0), x235)
	var x238 uint32
	var x239 uint1
	x238, x239 = addcarryxU32(x222, uint32(0x0), x237)
	var x240 uint32
	var x241 uint32
	x241, x240 = bits.Mul32(x224, 0xffffffff)
	var x242 uint32
	var x243 uint32
	x243, x242 = bits.Mul32(x224, 0xffffffff)
	var x244 uint32
	var x245 uint32
	x245, x244 = bits.Mul32(x224, 0xffffffff)
	var x246 uint32
	var x247 uint32
	x247, x246 = bits.Mul32(x224, 0xffffffff)
	var x248 uint32
	var x249 uint1
	x248, x249 = addcarryxU32(x247, x244, 0x0)
	var x250 uint32
	var x251 uint1
	x250, x251 = addcarryxU32(x245, x242, x249)
	var x253 uint1
	_, x253 = addcarryxU32(x224, x246, 0x0)
	var x254 uint32
	var x255 uint1
	x254, x255 = addcarryxU32(x226, x248, x253)
	var x256 uint32
	var x257 uint1
	x256, x257 = addcarryxU32(x228, x250, x255)
	var x258 uint32
	var x259 uint1
	x258, x259 = addcarryxU32(x230, (uint32(x251) + x243), x257)
	var x260 uint32
	var x261 uint1
	x260, x261 = addcarryxU32(x232, uint32(0x0), x259)
	var x262 uint32
	var x263 uint1
	x262, x263 = addcarryxU32(x234, uint32(0x0), x261)
	var x264 uint32
	var x265 uint1
	x264, x265 = addcarryxU32(x236, x224, x263)
	var x266 uint32
	var x267 uint1
	x266, x267 = addcarryxU32(x238, x240, x265)
	var x268 uint32
	var x269 uint1
	x268, x269 = addcarryxU32((uint32(x239) + uint32(x223)), x241, x267)
	var x270 uint32
	var x271 uint1
	x270, x271 = addcarryxU32(x254, arg1[7], 0x0)
	var x272 uint32
	var x273 uint1
	x272, x273 = addcarryxU32(x256, uint32(0x0), x271)
	var x274 uint32
	var x275 uint1
	x274, x275 = addcarryxU32(x258, uint32(0x0), x273)
	var x276 uint32
	var x277 uint1
	x276, x277 = addcarryxU32(x260, uint32(0x0), x275)
	var x278 uint32
	var x279 uint1
	x278, x279 = addcarryxU32(x262, uint32(0x0), x277)
	var x280 uint32
	var x281 uint1
	x280, x281 = addcarryxU32(x264, uint32(0x0), x279)
	var x282 uint32
	var x283 uint1
	x282, x283 = addcarryxU32(x266, uint32(0x0), x281)
	var x284 uint32
	var x285 uint1
	x284, x285 = addcarryxU32(x268, uint32(0x0), x283)
	var x286 uint32
	var x287 uint32
	x287, x286 = bits.Mul32(x270, 0xffffffff)
	var x288 uint32
	var x289 uint32
	x289, x288 = bits.Mul32(x270, 0xffffffff)
	var x290 uint32
	var x291 uint32
	x291, x290 = bits.Mul32(x270, 0xffffffff)
	var x292 uint32
	var x293 uint32
	x293, x292 = bits.Mul32(x270, 0xffffffff)
	var x294 uint32
	var x295 uint1
	x294, x295 = addcarryxU32(x293, x290, 0x0)
	var x296 uint32
	var x297 uint1
	x296, x297 = addcarryxU32(x291, x288, x295)
	var x299 uint1
	_, x299 = addcarryxU32(x270, x292, 0x0)
	var x300 uint32
	var x301 uint1
	x300, x301 = addcarryxU32(x272, x294, x299)
	var x302 uint32
	var x303 uint1
	x302, x303 = addcarryxU32(x274, x296, x301)
	var x304 uint32
	var x305 uint1
	x304, x305 = addcarryxU32(x276, (uint32(x297) + x289), x303)
	var x306 uint32
	var x307 uint1
	x306, x307 = addcarryxU32(x278, uint32(0x0), x305)
	var x308 uint32
	var x309 uint1
	x308, x309 = addcarryxU32(x280, uint32(0x0), x307)
	var x310 uint32
	var x311 uint1
	x310, x311 = addcarryxU32(x282, x270, x309)
	var x312 uint32
	var x313 uint1
	x312, x313 = addcarryxU32(x284, x286, x311)
	var x314 uint32
	var x315 uint1
	x314, x315 = addcarryxU32((uint32(x285) + uint32(x269)), x287, x313)
	var x316 uint32
	var x317 uint1
	x316, x317 = subborrowxU32(x300, 0xffffffff, 0x0)
	var x318 uint32
	var x319 uint1
	x318, x319 = subborrowxU32(x302, 0xffffffff, x317)
	var x320 uint32
	var x321 uint1
	x320, x321 = subborrowxU32(x304, 0xffffffff, x319)
	var x322 uint32
	var x323 uint1
	x322, x323 = subborrowxU32(x306, uint32(0x0), x321)
	var x324 uint32
	var x325 uint1
	x324, x325 = subborrowxU32(x308, uint32(0x0), x323)
	var x326 uint32
	var x327 uint1
	x326, x327 = subborrowxU32(x310, uint32(0x0), x325)
	var x328 uint32
	var x329 uint1
	x328, x329 = subborrowxU32(x312, uint32(0x1), x327)
	var x330 uint32
	var x331 uint1
	x330, x331 = subborrowxU32(x314, 0xffffffff, x329)
	var x333 uint1
	_, x333 = subborrowxU32(uint32(x315), uint32(0x0), x331)
	var x334 uint32
	cmovznzU32(&x334, x333, x316, x300)
	var x335 uint32
	cmovznzU32(&x335, x333, x318, x302)
	var x336 uint32
	cmovznzU32(&x336, x333, x320, x304)
	var x337 uint32
	cmovznzU32(&x337, x333, x322, x306)
	var x338 uint32
	cmovznzU32(&x338, x333, x324, x308)
	var x339 uint32
	cmovznzU32(&x339, x333, x326, x310)
	var x340 uint32
	cmovznzU32(&x340, x333, x328, x312)
	var x341 uint32
	cmovznzU32(&x341, x333, x330, x314)
	out1[0] = x334
	out1[1] = x335
	out1[2] = x336
	out1[3] = x337
	out1[4] = x338
	out1[5] = x339
	out1[6] = x340
	out1[7] = x341
}

// ToMontgomery translates a field element into the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = eval arg1 mod m
//   0 ≤ eval out1 < m
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func ToMontgomery(out1 *[8]uint32, arg1 *[8]uint32) {
	x1 := arg1[1]
	x2 := arg1[2]
	x3 := arg1[3]
	x4 := arg1[4]
	x5 := arg1[5]
	x6 := arg1[6]
	x7 := arg1[7]
	x8 := arg1[0]
	var x9 uint32
	var x10 uint32
	x10, x9 = bits.Mul32(x8, 0x4)
	var x11 uint32
	var x12 uint32
	x12, x11 = bits.Mul32(x8, 0xfffffffd)
	var x13 uint32
	var x14 uint32
	x14, x13 = bits.Mul32(x8, 0xffffffff)
	var x15 uint32
	var x16 uint32
	x16, x15 = bits.Mul32(x8, 0xfffffffe)
	var x17 uint32
	var x18 uint32
	x18, x17 = bits.Mul32(x8, 0xfffffffb)
	var x19 uint32
	var x20 uint32
	x20, x19 = bits.Mul32(x8, 0xffffffff)
	var x21 uint32
	var x22 uint32
	x22, x21 = bits.Mul32(x8, 0x3)
	var x23 uint32
	var x24 uint1
	x23, x24 = addcarryxU32(x20, x17, 0x0)
	var x25 uint32
	var x26 uint1
	x25, x26 = addcarryxU32(x18, x15, x24)
	var x27 uint32
	var x28 uint1
	x27, x28 = addcarryxU32(x16, x13, x26)
	var x29 uint32
	var x30 uint1
	x29, x30 = addcarryxU32(x14, x11, x28)
	var x31 uint32
	var x32 uint1
	x31, x32 = addcarryxU32(x12, x9, x30)
	var x33 uint32
	var x34 uint32
	x34, x33 = bits.Mul32(x21, 0xffffffff)
	var x35 uint32
	var x36 uint32
	x36, x35 = bits.Mul32(x21, 0xffffffff)
	var x37 uint32
	var x38 uint32
	x38, x37 = bits.Mul32(x21, 0xffffffff)
	var x39 uint32
	var x40 uint32
	x40, x39 = bits.Mul32(x21, 0xffffffff)
	var x41 uint32
	var x42 uint1
	x41, x42 = addcarryxU32(x40, x37, 0x0)
	var x43 uint32
	var x44 uint1
	x43, x44 = addcarryxU32(x38, x35, x42)
	var x46 uint1
	_, x46 = addcarryxU32(x21, x39, 0x0)
	var x47 uint32
	var x48 uint1
	x47, x48 = addcarryxU32(x22, x41, x46)
	var x49 uint32
	var x50 uint1
	x49, x50 = addcarryxU32(x19, x43, x48)
	var x51 uint32
	var x52 uint1
	x51, x52 = addcarryxU32(x23, (uint32(x44) + x36), x50)
	var x53 uint32
	var x54 uint1
	x53, x54 = addcarryxU32(x25, uint32(0x0), x52)
	var x55 uint32
	var x56 uint1
	x55, x56 = addcarryxU32(x27, uint32(0x0), x54)
	var x57 uint32
	var x58 uint1
	x57, x58 = addcarryxU32(x29, x21, x56)
	var x59 uint32
	var x60 uint1
	x59, x60 = addcarryxU32(x31, x33, x58)
	var x61 uint32
	var x62 uint1
	x61, x62 = addcarryxU32((uint32(x32) + x10), x34, x60)
	var x63 uint32
	var x64 uint32
	x64, x63 = bits.Mul32(x1, 0x4)
	var x65 uint32
	var x66 uint32
	x66, x65 = bits.Mul32(x1, 0xfffffffd)
	var x67 uint32
	var x68 uint32
	x68, x67 = bits.Mul32(x1, 0xffffffff)
	var x69 uint32
	var x70 uint32
	x70, x69 = bits.Mul32(x1, 0xfffffffe)
	var x71 uint32
	var x72 uint32
	x72, x71 = bits.Mul32(x1, 0xfffffffb)
	var x73 uint32
	var x74 uint32
	x74, x73 = bits.Mul32(x1, 0xffffffff)
	var x75 uint32
	var x76 uint32
	x76, x75 = bits.Mul32(x1, 0x3)
	var x77 uint32
	var x78 uint1
	x77, x78 = addcarryxU32(x74, x71, 0x0)
	var x79 uint32
	var x80 uint1
	x79, x80 = addcarryxU32(x72, x69, x78)
	var x81 uint32
	var x82 uint1
	x81, x82 = addcarryxU32(x70, x67, x80)
	var x83 uint32
	var x84 uint1
	x83, x84 = addcarryxU32(x68, x65, x82)
	var x85 uint32
	var x86 uint1
	x85, x86 = addcarryxU32(x66, x63, x84)
	var x87 uint32
	var x88 uint1
	x87, x88 = addcarryxU32(x47, x75, 0x0)
	var x89 uint32
	var x90 uint1
	x89, x90 = addcarryxU32(x49, x76, x88)
	var x91 uint32
	var x92 uint1
	x91, x92 = addcarryxU32(x51, x73, x90)
	var x93 uint32
	var x94 uint1
	x93, x94 = addcarryxU32(x53, x77, x92)
	var x95 uint32
	var x96 uint1
	x95, x96 = addcarryxU32(x55, x79, x94)
	var x97 uint32
	var x98 uint1
	x97, x98 = addcarryxU32(x57, x81, x96)
	var x99 uint32
	var x100 uint1
	x99, x100 = addcarryxU32(x59, x83, x98)
	var x101 uint32
	var x102 uint1
	x101, x102 = addcarryxU32(x61, x85, x100)
	var x103 uint32
	var x104 uint32
	x104, x103 = bits.Mul32(x87, 0xffffffff)
	var x105 uint32
	var x106 uint32
	x106, x105 = bits.Mul32(x87, 0xffffffff)
	var x107 uint32
	var x108 uint32
	x108, x107 = bits.Mul32(x87, 0xffffffff)
	var x109 uint32
	var x110 uint32
	x110, x109 = bits.Mul32(x87, 0xffffffff)
	var x111 uint32
	var x112 uint1
	x111, x112 = addcarryxU32(x110, x107, 0x0)
	var x113 uint32
	var x114 uint1
	x113, x114 = addcarryxU32(x108, x105, x112)
	var x116 uint1
	_, x116 = addcarryxU32(x87, x109, 0x0)
	var x117 uint32
	var x118 uint1
	x117, x118 = addcarryxU32(x89, x111, x116)
	var x119 uint32
	var x120 uint1
	x119, x120 = addcarryxU32(x91, x113, x118)
	var x121 uint32
	var x122 uint1
	x121, x122 = addcarryxU32(x93, (uint32(x114) + x106), x120)
	var x123 uint32
	var x124 uint1
	x123, x124 = addcarryxU32(x95, uint32(0x0), x122)
	var x125 uint32
	var x126 uint1
	x125, x126 = addcarryxU32(x97, uint32(0x0), x124)
	var x127 uint32
	var x128 uint1
	x127, x128 = addcarryxU32(x99, x87, x126)
	var x129 uint32
	var x130 uint1
	x129, x130 = addcarryxU32(x101, x103, x128)
	var x131 uint32
	var x132 uint1
	x131, x132 = addcarryxU32(((uint32(x102) + uint32(x62)) + (uint32(x86) + x64)), x104, x130)
	var x133 uint32
	var x134 uint32
	x134, x133 = bits.Mul32(x2, 0x4)
	var x135 uint32
	var x136 uint32
	x136, x135 = bits.Mul32(x2, 0xfffffffd)
	var x137 uint32
	var x138 uint32
	x138, x137 = bits.Mul32(x2, 0xffffffff)
	var x139 uint32
	var x140 uint32
	x140, x139 = bits.Mul32(x2, 0xfffffffe)
	var x141 uint32
	var x142 uint32
	x142, x141 = bits.Mul32(x2, 0xfffffffb)
	var x143 uint32
	var x144 uint32
	x144, x143 = bits.Mul32(x2, 0xffffffff)
	var x145 uint32
	var x146 uint32
	x146, x145 = bits.Mul32(x2, 0x3)
	var x147 uint32
	var x148 uint1
	x147, x148 = addcarryxU32(x144, x141, 0x0)
	var x149 uint32
	var x150 uint1
	x149, x150 = addcarryxU32(x142, x139, x148)
	var x151 uint32
	var x152 uint1
	x151, x152 = addcarryxU32(x140, x137, x150)
	var x153 uint32
	var x154 uint1
	x153, x154 = addcarryxU32(x138, x135, x152)
	var x155 uint32
	var x156 uint1
	x155, x156 = addcarryxU32(x136, x133, x154)
	var x157 uint32
	var x158 uint1
	x157, x158 = addcarryxU32(x117, x145, 0x0)
	var x159 uint32
	var x160 uint1
	x159, x160 = addcarryxU32(x119, x146, x158)
	var x161 uint32
	var x162 uint1
	x161, x162 = addcarryxU32(x121, x143, x160)
	var x163 uint32
	var x164 uint1
	x163, x164 = addcarryxU32(x123, x147, x162)
	var x165 uint32
	var x166 uint1
	x165, x166 = addcarryxU32(x125, x149, x164)
	var x167 uint32
	var x168 uint1
	x167, x168 = addcarryxU32(x127, x151, x166)
	var x169 uint32
	var x170 uint1
	x169, x170 = addcarryxU32(x129, x153, x168)
	var x171 uint32
	var x172 uint1
	x171, x172 = addcarryxU32(x131, x155, x170)
	var x173 uint32
	var x174 uint32
	x174, x173 = bits.Mul32(x157, 0xffffffff)
	var x175 uint32
	var x176 uint32
	x176, x175 = bits.Mul32(x157, 0xffffffff)
	var x177 uint32
	var x178 uint32
	x178, x177 = bits.Mul32(x157, 0xffffffff)
	var x179 uint32
	var x180 uint32
	x180, x179 = bits.Mul32(x157, 0xffffffff)
	var x181 uint32
	var x182 uint1
	x181, x182 = addcarryxU32(x180, x177, 0x0)
	var x183 uint32
	var x184 uint1
	x183, x184 = addcarryxU32(x178, x175, x182)
	var x186 uint1
	_, x186 = addcarryxU32(x157, x179, 0x0)
	var x187 uint32
	var x188 uint1
	x187, x188 = addcarryxU32(x159, x181, x186)
	var x189 uint32
	var x190 uint1
	x189, x190 = addcarryxU32(x161, x183, x188)
	var x191 uint32
	var x192 uint1
	x191, x192 = addcarryxU32(x163, (uint32(x184) + x176), x190)
	var x193 uint32
	var x194 uint1
	x193, x194 = addcarryxU32(x165, uint32(0x0), x192)
	var x195 uint32
	var x196 uint1
	x195, x196 = addcarryxU32(x167, uint32(0x0), x194)
	var x197 uint32
	var x198 uint1
	x197, x198 = addcarryxU32(x169, x157, x196)
	var x199 uint32
	var x200 uint1
	x199, x200 = addcarryxU32(x171, x173, x198)
	var x201 uint32
	var x202 uint1
	x201, x202 = addcarryxU32(((uint32(x172) + uint32(x132)) + (uint32(x156) + x134)), x174, x200)
	var x203 uint32
	var x204 uint32
	x204, x203 = bits.Mul32(x3, 0x4)
	var x205 uint32
	var x206 uint32
	x206, x205 = bits.Mul32(x3, 0xfffffffd)
	var x207 uint32
	var x208 uint32
	x208, x207 = bits.Mul32(x3, 0xffffffff)
	var x209 uint32
	var x210 uint32
	x210, x209 = bits.Mul32(x3, 0xfffffffe)
	var x211 uint32
	var x212 uint32
	x212, x211 = bits.Mul32(x3, 0xfffffffb)
	var x213 uint32
	var x214 uint32
	x214, x213 = bits.Mul32(x3, 0xffffffff)
	var x215 uint32
	var x216 uint32
	x216, x215 = bits.Mul32(x3, 0x3)
	var x217 uint32
	var x218 uint1
	x217, x218 = addcarryxU32(x214, x211, 0x0)
	var x219 uint32
	var x220 uint1
	x219, x220 = addcarryxU32(x212, x209, x218)
	var x221 uint32
	var x222 uint1
	x221, x222 = addcarryxU32(x210, x207, x220)
	var x223 uint32
	var x224 uint1
	x223, x224 = addcarryxU32(x208, x205, x222)
	var x225 uint32
	var x226 uint1
	x225, x226 = addcarryxU32(x206, x203, x224)
	var x227 uint32
	var x228 uint1
	x227, x228 = addcarryxU32(x187, x215, 0x0)
	var x229 uint32
	var x230 uint1
	x229, x230 = addcarryxU32(x189, x216, x228)
	var x231 uint32
	var x232 uint1
	x231, x232 = addcarryxU32(x191, x213, x230)
	var x233 uint32
	var x234 uint1
	x233, x234 = addcarryxU32(x193, x217, x232)
	var x235 uint32
	var x236 uint1
	x235, x236 = addcarryxU32(x195, x219, x234)
	var x237 uint32
	var x238 uint1
	x237, x238 = addcarryxU32(x197, x221, x236)
	var x239 uint32
	var x240 uint1
	x239, x240 = addcarryxU32(x199, x223, x238)
	var x241 uint32
	var x242 uint1
	x241, x242 = addcarryxU32(x201, x225, x240)
	var x243 uint32
	var x244 uint32
	x244, x243 = bits.Mul32(x227, 0xffffffff)
	var x245 uint32
	var x246 uint32
	x246, x245 = bits.Mul32(x227, 0xffffffff)
	var x247 uint32
	var x248 uint32
	x248, x247 = bits.Mul32(x227, 0xffffffff)
	var x249 uint32
	var x250 uint32
	x250, x249 = bits.Mul32(x227, 0xffffffff)
	var x251 uint32
	var x252 uint1
	x251, x252 = addcarryxU32(x250, x247, 0x0)
	var x253 uint32
	var x254 uint1
	x253, x254 = addcarryxU32(x248, x245, x252)
	var x256 uint1
	_, x256 = addcarryxU32(x227, x249, 0x0)
	var x257 uint32
	var x258 uint1
	x257, x258 = addcarryxU32(x229, x251, x256)
	var x259 uint32
	var x260 uint1
	x259, x260 = addcarryxU32(x231, x253, x258)
	var x261 uint32
	var x262 uint1
	x261, x262 = addcarryxU32(x233, (uint32(x254) + x246), x260)
	var x263 uint32
	var x264 uint1
	x263, x264 = addcarryxU32(x235, uint32(0x0), x262)
	var x265 uint32
	var x266 uint1
	x265, x266 = addcarryxU32(x237, uint32(0x0), x264)
	var x267 uint32
	var x268 uint1
	x267, x268 = addcarryxU32(x239, x227, x266)
	var x269 uint32
	var x270 uint1
	x269, x270 = addcarryxU32(x241, x243, x268)
	var x271 uint32
	var x272 uint1
	x271, x272 = addcarryxU32(((uint32(x242) + uint32(x202)) + (uint32(x226) + x204)), x244, x270)
	var x273 uint32
	var x274 uint32
	x274, x273 = bits.Mul32(x4, 0x4)
	var x275 uint32
	var x276 uint32
	x276, x275 = bits.Mul32(x4, 0xfffffffd)
	var x277 uint32
	var x278 uint32
	x278, x277 = bits.Mul32(x4, 0xffffffff)
	var x279 uint32
	var x280 uint32
	x280, x279 = bits.Mul32(x4, 0xfffffffe)
	var x281 uint32
	var x282 uint32
	x282, x281 = bits.Mul32(x4, 0xfffffffb)
	var x283 uint32
	var x284 uint32
	x284, x283 = bits.Mul32(x4, 0xffffffff)
	var x285 uint32
	var x286 uint32
	x286, x285 = bits.Mul32(x4, 0x3)
	var x287 uint32
	var x288 uint1
	x287, x288 = addcarryxU32(x284, x281, 0x0)
	var x289 uint32
	var x290 uint1
	x289, x290 = addcarryxU32(x282, x279, x288)
	var x291 uint32
	var x292 uint1
	x291, x292 = addcarryxU32(x280, x277, x290)
	var x293 uint32
	var x294 uint1
	x293, x294 = addcarryxU32(x278, x275, x292)
	var x295 uint32
	var x296 uint1
	x295, x296 = addcarryxU32(x276, x273, x294)
	var x297 uint32
	var x298 uint1
	x297, x298 = addcarryxU32(x257, x285, 0x0)
	var x299 uint32
	var x300 uint1
	x299, x300 = addcarryxU32(x259, x286, x298)
	var x301 uint32
	var x302 uint1
	x301, x302 = addcarryxU32(x261, x283, x300)
	var x303 uint32
	var x304 uint1
	x303, x304 = addcarryxU32(x263, x287, x302)
	var x305 uint32
	var x306 uint1
	x305, x306 = addcarryxU32(x265, x289, x304)
	var x307 uint32
	var x308 uint1
	x307, x308 = addcarryxU32(x267, x291, x306)
	var x309 uint32
	var x310 uint1
	x309, x310 = addcarryxU32(x269, x293, x308)
	var x311 uint32
	var x312 uint1
	x311, x312 = addcarryxU32(x271, x295, x310)
	var x313 uint32
	var x314 uint32
	x314, x313 = bits.Mul32(x297, 0xffffffff)
	var x315 uint32
	var x316 uint32
	x316, x315 = bits.Mul32(x297, 0xffffffff)
	var x317 uint32
	var x318 uint32
	x318, x317 = bits.Mul32(x297, 0xffffffff)
	var x319 uint32
	var x320 uint32
	x320, x319 = bits.Mul32(x297, 0xffffffff)
	var x321 uint32
	var x322 uint1
	x321, x322 = addcarryxU32(x320, x317, 0x0)
	var x323 uint32
	var x324 uint1
	x323, x324 = addcarryxU32(x318, x315, x322)
	var x326 uint1
	_, x326 = addcarryxU32(x297, x319, 0x0)
	var x327 uint32
	var x328 uint1
	x327, x328 = addcarryxU32(x299, x321, x326)
	var x329 uint32
	var x330 uint1
	x329, x330 = addcarryxU32(x301, x323, x328)
	var x331 uint32
	var x332 uint1
	x331, x332 = addcarryxU32(x303, (uint32(x324) + x316), x330)
	var x333 uint32
	var x334 uint1
	x333, x334 = addcarryxU32(x305, uint32(0x0), x332)
	var x335 uint32
	var x336 uint1
	x335, x336 = addcarryxU32(x307, uint32(0x0), x334)
	var x337 uint32
	var x338 uint1
	x337, x338 = addcarryxU32(x309, x297, x336)
	var x339 uint32
	var x340 uint1
	x339, x340 = addcarryxU32(x311, x313, x338)
	var x341 uint32
	var x342 uint1
	x341, x342 = addcarryxU32(((uint32(x312) + uint32(x272)) + (uint32(x296) + x274)), x314, x340)
	var x343 uint32
	var x344 uint32
	x344, x343 = bits.Mul32(x5, 0x4)
	var x345 uint32
	var x346 uint32
	x346, x345 = bits.Mul32(x5, 0xfffffffd)
	var x347 uint32
	var x348 uint32
	x348, x347 = bits.Mul32(x5, 0xffffffff)
	var x349 uint32
	var x350 uint32
	x350, x349 = bits.Mul32(x5, 0xfffffffe)
	var x351 uint32
	var x352 uint32
	x352, x351 = bits.Mul32(x5, 0xfffffffb)
	var x353 uint32
	var x354 uint32
	x354, x353 = bits.Mul32(x5, 0xffffffff)
	var x355 uint32
	var x356 uint32
	x356, x355 = bits.Mul32(x5, 0x3)
	var x357 uint32
	var x358 uint1
	x357, x358 = addcarryxU32(x354, x351, 0x0)
	var x359 uint32
	var x360 uint1
	x359, x360 = addcarryxU32(x352, x349, x358)
	var x361 uint32
	var x362 uint1
	x361, x362 = addcarryxU32(x350, x347, x360)
	var x363 uint32
	var x364 uint1
	x363, x364 = addcarryxU32(x348, x345, x362)
	var x365 uint32
	var x366 uint1
	x365, x366 = addcarryxU32(x346, x343, x364)
	var x367 uint32
	var x368 uint1
	x367, x368 = addcarryxU32(x327, x355, 0x0)
	var x369 uint32
	var x370 uint1
	x369, x370 = addcarryxU32(x329, x356, x368)
	var x371 uint32
	var x372 uint1
	x371, x372 = addcarryxU32(x331, x353, x370)
	var x373 uint32
	var x374 uint1
	x373, x374 = addcarryxU32(x333, x357, x372)
	var x375 uint32
	var x376 uint1
	x375, x376 = addcarryxU32(x335, x359, x374)
	var x377 uint32
	var x378 uint1
	x377, x378 = addcarryxU32(x337, x361, x376)
	var x379 uint32
	var x380 uint1
	x379, x380 = addcarryxU32(x339, x363, x378)
	var x381 uint32
	var x382 uint1
	x381, x382 = addcarryxU32(x341, x365, x380)
	var x383 uint32
	var x384 uint32
	x384, x383 = bits.Mul32(x367, 0xffffffff)
	var x385 uint32
	var x386 uint32
	x386, x385 = bits.Mul32(x367, 0xffffffff)
	var x387 uint32
	var x388 uint32
	x388, x387 = bits.Mul32(x367, 0xffffffff)
	var x389 uint32
	var x390 uint32
	x390, x389 = bits.Mul32(x367, 0xffffffff)
	var x391 uint32
	var x392 uint1
	x391, x392 = addcarryxU32(x390, x387, 0x0)
	var x393 uint32
	var x394 uint1
	x393, x394 = addcarryxU32(x388, x385, x392)
	var x396 uint1
	_, x396 = addcarryxU32(x367, x389, 0x0)
	var x397 uint32
	var x398 uint1
	x397, x398 = addcarryxU32(x369, x391, x396)
	var x399 uint32
	var x400 uint1
	x399, x400 = addcarryxU32(x371, x393, x398)
	var x401 uint32
	var x402 uint1
	x401, x402 = addcarryxU32(x373, (uint32(x394) + x386), x400)
	var x403 uint32
	var x404 uint1
	x403, x404 = addcarryxU32(x375, uint32(0x0), x402)
	var x405 uint32
	var x406 uint1
	x405, x406 = addcarryxU32(x377, uint32(0x0), x404)
	var x407 uint32
	var x408 uint1
	x407, x408 = addcarryxU32(x379, x367, x406)
	var x409 uint32
	var x410 uint1
	x409, x410 = addcarryxU32(x381, x383, x408)
	var x411 uint32
	var x412 uint1
	x411, x412 = addcarryxU32(((uint32(x382) + uint32(x342)) + (uint32(x366) + x344)), x384, x410)
	var x413 uint32
	var x414 uint32
	x414, x413 = bits.Mul32(x6, 0x4)
	var x415 uint32
	var x416 uint32
	x416, x415 = bits.Mul32(x6, 0xfffffffd)
	var x417 uint32
	var x418 uint32
	x418, x417 = bits.Mul32(x6, 0xffffffff)
	var x419 uint32
	var x420 uint32
	x420, x419 = bits.Mul32(x6, 0xfffffffe)
	var x421 uint32
	var x422 uint32
	x422, x421 = bits.Mul32(x6, 0xfffffffb)
	var x423 uint32
	var x424 uint32
	x424, x423 = bits.Mul32(x6, 0xffffffff)
	var x425 uint32
	var x426 uint32
	x426, x425 = bits.Mul32(x6, 0x3)
	var x427 uint32
	var x428 uint1
	x427, x428 = addcarryxU32(x424, x421, 0x0)
	var x429 uint32
	var x430 uint1
	x429, x430 = addcarryxU32(x422, x419, x428)
	var x431 uint32
	var x432 uint1
	x431, x432 = addcarryxU32(x420, x417, x430)
	var x433 uint32
	var x434 uint1
	x433, x434 = addcarryxU32(x418, x415, x432)
	var x435 uint32
	var x436 uint1
	x435, x436 = addcarryxU32(x416, x413, x434)
	var x437 uint32
	var x438 uint1
	x437, x438 = addcarryxU32(x397, x425, 0x0)
	var x439 uint32
	var x440 uint1
	x439, x440 = addcarryxU32(x399, x426, x438)
	var x441 uint32
	var x442 uint1
	x441, x442 = addcarryxU32(x401, x423, x440)
	var x443 uint32
	var x444 uint1
	x443, x444 = addcarryxU32(x403, x427, x442)
	var x445 uint32
	var x446 uint1
	x445, x446 = addcarryxU32(x405, x429, x444)
	var x447 uint32
	var x448 uint1
	x447, x448 = addcarryxU32(x407, x431, x446)
	var x449 uint32
	var x450 uint1
	x449, x450 = addcarryxU32(x409, x433, x448)
	var x451 uint32
	var x452 uint1
	x451, x452 = addcarryxU32(x411, x435, x450)
	var x453 uint32
	var x454 uint32
	x454, x453 = bits.Mul32(x437, 0xffffffff)
	var x455 uint32
	var x456 uint32
	x456, x455 = bits.Mul32(x437, 0xffffffff)
	var x457 uint32
	var x458 uint32
	x458, x457 = bits.Mul32(x437, 0xffffffff)
	var x459 uint32
	var x460 uint32
	x460, x459 = bits.Mul32(x437, 0xffffffff)
	var x461 uint32
	var x462 uint1
	x461, x462 = addcarryxU32(x460, x457, 0x0)
	var x463 uint32
	var x464 uint1
	x463, x464 = addcarryxU32(x458, x455, x462)
	var x466 uint1
	_, x466 = addcarryxU32(x437, x459, 0x0)
	var x467 uint32
	var x468 uint1
	x467, x468 = addcarryxU32(x439, x461, x466)
	var x469 uint32
	var x470 uint1
	x469, x470 = addcarryxU32(x441, x463, x468)
	var x471 uint32
	var x472 uint1
	x471, x472 = addcarryxU32(x443, (uint32(x464) + x456), x470)
	var x473 uint32
	var x474 uint1
	x473, x474 = addcarryxU32(x445, uint32(0x0), x472)
	var x475 uint32
	var x476 uint1
	x475, x476 = addcarryxU32(x447, uint32(0x0), x474)
	var x477 uint32
	var x478 uint1
	x477, x478 = addcarryxU32(x449, x437, x476)
	var x479 uint32
	var x480 uint1
	x479, x480 = addcarryxU32(x451, x453, x478)
	var x481 uint32
	var x482 uint1
	x481, x482 = addcarryxU32(((uint32(x452) + uint32(x412)) + (uint32(x436) + x414)), x454, x480)
	var x483 uint32
	var x484 uint32
	x484, x483 = bits.Mul32(x7, 0x4)
	var x485 uint32
	var x486 uint32
	x486, x485 = bits.Mul32(x7, 0xfffffffd)
	var x487 uint32
	var x488 uint32
	x488, x487 = bits.Mul32(x7, 0xffffffff)
	var x489 uint32
	var x490 uint32
	x490, x489 = bits.Mul32(x7, 0xfffffffe)
	var x491 uint32
	var x492 uint32
	x492, x491 = bits.Mul32(x7, 0xfffffffb)
	var x493 uint32
	var x494 uint32
	x494, x493 = bits.Mul32(x7, 0xffffffff)
	var x495 uint32
	var x496 uint32
	x496, x495 = bits.Mul32(x7, 0x3)
	var x497 uint32
	var x498 uint1
	x497, x498 = addcarryxU32(x494, x491, 0x0)
	var x499 uint32
	var x500 uint1
	x499, x500 = addcarryxU32(x492, x489, x498)
	var x501 uint32
	var x502 uint1
	x501, x502 = addcarryxU32(x490, x487, x500)
	var x503 uint32
	var x504 uint1
	x503, x504 = addcarryxU32(x488, x485, x502)
	var x505 uint32
	var x506 uint1
	x505, x506 = addcarryxU32(x486, x483, x504)
	var x507 uint32
	var x508 uint1
	x507, x508 = addcarryxU32(x467, x495, 0x0)
	var x509 uint32
	var x510 uint1
	x509, x510 = addcarryxU32(x469, x496, x508)
	var x511 uint32
	var x512 uint1
	x511, x512 = addcarryxU32(x471, x493, x510)
	var x513 uint32
	var x514 uint1
	x513, x514 = addcarryxU32(x473, x497, x512)
	var x515 uint32
	var x516 uint1
	x515, x516 = addcarryxU32(x475, x499, x514)
	var x517 uint32
	var x518 uint1
	x517, x518 = addcarryxU32(x477, x501, x516)
	var x519 uint32
	var x520 uint1
	x519, x520 = addcarryxU32(x479, x503, x518)
	var x521 uint32
	var x522 uint1
	x521, x522 = addcarryxU32(x481, x505, x520)
	var x523 uint32
	var x524 uint32
	x524, x523 = bits.Mul32(x507, 0xffffffff)
	var x525 uint32
	var x526 uint32
	x526, x525 = bits.Mul32(x507, 0xffffffff)
	var x527 uint32
	var x528 uint32
	x528, x527 = bits.Mul32(x507, 0xffffffff)
	var x529 uint32
	var x530 uint32
	x530, x529 = bits.Mul32(x507, 0xffffffff)
	var x531 uint32
	var x532 uint1
	x531, x532 = addcarryxU32(x530, x527, 0x0)
	var x533 uint32
	var x534 uint1
	x533, x534 = addcarryxU32(x528, x525, x532)
	var x536 uint1
	_, x536 = addcarryxU32(x507, x529, 0x0)
	var x537 uint32
	var x538 uint1
	x537, x538 = addcarryxU32(x509, x531, x536)
	var x539 uint32
	var x540 uint1
	x539, x540 = addcarryxU32(x511, x533, x538)
	var x541 uint32
	var x542 uint1
	x541, x542 = addcarryxU32(x513, (uint32(x534) + x526), x540)
	var x543 uint32
	var x544 uint1
	x543, x544 = addcarryxU32(x515, uint32(0x0), x542)
	var x545 uint32
	var x546 uint1
	x545, x546 = addcarryxU32(x517, uint32(0x0), x544)
	var x547 uint32
	var x548 uint1
	x547, x548 = addcarryxU32(x519, x507, x546)
	var x549 uint32
	var x550 uint1
	x549, x550 = addcarryxU32(x521, x523, x548)
	var x551 uint32
	var x552 uint1
	x551, x552 = addcarryxU32(((uint32(x522) + uint32(x482)) + (uint32(x506) + x484)), x524, x550)
	var x553 uint32
	var x554 uint1
	x553, x554 = subborrowxU32(x537, 0xffffffff, 0x0)
	var x555 uint32
	var x556 uint1
	x555, x556 = subborrowxU32(x539, 0xffffffff, x554)
	var x557 uint32
	var x558 uint1
	x557, x558 = subborrowxU32(x541, 0xffffffff, x556)
	var x559 uint32
	var x560 uint1
	x559, x560 = subborrowxU32(x543, uint32(0x0), x558)
	var x561 uint32
	var x562 uint1
	x561, x562 = subborrowxU32(x545, uint32(0x0), x560)
	var x563 uint32
	var x564 uint1
	x563, x564 = subborrowxU32(x547, uint32(0x0), x562)
	var x565 uint32
	var x566 uint1
	x565, x566 = subborrowxU32(x549, uint32(0x1), x564)
	var x567 uint32
	var x568 uint1
	x567, x568 = subborrowxU32(x551, 0xffffffff, x566)
	var x570 uint1
	_, x570 = subborrowxU32(uint32(x552), uint32(0x0), x568)
	var x571 uint32
	cmovznzU32(&x571, x570, x553, x537)
	var x572 uint32
	cmovznzU32(&x572, x570, x555, x539)
	var x573 uint32
	cmovznzU32(&x573, x570, x557, x541)
	var x574 uint32
	cmovznzU32(&x574, x570, x559, x543)
	var x575 uint32
	cmovznzU32(&x575, x570, x561, x545)
	var x576 uint32
	cmovznzU32(&x576, x570, x563, x547)
	var x577 uint32
	cmovznzU32(&x577, x570, x565, x549)
	var x578 uint32
	cmovznzU32(&x578, x570, x567, x551)
	out1[0] = x571
	out1[1] = x572
	out1[2] = x573
	out1[3] = x574
	out1[4] = x575
	out1[5] = x576
	out1[6] = x577
	out1[7] = x578
}

// Nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [0x0 ~> 0xffffffff]
func Nonzero(out1 *uint32, arg1 *[8]uint32) {
	x1 := (arg1[0] | (arg1[1] | (arg1[2] | (arg1[3] | (arg1[4] | (arg1[5] | (arg1[6] | arg1[7])))))))
	*out1 = x1
}

// Selectznz is a multi-limb conditional select.
//
// Postconditions:
//   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3)
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func Selectznz(out1 *[8]uint32, arg1 uint1, arg2 *[8]uint32, arg3 *[8]uint32) {
	var x1 uint32
	cmovznzU32(&x1, arg1, arg2[0], arg3[0])
	var x2 uint32
	cmovznzU32(&x2, arg1, arg2[1], arg3[1])
	var x3 uint32
	cmovznzU32(&x3, arg1, arg2[2], arg3[2])
	var x4 uint32
	cmovznzU32(&x4, arg1, arg2[3], arg3[3])
	var x5 uint32
	cmovznzU32(&x5, arg1, arg2[4], arg3[4])
	var x6 uint32
	cmovznzU32(&x6, arg1, arg2[5], arg3[5])
	var x7 uint32
	cmovznzU32(&x7, arg1, arg2[6], arg3[6])
	var x8 uint32
	cmovznzU32(&x8, arg1, arg2[7], arg3[7])
	out1[0] = x1
	out1[1] = x2
	out1[2] = x3
	out1[3] = x4
	out1[4] = x5
	out1[5] = x6
	out1[6] = x7
	out1[7] = x8
}

// ToBytes serializes a field element NOT in the Montgomery domain to bytes in little-endian order.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..31]
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
func ToBytes(out1 *[32]uint8, arg1 *[8]uint32) {
	x1 := arg1[7]
	x2 := arg1[6]
	x3 := arg1[5]
	x4 := arg1[4]
	x5 := arg1[3]
	x6 := arg1[2]
	x7 := arg1[1]
	x8 := arg1[0]
	x9 := (uint8(x8) & 0xff)
	x10 := (x8 >> 8)
	x11 := (uint8(x10) & 0xff)
	x12 := (x10 >> 8)
	x13 := (uint8(x12) & 0xff)
	x14 := uint8((x12 >> 8))
	x15 := (uint8(x7) & 0xff)
	x16 := (x7 >> 8)
	x17 := (uint8(x16) & 0xff)
	x18 := (x16 >> 8)
	x19 := (uint8(x18) & 0xff)
	x20 := uint8((x18 >> 8))
	x21 := (uint8(x6) & 0xff)
	x22 := (x6 >> 8)
	x23 := (uint8(x22) & 0xff)
	x24 := (x22 >> 8)
	x25 := (uint8(x24) & 0xff)
	x26 := uint8((x24 >> 8))
	x27 := (uint8(x5) & 0xff)
	x28 := (x5 >> 8)
	x29 := (uint8(x28) & 0xff)
	x30 := (x28 >> 8)
	x31 := (uint8(x30) & 0xff)
	x32 := uint8((x30 >> 8))
	x33 := (uint8(x4) & 0xff)
	x34 := (x4 >> 8)
	x35 := (uint8(x34) & 0xff)
	x36 := (x34 >> 8)
	x37 := (uint8(x36) & 0xff)
	x38 := uint8((x36 >> 8))
	x39 := (uint8(x3) & 0xff)
	x40 := (x3 >> 8)
	x41 := (uint8(x40) & 0xff)
	x42 := (x40 >> 8)
	x43 := (uint8(x42) & 0xff)
	x44 := uint8((x42 >> 8))
	x45 := (uint8(x2) & 0xff)
	x46 := (x2 >> 8)
	x47 := (uint8(x46) & 0xff)
	x48 := (x46 >> 8)
	x49 := (uint8(x48) & 0xff)
	x50 := uint8((x48 >> 8))
	x51 := (uint8(x1) & 0xff)
	x52 := (x1 >> 8)
	x53 := (uint8(x52) & 0xff)
	x54 := (x52 >> 8)
	x55 := (uint8(x54) & 0xff)
	x56 := uint8((x54 >> 8))
	out1[0] = x9
	out1[1] = x11
	out1[2] = x13
	out1[3] = x14
	out1[4] = x15
	out1[5] = x17
	out1[6] = x19
	out1[7] = x20
	out1[8] = x21
	out1[9] = x23
	out1[10] = x25
	out1[11] = x26
	out1[12] = x27
	out1[13] = x29
	out1[14] = x31
	out1[15] = x32
	out1[16] = x33
	out1[17] = x35
	out1[18] = x37
	out1[19] = x38
	out1[20] = x39
	out1[21] = x41
	out1[22] = x43
	out1[23] = x44
	out1[24] = x45
	out1[25] = x47
	out1[26] = x49
	out1[27] = x50
	out1[28] = x51
	out1[29] = x53
	out1[30] = x55
	out1[31] = x56
}

// FromBytes deserializes a field element NOT in the Montgomery domain from bytes in little-endian order.
//
// Preconditions:
//   0 ≤ bytes_eval arg1 < m
// Postconditions:
//   eval out1 mod m = bytes_eval arg1 mod m
//   0 ≤ eval out1 < m
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func FromBytes(out1 *[8]uint32, arg1 *[32]uint8) {
	x1 := (uint32(arg1[31]) << 24)
	x2 := (uint32(arg1[30]) << 16)
	x3 := (uint32(arg1[29]) << 8)
	x4 := arg1[28]
	x5 := (uint32(arg1[27]) << 24)
	x6 := (uint32(arg1[26]) << 16)
	x7 := (uint32(arg1[25]) << 8)
	x8 := arg1[24]
	x9 := (uint32(arg1[23]) << 24)
	x10 := (uint32(arg1[22]) << 16)
	x11 := (uint32(arg1[21]) << 8)
	x12 := arg1[20]
	x13 := (uint32(arg1[19]) << 24)
	x14 := (uint32(arg1[18]) << 16)
	x15 := (uint32(arg1[17]) << 8)
	x16 := arg1[16]
	x17 := (uint32(arg1[15]) << 24)
	x18 := (uint32(arg1[14]) << 16)
	x19 := (uint32(arg1[13]) << 8)
	x20 := arg1[12]
	x21 := (uint32(arg1[11]) << 24)
	x22 := (uint32(arg1[10]) << 16)
	x23 := (uint32(arg1[9]) << 8)
	x24 := arg1[8]
	x25 := (uint32(arg1[7]) << 24)
	x26 := (uint32(arg1[6]) << 16)
	x27 := (uint32(arg1[5]) << 8)
	x28 := arg1[4]
	x29 := (uint32(arg1[3]) << 24)
	x30 := (uint32(arg1[2]) << 16)
	x31 := (uint32(arg1[1]) << 8)
	x32 := arg1[0]
	x33 := (x31 + uint32(x32))
	x34 := (x30 + x33)
	x35 := (x29 + x34)
	x36 := (x27 + uint32(x28))
	x37 := (x26 + x36)
	x38 := (x25 + x37)
	x39 := (x23 + uint32(x24))
	x40 := (x22 + x39)
	x41 := (x21 + x40)
	x42 := (x19 + uint32(x20))
	x43 := (x18 + x42)
	x44 := (x17 + x43)
	x45 := (x15 + uint32(x16))
	x46 := (x14 + x45)
	x47 := (x13 + x46)
	x48 := (x11 + uint32(x12))
	x49 := (x10 + x48)
	x50 := (x9 + x49)
	x51 := (x7 + uint32(x8))
	x52 := (x6 + x51)
	x53 := (x5 + x52)
	x54 := (x3 + uint32(x4))
	x55 := (x2 + x54)
	x56 := (x1 + x55)
	out1[0] = x35
	out1[1] = x38
	out1[2] = x41
	out1[3] = x44
	out1[4] = x47
	out1[5] = x50
	out1[6] = x53
	out1[7] = x56
}

// SetOne returns the field element one in the Montgomery domain.
//
// Postconditions:
//   eval (from_montgomery out1) mod m = 1 mod m
//   0 ≤ eval out1 < m
//
// Input Bounds:
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func SetOne(out1 *[8]uint32) {
	out1[0] = uint32(0x1)
	out1[1] = uint32(0x0)
	out1[2] = uint32(0x0)
	out1[3] = 0xffffffff
	out1[4] = 0xffffffff
	out1[5] = 0xffffffff
	out1[6] = 0xfffffffe
	out1[7] = uint32(0x0)
}

// Msat returns the saturated representation of the prime modulus.
//
// Postconditions:
//   twos_complement_eval out1 = m
//   0 ≤ eval out1 < m
//
// Input Bounds:
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func Msat(out1 *[9]uint32) {
	out1[0] = 0xffffffff
	out1[1] = 0xffffffff
	out1[2] = 0xffffffff
	out1[3] = uint32(0x0)
	out1[4] = uint32(0x0)
	out1[5] = uint32(0x0)
	out1[6] = uint32(0x1)
	out1[7] = 0xffffffff
	out1[8] = uint32(0x0)
}

// Divstep computes a divstep.
//
// Preconditions:
//   0 ≤ eval arg4 < m
//   0 ≤ eval arg5 < m
// Postconditions:
//   out1 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then 1 - arg1 else 1 + arg1)
//   twos_complement_eval out2 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then twos_complement_eval arg3 else twos_complement_eval arg2)
//   twos_complement_eval out3 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then ⌊(twos_complement_eval arg3 - twos_complement_eval arg2) / 2⌋ else ⌊(twos_complement_eval arg3 + (twos_complement_eval arg3 mod 2) * twos_complement_eval arg2) / 2⌋)
//   eval (from_montgomery out4) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (2 * eval (from_montgomery arg5)) mod m else (2 * eval (from_montgomery arg4)) mod m)
//   eval (from_montgomery out5) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (eval (from_montgomery arg4) - eval (from_montgomery arg4)) mod m else (eval (from_montgomery arg5) + (twos_complement_eval arg3 mod 2) * eval (from_montgomery arg4)) mod m)
//   0 ≤ eval out5 < m
//   0 ≤ eval out5 < m
//   0 ≤ eval out2 < m
//   0 ≤ eval out3 < m
//
// Input Bounds:
//   arg1: [0x0 ~> 0xffffffff]
//   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [0x0 ~> 0xffffffff]
//   out2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   out3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   out4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   out5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func Divstep(out1 *uint32, out2 *[9]uint32, out3 *[9]uint32, out4 *[8]uint32, out5 *[8]uint32, arg1 uint32, arg2 *[9]uint32, arg3 *[9]uint32, arg4 *[8]uint32, arg5 *[8]uint32) {
	var x1 uint32
	x1, _ = addcarryxU32((^arg1), uint32(0x1), 0x0)
	x3 := (uint1((x1 >> 31)) & (uint1(arg3[0]) & 0x1))
	var x4 uint32
	x4, _ = addcarryxU32((^arg1), uint32(0x1), 0x0)
	var x6 uint32
	cmovznzU32(&x6, x3, arg1, x4)
	var x7 uint32
	cmovznzU32(&x7, x3, arg2[0], arg3[0])
	var x8 uint32
	cmovznzU32(&x8, x3, arg2[1], arg3[1])
	var x9 uint32
	cmovznzU32(&x9, x3, arg2[2], arg3[2])
	var x10 uint32
	cmovznzU32(&x10, x3, arg2[3], arg3[3])
	var x11 uint32
	cmovznzU32(&x11, x3, arg2[4], arg3[4])
	var x12 uint32
	cmovznzU32(&x12, x3, arg2[5], arg3[5])
	var x13 uint32
	cmovznzU32(&x13, x3, arg2[6], arg3[6])
	var x14 uint32
	cmovznzU32(&x14, x3, arg2[7], arg3[7])
	var x15 uint32
	cmovznzU32(&x15, x3, arg2[8], arg3[8])
	var x16 uint32
	var x17 uint1
	x16, x17 = addcarryxU32(uint32(0x1), (^arg2[0]), 0x0)
	var x18 uint32
	var x19 uint1
	x18, x19 = addcarryxU32(uint32(0x0), (^arg2[1]), x17)
	var x20 uint32
	var x21 uint1
	x20, x21 = addcarryxU32(uint32(0x0), (^arg2[2]), x19)
	var x22 uint32
	var x23 uint1
	x22, x23 = addcarryxU32(uint32(0x0), (^arg2[3]), x21)
	var x24 uint32
	var x25 uint1
	x24, x25 = addcarryxU32(uint32(0x0), (^arg2[4]), x23)
	var x26 uint32
	var x27 uint1
	x26, x27 = addcarryxU32(uint32(0x0), (^arg2[5]), x25)
	var x28 uint32
	var x29 uint1
	x28, x29 = addcarryxU32(uint32(0x0), (^arg2[6]), x27)
	var x30 uint32
	var x31 uint1
	x30, x31 = addcarryxU32(uint32(0x0), (^arg2[7]), x29)
	var x32 uint32
	x32, _ = addcarryxU32(uint32(0x0), (^arg2[8]), x31)
	var x34 uint32
	cmovznzU32(&x34, x3, arg3[0], x16)
	var x35 uint32
	cmovznzU32(&x35, x3, arg3[1], x18)
	var x36 uint32
	cmovznzU32(&x36, x3, arg3[2], x20)
	var x37 uint32
	cmovznzU32(&x37, x3, arg3[3], x22)
	var x38 uint32
	cmovznzU32(&x38, x3, arg3[4], x24)
	var x39 uint32
	cmovznzU32(&x39, x3, arg3[5], x26)
	var x40 uint32
	cmovznzU32(&x40, x3, arg3[6], x28)
	var x41 uint32
	cmovznzU32(&x41, x3, arg3[7], x30)
	var x42 uint32
	cmovznzU32(&x42, x3, arg3[8], x32)
	var x43 uint32
	cmovznzU32(&x43, x3, arg4[0], arg5[0])
	var x44 uint32
	cmovznzU32(&x44, x3, arg4[1], arg5[1])
	var x45 uint32
	cmovznzU32(&x45, x3, arg4[2], arg5[2])
	var x46 uint32
	cmovznzU32(&x46, x3, arg4[3], arg5[3])
	var x47 uint32
	cmovznzU32(&x47, x3, arg4[4], arg5[4])
	var x48 uint32
	cmovznzU32(&x48, x3, arg4[5], arg5[5])
	var x49 uint32
	cmovznzU32(&x49, x3, arg4[6], arg5[6])
	var x50 uint32
	cmovznzU32(&x50, x3, arg4[7], arg5[7])
	var x51 uint32
	var x52 uint1
	x51, x52 = addcarryxU32(x43, x43, 0x0)
	var x53 uint32
	var x54 uint1
	x53, x54 = addcarryxU32(x44, x44, x52)
	var x55 uint32
	var x56 uint1
	x55, x56 = addcarryxU32(x45, x45, x54)
	var x57 uint32
	var x58 uint1
	x57, x58 = addcarryxU32(x46, x46, x56)
	var x59 uint32
	var x60 uint1
	x59, x60 = addcarryxU32(x47, x47, x58)
	var x61 uint32
	var x62 uint1
	x61, x62 = addcarryxU32(x48, x48, x60)
	var x63 uint32
	var x64 uint1
	x63, x64 = addcarryxU32(x49, x49, x62)
	var x65 uint32
	var x66 uint1
	x65, x66 = addcarryxU32(x50, x50, x64)
	var x67 uint32
	var x68 uint1
	x67, x68 = subborrowxU32(x51, 0xffffffff, 0x0)
	var x69 uint32
	var x70 uint1
	x69, x70 = subborrowxU32(x53, 0xffffffff, x68)
	var x71 uint32
	var x72 uint1
	x71, x72 = subborrowxU32(x55, 0xffffffff, x70)
	var x73 uint32
	var x74 uint1
	x73, x74 = subborrowxU32(x57, uint32(0x0), x72)
	var x75 uint32
	var x76 uint1
	x75, x76 = subborrowxU32(x59, uint32(0x0), x74)
	var x77 uint32
	var x78 uint1
	x77, x78 = subborrowxU32(x61, uint32(0x0), x76)
	var x79 uint32
	var x80 uint1
	x79, x80 = subborrowxU32(x63, uint32(0x1), x78)
	var x81 uint32
	var x82 uint1
	x81, x82 = subborrowxU32(x65, 0xffffffff, x80)
	var x84 uint1
	_, x84 = subborrowxU32(uint32(x66), uint32(0x0), x82)
	x85 := arg4[7]
	x86 := arg4[6]
	x87 := arg4[5]
	x88 := arg4[4]
	x89 := arg4[3]
	x90 := arg4[2]
	x91 := arg4[1]
	x92 := arg4[0]
	var x93 uint32
	var x94 uint1
	x93, x94 = subborrowxU32(uint32(0x0), x92, 0x0)
	var x95 uint32
	var x96 uint1
	x95, x96 = subborrowxU32(uint32(0x0), x91, x94)
	var x97 uint32
	var x98 uint1
	x97, x98 = subborrowxU32(uint32(0x0), x90, x96)
	var x99 uint32
	var x100 uint1
	x99, x100 = subborrowxU32(uint32(0x0), x89, x98)
	var x101 uint32
	var x102 uint1
	x101, x102 = subborrowxU32(uint32(0x0), x88, x100)
	var x103 uint32
	var x104 uint1
	x103, x104 = subborrowxU32(uint32(0x0), x87, x102)
	var x105 uint32
	var x106 uint1
	x105, x106 = subborrowxU32(uint32(0x0), x86, x104)
	var x107 uint32
	var x108 uint1
	x107, x108 = subborrowxU32(uint32(0x0), x85, x106)
	var x109 uint32
	cmovznzU32(&x109, x108, uint32(0x0), 0xffffffff)
	var x110 uint32
	var x111 uint1
	x110, x111 = addcarryxU32(x93, x109, 0x0)
	var x112 uint32
	var x113 uint1
	x112, x113 = addcarryxU32(x95, x109, x111)
	var x114 uint32
	var x115 uint1
	x114, x115 = addcarryxU32(x97, x109, x113)
	var x116 uint32
	var x117 uint1
	x116, x117 = addcarryxU32(x99, uint32(0x0), x115)
	var x118 uint32
	var x119 uint1
	x118, x119 = addcarryxU32(x101, uint32(0x0), x117)
	var x120 uint32
	var x121 uint1
	x120, x121 = addcarryxU32(x103, uint32(0x0), x119)
	var x122 uint32
	var x123 uint1
	x122, x123 = addcarryxU32(x105, uint32((uint1(x109) & 0x1)), x121)
	var x124 uint32
	x124, _ = addcarryxU32(x107, x109, x123)
	var x126 uint32
	cmovznzU32(&x126, x3, arg5[0], x110)
	var x127 uint32
	cmovznzU32(&x127, x3, arg5[1], x112)
	var x128 uint32
	cmovznzU32(&x128, x3, arg5[2], x114)
	var x129 uint32
	cmovznzU32(&x129, x3, arg5[3], x116)
	var x130 uint32
	cmovznzU32(&x130, x3, arg5[4], x118)
	var x131 uint32
	cmovznzU32(&x131, x3, arg5[5], x120)
	var x132 uint32
	cmovznzU32(&x132, x3, arg5[6], x122)
	var x133 uint32
	cmovznzU32(&x133, x3, arg5[7], x124)
	x134 := (uint1(x34) & 0x1)
	var x135 uint32
	cmovznzU32(&x135, x134, uint32(0x0), x7)
	var x136 uint32
	cmovznzU32(&x136, x134, uint32(0x0), x8)
	var x137 uint32
	cmovznzU32(&x137, x134, uint32(0x0), x9)
	var x138 uint32
	cmovznzU32(&x138, x134, uint32(0x0), x10)
	var x139 uint32
	cmovznzU32(&x139, x134, uint32(0x0), x11)
	var x140 uint32
	cmovznzU32(&x140, x134, uint32(0x0), x12)
	var x141 uint32
	cmovznzU32(&x141, x134, uint32(0x0), x13)
	var x142 uint32
	cmovznzU32(&x142, x134, uint32(0x0), x14)
	var x143 uint32
	cmovznzU32(&x143, x134, uint32(0x0), x15)
	var x144 uint32
	var x145 uint1
	x144, x145 = addcarryxU32(x34, x135, 0x0)
	var x146 uint32
	var x147 uint1
	x146, x147 = addcarryxU32(x35, x136, x145)
	var x148 uint32
	var x149 uint1
	x148, x149 = addcarryxU32(x36, x137, x147)
	var x150 uint32
	var x151 uint1
	x150, x151 = addcarryxU32(x37, x138, x149)
	var x152 uint32
	var x153 uint1
	x152, x153 = addcarryxU32(x38, x139, x151)
	var x154 uint32
	var x155 uint1
	x154, x155 = addcarryxU32(x39, x140, x153)
	var x156 uint32
	var x157 uint1
	x156, x157 = addcarryxU32(x40, x141, x155)
	var x158 uint32
	var x159 uint1
	x158, x159 = addcarryxU32(x41, x142, x157)
	var x160 uint32
	x160, _ = addcarryxU32(x42, x143, x159)
	var x162 uint32
	cmovznzU32(&x162, x134, uint32(0x0), x43)
	var x163 uint32
	cmovznzU32(&x163, x134, uint32(0x0), x44)
	var x164 uint32
	cmovznzU32(&x164, x134, uint32(0x0), x45)
	var x165 uint32
	cmovznzU32(&x165, x134, uint32(0x0), x46)
	var x166 uint32
	cmovznzU32(&x166, x134, uint32(0x0), x47)
	var x167 uint32
	cmovznzU32(&x167, x134, uint32(0x0), x48)
	var x168 uint32
	cmovznzU32(&x168, x134, uint32(0x0), x49)
	var x169 uint32
	cmovznzU32(&x169, x134, uint32(0x0), x50)
	var x170 uint32
	var x171 uint1
	x170, x171 = addcarryxU32(x126, x162, 0x0)
	var x172 uint32
	var x173 uint1
	x172, x173 = addcarryxU32(x127, x163, x171)
	var x174 uint32
	var x175 uint1
	x174, x175 = addcarryxU32(x128, x164, x173)
	var x176 uint32
	var x177 uint1
	x176, x177 = addcarryxU32(x129, x165, x175)
	var x178 uint32
	var x179 uint1
	x178, x179 = addcarryxU32(x130, x166, x177)
	var x180 uint32
	var x181 uint1
	x180, x181 = addcarryxU32(x131, x167, x179)
	var x182 uint32
	var x183 uint1
	x182, x183 = addcarryxU32(x132, x168, x181)
	var x184 uint32
	var x185 uint1
	x184, x185 = addcarryxU32(x133, x169, x183)
	var x186 uint32
	var x187 uint1
	x186, x187 = subborrowxU32(x170, 0xffffffff, 0x0)
	var x188 uint32
	var x189 uint1
	x188, x189 = subborrowxU32(x172, 0xffffffff, x187)
	var x190 uint32
	var x191 uint1
	x190, x191 = subborrowxU32(x174, 0xffffffff, x189)
	var x192 uint32
	var x193 uint1
	x192, x193 = subborrowxU32(x176, uint32(0x0), x191)
	var x194 uint32
	var x195 uint1
	x194, x195 = subborrowxU32(x178, uint32(0x0), x193)
	var x196 uint32
	var x197 uint1
	x196, x197 = subborrowxU32(x180, uint32(0x0), x195)
	var x198 uint32
	var x199 uint1
	x198, x199 = subborrowxU32(x182, uint32(0x1), x197)
	var x200 uint32
	var x201 uint1
	x200, x201 = subborrowxU32(x184, 0xffffffff, x199)
	var x203 uint1
	_, x203 = subborrowxU32(uint32(x185), uint32(0x0), x201)
	var x204 uint32
	x204, _ = addcarryxU32(x6, uint32(0x1), 0x0)
	x206 := ((x144 >> 1) | ((x146 << 31) & 0xffffffff))
	x207 := ((x146 >> 1) | ((x148 << 31) & 0xffffffff))
	x208 := ((x148 >> 1) | ((x150 << 31) & 0xffffffff))
	x209 := ((x150 >> 1) | ((x152 << 31) & 0xffffffff))
	x210 := ((x152 >> 1) | ((x154 << 31) & 0xffffffff))
	x211 := ((x154 >> 1) | ((x156 << 31) & 0xffffffff))
	x212 := ((x156 >> 1) | ((x158 << 31) & 0xffffffff))
	x213 := ((x158 >> 1) | ((x160 << 31) & 0xffffffff))
	x214 := ((x160 & 0x80000000) | (x160 >> 1))
	var x215 uint32
	cmovznzU32(&x215, x84, x67, x51)
	var x216 uint32
	cmovznzU32(&x216, x84, x69, x53)
	var x217 uint32
	cmovznzU32(&x217, x84, x71, x55)
	var x218 uint32
	cmovznzU32(&x218, x84, x73, x57)
	var x219 uint32
	cmovznzU32(&x219, x84, x75, x59)
	var x220 uint32
	cmovznzU32(&x220, x84, x77, x61)
	var x221 uint32
	cmovznzU32(&x221, x84, x79, x63)
	var x222 uint32
	cmovznzU32(&x222, x84, x81, x65)
	var x223 uint32
	cmovznzU32(&x223, x203, x186, x170)
	var x224 uint32
	cmovznzU32(&x224, x203, x188, x172)
	var x225 uint32
	cmovznzU32(&x225, x203, x190, x174)
	var x226 uint32
	cmovznzU32(&x226, x203, x192, x176)
	var x227 uint32
	cmovznzU32(&x227, x203, x194, x178)
	var x228 uint32
	cmovznzU32(&x228, x203, x196, x180)
	var x229 uint32
	cmovznzU32(&x229, x203, x198, x182)
	var x230 uint32
	cmovznzU32(&x230, x203, x200, x184)
	*out1 = x204
	out2[0] = x7
	out2[1] = x8
	out2[2] = x9
	out2[3] = x10
	out2[4] = x11
	out2[5] = x12
	out2[6] = x13
	out2[7] = x14
	out2[8] = x15
	out3[0] = x206
	out3[1] = x207
	out3[2] = x208
	out3[3] = x209
	out3[4] = x210
	out3[5] = x211
	out3[6] = x212
	out3[7] = x213
	out3[8] = x214
	out4[0] = x215
	out4[1] = x216
	out4[2] = x217
	out4[3] = x218
	out4[4] = x219
	out4[5] = x220
	out4[6] = x221
	out4[7] = x222
	out5[0] = x223
	out5[1] = x224
	out5[2] = x225
	out5[3] = x226
	out5[4] = x227
	out5[5] = x228
	out5[6] = x229
	out5[7] = x230
}

// DivstepPrecomp returns the precomputed value for Bernstein-Yang-inversion (in montgomery form).
//
// Postconditions:
//   eval (from_montgomery out1) = ⌊(m - 1) / 2⌋^(if (log2 m) + 1 < 46 then ⌊(49 * ((log2 m) + 1) + 80) / 17⌋ else ⌊(49 * ((log2 m) + 1) + 57) / 17⌋)
//   0 ≤ eval out1 < m
//
// Input Bounds:
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func DivstepPrecomp(out1 *[8]uint32) {
	out1[0] = 0xb8000000
	out1[1] = 0x67ffffff
	out1[2] = 0x38000000
	out1[3] = 0xc0000000
	out1[4] = 0x7fffffff
	out1[5] = 0xd8000000
	out1[6] = 0xffffffff
	out1[7] = 0x2fffffff
}
