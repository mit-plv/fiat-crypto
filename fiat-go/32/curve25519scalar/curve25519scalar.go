// Code generated by Fiat Cryptography. DO NOT EDIT.
//
// Autogenerated: 'src/ExtractionOCaml/word_by_word_montgomery' --lang Go --relax-primitive-carry-to-bitwidth 32,64 --cmovznz-by-mul --internal-static --package-case flatcase --public-function-case UpperCamelCase --private-function-case camelCase --public-type-case UpperCamelCase --private-type-case camelCase --no-prefix-fiat --doc-newline-in-typedef-bounds --doc-prepend-header 'Code generated by Fiat Cryptography. DO NOT EDIT.' --doc-text-before-function-name '' --doc-text-before-type-name '' --package-name curve25519scalar '' 32 '2^252 + 27742317777372353535851937790883648493' mul square add sub opp from_montgomery to_montgomery nonzero selectznz to_bytes from_bytes one msat divstep divstep_precomp
//
// curve description (via package name): curve25519scalar
//
// machine_wordsize = 32 (from "32")
//
// requested operations: mul, square, add, sub, opp, from_montgomery, to_montgomery, nonzero, selectznz, to_bytes, from_bytes, one, msat, divstep, divstep_precomp
//
// m = 0x1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed (from "2^252 + 27742317777372353535851937790883648493")
//
//
//
// NOTE: In addition to the bounds specified above each function, all
//
//   functions synthesized for this Montgomery arithmetic require the
//
//   input to be strictly less than the prime modulus (m), and also
//
//   require the input to be in the unique saturated representation.
//
//   All functions also ensure that these two properties are true of
//
//   return values.
//
//
//
// Computed values:
//
//   eval z = z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192) + (z[7] << 224)
//
//   bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17] << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168) + (z[22] << 176) + (z[23] << 184) + (z[24] << 192) + (z[25] << 200) + (z[26] << 208) + (z[27] << 216) + (z[28] << 224) + (z[29] << 232) + (z[30] << 240) + (z[31] << 248)
//
//   twos_complement_eval z = let x1 := z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192) + (z[7] << 224) in
//
//                            if x1 & (2^256-1) < 2^255 then x1 & (2^256-1) else (x1 & (2^256-1)) - 2^256
package curve25519scalar

import "math/bits"

type uint1 uint64 // We use uint64 instead of a more narrow type for performance reasons; see https://github.com/mit-plv/fiat-crypto/pull/1006#issuecomment-892625927
type int1 int64 // We use uint64 instead of a more narrow type for performance reasons; see https://github.com/mit-plv/fiat-crypto/pull/1006#issuecomment-892625927

// MontgomeryDomainFieldElement is a field element in the Montgomery domain.
//
// Bounds:
//
//   [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
type MontgomeryDomainFieldElement [8]uint32

// NonMontgomeryDomainFieldElement is a field element NOT in the Montgomery domain.
//
// Bounds:
//
//   [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
type NonMontgomeryDomainFieldElement [8]uint32

// cmovznzU32 is a single-word conditional move.
//
// Postconditions:
//   out1 = (if arg1 = 0 then arg2 else arg3)
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [0x0 ~> 0xffffffff]
//   arg3: [0x0 ~> 0xffffffff]
// Output Bounds:
//   out1: [0x0 ~> 0xffffffff]
func cmovznzU32(out1 *uint32, arg1 uint1, arg2 uint32, arg3 uint32) {
	x1 := (uint32(arg1) * 0xffffffff)
	x2 := ((x1 & arg3) | ((^x1) & arg2))
	*out1 = x2
}

// Mul multiplies two field elements in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
//   0 ≤ eval arg2 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
//   0 ≤ eval out1 < m
//
func Mul(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement, arg2 *MontgomeryDomainFieldElement) {
	x1 := arg1[1]
	x2 := arg1[2]
	x3 := arg1[3]
	x4 := arg1[4]
	x5 := arg1[5]
	x6 := arg1[6]
	x7 := arg1[7]
	x8 := arg1[0]
	var x9 uint32
	var x10 uint32
	x10, x9 = bits.Mul32(x8, arg2[7])
	var x11 uint32
	var x12 uint32
	x12, x11 = bits.Mul32(x8, arg2[6])
	var x13 uint32
	var x14 uint32
	x14, x13 = bits.Mul32(x8, arg2[5])
	var x15 uint32
	var x16 uint32
	x16, x15 = bits.Mul32(x8, arg2[4])
	var x17 uint32
	var x18 uint32
	x18, x17 = bits.Mul32(x8, arg2[3])
	var x19 uint32
	var x20 uint32
	x20, x19 = bits.Mul32(x8, arg2[2])
	var x21 uint32
	var x22 uint32
	x22, x21 = bits.Mul32(x8, arg2[1])
	var x23 uint32
	var x24 uint32
	x24, x23 = bits.Mul32(x8, arg2[0])
	var x25 uint32
	var x26 uint32
	x25, x26 = bits.Add32(x24, x21, uint32(0x0))
	var x27 uint32
	var x28 uint32
	x27, x28 = bits.Add32(x22, x19, uint32(uint1(x26)))
	var x29 uint32
	var x30 uint32
	x29, x30 = bits.Add32(x20, x17, uint32(uint1(x28)))
	var x31 uint32
	var x32 uint32
	x31, x32 = bits.Add32(x18, x15, uint32(uint1(x30)))
	var x33 uint32
	var x34 uint32
	x33, x34 = bits.Add32(x16, x13, uint32(uint1(x32)))
	var x35 uint32
	var x36 uint32
	x35, x36 = bits.Add32(x14, x11, uint32(uint1(x34)))
	var x37 uint32
	var x38 uint32
	x37, x38 = bits.Add32(x12, x9, uint32(uint1(x36)))
	x39 := (uint32(uint1(x38)) + x10)
	var x40 uint32
	_, x40 = bits.Mul32(x23, 0x12547e1b)
	var x42 uint32
	var x43 uint32
	x43, x42 = bits.Mul32(x40, 0x10000000)
	var x44 uint32
	var x45 uint32
	x45, x44 = bits.Mul32(x40, 0x14def9de)
	var x46 uint32
	var x47 uint32
	x47, x46 = bits.Mul32(x40, 0xa2f79cd6)
	var x48 uint32
	var x49 uint32
	x49, x48 = bits.Mul32(x40, 0x5812631a)
	var x50 uint32
	var x51 uint32
	x51, x50 = bits.Mul32(x40, 0x5cf5d3ed)
	var x52 uint32
	var x53 uint32
	x52, x53 = bits.Add32(x51, x48, uint32(0x0))
	var x54 uint32
	var x55 uint32
	x54, x55 = bits.Add32(x49, x46, uint32(uint1(x53)))
	var x56 uint32
	var x57 uint32
	x56, x57 = bits.Add32(x47, x44, uint32(uint1(x55)))
	x58 := (uint32(uint1(x57)) + x45)
	var x60 uint32
	_, x60 = bits.Add32(x23, x50, uint32(0x0))
	var x61 uint32
	var x62 uint32
	x61, x62 = bits.Add32(x25, x52, uint32(uint1(x60)))
	var x63 uint32
	var x64 uint32
	x63, x64 = bits.Add32(x27, x54, uint32(uint1(x62)))
	var x65 uint32
	var x66 uint32
	x65, x66 = bits.Add32(x29, x56, uint32(uint1(x64)))
	var x67 uint32
	var x68 uint32
	x67, x68 = bits.Add32(x31, x58, uint32(uint1(x66)))
	var x69 uint32
	var x70 uint32
	x69, x70 = bits.Add32(x33, uint32(0x0), uint32(uint1(x68)))
	var x71 uint32
	var x72 uint32
	x71, x72 = bits.Add32(x35, uint32(0x0), uint32(uint1(x70)))
	var x73 uint32
	var x74 uint32
	x73, x74 = bits.Add32(x37, x42, uint32(uint1(x72)))
	var x75 uint32
	var x76 uint32
	x75, x76 = bits.Add32(x39, x43, uint32(uint1(x74)))
	var x77 uint32
	var x78 uint32
	x78, x77 = bits.Mul32(x1, arg2[7])
	var x79 uint32
	var x80 uint32
	x80, x79 = bits.Mul32(x1, arg2[6])
	var x81 uint32
	var x82 uint32
	x82, x81 = bits.Mul32(x1, arg2[5])
	var x83 uint32
	var x84 uint32
	x84, x83 = bits.Mul32(x1, arg2[4])
	var x85 uint32
	var x86 uint32
	x86, x85 = bits.Mul32(x1, arg2[3])
	var x87 uint32
	var x88 uint32
	x88, x87 = bits.Mul32(x1, arg2[2])
	var x89 uint32
	var x90 uint32
	x90, x89 = bits.Mul32(x1, arg2[1])
	var x91 uint32
	var x92 uint32
	x92, x91 = bits.Mul32(x1, arg2[0])
	var x93 uint32
	var x94 uint32
	x93, x94 = bits.Add32(x92, x89, uint32(0x0))
	var x95 uint32
	var x96 uint32
	x95, x96 = bits.Add32(x90, x87, uint32(uint1(x94)))
	var x97 uint32
	var x98 uint32
	x97, x98 = bits.Add32(x88, x85, uint32(uint1(x96)))
	var x99 uint32
	var x100 uint32
	x99, x100 = bits.Add32(x86, x83, uint32(uint1(x98)))
	var x101 uint32
	var x102 uint32
	x101, x102 = bits.Add32(x84, x81, uint32(uint1(x100)))
	var x103 uint32
	var x104 uint32
	x103, x104 = bits.Add32(x82, x79, uint32(uint1(x102)))
	var x105 uint32
	var x106 uint32
	x105, x106 = bits.Add32(x80, x77, uint32(uint1(x104)))
	x107 := (uint32(uint1(x106)) + x78)
	var x108 uint32
	var x109 uint32
	x108, x109 = bits.Add32(x61, x91, uint32(0x0))
	var x110 uint32
	var x111 uint32
	x110, x111 = bits.Add32(x63, x93, uint32(uint1(x109)))
	var x112 uint32
	var x113 uint32
	x112, x113 = bits.Add32(x65, x95, uint32(uint1(x111)))
	var x114 uint32
	var x115 uint32
	x114, x115 = bits.Add32(x67, x97, uint32(uint1(x113)))
	var x116 uint32
	var x117 uint32
	x116, x117 = bits.Add32(x69, x99, uint32(uint1(x115)))
	var x118 uint32
	var x119 uint32
	x118, x119 = bits.Add32(x71, x101, uint32(uint1(x117)))
	var x120 uint32
	var x121 uint32
	x120, x121 = bits.Add32(x73, x103, uint32(uint1(x119)))
	var x122 uint32
	var x123 uint32
	x122, x123 = bits.Add32(x75, x105, uint32(uint1(x121)))
	var x124 uint32
	var x125 uint32
	x124, x125 = bits.Add32(uint32(uint1(x76)), x107, uint32(uint1(x123)))
	var x126 uint32
	_, x126 = bits.Mul32(x108, 0x12547e1b)
	var x128 uint32
	var x129 uint32
	x129, x128 = bits.Mul32(x126, 0x10000000)
	var x130 uint32
	var x131 uint32
	x131, x130 = bits.Mul32(x126, 0x14def9de)
	var x132 uint32
	var x133 uint32
	x133, x132 = bits.Mul32(x126, 0xa2f79cd6)
	var x134 uint32
	var x135 uint32
	x135, x134 = bits.Mul32(x126, 0x5812631a)
	var x136 uint32
	var x137 uint32
	x137, x136 = bits.Mul32(x126, 0x5cf5d3ed)
	var x138 uint32
	var x139 uint32
	x138, x139 = bits.Add32(x137, x134, uint32(0x0))
	var x140 uint32
	var x141 uint32
	x140, x141 = bits.Add32(x135, x132, uint32(uint1(x139)))
	var x142 uint32
	var x143 uint32
	x142, x143 = bits.Add32(x133, x130, uint32(uint1(x141)))
	x144 := (uint32(uint1(x143)) + x131)
	var x146 uint32
	_, x146 = bits.Add32(x108, x136, uint32(0x0))
	var x147 uint32
	var x148 uint32
	x147, x148 = bits.Add32(x110, x138, uint32(uint1(x146)))
	var x149 uint32
	var x150 uint32
	x149, x150 = bits.Add32(x112, x140, uint32(uint1(x148)))
	var x151 uint32
	var x152 uint32
	x151, x152 = bits.Add32(x114, x142, uint32(uint1(x150)))
	var x153 uint32
	var x154 uint32
	x153, x154 = bits.Add32(x116, x144, uint32(uint1(x152)))
	var x155 uint32
	var x156 uint32
	x155, x156 = bits.Add32(x118, uint32(0x0), uint32(uint1(x154)))
	var x157 uint32
	var x158 uint32
	x157, x158 = bits.Add32(x120, uint32(0x0), uint32(uint1(x156)))
	var x159 uint32
	var x160 uint32
	x159, x160 = bits.Add32(x122, x128, uint32(uint1(x158)))
	var x161 uint32
	var x162 uint32
	x161, x162 = bits.Add32(x124, x129, uint32(uint1(x160)))
	x163 := (uint32(uint1(x162)) + uint32(uint1(x125)))
	var x164 uint32
	var x165 uint32
	x165, x164 = bits.Mul32(x2, arg2[7])
	var x166 uint32
	var x167 uint32
	x167, x166 = bits.Mul32(x2, arg2[6])
	var x168 uint32
	var x169 uint32
	x169, x168 = bits.Mul32(x2, arg2[5])
	var x170 uint32
	var x171 uint32
	x171, x170 = bits.Mul32(x2, arg2[4])
	var x172 uint32
	var x173 uint32
	x173, x172 = bits.Mul32(x2, arg2[3])
	var x174 uint32
	var x175 uint32
	x175, x174 = bits.Mul32(x2, arg2[2])
	var x176 uint32
	var x177 uint32
	x177, x176 = bits.Mul32(x2, arg2[1])
	var x178 uint32
	var x179 uint32
	x179, x178 = bits.Mul32(x2, arg2[0])
	var x180 uint32
	var x181 uint32
	x180, x181 = bits.Add32(x179, x176, uint32(0x0))
	var x182 uint32
	var x183 uint32
	x182, x183 = bits.Add32(x177, x174, uint32(uint1(x181)))
	var x184 uint32
	var x185 uint32
	x184, x185 = bits.Add32(x175, x172, uint32(uint1(x183)))
	var x186 uint32
	var x187 uint32
	x186, x187 = bits.Add32(x173, x170, uint32(uint1(x185)))
	var x188 uint32
	var x189 uint32
	x188, x189 = bits.Add32(x171, x168, uint32(uint1(x187)))
	var x190 uint32
	var x191 uint32
	x190, x191 = bits.Add32(x169, x166, uint32(uint1(x189)))
	var x192 uint32
	var x193 uint32
	x192, x193 = bits.Add32(x167, x164, uint32(uint1(x191)))
	x194 := (uint32(uint1(x193)) + x165)
	var x195 uint32
	var x196 uint32
	x195, x196 = bits.Add32(x147, x178, uint32(0x0))
	var x197 uint32
	var x198 uint32
	x197, x198 = bits.Add32(x149, x180, uint32(uint1(x196)))
	var x199 uint32
	var x200 uint32
	x199, x200 = bits.Add32(x151, x182, uint32(uint1(x198)))
	var x201 uint32
	var x202 uint32
	x201, x202 = bits.Add32(x153, x184, uint32(uint1(x200)))
	var x203 uint32
	var x204 uint32
	x203, x204 = bits.Add32(x155, x186, uint32(uint1(x202)))
	var x205 uint32
	var x206 uint32
	x205, x206 = bits.Add32(x157, x188, uint32(uint1(x204)))
	var x207 uint32
	var x208 uint32
	x207, x208 = bits.Add32(x159, x190, uint32(uint1(x206)))
	var x209 uint32
	var x210 uint32
	x209, x210 = bits.Add32(x161, x192, uint32(uint1(x208)))
	var x211 uint32
	var x212 uint32
	x211, x212 = bits.Add32(x163, x194, uint32(uint1(x210)))
	var x213 uint32
	_, x213 = bits.Mul32(x195, 0x12547e1b)
	var x215 uint32
	var x216 uint32
	x216, x215 = bits.Mul32(x213, 0x10000000)
	var x217 uint32
	var x218 uint32
	x218, x217 = bits.Mul32(x213, 0x14def9de)
	var x219 uint32
	var x220 uint32
	x220, x219 = bits.Mul32(x213, 0xa2f79cd6)
	var x221 uint32
	var x222 uint32
	x222, x221 = bits.Mul32(x213, 0x5812631a)
	var x223 uint32
	var x224 uint32
	x224, x223 = bits.Mul32(x213, 0x5cf5d3ed)
	var x225 uint32
	var x226 uint32
	x225, x226 = bits.Add32(x224, x221, uint32(0x0))
	var x227 uint32
	var x228 uint32
	x227, x228 = bits.Add32(x222, x219, uint32(uint1(x226)))
	var x229 uint32
	var x230 uint32
	x229, x230 = bits.Add32(x220, x217, uint32(uint1(x228)))
	x231 := (uint32(uint1(x230)) + x218)
	var x233 uint32
	_, x233 = bits.Add32(x195, x223, uint32(0x0))
	var x234 uint32
	var x235 uint32
	x234, x235 = bits.Add32(x197, x225, uint32(uint1(x233)))
	var x236 uint32
	var x237 uint32
	x236, x237 = bits.Add32(x199, x227, uint32(uint1(x235)))
	var x238 uint32
	var x239 uint32
	x238, x239 = bits.Add32(x201, x229, uint32(uint1(x237)))
	var x240 uint32
	var x241 uint32
	x240, x241 = bits.Add32(x203, x231, uint32(uint1(x239)))
	var x242 uint32
	var x243 uint32
	x242, x243 = bits.Add32(x205, uint32(0x0), uint32(uint1(x241)))
	var x244 uint32
	var x245 uint32
	x244, x245 = bits.Add32(x207, uint32(0x0), uint32(uint1(x243)))
	var x246 uint32
	var x247 uint32
	x246, x247 = bits.Add32(x209, x215, uint32(uint1(x245)))
	var x248 uint32
	var x249 uint32
	x248, x249 = bits.Add32(x211, x216, uint32(uint1(x247)))
	x250 := (uint32(uint1(x249)) + uint32(uint1(x212)))
	var x251 uint32
	var x252 uint32
	x252, x251 = bits.Mul32(x3, arg2[7])
	var x253 uint32
	var x254 uint32
	x254, x253 = bits.Mul32(x3, arg2[6])
	var x255 uint32
	var x256 uint32
	x256, x255 = bits.Mul32(x3, arg2[5])
	var x257 uint32
	var x258 uint32
	x258, x257 = bits.Mul32(x3, arg2[4])
	var x259 uint32
	var x260 uint32
	x260, x259 = bits.Mul32(x3, arg2[3])
	var x261 uint32
	var x262 uint32
	x262, x261 = bits.Mul32(x3, arg2[2])
	var x263 uint32
	var x264 uint32
	x264, x263 = bits.Mul32(x3, arg2[1])
	var x265 uint32
	var x266 uint32
	x266, x265 = bits.Mul32(x3, arg2[0])
	var x267 uint32
	var x268 uint32
	x267, x268 = bits.Add32(x266, x263, uint32(0x0))
	var x269 uint32
	var x270 uint32
	x269, x270 = bits.Add32(x264, x261, uint32(uint1(x268)))
	var x271 uint32
	var x272 uint32
	x271, x272 = bits.Add32(x262, x259, uint32(uint1(x270)))
	var x273 uint32
	var x274 uint32
	x273, x274 = bits.Add32(x260, x257, uint32(uint1(x272)))
	var x275 uint32
	var x276 uint32
	x275, x276 = bits.Add32(x258, x255, uint32(uint1(x274)))
	var x277 uint32
	var x278 uint32
	x277, x278 = bits.Add32(x256, x253, uint32(uint1(x276)))
	var x279 uint32
	var x280 uint32
	x279, x280 = bits.Add32(x254, x251, uint32(uint1(x278)))
	x281 := (uint32(uint1(x280)) + x252)
	var x282 uint32
	var x283 uint32
	x282, x283 = bits.Add32(x234, x265, uint32(0x0))
	var x284 uint32
	var x285 uint32
	x284, x285 = bits.Add32(x236, x267, uint32(uint1(x283)))
	var x286 uint32
	var x287 uint32
	x286, x287 = bits.Add32(x238, x269, uint32(uint1(x285)))
	var x288 uint32
	var x289 uint32
	x288, x289 = bits.Add32(x240, x271, uint32(uint1(x287)))
	var x290 uint32
	var x291 uint32
	x290, x291 = bits.Add32(x242, x273, uint32(uint1(x289)))
	var x292 uint32
	var x293 uint32
	x292, x293 = bits.Add32(x244, x275, uint32(uint1(x291)))
	var x294 uint32
	var x295 uint32
	x294, x295 = bits.Add32(x246, x277, uint32(uint1(x293)))
	var x296 uint32
	var x297 uint32
	x296, x297 = bits.Add32(x248, x279, uint32(uint1(x295)))
	var x298 uint32
	var x299 uint32
	x298, x299 = bits.Add32(x250, x281, uint32(uint1(x297)))
	var x300 uint32
	_, x300 = bits.Mul32(x282, 0x12547e1b)
	var x302 uint32
	var x303 uint32
	x303, x302 = bits.Mul32(x300, 0x10000000)
	var x304 uint32
	var x305 uint32
	x305, x304 = bits.Mul32(x300, 0x14def9de)
	var x306 uint32
	var x307 uint32
	x307, x306 = bits.Mul32(x300, 0xa2f79cd6)
	var x308 uint32
	var x309 uint32
	x309, x308 = bits.Mul32(x300, 0x5812631a)
	var x310 uint32
	var x311 uint32
	x311, x310 = bits.Mul32(x300, 0x5cf5d3ed)
	var x312 uint32
	var x313 uint32
	x312, x313 = bits.Add32(x311, x308, uint32(0x0))
	var x314 uint32
	var x315 uint32
	x314, x315 = bits.Add32(x309, x306, uint32(uint1(x313)))
	var x316 uint32
	var x317 uint32
	x316, x317 = bits.Add32(x307, x304, uint32(uint1(x315)))
	x318 := (uint32(uint1(x317)) + x305)
	var x320 uint32
	_, x320 = bits.Add32(x282, x310, uint32(0x0))
	var x321 uint32
	var x322 uint32
	x321, x322 = bits.Add32(x284, x312, uint32(uint1(x320)))
	var x323 uint32
	var x324 uint32
	x323, x324 = bits.Add32(x286, x314, uint32(uint1(x322)))
	var x325 uint32
	var x326 uint32
	x325, x326 = bits.Add32(x288, x316, uint32(uint1(x324)))
	var x327 uint32
	var x328 uint32
	x327, x328 = bits.Add32(x290, x318, uint32(uint1(x326)))
	var x329 uint32
	var x330 uint32
	x329, x330 = bits.Add32(x292, uint32(0x0), uint32(uint1(x328)))
	var x331 uint32
	var x332 uint32
	x331, x332 = bits.Add32(x294, uint32(0x0), uint32(uint1(x330)))
	var x333 uint32
	var x334 uint32
	x333, x334 = bits.Add32(x296, x302, uint32(uint1(x332)))
	var x335 uint32
	var x336 uint32
	x335, x336 = bits.Add32(x298, x303, uint32(uint1(x334)))
	x337 := (uint32(uint1(x336)) + uint32(uint1(x299)))
	var x338 uint32
	var x339 uint32
	x339, x338 = bits.Mul32(x4, arg2[7])
	var x340 uint32
	var x341 uint32
	x341, x340 = bits.Mul32(x4, arg2[6])
	var x342 uint32
	var x343 uint32
	x343, x342 = bits.Mul32(x4, arg2[5])
	var x344 uint32
	var x345 uint32
	x345, x344 = bits.Mul32(x4, arg2[4])
	var x346 uint32
	var x347 uint32
	x347, x346 = bits.Mul32(x4, arg2[3])
	var x348 uint32
	var x349 uint32
	x349, x348 = bits.Mul32(x4, arg2[2])
	var x350 uint32
	var x351 uint32
	x351, x350 = bits.Mul32(x4, arg2[1])
	var x352 uint32
	var x353 uint32
	x353, x352 = bits.Mul32(x4, arg2[0])
	var x354 uint32
	var x355 uint32
	x354, x355 = bits.Add32(x353, x350, uint32(0x0))
	var x356 uint32
	var x357 uint32
	x356, x357 = bits.Add32(x351, x348, uint32(uint1(x355)))
	var x358 uint32
	var x359 uint32
	x358, x359 = bits.Add32(x349, x346, uint32(uint1(x357)))
	var x360 uint32
	var x361 uint32
	x360, x361 = bits.Add32(x347, x344, uint32(uint1(x359)))
	var x362 uint32
	var x363 uint32
	x362, x363 = bits.Add32(x345, x342, uint32(uint1(x361)))
	var x364 uint32
	var x365 uint32
	x364, x365 = bits.Add32(x343, x340, uint32(uint1(x363)))
	var x366 uint32
	var x367 uint32
	x366, x367 = bits.Add32(x341, x338, uint32(uint1(x365)))
	x368 := (uint32(uint1(x367)) + x339)
	var x369 uint32
	var x370 uint32
	x369, x370 = bits.Add32(x321, x352, uint32(0x0))
	var x371 uint32
	var x372 uint32
	x371, x372 = bits.Add32(x323, x354, uint32(uint1(x370)))
	var x373 uint32
	var x374 uint32
	x373, x374 = bits.Add32(x325, x356, uint32(uint1(x372)))
	var x375 uint32
	var x376 uint32
	x375, x376 = bits.Add32(x327, x358, uint32(uint1(x374)))
	var x377 uint32
	var x378 uint32
	x377, x378 = bits.Add32(x329, x360, uint32(uint1(x376)))
	var x379 uint32
	var x380 uint32
	x379, x380 = bits.Add32(x331, x362, uint32(uint1(x378)))
	var x381 uint32
	var x382 uint32
	x381, x382 = bits.Add32(x333, x364, uint32(uint1(x380)))
	var x383 uint32
	var x384 uint32
	x383, x384 = bits.Add32(x335, x366, uint32(uint1(x382)))
	var x385 uint32
	var x386 uint32
	x385, x386 = bits.Add32(x337, x368, uint32(uint1(x384)))
	var x387 uint32
	_, x387 = bits.Mul32(x369, 0x12547e1b)
	var x389 uint32
	var x390 uint32
	x390, x389 = bits.Mul32(x387, 0x10000000)
	var x391 uint32
	var x392 uint32
	x392, x391 = bits.Mul32(x387, 0x14def9de)
	var x393 uint32
	var x394 uint32
	x394, x393 = bits.Mul32(x387, 0xa2f79cd6)
	var x395 uint32
	var x396 uint32
	x396, x395 = bits.Mul32(x387, 0x5812631a)
	var x397 uint32
	var x398 uint32
	x398, x397 = bits.Mul32(x387, 0x5cf5d3ed)
	var x399 uint32
	var x400 uint32
	x399, x400 = bits.Add32(x398, x395, uint32(0x0))
	var x401 uint32
	var x402 uint32
	x401, x402 = bits.Add32(x396, x393, uint32(uint1(x400)))
	var x403 uint32
	var x404 uint32
	x403, x404 = bits.Add32(x394, x391, uint32(uint1(x402)))
	x405 := (uint32(uint1(x404)) + x392)
	var x407 uint32
	_, x407 = bits.Add32(x369, x397, uint32(0x0))
	var x408 uint32
	var x409 uint32
	x408, x409 = bits.Add32(x371, x399, uint32(uint1(x407)))
	var x410 uint32
	var x411 uint32
	x410, x411 = bits.Add32(x373, x401, uint32(uint1(x409)))
	var x412 uint32
	var x413 uint32
	x412, x413 = bits.Add32(x375, x403, uint32(uint1(x411)))
	var x414 uint32
	var x415 uint32
	x414, x415 = bits.Add32(x377, x405, uint32(uint1(x413)))
	var x416 uint32
	var x417 uint32
	x416, x417 = bits.Add32(x379, uint32(0x0), uint32(uint1(x415)))
	var x418 uint32
	var x419 uint32
	x418, x419 = bits.Add32(x381, uint32(0x0), uint32(uint1(x417)))
	var x420 uint32
	var x421 uint32
	x420, x421 = bits.Add32(x383, x389, uint32(uint1(x419)))
	var x422 uint32
	var x423 uint32
	x422, x423 = bits.Add32(x385, x390, uint32(uint1(x421)))
	x424 := (uint32(uint1(x423)) + uint32(uint1(x386)))
	var x425 uint32
	var x426 uint32
	x426, x425 = bits.Mul32(x5, arg2[7])
	var x427 uint32
	var x428 uint32
	x428, x427 = bits.Mul32(x5, arg2[6])
	var x429 uint32
	var x430 uint32
	x430, x429 = bits.Mul32(x5, arg2[5])
	var x431 uint32
	var x432 uint32
	x432, x431 = bits.Mul32(x5, arg2[4])
	var x433 uint32
	var x434 uint32
	x434, x433 = bits.Mul32(x5, arg2[3])
	var x435 uint32
	var x436 uint32
	x436, x435 = bits.Mul32(x5, arg2[2])
	var x437 uint32
	var x438 uint32
	x438, x437 = bits.Mul32(x5, arg2[1])
	var x439 uint32
	var x440 uint32
	x440, x439 = bits.Mul32(x5, arg2[0])
	var x441 uint32
	var x442 uint32
	x441, x442 = bits.Add32(x440, x437, uint32(0x0))
	var x443 uint32
	var x444 uint32
	x443, x444 = bits.Add32(x438, x435, uint32(uint1(x442)))
	var x445 uint32
	var x446 uint32
	x445, x446 = bits.Add32(x436, x433, uint32(uint1(x444)))
	var x447 uint32
	var x448 uint32
	x447, x448 = bits.Add32(x434, x431, uint32(uint1(x446)))
	var x449 uint32
	var x450 uint32
	x449, x450 = bits.Add32(x432, x429, uint32(uint1(x448)))
	var x451 uint32
	var x452 uint32
	x451, x452 = bits.Add32(x430, x427, uint32(uint1(x450)))
	var x453 uint32
	var x454 uint32
	x453, x454 = bits.Add32(x428, x425, uint32(uint1(x452)))
	x455 := (uint32(uint1(x454)) + x426)
	var x456 uint32
	var x457 uint32
	x456, x457 = bits.Add32(x408, x439, uint32(0x0))
	var x458 uint32
	var x459 uint32
	x458, x459 = bits.Add32(x410, x441, uint32(uint1(x457)))
	var x460 uint32
	var x461 uint32
	x460, x461 = bits.Add32(x412, x443, uint32(uint1(x459)))
	var x462 uint32
	var x463 uint32
	x462, x463 = bits.Add32(x414, x445, uint32(uint1(x461)))
	var x464 uint32
	var x465 uint32
	x464, x465 = bits.Add32(x416, x447, uint32(uint1(x463)))
	var x466 uint32
	var x467 uint32
	x466, x467 = bits.Add32(x418, x449, uint32(uint1(x465)))
	var x468 uint32
	var x469 uint32
	x468, x469 = bits.Add32(x420, x451, uint32(uint1(x467)))
	var x470 uint32
	var x471 uint32
	x470, x471 = bits.Add32(x422, x453, uint32(uint1(x469)))
	var x472 uint32
	var x473 uint32
	x472, x473 = bits.Add32(x424, x455, uint32(uint1(x471)))
	var x474 uint32
	_, x474 = bits.Mul32(x456, 0x12547e1b)
	var x476 uint32
	var x477 uint32
	x477, x476 = bits.Mul32(x474, 0x10000000)
	var x478 uint32
	var x479 uint32
	x479, x478 = bits.Mul32(x474, 0x14def9de)
	var x480 uint32
	var x481 uint32
	x481, x480 = bits.Mul32(x474, 0xa2f79cd6)
	var x482 uint32
	var x483 uint32
	x483, x482 = bits.Mul32(x474, 0x5812631a)
	var x484 uint32
	var x485 uint32
	x485, x484 = bits.Mul32(x474, 0x5cf5d3ed)
	var x486 uint32
	var x487 uint32
	x486, x487 = bits.Add32(x485, x482, uint32(0x0))
	var x488 uint32
	var x489 uint32
	x488, x489 = bits.Add32(x483, x480, uint32(uint1(x487)))
	var x490 uint32
	var x491 uint32
	x490, x491 = bits.Add32(x481, x478, uint32(uint1(x489)))
	x492 := (uint32(uint1(x491)) + x479)
	var x494 uint32
	_, x494 = bits.Add32(x456, x484, uint32(0x0))
	var x495 uint32
	var x496 uint32
	x495, x496 = bits.Add32(x458, x486, uint32(uint1(x494)))
	var x497 uint32
	var x498 uint32
	x497, x498 = bits.Add32(x460, x488, uint32(uint1(x496)))
	var x499 uint32
	var x500 uint32
	x499, x500 = bits.Add32(x462, x490, uint32(uint1(x498)))
	var x501 uint32
	var x502 uint32
	x501, x502 = bits.Add32(x464, x492, uint32(uint1(x500)))
	var x503 uint32
	var x504 uint32
	x503, x504 = bits.Add32(x466, uint32(0x0), uint32(uint1(x502)))
	var x505 uint32
	var x506 uint32
	x505, x506 = bits.Add32(x468, uint32(0x0), uint32(uint1(x504)))
	var x507 uint32
	var x508 uint32
	x507, x508 = bits.Add32(x470, x476, uint32(uint1(x506)))
	var x509 uint32
	var x510 uint32
	x509, x510 = bits.Add32(x472, x477, uint32(uint1(x508)))
	x511 := (uint32(uint1(x510)) + uint32(uint1(x473)))
	var x512 uint32
	var x513 uint32
	x513, x512 = bits.Mul32(x6, arg2[7])
	var x514 uint32
	var x515 uint32
	x515, x514 = bits.Mul32(x6, arg2[6])
	var x516 uint32
	var x517 uint32
	x517, x516 = bits.Mul32(x6, arg2[5])
	var x518 uint32
	var x519 uint32
	x519, x518 = bits.Mul32(x6, arg2[4])
	var x520 uint32
	var x521 uint32
	x521, x520 = bits.Mul32(x6, arg2[3])
	var x522 uint32
	var x523 uint32
	x523, x522 = bits.Mul32(x6, arg2[2])
	var x524 uint32
	var x525 uint32
	x525, x524 = bits.Mul32(x6, arg2[1])
	var x526 uint32
	var x527 uint32
	x527, x526 = bits.Mul32(x6, arg2[0])
	var x528 uint32
	var x529 uint32
	x528, x529 = bits.Add32(x527, x524, uint32(0x0))
	var x530 uint32
	var x531 uint32
	x530, x531 = bits.Add32(x525, x522, uint32(uint1(x529)))
	var x532 uint32
	var x533 uint32
	x532, x533 = bits.Add32(x523, x520, uint32(uint1(x531)))
	var x534 uint32
	var x535 uint32
	x534, x535 = bits.Add32(x521, x518, uint32(uint1(x533)))
	var x536 uint32
	var x537 uint32
	x536, x537 = bits.Add32(x519, x516, uint32(uint1(x535)))
	var x538 uint32
	var x539 uint32
	x538, x539 = bits.Add32(x517, x514, uint32(uint1(x537)))
	var x540 uint32
	var x541 uint32
	x540, x541 = bits.Add32(x515, x512, uint32(uint1(x539)))
	x542 := (uint32(uint1(x541)) + x513)
	var x543 uint32
	var x544 uint32
	x543, x544 = bits.Add32(x495, x526, uint32(0x0))
	var x545 uint32
	var x546 uint32
	x545, x546 = bits.Add32(x497, x528, uint32(uint1(x544)))
	var x547 uint32
	var x548 uint32
	x547, x548 = bits.Add32(x499, x530, uint32(uint1(x546)))
	var x549 uint32
	var x550 uint32
	x549, x550 = bits.Add32(x501, x532, uint32(uint1(x548)))
	var x551 uint32
	var x552 uint32
	x551, x552 = bits.Add32(x503, x534, uint32(uint1(x550)))
	var x553 uint32
	var x554 uint32
	x553, x554 = bits.Add32(x505, x536, uint32(uint1(x552)))
	var x555 uint32
	var x556 uint32
	x555, x556 = bits.Add32(x507, x538, uint32(uint1(x554)))
	var x557 uint32
	var x558 uint32
	x557, x558 = bits.Add32(x509, x540, uint32(uint1(x556)))
	var x559 uint32
	var x560 uint32
	x559, x560 = bits.Add32(x511, x542, uint32(uint1(x558)))
	var x561 uint32
	_, x561 = bits.Mul32(x543, 0x12547e1b)
	var x563 uint32
	var x564 uint32
	x564, x563 = bits.Mul32(x561, 0x10000000)
	var x565 uint32
	var x566 uint32
	x566, x565 = bits.Mul32(x561, 0x14def9de)
	var x567 uint32
	var x568 uint32
	x568, x567 = bits.Mul32(x561, 0xa2f79cd6)
	var x569 uint32
	var x570 uint32
	x570, x569 = bits.Mul32(x561, 0x5812631a)
	var x571 uint32
	var x572 uint32
	x572, x571 = bits.Mul32(x561, 0x5cf5d3ed)
	var x573 uint32
	var x574 uint32
	x573, x574 = bits.Add32(x572, x569, uint32(0x0))
	var x575 uint32
	var x576 uint32
	x575, x576 = bits.Add32(x570, x567, uint32(uint1(x574)))
	var x577 uint32
	var x578 uint32
	x577, x578 = bits.Add32(x568, x565, uint32(uint1(x576)))
	x579 := (uint32(uint1(x578)) + x566)
	var x581 uint32
	_, x581 = bits.Add32(x543, x571, uint32(0x0))
	var x582 uint32
	var x583 uint32
	x582, x583 = bits.Add32(x545, x573, uint32(uint1(x581)))
	var x584 uint32
	var x585 uint32
	x584, x585 = bits.Add32(x547, x575, uint32(uint1(x583)))
	var x586 uint32
	var x587 uint32
	x586, x587 = bits.Add32(x549, x577, uint32(uint1(x585)))
	var x588 uint32
	var x589 uint32
	x588, x589 = bits.Add32(x551, x579, uint32(uint1(x587)))
	var x590 uint32
	var x591 uint32
	x590, x591 = bits.Add32(x553, uint32(0x0), uint32(uint1(x589)))
	var x592 uint32
	var x593 uint32
	x592, x593 = bits.Add32(x555, uint32(0x0), uint32(uint1(x591)))
	var x594 uint32
	var x595 uint32
	x594, x595 = bits.Add32(x557, x563, uint32(uint1(x593)))
	var x596 uint32
	var x597 uint32
	x596, x597 = bits.Add32(x559, x564, uint32(uint1(x595)))
	x598 := (uint32(uint1(x597)) + uint32(uint1(x560)))
	var x599 uint32
	var x600 uint32
	x600, x599 = bits.Mul32(x7, arg2[7])
	var x601 uint32
	var x602 uint32
	x602, x601 = bits.Mul32(x7, arg2[6])
	var x603 uint32
	var x604 uint32
	x604, x603 = bits.Mul32(x7, arg2[5])
	var x605 uint32
	var x606 uint32
	x606, x605 = bits.Mul32(x7, arg2[4])
	var x607 uint32
	var x608 uint32
	x608, x607 = bits.Mul32(x7, arg2[3])
	var x609 uint32
	var x610 uint32
	x610, x609 = bits.Mul32(x7, arg2[2])
	var x611 uint32
	var x612 uint32
	x612, x611 = bits.Mul32(x7, arg2[1])
	var x613 uint32
	var x614 uint32
	x614, x613 = bits.Mul32(x7, arg2[0])
	var x615 uint32
	var x616 uint32
	x615, x616 = bits.Add32(x614, x611, uint32(0x0))
	var x617 uint32
	var x618 uint32
	x617, x618 = bits.Add32(x612, x609, uint32(uint1(x616)))
	var x619 uint32
	var x620 uint32
	x619, x620 = bits.Add32(x610, x607, uint32(uint1(x618)))
	var x621 uint32
	var x622 uint32
	x621, x622 = bits.Add32(x608, x605, uint32(uint1(x620)))
	var x623 uint32
	var x624 uint32
	x623, x624 = bits.Add32(x606, x603, uint32(uint1(x622)))
	var x625 uint32
	var x626 uint32
	x625, x626 = bits.Add32(x604, x601, uint32(uint1(x624)))
	var x627 uint32
	var x628 uint32
	x627, x628 = bits.Add32(x602, x599, uint32(uint1(x626)))
	x629 := (uint32(uint1(x628)) + x600)
	var x630 uint32
	var x631 uint32
	x630, x631 = bits.Add32(x582, x613, uint32(0x0))
	var x632 uint32
	var x633 uint32
	x632, x633 = bits.Add32(x584, x615, uint32(uint1(x631)))
	var x634 uint32
	var x635 uint32
	x634, x635 = bits.Add32(x586, x617, uint32(uint1(x633)))
	var x636 uint32
	var x637 uint32
	x636, x637 = bits.Add32(x588, x619, uint32(uint1(x635)))
	var x638 uint32
	var x639 uint32
	x638, x639 = bits.Add32(x590, x621, uint32(uint1(x637)))
	var x640 uint32
	var x641 uint32
	x640, x641 = bits.Add32(x592, x623, uint32(uint1(x639)))
	var x642 uint32
	var x643 uint32
	x642, x643 = bits.Add32(x594, x625, uint32(uint1(x641)))
	var x644 uint32
	var x645 uint32
	x644, x645 = bits.Add32(x596, x627, uint32(uint1(x643)))
	var x646 uint32
	var x647 uint32
	x646, x647 = bits.Add32(x598, x629, uint32(uint1(x645)))
	var x648 uint32
	_, x648 = bits.Mul32(x630, 0x12547e1b)
	var x650 uint32
	var x651 uint32
	x651, x650 = bits.Mul32(x648, 0x10000000)
	var x652 uint32
	var x653 uint32
	x653, x652 = bits.Mul32(x648, 0x14def9de)
	var x654 uint32
	var x655 uint32
	x655, x654 = bits.Mul32(x648, 0xa2f79cd6)
	var x656 uint32
	var x657 uint32
	x657, x656 = bits.Mul32(x648, 0x5812631a)
	var x658 uint32
	var x659 uint32
	x659, x658 = bits.Mul32(x648, 0x5cf5d3ed)
	var x660 uint32
	var x661 uint32
	x660, x661 = bits.Add32(x659, x656, uint32(0x0))
	var x662 uint32
	var x663 uint32
	x662, x663 = bits.Add32(x657, x654, uint32(uint1(x661)))
	var x664 uint32
	var x665 uint32
	x664, x665 = bits.Add32(x655, x652, uint32(uint1(x663)))
	x666 := (uint32(uint1(x665)) + x653)
	var x668 uint32
	_, x668 = bits.Add32(x630, x658, uint32(0x0))
	var x669 uint32
	var x670 uint32
	x669, x670 = bits.Add32(x632, x660, uint32(uint1(x668)))
	var x671 uint32
	var x672 uint32
	x671, x672 = bits.Add32(x634, x662, uint32(uint1(x670)))
	var x673 uint32
	var x674 uint32
	x673, x674 = bits.Add32(x636, x664, uint32(uint1(x672)))
	var x675 uint32
	var x676 uint32
	x675, x676 = bits.Add32(x638, x666, uint32(uint1(x674)))
	var x677 uint32
	var x678 uint32
	x677, x678 = bits.Add32(x640, uint32(0x0), uint32(uint1(x676)))
	var x679 uint32
	var x680 uint32
	x679, x680 = bits.Add32(x642, uint32(0x0), uint32(uint1(x678)))
	var x681 uint32
	var x682 uint32
	x681, x682 = bits.Add32(x644, x650, uint32(uint1(x680)))
	var x683 uint32
	var x684 uint32
	x683, x684 = bits.Add32(x646, x651, uint32(uint1(x682)))
	x685 := (uint32(uint1(x684)) + uint32(uint1(x647)))
	var x686 uint32
	var x687 uint32
	x686, x687 = bits.Sub32(x669, 0x5cf5d3ed, uint32(0x0))
	var x688 uint32
	var x689 uint32
	x688, x689 = bits.Sub32(x671, 0x5812631a, uint32(uint1(x687)))
	var x690 uint32
	var x691 uint32
	x690, x691 = bits.Sub32(x673, 0xa2f79cd6, uint32(uint1(x689)))
	var x692 uint32
	var x693 uint32
	x692, x693 = bits.Sub32(x675, 0x14def9de, uint32(uint1(x691)))
	var x694 uint32
	var x695 uint32
	x694, x695 = bits.Sub32(x677, uint32(0x0), uint32(uint1(x693)))
	var x696 uint32
	var x697 uint32
	x696, x697 = bits.Sub32(x679, uint32(0x0), uint32(uint1(x695)))
	var x698 uint32
	var x699 uint32
	x698, x699 = bits.Sub32(x681, uint32(0x0), uint32(uint1(x697)))
	var x700 uint32
	var x701 uint32
	x700, x701 = bits.Sub32(x683, 0x10000000, uint32(uint1(x699)))
	var x703 uint32
	_, x703 = bits.Sub32(x685, uint32(0x0), uint32(uint1(x701)))
	var x704 uint32
	cmovznzU32(&x704, uint1(x703), x686, x669)
	var x705 uint32
	cmovznzU32(&x705, uint1(x703), x688, x671)
	var x706 uint32
	cmovznzU32(&x706, uint1(x703), x690, x673)
	var x707 uint32
	cmovznzU32(&x707, uint1(x703), x692, x675)
	var x708 uint32
	cmovznzU32(&x708, uint1(x703), x694, x677)
	var x709 uint32
	cmovznzU32(&x709, uint1(x703), x696, x679)
	var x710 uint32
	cmovznzU32(&x710, uint1(x703), x698, x681)
	var x711 uint32
	cmovznzU32(&x711, uint1(x703), x700, x683)
	out1[0] = x704
	out1[1] = x705
	out1[2] = x706
	out1[3] = x707
	out1[4] = x708
	out1[5] = x709
	out1[6] = x710
	out1[7] = x711
}

// Square squares a field element in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
//   0 ≤ eval out1 < m
//
func Square(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement) {
	x1 := arg1[1]
	x2 := arg1[2]
	x3 := arg1[3]
	x4 := arg1[4]
	x5 := arg1[5]
	x6 := arg1[6]
	x7 := arg1[7]
	x8 := arg1[0]
	var x9 uint32
	var x10 uint32
	x10, x9 = bits.Mul32(x8, arg1[7])
	var x11 uint32
	var x12 uint32
	x12, x11 = bits.Mul32(x8, arg1[6])
	var x13 uint32
	var x14 uint32
	x14, x13 = bits.Mul32(x8, arg1[5])
	var x15 uint32
	var x16 uint32
	x16, x15 = bits.Mul32(x8, arg1[4])
	var x17 uint32
	var x18 uint32
	x18, x17 = bits.Mul32(x8, arg1[3])
	var x19 uint32
	var x20 uint32
	x20, x19 = bits.Mul32(x8, arg1[2])
	var x21 uint32
	var x22 uint32
	x22, x21 = bits.Mul32(x8, arg1[1])
	var x23 uint32
	var x24 uint32
	x24, x23 = bits.Mul32(x8, arg1[0])
	var x25 uint32
	var x26 uint32
	x25, x26 = bits.Add32(x24, x21, uint32(0x0))
	var x27 uint32
	var x28 uint32
	x27, x28 = bits.Add32(x22, x19, uint32(uint1(x26)))
	var x29 uint32
	var x30 uint32
	x29, x30 = bits.Add32(x20, x17, uint32(uint1(x28)))
	var x31 uint32
	var x32 uint32
	x31, x32 = bits.Add32(x18, x15, uint32(uint1(x30)))
	var x33 uint32
	var x34 uint32
	x33, x34 = bits.Add32(x16, x13, uint32(uint1(x32)))
	var x35 uint32
	var x36 uint32
	x35, x36 = bits.Add32(x14, x11, uint32(uint1(x34)))
	var x37 uint32
	var x38 uint32
	x37, x38 = bits.Add32(x12, x9, uint32(uint1(x36)))
	x39 := (uint32(uint1(x38)) + x10)
	var x40 uint32
	_, x40 = bits.Mul32(x23, 0x12547e1b)
	var x42 uint32
	var x43 uint32
	x43, x42 = bits.Mul32(x40, 0x10000000)
	var x44 uint32
	var x45 uint32
	x45, x44 = bits.Mul32(x40, 0x14def9de)
	var x46 uint32
	var x47 uint32
	x47, x46 = bits.Mul32(x40, 0xa2f79cd6)
	var x48 uint32
	var x49 uint32
	x49, x48 = bits.Mul32(x40, 0x5812631a)
	var x50 uint32
	var x51 uint32
	x51, x50 = bits.Mul32(x40, 0x5cf5d3ed)
	var x52 uint32
	var x53 uint32
	x52, x53 = bits.Add32(x51, x48, uint32(0x0))
	var x54 uint32
	var x55 uint32
	x54, x55 = bits.Add32(x49, x46, uint32(uint1(x53)))
	var x56 uint32
	var x57 uint32
	x56, x57 = bits.Add32(x47, x44, uint32(uint1(x55)))
	x58 := (uint32(uint1(x57)) + x45)
	var x60 uint32
	_, x60 = bits.Add32(x23, x50, uint32(0x0))
	var x61 uint32
	var x62 uint32
	x61, x62 = bits.Add32(x25, x52, uint32(uint1(x60)))
	var x63 uint32
	var x64 uint32
	x63, x64 = bits.Add32(x27, x54, uint32(uint1(x62)))
	var x65 uint32
	var x66 uint32
	x65, x66 = bits.Add32(x29, x56, uint32(uint1(x64)))
	var x67 uint32
	var x68 uint32
	x67, x68 = bits.Add32(x31, x58, uint32(uint1(x66)))
	var x69 uint32
	var x70 uint32
	x69, x70 = bits.Add32(x33, uint32(0x0), uint32(uint1(x68)))
	var x71 uint32
	var x72 uint32
	x71, x72 = bits.Add32(x35, uint32(0x0), uint32(uint1(x70)))
	var x73 uint32
	var x74 uint32
	x73, x74 = bits.Add32(x37, x42, uint32(uint1(x72)))
	var x75 uint32
	var x76 uint32
	x75, x76 = bits.Add32(x39, x43, uint32(uint1(x74)))
	var x77 uint32
	var x78 uint32
	x78, x77 = bits.Mul32(x1, arg1[7])
	var x79 uint32
	var x80 uint32
	x80, x79 = bits.Mul32(x1, arg1[6])
	var x81 uint32
	var x82 uint32
	x82, x81 = bits.Mul32(x1, arg1[5])
	var x83 uint32
	var x84 uint32
	x84, x83 = bits.Mul32(x1, arg1[4])
	var x85 uint32
	var x86 uint32
	x86, x85 = bits.Mul32(x1, arg1[3])
	var x87 uint32
	var x88 uint32
	x88, x87 = bits.Mul32(x1, arg1[2])
	var x89 uint32
	var x90 uint32
	x90, x89 = bits.Mul32(x1, arg1[1])
	var x91 uint32
	var x92 uint32
	x92, x91 = bits.Mul32(x1, arg1[0])
	var x93 uint32
	var x94 uint32
	x93, x94 = bits.Add32(x92, x89, uint32(0x0))
	var x95 uint32
	var x96 uint32
	x95, x96 = bits.Add32(x90, x87, uint32(uint1(x94)))
	var x97 uint32
	var x98 uint32
	x97, x98 = bits.Add32(x88, x85, uint32(uint1(x96)))
	var x99 uint32
	var x100 uint32
	x99, x100 = bits.Add32(x86, x83, uint32(uint1(x98)))
	var x101 uint32
	var x102 uint32
	x101, x102 = bits.Add32(x84, x81, uint32(uint1(x100)))
	var x103 uint32
	var x104 uint32
	x103, x104 = bits.Add32(x82, x79, uint32(uint1(x102)))
	var x105 uint32
	var x106 uint32
	x105, x106 = bits.Add32(x80, x77, uint32(uint1(x104)))
	x107 := (uint32(uint1(x106)) + x78)
	var x108 uint32
	var x109 uint32
	x108, x109 = bits.Add32(x61, x91, uint32(0x0))
	var x110 uint32
	var x111 uint32
	x110, x111 = bits.Add32(x63, x93, uint32(uint1(x109)))
	var x112 uint32
	var x113 uint32
	x112, x113 = bits.Add32(x65, x95, uint32(uint1(x111)))
	var x114 uint32
	var x115 uint32
	x114, x115 = bits.Add32(x67, x97, uint32(uint1(x113)))
	var x116 uint32
	var x117 uint32
	x116, x117 = bits.Add32(x69, x99, uint32(uint1(x115)))
	var x118 uint32
	var x119 uint32
	x118, x119 = bits.Add32(x71, x101, uint32(uint1(x117)))
	var x120 uint32
	var x121 uint32
	x120, x121 = bits.Add32(x73, x103, uint32(uint1(x119)))
	var x122 uint32
	var x123 uint32
	x122, x123 = bits.Add32(x75, x105, uint32(uint1(x121)))
	var x124 uint32
	var x125 uint32
	x124, x125 = bits.Add32(uint32(uint1(x76)), x107, uint32(uint1(x123)))
	var x126 uint32
	_, x126 = bits.Mul32(x108, 0x12547e1b)
	var x128 uint32
	var x129 uint32
	x129, x128 = bits.Mul32(x126, 0x10000000)
	var x130 uint32
	var x131 uint32
	x131, x130 = bits.Mul32(x126, 0x14def9de)
	var x132 uint32
	var x133 uint32
	x133, x132 = bits.Mul32(x126, 0xa2f79cd6)
	var x134 uint32
	var x135 uint32
	x135, x134 = bits.Mul32(x126, 0x5812631a)
	var x136 uint32
	var x137 uint32
	x137, x136 = bits.Mul32(x126, 0x5cf5d3ed)
	var x138 uint32
	var x139 uint32
	x138, x139 = bits.Add32(x137, x134, uint32(0x0))
	var x140 uint32
	var x141 uint32
	x140, x141 = bits.Add32(x135, x132, uint32(uint1(x139)))
	var x142 uint32
	var x143 uint32
	x142, x143 = bits.Add32(x133, x130, uint32(uint1(x141)))
	x144 := (uint32(uint1(x143)) + x131)
	var x146 uint32
	_, x146 = bits.Add32(x108, x136, uint32(0x0))
	var x147 uint32
	var x148 uint32
	x147, x148 = bits.Add32(x110, x138, uint32(uint1(x146)))
	var x149 uint32
	var x150 uint32
	x149, x150 = bits.Add32(x112, x140, uint32(uint1(x148)))
	var x151 uint32
	var x152 uint32
	x151, x152 = bits.Add32(x114, x142, uint32(uint1(x150)))
	var x153 uint32
	var x154 uint32
	x153, x154 = bits.Add32(x116, x144, uint32(uint1(x152)))
	var x155 uint32
	var x156 uint32
	x155, x156 = bits.Add32(x118, uint32(0x0), uint32(uint1(x154)))
	var x157 uint32
	var x158 uint32
	x157, x158 = bits.Add32(x120, uint32(0x0), uint32(uint1(x156)))
	var x159 uint32
	var x160 uint32
	x159, x160 = bits.Add32(x122, x128, uint32(uint1(x158)))
	var x161 uint32
	var x162 uint32
	x161, x162 = bits.Add32(x124, x129, uint32(uint1(x160)))
	x163 := (uint32(uint1(x162)) + uint32(uint1(x125)))
	var x164 uint32
	var x165 uint32
	x165, x164 = bits.Mul32(x2, arg1[7])
	var x166 uint32
	var x167 uint32
	x167, x166 = bits.Mul32(x2, arg1[6])
	var x168 uint32
	var x169 uint32
	x169, x168 = bits.Mul32(x2, arg1[5])
	var x170 uint32
	var x171 uint32
	x171, x170 = bits.Mul32(x2, arg1[4])
	var x172 uint32
	var x173 uint32
	x173, x172 = bits.Mul32(x2, arg1[3])
	var x174 uint32
	var x175 uint32
	x175, x174 = bits.Mul32(x2, arg1[2])
	var x176 uint32
	var x177 uint32
	x177, x176 = bits.Mul32(x2, arg1[1])
	var x178 uint32
	var x179 uint32
	x179, x178 = bits.Mul32(x2, arg1[0])
	var x180 uint32
	var x181 uint32
	x180, x181 = bits.Add32(x179, x176, uint32(0x0))
	var x182 uint32
	var x183 uint32
	x182, x183 = bits.Add32(x177, x174, uint32(uint1(x181)))
	var x184 uint32
	var x185 uint32
	x184, x185 = bits.Add32(x175, x172, uint32(uint1(x183)))
	var x186 uint32
	var x187 uint32
	x186, x187 = bits.Add32(x173, x170, uint32(uint1(x185)))
	var x188 uint32
	var x189 uint32
	x188, x189 = bits.Add32(x171, x168, uint32(uint1(x187)))
	var x190 uint32
	var x191 uint32
	x190, x191 = bits.Add32(x169, x166, uint32(uint1(x189)))
	var x192 uint32
	var x193 uint32
	x192, x193 = bits.Add32(x167, x164, uint32(uint1(x191)))
	x194 := (uint32(uint1(x193)) + x165)
	var x195 uint32
	var x196 uint32
	x195, x196 = bits.Add32(x147, x178, uint32(0x0))
	var x197 uint32
	var x198 uint32
	x197, x198 = bits.Add32(x149, x180, uint32(uint1(x196)))
	var x199 uint32
	var x200 uint32
	x199, x200 = bits.Add32(x151, x182, uint32(uint1(x198)))
	var x201 uint32
	var x202 uint32
	x201, x202 = bits.Add32(x153, x184, uint32(uint1(x200)))
	var x203 uint32
	var x204 uint32
	x203, x204 = bits.Add32(x155, x186, uint32(uint1(x202)))
	var x205 uint32
	var x206 uint32
	x205, x206 = bits.Add32(x157, x188, uint32(uint1(x204)))
	var x207 uint32
	var x208 uint32
	x207, x208 = bits.Add32(x159, x190, uint32(uint1(x206)))
	var x209 uint32
	var x210 uint32
	x209, x210 = bits.Add32(x161, x192, uint32(uint1(x208)))
	var x211 uint32
	var x212 uint32
	x211, x212 = bits.Add32(x163, x194, uint32(uint1(x210)))
	var x213 uint32
	_, x213 = bits.Mul32(x195, 0x12547e1b)
	var x215 uint32
	var x216 uint32
	x216, x215 = bits.Mul32(x213, 0x10000000)
	var x217 uint32
	var x218 uint32
	x218, x217 = bits.Mul32(x213, 0x14def9de)
	var x219 uint32
	var x220 uint32
	x220, x219 = bits.Mul32(x213, 0xa2f79cd6)
	var x221 uint32
	var x222 uint32
	x222, x221 = bits.Mul32(x213, 0x5812631a)
	var x223 uint32
	var x224 uint32
	x224, x223 = bits.Mul32(x213, 0x5cf5d3ed)
	var x225 uint32
	var x226 uint32
	x225, x226 = bits.Add32(x224, x221, uint32(0x0))
	var x227 uint32
	var x228 uint32
	x227, x228 = bits.Add32(x222, x219, uint32(uint1(x226)))
	var x229 uint32
	var x230 uint32
	x229, x230 = bits.Add32(x220, x217, uint32(uint1(x228)))
	x231 := (uint32(uint1(x230)) + x218)
	var x233 uint32
	_, x233 = bits.Add32(x195, x223, uint32(0x0))
	var x234 uint32
	var x235 uint32
	x234, x235 = bits.Add32(x197, x225, uint32(uint1(x233)))
	var x236 uint32
	var x237 uint32
	x236, x237 = bits.Add32(x199, x227, uint32(uint1(x235)))
	var x238 uint32
	var x239 uint32
	x238, x239 = bits.Add32(x201, x229, uint32(uint1(x237)))
	var x240 uint32
	var x241 uint32
	x240, x241 = bits.Add32(x203, x231, uint32(uint1(x239)))
	var x242 uint32
	var x243 uint32
	x242, x243 = bits.Add32(x205, uint32(0x0), uint32(uint1(x241)))
	var x244 uint32
	var x245 uint32
	x244, x245 = bits.Add32(x207, uint32(0x0), uint32(uint1(x243)))
	var x246 uint32
	var x247 uint32
	x246, x247 = bits.Add32(x209, x215, uint32(uint1(x245)))
	var x248 uint32
	var x249 uint32
	x248, x249 = bits.Add32(x211, x216, uint32(uint1(x247)))
	x250 := (uint32(uint1(x249)) + uint32(uint1(x212)))
	var x251 uint32
	var x252 uint32
	x252, x251 = bits.Mul32(x3, arg1[7])
	var x253 uint32
	var x254 uint32
	x254, x253 = bits.Mul32(x3, arg1[6])
	var x255 uint32
	var x256 uint32
	x256, x255 = bits.Mul32(x3, arg1[5])
	var x257 uint32
	var x258 uint32
	x258, x257 = bits.Mul32(x3, arg1[4])
	var x259 uint32
	var x260 uint32
	x260, x259 = bits.Mul32(x3, arg1[3])
	var x261 uint32
	var x262 uint32
	x262, x261 = bits.Mul32(x3, arg1[2])
	var x263 uint32
	var x264 uint32
	x264, x263 = bits.Mul32(x3, arg1[1])
	var x265 uint32
	var x266 uint32
	x266, x265 = bits.Mul32(x3, arg1[0])
	var x267 uint32
	var x268 uint32
	x267, x268 = bits.Add32(x266, x263, uint32(0x0))
	var x269 uint32
	var x270 uint32
	x269, x270 = bits.Add32(x264, x261, uint32(uint1(x268)))
	var x271 uint32
	var x272 uint32
	x271, x272 = bits.Add32(x262, x259, uint32(uint1(x270)))
	var x273 uint32
	var x274 uint32
	x273, x274 = bits.Add32(x260, x257, uint32(uint1(x272)))
	var x275 uint32
	var x276 uint32
	x275, x276 = bits.Add32(x258, x255, uint32(uint1(x274)))
	var x277 uint32
	var x278 uint32
	x277, x278 = bits.Add32(x256, x253, uint32(uint1(x276)))
	var x279 uint32
	var x280 uint32
	x279, x280 = bits.Add32(x254, x251, uint32(uint1(x278)))
	x281 := (uint32(uint1(x280)) + x252)
	var x282 uint32
	var x283 uint32
	x282, x283 = bits.Add32(x234, x265, uint32(0x0))
	var x284 uint32
	var x285 uint32
	x284, x285 = bits.Add32(x236, x267, uint32(uint1(x283)))
	var x286 uint32
	var x287 uint32
	x286, x287 = bits.Add32(x238, x269, uint32(uint1(x285)))
	var x288 uint32
	var x289 uint32
	x288, x289 = bits.Add32(x240, x271, uint32(uint1(x287)))
	var x290 uint32
	var x291 uint32
	x290, x291 = bits.Add32(x242, x273, uint32(uint1(x289)))
	var x292 uint32
	var x293 uint32
	x292, x293 = bits.Add32(x244, x275, uint32(uint1(x291)))
	var x294 uint32
	var x295 uint32
	x294, x295 = bits.Add32(x246, x277, uint32(uint1(x293)))
	var x296 uint32
	var x297 uint32
	x296, x297 = bits.Add32(x248, x279, uint32(uint1(x295)))
	var x298 uint32
	var x299 uint32
	x298, x299 = bits.Add32(x250, x281, uint32(uint1(x297)))
	var x300 uint32
	_, x300 = bits.Mul32(x282, 0x12547e1b)
	var x302 uint32
	var x303 uint32
	x303, x302 = bits.Mul32(x300, 0x10000000)
	var x304 uint32
	var x305 uint32
	x305, x304 = bits.Mul32(x300, 0x14def9de)
	var x306 uint32
	var x307 uint32
	x307, x306 = bits.Mul32(x300, 0xa2f79cd6)
	var x308 uint32
	var x309 uint32
	x309, x308 = bits.Mul32(x300, 0x5812631a)
	var x310 uint32
	var x311 uint32
	x311, x310 = bits.Mul32(x300, 0x5cf5d3ed)
	var x312 uint32
	var x313 uint32
	x312, x313 = bits.Add32(x311, x308, uint32(0x0))
	var x314 uint32
	var x315 uint32
	x314, x315 = bits.Add32(x309, x306, uint32(uint1(x313)))
	var x316 uint32
	var x317 uint32
	x316, x317 = bits.Add32(x307, x304, uint32(uint1(x315)))
	x318 := (uint32(uint1(x317)) + x305)
	var x320 uint32
	_, x320 = bits.Add32(x282, x310, uint32(0x0))
	var x321 uint32
	var x322 uint32
	x321, x322 = bits.Add32(x284, x312, uint32(uint1(x320)))
	var x323 uint32
	var x324 uint32
	x323, x324 = bits.Add32(x286, x314, uint32(uint1(x322)))
	var x325 uint32
	var x326 uint32
	x325, x326 = bits.Add32(x288, x316, uint32(uint1(x324)))
	var x327 uint32
	var x328 uint32
	x327, x328 = bits.Add32(x290, x318, uint32(uint1(x326)))
	var x329 uint32
	var x330 uint32
	x329, x330 = bits.Add32(x292, uint32(0x0), uint32(uint1(x328)))
	var x331 uint32
	var x332 uint32
	x331, x332 = bits.Add32(x294, uint32(0x0), uint32(uint1(x330)))
	var x333 uint32
	var x334 uint32
	x333, x334 = bits.Add32(x296, x302, uint32(uint1(x332)))
	var x335 uint32
	var x336 uint32
	x335, x336 = bits.Add32(x298, x303, uint32(uint1(x334)))
	x337 := (uint32(uint1(x336)) + uint32(uint1(x299)))
	var x338 uint32
	var x339 uint32
	x339, x338 = bits.Mul32(x4, arg1[7])
	var x340 uint32
	var x341 uint32
	x341, x340 = bits.Mul32(x4, arg1[6])
	var x342 uint32
	var x343 uint32
	x343, x342 = bits.Mul32(x4, arg1[5])
	var x344 uint32
	var x345 uint32
	x345, x344 = bits.Mul32(x4, arg1[4])
	var x346 uint32
	var x347 uint32
	x347, x346 = bits.Mul32(x4, arg1[3])
	var x348 uint32
	var x349 uint32
	x349, x348 = bits.Mul32(x4, arg1[2])
	var x350 uint32
	var x351 uint32
	x351, x350 = bits.Mul32(x4, arg1[1])
	var x352 uint32
	var x353 uint32
	x353, x352 = bits.Mul32(x4, arg1[0])
	var x354 uint32
	var x355 uint32
	x354, x355 = bits.Add32(x353, x350, uint32(0x0))
	var x356 uint32
	var x357 uint32
	x356, x357 = bits.Add32(x351, x348, uint32(uint1(x355)))
	var x358 uint32
	var x359 uint32
	x358, x359 = bits.Add32(x349, x346, uint32(uint1(x357)))
	var x360 uint32
	var x361 uint32
	x360, x361 = bits.Add32(x347, x344, uint32(uint1(x359)))
	var x362 uint32
	var x363 uint32
	x362, x363 = bits.Add32(x345, x342, uint32(uint1(x361)))
	var x364 uint32
	var x365 uint32
	x364, x365 = bits.Add32(x343, x340, uint32(uint1(x363)))
	var x366 uint32
	var x367 uint32
	x366, x367 = bits.Add32(x341, x338, uint32(uint1(x365)))
	x368 := (uint32(uint1(x367)) + x339)
	var x369 uint32
	var x370 uint32
	x369, x370 = bits.Add32(x321, x352, uint32(0x0))
	var x371 uint32
	var x372 uint32
	x371, x372 = bits.Add32(x323, x354, uint32(uint1(x370)))
	var x373 uint32
	var x374 uint32
	x373, x374 = bits.Add32(x325, x356, uint32(uint1(x372)))
	var x375 uint32
	var x376 uint32
	x375, x376 = bits.Add32(x327, x358, uint32(uint1(x374)))
	var x377 uint32
	var x378 uint32
	x377, x378 = bits.Add32(x329, x360, uint32(uint1(x376)))
	var x379 uint32
	var x380 uint32
	x379, x380 = bits.Add32(x331, x362, uint32(uint1(x378)))
	var x381 uint32
	var x382 uint32
	x381, x382 = bits.Add32(x333, x364, uint32(uint1(x380)))
	var x383 uint32
	var x384 uint32
	x383, x384 = bits.Add32(x335, x366, uint32(uint1(x382)))
	var x385 uint32
	var x386 uint32
	x385, x386 = bits.Add32(x337, x368, uint32(uint1(x384)))
	var x387 uint32
	_, x387 = bits.Mul32(x369, 0x12547e1b)
	var x389 uint32
	var x390 uint32
	x390, x389 = bits.Mul32(x387, 0x10000000)
	var x391 uint32
	var x392 uint32
	x392, x391 = bits.Mul32(x387, 0x14def9de)
	var x393 uint32
	var x394 uint32
	x394, x393 = bits.Mul32(x387, 0xa2f79cd6)
	var x395 uint32
	var x396 uint32
	x396, x395 = bits.Mul32(x387, 0x5812631a)
	var x397 uint32
	var x398 uint32
	x398, x397 = bits.Mul32(x387, 0x5cf5d3ed)
	var x399 uint32
	var x400 uint32
	x399, x400 = bits.Add32(x398, x395, uint32(0x0))
	var x401 uint32
	var x402 uint32
	x401, x402 = bits.Add32(x396, x393, uint32(uint1(x400)))
	var x403 uint32
	var x404 uint32
	x403, x404 = bits.Add32(x394, x391, uint32(uint1(x402)))
	x405 := (uint32(uint1(x404)) + x392)
	var x407 uint32
	_, x407 = bits.Add32(x369, x397, uint32(0x0))
	var x408 uint32
	var x409 uint32
	x408, x409 = bits.Add32(x371, x399, uint32(uint1(x407)))
	var x410 uint32
	var x411 uint32
	x410, x411 = bits.Add32(x373, x401, uint32(uint1(x409)))
	var x412 uint32
	var x413 uint32
	x412, x413 = bits.Add32(x375, x403, uint32(uint1(x411)))
	var x414 uint32
	var x415 uint32
	x414, x415 = bits.Add32(x377, x405, uint32(uint1(x413)))
	var x416 uint32
	var x417 uint32
	x416, x417 = bits.Add32(x379, uint32(0x0), uint32(uint1(x415)))
	var x418 uint32
	var x419 uint32
	x418, x419 = bits.Add32(x381, uint32(0x0), uint32(uint1(x417)))
	var x420 uint32
	var x421 uint32
	x420, x421 = bits.Add32(x383, x389, uint32(uint1(x419)))
	var x422 uint32
	var x423 uint32
	x422, x423 = bits.Add32(x385, x390, uint32(uint1(x421)))
	x424 := (uint32(uint1(x423)) + uint32(uint1(x386)))
	var x425 uint32
	var x426 uint32
	x426, x425 = bits.Mul32(x5, arg1[7])
	var x427 uint32
	var x428 uint32
	x428, x427 = bits.Mul32(x5, arg1[6])
	var x429 uint32
	var x430 uint32
	x430, x429 = bits.Mul32(x5, arg1[5])
	var x431 uint32
	var x432 uint32
	x432, x431 = bits.Mul32(x5, arg1[4])
	var x433 uint32
	var x434 uint32
	x434, x433 = bits.Mul32(x5, arg1[3])
	var x435 uint32
	var x436 uint32
	x436, x435 = bits.Mul32(x5, arg1[2])
	var x437 uint32
	var x438 uint32
	x438, x437 = bits.Mul32(x5, arg1[1])
	var x439 uint32
	var x440 uint32
	x440, x439 = bits.Mul32(x5, arg1[0])
	var x441 uint32
	var x442 uint32
	x441, x442 = bits.Add32(x440, x437, uint32(0x0))
	var x443 uint32
	var x444 uint32
	x443, x444 = bits.Add32(x438, x435, uint32(uint1(x442)))
	var x445 uint32
	var x446 uint32
	x445, x446 = bits.Add32(x436, x433, uint32(uint1(x444)))
	var x447 uint32
	var x448 uint32
	x447, x448 = bits.Add32(x434, x431, uint32(uint1(x446)))
	var x449 uint32
	var x450 uint32
	x449, x450 = bits.Add32(x432, x429, uint32(uint1(x448)))
	var x451 uint32
	var x452 uint32
	x451, x452 = bits.Add32(x430, x427, uint32(uint1(x450)))
	var x453 uint32
	var x454 uint32
	x453, x454 = bits.Add32(x428, x425, uint32(uint1(x452)))
	x455 := (uint32(uint1(x454)) + x426)
	var x456 uint32
	var x457 uint32
	x456, x457 = bits.Add32(x408, x439, uint32(0x0))
	var x458 uint32
	var x459 uint32
	x458, x459 = bits.Add32(x410, x441, uint32(uint1(x457)))
	var x460 uint32
	var x461 uint32
	x460, x461 = bits.Add32(x412, x443, uint32(uint1(x459)))
	var x462 uint32
	var x463 uint32
	x462, x463 = bits.Add32(x414, x445, uint32(uint1(x461)))
	var x464 uint32
	var x465 uint32
	x464, x465 = bits.Add32(x416, x447, uint32(uint1(x463)))
	var x466 uint32
	var x467 uint32
	x466, x467 = bits.Add32(x418, x449, uint32(uint1(x465)))
	var x468 uint32
	var x469 uint32
	x468, x469 = bits.Add32(x420, x451, uint32(uint1(x467)))
	var x470 uint32
	var x471 uint32
	x470, x471 = bits.Add32(x422, x453, uint32(uint1(x469)))
	var x472 uint32
	var x473 uint32
	x472, x473 = bits.Add32(x424, x455, uint32(uint1(x471)))
	var x474 uint32
	_, x474 = bits.Mul32(x456, 0x12547e1b)
	var x476 uint32
	var x477 uint32
	x477, x476 = bits.Mul32(x474, 0x10000000)
	var x478 uint32
	var x479 uint32
	x479, x478 = bits.Mul32(x474, 0x14def9de)
	var x480 uint32
	var x481 uint32
	x481, x480 = bits.Mul32(x474, 0xa2f79cd6)
	var x482 uint32
	var x483 uint32
	x483, x482 = bits.Mul32(x474, 0x5812631a)
	var x484 uint32
	var x485 uint32
	x485, x484 = bits.Mul32(x474, 0x5cf5d3ed)
	var x486 uint32
	var x487 uint32
	x486, x487 = bits.Add32(x485, x482, uint32(0x0))
	var x488 uint32
	var x489 uint32
	x488, x489 = bits.Add32(x483, x480, uint32(uint1(x487)))
	var x490 uint32
	var x491 uint32
	x490, x491 = bits.Add32(x481, x478, uint32(uint1(x489)))
	x492 := (uint32(uint1(x491)) + x479)
	var x494 uint32
	_, x494 = bits.Add32(x456, x484, uint32(0x0))
	var x495 uint32
	var x496 uint32
	x495, x496 = bits.Add32(x458, x486, uint32(uint1(x494)))
	var x497 uint32
	var x498 uint32
	x497, x498 = bits.Add32(x460, x488, uint32(uint1(x496)))
	var x499 uint32
	var x500 uint32
	x499, x500 = bits.Add32(x462, x490, uint32(uint1(x498)))
	var x501 uint32
	var x502 uint32
	x501, x502 = bits.Add32(x464, x492, uint32(uint1(x500)))
	var x503 uint32
	var x504 uint32
	x503, x504 = bits.Add32(x466, uint32(0x0), uint32(uint1(x502)))
	var x505 uint32
	var x506 uint32
	x505, x506 = bits.Add32(x468, uint32(0x0), uint32(uint1(x504)))
	var x507 uint32
	var x508 uint32
	x507, x508 = bits.Add32(x470, x476, uint32(uint1(x506)))
	var x509 uint32
	var x510 uint32
	x509, x510 = bits.Add32(x472, x477, uint32(uint1(x508)))
	x511 := (uint32(uint1(x510)) + uint32(uint1(x473)))
	var x512 uint32
	var x513 uint32
	x513, x512 = bits.Mul32(x6, arg1[7])
	var x514 uint32
	var x515 uint32
	x515, x514 = bits.Mul32(x6, arg1[6])
	var x516 uint32
	var x517 uint32
	x517, x516 = bits.Mul32(x6, arg1[5])
	var x518 uint32
	var x519 uint32
	x519, x518 = bits.Mul32(x6, arg1[4])
	var x520 uint32
	var x521 uint32
	x521, x520 = bits.Mul32(x6, arg1[3])
	var x522 uint32
	var x523 uint32
	x523, x522 = bits.Mul32(x6, arg1[2])
	var x524 uint32
	var x525 uint32
	x525, x524 = bits.Mul32(x6, arg1[1])
	var x526 uint32
	var x527 uint32
	x527, x526 = bits.Mul32(x6, arg1[0])
	var x528 uint32
	var x529 uint32
	x528, x529 = bits.Add32(x527, x524, uint32(0x0))
	var x530 uint32
	var x531 uint32
	x530, x531 = bits.Add32(x525, x522, uint32(uint1(x529)))
	var x532 uint32
	var x533 uint32
	x532, x533 = bits.Add32(x523, x520, uint32(uint1(x531)))
	var x534 uint32
	var x535 uint32
	x534, x535 = bits.Add32(x521, x518, uint32(uint1(x533)))
	var x536 uint32
	var x537 uint32
	x536, x537 = bits.Add32(x519, x516, uint32(uint1(x535)))
	var x538 uint32
	var x539 uint32
	x538, x539 = bits.Add32(x517, x514, uint32(uint1(x537)))
	var x540 uint32
	var x541 uint32
	x540, x541 = bits.Add32(x515, x512, uint32(uint1(x539)))
	x542 := (uint32(uint1(x541)) + x513)
	var x543 uint32
	var x544 uint32
	x543, x544 = bits.Add32(x495, x526, uint32(0x0))
	var x545 uint32
	var x546 uint32
	x545, x546 = bits.Add32(x497, x528, uint32(uint1(x544)))
	var x547 uint32
	var x548 uint32
	x547, x548 = bits.Add32(x499, x530, uint32(uint1(x546)))
	var x549 uint32
	var x550 uint32
	x549, x550 = bits.Add32(x501, x532, uint32(uint1(x548)))
	var x551 uint32
	var x552 uint32
	x551, x552 = bits.Add32(x503, x534, uint32(uint1(x550)))
	var x553 uint32
	var x554 uint32
	x553, x554 = bits.Add32(x505, x536, uint32(uint1(x552)))
	var x555 uint32
	var x556 uint32
	x555, x556 = bits.Add32(x507, x538, uint32(uint1(x554)))
	var x557 uint32
	var x558 uint32
	x557, x558 = bits.Add32(x509, x540, uint32(uint1(x556)))
	var x559 uint32
	var x560 uint32
	x559, x560 = bits.Add32(x511, x542, uint32(uint1(x558)))
	var x561 uint32
	_, x561 = bits.Mul32(x543, 0x12547e1b)
	var x563 uint32
	var x564 uint32
	x564, x563 = bits.Mul32(x561, 0x10000000)
	var x565 uint32
	var x566 uint32
	x566, x565 = bits.Mul32(x561, 0x14def9de)
	var x567 uint32
	var x568 uint32
	x568, x567 = bits.Mul32(x561, 0xa2f79cd6)
	var x569 uint32
	var x570 uint32
	x570, x569 = bits.Mul32(x561, 0x5812631a)
	var x571 uint32
	var x572 uint32
	x572, x571 = bits.Mul32(x561, 0x5cf5d3ed)
	var x573 uint32
	var x574 uint32
	x573, x574 = bits.Add32(x572, x569, uint32(0x0))
	var x575 uint32
	var x576 uint32
	x575, x576 = bits.Add32(x570, x567, uint32(uint1(x574)))
	var x577 uint32
	var x578 uint32
	x577, x578 = bits.Add32(x568, x565, uint32(uint1(x576)))
	x579 := (uint32(uint1(x578)) + x566)
	var x581 uint32
	_, x581 = bits.Add32(x543, x571, uint32(0x0))
	var x582 uint32
	var x583 uint32
	x582, x583 = bits.Add32(x545, x573, uint32(uint1(x581)))
	var x584 uint32
	var x585 uint32
	x584, x585 = bits.Add32(x547, x575, uint32(uint1(x583)))
	var x586 uint32
	var x587 uint32
	x586, x587 = bits.Add32(x549, x577, uint32(uint1(x585)))
	var x588 uint32
	var x589 uint32
	x588, x589 = bits.Add32(x551, x579, uint32(uint1(x587)))
	var x590 uint32
	var x591 uint32
	x590, x591 = bits.Add32(x553, uint32(0x0), uint32(uint1(x589)))
	var x592 uint32
	var x593 uint32
	x592, x593 = bits.Add32(x555, uint32(0x0), uint32(uint1(x591)))
	var x594 uint32
	var x595 uint32
	x594, x595 = bits.Add32(x557, x563, uint32(uint1(x593)))
	var x596 uint32
	var x597 uint32
	x596, x597 = bits.Add32(x559, x564, uint32(uint1(x595)))
	x598 := (uint32(uint1(x597)) + uint32(uint1(x560)))
	var x599 uint32
	var x600 uint32
	x600, x599 = bits.Mul32(x7, arg1[7])
	var x601 uint32
	var x602 uint32
	x602, x601 = bits.Mul32(x7, arg1[6])
	var x603 uint32
	var x604 uint32
	x604, x603 = bits.Mul32(x7, arg1[5])
	var x605 uint32
	var x606 uint32
	x606, x605 = bits.Mul32(x7, arg1[4])
	var x607 uint32
	var x608 uint32
	x608, x607 = bits.Mul32(x7, arg1[3])
	var x609 uint32
	var x610 uint32
	x610, x609 = bits.Mul32(x7, arg1[2])
	var x611 uint32
	var x612 uint32
	x612, x611 = bits.Mul32(x7, arg1[1])
	var x613 uint32
	var x614 uint32
	x614, x613 = bits.Mul32(x7, arg1[0])
	var x615 uint32
	var x616 uint32
	x615, x616 = bits.Add32(x614, x611, uint32(0x0))
	var x617 uint32
	var x618 uint32
	x617, x618 = bits.Add32(x612, x609, uint32(uint1(x616)))
	var x619 uint32
	var x620 uint32
	x619, x620 = bits.Add32(x610, x607, uint32(uint1(x618)))
	var x621 uint32
	var x622 uint32
	x621, x622 = bits.Add32(x608, x605, uint32(uint1(x620)))
	var x623 uint32
	var x624 uint32
	x623, x624 = bits.Add32(x606, x603, uint32(uint1(x622)))
	var x625 uint32
	var x626 uint32
	x625, x626 = bits.Add32(x604, x601, uint32(uint1(x624)))
	var x627 uint32
	var x628 uint32
	x627, x628 = bits.Add32(x602, x599, uint32(uint1(x626)))
	x629 := (uint32(uint1(x628)) + x600)
	var x630 uint32
	var x631 uint32
	x630, x631 = bits.Add32(x582, x613, uint32(0x0))
	var x632 uint32
	var x633 uint32
	x632, x633 = bits.Add32(x584, x615, uint32(uint1(x631)))
	var x634 uint32
	var x635 uint32
	x634, x635 = bits.Add32(x586, x617, uint32(uint1(x633)))
	var x636 uint32
	var x637 uint32
	x636, x637 = bits.Add32(x588, x619, uint32(uint1(x635)))
	var x638 uint32
	var x639 uint32
	x638, x639 = bits.Add32(x590, x621, uint32(uint1(x637)))
	var x640 uint32
	var x641 uint32
	x640, x641 = bits.Add32(x592, x623, uint32(uint1(x639)))
	var x642 uint32
	var x643 uint32
	x642, x643 = bits.Add32(x594, x625, uint32(uint1(x641)))
	var x644 uint32
	var x645 uint32
	x644, x645 = bits.Add32(x596, x627, uint32(uint1(x643)))
	var x646 uint32
	var x647 uint32
	x646, x647 = bits.Add32(x598, x629, uint32(uint1(x645)))
	var x648 uint32
	_, x648 = bits.Mul32(x630, 0x12547e1b)
	var x650 uint32
	var x651 uint32
	x651, x650 = bits.Mul32(x648, 0x10000000)
	var x652 uint32
	var x653 uint32
	x653, x652 = bits.Mul32(x648, 0x14def9de)
	var x654 uint32
	var x655 uint32
	x655, x654 = bits.Mul32(x648, 0xa2f79cd6)
	var x656 uint32
	var x657 uint32
	x657, x656 = bits.Mul32(x648, 0x5812631a)
	var x658 uint32
	var x659 uint32
	x659, x658 = bits.Mul32(x648, 0x5cf5d3ed)
	var x660 uint32
	var x661 uint32
	x660, x661 = bits.Add32(x659, x656, uint32(0x0))
	var x662 uint32
	var x663 uint32
	x662, x663 = bits.Add32(x657, x654, uint32(uint1(x661)))
	var x664 uint32
	var x665 uint32
	x664, x665 = bits.Add32(x655, x652, uint32(uint1(x663)))
	x666 := (uint32(uint1(x665)) + x653)
	var x668 uint32
	_, x668 = bits.Add32(x630, x658, uint32(0x0))
	var x669 uint32
	var x670 uint32
	x669, x670 = bits.Add32(x632, x660, uint32(uint1(x668)))
	var x671 uint32
	var x672 uint32
	x671, x672 = bits.Add32(x634, x662, uint32(uint1(x670)))
	var x673 uint32
	var x674 uint32
	x673, x674 = bits.Add32(x636, x664, uint32(uint1(x672)))
	var x675 uint32
	var x676 uint32
	x675, x676 = bits.Add32(x638, x666, uint32(uint1(x674)))
	var x677 uint32
	var x678 uint32
	x677, x678 = bits.Add32(x640, uint32(0x0), uint32(uint1(x676)))
	var x679 uint32
	var x680 uint32
	x679, x680 = bits.Add32(x642, uint32(0x0), uint32(uint1(x678)))
	var x681 uint32
	var x682 uint32
	x681, x682 = bits.Add32(x644, x650, uint32(uint1(x680)))
	var x683 uint32
	var x684 uint32
	x683, x684 = bits.Add32(x646, x651, uint32(uint1(x682)))
	x685 := (uint32(uint1(x684)) + uint32(uint1(x647)))
	var x686 uint32
	var x687 uint32
	x686, x687 = bits.Sub32(x669, 0x5cf5d3ed, uint32(0x0))
	var x688 uint32
	var x689 uint32
	x688, x689 = bits.Sub32(x671, 0x5812631a, uint32(uint1(x687)))
	var x690 uint32
	var x691 uint32
	x690, x691 = bits.Sub32(x673, 0xa2f79cd6, uint32(uint1(x689)))
	var x692 uint32
	var x693 uint32
	x692, x693 = bits.Sub32(x675, 0x14def9de, uint32(uint1(x691)))
	var x694 uint32
	var x695 uint32
	x694, x695 = bits.Sub32(x677, uint32(0x0), uint32(uint1(x693)))
	var x696 uint32
	var x697 uint32
	x696, x697 = bits.Sub32(x679, uint32(0x0), uint32(uint1(x695)))
	var x698 uint32
	var x699 uint32
	x698, x699 = bits.Sub32(x681, uint32(0x0), uint32(uint1(x697)))
	var x700 uint32
	var x701 uint32
	x700, x701 = bits.Sub32(x683, 0x10000000, uint32(uint1(x699)))
	var x703 uint32
	_, x703 = bits.Sub32(x685, uint32(0x0), uint32(uint1(x701)))
	var x704 uint32
	cmovznzU32(&x704, uint1(x703), x686, x669)
	var x705 uint32
	cmovznzU32(&x705, uint1(x703), x688, x671)
	var x706 uint32
	cmovznzU32(&x706, uint1(x703), x690, x673)
	var x707 uint32
	cmovznzU32(&x707, uint1(x703), x692, x675)
	var x708 uint32
	cmovznzU32(&x708, uint1(x703), x694, x677)
	var x709 uint32
	cmovznzU32(&x709, uint1(x703), x696, x679)
	var x710 uint32
	cmovznzU32(&x710, uint1(x703), x698, x681)
	var x711 uint32
	cmovznzU32(&x711, uint1(x703), x700, x683)
	out1[0] = x704
	out1[1] = x705
	out1[2] = x706
	out1[3] = x707
	out1[4] = x708
	out1[5] = x709
	out1[6] = x710
	out1[7] = x711
}

// Add adds two field elements in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
//   0 ≤ eval arg2 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
//   0 ≤ eval out1 < m
//
func Add(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement, arg2 *MontgomeryDomainFieldElement) {
	var x1 uint32
	var x2 uint32
	x1, x2 = bits.Add32(arg1[0], arg2[0], uint32(0x0))
	var x3 uint32
	var x4 uint32
	x3, x4 = bits.Add32(arg1[1], arg2[1], uint32(uint1(x2)))
	var x5 uint32
	var x6 uint32
	x5, x6 = bits.Add32(arg1[2], arg2[2], uint32(uint1(x4)))
	var x7 uint32
	var x8 uint32
	x7, x8 = bits.Add32(arg1[3], arg2[3], uint32(uint1(x6)))
	var x9 uint32
	var x10 uint32
	x9, x10 = bits.Add32(arg1[4], arg2[4], uint32(uint1(x8)))
	var x11 uint32
	var x12 uint32
	x11, x12 = bits.Add32(arg1[5], arg2[5], uint32(uint1(x10)))
	var x13 uint32
	var x14 uint32
	x13, x14 = bits.Add32(arg1[6], arg2[6], uint32(uint1(x12)))
	var x15 uint32
	var x16 uint32
	x15, x16 = bits.Add32(arg1[7], arg2[7], uint32(uint1(x14)))
	var x17 uint32
	var x18 uint32
	x17, x18 = bits.Sub32(x1, 0x5cf5d3ed, uint32(0x0))
	var x19 uint32
	var x20 uint32
	x19, x20 = bits.Sub32(x3, 0x5812631a, uint32(uint1(x18)))
	var x21 uint32
	var x22 uint32
	x21, x22 = bits.Sub32(x5, 0xa2f79cd6, uint32(uint1(x20)))
	var x23 uint32
	var x24 uint32
	x23, x24 = bits.Sub32(x7, 0x14def9de, uint32(uint1(x22)))
	var x25 uint32
	var x26 uint32
	x25, x26 = bits.Sub32(x9, uint32(0x0), uint32(uint1(x24)))
	var x27 uint32
	var x28 uint32
	x27, x28 = bits.Sub32(x11, uint32(0x0), uint32(uint1(x26)))
	var x29 uint32
	var x30 uint32
	x29, x30 = bits.Sub32(x13, uint32(0x0), uint32(uint1(x28)))
	var x31 uint32
	var x32 uint32
	x31, x32 = bits.Sub32(x15, 0x10000000, uint32(uint1(x30)))
	var x34 uint32
	_, x34 = bits.Sub32(uint32(uint1(x16)), uint32(0x0), uint32(uint1(x32)))
	var x35 uint32
	cmovznzU32(&x35, uint1(x34), x17, x1)
	var x36 uint32
	cmovznzU32(&x36, uint1(x34), x19, x3)
	var x37 uint32
	cmovznzU32(&x37, uint1(x34), x21, x5)
	var x38 uint32
	cmovznzU32(&x38, uint1(x34), x23, x7)
	var x39 uint32
	cmovznzU32(&x39, uint1(x34), x25, x9)
	var x40 uint32
	cmovznzU32(&x40, uint1(x34), x27, x11)
	var x41 uint32
	cmovznzU32(&x41, uint1(x34), x29, x13)
	var x42 uint32
	cmovznzU32(&x42, uint1(x34), x31, x15)
	out1[0] = x35
	out1[1] = x36
	out1[2] = x37
	out1[3] = x38
	out1[4] = x39
	out1[5] = x40
	out1[6] = x41
	out1[7] = x42
}

// Sub subtracts two field elements in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
//   0 ≤ eval arg2 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
//   0 ≤ eval out1 < m
//
func Sub(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement, arg2 *MontgomeryDomainFieldElement) {
	var x1 uint32
	var x2 uint32
	x1, x2 = bits.Sub32(arg1[0], arg2[0], uint32(0x0))
	var x3 uint32
	var x4 uint32
	x3, x4 = bits.Sub32(arg1[1], arg2[1], uint32(uint1(x2)))
	var x5 uint32
	var x6 uint32
	x5, x6 = bits.Sub32(arg1[2], arg2[2], uint32(uint1(x4)))
	var x7 uint32
	var x8 uint32
	x7, x8 = bits.Sub32(arg1[3], arg2[3], uint32(uint1(x6)))
	var x9 uint32
	var x10 uint32
	x9, x10 = bits.Sub32(arg1[4], arg2[4], uint32(uint1(x8)))
	var x11 uint32
	var x12 uint32
	x11, x12 = bits.Sub32(arg1[5], arg2[5], uint32(uint1(x10)))
	var x13 uint32
	var x14 uint32
	x13, x14 = bits.Sub32(arg1[6], arg2[6], uint32(uint1(x12)))
	var x15 uint32
	var x16 uint32
	x15, x16 = bits.Sub32(arg1[7], arg2[7], uint32(uint1(x14)))
	var x17 uint32
	cmovznzU32(&x17, uint1(x16), uint32(0x0), 0xffffffff)
	var x18 uint32
	var x19 uint32
	x18, x19 = bits.Add32(x1, (x17 & 0x5cf5d3ed), uint32(0x0))
	var x20 uint32
	var x21 uint32
	x20, x21 = bits.Add32(x3, (x17 & 0x5812631a), uint32(uint1(x19)))
	var x22 uint32
	var x23 uint32
	x22, x23 = bits.Add32(x5, (x17 & 0xa2f79cd6), uint32(uint1(x21)))
	var x24 uint32
	var x25 uint32
	x24, x25 = bits.Add32(x7, (x17 & 0x14def9de), uint32(uint1(x23)))
	var x26 uint32
	var x27 uint32
	x26, x27 = bits.Add32(x9, uint32(0x0), uint32(uint1(x25)))
	var x28 uint32
	var x29 uint32
	x28, x29 = bits.Add32(x11, uint32(0x0), uint32(uint1(x27)))
	var x30 uint32
	var x31 uint32
	x30, x31 = bits.Add32(x13, uint32(0x0), uint32(uint1(x29)))
	var x32 uint32
	x32, _ = bits.Add32(x15, (x17 & 0x10000000), uint32(uint1(x31)))
	out1[0] = x18
	out1[1] = x20
	out1[2] = x22
	out1[3] = x24
	out1[4] = x26
	out1[5] = x28
	out1[6] = x30
	out1[7] = x32
}

// Opp negates a field element in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
//   0 ≤ eval out1 < m
//
func Opp(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement) {
	var x1 uint32
	var x2 uint32
	x1, x2 = bits.Sub32(uint32(0x0), arg1[0], uint32(0x0))
	var x3 uint32
	var x4 uint32
	x3, x4 = bits.Sub32(uint32(0x0), arg1[1], uint32(uint1(x2)))
	var x5 uint32
	var x6 uint32
	x5, x6 = bits.Sub32(uint32(0x0), arg1[2], uint32(uint1(x4)))
	var x7 uint32
	var x8 uint32
	x7, x8 = bits.Sub32(uint32(0x0), arg1[3], uint32(uint1(x6)))
	var x9 uint32
	var x10 uint32
	x9, x10 = bits.Sub32(uint32(0x0), arg1[4], uint32(uint1(x8)))
	var x11 uint32
	var x12 uint32
	x11, x12 = bits.Sub32(uint32(0x0), arg1[5], uint32(uint1(x10)))
	var x13 uint32
	var x14 uint32
	x13, x14 = bits.Sub32(uint32(0x0), arg1[6], uint32(uint1(x12)))
	var x15 uint32
	var x16 uint32
	x15, x16 = bits.Sub32(uint32(0x0), arg1[7], uint32(uint1(x14)))
	var x17 uint32
	cmovznzU32(&x17, uint1(x16), uint32(0x0), 0xffffffff)
	var x18 uint32
	var x19 uint32
	x18, x19 = bits.Add32(x1, (x17 & 0x5cf5d3ed), uint32(0x0))
	var x20 uint32
	var x21 uint32
	x20, x21 = bits.Add32(x3, (x17 & 0x5812631a), uint32(uint1(x19)))
	var x22 uint32
	var x23 uint32
	x22, x23 = bits.Add32(x5, (x17 & 0xa2f79cd6), uint32(uint1(x21)))
	var x24 uint32
	var x25 uint32
	x24, x25 = bits.Add32(x7, (x17 & 0x14def9de), uint32(uint1(x23)))
	var x26 uint32
	var x27 uint32
	x26, x27 = bits.Add32(x9, uint32(0x0), uint32(uint1(x25)))
	var x28 uint32
	var x29 uint32
	x28, x29 = bits.Add32(x11, uint32(0x0), uint32(uint1(x27)))
	var x30 uint32
	var x31 uint32
	x30, x31 = bits.Add32(x13, uint32(0x0), uint32(uint1(x29)))
	var x32 uint32
	x32, _ = bits.Add32(x15, (x17 & 0x10000000), uint32(uint1(x31)))
	out1[0] = x18
	out1[1] = x20
	out1[2] = x22
	out1[3] = x24
	out1[4] = x26
	out1[5] = x28
	out1[6] = x30
	out1[7] = x32
}

// FromMontgomery translates a field element out of the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval out1 mod m = (eval arg1 * ((2^32)⁻¹ mod m)^8) mod m
//   0 ≤ eval out1 < m
//
func FromMontgomery(out1 *NonMontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement) {
	x1 := arg1[0]
	var x2 uint32
	_, x2 = bits.Mul32(x1, 0x12547e1b)
	var x4 uint32
	var x5 uint32
	x5, x4 = bits.Mul32(x2, 0x10000000)
	var x6 uint32
	var x7 uint32
	x7, x6 = bits.Mul32(x2, 0x14def9de)
	var x8 uint32
	var x9 uint32
	x9, x8 = bits.Mul32(x2, 0xa2f79cd6)
	var x10 uint32
	var x11 uint32
	x11, x10 = bits.Mul32(x2, 0x5812631a)
	var x12 uint32
	var x13 uint32
	x13, x12 = bits.Mul32(x2, 0x5cf5d3ed)
	var x14 uint32
	var x15 uint32
	x14, x15 = bits.Add32(x13, x10, uint32(0x0))
	var x16 uint32
	var x17 uint32
	x16, x17 = bits.Add32(x11, x8, uint32(uint1(x15)))
	var x18 uint32
	var x19 uint32
	x18, x19 = bits.Add32(x9, x6, uint32(uint1(x17)))
	var x21 uint32
	_, x21 = bits.Add32(x1, x12, uint32(0x0))
	var x22 uint32
	var x23 uint32
	x22, x23 = bits.Add32(uint32(0x0), x14, uint32(uint1(x21)))
	var x24 uint32
	var x25 uint32
	x24, x25 = bits.Add32(uint32(0x0), x16, uint32(uint1(x23)))
	var x26 uint32
	var x27 uint32
	x26, x27 = bits.Add32(uint32(0x0), x18, uint32(uint1(x25)))
	var x28 uint32
	var x29 uint32
	x28, x29 = bits.Add32(x22, arg1[1], uint32(0x0))
	var x30 uint32
	var x31 uint32
	x30, x31 = bits.Add32(x24, uint32(0x0), uint32(uint1(x29)))
	var x32 uint32
	var x33 uint32
	x32, x33 = bits.Add32(x26, uint32(0x0), uint32(uint1(x31)))
	var x34 uint32
	_, x34 = bits.Mul32(x28, 0x12547e1b)
	var x36 uint32
	var x37 uint32
	x37, x36 = bits.Mul32(x34, 0x10000000)
	var x38 uint32
	var x39 uint32
	x39, x38 = bits.Mul32(x34, 0x14def9de)
	var x40 uint32
	var x41 uint32
	x41, x40 = bits.Mul32(x34, 0xa2f79cd6)
	var x42 uint32
	var x43 uint32
	x43, x42 = bits.Mul32(x34, 0x5812631a)
	var x44 uint32
	var x45 uint32
	x45, x44 = bits.Mul32(x34, 0x5cf5d3ed)
	var x46 uint32
	var x47 uint32
	x46, x47 = bits.Add32(x45, x42, uint32(0x0))
	var x48 uint32
	var x49 uint32
	x48, x49 = bits.Add32(x43, x40, uint32(uint1(x47)))
	var x50 uint32
	var x51 uint32
	x50, x51 = bits.Add32(x41, x38, uint32(uint1(x49)))
	var x53 uint32
	_, x53 = bits.Add32(x28, x44, uint32(0x0))
	var x54 uint32
	var x55 uint32
	x54, x55 = bits.Add32(x30, x46, uint32(uint1(x53)))
	var x56 uint32
	var x57 uint32
	x56, x57 = bits.Add32(x32, x48, uint32(uint1(x55)))
	var x58 uint32
	var x59 uint32
	x58, x59 = bits.Add32((uint32(uint1(x33)) + (uint32(uint1(x27)) + (uint32(uint1(x19)) + x7))), x50, uint32(uint1(x57)))
	var x60 uint32
	var x61 uint32
	x60, x61 = bits.Add32(x5, x36, uint32(0x0))
	var x62 uint32
	var x63 uint32
	x62, x63 = bits.Add32(x54, arg1[2], uint32(0x0))
	var x64 uint32
	var x65 uint32
	x64, x65 = bits.Add32(x56, uint32(0x0), uint32(uint1(x63)))
	var x66 uint32
	var x67 uint32
	x66, x67 = bits.Add32(x58, uint32(0x0), uint32(uint1(x65)))
	var x68 uint32
	_, x68 = bits.Mul32(x62, 0x12547e1b)
	var x70 uint32
	var x71 uint32
	x71, x70 = bits.Mul32(x68, 0x10000000)
	var x72 uint32
	var x73 uint32
	x73, x72 = bits.Mul32(x68, 0x14def9de)
	var x74 uint32
	var x75 uint32
	x75, x74 = bits.Mul32(x68, 0xa2f79cd6)
	var x76 uint32
	var x77 uint32
	x77, x76 = bits.Mul32(x68, 0x5812631a)
	var x78 uint32
	var x79 uint32
	x79, x78 = bits.Mul32(x68, 0x5cf5d3ed)
	var x80 uint32
	var x81 uint32
	x80, x81 = bits.Add32(x79, x76, uint32(0x0))
	var x82 uint32
	var x83 uint32
	x82, x83 = bits.Add32(x77, x74, uint32(uint1(x81)))
	var x84 uint32
	var x85 uint32
	x84, x85 = bits.Add32(x75, x72, uint32(uint1(x83)))
	var x87 uint32
	_, x87 = bits.Add32(x62, x78, uint32(0x0))
	var x88 uint32
	var x89 uint32
	x88, x89 = bits.Add32(x64, x80, uint32(uint1(x87)))
	var x90 uint32
	var x91 uint32
	x90, x91 = bits.Add32(x66, x82, uint32(uint1(x89)))
	var x92 uint32
	var x93 uint32
	x92, x93 = bits.Add32((uint32(uint1(x67)) + (uint32(uint1(x59)) + (uint32(uint1(x51)) + x39))), x84, uint32(uint1(x91)))
	var x94 uint32
	var x95 uint32
	x94, x95 = bits.Add32((uint32(uint1(x61)) + x37), x70, uint32(0x0))
	var x96 uint32
	var x97 uint32
	x96, x97 = bits.Add32(x88, arg1[3], uint32(0x0))
	var x98 uint32
	var x99 uint32
	x98, x99 = bits.Add32(x90, uint32(0x0), uint32(uint1(x97)))
	var x100 uint32
	var x101 uint32
	x100, x101 = bits.Add32(x92, uint32(0x0), uint32(uint1(x99)))
	var x102 uint32
	_, x102 = bits.Mul32(x96, 0x12547e1b)
	var x104 uint32
	var x105 uint32
	x105, x104 = bits.Mul32(x102, 0x10000000)
	var x106 uint32
	var x107 uint32
	x107, x106 = bits.Mul32(x102, 0x14def9de)
	var x108 uint32
	var x109 uint32
	x109, x108 = bits.Mul32(x102, 0xa2f79cd6)
	var x110 uint32
	var x111 uint32
	x111, x110 = bits.Mul32(x102, 0x5812631a)
	var x112 uint32
	var x113 uint32
	x113, x112 = bits.Mul32(x102, 0x5cf5d3ed)
	var x114 uint32
	var x115 uint32
	x114, x115 = bits.Add32(x113, x110, uint32(0x0))
	var x116 uint32
	var x117 uint32
	x116, x117 = bits.Add32(x111, x108, uint32(uint1(x115)))
	var x118 uint32
	var x119 uint32
	x118, x119 = bits.Add32(x109, x106, uint32(uint1(x117)))
	var x121 uint32
	_, x121 = bits.Add32(x96, x112, uint32(0x0))
	var x122 uint32
	var x123 uint32
	x122, x123 = bits.Add32(x98, x114, uint32(uint1(x121)))
	var x124 uint32
	var x125 uint32
	x124, x125 = bits.Add32(x100, x116, uint32(uint1(x123)))
	var x126 uint32
	var x127 uint32
	x126, x127 = bits.Add32((uint32(uint1(x101)) + (uint32(uint1(x93)) + (uint32(uint1(x85)) + x73))), x118, uint32(uint1(x125)))
	var x128 uint32
	var x129 uint32
	x128, x129 = bits.Add32(x4, (uint32(uint1(x119)) + x107), uint32(uint1(x127)))
	var x130 uint32
	var x131 uint32
	x130, x131 = bits.Add32(x60, uint32(0x0), uint32(uint1(x129)))
	var x132 uint32
	var x133 uint32
	x132, x133 = bits.Add32(x94, uint32(0x0), uint32(uint1(x131)))
	var x134 uint32
	var x135 uint32
	x134, x135 = bits.Add32((uint32(uint1(x95)) + x71), x104, uint32(uint1(x133)))
	var x136 uint32
	var x137 uint32
	x136, x137 = bits.Add32(x122, arg1[4], uint32(0x0))
	var x138 uint32
	var x139 uint32
	x138, x139 = bits.Add32(x124, uint32(0x0), uint32(uint1(x137)))
	var x140 uint32
	var x141 uint32
	x140, x141 = bits.Add32(x126, uint32(0x0), uint32(uint1(x139)))
	var x142 uint32
	var x143 uint32
	x142, x143 = bits.Add32(x128, uint32(0x0), uint32(uint1(x141)))
	var x144 uint32
	var x145 uint32
	x144, x145 = bits.Add32(x130, uint32(0x0), uint32(uint1(x143)))
	var x146 uint32
	var x147 uint32
	x146, x147 = bits.Add32(x132, uint32(0x0), uint32(uint1(x145)))
	var x148 uint32
	var x149 uint32
	x148, x149 = bits.Add32(x134, uint32(0x0), uint32(uint1(x147)))
	var x150 uint32
	_, x150 = bits.Mul32(x136, 0x12547e1b)
	var x152 uint32
	var x153 uint32
	x153, x152 = bits.Mul32(x150, 0x10000000)
	var x154 uint32
	var x155 uint32
	x155, x154 = bits.Mul32(x150, 0x14def9de)
	var x156 uint32
	var x157 uint32
	x157, x156 = bits.Mul32(x150, 0xa2f79cd6)
	var x158 uint32
	var x159 uint32
	x159, x158 = bits.Mul32(x150, 0x5812631a)
	var x160 uint32
	var x161 uint32
	x161, x160 = bits.Mul32(x150, 0x5cf5d3ed)
	var x162 uint32
	var x163 uint32
	x162, x163 = bits.Add32(x161, x158, uint32(0x0))
	var x164 uint32
	var x165 uint32
	x164, x165 = bits.Add32(x159, x156, uint32(uint1(x163)))
	var x166 uint32
	var x167 uint32
	x166, x167 = bits.Add32(x157, x154, uint32(uint1(x165)))
	var x169 uint32
	_, x169 = bits.Add32(x136, x160, uint32(0x0))
	var x170 uint32
	var x171 uint32
	x170, x171 = bits.Add32(x138, x162, uint32(uint1(x169)))
	var x172 uint32
	var x173 uint32
	x172, x173 = bits.Add32(x140, x164, uint32(uint1(x171)))
	var x174 uint32
	var x175 uint32
	x174, x175 = bits.Add32(x142, x166, uint32(uint1(x173)))
	var x176 uint32
	var x177 uint32
	x176, x177 = bits.Add32(x144, (uint32(uint1(x167)) + x155), uint32(uint1(x175)))
	var x178 uint32
	var x179 uint32
	x178, x179 = bits.Add32(x146, uint32(0x0), uint32(uint1(x177)))
	var x180 uint32
	var x181 uint32
	x180, x181 = bits.Add32(x148, uint32(0x0), uint32(uint1(x179)))
	var x182 uint32
	var x183 uint32
	x182, x183 = bits.Add32((uint32(uint1(x149)) + (uint32(uint1(x135)) + x105)), x152, uint32(uint1(x181)))
	var x184 uint32
	var x185 uint32
	x184, x185 = bits.Add32(x170, arg1[5], uint32(0x0))
	var x186 uint32
	var x187 uint32
	x186, x187 = bits.Add32(x172, uint32(0x0), uint32(uint1(x185)))
	var x188 uint32
	var x189 uint32
	x188, x189 = bits.Add32(x174, uint32(0x0), uint32(uint1(x187)))
	var x190 uint32
	var x191 uint32
	x190, x191 = bits.Add32(x176, uint32(0x0), uint32(uint1(x189)))
	var x192 uint32
	var x193 uint32
	x192, x193 = bits.Add32(x178, uint32(0x0), uint32(uint1(x191)))
	var x194 uint32
	var x195 uint32
	x194, x195 = bits.Add32(x180, uint32(0x0), uint32(uint1(x193)))
	var x196 uint32
	var x197 uint32
	x196, x197 = bits.Add32(x182, uint32(0x0), uint32(uint1(x195)))
	var x198 uint32
	_, x198 = bits.Mul32(x184, 0x12547e1b)
	var x200 uint32
	var x201 uint32
	x201, x200 = bits.Mul32(x198, 0x10000000)
	var x202 uint32
	var x203 uint32
	x203, x202 = bits.Mul32(x198, 0x14def9de)
	var x204 uint32
	var x205 uint32
	x205, x204 = bits.Mul32(x198, 0xa2f79cd6)
	var x206 uint32
	var x207 uint32
	x207, x206 = bits.Mul32(x198, 0x5812631a)
	var x208 uint32
	var x209 uint32
	x209, x208 = bits.Mul32(x198, 0x5cf5d3ed)
	var x210 uint32
	var x211 uint32
	x210, x211 = bits.Add32(x209, x206, uint32(0x0))
	var x212 uint32
	var x213 uint32
	x212, x213 = bits.Add32(x207, x204, uint32(uint1(x211)))
	var x214 uint32
	var x215 uint32
	x214, x215 = bits.Add32(x205, x202, uint32(uint1(x213)))
	var x217 uint32
	_, x217 = bits.Add32(x184, x208, uint32(0x0))
	var x218 uint32
	var x219 uint32
	x218, x219 = bits.Add32(x186, x210, uint32(uint1(x217)))
	var x220 uint32
	var x221 uint32
	x220, x221 = bits.Add32(x188, x212, uint32(uint1(x219)))
	var x222 uint32
	var x223 uint32
	x222, x223 = bits.Add32(x190, x214, uint32(uint1(x221)))
	var x224 uint32
	var x225 uint32
	x224, x225 = bits.Add32(x192, (uint32(uint1(x215)) + x203), uint32(uint1(x223)))
	var x226 uint32
	var x227 uint32
	x226, x227 = bits.Add32(x194, uint32(0x0), uint32(uint1(x225)))
	var x228 uint32
	var x229 uint32
	x228, x229 = bits.Add32(x196, uint32(0x0), uint32(uint1(x227)))
	var x230 uint32
	var x231 uint32
	x230, x231 = bits.Add32((uint32(uint1(x197)) + (uint32(uint1(x183)) + x153)), x200, uint32(uint1(x229)))
	var x232 uint32
	var x233 uint32
	x232, x233 = bits.Add32(x218, arg1[6], uint32(0x0))
	var x234 uint32
	var x235 uint32
	x234, x235 = bits.Add32(x220, uint32(0x0), uint32(uint1(x233)))
	var x236 uint32
	var x237 uint32
	x236, x237 = bits.Add32(x222, uint32(0x0), uint32(uint1(x235)))
	var x238 uint32
	var x239 uint32
	x238, x239 = bits.Add32(x224, uint32(0x0), uint32(uint1(x237)))
	var x240 uint32
	var x241 uint32
	x240, x241 = bits.Add32(x226, uint32(0x0), uint32(uint1(x239)))
	var x242 uint32
	var x243 uint32
	x242, x243 = bits.Add32(x228, uint32(0x0), uint32(uint1(x241)))
	var x244 uint32
	var x245 uint32
	x244, x245 = bits.Add32(x230, uint32(0x0), uint32(uint1(x243)))
	var x246 uint32
	_, x246 = bits.Mul32(x232, 0x12547e1b)
	var x248 uint32
	var x249 uint32
	x249, x248 = bits.Mul32(x246, 0x10000000)
	var x250 uint32
	var x251 uint32
	x251, x250 = bits.Mul32(x246, 0x14def9de)
	var x252 uint32
	var x253 uint32
	x253, x252 = bits.Mul32(x246, 0xa2f79cd6)
	var x254 uint32
	var x255 uint32
	x255, x254 = bits.Mul32(x246, 0x5812631a)
	var x256 uint32
	var x257 uint32
	x257, x256 = bits.Mul32(x246, 0x5cf5d3ed)
	var x258 uint32
	var x259 uint32
	x258, x259 = bits.Add32(x257, x254, uint32(0x0))
	var x260 uint32
	var x261 uint32
	x260, x261 = bits.Add32(x255, x252, uint32(uint1(x259)))
	var x262 uint32
	var x263 uint32
	x262, x263 = bits.Add32(x253, x250, uint32(uint1(x261)))
	var x265 uint32
	_, x265 = bits.Add32(x232, x256, uint32(0x0))
	var x266 uint32
	var x267 uint32
	x266, x267 = bits.Add32(x234, x258, uint32(uint1(x265)))
	var x268 uint32
	var x269 uint32
	x268, x269 = bits.Add32(x236, x260, uint32(uint1(x267)))
	var x270 uint32
	var x271 uint32
	x270, x271 = bits.Add32(x238, x262, uint32(uint1(x269)))
	var x272 uint32
	var x273 uint32
	x272, x273 = bits.Add32(x240, (uint32(uint1(x263)) + x251), uint32(uint1(x271)))
	var x274 uint32
	var x275 uint32
	x274, x275 = bits.Add32(x242, uint32(0x0), uint32(uint1(x273)))
	var x276 uint32
	var x277 uint32
	x276, x277 = bits.Add32(x244, uint32(0x0), uint32(uint1(x275)))
	var x278 uint32
	var x279 uint32
	x278, x279 = bits.Add32((uint32(uint1(x245)) + (uint32(uint1(x231)) + x201)), x248, uint32(uint1(x277)))
	var x280 uint32
	var x281 uint32
	x280, x281 = bits.Add32(x266, arg1[7], uint32(0x0))
	var x282 uint32
	var x283 uint32
	x282, x283 = bits.Add32(x268, uint32(0x0), uint32(uint1(x281)))
	var x284 uint32
	var x285 uint32
	x284, x285 = bits.Add32(x270, uint32(0x0), uint32(uint1(x283)))
	var x286 uint32
	var x287 uint32
	x286, x287 = bits.Add32(x272, uint32(0x0), uint32(uint1(x285)))
	var x288 uint32
	var x289 uint32
	x288, x289 = bits.Add32(x274, uint32(0x0), uint32(uint1(x287)))
	var x290 uint32
	var x291 uint32
	x290, x291 = bits.Add32(x276, uint32(0x0), uint32(uint1(x289)))
	var x292 uint32
	var x293 uint32
	x292, x293 = bits.Add32(x278, uint32(0x0), uint32(uint1(x291)))
	var x294 uint32
	_, x294 = bits.Mul32(x280, 0x12547e1b)
	var x296 uint32
	var x297 uint32
	x297, x296 = bits.Mul32(x294, 0x10000000)
	var x298 uint32
	var x299 uint32
	x299, x298 = bits.Mul32(x294, 0x14def9de)
	var x300 uint32
	var x301 uint32
	x301, x300 = bits.Mul32(x294, 0xa2f79cd6)
	var x302 uint32
	var x303 uint32
	x303, x302 = bits.Mul32(x294, 0x5812631a)
	var x304 uint32
	var x305 uint32
	x305, x304 = bits.Mul32(x294, 0x5cf5d3ed)
	var x306 uint32
	var x307 uint32
	x306, x307 = bits.Add32(x305, x302, uint32(0x0))
	var x308 uint32
	var x309 uint32
	x308, x309 = bits.Add32(x303, x300, uint32(uint1(x307)))
	var x310 uint32
	var x311 uint32
	x310, x311 = bits.Add32(x301, x298, uint32(uint1(x309)))
	var x313 uint32
	_, x313 = bits.Add32(x280, x304, uint32(0x0))
	var x314 uint32
	var x315 uint32
	x314, x315 = bits.Add32(x282, x306, uint32(uint1(x313)))
	var x316 uint32
	var x317 uint32
	x316, x317 = bits.Add32(x284, x308, uint32(uint1(x315)))
	var x318 uint32
	var x319 uint32
	x318, x319 = bits.Add32(x286, x310, uint32(uint1(x317)))
	var x320 uint32
	var x321 uint32
	x320, x321 = bits.Add32(x288, (uint32(uint1(x311)) + x299), uint32(uint1(x319)))
	var x322 uint32
	var x323 uint32
	x322, x323 = bits.Add32(x290, uint32(0x0), uint32(uint1(x321)))
	var x324 uint32
	var x325 uint32
	x324, x325 = bits.Add32(x292, uint32(0x0), uint32(uint1(x323)))
	var x326 uint32
	var x327 uint32
	x326, x327 = bits.Add32((uint32(uint1(x293)) + (uint32(uint1(x279)) + x249)), x296, uint32(uint1(x325)))
	x328 := (uint32(uint1(x327)) + x297)
	var x329 uint32
	var x330 uint32
	x329, x330 = bits.Sub32(x314, 0x5cf5d3ed, uint32(0x0))
	var x331 uint32
	var x332 uint32
	x331, x332 = bits.Sub32(x316, 0x5812631a, uint32(uint1(x330)))
	var x333 uint32
	var x334 uint32
	x333, x334 = bits.Sub32(x318, 0xa2f79cd6, uint32(uint1(x332)))
	var x335 uint32
	var x336 uint32
	x335, x336 = bits.Sub32(x320, 0x14def9de, uint32(uint1(x334)))
	var x337 uint32
	var x338 uint32
	x337, x338 = bits.Sub32(x322, uint32(0x0), uint32(uint1(x336)))
	var x339 uint32
	var x340 uint32
	x339, x340 = bits.Sub32(x324, uint32(0x0), uint32(uint1(x338)))
	var x341 uint32
	var x342 uint32
	x341, x342 = bits.Sub32(x326, uint32(0x0), uint32(uint1(x340)))
	var x343 uint32
	var x344 uint32
	x343, x344 = bits.Sub32(x328, 0x10000000, uint32(uint1(x342)))
	var x346 uint32
	_, x346 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x344)))
	var x347 uint32
	cmovznzU32(&x347, uint1(x346), x329, x314)
	var x348 uint32
	cmovznzU32(&x348, uint1(x346), x331, x316)
	var x349 uint32
	cmovznzU32(&x349, uint1(x346), x333, x318)
	var x350 uint32
	cmovznzU32(&x350, uint1(x346), x335, x320)
	var x351 uint32
	cmovznzU32(&x351, uint1(x346), x337, x322)
	var x352 uint32
	cmovznzU32(&x352, uint1(x346), x339, x324)
	var x353 uint32
	cmovznzU32(&x353, uint1(x346), x341, x326)
	var x354 uint32
	cmovznzU32(&x354, uint1(x346), x343, x328)
	out1[0] = x347
	out1[1] = x348
	out1[2] = x349
	out1[3] = x350
	out1[4] = x351
	out1[5] = x352
	out1[6] = x353
	out1[7] = x354
}

// ToMontgomery translates a field element into the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = eval arg1 mod m
//   0 ≤ eval out1 < m
//
func ToMontgomery(out1 *MontgomeryDomainFieldElement, arg1 *NonMontgomeryDomainFieldElement) {
	x1 := arg1[1]
	x2 := arg1[2]
	x3 := arg1[3]
	x4 := arg1[4]
	x5 := arg1[5]
	x6 := arg1[6]
	x7 := arg1[7]
	x8 := arg1[0]
	var x9 uint32
	var x10 uint32
	x10, x9 = bits.Mul32(x8, 0x399411b)
	var x11 uint32
	var x12 uint32
	x12, x11 = bits.Mul32(x8, 0x7c309a3d)
	var x13 uint32
	var x14 uint32
	x14, x13 = bits.Mul32(x8, 0xceec73d2)
	var x15 uint32
	var x16 uint32
	x16, x15 = bits.Mul32(x8, 0x17f5be65)
	var x17 uint32
	var x18 uint32
	x18, x17 = bits.Mul32(x8, 0xd00e1ba7)
	var x19 uint32
	var x20 uint32
	x20, x19 = bits.Mul32(x8, 0x68859347)
	var x21 uint32
	var x22 uint32
	x22, x21 = bits.Mul32(x8, 0xa40611e3)
	var x23 uint32
	var x24 uint32
	x24, x23 = bits.Mul32(x8, 0x449c0f01)
	var x25 uint32
	var x26 uint32
	x25, x26 = bits.Add32(x24, x21, uint32(0x0))
	var x27 uint32
	var x28 uint32
	x27, x28 = bits.Add32(x22, x19, uint32(uint1(x26)))
	var x29 uint32
	var x30 uint32
	x29, x30 = bits.Add32(x20, x17, uint32(uint1(x28)))
	var x31 uint32
	var x32 uint32
	x31, x32 = bits.Add32(x18, x15, uint32(uint1(x30)))
	var x33 uint32
	var x34 uint32
	x33, x34 = bits.Add32(x16, x13, uint32(uint1(x32)))
	var x35 uint32
	var x36 uint32
	x35, x36 = bits.Add32(x14, x11, uint32(uint1(x34)))
	var x37 uint32
	var x38 uint32
	x37, x38 = bits.Add32(x12, x9, uint32(uint1(x36)))
	var x39 uint32
	_, x39 = bits.Mul32(x23, 0x12547e1b)
	var x41 uint32
	var x42 uint32
	x42, x41 = bits.Mul32(x39, 0x10000000)
	var x43 uint32
	var x44 uint32
	x44, x43 = bits.Mul32(x39, 0x14def9de)
	var x45 uint32
	var x46 uint32
	x46, x45 = bits.Mul32(x39, 0xa2f79cd6)
	var x47 uint32
	var x48 uint32
	x48, x47 = bits.Mul32(x39, 0x5812631a)
	var x49 uint32
	var x50 uint32
	x50, x49 = bits.Mul32(x39, 0x5cf5d3ed)
	var x51 uint32
	var x52 uint32
	x51, x52 = bits.Add32(x50, x47, uint32(0x0))
	var x53 uint32
	var x54 uint32
	x53, x54 = bits.Add32(x48, x45, uint32(uint1(x52)))
	var x55 uint32
	var x56 uint32
	x55, x56 = bits.Add32(x46, x43, uint32(uint1(x54)))
	var x58 uint32
	_, x58 = bits.Add32(x23, x49, uint32(0x0))
	var x59 uint32
	var x60 uint32
	x59, x60 = bits.Add32(x25, x51, uint32(uint1(x58)))
	var x61 uint32
	var x62 uint32
	x61, x62 = bits.Add32(x27, x53, uint32(uint1(x60)))
	var x63 uint32
	var x64 uint32
	x63, x64 = bits.Add32(x29, x55, uint32(uint1(x62)))
	var x65 uint32
	var x66 uint32
	x65, x66 = bits.Add32(x31, (uint32(uint1(x56)) + x44), uint32(uint1(x64)))
	var x67 uint32
	var x68 uint32
	x67, x68 = bits.Add32(x33, uint32(0x0), uint32(uint1(x66)))
	var x69 uint32
	var x70 uint32
	x69, x70 = bits.Add32(x35, uint32(0x0), uint32(uint1(x68)))
	var x71 uint32
	var x72 uint32
	x71, x72 = bits.Add32(x37, x41, uint32(uint1(x70)))
	var x73 uint32
	var x74 uint32
	x74, x73 = bits.Mul32(x1, 0x399411b)
	var x75 uint32
	var x76 uint32
	x76, x75 = bits.Mul32(x1, 0x7c309a3d)
	var x77 uint32
	var x78 uint32
	x78, x77 = bits.Mul32(x1, 0xceec73d2)
	var x79 uint32
	var x80 uint32
	x80, x79 = bits.Mul32(x1, 0x17f5be65)
	var x81 uint32
	var x82 uint32
	x82, x81 = bits.Mul32(x1, 0xd00e1ba7)
	var x83 uint32
	var x84 uint32
	x84, x83 = bits.Mul32(x1, 0x68859347)
	var x85 uint32
	var x86 uint32
	x86, x85 = bits.Mul32(x1, 0xa40611e3)
	var x87 uint32
	var x88 uint32
	x88, x87 = bits.Mul32(x1, 0x449c0f01)
	var x89 uint32
	var x90 uint32
	x89, x90 = bits.Add32(x88, x85, uint32(0x0))
	var x91 uint32
	var x92 uint32
	x91, x92 = bits.Add32(x86, x83, uint32(uint1(x90)))
	var x93 uint32
	var x94 uint32
	x93, x94 = bits.Add32(x84, x81, uint32(uint1(x92)))
	var x95 uint32
	var x96 uint32
	x95, x96 = bits.Add32(x82, x79, uint32(uint1(x94)))
	var x97 uint32
	var x98 uint32
	x97, x98 = bits.Add32(x80, x77, uint32(uint1(x96)))
	var x99 uint32
	var x100 uint32
	x99, x100 = bits.Add32(x78, x75, uint32(uint1(x98)))
	var x101 uint32
	var x102 uint32
	x101, x102 = bits.Add32(x76, x73, uint32(uint1(x100)))
	var x103 uint32
	var x104 uint32
	x103, x104 = bits.Add32(x59, x87, uint32(0x0))
	var x105 uint32
	var x106 uint32
	x105, x106 = bits.Add32(x61, x89, uint32(uint1(x104)))
	var x107 uint32
	var x108 uint32
	x107, x108 = bits.Add32(x63, x91, uint32(uint1(x106)))
	var x109 uint32
	var x110 uint32
	x109, x110 = bits.Add32(x65, x93, uint32(uint1(x108)))
	var x111 uint32
	var x112 uint32
	x111, x112 = bits.Add32(x67, x95, uint32(uint1(x110)))
	var x113 uint32
	var x114 uint32
	x113, x114 = bits.Add32(x69, x97, uint32(uint1(x112)))
	var x115 uint32
	var x116 uint32
	x115, x116 = bits.Add32(x71, x99, uint32(uint1(x114)))
	var x117 uint32
	var x118 uint32
	x117, x118 = bits.Add32(((uint32(uint1(x72)) + (uint32(uint1(x38)) + x10)) + x42), x101, uint32(uint1(x116)))
	var x119 uint32
	_, x119 = bits.Mul32(x103, 0x12547e1b)
	var x121 uint32
	var x122 uint32
	x122, x121 = bits.Mul32(x119, 0x10000000)
	var x123 uint32
	var x124 uint32
	x124, x123 = bits.Mul32(x119, 0x14def9de)
	var x125 uint32
	var x126 uint32
	x126, x125 = bits.Mul32(x119, 0xa2f79cd6)
	var x127 uint32
	var x128 uint32
	x128, x127 = bits.Mul32(x119, 0x5812631a)
	var x129 uint32
	var x130 uint32
	x130, x129 = bits.Mul32(x119, 0x5cf5d3ed)
	var x131 uint32
	var x132 uint32
	x131, x132 = bits.Add32(x130, x127, uint32(0x0))
	var x133 uint32
	var x134 uint32
	x133, x134 = bits.Add32(x128, x125, uint32(uint1(x132)))
	var x135 uint32
	var x136 uint32
	x135, x136 = bits.Add32(x126, x123, uint32(uint1(x134)))
	var x138 uint32
	_, x138 = bits.Add32(x103, x129, uint32(0x0))
	var x139 uint32
	var x140 uint32
	x139, x140 = bits.Add32(x105, x131, uint32(uint1(x138)))
	var x141 uint32
	var x142 uint32
	x141, x142 = bits.Add32(x107, x133, uint32(uint1(x140)))
	var x143 uint32
	var x144 uint32
	x143, x144 = bits.Add32(x109, x135, uint32(uint1(x142)))
	var x145 uint32
	var x146 uint32
	x145, x146 = bits.Add32(x111, (uint32(uint1(x136)) + x124), uint32(uint1(x144)))
	var x147 uint32
	var x148 uint32
	x147, x148 = bits.Add32(x113, uint32(0x0), uint32(uint1(x146)))
	var x149 uint32
	var x150 uint32
	x149, x150 = bits.Add32(x115, uint32(0x0), uint32(uint1(x148)))
	var x151 uint32
	var x152 uint32
	x151, x152 = bits.Add32(x117, x121, uint32(uint1(x150)))
	var x153 uint32
	var x154 uint32
	x154, x153 = bits.Mul32(x2, 0x399411b)
	var x155 uint32
	var x156 uint32
	x156, x155 = bits.Mul32(x2, 0x7c309a3d)
	var x157 uint32
	var x158 uint32
	x158, x157 = bits.Mul32(x2, 0xceec73d2)
	var x159 uint32
	var x160 uint32
	x160, x159 = bits.Mul32(x2, 0x17f5be65)
	var x161 uint32
	var x162 uint32
	x162, x161 = bits.Mul32(x2, 0xd00e1ba7)
	var x163 uint32
	var x164 uint32
	x164, x163 = bits.Mul32(x2, 0x68859347)
	var x165 uint32
	var x166 uint32
	x166, x165 = bits.Mul32(x2, 0xa40611e3)
	var x167 uint32
	var x168 uint32
	x168, x167 = bits.Mul32(x2, 0x449c0f01)
	var x169 uint32
	var x170 uint32
	x169, x170 = bits.Add32(x168, x165, uint32(0x0))
	var x171 uint32
	var x172 uint32
	x171, x172 = bits.Add32(x166, x163, uint32(uint1(x170)))
	var x173 uint32
	var x174 uint32
	x173, x174 = bits.Add32(x164, x161, uint32(uint1(x172)))
	var x175 uint32
	var x176 uint32
	x175, x176 = bits.Add32(x162, x159, uint32(uint1(x174)))
	var x177 uint32
	var x178 uint32
	x177, x178 = bits.Add32(x160, x157, uint32(uint1(x176)))
	var x179 uint32
	var x180 uint32
	x179, x180 = bits.Add32(x158, x155, uint32(uint1(x178)))
	var x181 uint32
	var x182 uint32
	x181, x182 = bits.Add32(x156, x153, uint32(uint1(x180)))
	var x183 uint32
	var x184 uint32
	x183, x184 = bits.Add32(x139, x167, uint32(0x0))
	var x185 uint32
	var x186 uint32
	x185, x186 = bits.Add32(x141, x169, uint32(uint1(x184)))
	var x187 uint32
	var x188 uint32
	x187, x188 = bits.Add32(x143, x171, uint32(uint1(x186)))
	var x189 uint32
	var x190 uint32
	x189, x190 = bits.Add32(x145, x173, uint32(uint1(x188)))
	var x191 uint32
	var x192 uint32
	x191, x192 = bits.Add32(x147, x175, uint32(uint1(x190)))
	var x193 uint32
	var x194 uint32
	x193, x194 = bits.Add32(x149, x177, uint32(uint1(x192)))
	var x195 uint32
	var x196 uint32
	x195, x196 = bits.Add32(x151, x179, uint32(uint1(x194)))
	var x197 uint32
	var x198 uint32
	x197, x198 = bits.Add32(((uint32(uint1(x152)) + (uint32(uint1(x118)) + (uint32(uint1(x102)) + x74))) + x122), x181, uint32(uint1(x196)))
	var x199 uint32
	_, x199 = bits.Mul32(x183, 0x12547e1b)
	var x201 uint32
	var x202 uint32
	x202, x201 = bits.Mul32(x199, 0x10000000)
	var x203 uint32
	var x204 uint32
	x204, x203 = bits.Mul32(x199, 0x14def9de)
	var x205 uint32
	var x206 uint32
	x206, x205 = bits.Mul32(x199, 0xa2f79cd6)
	var x207 uint32
	var x208 uint32
	x208, x207 = bits.Mul32(x199, 0x5812631a)
	var x209 uint32
	var x210 uint32
	x210, x209 = bits.Mul32(x199, 0x5cf5d3ed)
	var x211 uint32
	var x212 uint32
	x211, x212 = bits.Add32(x210, x207, uint32(0x0))
	var x213 uint32
	var x214 uint32
	x213, x214 = bits.Add32(x208, x205, uint32(uint1(x212)))
	var x215 uint32
	var x216 uint32
	x215, x216 = bits.Add32(x206, x203, uint32(uint1(x214)))
	var x218 uint32
	_, x218 = bits.Add32(x183, x209, uint32(0x0))
	var x219 uint32
	var x220 uint32
	x219, x220 = bits.Add32(x185, x211, uint32(uint1(x218)))
	var x221 uint32
	var x222 uint32
	x221, x222 = bits.Add32(x187, x213, uint32(uint1(x220)))
	var x223 uint32
	var x224 uint32
	x223, x224 = bits.Add32(x189, x215, uint32(uint1(x222)))
	var x225 uint32
	var x226 uint32
	x225, x226 = bits.Add32(x191, (uint32(uint1(x216)) + x204), uint32(uint1(x224)))
	var x227 uint32
	var x228 uint32
	x227, x228 = bits.Add32(x193, uint32(0x0), uint32(uint1(x226)))
	var x229 uint32
	var x230 uint32
	x229, x230 = bits.Add32(x195, uint32(0x0), uint32(uint1(x228)))
	var x231 uint32
	var x232 uint32
	x231, x232 = bits.Add32(x197, x201, uint32(uint1(x230)))
	var x233 uint32
	var x234 uint32
	x234, x233 = bits.Mul32(x3, 0x399411b)
	var x235 uint32
	var x236 uint32
	x236, x235 = bits.Mul32(x3, 0x7c309a3d)
	var x237 uint32
	var x238 uint32
	x238, x237 = bits.Mul32(x3, 0xceec73d2)
	var x239 uint32
	var x240 uint32
	x240, x239 = bits.Mul32(x3, 0x17f5be65)
	var x241 uint32
	var x242 uint32
	x242, x241 = bits.Mul32(x3, 0xd00e1ba7)
	var x243 uint32
	var x244 uint32
	x244, x243 = bits.Mul32(x3, 0x68859347)
	var x245 uint32
	var x246 uint32
	x246, x245 = bits.Mul32(x3, 0xa40611e3)
	var x247 uint32
	var x248 uint32
	x248, x247 = bits.Mul32(x3, 0x449c0f01)
	var x249 uint32
	var x250 uint32
	x249, x250 = bits.Add32(x248, x245, uint32(0x0))
	var x251 uint32
	var x252 uint32
	x251, x252 = bits.Add32(x246, x243, uint32(uint1(x250)))
	var x253 uint32
	var x254 uint32
	x253, x254 = bits.Add32(x244, x241, uint32(uint1(x252)))
	var x255 uint32
	var x256 uint32
	x255, x256 = bits.Add32(x242, x239, uint32(uint1(x254)))
	var x257 uint32
	var x258 uint32
	x257, x258 = bits.Add32(x240, x237, uint32(uint1(x256)))
	var x259 uint32
	var x260 uint32
	x259, x260 = bits.Add32(x238, x235, uint32(uint1(x258)))
	var x261 uint32
	var x262 uint32
	x261, x262 = bits.Add32(x236, x233, uint32(uint1(x260)))
	var x263 uint32
	var x264 uint32
	x263, x264 = bits.Add32(x219, x247, uint32(0x0))
	var x265 uint32
	var x266 uint32
	x265, x266 = bits.Add32(x221, x249, uint32(uint1(x264)))
	var x267 uint32
	var x268 uint32
	x267, x268 = bits.Add32(x223, x251, uint32(uint1(x266)))
	var x269 uint32
	var x270 uint32
	x269, x270 = bits.Add32(x225, x253, uint32(uint1(x268)))
	var x271 uint32
	var x272 uint32
	x271, x272 = bits.Add32(x227, x255, uint32(uint1(x270)))
	var x273 uint32
	var x274 uint32
	x273, x274 = bits.Add32(x229, x257, uint32(uint1(x272)))
	var x275 uint32
	var x276 uint32
	x275, x276 = bits.Add32(x231, x259, uint32(uint1(x274)))
	var x277 uint32
	var x278 uint32
	x277, x278 = bits.Add32(((uint32(uint1(x232)) + (uint32(uint1(x198)) + (uint32(uint1(x182)) + x154))) + x202), x261, uint32(uint1(x276)))
	var x279 uint32
	_, x279 = bits.Mul32(x263, 0x12547e1b)
	var x281 uint32
	var x282 uint32
	x282, x281 = bits.Mul32(x279, 0x10000000)
	var x283 uint32
	var x284 uint32
	x284, x283 = bits.Mul32(x279, 0x14def9de)
	var x285 uint32
	var x286 uint32
	x286, x285 = bits.Mul32(x279, 0xa2f79cd6)
	var x287 uint32
	var x288 uint32
	x288, x287 = bits.Mul32(x279, 0x5812631a)
	var x289 uint32
	var x290 uint32
	x290, x289 = bits.Mul32(x279, 0x5cf5d3ed)
	var x291 uint32
	var x292 uint32
	x291, x292 = bits.Add32(x290, x287, uint32(0x0))
	var x293 uint32
	var x294 uint32
	x293, x294 = bits.Add32(x288, x285, uint32(uint1(x292)))
	var x295 uint32
	var x296 uint32
	x295, x296 = bits.Add32(x286, x283, uint32(uint1(x294)))
	var x298 uint32
	_, x298 = bits.Add32(x263, x289, uint32(0x0))
	var x299 uint32
	var x300 uint32
	x299, x300 = bits.Add32(x265, x291, uint32(uint1(x298)))
	var x301 uint32
	var x302 uint32
	x301, x302 = bits.Add32(x267, x293, uint32(uint1(x300)))
	var x303 uint32
	var x304 uint32
	x303, x304 = bits.Add32(x269, x295, uint32(uint1(x302)))
	var x305 uint32
	var x306 uint32
	x305, x306 = bits.Add32(x271, (uint32(uint1(x296)) + x284), uint32(uint1(x304)))
	var x307 uint32
	var x308 uint32
	x307, x308 = bits.Add32(x273, uint32(0x0), uint32(uint1(x306)))
	var x309 uint32
	var x310 uint32
	x309, x310 = bits.Add32(x275, uint32(0x0), uint32(uint1(x308)))
	var x311 uint32
	var x312 uint32
	x311, x312 = bits.Add32(x277, x281, uint32(uint1(x310)))
	var x313 uint32
	var x314 uint32
	x314, x313 = bits.Mul32(x4, 0x399411b)
	var x315 uint32
	var x316 uint32
	x316, x315 = bits.Mul32(x4, 0x7c309a3d)
	var x317 uint32
	var x318 uint32
	x318, x317 = bits.Mul32(x4, 0xceec73d2)
	var x319 uint32
	var x320 uint32
	x320, x319 = bits.Mul32(x4, 0x17f5be65)
	var x321 uint32
	var x322 uint32
	x322, x321 = bits.Mul32(x4, 0xd00e1ba7)
	var x323 uint32
	var x324 uint32
	x324, x323 = bits.Mul32(x4, 0x68859347)
	var x325 uint32
	var x326 uint32
	x326, x325 = bits.Mul32(x4, 0xa40611e3)
	var x327 uint32
	var x328 uint32
	x328, x327 = bits.Mul32(x4, 0x449c0f01)
	var x329 uint32
	var x330 uint32
	x329, x330 = bits.Add32(x328, x325, uint32(0x0))
	var x331 uint32
	var x332 uint32
	x331, x332 = bits.Add32(x326, x323, uint32(uint1(x330)))
	var x333 uint32
	var x334 uint32
	x333, x334 = bits.Add32(x324, x321, uint32(uint1(x332)))
	var x335 uint32
	var x336 uint32
	x335, x336 = bits.Add32(x322, x319, uint32(uint1(x334)))
	var x337 uint32
	var x338 uint32
	x337, x338 = bits.Add32(x320, x317, uint32(uint1(x336)))
	var x339 uint32
	var x340 uint32
	x339, x340 = bits.Add32(x318, x315, uint32(uint1(x338)))
	var x341 uint32
	var x342 uint32
	x341, x342 = bits.Add32(x316, x313, uint32(uint1(x340)))
	var x343 uint32
	var x344 uint32
	x343, x344 = bits.Add32(x299, x327, uint32(0x0))
	var x345 uint32
	var x346 uint32
	x345, x346 = bits.Add32(x301, x329, uint32(uint1(x344)))
	var x347 uint32
	var x348 uint32
	x347, x348 = bits.Add32(x303, x331, uint32(uint1(x346)))
	var x349 uint32
	var x350 uint32
	x349, x350 = bits.Add32(x305, x333, uint32(uint1(x348)))
	var x351 uint32
	var x352 uint32
	x351, x352 = bits.Add32(x307, x335, uint32(uint1(x350)))
	var x353 uint32
	var x354 uint32
	x353, x354 = bits.Add32(x309, x337, uint32(uint1(x352)))
	var x355 uint32
	var x356 uint32
	x355, x356 = bits.Add32(x311, x339, uint32(uint1(x354)))
	var x357 uint32
	var x358 uint32
	x357, x358 = bits.Add32(((uint32(uint1(x312)) + (uint32(uint1(x278)) + (uint32(uint1(x262)) + x234))) + x282), x341, uint32(uint1(x356)))
	var x359 uint32
	_, x359 = bits.Mul32(x343, 0x12547e1b)
	var x361 uint32
	var x362 uint32
	x362, x361 = bits.Mul32(x359, 0x10000000)
	var x363 uint32
	var x364 uint32
	x364, x363 = bits.Mul32(x359, 0x14def9de)
	var x365 uint32
	var x366 uint32
	x366, x365 = bits.Mul32(x359, 0xa2f79cd6)
	var x367 uint32
	var x368 uint32
	x368, x367 = bits.Mul32(x359, 0x5812631a)
	var x369 uint32
	var x370 uint32
	x370, x369 = bits.Mul32(x359, 0x5cf5d3ed)
	var x371 uint32
	var x372 uint32
	x371, x372 = bits.Add32(x370, x367, uint32(0x0))
	var x373 uint32
	var x374 uint32
	x373, x374 = bits.Add32(x368, x365, uint32(uint1(x372)))
	var x375 uint32
	var x376 uint32
	x375, x376 = bits.Add32(x366, x363, uint32(uint1(x374)))
	var x378 uint32
	_, x378 = bits.Add32(x343, x369, uint32(0x0))
	var x379 uint32
	var x380 uint32
	x379, x380 = bits.Add32(x345, x371, uint32(uint1(x378)))
	var x381 uint32
	var x382 uint32
	x381, x382 = bits.Add32(x347, x373, uint32(uint1(x380)))
	var x383 uint32
	var x384 uint32
	x383, x384 = bits.Add32(x349, x375, uint32(uint1(x382)))
	var x385 uint32
	var x386 uint32
	x385, x386 = bits.Add32(x351, (uint32(uint1(x376)) + x364), uint32(uint1(x384)))
	var x387 uint32
	var x388 uint32
	x387, x388 = bits.Add32(x353, uint32(0x0), uint32(uint1(x386)))
	var x389 uint32
	var x390 uint32
	x389, x390 = bits.Add32(x355, uint32(0x0), uint32(uint1(x388)))
	var x391 uint32
	var x392 uint32
	x391, x392 = bits.Add32(x357, x361, uint32(uint1(x390)))
	var x393 uint32
	var x394 uint32
	x394, x393 = bits.Mul32(x5, 0x399411b)
	var x395 uint32
	var x396 uint32
	x396, x395 = bits.Mul32(x5, 0x7c309a3d)
	var x397 uint32
	var x398 uint32
	x398, x397 = bits.Mul32(x5, 0xceec73d2)
	var x399 uint32
	var x400 uint32
	x400, x399 = bits.Mul32(x5, 0x17f5be65)
	var x401 uint32
	var x402 uint32
	x402, x401 = bits.Mul32(x5, 0xd00e1ba7)
	var x403 uint32
	var x404 uint32
	x404, x403 = bits.Mul32(x5, 0x68859347)
	var x405 uint32
	var x406 uint32
	x406, x405 = bits.Mul32(x5, 0xa40611e3)
	var x407 uint32
	var x408 uint32
	x408, x407 = bits.Mul32(x5, 0x449c0f01)
	var x409 uint32
	var x410 uint32
	x409, x410 = bits.Add32(x408, x405, uint32(0x0))
	var x411 uint32
	var x412 uint32
	x411, x412 = bits.Add32(x406, x403, uint32(uint1(x410)))
	var x413 uint32
	var x414 uint32
	x413, x414 = bits.Add32(x404, x401, uint32(uint1(x412)))
	var x415 uint32
	var x416 uint32
	x415, x416 = bits.Add32(x402, x399, uint32(uint1(x414)))
	var x417 uint32
	var x418 uint32
	x417, x418 = bits.Add32(x400, x397, uint32(uint1(x416)))
	var x419 uint32
	var x420 uint32
	x419, x420 = bits.Add32(x398, x395, uint32(uint1(x418)))
	var x421 uint32
	var x422 uint32
	x421, x422 = bits.Add32(x396, x393, uint32(uint1(x420)))
	var x423 uint32
	var x424 uint32
	x423, x424 = bits.Add32(x379, x407, uint32(0x0))
	var x425 uint32
	var x426 uint32
	x425, x426 = bits.Add32(x381, x409, uint32(uint1(x424)))
	var x427 uint32
	var x428 uint32
	x427, x428 = bits.Add32(x383, x411, uint32(uint1(x426)))
	var x429 uint32
	var x430 uint32
	x429, x430 = bits.Add32(x385, x413, uint32(uint1(x428)))
	var x431 uint32
	var x432 uint32
	x431, x432 = bits.Add32(x387, x415, uint32(uint1(x430)))
	var x433 uint32
	var x434 uint32
	x433, x434 = bits.Add32(x389, x417, uint32(uint1(x432)))
	var x435 uint32
	var x436 uint32
	x435, x436 = bits.Add32(x391, x419, uint32(uint1(x434)))
	var x437 uint32
	var x438 uint32
	x437, x438 = bits.Add32(((uint32(uint1(x392)) + (uint32(uint1(x358)) + (uint32(uint1(x342)) + x314))) + x362), x421, uint32(uint1(x436)))
	var x439 uint32
	_, x439 = bits.Mul32(x423, 0x12547e1b)
	var x441 uint32
	var x442 uint32
	x442, x441 = bits.Mul32(x439, 0x10000000)
	var x443 uint32
	var x444 uint32
	x444, x443 = bits.Mul32(x439, 0x14def9de)
	var x445 uint32
	var x446 uint32
	x446, x445 = bits.Mul32(x439, 0xa2f79cd6)
	var x447 uint32
	var x448 uint32
	x448, x447 = bits.Mul32(x439, 0x5812631a)
	var x449 uint32
	var x450 uint32
	x450, x449 = bits.Mul32(x439, 0x5cf5d3ed)
	var x451 uint32
	var x452 uint32
	x451, x452 = bits.Add32(x450, x447, uint32(0x0))
	var x453 uint32
	var x454 uint32
	x453, x454 = bits.Add32(x448, x445, uint32(uint1(x452)))
	var x455 uint32
	var x456 uint32
	x455, x456 = bits.Add32(x446, x443, uint32(uint1(x454)))
	var x458 uint32
	_, x458 = bits.Add32(x423, x449, uint32(0x0))
	var x459 uint32
	var x460 uint32
	x459, x460 = bits.Add32(x425, x451, uint32(uint1(x458)))
	var x461 uint32
	var x462 uint32
	x461, x462 = bits.Add32(x427, x453, uint32(uint1(x460)))
	var x463 uint32
	var x464 uint32
	x463, x464 = bits.Add32(x429, x455, uint32(uint1(x462)))
	var x465 uint32
	var x466 uint32
	x465, x466 = bits.Add32(x431, (uint32(uint1(x456)) + x444), uint32(uint1(x464)))
	var x467 uint32
	var x468 uint32
	x467, x468 = bits.Add32(x433, uint32(0x0), uint32(uint1(x466)))
	var x469 uint32
	var x470 uint32
	x469, x470 = bits.Add32(x435, uint32(0x0), uint32(uint1(x468)))
	var x471 uint32
	var x472 uint32
	x471, x472 = bits.Add32(x437, x441, uint32(uint1(x470)))
	var x473 uint32
	var x474 uint32
	x474, x473 = bits.Mul32(x6, 0x399411b)
	var x475 uint32
	var x476 uint32
	x476, x475 = bits.Mul32(x6, 0x7c309a3d)
	var x477 uint32
	var x478 uint32
	x478, x477 = bits.Mul32(x6, 0xceec73d2)
	var x479 uint32
	var x480 uint32
	x480, x479 = bits.Mul32(x6, 0x17f5be65)
	var x481 uint32
	var x482 uint32
	x482, x481 = bits.Mul32(x6, 0xd00e1ba7)
	var x483 uint32
	var x484 uint32
	x484, x483 = bits.Mul32(x6, 0x68859347)
	var x485 uint32
	var x486 uint32
	x486, x485 = bits.Mul32(x6, 0xa40611e3)
	var x487 uint32
	var x488 uint32
	x488, x487 = bits.Mul32(x6, 0x449c0f01)
	var x489 uint32
	var x490 uint32
	x489, x490 = bits.Add32(x488, x485, uint32(0x0))
	var x491 uint32
	var x492 uint32
	x491, x492 = bits.Add32(x486, x483, uint32(uint1(x490)))
	var x493 uint32
	var x494 uint32
	x493, x494 = bits.Add32(x484, x481, uint32(uint1(x492)))
	var x495 uint32
	var x496 uint32
	x495, x496 = bits.Add32(x482, x479, uint32(uint1(x494)))
	var x497 uint32
	var x498 uint32
	x497, x498 = bits.Add32(x480, x477, uint32(uint1(x496)))
	var x499 uint32
	var x500 uint32
	x499, x500 = bits.Add32(x478, x475, uint32(uint1(x498)))
	var x501 uint32
	var x502 uint32
	x501, x502 = bits.Add32(x476, x473, uint32(uint1(x500)))
	var x503 uint32
	var x504 uint32
	x503, x504 = bits.Add32(x459, x487, uint32(0x0))
	var x505 uint32
	var x506 uint32
	x505, x506 = bits.Add32(x461, x489, uint32(uint1(x504)))
	var x507 uint32
	var x508 uint32
	x507, x508 = bits.Add32(x463, x491, uint32(uint1(x506)))
	var x509 uint32
	var x510 uint32
	x509, x510 = bits.Add32(x465, x493, uint32(uint1(x508)))
	var x511 uint32
	var x512 uint32
	x511, x512 = bits.Add32(x467, x495, uint32(uint1(x510)))
	var x513 uint32
	var x514 uint32
	x513, x514 = bits.Add32(x469, x497, uint32(uint1(x512)))
	var x515 uint32
	var x516 uint32
	x515, x516 = bits.Add32(x471, x499, uint32(uint1(x514)))
	var x517 uint32
	var x518 uint32
	x517, x518 = bits.Add32(((uint32(uint1(x472)) + (uint32(uint1(x438)) + (uint32(uint1(x422)) + x394))) + x442), x501, uint32(uint1(x516)))
	var x519 uint32
	_, x519 = bits.Mul32(x503, 0x12547e1b)
	var x521 uint32
	var x522 uint32
	x522, x521 = bits.Mul32(x519, 0x10000000)
	var x523 uint32
	var x524 uint32
	x524, x523 = bits.Mul32(x519, 0x14def9de)
	var x525 uint32
	var x526 uint32
	x526, x525 = bits.Mul32(x519, 0xa2f79cd6)
	var x527 uint32
	var x528 uint32
	x528, x527 = bits.Mul32(x519, 0x5812631a)
	var x529 uint32
	var x530 uint32
	x530, x529 = bits.Mul32(x519, 0x5cf5d3ed)
	var x531 uint32
	var x532 uint32
	x531, x532 = bits.Add32(x530, x527, uint32(0x0))
	var x533 uint32
	var x534 uint32
	x533, x534 = bits.Add32(x528, x525, uint32(uint1(x532)))
	var x535 uint32
	var x536 uint32
	x535, x536 = bits.Add32(x526, x523, uint32(uint1(x534)))
	var x538 uint32
	_, x538 = bits.Add32(x503, x529, uint32(0x0))
	var x539 uint32
	var x540 uint32
	x539, x540 = bits.Add32(x505, x531, uint32(uint1(x538)))
	var x541 uint32
	var x542 uint32
	x541, x542 = bits.Add32(x507, x533, uint32(uint1(x540)))
	var x543 uint32
	var x544 uint32
	x543, x544 = bits.Add32(x509, x535, uint32(uint1(x542)))
	var x545 uint32
	var x546 uint32
	x545, x546 = bits.Add32(x511, (uint32(uint1(x536)) + x524), uint32(uint1(x544)))
	var x547 uint32
	var x548 uint32
	x547, x548 = bits.Add32(x513, uint32(0x0), uint32(uint1(x546)))
	var x549 uint32
	var x550 uint32
	x549, x550 = bits.Add32(x515, uint32(0x0), uint32(uint1(x548)))
	var x551 uint32
	var x552 uint32
	x551, x552 = bits.Add32(x517, x521, uint32(uint1(x550)))
	var x553 uint32
	var x554 uint32
	x554, x553 = bits.Mul32(x7, 0x399411b)
	var x555 uint32
	var x556 uint32
	x556, x555 = bits.Mul32(x7, 0x7c309a3d)
	var x557 uint32
	var x558 uint32
	x558, x557 = bits.Mul32(x7, 0xceec73d2)
	var x559 uint32
	var x560 uint32
	x560, x559 = bits.Mul32(x7, 0x17f5be65)
	var x561 uint32
	var x562 uint32
	x562, x561 = bits.Mul32(x7, 0xd00e1ba7)
	var x563 uint32
	var x564 uint32
	x564, x563 = bits.Mul32(x7, 0x68859347)
	var x565 uint32
	var x566 uint32
	x566, x565 = bits.Mul32(x7, 0xa40611e3)
	var x567 uint32
	var x568 uint32
	x568, x567 = bits.Mul32(x7, 0x449c0f01)
	var x569 uint32
	var x570 uint32
	x569, x570 = bits.Add32(x568, x565, uint32(0x0))
	var x571 uint32
	var x572 uint32
	x571, x572 = bits.Add32(x566, x563, uint32(uint1(x570)))
	var x573 uint32
	var x574 uint32
	x573, x574 = bits.Add32(x564, x561, uint32(uint1(x572)))
	var x575 uint32
	var x576 uint32
	x575, x576 = bits.Add32(x562, x559, uint32(uint1(x574)))
	var x577 uint32
	var x578 uint32
	x577, x578 = bits.Add32(x560, x557, uint32(uint1(x576)))
	var x579 uint32
	var x580 uint32
	x579, x580 = bits.Add32(x558, x555, uint32(uint1(x578)))
	var x581 uint32
	var x582 uint32
	x581, x582 = bits.Add32(x556, x553, uint32(uint1(x580)))
	var x583 uint32
	var x584 uint32
	x583, x584 = bits.Add32(x539, x567, uint32(0x0))
	var x585 uint32
	var x586 uint32
	x585, x586 = bits.Add32(x541, x569, uint32(uint1(x584)))
	var x587 uint32
	var x588 uint32
	x587, x588 = bits.Add32(x543, x571, uint32(uint1(x586)))
	var x589 uint32
	var x590 uint32
	x589, x590 = bits.Add32(x545, x573, uint32(uint1(x588)))
	var x591 uint32
	var x592 uint32
	x591, x592 = bits.Add32(x547, x575, uint32(uint1(x590)))
	var x593 uint32
	var x594 uint32
	x593, x594 = bits.Add32(x549, x577, uint32(uint1(x592)))
	var x595 uint32
	var x596 uint32
	x595, x596 = bits.Add32(x551, x579, uint32(uint1(x594)))
	var x597 uint32
	var x598 uint32
	x597, x598 = bits.Add32(((uint32(uint1(x552)) + (uint32(uint1(x518)) + (uint32(uint1(x502)) + x474))) + x522), x581, uint32(uint1(x596)))
	var x599 uint32
	_, x599 = bits.Mul32(x583, 0x12547e1b)
	var x601 uint32
	var x602 uint32
	x602, x601 = bits.Mul32(x599, 0x10000000)
	var x603 uint32
	var x604 uint32
	x604, x603 = bits.Mul32(x599, 0x14def9de)
	var x605 uint32
	var x606 uint32
	x606, x605 = bits.Mul32(x599, 0xa2f79cd6)
	var x607 uint32
	var x608 uint32
	x608, x607 = bits.Mul32(x599, 0x5812631a)
	var x609 uint32
	var x610 uint32
	x610, x609 = bits.Mul32(x599, 0x5cf5d3ed)
	var x611 uint32
	var x612 uint32
	x611, x612 = bits.Add32(x610, x607, uint32(0x0))
	var x613 uint32
	var x614 uint32
	x613, x614 = bits.Add32(x608, x605, uint32(uint1(x612)))
	var x615 uint32
	var x616 uint32
	x615, x616 = bits.Add32(x606, x603, uint32(uint1(x614)))
	var x618 uint32
	_, x618 = bits.Add32(x583, x609, uint32(0x0))
	var x619 uint32
	var x620 uint32
	x619, x620 = bits.Add32(x585, x611, uint32(uint1(x618)))
	var x621 uint32
	var x622 uint32
	x621, x622 = bits.Add32(x587, x613, uint32(uint1(x620)))
	var x623 uint32
	var x624 uint32
	x623, x624 = bits.Add32(x589, x615, uint32(uint1(x622)))
	var x625 uint32
	var x626 uint32
	x625, x626 = bits.Add32(x591, (uint32(uint1(x616)) + x604), uint32(uint1(x624)))
	var x627 uint32
	var x628 uint32
	x627, x628 = bits.Add32(x593, uint32(0x0), uint32(uint1(x626)))
	var x629 uint32
	var x630 uint32
	x629, x630 = bits.Add32(x595, uint32(0x0), uint32(uint1(x628)))
	var x631 uint32
	var x632 uint32
	x631, x632 = bits.Add32(x597, x601, uint32(uint1(x630)))
	x633 := ((uint32(uint1(x632)) + (uint32(uint1(x598)) + (uint32(uint1(x582)) + x554))) + x602)
	var x634 uint32
	var x635 uint32
	x634, x635 = bits.Sub32(x619, 0x5cf5d3ed, uint32(0x0))
	var x636 uint32
	var x637 uint32
	x636, x637 = bits.Sub32(x621, 0x5812631a, uint32(uint1(x635)))
	var x638 uint32
	var x639 uint32
	x638, x639 = bits.Sub32(x623, 0xa2f79cd6, uint32(uint1(x637)))
	var x640 uint32
	var x641 uint32
	x640, x641 = bits.Sub32(x625, 0x14def9de, uint32(uint1(x639)))
	var x642 uint32
	var x643 uint32
	x642, x643 = bits.Sub32(x627, uint32(0x0), uint32(uint1(x641)))
	var x644 uint32
	var x645 uint32
	x644, x645 = bits.Sub32(x629, uint32(0x0), uint32(uint1(x643)))
	var x646 uint32
	var x647 uint32
	x646, x647 = bits.Sub32(x631, uint32(0x0), uint32(uint1(x645)))
	var x648 uint32
	var x649 uint32
	x648, x649 = bits.Sub32(x633, 0x10000000, uint32(uint1(x647)))
	var x651 uint32
	_, x651 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x649)))
	var x652 uint32
	cmovznzU32(&x652, uint1(x651), x634, x619)
	var x653 uint32
	cmovznzU32(&x653, uint1(x651), x636, x621)
	var x654 uint32
	cmovznzU32(&x654, uint1(x651), x638, x623)
	var x655 uint32
	cmovznzU32(&x655, uint1(x651), x640, x625)
	var x656 uint32
	cmovznzU32(&x656, uint1(x651), x642, x627)
	var x657 uint32
	cmovznzU32(&x657, uint1(x651), x644, x629)
	var x658 uint32
	cmovznzU32(&x658, uint1(x651), x646, x631)
	var x659 uint32
	cmovznzU32(&x659, uint1(x651), x648, x633)
	out1[0] = x652
	out1[1] = x653
	out1[2] = x654
	out1[3] = x655
	out1[4] = x656
	out1[5] = x657
	out1[6] = x658
	out1[7] = x659
}

// Nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [0x0 ~> 0xffffffff]
func Nonzero(out1 *uint32, arg1 *[8]uint32) {
	x1 := (arg1[0] | (arg1[1] | (arg1[2] | (arg1[3] | (arg1[4] | (arg1[5] | (arg1[6] | arg1[7])))))))
	*out1 = x1
}

// Selectznz is a multi-limb conditional select.
//
// Postconditions:
//   out1 = (if arg1 = 0 then arg2 else arg3)
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func Selectznz(out1 *[8]uint32, arg1 uint1, arg2 *[8]uint32, arg3 *[8]uint32) {
	var x1 uint32
	cmovznzU32(&x1, arg1, arg2[0], arg3[0])
	var x2 uint32
	cmovznzU32(&x2, arg1, arg2[1], arg3[1])
	var x3 uint32
	cmovznzU32(&x3, arg1, arg2[2], arg3[2])
	var x4 uint32
	cmovznzU32(&x4, arg1, arg2[3], arg3[3])
	var x5 uint32
	cmovznzU32(&x5, arg1, arg2[4], arg3[4])
	var x6 uint32
	cmovznzU32(&x6, arg1, arg2[5], arg3[5])
	var x7 uint32
	cmovznzU32(&x7, arg1, arg2[6], arg3[6])
	var x8 uint32
	cmovznzU32(&x8, arg1, arg2[7], arg3[7])
	out1[0] = x1
	out1[1] = x2
	out1[2] = x3
	out1[3] = x4
	out1[4] = x5
	out1[5] = x6
	out1[6] = x7
	out1[7] = x8
}

// ToBytes serializes a field element NOT in the Montgomery domain to bytes in little-endian order.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..31]
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0x1fffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0x1f]]
func ToBytes(out1 *[32]uint8, arg1 *[8]uint32) {
	x1 := arg1[7]
	x2 := arg1[6]
	x3 := arg1[5]
	x4 := arg1[4]
	x5 := arg1[3]
	x6 := arg1[2]
	x7 := arg1[1]
	x8 := arg1[0]
	x9 := (uint8(x8) & 0xff)
	x10 := (x8 >> 8)
	x11 := (uint8(x10) & 0xff)
	x12 := (x10 >> 8)
	x13 := (uint8(x12) & 0xff)
	x14 := uint8((x12 >> 8))
	x15 := (uint8(x7) & 0xff)
	x16 := (x7 >> 8)
	x17 := (uint8(x16) & 0xff)
	x18 := (x16 >> 8)
	x19 := (uint8(x18) & 0xff)
	x20 := uint8((x18 >> 8))
	x21 := (uint8(x6) & 0xff)
	x22 := (x6 >> 8)
	x23 := (uint8(x22) & 0xff)
	x24 := (x22 >> 8)
	x25 := (uint8(x24) & 0xff)
	x26 := uint8((x24 >> 8))
	x27 := (uint8(x5) & 0xff)
	x28 := (x5 >> 8)
	x29 := (uint8(x28) & 0xff)
	x30 := (x28 >> 8)
	x31 := (uint8(x30) & 0xff)
	x32 := uint8((x30 >> 8))
	x33 := (uint8(x4) & 0xff)
	x34 := (x4 >> 8)
	x35 := (uint8(x34) & 0xff)
	x36 := (x34 >> 8)
	x37 := (uint8(x36) & 0xff)
	x38 := uint8((x36 >> 8))
	x39 := (uint8(x3) & 0xff)
	x40 := (x3 >> 8)
	x41 := (uint8(x40) & 0xff)
	x42 := (x40 >> 8)
	x43 := (uint8(x42) & 0xff)
	x44 := uint8((x42 >> 8))
	x45 := (uint8(x2) & 0xff)
	x46 := (x2 >> 8)
	x47 := (uint8(x46) & 0xff)
	x48 := (x46 >> 8)
	x49 := (uint8(x48) & 0xff)
	x50 := uint8((x48 >> 8))
	x51 := (uint8(x1) & 0xff)
	x52 := (x1 >> 8)
	x53 := (uint8(x52) & 0xff)
	x54 := (x52 >> 8)
	x55 := (uint8(x54) & 0xff)
	x56 := uint8((x54 >> 8))
	out1[0] = x9
	out1[1] = x11
	out1[2] = x13
	out1[3] = x14
	out1[4] = x15
	out1[5] = x17
	out1[6] = x19
	out1[7] = x20
	out1[8] = x21
	out1[9] = x23
	out1[10] = x25
	out1[11] = x26
	out1[12] = x27
	out1[13] = x29
	out1[14] = x31
	out1[15] = x32
	out1[16] = x33
	out1[17] = x35
	out1[18] = x37
	out1[19] = x38
	out1[20] = x39
	out1[21] = x41
	out1[22] = x43
	out1[23] = x44
	out1[24] = x45
	out1[25] = x47
	out1[26] = x49
	out1[27] = x50
	out1[28] = x51
	out1[29] = x53
	out1[30] = x55
	out1[31] = x56
}

// FromBytes deserializes a field element NOT in the Montgomery domain from bytes in little-endian order.
//
// Preconditions:
//   0 ≤ bytes_eval arg1 < m
// Postconditions:
//   eval out1 mod m = bytes_eval arg1 mod m
//   0 ≤ eval out1 < m
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0x1f]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0x1fffffff]]
func FromBytes(out1 *[8]uint32, arg1 *[32]uint8) {
	x1 := (uint32(arg1[31]) << 24)
	x2 := (uint32(arg1[30]) << 16)
	x3 := (uint32(arg1[29]) << 8)
	x4 := arg1[28]
	x5 := (uint32(arg1[27]) << 24)
	x6 := (uint32(arg1[26]) << 16)
	x7 := (uint32(arg1[25]) << 8)
	x8 := arg1[24]
	x9 := (uint32(arg1[23]) << 24)
	x10 := (uint32(arg1[22]) << 16)
	x11 := (uint32(arg1[21]) << 8)
	x12 := arg1[20]
	x13 := (uint32(arg1[19]) << 24)
	x14 := (uint32(arg1[18]) << 16)
	x15 := (uint32(arg1[17]) << 8)
	x16 := arg1[16]
	x17 := (uint32(arg1[15]) << 24)
	x18 := (uint32(arg1[14]) << 16)
	x19 := (uint32(arg1[13]) << 8)
	x20 := arg1[12]
	x21 := (uint32(arg1[11]) << 24)
	x22 := (uint32(arg1[10]) << 16)
	x23 := (uint32(arg1[9]) << 8)
	x24 := arg1[8]
	x25 := (uint32(arg1[7]) << 24)
	x26 := (uint32(arg1[6]) << 16)
	x27 := (uint32(arg1[5]) << 8)
	x28 := arg1[4]
	x29 := (uint32(arg1[3]) << 24)
	x30 := (uint32(arg1[2]) << 16)
	x31 := (uint32(arg1[1]) << 8)
	x32 := arg1[0]
	x33 := (x31 + uint32(x32))
	x34 := (x30 + x33)
	x35 := (x29 + x34)
	x36 := (x27 + uint32(x28))
	x37 := (x26 + x36)
	x38 := (x25 + x37)
	x39 := (x23 + uint32(x24))
	x40 := (x22 + x39)
	x41 := (x21 + x40)
	x42 := (x19 + uint32(x20))
	x43 := (x18 + x42)
	x44 := (x17 + x43)
	x45 := (x15 + uint32(x16))
	x46 := (x14 + x45)
	x47 := (x13 + x46)
	x48 := (x11 + uint32(x12))
	x49 := (x10 + x48)
	x50 := (x9 + x49)
	x51 := (x7 + uint32(x8))
	x52 := (x6 + x51)
	x53 := (x5 + x52)
	x54 := (x3 + uint32(x4))
	x55 := (x2 + x54)
	x56 := (x1 + x55)
	out1[0] = x35
	out1[1] = x38
	out1[2] = x41
	out1[3] = x44
	out1[4] = x47
	out1[5] = x50
	out1[6] = x53
	out1[7] = x56
}

// SetOne returns the field element one in the Montgomery domain.
//
// Postconditions:
//   eval (from_montgomery out1) mod m = 1 mod m
//   0 ≤ eval out1 < m
//
func SetOne(out1 *MontgomeryDomainFieldElement) {
	out1[0] = 0x8d98951d
	out1[1] = 0xd6ec3174
	out1[2] = 0x737dcf70
	out1[3] = 0xc6ef5bf4
	out1[4] = 0xfffffffe
	out1[5] = 0xffffffff
	out1[6] = 0xffffffff
	out1[7] = 0xfffffff
}

// Msat returns the saturated representation of the prime modulus.
//
// Postconditions:
//   twos_complement_eval out1 = m
//   0 ≤ eval out1 < m
//
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func Msat(out1 *[9]uint32) {
	out1[0] = 0x5cf5d3ed
	out1[1] = 0x5812631a
	out1[2] = 0xa2f79cd6
	out1[3] = 0x14def9de
	out1[4] = uint32(0x0)
	out1[5] = uint32(0x0)
	out1[6] = uint32(0x0)
	out1[7] = 0x10000000
	out1[8] = uint32(0x0)
}

// Divstep computes a divstep.
//
// Preconditions:
//   0 ≤ eval arg4 < m
//   0 ≤ eval arg5 < m
// Postconditions:
//   out1 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then 1 - arg1 else 1 + arg1)
//   twos_complement_eval out2 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then twos_complement_eval arg3 else twos_complement_eval arg2)
//   twos_complement_eval out3 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then ⌊(twos_complement_eval arg3 - twos_complement_eval arg2) / 2⌋ else ⌊(twos_complement_eval arg3 + (twos_complement_eval arg3 mod 2) * twos_complement_eval arg2) / 2⌋)
//   eval (from_montgomery out4) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (2 * eval (from_montgomery arg5)) mod m else (2 * eval (from_montgomery arg4)) mod m)
//   eval (from_montgomery out5) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (eval (from_montgomery arg4) - eval (from_montgomery arg4)) mod m else (eval (from_montgomery arg5) + (twos_complement_eval arg3 mod 2) * eval (from_montgomery arg4)) mod m)
//   0 ≤ eval out5 < m
//   0 ≤ eval out5 < m
//   0 ≤ eval out2 < m
//   0 ≤ eval out3 < m
//
// Input Bounds:
//   arg1: [0x0 ~> 0xffffffff]
//   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [0x0 ~> 0xffffffff]
//   out2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   out3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   out4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   out5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func Divstep(out1 *uint32, out2 *[9]uint32, out3 *[9]uint32, out4 *[8]uint32, out5 *[8]uint32, arg1 uint32, arg2 *[9]uint32, arg3 *[9]uint32, arg4 *[8]uint32, arg5 *[8]uint32) {
	var x1 uint32
	x1, _ = bits.Add32((^arg1), uint32(0x1), uint32(0x0))
	x3 := (uint1((x1 >> 31)) & (uint1(arg3[0]) & 0x1))
	var x4 uint32
	x4, _ = bits.Add32((^arg1), uint32(0x1), uint32(0x0))
	var x6 uint32
	cmovznzU32(&x6, x3, arg1, x4)
	var x7 uint32
	cmovznzU32(&x7, x3, arg2[0], arg3[0])
	var x8 uint32
	cmovznzU32(&x8, x3, arg2[1], arg3[1])
	var x9 uint32
	cmovznzU32(&x9, x3, arg2[2], arg3[2])
	var x10 uint32
	cmovznzU32(&x10, x3, arg2[3], arg3[3])
	var x11 uint32
	cmovznzU32(&x11, x3, arg2[4], arg3[4])
	var x12 uint32
	cmovznzU32(&x12, x3, arg2[5], arg3[5])
	var x13 uint32
	cmovznzU32(&x13, x3, arg2[6], arg3[6])
	var x14 uint32
	cmovznzU32(&x14, x3, arg2[7], arg3[7])
	var x15 uint32
	cmovznzU32(&x15, x3, arg2[8], arg3[8])
	var x16 uint32
	var x17 uint32
	x16, x17 = bits.Add32(uint32(0x1), (^arg2[0]), uint32(0x0))
	var x18 uint32
	var x19 uint32
	x18, x19 = bits.Add32(uint32(0x0), (^arg2[1]), uint32(uint1(x17)))
	var x20 uint32
	var x21 uint32
	x20, x21 = bits.Add32(uint32(0x0), (^arg2[2]), uint32(uint1(x19)))
	var x22 uint32
	var x23 uint32
	x22, x23 = bits.Add32(uint32(0x0), (^arg2[3]), uint32(uint1(x21)))
	var x24 uint32
	var x25 uint32
	x24, x25 = bits.Add32(uint32(0x0), (^arg2[4]), uint32(uint1(x23)))
	var x26 uint32
	var x27 uint32
	x26, x27 = bits.Add32(uint32(0x0), (^arg2[5]), uint32(uint1(x25)))
	var x28 uint32
	var x29 uint32
	x28, x29 = bits.Add32(uint32(0x0), (^arg2[6]), uint32(uint1(x27)))
	var x30 uint32
	var x31 uint32
	x30, x31 = bits.Add32(uint32(0x0), (^arg2[7]), uint32(uint1(x29)))
	var x32 uint32
	x32, _ = bits.Add32(uint32(0x0), (^arg2[8]), uint32(uint1(x31)))
	var x34 uint32
	cmovznzU32(&x34, x3, arg3[0], x16)
	var x35 uint32
	cmovznzU32(&x35, x3, arg3[1], x18)
	var x36 uint32
	cmovznzU32(&x36, x3, arg3[2], x20)
	var x37 uint32
	cmovznzU32(&x37, x3, arg3[3], x22)
	var x38 uint32
	cmovznzU32(&x38, x3, arg3[4], x24)
	var x39 uint32
	cmovznzU32(&x39, x3, arg3[5], x26)
	var x40 uint32
	cmovznzU32(&x40, x3, arg3[6], x28)
	var x41 uint32
	cmovznzU32(&x41, x3, arg3[7], x30)
	var x42 uint32
	cmovznzU32(&x42, x3, arg3[8], x32)
	var x43 uint32
	cmovznzU32(&x43, x3, arg4[0], arg5[0])
	var x44 uint32
	cmovznzU32(&x44, x3, arg4[1], arg5[1])
	var x45 uint32
	cmovznzU32(&x45, x3, arg4[2], arg5[2])
	var x46 uint32
	cmovznzU32(&x46, x3, arg4[3], arg5[3])
	var x47 uint32
	cmovznzU32(&x47, x3, arg4[4], arg5[4])
	var x48 uint32
	cmovznzU32(&x48, x3, arg4[5], arg5[5])
	var x49 uint32
	cmovznzU32(&x49, x3, arg4[6], arg5[6])
	var x50 uint32
	cmovznzU32(&x50, x3, arg4[7], arg5[7])
	var x51 uint32
	var x52 uint32
	x51, x52 = bits.Add32(x43, x43, uint32(0x0))
	var x53 uint32
	var x54 uint32
	x53, x54 = bits.Add32(x44, x44, uint32(uint1(x52)))
	var x55 uint32
	var x56 uint32
	x55, x56 = bits.Add32(x45, x45, uint32(uint1(x54)))
	var x57 uint32
	var x58 uint32
	x57, x58 = bits.Add32(x46, x46, uint32(uint1(x56)))
	var x59 uint32
	var x60 uint32
	x59, x60 = bits.Add32(x47, x47, uint32(uint1(x58)))
	var x61 uint32
	var x62 uint32
	x61, x62 = bits.Add32(x48, x48, uint32(uint1(x60)))
	var x63 uint32
	var x64 uint32
	x63, x64 = bits.Add32(x49, x49, uint32(uint1(x62)))
	var x65 uint32
	var x66 uint32
	x65, x66 = bits.Add32(x50, x50, uint32(uint1(x64)))
	var x67 uint32
	var x68 uint32
	x67, x68 = bits.Sub32(x51, 0x5cf5d3ed, uint32(0x0))
	var x69 uint32
	var x70 uint32
	x69, x70 = bits.Sub32(x53, 0x5812631a, uint32(uint1(x68)))
	var x71 uint32
	var x72 uint32
	x71, x72 = bits.Sub32(x55, 0xa2f79cd6, uint32(uint1(x70)))
	var x73 uint32
	var x74 uint32
	x73, x74 = bits.Sub32(x57, 0x14def9de, uint32(uint1(x72)))
	var x75 uint32
	var x76 uint32
	x75, x76 = bits.Sub32(x59, uint32(0x0), uint32(uint1(x74)))
	var x77 uint32
	var x78 uint32
	x77, x78 = bits.Sub32(x61, uint32(0x0), uint32(uint1(x76)))
	var x79 uint32
	var x80 uint32
	x79, x80 = bits.Sub32(x63, uint32(0x0), uint32(uint1(x78)))
	var x81 uint32
	var x82 uint32
	x81, x82 = bits.Sub32(x65, 0x10000000, uint32(uint1(x80)))
	var x84 uint32
	_, x84 = bits.Sub32(uint32(uint1(x66)), uint32(0x0), uint32(uint1(x82)))
	x85 := arg4[7]
	x86 := arg4[6]
	x87 := arg4[5]
	x88 := arg4[4]
	x89 := arg4[3]
	x90 := arg4[2]
	x91 := arg4[1]
	x92 := arg4[0]
	var x93 uint32
	var x94 uint32
	x93, x94 = bits.Sub32(uint32(0x0), x92, uint32(0x0))
	var x95 uint32
	var x96 uint32
	x95, x96 = bits.Sub32(uint32(0x0), x91, uint32(uint1(x94)))
	var x97 uint32
	var x98 uint32
	x97, x98 = bits.Sub32(uint32(0x0), x90, uint32(uint1(x96)))
	var x99 uint32
	var x100 uint32
	x99, x100 = bits.Sub32(uint32(0x0), x89, uint32(uint1(x98)))
	var x101 uint32
	var x102 uint32
	x101, x102 = bits.Sub32(uint32(0x0), x88, uint32(uint1(x100)))
	var x103 uint32
	var x104 uint32
	x103, x104 = bits.Sub32(uint32(0x0), x87, uint32(uint1(x102)))
	var x105 uint32
	var x106 uint32
	x105, x106 = bits.Sub32(uint32(0x0), x86, uint32(uint1(x104)))
	var x107 uint32
	var x108 uint32
	x107, x108 = bits.Sub32(uint32(0x0), x85, uint32(uint1(x106)))
	var x109 uint32
	cmovznzU32(&x109, uint1(x108), uint32(0x0), 0xffffffff)
	var x110 uint32
	var x111 uint32
	x110, x111 = bits.Add32(x93, (x109 & 0x5cf5d3ed), uint32(0x0))
	var x112 uint32
	var x113 uint32
	x112, x113 = bits.Add32(x95, (x109 & 0x5812631a), uint32(uint1(x111)))
	var x114 uint32
	var x115 uint32
	x114, x115 = bits.Add32(x97, (x109 & 0xa2f79cd6), uint32(uint1(x113)))
	var x116 uint32
	var x117 uint32
	x116, x117 = bits.Add32(x99, (x109 & 0x14def9de), uint32(uint1(x115)))
	var x118 uint32
	var x119 uint32
	x118, x119 = bits.Add32(x101, uint32(0x0), uint32(uint1(x117)))
	var x120 uint32
	var x121 uint32
	x120, x121 = bits.Add32(x103, uint32(0x0), uint32(uint1(x119)))
	var x122 uint32
	var x123 uint32
	x122, x123 = bits.Add32(x105, uint32(0x0), uint32(uint1(x121)))
	var x124 uint32
	x124, _ = bits.Add32(x107, (x109 & 0x10000000), uint32(uint1(x123)))
	var x126 uint32
	cmovznzU32(&x126, x3, arg5[0], x110)
	var x127 uint32
	cmovznzU32(&x127, x3, arg5[1], x112)
	var x128 uint32
	cmovznzU32(&x128, x3, arg5[2], x114)
	var x129 uint32
	cmovznzU32(&x129, x3, arg5[3], x116)
	var x130 uint32
	cmovznzU32(&x130, x3, arg5[4], x118)
	var x131 uint32
	cmovznzU32(&x131, x3, arg5[5], x120)
	var x132 uint32
	cmovznzU32(&x132, x3, arg5[6], x122)
	var x133 uint32
	cmovznzU32(&x133, x3, arg5[7], x124)
	x134 := (uint1(x34) & 0x1)
	var x135 uint32
	cmovznzU32(&x135, x134, uint32(0x0), x7)
	var x136 uint32
	cmovznzU32(&x136, x134, uint32(0x0), x8)
	var x137 uint32
	cmovznzU32(&x137, x134, uint32(0x0), x9)
	var x138 uint32
	cmovznzU32(&x138, x134, uint32(0x0), x10)
	var x139 uint32
	cmovznzU32(&x139, x134, uint32(0x0), x11)
	var x140 uint32
	cmovznzU32(&x140, x134, uint32(0x0), x12)
	var x141 uint32
	cmovznzU32(&x141, x134, uint32(0x0), x13)
	var x142 uint32
	cmovznzU32(&x142, x134, uint32(0x0), x14)
	var x143 uint32
	cmovznzU32(&x143, x134, uint32(0x0), x15)
	var x144 uint32
	var x145 uint32
	x144, x145 = bits.Add32(x34, x135, uint32(0x0))
	var x146 uint32
	var x147 uint32
	x146, x147 = bits.Add32(x35, x136, uint32(uint1(x145)))
	var x148 uint32
	var x149 uint32
	x148, x149 = bits.Add32(x36, x137, uint32(uint1(x147)))
	var x150 uint32
	var x151 uint32
	x150, x151 = bits.Add32(x37, x138, uint32(uint1(x149)))
	var x152 uint32
	var x153 uint32
	x152, x153 = bits.Add32(x38, x139, uint32(uint1(x151)))
	var x154 uint32
	var x155 uint32
	x154, x155 = bits.Add32(x39, x140, uint32(uint1(x153)))
	var x156 uint32
	var x157 uint32
	x156, x157 = bits.Add32(x40, x141, uint32(uint1(x155)))
	var x158 uint32
	var x159 uint32
	x158, x159 = bits.Add32(x41, x142, uint32(uint1(x157)))
	var x160 uint32
	x160, _ = bits.Add32(x42, x143, uint32(uint1(x159)))
	var x162 uint32
	cmovznzU32(&x162, x134, uint32(0x0), x43)
	var x163 uint32
	cmovznzU32(&x163, x134, uint32(0x0), x44)
	var x164 uint32
	cmovznzU32(&x164, x134, uint32(0x0), x45)
	var x165 uint32
	cmovznzU32(&x165, x134, uint32(0x0), x46)
	var x166 uint32
	cmovznzU32(&x166, x134, uint32(0x0), x47)
	var x167 uint32
	cmovznzU32(&x167, x134, uint32(0x0), x48)
	var x168 uint32
	cmovznzU32(&x168, x134, uint32(0x0), x49)
	var x169 uint32
	cmovznzU32(&x169, x134, uint32(0x0), x50)
	var x170 uint32
	var x171 uint32
	x170, x171 = bits.Add32(x126, x162, uint32(0x0))
	var x172 uint32
	var x173 uint32
	x172, x173 = bits.Add32(x127, x163, uint32(uint1(x171)))
	var x174 uint32
	var x175 uint32
	x174, x175 = bits.Add32(x128, x164, uint32(uint1(x173)))
	var x176 uint32
	var x177 uint32
	x176, x177 = bits.Add32(x129, x165, uint32(uint1(x175)))
	var x178 uint32
	var x179 uint32
	x178, x179 = bits.Add32(x130, x166, uint32(uint1(x177)))
	var x180 uint32
	var x181 uint32
	x180, x181 = bits.Add32(x131, x167, uint32(uint1(x179)))
	var x182 uint32
	var x183 uint32
	x182, x183 = bits.Add32(x132, x168, uint32(uint1(x181)))
	var x184 uint32
	var x185 uint32
	x184, x185 = bits.Add32(x133, x169, uint32(uint1(x183)))
	var x186 uint32
	var x187 uint32
	x186, x187 = bits.Sub32(x170, 0x5cf5d3ed, uint32(0x0))
	var x188 uint32
	var x189 uint32
	x188, x189 = bits.Sub32(x172, 0x5812631a, uint32(uint1(x187)))
	var x190 uint32
	var x191 uint32
	x190, x191 = bits.Sub32(x174, 0xa2f79cd6, uint32(uint1(x189)))
	var x192 uint32
	var x193 uint32
	x192, x193 = bits.Sub32(x176, 0x14def9de, uint32(uint1(x191)))
	var x194 uint32
	var x195 uint32
	x194, x195 = bits.Sub32(x178, uint32(0x0), uint32(uint1(x193)))
	var x196 uint32
	var x197 uint32
	x196, x197 = bits.Sub32(x180, uint32(0x0), uint32(uint1(x195)))
	var x198 uint32
	var x199 uint32
	x198, x199 = bits.Sub32(x182, uint32(0x0), uint32(uint1(x197)))
	var x200 uint32
	var x201 uint32
	x200, x201 = bits.Sub32(x184, 0x10000000, uint32(uint1(x199)))
	var x203 uint32
	_, x203 = bits.Sub32(uint32(uint1(x185)), uint32(0x0), uint32(uint1(x201)))
	var x204 uint32
	x204, _ = bits.Add32(x6, uint32(0x1), uint32(0x0))
	x206 := ((x144 >> 1) | ((x146 << 31) & 0xffffffff))
	x207 := ((x146 >> 1) | ((x148 << 31) & 0xffffffff))
	x208 := ((x148 >> 1) | ((x150 << 31) & 0xffffffff))
	x209 := ((x150 >> 1) | ((x152 << 31) & 0xffffffff))
	x210 := ((x152 >> 1) | ((x154 << 31) & 0xffffffff))
	x211 := ((x154 >> 1) | ((x156 << 31) & 0xffffffff))
	x212 := ((x156 >> 1) | ((x158 << 31) & 0xffffffff))
	x213 := ((x158 >> 1) | ((x160 << 31) & 0xffffffff))
	x214 := ((x160 & 0x80000000) | (x160 >> 1))
	var x215 uint32
	cmovznzU32(&x215, uint1(x84), x67, x51)
	var x216 uint32
	cmovznzU32(&x216, uint1(x84), x69, x53)
	var x217 uint32
	cmovznzU32(&x217, uint1(x84), x71, x55)
	var x218 uint32
	cmovznzU32(&x218, uint1(x84), x73, x57)
	var x219 uint32
	cmovznzU32(&x219, uint1(x84), x75, x59)
	var x220 uint32
	cmovznzU32(&x220, uint1(x84), x77, x61)
	var x221 uint32
	cmovznzU32(&x221, uint1(x84), x79, x63)
	var x222 uint32
	cmovznzU32(&x222, uint1(x84), x81, x65)
	var x223 uint32
	cmovznzU32(&x223, uint1(x203), x186, x170)
	var x224 uint32
	cmovznzU32(&x224, uint1(x203), x188, x172)
	var x225 uint32
	cmovznzU32(&x225, uint1(x203), x190, x174)
	var x226 uint32
	cmovznzU32(&x226, uint1(x203), x192, x176)
	var x227 uint32
	cmovznzU32(&x227, uint1(x203), x194, x178)
	var x228 uint32
	cmovznzU32(&x228, uint1(x203), x196, x180)
	var x229 uint32
	cmovznzU32(&x229, uint1(x203), x198, x182)
	var x230 uint32
	cmovznzU32(&x230, uint1(x203), x200, x184)
	*out1 = x204
	out2[0] = x7
	out2[1] = x8
	out2[2] = x9
	out2[3] = x10
	out2[4] = x11
	out2[5] = x12
	out2[6] = x13
	out2[7] = x14
	out2[8] = x15
	out3[0] = x206
	out3[1] = x207
	out3[2] = x208
	out3[3] = x209
	out3[4] = x210
	out3[5] = x211
	out3[6] = x212
	out3[7] = x213
	out3[8] = x214
	out4[0] = x215
	out4[1] = x216
	out4[2] = x217
	out4[3] = x218
	out4[4] = x219
	out4[5] = x220
	out4[6] = x221
	out4[7] = x222
	out5[0] = x223
	out5[1] = x224
	out5[2] = x225
	out5[3] = x226
	out5[4] = x227
	out5[5] = x228
	out5[6] = x229
	out5[7] = x230
}

// DivstepPrecomp returns the precomputed value for Bernstein-Yang-inversion (in montgomery form).
//
// Postconditions:
//   eval (from_montgomery out1) = ⌊(m - 1) / 2⌋^(if ⌊log2 m⌋ + 1 < 46 then ⌊(49 * (⌊log2 m⌋ + 1) + 80) / 17⌋ else ⌊(49 * (⌊log2 m⌋ + 1) + 57) / 17⌋)
//   0 ≤ eval out1 < m
//
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func DivstepPrecomp(out1 *[8]uint32) {
	out1[0] = 0x36a7cb92
	out1[1] = 0xd70af844
	out1[2] = 0xb0b8b159
	out1[3] = 0x5f71c978
	out1[4] = 0x74947f1a
	out1[5] = 0xe76d8169
	out1[6] = 0xf193e4ff
	out1[7] = 0x19a2d36
}
