// Code generated by Fiat Cryptography. DO NOT EDIT.
//
// Autogenerated: 'src/ExtractionOCaml/unsaturated_solinas' --lang Go --relax-primitive-carry-to-bitwidth 32,64 --cmovznz-by-mul --internal-static --package-case flatcase --public-function-case UpperCamelCase --private-function-case camelCase --public-type-case UpperCamelCase --private-type-case camelCase --no-prefix-fiat --doc-newline-in-typedef-bounds --doc-prepend-header 'Code generated by Fiat Cryptography. DO NOT EDIT.' --doc-text-before-function-name '' --doc-text-before-type-name '' --package-name p521 '' 32 '(auto)' '2^521 - 1' carry_mul carry_square carry add sub opp selectznz to_bytes from_bytes relax carry_add carry_sub carry_opp
//
// curve description (via package name): p521
//
// machine_wordsize = 32 (from "32")
//
// requested operations: carry_mul, carry_square, carry, add, sub, opp, selectznz, to_bytes, from_bytes, relax, carry_add, carry_sub, carry_opp
//
// n = 19 (from "(auto)")
//
// s-c = 2^521 - [(1, 1)] (from "2^521 - 1")
//
// tight_bounds_multiplier = 1 (from "")
//
//
//
// Computed values:
//
//   carry_chain = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1]
//
//   eval z = z[0] + (z[1] << 28) + (z[2] << 55) + (z[3] << 83) + (z[4] << 110) + (z[5] << 138) + (z[6] << 165) + (z[7] << 192) + (z[8] << 220) + (z[9] << 247) + (z[10] << 0x113) + (z[11] << 0x12e) + (z[12] << 0x14a) + (z[13] << 0x165) + (z[14] << 0x180) + (z[15] << 0x19c) + (z[16] << 0x1b7) + (z[17] << 0x1d3) + (z[18] << 0x1ee)
//
//   bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17] << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168) + (z[22] << 176) + (z[23] << 184) + (z[24] << 192) + (z[25] << 200) + (z[26] << 208) + (z[27] << 216) + (z[28] << 224) + (z[29] << 232) + (z[30] << 240) + (z[31] << 248) + (z[32] << 256) + (z[33] << 0x108) + (z[34] << 0x110) + (z[35] << 0x118) + (z[36] << 0x120) + (z[37] << 0x128) + (z[38] << 0x130) + (z[39] << 0x138) + (z[40] << 0x140) + (z[41] << 0x148) + (z[42] << 0x150) + (z[43] << 0x158) + (z[44] << 0x160) + (z[45] << 0x168) + (z[46] << 0x170) + (z[47] << 0x178) + (z[48] << 0x180) + (z[49] << 0x188) + (z[50] << 0x190) + (z[51] << 0x198) + (z[52] << 0x1a0) + (z[53] << 0x1a8) + (z[54] << 0x1b0) + (z[55] << 0x1b8) + (z[56] << 0x1c0) + (z[57] << 0x1c8) + (z[58] << 0x1d0) + (z[59] << 0x1d8) + (z[60] << 0x1e0) + (z[61] << 0x1e8) + (z[62] << 0x1f0) + (z[63] << 0x1f8) + (z[64] << 2^9) + (z[65] << 0x208)
//
//   balance = [0x1ffffffe, 0xffffffe, 0x1ffffffe, 0xffffffe, 0x1ffffffe, 0xffffffe, 0xffffffe, 0x1ffffffe, 0xffffffe, 0x1ffffffe, 0xffffffe, 0x1ffffffe, 0xffffffe, 0xffffffe, 0x1ffffffe, 0xffffffe, 0x1ffffffe, 0xffffffe, 0xffffffe]
package p521

import "math/bits"

type uint1 uint64 // We use uint64 instead of a more narrow type for performance reasons; see https://github.com/mit-plv/fiat-crypto/pull/1006#issuecomment-892625927
type int1 int64 // We use uint64 instead of a more narrow type for performance reasons; see https://github.com/mit-plv/fiat-crypto/pull/1006#issuecomment-892625927

// LooseFieldElement is a field element with loose bounds.
//
// Bounds:
//
//   [[0x0 ~> 0x30000000], [0x0 ~> 0x18000000], [0x0 ~> 0x30000000], [0x0 ~> 0x18000000], [0x0 ~> 0x30000000], [0x0 ~> 0x18000000], [0x0 ~> 0x18000000], [0x0 ~> 0x30000000], [0x0 ~> 0x18000000], [0x0 ~> 0x30000000], [0x0 ~> 0x18000000], [0x0 ~> 0x30000000], [0x0 ~> 0x18000000], [0x0 ~> 0x18000000], [0x0 ~> 0x30000000], [0x0 ~> 0x18000000], [0x0 ~> 0x30000000], [0x0 ~> 0x18000000], [0x0 ~> 0x18000000]]
type LooseFieldElement [19]uint32

// TightFieldElement is a field element with tight bounds.
//
// Bounds:
//
//   [[0x0 ~> 0x10000000], [0x0 ~> 0x8000000], [0x0 ~> 0x10000000], [0x0 ~> 0x8000000], [0x0 ~> 0x10000000], [0x0 ~> 0x8000000], [0x0 ~> 0x8000000], [0x0 ~> 0x10000000], [0x0 ~> 0x8000000], [0x0 ~> 0x10000000], [0x0 ~> 0x8000000], [0x0 ~> 0x10000000], [0x0 ~> 0x8000000], [0x0 ~> 0x8000000], [0x0 ~> 0x10000000], [0x0 ~> 0x8000000], [0x0 ~> 0x10000000], [0x0 ~> 0x8000000], [0x0 ~> 0x8000000]]
type TightFieldElement [19]uint32

// addcarryxU28 is an addition with carry.
//
// Postconditions:
//   out1 = (arg1 + arg2 + arg3) mod 2^28
//   out2 = ⌊(arg1 + arg2 + arg3) / 2^28⌋
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [0x0 ~> 0xfffffff]
//   arg3: [0x0 ~> 0xfffffff]
// Output Bounds:
//   out1: [0x0 ~> 0xfffffff]
//   out2: [0x0 ~> 0x1]
func addcarryxU28(out1 *uint32, out2 *uint1, arg1 uint1, arg2 uint32, arg3 uint32) {
	x1 := ((uint32(arg1) + arg2) + arg3)
	x2 := (x1 & 0xfffffff)
	x3 := uint1((x1 >> 28))
	*out1 = x2
	*out2 = x3
}

// subborrowxU28 is a subtraction with borrow.
//
// Postconditions:
//   out1 = (-arg1 + arg2 + -arg3) mod 2^28
//   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^28⌋
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [0x0 ~> 0xfffffff]
//   arg3: [0x0 ~> 0xfffffff]
// Output Bounds:
//   out1: [0x0 ~> 0xfffffff]
//   out2: [0x0 ~> 0x1]
func subborrowxU28(out1 *uint32, out2 *uint1, arg1 uint1, arg2 uint32, arg3 uint32) {
	x1 := ((int32(arg2) - int32(arg1)) - int32(arg3))
	x2 := int1((x1 >> 28))
	x3 := (uint32(x1) & 0xfffffff)
	*out1 = x3
	*out2 = (0x0 - uint1(x2))
}

// addcarryxU27 is an addition with carry.
//
// Postconditions:
//   out1 = (arg1 + arg2 + arg3) mod 2^27
//   out2 = ⌊(arg1 + arg2 + arg3) / 2^27⌋
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [0x0 ~> 0x7ffffff]
//   arg3: [0x0 ~> 0x7ffffff]
// Output Bounds:
//   out1: [0x0 ~> 0x7ffffff]
//   out2: [0x0 ~> 0x1]
func addcarryxU27(out1 *uint32, out2 *uint1, arg1 uint1, arg2 uint32, arg3 uint32) {
	x1 := ((uint32(arg1) + arg2) + arg3)
	x2 := (x1 & 0x7ffffff)
	x3 := uint1((x1 >> 27))
	*out1 = x2
	*out2 = x3
}

// subborrowxU27 is a subtraction with borrow.
//
// Postconditions:
//   out1 = (-arg1 + arg2 + -arg3) mod 2^27
//   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^27⌋
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [0x0 ~> 0x7ffffff]
//   arg3: [0x0 ~> 0x7ffffff]
// Output Bounds:
//   out1: [0x0 ~> 0x7ffffff]
//   out2: [0x0 ~> 0x1]
func subborrowxU27(out1 *uint32, out2 *uint1, arg1 uint1, arg2 uint32, arg3 uint32) {
	x1 := ((int32(arg2) - int32(arg1)) - int32(arg3))
	x2 := int1((x1 >> 27))
	x3 := (uint32(x1) & 0x7ffffff)
	*out1 = x3
	*out2 = (0x0 - uint1(x2))
}

// cmovznzU32 is a single-word conditional move.
//
// Postconditions:
//   out1 = (if arg1 = 0 then arg2 else arg3)
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [0x0 ~> 0xffffffff]
//   arg3: [0x0 ~> 0xffffffff]
// Output Bounds:
//   out1: [0x0 ~> 0xffffffff]
func cmovznzU32(out1 *uint32, arg1 uint1, arg2 uint32, arg3 uint32) {
	x1 := (uint32(arg1) * 0xffffffff)
	x2 := ((x1 & arg3) | ((^x1) & arg2))
	*out1 = x2
}

// CarryMul multiplies two field elements and reduces the result.
//
// Postconditions:
//   eval out1 mod m = (eval arg1 * eval arg2) mod m
//
func CarryMul(out1 *TightFieldElement, arg1 *LooseFieldElement, arg2 *LooseFieldElement) {
	x1 := (uint64(arg1[18]) * uint64(arg2[18]))
	x2 := (uint64(arg1[18]) * uint64((arg2[17] * 0x2)))
	x3 := (uint64(arg1[18]) * uint64(arg2[16]))
	x4 := (uint64(arg1[18]) * uint64((arg2[15] * 0x2)))
	x5 := (uint64(arg1[18]) * uint64(arg2[14]))
	x6 := (uint64(arg1[18]) * uint64(arg2[13]))
	x7 := (uint64(arg1[18]) * uint64((arg2[12] * 0x2)))
	x8 := (uint64(arg1[18]) * uint64(arg2[11]))
	x9 := (uint64(arg1[18]) * uint64((arg2[10] * 0x2)))
	x10 := (uint64(arg1[18]) * uint64(arg2[9]))
	x11 := (uint64(arg1[18]) * uint64((arg2[8] * 0x2)))
	x12 := (uint64(arg1[18]) * uint64(arg2[7]))
	x13 := (uint64(arg1[18]) * uint64(arg2[6]))
	x14 := (uint64(arg1[18]) * uint64((arg2[5] * 0x2)))
	x15 := (uint64(arg1[18]) * uint64(arg2[4]))
	x16 := (uint64(arg1[18]) * uint64((arg2[3] * 0x2)))
	x17 := (uint64(arg1[18]) * uint64(arg2[2]))
	x18 := (uint64(arg1[18]) * uint64((arg2[1] * 0x2)))
	x19 := (uint64(arg1[17]) * uint64((arg2[18] * 0x2)))
	x20 := (uint64(arg1[17]) * uint64((arg2[17] * 0x2)))
	x21 := (uint64(arg1[17]) * uint64((arg2[16] * 0x2)))
	x22 := (uint64(arg1[17]) * uint64((arg2[15] * 0x2)))
	x23 := (uint64(arg1[17]) * uint64(arg2[14]))
	x24 := (uint64(arg1[17]) * uint64((arg2[13] * 0x2)))
	x25 := (uint64(arg1[17]) * uint64((arg2[12] * 0x2)))
	x26 := (uint64(arg1[17]) * uint64((arg2[11] * 0x2)))
	x27 := (uint64(arg1[17]) * uint64((arg2[10] * 0x2)))
	x28 := (uint64(arg1[17]) * uint64((arg2[9] * 0x2)))
	x29 := (uint64(arg1[17]) * uint64((arg2[8] * 0x2)))
	x30 := (uint64(arg1[17]) * uint64(arg2[7]))
	x31 := (uint64(arg1[17]) * uint64((arg2[6] * 0x2)))
	x32 := (uint64(arg1[17]) * uint64((arg2[5] * 0x2)))
	x33 := (uint64(arg1[17]) * uint64((arg2[4] * 0x2)))
	x34 := (uint64(arg1[17]) * uint64((arg2[3] * 0x2)))
	x35 := (uint64(arg1[17]) * uint64((arg2[2] * 0x2)))
	x36 := (uint64(arg1[16]) * uint64(arg2[18]))
	x37 := (uint64(arg1[16]) * uint64((arg2[17] * 0x2)))
	x38 := (uint64(arg1[16]) * uint64(arg2[16]))
	x39 := (uint64(arg1[16]) * uint64(arg2[15]))
	x40 := (uint64(arg1[16]) * uint64(arg2[14]))
	x41 := (uint64(arg1[16]) * uint64(arg2[13]))
	x42 := (uint64(arg1[16]) * uint64((arg2[12] * 0x2)))
	x43 := (uint64(arg1[16]) * uint64(arg2[11]))
	x44 := (uint64(arg1[16]) * uint64((arg2[10] * 0x2)))
	x45 := (uint64(arg1[16]) * uint64(arg2[9]))
	x46 := (uint64(arg1[16]) * uint64(arg2[8]))
	x47 := (uint64(arg1[16]) * uint64(arg2[7]))
	x48 := (uint64(arg1[16]) * uint64(arg2[6]))
	x49 := (uint64(arg1[16]) * uint64((arg2[5] * 0x2)))
	x50 := (uint64(arg1[16]) * uint64(arg2[4]))
	x51 := (uint64(arg1[16]) * uint64((arg2[3] * 0x2)))
	x52 := (uint64(arg1[15]) * uint64((arg2[18] * 0x2)))
	x53 := (uint64(arg1[15]) * uint64((arg2[17] * 0x2)))
	x54 := (uint64(arg1[15]) * uint64(arg2[16]))
	x55 := (uint64(arg1[15]) * uint64((arg2[15] * 0x2)))
	x56 := (uint64(arg1[15]) * uint64(arg2[14]))
	x57 := (uint64(arg1[15]) * uint64((arg2[13] * 0x2)))
	x58 := (uint64(arg1[15]) * uint64((arg2[12] * 0x2)))
	x59 := (uint64(arg1[15]) * uint64((arg2[11] * 0x2)))
	x60 := (uint64(arg1[15]) * uint64((arg2[10] * 0x2)))
	x61 := (uint64(arg1[15]) * uint64(arg2[9]))
	x62 := (uint64(arg1[15]) * uint64((arg2[8] * 0x2)))
	x63 := (uint64(arg1[15]) * uint64(arg2[7]))
	x64 := (uint64(arg1[15]) * uint64((arg2[6] * 0x2)))
	x65 := (uint64(arg1[15]) * uint64((arg2[5] * 0x2)))
	x66 := (uint64(arg1[15]) * uint64((arg2[4] * 0x2)))
	x67 := (uint64(arg1[14]) * uint64(arg2[18]))
	x68 := (uint64(arg1[14]) * uint64(arg2[17]))
	x69 := (uint64(arg1[14]) * uint64(arg2[16]))
	x70 := (uint64(arg1[14]) * uint64(arg2[15]))
	x71 := (uint64(arg1[14]) * uint64(arg2[14]))
	x72 := (uint64(arg1[14]) * uint64(arg2[13]))
	x73 := (uint64(arg1[14]) * uint64((arg2[12] * 0x2)))
	x74 := (uint64(arg1[14]) * uint64(arg2[11]))
	x75 := (uint64(arg1[14]) * uint64(arg2[10]))
	x76 := (uint64(arg1[14]) * uint64(arg2[9]))
	x77 := (uint64(arg1[14]) * uint64(arg2[8]))
	x78 := (uint64(arg1[14]) * uint64(arg2[7]))
	x79 := (uint64(arg1[14]) * uint64(arg2[6]))
	x80 := (uint64(arg1[14]) * uint64((arg2[5] * 0x2)))
	x81 := (uint64(arg1[13]) * uint64(arg2[18]))
	x82 := (uint64(arg1[13]) * uint64((arg2[17] * 0x2)))
	x83 := (uint64(arg1[13]) * uint64(arg2[16]))
	x84 := (uint64(arg1[13]) * uint64((arg2[15] * 0x2)))
	x85 := (uint64(arg1[13]) * uint64(arg2[14]))
	x86 := (uint64(arg1[13]) * uint64((arg2[13] * 0x2)))
	x87 := (uint64(arg1[13]) * uint64((arg2[12] * 0x2)))
	x88 := (uint64(arg1[13]) * uint64(arg2[11]))
	x89 := (uint64(arg1[13]) * uint64((arg2[10] * 0x2)))
	x90 := (uint64(arg1[13]) * uint64(arg2[9]))
	x91 := (uint64(arg1[13]) * uint64((arg2[8] * 0x2)))
	x92 := (uint64(arg1[13]) * uint64(arg2[7]))
	x93 := (uint64(arg1[13]) * uint64((arg2[6] * 0x2)))
	x94 := (uint64(arg1[12]) * uint64((arg2[18] * 0x2)))
	x95 := (uint64(arg1[12]) * uint64((arg2[17] * 0x2)))
	x96 := (uint64(arg1[12]) * uint64((arg2[16] * 0x2)))
	x97 := (uint64(arg1[12]) * uint64((arg2[15] * 0x2)))
	x98 := (uint64(arg1[12]) * uint64((arg2[14] * 0x2)))
	x99 := (uint64(arg1[12]) * uint64((arg2[13] * 0x2)))
	x100 := (uint64(arg1[12]) * uint64((arg2[12] * 0x2)))
	x101 := (uint64(arg1[12]) * uint64((arg2[11] * 0x2)))
	x102 := (uint64(arg1[12]) * uint64((arg2[10] * 0x2)))
	x103 := (uint64(arg1[12]) * uint64((arg2[9] * 0x2)))
	x104 := (uint64(arg1[12]) * uint64((arg2[8] * 0x2)))
	x105 := (uint64(arg1[12]) * uint64((arg2[7] * 0x2)))
	x106 := (uint64(arg1[11]) * uint64(arg2[18]))
	x107 := (uint64(arg1[11]) * uint64((arg2[17] * 0x2)))
	x108 := (uint64(arg1[11]) * uint64(arg2[16]))
	x109 := (uint64(arg1[11]) * uint64((arg2[15] * 0x2)))
	x110 := (uint64(arg1[11]) * uint64(arg2[14]))
	x111 := (uint64(arg1[11]) * uint64(arg2[13]))
	x112 := (uint64(arg1[11]) * uint64((arg2[12] * 0x2)))
	x113 := (uint64(arg1[11]) * uint64(arg2[11]))
	x114 := (uint64(arg1[11]) * uint64((arg2[10] * 0x2)))
	x115 := (uint64(arg1[11]) * uint64(arg2[9]))
	x116 := (uint64(arg1[11]) * uint64((arg2[8] * 0x2)))
	x117 := (uint64(arg1[10]) * uint64((arg2[18] * 0x2)))
	x118 := (uint64(arg1[10]) * uint64((arg2[17] * 0x2)))
	x119 := (uint64(arg1[10]) * uint64((arg2[16] * 0x2)))
	x120 := (uint64(arg1[10]) * uint64((arg2[15] * 0x2)))
	x121 := (uint64(arg1[10]) * uint64(arg2[14]))
	x122 := (uint64(arg1[10]) * uint64((arg2[13] * 0x2)))
	x123 := (uint64(arg1[10]) * uint64((arg2[12] * 0x2)))
	x124 := (uint64(arg1[10]) * uint64((arg2[11] * 0x2)))
	x125 := (uint64(arg1[10]) * uint64((arg2[10] * 0x2)))
	x126 := (uint64(arg1[10]) * uint64((arg2[9] * 0x2)))
	x127 := (uint64(arg1[9]) * uint64(arg2[18]))
	x128 := (uint64(arg1[9]) * uint64((arg2[17] * 0x2)))
	x129 := (uint64(arg1[9]) * uint64(arg2[16]))
	x130 := (uint64(arg1[9]) * uint64(arg2[15]))
	x131 := (uint64(arg1[9]) * uint64(arg2[14]))
	x132 := (uint64(arg1[9]) * uint64(arg2[13]))
	x133 := (uint64(arg1[9]) * uint64((arg2[12] * 0x2)))
	x134 := (uint64(arg1[9]) * uint64(arg2[11]))
	x135 := (uint64(arg1[9]) * uint64((arg2[10] * 0x2)))
	x136 := (uint64(arg1[8]) * uint64((arg2[18] * 0x2)))
	x137 := (uint64(arg1[8]) * uint64((arg2[17] * 0x2)))
	x138 := (uint64(arg1[8]) * uint64(arg2[16]))
	x139 := (uint64(arg1[8]) * uint64((arg2[15] * 0x2)))
	x140 := (uint64(arg1[8]) * uint64(arg2[14]))
	x141 := (uint64(arg1[8]) * uint64((arg2[13] * 0x2)))
	x142 := (uint64(arg1[8]) * uint64((arg2[12] * 0x2)))
	x143 := (uint64(arg1[8]) * uint64((arg2[11] * 0x2)))
	x144 := (uint64(arg1[7]) * uint64(arg2[18]))
	x145 := (uint64(arg1[7]) * uint64(arg2[17]))
	x146 := (uint64(arg1[7]) * uint64(arg2[16]))
	x147 := (uint64(arg1[7]) * uint64(arg2[15]))
	x148 := (uint64(arg1[7]) * uint64(arg2[14]))
	x149 := (uint64(arg1[7]) * uint64(arg2[13]))
	x150 := (uint64(arg1[7]) * uint64((arg2[12] * 0x2)))
	x151 := (uint64(arg1[6]) * uint64(arg2[18]))
	x152 := (uint64(arg1[6]) * uint64((arg2[17] * 0x2)))
	x153 := (uint64(arg1[6]) * uint64(arg2[16]))
	x154 := (uint64(arg1[6]) * uint64((arg2[15] * 0x2)))
	x155 := (uint64(arg1[6]) * uint64(arg2[14]))
	x156 := (uint64(arg1[6]) * uint64((arg2[13] * 0x2)))
	x157 := (uint64(arg1[5]) * uint64((arg2[18] * 0x2)))
	x158 := (uint64(arg1[5]) * uint64((arg2[17] * 0x2)))
	x159 := (uint64(arg1[5]) * uint64((arg2[16] * 0x2)))
	x160 := (uint64(arg1[5]) * uint64((arg2[15] * 0x2)))
	x161 := (uint64(arg1[5]) * uint64((arg2[14] * 0x2)))
	x162 := (uint64(arg1[4]) * uint64(arg2[18]))
	x163 := (uint64(arg1[4]) * uint64((arg2[17] * 0x2)))
	x164 := (uint64(arg1[4]) * uint64(arg2[16]))
	x165 := (uint64(arg1[4]) * uint64((arg2[15] * 0x2)))
	x166 := (uint64(arg1[3]) * uint64((arg2[18] * 0x2)))
	x167 := (uint64(arg1[3]) * uint64((arg2[17] * 0x2)))
	x168 := (uint64(arg1[3]) * uint64((arg2[16] * 0x2)))
	x169 := (uint64(arg1[2]) * uint64(arg2[18]))
	x170 := (uint64(arg1[2]) * uint64((arg2[17] * 0x2)))
	x171 := (uint64(arg1[1]) * uint64((arg2[18] * 0x2)))
	x172 := (uint64(arg1[18]) * uint64(arg2[0]))
	x173 := (uint64(arg1[17]) * uint64((arg2[1] * 0x2)))
	x174 := (uint64(arg1[17]) * uint64(arg2[0]))
	x175 := (uint64(arg1[16]) * uint64(arg2[2]))
	x176 := (uint64(arg1[16]) * uint64(arg2[1]))
	x177 := (uint64(arg1[16]) * uint64(arg2[0]))
	x178 := (uint64(arg1[15]) * uint64((arg2[3] * 0x2)))
	x179 := (uint64(arg1[15]) * uint64(arg2[2]))
	x180 := (uint64(arg1[15]) * uint64((arg2[1] * 0x2)))
	x181 := (uint64(arg1[15]) * uint64(arg2[0]))
	x182 := (uint64(arg1[14]) * uint64(arg2[4]))
	x183 := (uint64(arg1[14]) * uint64(arg2[3]))
	x184 := (uint64(arg1[14]) * uint64(arg2[2]))
	x185 := (uint64(arg1[14]) * uint64(arg2[1]))
	x186 := (uint64(arg1[14]) * uint64(arg2[0]))
	x187 := (uint64(arg1[13]) * uint64((arg2[5] * 0x2)))
	x188 := (uint64(arg1[13]) * uint64(arg2[4]))
	x189 := (uint64(arg1[13]) * uint64((arg2[3] * 0x2)))
	x190 := (uint64(arg1[13]) * uint64(arg2[2]))
	x191 := (uint64(arg1[13]) * uint64((arg2[1] * 0x2)))
	x192 := (uint64(arg1[13]) * uint64(arg2[0]))
	x193 := (uint64(arg1[12]) * uint64((arg2[6] * 0x2)))
	x194 := (uint64(arg1[12]) * uint64((arg2[5] * 0x2)))
	x195 := (uint64(arg1[12]) * uint64((arg2[4] * 0x2)))
	x196 := (uint64(arg1[12]) * uint64((arg2[3] * 0x2)))
	x197 := (uint64(arg1[12]) * uint64((arg2[2] * 0x2)))
	x198 := (uint64(arg1[12]) * uint64((arg2[1] * 0x2)))
	x199 := (uint64(arg1[12]) * uint64(arg2[0]))
	x200 := (uint64(arg1[11]) * uint64(arg2[7]))
	x201 := (uint64(arg1[11]) * uint64(arg2[6]))
	x202 := (uint64(arg1[11]) * uint64((arg2[5] * 0x2)))
	x203 := (uint64(arg1[11]) * uint64(arg2[4]))
	x204 := (uint64(arg1[11]) * uint64((arg2[3] * 0x2)))
	x205 := (uint64(arg1[11]) * uint64(arg2[2]))
	x206 := (uint64(arg1[11]) * uint64(arg2[1]))
	x207 := (uint64(arg1[11]) * uint64(arg2[0]))
	x208 := (uint64(arg1[10]) * uint64((arg2[8] * 0x2)))
	x209 := (uint64(arg1[10]) * uint64(arg2[7]))
	x210 := (uint64(arg1[10]) * uint64((arg2[6] * 0x2)))
	x211 := (uint64(arg1[10]) * uint64((arg2[5] * 0x2)))
	x212 := (uint64(arg1[10]) * uint64((arg2[4] * 0x2)))
	x213 := (uint64(arg1[10]) * uint64((arg2[3] * 0x2)))
	x214 := (uint64(arg1[10]) * uint64(arg2[2]))
	x215 := (uint64(arg1[10]) * uint64((arg2[1] * 0x2)))
	x216 := (uint64(arg1[10]) * uint64(arg2[0]))
	x217 := (uint64(arg1[9]) * uint64(arg2[9]))
	x218 := (uint64(arg1[9]) * uint64(arg2[8]))
	x219 := (uint64(arg1[9]) * uint64(arg2[7]))
	x220 := (uint64(arg1[9]) * uint64(arg2[6]))
	x221 := (uint64(arg1[9]) * uint64((arg2[5] * 0x2)))
	x222 := (uint64(arg1[9]) * uint64(arg2[4]))
	x223 := (uint64(arg1[9]) * uint64(arg2[3]))
	x224 := (uint64(arg1[9]) * uint64(arg2[2]))
	x225 := (uint64(arg1[9]) * uint64(arg2[1]))
	x226 := (uint64(arg1[9]) * uint64(arg2[0]))
	x227 := (uint64(arg1[8]) * uint64((arg2[10] * 0x2)))
	x228 := (uint64(arg1[8]) * uint64(arg2[9]))
	x229 := (uint64(arg1[8]) * uint64((arg2[8] * 0x2)))
	x230 := (uint64(arg1[8]) * uint64(arg2[7]))
	x231 := (uint64(arg1[8]) * uint64((arg2[6] * 0x2)))
	x232 := (uint64(arg1[8]) * uint64((arg2[5] * 0x2)))
	x233 := (uint64(arg1[8]) * uint64(arg2[4]))
	x234 := (uint64(arg1[8]) * uint64((arg2[3] * 0x2)))
	x235 := (uint64(arg1[8]) * uint64(arg2[2]))
	x236 := (uint64(arg1[8]) * uint64((arg2[1] * 0x2)))
	x237 := (uint64(arg1[8]) * uint64(arg2[0]))
	x238 := (uint64(arg1[7]) * uint64(arg2[11]))
	x239 := (uint64(arg1[7]) * uint64(arg2[10]))
	x240 := (uint64(arg1[7]) * uint64(arg2[9]))
	x241 := (uint64(arg1[7]) * uint64(arg2[8]))
	x242 := (uint64(arg1[7]) * uint64(arg2[7]))
	x243 := (uint64(arg1[7]) * uint64(arg2[6]))
	x244 := (uint64(arg1[7]) * uint64(arg2[5]))
	x245 := (uint64(arg1[7]) * uint64(arg2[4]))
	x246 := (uint64(arg1[7]) * uint64(arg2[3]))
	x247 := (uint64(arg1[7]) * uint64(arg2[2]))
	x248 := (uint64(arg1[7]) * uint64(arg2[1]))
	x249 := (uint64(arg1[7]) * uint64(arg2[0]))
	x250 := (uint64(arg1[6]) * uint64((arg2[12] * 0x2)))
	x251 := (uint64(arg1[6]) * uint64(arg2[11]))
	x252 := (uint64(arg1[6]) * uint64((arg2[10] * 0x2)))
	x253 := (uint64(arg1[6]) * uint64(arg2[9]))
	x254 := (uint64(arg1[6]) * uint64((arg2[8] * 0x2)))
	x255 := (uint64(arg1[6]) * uint64(arg2[7]))
	x256 := (uint64(arg1[6]) * uint64(arg2[6]))
	x257 := (uint64(arg1[6]) * uint64((arg2[5] * 0x2)))
	x258 := (uint64(arg1[6]) * uint64(arg2[4]))
	x259 := (uint64(arg1[6]) * uint64((arg2[3] * 0x2)))
	x260 := (uint64(arg1[6]) * uint64(arg2[2]))
	x261 := (uint64(arg1[6]) * uint64((arg2[1] * 0x2)))
	x262 := (uint64(arg1[6]) * uint64(arg2[0]))
	x263 := (uint64(arg1[5]) * uint64((arg2[13] * 0x2)))
	x264 := (uint64(arg1[5]) * uint64((arg2[12] * 0x2)))
	x265 := (uint64(arg1[5]) * uint64((arg2[11] * 0x2)))
	x266 := (uint64(arg1[5]) * uint64((arg2[10] * 0x2)))
	x267 := (uint64(arg1[5]) * uint64((arg2[9] * 0x2)))
	x268 := (uint64(arg1[5]) * uint64((arg2[8] * 0x2)))
	x269 := (uint64(arg1[5]) * uint64(arg2[7]))
	x270 := (uint64(arg1[5]) * uint64((arg2[6] * 0x2)))
	x271 := (uint64(arg1[5]) * uint64((arg2[5] * 0x2)))
	x272 := (uint64(arg1[5]) * uint64((arg2[4] * 0x2)))
	x273 := (uint64(arg1[5]) * uint64((arg2[3] * 0x2)))
	x274 := (uint64(arg1[5]) * uint64((arg2[2] * 0x2)))
	x275 := (uint64(arg1[5]) * uint64((arg2[1] * 0x2)))
	x276 := (uint64(arg1[5]) * uint64(arg2[0]))
	x277 := (uint64(arg1[4]) * uint64(arg2[14]))
	x278 := (uint64(arg1[4]) * uint64(arg2[13]))
	x279 := (uint64(arg1[4]) * uint64((arg2[12] * 0x2)))
	x280 := (uint64(arg1[4]) * uint64(arg2[11]))
	x281 := (uint64(arg1[4]) * uint64((arg2[10] * 0x2)))
	x282 := (uint64(arg1[4]) * uint64(arg2[9]))
	x283 := (uint64(arg1[4]) * uint64(arg2[8]))
	x284 := (uint64(arg1[4]) * uint64(arg2[7]))
	x285 := (uint64(arg1[4]) * uint64(arg2[6]))
	x286 := (uint64(arg1[4]) * uint64((arg2[5] * 0x2)))
	x287 := (uint64(arg1[4]) * uint64(arg2[4]))
	x288 := (uint64(arg1[4]) * uint64((arg2[3] * 0x2)))
	x289 := (uint64(arg1[4]) * uint64(arg2[2]))
	x290 := (uint64(arg1[4]) * uint64(arg2[1]))
	x291 := (uint64(arg1[4]) * uint64(arg2[0]))
	x292 := (uint64(arg1[3]) * uint64((arg2[15] * 0x2)))
	x293 := (uint64(arg1[3]) * uint64(arg2[14]))
	x294 := (uint64(arg1[3]) * uint64((arg2[13] * 0x2)))
	x295 := (uint64(arg1[3]) * uint64((arg2[12] * 0x2)))
	x296 := (uint64(arg1[3]) * uint64((arg2[11] * 0x2)))
	x297 := (uint64(arg1[3]) * uint64((arg2[10] * 0x2)))
	x298 := (uint64(arg1[3]) * uint64(arg2[9]))
	x299 := (uint64(arg1[3]) * uint64((arg2[8] * 0x2)))
	x300 := (uint64(arg1[3]) * uint64(arg2[7]))
	x301 := (uint64(arg1[3]) * uint64((arg2[6] * 0x2)))
	x302 := (uint64(arg1[3]) * uint64((arg2[5] * 0x2)))
	x303 := (uint64(arg1[3]) * uint64((arg2[4] * 0x2)))
	x304 := (uint64(arg1[3]) * uint64((arg2[3] * 0x2)))
	x305 := (uint64(arg1[3]) * uint64(arg2[2]))
	x306 := (uint64(arg1[3]) * uint64((arg2[1] * 0x2)))
	x307 := (uint64(arg1[3]) * uint64(arg2[0]))
	x308 := (uint64(arg1[2]) * uint64(arg2[16]))
	x309 := (uint64(arg1[2]) * uint64(arg2[15]))
	x310 := (uint64(arg1[2]) * uint64(arg2[14]))
	x311 := (uint64(arg1[2]) * uint64(arg2[13]))
	x312 := (uint64(arg1[2]) * uint64((arg2[12] * 0x2)))
	x313 := (uint64(arg1[2]) * uint64(arg2[11]))
	x314 := (uint64(arg1[2]) * uint64(arg2[10]))
	x315 := (uint64(arg1[2]) * uint64(arg2[9]))
	x316 := (uint64(arg1[2]) * uint64(arg2[8]))
	x317 := (uint64(arg1[2]) * uint64(arg2[7]))
	x318 := (uint64(arg1[2]) * uint64(arg2[6]))
	x319 := (uint64(arg1[2]) * uint64((arg2[5] * 0x2)))
	x320 := (uint64(arg1[2]) * uint64(arg2[4]))
	x321 := (uint64(arg1[2]) * uint64(arg2[3]))
	x322 := (uint64(arg1[2]) * uint64(arg2[2]))
	x323 := (uint64(arg1[2]) * uint64(arg2[1]))
	x324 := (uint64(arg1[2]) * uint64(arg2[0]))
	x325 := (uint64(arg1[1]) * uint64((arg2[17] * 0x2)))
	x326 := (uint64(arg1[1]) * uint64(arg2[16]))
	x327 := (uint64(arg1[1]) * uint64((arg2[15] * 0x2)))
	x328 := (uint64(arg1[1]) * uint64(arg2[14]))
	x329 := (uint64(arg1[1]) * uint64((arg2[13] * 0x2)))
	x330 := (uint64(arg1[1]) * uint64((arg2[12] * 0x2)))
	x331 := (uint64(arg1[1]) * uint64(arg2[11]))
	x332 := (uint64(arg1[1]) * uint64((arg2[10] * 0x2)))
	x333 := (uint64(arg1[1]) * uint64(arg2[9]))
	x334 := (uint64(arg1[1]) * uint64((arg2[8] * 0x2)))
	x335 := (uint64(arg1[1]) * uint64(arg2[7]))
	x336 := (uint64(arg1[1]) * uint64((arg2[6] * 0x2)))
	x337 := (uint64(arg1[1]) * uint64((arg2[5] * 0x2)))
	x338 := (uint64(arg1[1]) * uint64(arg2[4]))
	x339 := (uint64(arg1[1]) * uint64((arg2[3] * 0x2)))
	x340 := (uint64(arg1[1]) * uint64(arg2[2]))
	x341 := (uint64(arg1[1]) * uint64((arg2[1] * 0x2)))
	x342 := (uint64(arg1[1]) * uint64(arg2[0]))
	x343 := (uint64(arg1[0]) * uint64(arg2[18]))
	x344 := (uint64(arg1[0]) * uint64(arg2[17]))
	x345 := (uint64(arg1[0]) * uint64(arg2[16]))
	x346 := (uint64(arg1[0]) * uint64(arg2[15]))
	x347 := (uint64(arg1[0]) * uint64(arg2[14]))
	x348 := (uint64(arg1[0]) * uint64(arg2[13]))
	x349 := (uint64(arg1[0]) * uint64(arg2[12]))
	x350 := (uint64(arg1[0]) * uint64(arg2[11]))
	x351 := (uint64(arg1[0]) * uint64(arg2[10]))
	x352 := (uint64(arg1[0]) * uint64(arg2[9]))
	x353 := (uint64(arg1[0]) * uint64(arg2[8]))
	x354 := (uint64(arg1[0]) * uint64(arg2[7]))
	x355 := (uint64(arg1[0]) * uint64(arg2[6]))
	x356 := (uint64(arg1[0]) * uint64(arg2[5]))
	x357 := (uint64(arg1[0]) * uint64(arg2[4]))
	x358 := (uint64(arg1[0]) * uint64(arg2[3]))
	x359 := (uint64(arg1[0]) * uint64(arg2[2]))
	x360 := (uint64(arg1[0]) * uint64(arg2[1]))
	x361 := (uint64(arg1[0]) * uint64(arg2[0]))
	x362 := (x361 + (x171 + (x170 + (x168 + (x165 + (x161 + (x156 + (x150 + (x143 + (x135 + (x126 + (x116 + (x105 + (x93 + (x80 + (x66 + (x51 + (x35 + x18))))))))))))))))))
	x363 := (x362 >> 28)
	x364 := (uint32(x362) & 0xfffffff)
	x365 := (x343 + (x325 + (x308 + (x292 + (x277 + (x263 + (x250 + (x238 + (x227 + (x217 + (x208 + (x200 + (x193 + (x187 + (x182 + (x178 + (x175 + (x173 + x172))))))))))))))))))
	x366 := (x344 + (x326 + (x309 + (x293 + (x278 + (x264 + (x251 + (x239 + (x228 + (x218 + (x209 + (x201 + (x194 + (x188 + (x183 + (x179 + (x176 + (x174 + x1))))))))))))))))))
	x367 := (x345 + (x327 + (x310 + (x294 + (x279 + (x265 + (x252 + (x240 + (x229 + (x219 + (x210 + (x202 + (x195 + (x189 + (x184 + (x180 + (x177 + (x19 + x2))))))))))))))))))
	x368 := (x346 + (x328 + (x311 + (x295 + (x280 + (x266 + (x253 + (x241 + (x230 + (x220 + (x211 + (x203 + (x196 + (x190 + (x185 + (x181 + (x36 + (x20 + x3))))))))))))))))))
	x369 := (x347 + (x329 + (x312 + (x296 + (x281 + (x267 + (x254 + (x242 + (x231 + (x221 + (x212 + (x204 + (x197 + (x191 + (x186 + (x52 + (x37 + (x21 + x4))))))))))))))))))
	x370 := (x348 + (x330 + (x313 + (x297 + (x282 + (x268 + (x255 + (x243 + (x232 + (x222 + (x213 + (x205 + (x198 + (x192 + (x67 + (x53 + (x38 + (x22 + x5))))))))))))))))))
	x371 := (x349 + (x331 + (x314 + (x298 + (x283 + (x269 + (x256 + (x244 + (x233 + (x223 + (x214 + (x206 + (x199 + (x81 + (x68 + (x54 + (x39 + (x23 + x6))))))))))))))))))
	x372 := (x350 + (x332 + (x315 + (x299 + (x284 + (x270 + (x257 + (x245 + (x234 + (x224 + (x215 + (x207 + (x94 + (x82 + (x69 + (x55 + (x40 + (x24 + x7))))))))))))))))))
	x373 := (x351 + (x333 + (x316 + (x300 + (x285 + (x271 + (x258 + (x246 + (x235 + (x225 + (x216 + (x106 + (x95 + (x83 + (x70 + (x56 + (x41 + (x25 + x8))))))))))))))))))
	x374 := (x352 + (x334 + (x317 + (x301 + (x286 + (x272 + (x259 + (x247 + (x236 + (x226 + (x117 + (x107 + (x96 + (x84 + (x71 + (x57 + (x42 + (x26 + x9))))))))))))))))))
	x375 := (x353 + (x335 + (x318 + (x302 + (x287 + (x273 + (x260 + (x248 + (x237 + (x127 + (x118 + (x108 + (x97 + (x85 + (x72 + (x58 + (x43 + (x27 + x10))))))))))))))))))
	x376 := (x354 + (x336 + (x319 + (x303 + (x288 + (x274 + (x261 + (x249 + (x136 + (x128 + (x119 + (x109 + (x98 + (x86 + (x73 + (x59 + (x44 + (x28 + x11))))))))))))))))))
	x377 := (x355 + (x337 + (x320 + (x304 + (x289 + (x275 + (x262 + (x144 + (x137 + (x129 + (x120 + (x110 + (x99 + (x87 + (x74 + (x60 + (x45 + (x29 + x12))))))))))))))))))
	x378 := (x356 + (x338 + (x321 + (x305 + (x290 + (x276 + (x151 + (x145 + (x138 + (x130 + (x121 + (x111 + (x100 + (x88 + (x75 + (x61 + (x46 + (x30 + x13))))))))))))))))))
	x379 := (x357 + (x339 + (x322 + (x306 + (x291 + (x157 + (x152 + (x146 + (x139 + (x131 + (x122 + (x112 + (x101 + (x89 + (x76 + (x62 + (x47 + (x31 + x14))))))))))))))))))
	x380 := (x358 + (x340 + (x323 + (x307 + (x162 + (x158 + (x153 + (x147 + (x140 + (x132 + (x123 + (x113 + (x102 + (x90 + (x77 + (x63 + (x48 + (x32 + x15))))))))))))))))))
	x381 := (x359 + (x341 + (x324 + (x166 + (x163 + (x159 + (x154 + (x148 + (x141 + (x133 + (x124 + (x114 + (x103 + (x91 + (x78 + (x64 + (x49 + (x33 + x16))))))))))))))))))
	x382 := (x360 + (x342 + (x169 + (x167 + (x164 + (x160 + (x155 + (x149 + (x142 + (x134 + (x125 + (x115 + (x104 + (x92 + (x79 + (x65 + (x50 + (x34 + x17))))))))))))))))))
	x383 := (x363 + x382)
	x384 := (x383 >> 27)
	x385 := (uint32(x383) & 0x7ffffff)
	x386 := (x384 + x381)
	x387 := (x386 >> 28)
	x388 := (uint32(x386) & 0xfffffff)
	x389 := (x387 + x380)
	x390 := (x389 >> 27)
	x391 := (uint32(x389) & 0x7ffffff)
	x392 := (x390 + x379)
	x393 := (x392 >> 28)
	x394 := (uint32(x392) & 0xfffffff)
	x395 := (x393 + x378)
	x396 := (x395 >> 27)
	x397 := (uint32(x395) & 0x7ffffff)
	x398 := (x396 + x377)
	x399 := (x398 >> 27)
	x400 := (uint32(x398) & 0x7ffffff)
	x401 := (x399 + x376)
	x402 := (x401 >> 28)
	x403 := (uint32(x401) & 0xfffffff)
	x404 := (x402 + x375)
	x405 := (x404 >> 27)
	x406 := (uint32(x404) & 0x7ffffff)
	x407 := (x405 + x374)
	x408 := (x407 >> 28)
	x409 := (uint32(x407) & 0xfffffff)
	x410 := (x408 + x373)
	x411 := (x410 >> 27)
	x412 := (uint32(x410) & 0x7ffffff)
	x413 := (x411 + x372)
	x414 := (x413 >> 28)
	x415 := (uint32(x413) & 0xfffffff)
	x416 := (x414 + x371)
	x417 := (x416 >> 27)
	x418 := (uint32(x416) & 0x7ffffff)
	x419 := (x417 + x370)
	x420 := (x419 >> 27)
	x421 := (uint32(x419) & 0x7ffffff)
	x422 := (x420 + x369)
	x423 := (x422 >> 28)
	x424 := (uint32(x422) & 0xfffffff)
	x425 := (x423 + x368)
	x426 := (x425 >> 27)
	x427 := (uint32(x425) & 0x7ffffff)
	x428 := (x426 + x367)
	x429 := (x428 >> 28)
	x430 := (uint32(x428) & 0xfffffff)
	x431 := (x429 + x366)
	x432 := (x431 >> 27)
	x433 := (uint32(x431) & 0x7ffffff)
	x434 := (x432 + x365)
	x435 := (x434 >> 27)
	x436 := (uint32(x434) & 0x7ffffff)
	x437 := (uint64(x364) + x435)
	x438 := uint32((x437 >> 28))
	x439 := (uint32(x437) & 0xfffffff)
	x440 := (x438 + x385)
	x441 := uint1((x440 >> 27))
	x442 := (x440 & 0x7ffffff)
	x443 := (uint32(x441) + x388)
	out1[0] = x439
	out1[1] = x442
	out1[2] = x443
	out1[3] = x391
	out1[4] = x394
	out1[5] = x397
	out1[6] = x400
	out1[7] = x403
	out1[8] = x406
	out1[9] = x409
	out1[10] = x412
	out1[11] = x415
	out1[12] = x418
	out1[13] = x421
	out1[14] = x424
	out1[15] = x427
	out1[16] = x430
	out1[17] = x433
	out1[18] = x436
}

// CarrySquare squares a field element and reduces the result.
//
// Postconditions:
//   eval out1 mod m = (eval arg1 * eval arg1) mod m
//
func CarrySquare(out1 *TightFieldElement, arg1 *LooseFieldElement) {
	x1 := arg1[18]
	x2 := (x1 * 0x2)
	x3 := (arg1[18] * 0x2)
	x4 := arg1[17]
	x5 := (x4 * 0x2)
	x6 := (arg1[17] * 0x2)
	x7 := arg1[16]
	x8 := (x7 * 0x2)
	x9 := (arg1[16] * 0x2)
	x10 := arg1[15]
	x11 := (x10 * 0x2)
	x12 := (arg1[15] * 0x2)
	x13 := arg1[14]
	x14 := (x13 * 0x2)
	x15 := (arg1[14] * 0x2)
	x16 := arg1[13]
	x17 := (x16 * 0x2)
	x18 := (arg1[13] * 0x2)
	x19 := arg1[12]
	x20 := (x19 * 0x2)
	x21 := (arg1[12] * 0x2)
	x22 := arg1[11]
	x23 := (x22 * 0x2)
	x24 := (arg1[11] * 0x2)
	x25 := arg1[10]
	x26 := (x25 * 0x2)
	x27 := (arg1[10] * 0x2)
	x28 := (arg1[9] * 0x2)
	x29 := (arg1[8] * 0x2)
	x30 := (arg1[7] * 0x2)
	x31 := (arg1[6] * 0x2)
	x32 := (arg1[5] * 0x2)
	x33 := (arg1[4] * 0x2)
	x34 := (arg1[3] * 0x2)
	x35 := (arg1[2] * 0x2)
	x36 := (arg1[1] * 0x2)
	x37 := (uint64(arg1[18]) * uint64(x1))
	x38 := (uint64(arg1[17]) * uint64((x2 * 0x2)))
	x39 := (uint64(arg1[17]) * uint64((x4 * 0x2)))
	x40 := (uint64(arg1[16]) * uint64(x2))
	x41 := (uint64(arg1[16]) * uint64((x5 * 0x2)))
	x42 := (uint64(arg1[16]) * uint64(x7))
	x43 := (uint64(arg1[15]) * uint64((x2 * 0x2)))
	x44 := (uint64(arg1[15]) * uint64((x5 * 0x2)))
	x45 := (uint64(arg1[15]) * uint64(x8))
	x46 := (uint64(arg1[15]) * uint64((x10 * 0x2)))
	x47 := (uint64(arg1[14]) * uint64(x2))
	x48 := (uint64(arg1[14]) * uint64(x5))
	x49 := (uint64(arg1[14]) * uint64(x8))
	x50 := (uint64(arg1[14]) * uint64(x11))
	x51 := (uint64(arg1[14]) * uint64(x13))
	x52 := (uint64(arg1[13]) * uint64(x2))
	x53 := (uint64(arg1[13]) * uint64((x5 * 0x2)))
	x54 := (uint64(arg1[13]) * uint64(x8))
	x55 := (uint64(arg1[13]) * uint64((x11 * 0x2)))
	x56 := (uint64(arg1[13]) * uint64(x14))
	x57 := (uint64(arg1[13]) * uint64((x16 * 0x2)))
	x58 := (uint64(arg1[12]) * uint64((x2 * 0x2)))
	x59 := (uint64(arg1[12]) * uint64((x5 * 0x2)))
	x60 := (uint64(arg1[12]) * uint64((x8 * 0x2)))
	x61 := (uint64(arg1[12]) * uint64((x11 * 0x2)))
	x62 := (uint64(arg1[12]) * uint64((x14 * 0x2)))
	x63 := (uint64(arg1[12]) * uint64((x17 * 0x2)))
	x64 := (uint64(arg1[12]) * uint64((x19 * 0x2)))
	x65 := (uint64(arg1[11]) * uint64(x2))
	x66 := (uint64(arg1[11]) * uint64((x5 * 0x2)))
	x67 := (uint64(arg1[11]) * uint64(x8))
	x68 := (uint64(arg1[11]) * uint64((x11 * 0x2)))
	x69 := (uint64(arg1[11]) * uint64(x14))
	x70 := (uint64(arg1[11]) * uint64(x17))
	x71 := (uint64(arg1[11]) * uint64((x20 * 0x2)))
	x72 := (uint64(arg1[11]) * uint64(x22))
	x73 := (uint64(arg1[10]) * uint64((x2 * 0x2)))
	x74 := (uint64(arg1[10]) * uint64((x5 * 0x2)))
	x75 := (uint64(arg1[10]) * uint64((x8 * 0x2)))
	x76 := (uint64(arg1[10]) * uint64((x11 * 0x2)))
	x77 := (uint64(arg1[10]) * uint64(x14))
	x78 := (uint64(arg1[10]) * uint64((x17 * 0x2)))
	x79 := (uint64(arg1[10]) * uint64((x20 * 0x2)))
	x80 := (uint64(arg1[10]) * uint64((x23 * 0x2)))
	x81 := (uint64(arg1[10]) * uint64((x25 * 0x2)))
	x82 := (uint64(arg1[9]) * uint64(x2))
	x83 := (uint64(arg1[9]) * uint64((x5 * 0x2)))
	x84 := (uint64(arg1[9]) * uint64(x8))
	x85 := (uint64(arg1[9]) * uint64(x11))
	x86 := (uint64(arg1[9]) * uint64(x14))
	x87 := (uint64(arg1[9]) * uint64(x17))
	x88 := (uint64(arg1[9]) * uint64((x20 * 0x2)))
	x89 := (uint64(arg1[9]) * uint64(x23))
	x90 := (uint64(arg1[9]) * uint64((x26 * 0x2)))
	x91 := (uint64(arg1[9]) * uint64(arg1[9]))
	x92 := (uint64(arg1[8]) * uint64((x2 * 0x2)))
	x93 := (uint64(arg1[8]) * uint64((x5 * 0x2)))
	x94 := (uint64(arg1[8]) * uint64(x8))
	x95 := (uint64(arg1[8]) * uint64((x11 * 0x2)))
	x96 := (uint64(arg1[8]) * uint64(x14))
	x97 := (uint64(arg1[8]) * uint64((x17 * 0x2)))
	x98 := (uint64(arg1[8]) * uint64((x20 * 0x2)))
	x99 := (uint64(arg1[8]) * uint64((x23 * 0x2)))
	x100 := (uint64(arg1[8]) * uint64((x27 * 0x2)))
	x101 := (uint64(arg1[8]) * uint64(x28))
	x102 := (uint64(arg1[8]) * uint64((arg1[8] * 0x2)))
	x103 := (uint64(arg1[7]) * uint64(x2))
	x104 := (uint64(arg1[7]) * uint64(x5))
	x105 := (uint64(arg1[7]) * uint64(x8))
	x106 := (uint64(arg1[7]) * uint64(x11))
	x107 := (uint64(arg1[7]) * uint64(x14))
	x108 := (uint64(arg1[7]) * uint64(x17))
	x109 := (uint64(arg1[7]) * uint64((x20 * 0x2)))
	x110 := (uint64(arg1[7]) * uint64(x24))
	x111 := (uint64(arg1[7]) * uint64(x27))
	x112 := (uint64(arg1[7]) * uint64(x28))
	x113 := (uint64(arg1[7]) * uint64(x29))
	x114 := (uint64(arg1[7]) * uint64(arg1[7]))
	x115 := (uint64(arg1[6]) * uint64(x2))
	x116 := (uint64(arg1[6]) * uint64((x5 * 0x2)))
	x117 := (uint64(arg1[6]) * uint64(x8))
	x118 := (uint64(arg1[6]) * uint64((x11 * 0x2)))
	x119 := (uint64(arg1[6]) * uint64(x14))
	x120 := (uint64(arg1[6]) * uint64((x17 * 0x2)))
	x121 := (uint64(arg1[6]) * uint64((x21 * 0x2)))
	x122 := (uint64(arg1[6]) * uint64(x24))
	x123 := (uint64(arg1[6]) * uint64((x27 * 0x2)))
	x124 := (uint64(arg1[6]) * uint64(x28))
	x125 := (uint64(arg1[6]) * uint64((x29 * 0x2)))
	x126 := (uint64(arg1[6]) * uint64(x30))
	x127 := (uint64(arg1[6]) * uint64(arg1[6]))
	x128 := (uint64(arg1[5]) * uint64((x2 * 0x2)))
	x129 := (uint64(arg1[5]) * uint64((x5 * 0x2)))
	x130 := (uint64(arg1[5]) * uint64((x8 * 0x2)))
	x131 := (uint64(arg1[5]) * uint64((x11 * 0x2)))
	x132 := (uint64(arg1[5]) * uint64((x14 * 0x2)))
	x133 := (uint64(arg1[5]) * uint64((x18 * 0x2)))
	x134 := (uint64(arg1[5]) * uint64((x21 * 0x2)))
	x135 := (uint64(arg1[5]) * uint64((x24 * 0x2)))
	x136 := (uint64(arg1[5]) * uint64((x27 * 0x2)))
	x137 := (uint64(arg1[5]) * uint64((x28 * 0x2)))
	x138 := (uint64(arg1[5]) * uint64((x29 * 0x2)))
	x139 := (uint64(arg1[5]) * uint64(x30))
	x140 := (uint64(arg1[5]) * uint64((x31 * 0x2)))
	x141 := (uint64(arg1[5]) * uint64((arg1[5] * 0x2)))
	x142 := (uint64(arg1[4]) * uint64(x2))
	x143 := (uint64(arg1[4]) * uint64((x5 * 0x2)))
	x144 := (uint64(arg1[4]) * uint64(x8))
	x145 := (uint64(arg1[4]) * uint64((x11 * 0x2)))
	x146 := (uint64(arg1[4]) * uint64(x15))
	x147 := (uint64(arg1[4]) * uint64(x18))
	x148 := (uint64(arg1[4]) * uint64((x21 * 0x2)))
	x149 := (uint64(arg1[4]) * uint64(x24))
	x150 := (uint64(arg1[4]) * uint64((x27 * 0x2)))
	x151 := (uint64(arg1[4]) * uint64(x28))
	x152 := (uint64(arg1[4]) * uint64(x29))
	x153 := (uint64(arg1[4]) * uint64(x30))
	x154 := (uint64(arg1[4]) * uint64(x31))
	x155 := (uint64(arg1[4]) * uint64((x32 * 0x2)))
	x156 := (uint64(arg1[4]) * uint64(arg1[4]))
	x157 := (uint64(arg1[3]) * uint64((x2 * 0x2)))
	x158 := (uint64(arg1[3]) * uint64((x5 * 0x2)))
	x159 := (uint64(arg1[3]) * uint64((x8 * 0x2)))
	x160 := (uint64(arg1[3]) * uint64((x12 * 0x2)))
	x161 := (uint64(arg1[3]) * uint64(x15))
	x162 := (uint64(arg1[3]) * uint64((x18 * 0x2)))
	x163 := (uint64(arg1[3]) * uint64((x21 * 0x2)))
	x164 := (uint64(arg1[3]) * uint64((x24 * 0x2)))
	x165 := (uint64(arg1[3]) * uint64((x27 * 0x2)))
	x166 := (uint64(arg1[3]) * uint64(x28))
	x167 := (uint64(arg1[3]) * uint64((x29 * 0x2)))
	x168 := (uint64(arg1[3]) * uint64(x30))
	x169 := (uint64(arg1[3]) * uint64((x31 * 0x2)))
	x170 := (uint64(arg1[3]) * uint64((x32 * 0x2)))
	x171 := (uint64(arg1[3]) * uint64((x33 * 0x2)))
	x172 := (uint64(arg1[3]) * uint64((arg1[3] * 0x2)))
	x173 := (uint64(arg1[2]) * uint64(x2))
	x174 := (uint64(arg1[2]) * uint64((x5 * 0x2)))
	x175 := (uint64(arg1[2]) * uint64(x9))
	x176 := (uint64(arg1[2]) * uint64(x12))
	x177 := (uint64(arg1[2]) * uint64(x15))
	x178 := (uint64(arg1[2]) * uint64(x18))
	x179 := (uint64(arg1[2]) * uint64((x21 * 0x2)))
	x180 := (uint64(arg1[2]) * uint64(x24))
	x181 := (uint64(arg1[2]) * uint64(x27))
	x182 := (uint64(arg1[2]) * uint64(x28))
	x183 := (uint64(arg1[2]) * uint64(x29))
	x184 := (uint64(arg1[2]) * uint64(x30))
	x185 := (uint64(arg1[2]) * uint64(x31))
	x186 := (uint64(arg1[2]) * uint64((x32 * 0x2)))
	x187 := (uint64(arg1[2]) * uint64(x33))
	x188 := (uint64(arg1[2]) * uint64(x34))
	x189 := (uint64(arg1[2]) * uint64(arg1[2]))
	x190 := (uint64(arg1[1]) * uint64((x2 * 0x2)))
	x191 := (uint64(arg1[1]) * uint64((x6 * 0x2)))
	x192 := (uint64(arg1[1]) * uint64(x9))
	x193 := (uint64(arg1[1]) * uint64((x12 * 0x2)))
	x194 := (uint64(arg1[1]) * uint64(x15))
	x195 := (uint64(arg1[1]) * uint64((x18 * 0x2)))
	x196 := (uint64(arg1[1]) * uint64((x21 * 0x2)))
	x197 := (uint64(arg1[1]) * uint64(x24))
	x198 := (uint64(arg1[1]) * uint64((x27 * 0x2)))
	x199 := (uint64(arg1[1]) * uint64(x28))
	x200 := (uint64(arg1[1]) * uint64((x29 * 0x2)))
	x201 := (uint64(arg1[1]) * uint64(x30))
	x202 := (uint64(arg1[1]) * uint64((x31 * 0x2)))
	x203 := (uint64(arg1[1]) * uint64((x32 * 0x2)))
	x204 := (uint64(arg1[1]) * uint64(x33))
	x205 := (uint64(arg1[1]) * uint64((x34 * 0x2)))
	x206 := (uint64(arg1[1]) * uint64(x35))
	x207 := (uint64(arg1[1]) * uint64((arg1[1] * 0x2)))
	x208 := (uint64(arg1[0]) * uint64(x3))
	x209 := (uint64(arg1[0]) * uint64(x6))
	x210 := (uint64(arg1[0]) * uint64(x9))
	x211 := (uint64(arg1[0]) * uint64(x12))
	x212 := (uint64(arg1[0]) * uint64(x15))
	x213 := (uint64(arg1[0]) * uint64(x18))
	x214 := (uint64(arg1[0]) * uint64(x21))
	x215 := (uint64(arg1[0]) * uint64(x24))
	x216 := (uint64(arg1[0]) * uint64(x27))
	x217 := (uint64(arg1[0]) * uint64(x28))
	x218 := (uint64(arg1[0]) * uint64(x29))
	x219 := (uint64(arg1[0]) * uint64(x30))
	x220 := (uint64(arg1[0]) * uint64(x31))
	x221 := (uint64(arg1[0]) * uint64(x32))
	x222 := (uint64(arg1[0]) * uint64(x33))
	x223 := (uint64(arg1[0]) * uint64(x34))
	x224 := (uint64(arg1[0]) * uint64(x35))
	x225 := (uint64(arg1[0]) * uint64(x36))
	x226 := (uint64(arg1[0]) * uint64(arg1[0]))
	x227 := (x226 + (x190 + (x174 + (x159 + (x145 + (x132 + (x120 + (x109 + (x99 + x90)))))))))
	x228 := (x227 >> 28)
	x229 := (uint32(x227) & 0xfffffff)
	x230 := (x208 + (x191 + (x175 + (x160 + (x146 + (x133 + (x121 + (x110 + (x100 + x91)))))))))
	x231 := (x209 + (x192 + (x176 + (x161 + (x147 + (x134 + (x122 + (x111 + (x101 + x37)))))))))
	x232 := (x210 + (x193 + (x177 + (x162 + (x148 + (x135 + (x123 + (x112 + (x102 + x38)))))))))
	x233 := (x211 + (x194 + (x178 + (x163 + (x149 + (x136 + (x124 + (x113 + (x40 + x39)))))))))
	x234 := (x212 + (x195 + (x179 + (x164 + (x150 + (x137 + (x125 + (x114 + (x43 + x41)))))))))
	x235 := (x213 + (x196 + (x180 + (x165 + (x151 + (x138 + (x126 + (x47 + (x44 + x42)))))))))
	x236 := (x214 + (x197 + (x181 + (x166 + (x152 + (x139 + (x127 + (x52 + (x48 + x45)))))))))
	x237 := (x215 + (x198 + (x182 + (x167 + (x153 + (x140 + (x58 + (x53 + (x49 + x46)))))))))
	x238 := (x216 + (x199 + (x183 + (x168 + (x154 + (x141 + (x65 + (x59 + (x54 + x50)))))))))
	x239 := (x217 + (x200 + (x184 + (x169 + (x155 + (x73 + (x66 + (x60 + (x55 + x51)))))))))
	x240 := (x218 + (x201 + (x185 + (x170 + (x156 + (x82 + (x74 + (x67 + (x61 + x56)))))))))
	x241 := (x219 + (x202 + (x186 + (x171 + (x92 + (x83 + (x75 + (x68 + (x62 + x57)))))))))
	x242 := (x220 + (x203 + (x187 + (x172 + (x103 + (x93 + (x84 + (x76 + (x69 + x63)))))))))
	x243 := (x221 + (x204 + (x188 + (x115 + (x104 + (x94 + (x85 + (x77 + (x70 + x64)))))))))
	x244 := (x222 + (x205 + (x189 + (x128 + (x116 + (x105 + (x95 + (x86 + (x78 + x71)))))))))
	x245 := (x223 + (x206 + (x142 + (x129 + (x117 + (x106 + (x96 + (x87 + (x79 + x72)))))))))
	x246 := (x224 + (x207 + (x157 + (x143 + (x130 + (x118 + (x107 + (x97 + (x88 + x80)))))))))
	x247 := (x225 + (x173 + (x158 + (x144 + (x131 + (x119 + (x108 + (x98 + (x89 + x81)))))))))
	x248 := (x228 + x247)
	x249 := (x248 >> 27)
	x250 := (uint32(x248) & 0x7ffffff)
	x251 := (x249 + x246)
	x252 := (x251 >> 28)
	x253 := (uint32(x251) & 0xfffffff)
	x254 := (x252 + x245)
	x255 := (x254 >> 27)
	x256 := (uint32(x254) & 0x7ffffff)
	x257 := (x255 + x244)
	x258 := (x257 >> 28)
	x259 := (uint32(x257) & 0xfffffff)
	x260 := (x258 + x243)
	x261 := (x260 >> 27)
	x262 := (uint32(x260) & 0x7ffffff)
	x263 := (x261 + x242)
	x264 := (x263 >> 27)
	x265 := (uint32(x263) & 0x7ffffff)
	x266 := (x264 + x241)
	x267 := (x266 >> 28)
	x268 := (uint32(x266) & 0xfffffff)
	x269 := (x267 + x240)
	x270 := (x269 >> 27)
	x271 := (uint32(x269) & 0x7ffffff)
	x272 := (x270 + x239)
	x273 := (x272 >> 28)
	x274 := (uint32(x272) & 0xfffffff)
	x275 := (x273 + x238)
	x276 := (x275 >> 27)
	x277 := (uint32(x275) & 0x7ffffff)
	x278 := (x276 + x237)
	x279 := (x278 >> 28)
	x280 := (uint32(x278) & 0xfffffff)
	x281 := (x279 + x236)
	x282 := (x281 >> 27)
	x283 := (uint32(x281) & 0x7ffffff)
	x284 := (x282 + x235)
	x285 := (x284 >> 27)
	x286 := (uint32(x284) & 0x7ffffff)
	x287 := (x285 + x234)
	x288 := (x287 >> 28)
	x289 := (uint32(x287) & 0xfffffff)
	x290 := (x288 + x233)
	x291 := (x290 >> 27)
	x292 := (uint32(x290) & 0x7ffffff)
	x293 := (x291 + x232)
	x294 := (x293 >> 28)
	x295 := (uint32(x293) & 0xfffffff)
	x296 := (x294 + x231)
	x297 := (x296 >> 27)
	x298 := (uint32(x296) & 0x7ffffff)
	x299 := (x297 + x230)
	x300 := (x299 >> 27)
	x301 := (uint32(x299) & 0x7ffffff)
	x302 := (uint64(x229) + x300)
	x303 := uint32((x302 >> 28))
	x304 := (uint32(x302) & 0xfffffff)
	x305 := (x303 + x250)
	x306 := uint1((x305 >> 27))
	x307 := (x305 & 0x7ffffff)
	x308 := (uint32(x306) + x253)
	out1[0] = x304
	out1[1] = x307
	out1[2] = x308
	out1[3] = x256
	out1[4] = x259
	out1[5] = x262
	out1[6] = x265
	out1[7] = x268
	out1[8] = x271
	out1[9] = x274
	out1[10] = x277
	out1[11] = x280
	out1[12] = x283
	out1[13] = x286
	out1[14] = x289
	out1[15] = x292
	out1[16] = x295
	out1[17] = x298
	out1[18] = x301
}

// Carry reduces a field element.
//
// Postconditions:
//   eval out1 mod m = eval arg1 mod m
//
func Carry(out1 *TightFieldElement, arg1 *LooseFieldElement) {
	x1 := arg1[0]
	x2 := ((x1 >> 28) + arg1[1])
	x3 := ((x2 >> 27) + arg1[2])
	x4 := ((x3 >> 28) + arg1[3])
	x5 := ((x4 >> 27) + arg1[4])
	x6 := ((x5 >> 28) + arg1[5])
	x7 := ((x6 >> 27) + arg1[6])
	x8 := ((x7 >> 27) + arg1[7])
	x9 := ((x8 >> 28) + arg1[8])
	x10 := ((x9 >> 27) + arg1[9])
	x11 := ((x10 >> 28) + arg1[10])
	x12 := ((x11 >> 27) + arg1[11])
	x13 := ((x12 >> 28) + arg1[12])
	x14 := ((x13 >> 27) + arg1[13])
	x15 := ((x14 >> 27) + arg1[14])
	x16 := ((x15 >> 28) + arg1[15])
	x17 := ((x16 >> 27) + arg1[16])
	x18 := ((x17 >> 28) + arg1[17])
	x19 := ((x18 >> 27) + arg1[18])
	x20 := ((x1 & 0xfffffff) + (x19 >> 27))
	x21 := (uint32(uint1((x20 >> 28))) + (x2 & 0x7ffffff))
	x22 := (x20 & 0xfffffff)
	x23 := (x21 & 0x7ffffff)
	x24 := (uint32(uint1((x21 >> 27))) + (x3 & 0xfffffff))
	x25 := (x4 & 0x7ffffff)
	x26 := (x5 & 0xfffffff)
	x27 := (x6 & 0x7ffffff)
	x28 := (x7 & 0x7ffffff)
	x29 := (x8 & 0xfffffff)
	x30 := (x9 & 0x7ffffff)
	x31 := (x10 & 0xfffffff)
	x32 := (x11 & 0x7ffffff)
	x33 := (x12 & 0xfffffff)
	x34 := (x13 & 0x7ffffff)
	x35 := (x14 & 0x7ffffff)
	x36 := (x15 & 0xfffffff)
	x37 := (x16 & 0x7ffffff)
	x38 := (x17 & 0xfffffff)
	x39 := (x18 & 0x7ffffff)
	x40 := (x19 & 0x7ffffff)
	out1[0] = x22
	out1[1] = x23
	out1[2] = x24
	out1[3] = x25
	out1[4] = x26
	out1[5] = x27
	out1[6] = x28
	out1[7] = x29
	out1[8] = x30
	out1[9] = x31
	out1[10] = x32
	out1[11] = x33
	out1[12] = x34
	out1[13] = x35
	out1[14] = x36
	out1[15] = x37
	out1[16] = x38
	out1[17] = x39
	out1[18] = x40
}

// Add adds two field elements.
//
// Postconditions:
//   eval out1 mod m = (eval arg1 + eval arg2) mod m
//
func Add(out1 *LooseFieldElement, arg1 *TightFieldElement, arg2 *TightFieldElement) {
	x1 := (arg1[0] + arg2[0])
	x2 := (arg1[1] + arg2[1])
	x3 := (arg1[2] + arg2[2])
	x4 := (arg1[3] + arg2[3])
	x5 := (arg1[4] + arg2[4])
	x6 := (arg1[5] + arg2[5])
	x7 := (arg1[6] + arg2[6])
	x8 := (arg1[7] + arg2[7])
	x9 := (arg1[8] + arg2[8])
	x10 := (arg1[9] + arg2[9])
	x11 := (arg1[10] + arg2[10])
	x12 := (arg1[11] + arg2[11])
	x13 := (arg1[12] + arg2[12])
	x14 := (arg1[13] + arg2[13])
	x15 := (arg1[14] + arg2[14])
	x16 := (arg1[15] + arg2[15])
	x17 := (arg1[16] + arg2[16])
	x18 := (arg1[17] + arg2[17])
	x19 := (arg1[18] + arg2[18])
	out1[0] = x1
	out1[1] = x2
	out1[2] = x3
	out1[3] = x4
	out1[4] = x5
	out1[5] = x6
	out1[6] = x7
	out1[7] = x8
	out1[8] = x9
	out1[9] = x10
	out1[10] = x11
	out1[11] = x12
	out1[12] = x13
	out1[13] = x14
	out1[14] = x15
	out1[15] = x16
	out1[16] = x17
	out1[17] = x18
	out1[18] = x19
}

// Sub subtracts two field elements.
//
// Postconditions:
//   eval out1 mod m = (eval arg1 - eval arg2) mod m
//
func Sub(out1 *LooseFieldElement, arg1 *TightFieldElement, arg2 *TightFieldElement) {
	x1 := ((0x1ffffffe + arg1[0]) - arg2[0])
	x2 := ((0xffffffe + arg1[1]) - arg2[1])
	x3 := ((0x1ffffffe + arg1[2]) - arg2[2])
	x4 := ((0xffffffe + arg1[3]) - arg2[3])
	x5 := ((0x1ffffffe + arg1[4]) - arg2[4])
	x6 := ((0xffffffe + arg1[5]) - arg2[5])
	x7 := ((0xffffffe + arg1[6]) - arg2[6])
	x8 := ((0x1ffffffe + arg1[7]) - arg2[7])
	x9 := ((0xffffffe + arg1[8]) - arg2[8])
	x10 := ((0x1ffffffe + arg1[9]) - arg2[9])
	x11 := ((0xffffffe + arg1[10]) - arg2[10])
	x12 := ((0x1ffffffe + arg1[11]) - arg2[11])
	x13 := ((0xffffffe + arg1[12]) - arg2[12])
	x14 := ((0xffffffe + arg1[13]) - arg2[13])
	x15 := ((0x1ffffffe + arg1[14]) - arg2[14])
	x16 := ((0xffffffe + arg1[15]) - arg2[15])
	x17 := ((0x1ffffffe + arg1[16]) - arg2[16])
	x18 := ((0xffffffe + arg1[17]) - arg2[17])
	x19 := ((0xffffffe + arg1[18]) - arg2[18])
	out1[0] = x1
	out1[1] = x2
	out1[2] = x3
	out1[3] = x4
	out1[4] = x5
	out1[5] = x6
	out1[6] = x7
	out1[7] = x8
	out1[8] = x9
	out1[9] = x10
	out1[10] = x11
	out1[11] = x12
	out1[12] = x13
	out1[13] = x14
	out1[14] = x15
	out1[15] = x16
	out1[16] = x17
	out1[17] = x18
	out1[18] = x19
}

// Opp negates a field element.
//
// Postconditions:
//   eval out1 mod m = -eval arg1 mod m
//
func Opp(out1 *LooseFieldElement, arg1 *TightFieldElement) {
	x1 := (0x1ffffffe - arg1[0])
	x2 := (0xffffffe - arg1[1])
	x3 := (0x1ffffffe - arg1[2])
	x4 := (0xffffffe - arg1[3])
	x5 := (0x1ffffffe - arg1[4])
	x6 := (0xffffffe - arg1[5])
	x7 := (0xffffffe - arg1[6])
	x8 := (0x1ffffffe - arg1[7])
	x9 := (0xffffffe - arg1[8])
	x10 := (0x1ffffffe - arg1[9])
	x11 := (0xffffffe - arg1[10])
	x12 := (0x1ffffffe - arg1[11])
	x13 := (0xffffffe - arg1[12])
	x14 := (0xffffffe - arg1[13])
	x15 := (0x1ffffffe - arg1[14])
	x16 := (0xffffffe - arg1[15])
	x17 := (0x1ffffffe - arg1[16])
	x18 := (0xffffffe - arg1[17])
	x19 := (0xffffffe - arg1[18])
	out1[0] = x1
	out1[1] = x2
	out1[2] = x3
	out1[3] = x4
	out1[4] = x5
	out1[5] = x6
	out1[6] = x7
	out1[7] = x8
	out1[8] = x9
	out1[9] = x10
	out1[10] = x11
	out1[11] = x12
	out1[12] = x13
	out1[13] = x14
	out1[14] = x15
	out1[15] = x16
	out1[16] = x17
	out1[17] = x18
	out1[18] = x19
}

// Selectznz is a multi-limb conditional select.
//
// Postconditions:
//   out1 = (if arg1 = 0 then arg2 else arg3)
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func Selectznz(out1 *[19]uint32, arg1 uint1, arg2 *[19]uint32, arg3 *[19]uint32) {
	var x1 uint32
	cmovznzU32(&x1, arg1, arg2[0], arg3[0])
	var x2 uint32
	cmovznzU32(&x2, arg1, arg2[1], arg3[1])
	var x3 uint32
	cmovznzU32(&x3, arg1, arg2[2], arg3[2])
	var x4 uint32
	cmovznzU32(&x4, arg1, arg2[3], arg3[3])
	var x5 uint32
	cmovznzU32(&x5, arg1, arg2[4], arg3[4])
	var x6 uint32
	cmovznzU32(&x6, arg1, arg2[5], arg3[5])
	var x7 uint32
	cmovznzU32(&x7, arg1, arg2[6], arg3[6])
	var x8 uint32
	cmovznzU32(&x8, arg1, arg2[7], arg3[7])
	var x9 uint32
	cmovznzU32(&x9, arg1, arg2[8], arg3[8])
	var x10 uint32
	cmovznzU32(&x10, arg1, arg2[9], arg3[9])
	var x11 uint32
	cmovznzU32(&x11, arg1, arg2[10], arg3[10])
	var x12 uint32
	cmovznzU32(&x12, arg1, arg2[11], arg3[11])
	var x13 uint32
	cmovznzU32(&x13, arg1, arg2[12], arg3[12])
	var x14 uint32
	cmovznzU32(&x14, arg1, arg2[13], arg3[13])
	var x15 uint32
	cmovznzU32(&x15, arg1, arg2[14], arg3[14])
	var x16 uint32
	cmovznzU32(&x16, arg1, arg2[15], arg3[15])
	var x17 uint32
	cmovznzU32(&x17, arg1, arg2[16], arg3[16])
	var x18 uint32
	cmovznzU32(&x18, arg1, arg2[17], arg3[17])
	var x19 uint32
	cmovznzU32(&x19, arg1, arg2[18], arg3[18])
	out1[0] = x1
	out1[1] = x2
	out1[2] = x3
	out1[3] = x4
	out1[4] = x5
	out1[5] = x6
	out1[6] = x7
	out1[7] = x8
	out1[8] = x9
	out1[9] = x10
	out1[10] = x11
	out1[11] = x12
	out1[12] = x13
	out1[13] = x14
	out1[14] = x15
	out1[15] = x16
	out1[16] = x17
	out1[17] = x18
	out1[18] = x19
}

// ToBytes serializes a field element to bytes in little-endian order.
//
// Postconditions:
//   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..65]
//
// Output Bounds:
//   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0x1]]
func ToBytes(out1 *[66]uint8, arg1 *TightFieldElement) {
	var x1 uint32
	var x2 uint1
	subborrowxU28(&x1, &x2, 0x0, arg1[0], 0xfffffff)
	var x3 uint32
	var x4 uint1
	subborrowxU27(&x3, &x4, x2, arg1[1], 0x7ffffff)
	var x5 uint32
	var x6 uint1
	subborrowxU28(&x5, &x6, x4, arg1[2], 0xfffffff)
	var x7 uint32
	var x8 uint1
	subborrowxU27(&x7, &x8, x6, arg1[3], 0x7ffffff)
	var x9 uint32
	var x10 uint1
	subborrowxU28(&x9, &x10, x8, arg1[4], 0xfffffff)
	var x11 uint32
	var x12 uint1
	subborrowxU27(&x11, &x12, x10, arg1[5], 0x7ffffff)
	var x13 uint32
	var x14 uint1
	subborrowxU27(&x13, &x14, x12, arg1[6], 0x7ffffff)
	var x15 uint32
	var x16 uint1
	subborrowxU28(&x15, &x16, x14, arg1[7], 0xfffffff)
	var x17 uint32
	var x18 uint1
	subborrowxU27(&x17, &x18, x16, arg1[8], 0x7ffffff)
	var x19 uint32
	var x20 uint1
	subborrowxU28(&x19, &x20, x18, arg1[9], 0xfffffff)
	var x21 uint32
	var x22 uint1
	subborrowxU27(&x21, &x22, x20, arg1[10], 0x7ffffff)
	var x23 uint32
	var x24 uint1
	subborrowxU28(&x23, &x24, x22, arg1[11], 0xfffffff)
	var x25 uint32
	var x26 uint1
	subborrowxU27(&x25, &x26, x24, arg1[12], 0x7ffffff)
	var x27 uint32
	var x28 uint1
	subborrowxU27(&x27, &x28, x26, arg1[13], 0x7ffffff)
	var x29 uint32
	var x30 uint1
	subborrowxU28(&x29, &x30, x28, arg1[14], 0xfffffff)
	var x31 uint32
	var x32 uint1
	subborrowxU27(&x31, &x32, x30, arg1[15], 0x7ffffff)
	var x33 uint32
	var x34 uint1
	subborrowxU28(&x33, &x34, x32, arg1[16], 0xfffffff)
	var x35 uint32
	var x36 uint1
	subborrowxU27(&x35, &x36, x34, arg1[17], 0x7ffffff)
	var x37 uint32
	var x38 uint1
	subborrowxU27(&x37, &x38, x36, arg1[18], 0x7ffffff)
	var x39 uint32
	x39, _ = bits.Sub32(uint32(0x0), uint32(0x0), uint32(x38))
	var x41 uint32
	var x42 uint1
	addcarryxU28(&x41, &x42, 0x0, x1, (x39 & 0xfffffff))
	var x43 uint32
	var x44 uint1
	addcarryxU27(&x43, &x44, x42, x3, (x39 & 0x7ffffff))
	var x45 uint32
	var x46 uint1
	addcarryxU28(&x45, &x46, x44, x5, (x39 & 0xfffffff))
	var x47 uint32
	var x48 uint1
	addcarryxU27(&x47, &x48, x46, x7, (x39 & 0x7ffffff))
	var x49 uint32
	var x50 uint1
	addcarryxU28(&x49, &x50, x48, x9, (x39 & 0xfffffff))
	var x51 uint32
	var x52 uint1
	addcarryxU27(&x51, &x52, x50, x11, (x39 & 0x7ffffff))
	var x53 uint32
	var x54 uint1
	addcarryxU27(&x53, &x54, x52, x13, (x39 & 0x7ffffff))
	var x55 uint32
	var x56 uint1
	addcarryxU28(&x55, &x56, x54, x15, (x39 & 0xfffffff))
	var x57 uint32
	var x58 uint1
	addcarryxU27(&x57, &x58, x56, x17, (x39 & 0x7ffffff))
	var x59 uint32
	var x60 uint1
	addcarryxU28(&x59, &x60, x58, x19, (x39 & 0xfffffff))
	var x61 uint32
	var x62 uint1
	addcarryxU27(&x61, &x62, x60, x21, (x39 & 0x7ffffff))
	var x63 uint32
	var x64 uint1
	addcarryxU28(&x63, &x64, x62, x23, (x39 & 0xfffffff))
	var x65 uint32
	var x66 uint1
	addcarryxU27(&x65, &x66, x64, x25, (x39 & 0x7ffffff))
	var x67 uint32
	var x68 uint1
	addcarryxU27(&x67, &x68, x66, x27, (x39 & 0x7ffffff))
	var x69 uint32
	var x70 uint1
	addcarryxU28(&x69, &x70, x68, x29, (x39 & 0xfffffff))
	var x71 uint32
	var x72 uint1
	addcarryxU27(&x71, &x72, x70, x31, (x39 & 0x7ffffff))
	var x73 uint32
	var x74 uint1
	addcarryxU28(&x73, &x74, x72, x33, (x39 & 0xfffffff))
	var x75 uint32
	var x76 uint1
	addcarryxU27(&x75, &x76, x74, x35, (x39 & 0x7ffffff))
	var x77 uint32
	var x78 uint1
	addcarryxU27(&x77, &x78, x76, x37, (x39 & 0x7ffffff))
	x79 := (uint64(x77) << 6)
	x80 := (x75 << 3)
	x81 := (uint64(x73) << 7)
	x82 := (x71 << 4)
	x83 := (x67 << 5)
	x84 := (x65 << 2)
	x85 := (uint64(x63) << 6)
	x86 := (x61 << 3)
	x87 := (uint64(x59) << 7)
	x88 := (x57 << 4)
	x89 := (x53 << 5)
	x90 := (x51 << 2)
	x91 := (uint64(x49) << 6)
	x92 := (x47 << 3)
	x93 := (uint64(x45) << 7)
	x94 := (x43 << 4)
	x95 := (uint8(x41) & 0xff)
	x96 := (x41 >> 8)
	x97 := (uint8(x96) & 0xff)
	x98 := (x96 >> 8)
	x99 := (uint8(x98) & 0xff)
	x100 := uint8((x98 >> 8))
	x101 := (x94 + uint32(x100))
	x102 := (uint8(x101) & 0xff)
	x103 := (x101 >> 8)
	x104 := (uint8(x103) & 0xff)
	x105 := (x103 >> 8)
	x106 := (uint8(x105) & 0xff)
	x107 := uint8((x105 >> 8))
	x108 := (x93 + uint64(x107))
	x109 := (uint8(x108) & 0xff)
	x110 := uint32((x108 >> 8))
	x111 := (uint8(x110) & 0xff)
	x112 := (x110 >> 8)
	x113 := (uint8(x112) & 0xff)
	x114 := (x112 >> 8)
	x115 := (uint8(x114) & 0xff)
	x116 := uint8((x114 >> 8))
	x117 := (x92 + uint32(x116))
	x118 := (uint8(x117) & 0xff)
	x119 := (x117 >> 8)
	x120 := (uint8(x119) & 0xff)
	x121 := (x119 >> 8)
	x122 := (uint8(x121) & 0xff)
	x123 := uint8((x121 >> 8))
	x124 := (x91 + uint64(x123))
	x125 := (uint8(x124) & 0xff)
	x126 := uint32((x124 >> 8))
	x127 := (uint8(x126) & 0xff)
	x128 := (x126 >> 8)
	x129 := (uint8(x128) & 0xff)
	x130 := (x128 >> 8)
	x131 := (uint8(x130) & 0xff)
	x132 := uint8((x130 >> 8))
	x133 := (x90 + uint32(x132))
	x134 := (uint8(x133) & 0xff)
	x135 := (x133 >> 8)
	x136 := (uint8(x135) & 0xff)
	x137 := (x135 >> 8)
	x138 := (uint8(x137) & 0xff)
	x139 := uint8((x137 >> 8))
	x140 := (x89 + uint32(x139))
	x141 := (uint8(x140) & 0xff)
	x142 := (x140 >> 8)
	x143 := (uint8(x142) & 0xff)
	x144 := (x142 >> 8)
	x145 := (uint8(x144) & 0xff)
	x146 := uint8((x144 >> 8))
	x147 := (uint8(x55) & 0xff)
	x148 := (x55 >> 8)
	x149 := (uint8(x148) & 0xff)
	x150 := (x148 >> 8)
	x151 := (uint8(x150) & 0xff)
	x152 := uint8((x150 >> 8))
	x153 := (x88 + uint32(x152))
	x154 := (uint8(x153) & 0xff)
	x155 := (x153 >> 8)
	x156 := (uint8(x155) & 0xff)
	x157 := (x155 >> 8)
	x158 := (uint8(x157) & 0xff)
	x159 := uint8((x157 >> 8))
	x160 := (x87 + uint64(x159))
	x161 := (uint8(x160) & 0xff)
	x162 := uint32((x160 >> 8))
	x163 := (uint8(x162) & 0xff)
	x164 := (x162 >> 8)
	x165 := (uint8(x164) & 0xff)
	x166 := (x164 >> 8)
	x167 := (uint8(x166) & 0xff)
	x168 := uint8((x166 >> 8))
	x169 := (x86 + uint32(x168))
	x170 := (uint8(x169) & 0xff)
	x171 := (x169 >> 8)
	x172 := (uint8(x171) & 0xff)
	x173 := (x171 >> 8)
	x174 := (uint8(x173) & 0xff)
	x175 := uint8((x173 >> 8))
	x176 := (x85 + uint64(x175))
	x177 := (uint8(x176) & 0xff)
	x178 := uint32((x176 >> 8))
	x179 := (uint8(x178) & 0xff)
	x180 := (x178 >> 8)
	x181 := (uint8(x180) & 0xff)
	x182 := (x180 >> 8)
	x183 := (uint8(x182) & 0xff)
	x184 := uint8((x182 >> 8))
	x185 := (x84 + uint32(x184))
	x186 := (uint8(x185) & 0xff)
	x187 := (x185 >> 8)
	x188 := (uint8(x187) & 0xff)
	x189 := (x187 >> 8)
	x190 := (uint8(x189) & 0xff)
	x191 := uint8((x189 >> 8))
	x192 := (x83 + uint32(x191))
	x193 := (uint8(x192) & 0xff)
	x194 := (x192 >> 8)
	x195 := (uint8(x194) & 0xff)
	x196 := (x194 >> 8)
	x197 := (uint8(x196) & 0xff)
	x198 := uint8((x196 >> 8))
	x199 := (uint8(x69) & 0xff)
	x200 := (x69 >> 8)
	x201 := (uint8(x200) & 0xff)
	x202 := (x200 >> 8)
	x203 := (uint8(x202) & 0xff)
	x204 := uint8((x202 >> 8))
	x205 := (x82 + uint32(x204))
	x206 := (uint8(x205) & 0xff)
	x207 := (x205 >> 8)
	x208 := (uint8(x207) & 0xff)
	x209 := (x207 >> 8)
	x210 := (uint8(x209) & 0xff)
	x211 := uint8((x209 >> 8))
	x212 := (x81 + uint64(x211))
	x213 := (uint8(x212) & 0xff)
	x214 := uint32((x212 >> 8))
	x215 := (uint8(x214) & 0xff)
	x216 := (x214 >> 8)
	x217 := (uint8(x216) & 0xff)
	x218 := (x216 >> 8)
	x219 := (uint8(x218) & 0xff)
	x220 := uint8((x218 >> 8))
	x221 := (x80 + uint32(x220))
	x222 := (uint8(x221) & 0xff)
	x223 := (x221 >> 8)
	x224 := (uint8(x223) & 0xff)
	x225 := (x223 >> 8)
	x226 := (uint8(x225) & 0xff)
	x227 := uint8((x225 >> 8))
	x228 := (x79 + uint64(x227))
	x229 := (uint8(x228) & 0xff)
	x230 := uint32((x228 >> 8))
	x231 := (uint8(x230) & 0xff)
	x232 := (x230 >> 8)
	x233 := (uint8(x232) & 0xff)
	x234 := (x232 >> 8)
	x235 := (uint8(x234) & 0xff)
	x236 := uint1((x234 >> 8))
	out1[0] = x95
	out1[1] = x97
	out1[2] = x99
	out1[3] = x102
	out1[4] = x104
	out1[5] = x106
	out1[6] = x109
	out1[7] = x111
	out1[8] = x113
	out1[9] = x115
	out1[10] = x118
	out1[11] = x120
	out1[12] = x122
	out1[13] = x125
	out1[14] = x127
	out1[15] = x129
	out1[16] = x131
	out1[17] = x134
	out1[18] = x136
	out1[19] = x138
	out1[20] = x141
	out1[21] = x143
	out1[22] = x145
	out1[23] = x146
	out1[24] = x147
	out1[25] = x149
	out1[26] = x151
	out1[27] = x154
	out1[28] = x156
	out1[29] = x158
	out1[30] = x161
	out1[31] = x163
	out1[32] = x165
	out1[33] = x167
	out1[34] = x170
	out1[35] = x172
	out1[36] = x174
	out1[37] = x177
	out1[38] = x179
	out1[39] = x181
	out1[40] = x183
	out1[41] = x186
	out1[42] = x188
	out1[43] = x190
	out1[44] = x193
	out1[45] = x195
	out1[46] = x197
	out1[47] = x198
	out1[48] = x199
	out1[49] = x201
	out1[50] = x203
	out1[51] = x206
	out1[52] = x208
	out1[53] = x210
	out1[54] = x213
	out1[55] = x215
	out1[56] = x217
	out1[57] = x219
	out1[58] = x222
	out1[59] = x224
	out1[60] = x226
	out1[61] = x229
	out1[62] = x231
	out1[63] = x233
	out1[64] = x235
	out1[65] = uint8(x236)
}

// FromBytes deserializes a field element from bytes in little-endian order.
//
// Postconditions:
//   eval out1 mod m = bytes_eval arg1 mod m
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0x1]]
func FromBytes(out1 *TightFieldElement, arg1 *[66]uint8) {
	x1 := (uint32(uint1(arg1[65])) << 26)
	x2 := (uint32(arg1[64]) << 18)
	x3 := (uint32(arg1[63]) << 10)
	x4 := (uint32(arg1[62]) << 2)
	x5 := (uint32(arg1[61]) << 21)
	x6 := (uint32(arg1[60]) << 13)
	x7 := (uint32(arg1[59]) << 5)
	x8 := (uint64(arg1[58]) << 25)
	x9 := (uint32(arg1[57]) << 17)
	x10 := (uint32(arg1[56]) << 9)
	x11 := (uint32(arg1[55]) * uint32(0x2))
	x12 := (uint32(arg1[54]) << 20)
	x13 := (uint32(arg1[53]) << 12)
	x14 := (uint32(arg1[52]) << 4)
	x15 := (uint32(arg1[51]) << 24)
	x16 := (uint32(arg1[50]) << 16)
	x17 := (uint32(arg1[49]) << 8)
	x18 := arg1[48]
	x19 := (uint32(arg1[47]) << 19)
	x20 := (uint32(arg1[46]) << 11)
	x21 := (uint32(arg1[45]) << 3)
	x22 := (uint32(arg1[44]) << 22)
	x23 := (uint32(arg1[43]) << 14)
	x24 := (uint32(arg1[42]) << 6)
	x25 := (uint64(arg1[41]) << 26)
	x26 := (uint32(arg1[40]) << 18)
	x27 := (uint32(arg1[39]) << 10)
	x28 := (uint32(arg1[38]) << 2)
	x29 := (uint32(arg1[37]) << 21)
	x30 := (uint32(arg1[36]) << 13)
	x31 := (uint32(arg1[35]) << 5)
	x32 := (uint64(arg1[34]) << 25)
	x33 := (uint32(arg1[33]) << 17)
	x34 := (uint32(arg1[32]) << 9)
	x35 := (uint32(arg1[31]) * uint32(0x2))
	x36 := (uint32(arg1[30]) << 20)
	x37 := (uint32(arg1[29]) << 12)
	x38 := (uint32(arg1[28]) << 4)
	x39 := (uint32(arg1[27]) << 24)
	x40 := (uint32(arg1[26]) << 16)
	x41 := (uint32(arg1[25]) << 8)
	x42 := arg1[24]
	x43 := (uint32(arg1[23]) << 19)
	x44 := (uint32(arg1[22]) << 11)
	x45 := (uint32(arg1[21]) << 3)
	x46 := (uint32(arg1[20]) << 22)
	x47 := (uint32(arg1[19]) << 14)
	x48 := (uint32(arg1[18]) << 6)
	x49 := (uint64(arg1[17]) << 26)
	x50 := (uint32(arg1[16]) << 18)
	x51 := (uint32(arg1[15]) << 10)
	x52 := (uint32(arg1[14]) << 2)
	x53 := (uint32(arg1[13]) << 21)
	x54 := (uint32(arg1[12]) << 13)
	x55 := (uint32(arg1[11]) << 5)
	x56 := (uint64(arg1[10]) << 25)
	x57 := (uint32(arg1[9]) << 17)
	x58 := (uint32(arg1[8]) << 9)
	x59 := (uint32(arg1[7]) * uint32(0x2))
	x60 := (uint32(arg1[6]) << 20)
	x61 := (uint32(arg1[5]) << 12)
	x62 := (uint32(arg1[4]) << 4)
	x63 := (uint32(arg1[3]) << 24)
	x64 := (uint32(arg1[2]) << 16)
	x65 := (uint32(arg1[1]) << 8)
	x66 := arg1[0]
	x67 := (x65 + uint32(x66))
	x68 := (x64 + x67)
	x69 := (x63 + x68)
	x70 := (x69 & 0xfffffff)
	x71 := uint8((x69 >> 28))
	x72 := (x62 + uint32(x71))
	x73 := (x61 + x72)
	x74 := (x60 + x73)
	x75 := (x74 & 0x7ffffff)
	x76 := uint1((x74 >> 27))
	x77 := (x59 + uint32(x76))
	x78 := (x58 + x77)
	x79 := (x57 + x78)
	x80 := (x56 + uint64(x79))
	x81 := (uint32(x80) & 0xfffffff)
	x82 := uint8((x80 >> 28))
	x83 := (x55 + uint32(x82))
	x84 := (x54 + x83)
	x85 := (x53 + x84)
	x86 := (x85 & 0x7ffffff)
	x87 := uint8((x85 >> 27))
	x88 := (x52 + uint32(x87))
	x89 := (x51 + x88)
	x90 := (x50 + x89)
	x91 := (x49 + uint64(x90))
	x92 := (uint32(x91) & 0xfffffff)
	x93 := uint8((x91 >> 28))
	x94 := (x48 + uint32(x93))
	x95 := (x47 + x94)
	x96 := (x46 + x95)
	x97 := (x96 & 0x7ffffff)
	x98 := uint8((x96 >> 27))
	x99 := (x45 + uint32(x98))
	x100 := (x44 + x99)
	x101 := (x43 + x100)
	x102 := (x41 + uint32(x42))
	x103 := (x40 + x102)
	x104 := (x39 + x103)
	x105 := (x104 & 0xfffffff)
	x106 := uint8((x104 >> 28))
	x107 := (x38 + uint32(x106))
	x108 := (x37 + x107)
	x109 := (x36 + x108)
	x110 := (x109 & 0x7ffffff)
	x111 := uint1((x109 >> 27))
	x112 := (x35 + uint32(x111))
	x113 := (x34 + x112)
	x114 := (x33 + x113)
	x115 := (x32 + uint64(x114))
	x116 := (uint32(x115) & 0xfffffff)
	x117 := uint8((x115 >> 28))
	x118 := (x31 + uint32(x117))
	x119 := (x30 + x118)
	x120 := (x29 + x119)
	x121 := (x120 & 0x7ffffff)
	x122 := uint8((x120 >> 27))
	x123 := (x28 + uint32(x122))
	x124 := (x27 + x123)
	x125 := (x26 + x124)
	x126 := (x25 + uint64(x125))
	x127 := (uint32(x126) & 0xfffffff)
	x128 := uint8((x126 >> 28))
	x129 := (x24 + uint32(x128))
	x130 := (x23 + x129)
	x131 := (x22 + x130)
	x132 := (x131 & 0x7ffffff)
	x133 := uint8((x131 >> 27))
	x134 := (x21 + uint32(x133))
	x135 := (x20 + x134)
	x136 := (x19 + x135)
	x137 := (x17 + uint32(x18))
	x138 := (x16 + x137)
	x139 := (x15 + x138)
	x140 := (x139 & 0xfffffff)
	x141 := uint8((x139 >> 28))
	x142 := (x14 + uint32(x141))
	x143 := (x13 + x142)
	x144 := (x12 + x143)
	x145 := (x144 & 0x7ffffff)
	x146 := uint1((x144 >> 27))
	x147 := (x11 + uint32(x146))
	x148 := (x10 + x147)
	x149 := (x9 + x148)
	x150 := (x8 + uint64(x149))
	x151 := (uint32(x150) & 0xfffffff)
	x152 := uint8((x150 >> 28))
	x153 := (x7 + uint32(x152))
	x154 := (x6 + x153)
	x155 := (x5 + x154)
	x156 := (x155 & 0x7ffffff)
	x157 := uint8((x155 >> 27))
	x158 := (x4 + uint32(x157))
	x159 := (x3 + x158)
	x160 := (x2 + x159)
	x161 := (x1 + x160)
	out1[0] = x70
	out1[1] = x75
	out1[2] = x81
	out1[3] = x86
	out1[4] = x92
	out1[5] = x97
	out1[6] = x101
	out1[7] = x105
	out1[8] = x110
	out1[9] = x116
	out1[10] = x121
	out1[11] = x127
	out1[12] = x132
	out1[13] = x136
	out1[14] = x140
	out1[15] = x145
	out1[16] = x151
	out1[17] = x156
	out1[18] = x161
}

// Relax is the identity function converting from tight field elements to loose field elements.
//
// Postconditions:
//   out1 = arg1
//
func Relax(out1 *LooseFieldElement, arg1 *TightFieldElement) {
	x1 := arg1[0]
	x2 := arg1[1]
	x3 := arg1[2]
	x4 := arg1[3]
	x5 := arg1[4]
	x6 := arg1[5]
	x7 := arg1[6]
	x8 := arg1[7]
	x9 := arg1[8]
	x10 := arg1[9]
	x11 := arg1[10]
	x12 := arg1[11]
	x13 := arg1[12]
	x14 := arg1[13]
	x15 := arg1[14]
	x16 := arg1[15]
	x17 := arg1[16]
	x18 := arg1[17]
	x19 := arg1[18]
	out1[0] = x1
	out1[1] = x2
	out1[2] = x3
	out1[3] = x4
	out1[4] = x5
	out1[5] = x6
	out1[6] = x7
	out1[7] = x8
	out1[8] = x9
	out1[9] = x10
	out1[10] = x11
	out1[11] = x12
	out1[12] = x13
	out1[13] = x14
	out1[14] = x15
	out1[15] = x16
	out1[16] = x17
	out1[17] = x18
	out1[18] = x19
}

// CarryAdd adds two field elements.
//
// Postconditions:
//   eval out1 mod m = (eval arg1 + eval arg2) mod m
//
func CarryAdd(out1 *TightFieldElement, arg1 *TightFieldElement, arg2 *TightFieldElement) {
	x1 := (arg1[0] + arg2[0])
	x2 := ((x1 >> 28) + (arg1[1] + arg2[1]))
	x3 := ((x2 >> 27) + (arg1[2] + arg2[2]))
	x4 := ((x3 >> 28) + (arg1[3] + arg2[3]))
	x5 := ((x4 >> 27) + (arg1[4] + arg2[4]))
	x6 := ((x5 >> 28) + (arg1[5] + arg2[5]))
	x7 := ((x6 >> 27) + (arg1[6] + arg2[6]))
	x8 := ((x7 >> 27) + (arg1[7] + arg2[7]))
	x9 := ((x8 >> 28) + (arg1[8] + arg2[8]))
	x10 := ((x9 >> 27) + (arg1[9] + arg2[9]))
	x11 := ((x10 >> 28) + (arg1[10] + arg2[10]))
	x12 := ((x11 >> 27) + (arg1[11] + arg2[11]))
	x13 := ((x12 >> 28) + (arg1[12] + arg2[12]))
	x14 := ((x13 >> 27) + (arg1[13] + arg2[13]))
	x15 := ((x14 >> 27) + (arg1[14] + arg2[14]))
	x16 := ((x15 >> 28) + (arg1[15] + arg2[15]))
	x17 := ((x16 >> 27) + (arg1[16] + arg2[16]))
	x18 := ((x17 >> 28) + (arg1[17] + arg2[17]))
	x19 := ((x18 >> 27) + (arg1[18] + arg2[18]))
	x20 := ((x1 & 0xfffffff) + (x19 >> 27))
	x21 := (uint32(uint1((x20 >> 28))) + (x2 & 0x7ffffff))
	x22 := (x20 & 0xfffffff)
	x23 := (x21 & 0x7ffffff)
	x24 := (uint32(uint1((x21 >> 27))) + (x3 & 0xfffffff))
	x25 := (x4 & 0x7ffffff)
	x26 := (x5 & 0xfffffff)
	x27 := (x6 & 0x7ffffff)
	x28 := (x7 & 0x7ffffff)
	x29 := (x8 & 0xfffffff)
	x30 := (x9 & 0x7ffffff)
	x31 := (x10 & 0xfffffff)
	x32 := (x11 & 0x7ffffff)
	x33 := (x12 & 0xfffffff)
	x34 := (x13 & 0x7ffffff)
	x35 := (x14 & 0x7ffffff)
	x36 := (x15 & 0xfffffff)
	x37 := (x16 & 0x7ffffff)
	x38 := (x17 & 0xfffffff)
	x39 := (x18 & 0x7ffffff)
	x40 := (x19 & 0x7ffffff)
	out1[0] = x22
	out1[1] = x23
	out1[2] = x24
	out1[3] = x25
	out1[4] = x26
	out1[5] = x27
	out1[6] = x28
	out1[7] = x29
	out1[8] = x30
	out1[9] = x31
	out1[10] = x32
	out1[11] = x33
	out1[12] = x34
	out1[13] = x35
	out1[14] = x36
	out1[15] = x37
	out1[16] = x38
	out1[17] = x39
	out1[18] = x40
}

// CarrySub subtracts two field elements.
//
// Postconditions:
//   eval out1 mod m = (eval arg1 - eval arg2) mod m
//
func CarrySub(out1 *TightFieldElement, arg1 *TightFieldElement, arg2 *TightFieldElement) {
	x1 := ((0x1ffffffe + arg1[0]) - arg2[0])
	x2 := ((x1 >> 28) + ((0xffffffe + arg1[1]) - arg2[1]))
	x3 := ((x2 >> 27) + ((0x1ffffffe + arg1[2]) - arg2[2]))
	x4 := ((x3 >> 28) + ((0xffffffe + arg1[3]) - arg2[3]))
	x5 := ((x4 >> 27) + ((0x1ffffffe + arg1[4]) - arg2[4]))
	x6 := ((x5 >> 28) + ((0xffffffe + arg1[5]) - arg2[5]))
	x7 := ((x6 >> 27) + ((0xffffffe + arg1[6]) - arg2[6]))
	x8 := ((x7 >> 27) + ((0x1ffffffe + arg1[7]) - arg2[7]))
	x9 := ((x8 >> 28) + ((0xffffffe + arg1[8]) - arg2[8]))
	x10 := ((x9 >> 27) + ((0x1ffffffe + arg1[9]) - arg2[9]))
	x11 := ((x10 >> 28) + ((0xffffffe + arg1[10]) - arg2[10]))
	x12 := ((x11 >> 27) + ((0x1ffffffe + arg1[11]) - arg2[11]))
	x13 := ((x12 >> 28) + ((0xffffffe + arg1[12]) - arg2[12]))
	x14 := ((x13 >> 27) + ((0xffffffe + arg1[13]) - arg2[13]))
	x15 := ((x14 >> 27) + ((0x1ffffffe + arg1[14]) - arg2[14]))
	x16 := ((x15 >> 28) + ((0xffffffe + arg1[15]) - arg2[15]))
	x17 := ((x16 >> 27) + ((0x1ffffffe + arg1[16]) - arg2[16]))
	x18 := ((x17 >> 28) + ((0xffffffe + arg1[17]) - arg2[17]))
	x19 := ((x18 >> 27) + ((0xffffffe + arg1[18]) - arg2[18]))
	x20 := ((x1 & 0xfffffff) + (x19 >> 27))
	x21 := (uint32(uint1((x20 >> 28))) + (x2 & 0x7ffffff))
	x22 := (x20 & 0xfffffff)
	x23 := (x21 & 0x7ffffff)
	x24 := (uint32(uint1((x21 >> 27))) + (x3 & 0xfffffff))
	x25 := (x4 & 0x7ffffff)
	x26 := (x5 & 0xfffffff)
	x27 := (x6 & 0x7ffffff)
	x28 := (x7 & 0x7ffffff)
	x29 := (x8 & 0xfffffff)
	x30 := (x9 & 0x7ffffff)
	x31 := (x10 & 0xfffffff)
	x32 := (x11 & 0x7ffffff)
	x33 := (x12 & 0xfffffff)
	x34 := (x13 & 0x7ffffff)
	x35 := (x14 & 0x7ffffff)
	x36 := (x15 & 0xfffffff)
	x37 := (x16 & 0x7ffffff)
	x38 := (x17 & 0xfffffff)
	x39 := (x18 & 0x7ffffff)
	x40 := (x19 & 0x7ffffff)
	out1[0] = x22
	out1[1] = x23
	out1[2] = x24
	out1[3] = x25
	out1[4] = x26
	out1[5] = x27
	out1[6] = x28
	out1[7] = x29
	out1[8] = x30
	out1[9] = x31
	out1[10] = x32
	out1[11] = x33
	out1[12] = x34
	out1[13] = x35
	out1[14] = x36
	out1[15] = x37
	out1[16] = x38
	out1[17] = x39
	out1[18] = x40
}

// CarryOpp negates a field element.
//
// Postconditions:
//   eval out1 mod m = -eval arg1 mod m
//
func CarryOpp(out1 *TightFieldElement, arg1 *TightFieldElement) {
	x1 := (0x1ffffffe - arg1[0])
	x2 := (uint32(uint1((x1 >> 28))) + (0xffffffe - arg1[1]))
	x3 := (uint32(uint1((x2 >> 27))) + (0x1ffffffe - arg1[2]))
	x4 := (uint32(uint1((x3 >> 28))) + (0xffffffe - arg1[3]))
	x5 := (uint32(uint1((x4 >> 27))) + (0x1ffffffe - arg1[4]))
	x6 := (uint32(uint1((x5 >> 28))) + (0xffffffe - arg1[5]))
	x7 := (uint32(uint1((x6 >> 27))) + (0xffffffe - arg1[6]))
	x8 := (uint32(uint1((x7 >> 27))) + (0x1ffffffe - arg1[7]))
	x9 := (uint32(uint1((x8 >> 28))) + (0xffffffe - arg1[8]))
	x10 := (uint32(uint1((x9 >> 27))) + (0x1ffffffe - arg1[9]))
	x11 := (uint32(uint1((x10 >> 28))) + (0xffffffe - arg1[10]))
	x12 := (uint32(uint1((x11 >> 27))) + (0x1ffffffe - arg1[11]))
	x13 := (uint32(uint1((x12 >> 28))) + (0xffffffe - arg1[12]))
	x14 := (uint32(uint1((x13 >> 27))) + (0xffffffe - arg1[13]))
	x15 := (uint32(uint1((x14 >> 27))) + (0x1ffffffe - arg1[14]))
	x16 := (uint32(uint1((x15 >> 28))) + (0xffffffe - arg1[15]))
	x17 := (uint32(uint1((x16 >> 27))) + (0x1ffffffe - arg1[16]))
	x18 := (uint32(uint1((x17 >> 28))) + (0xffffffe - arg1[17]))
	x19 := (uint32(uint1((x18 >> 27))) + (0xffffffe - arg1[18]))
	x20 := ((x1 & 0xfffffff) + uint32(uint1((x19 >> 27))))
	x21 := (uint32(uint1((x20 >> 28))) + (x2 & 0x7ffffff))
	x22 := (x20 & 0xfffffff)
	x23 := (x21 & 0x7ffffff)
	x24 := (uint32(uint1((x21 >> 27))) + (x3 & 0xfffffff))
	x25 := (x4 & 0x7ffffff)
	x26 := (x5 & 0xfffffff)
	x27 := (x6 & 0x7ffffff)
	x28 := (x7 & 0x7ffffff)
	x29 := (x8 & 0xfffffff)
	x30 := (x9 & 0x7ffffff)
	x31 := (x10 & 0xfffffff)
	x32 := (x11 & 0x7ffffff)
	x33 := (x12 & 0xfffffff)
	x34 := (x13 & 0x7ffffff)
	x35 := (x14 & 0x7ffffff)
	x36 := (x15 & 0xfffffff)
	x37 := (x16 & 0x7ffffff)
	x38 := (x17 & 0xfffffff)
	x39 := (x18 & 0x7ffffff)
	x40 := (x19 & 0x7ffffff)
	out1[0] = x22
	out1[1] = x23
	out1[2] = x24
	out1[3] = x25
	out1[4] = x26
	out1[5] = x27
	out1[6] = x28
	out1[7] = x29
	out1[8] = x30
	out1[9] = x31
	out1[10] = x32
	out1[11] = x33
	out1[12] = x34
	out1[13] = x35
	out1[14] = x36
	out1[15] = x37
	out1[16] = x38
	out1[17] = x39
	out1[18] = x40
}
