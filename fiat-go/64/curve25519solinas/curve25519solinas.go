// Code generated by Fiat Cryptography. DO NOT EDIT.
//
// Autogenerated: 'src/ExtractionOCaml/solinas_reduction' --lang Go --no-wide-int --relax-primitive-carry-to-bitwidth 32,64 --cmovznz-by-mul --internal-static --package-case flatcase --public-function-case UpperCamelCase --private-function-case camelCase --public-type-case UpperCamelCase --private-type-case camelCase --no-prefix-fiat --doc-newline-in-typedef-bounds --doc-prepend-header 'Code generated by Fiat Cryptography. DO NOT EDIT.' --doc-text-before-function-name '' --doc-text-before-type-name '' --package-name curve25519solinas '' 64 '2^255 - 19' mul mul2 square
//
// curve description (via package name): curve25519solinas
//
// machine_wordsize = 64 (from "64")
//
// requested operations: mul, mul2, square
//
// s-c = 2^255 - [(1, 19)] (from "2^255 - 19")
//
//
//
// Computed values:
//
//
package curve25519solinas

import "math/bits"

type uint1 uint64 // We use uint64 instead of a more narrow type for performance reasons; see https://github.com/mit-plv/fiat-crypto/pull/1006#issuecomment-892625927
type int1 int64 // We use uint64 instead of a more narrow type for performance reasons; see https://github.com/mit-plv/fiat-crypto/pull/1006#issuecomment-892625927

var _ = error_Go_output_does_not_support_128_bit_integers___instead_use_rewriting_rules_for_removing_128_bit_integers

// cmovznzU64 is a single-word conditional move.
//
// Postconditions:
//   out1 = (if arg1 = 0 then arg2 else arg3)
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [0x0 ~> 0xffffffffffffffff]
//   arg3: [0x0 ~> 0xffffffffffffffff]
// Output Bounds:
//   out1: [0x0 ~> 0xffffffffffffffff]
func cmovznzU64(out1 *uint64, arg1 uint1, arg2 uint64, arg3 uint64) {
	x1 := (uint64(arg1) * 0xffffffffffffffff)
	x2 := ((x1 & arg3) | ((^x1) & arg2))
	*out1 = x2
}

// Mul multiplies two field elements.
//
// Postconditions:
//   eval out1 mod 57896044618658097711785492504343953926634992332820282019728792003956564819949 = (eval arg1 * eval arg2) mod 57896044618658097711785492504343953926634992332820282019728792003956564819949
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
//   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
func Mul(out1 *[4]uint64, arg1 *[4]uint64, arg2 *[4]uint64) {
	var x1 uint64
	var x2 uint64
	x2, x1 = bits.Mul64(arg1[3], arg2[3])
	var x3 uint64
	var x4 uint64
	x4, x3 = bits.Mul64(arg1[3], arg2[2])
	var x5 uint64
	var x6 uint64
	x6, x5 = bits.Mul64(arg1[3], arg2[1])
	var x7 uint64
	var x8 uint64
	x8, x7 = bits.Mul64(arg1[3], arg2[0])
	var x9 uint64
	var x10 uint64
	x10, x9 = bits.Mul64(arg1[2], arg2[3])
	var x11 uint64
	var x12 uint64
	x12, x11 = bits.Mul64(arg1[2], arg2[2])
	var x13 uint64
	var x14 uint64
	x14, x13 = bits.Mul64(arg1[2], arg2[1])
	var x15 uint64
	var x16 uint64
	x16, x15 = bits.Mul64(arg1[2], arg2[0])
	var x17 uint64
	var x18 uint64
	x18, x17 = bits.Mul64(arg1[1], arg2[3])
	var x19 uint64
	var x20 uint64
	x20, x19 = bits.Mul64(arg1[1], arg2[2])
	var x21 uint64
	var x22 uint64
	x22, x21 = bits.Mul64(arg1[1], arg2[1])
	var x23 uint64
	var x24 uint64
	x24, x23 = bits.Mul64(arg1[1], arg2[0])
	var x25 uint64
	var x26 uint64
	x26, x25 = bits.Mul64(arg1[0], arg2[3])
	var x27 uint64
	var x28 uint64
	x28, x27 = bits.Mul64(arg1[0], arg2[2])
	var x29 uint64
	var x30 uint64
	x30, x29 = bits.Mul64(arg1[0], arg2[1])
	var x31 uint64
	var x32 uint64
	x32, x31 = bits.Mul64(arg1[0], arg2[0])
	var x33 uint64
	var x34 uint64
	x33, x34 = bits.Add64(x28, x7, uint64(0x0))
	var x35 uint64
	var x36 uint64
	x35, x36 = bits.Add64(x26, x5, uint64(uint1(x34)))
	x37 := (uint64(uint1(x36)) + x18)
	var x38 uint64
	var x39 uint64
	x38, x39 = bits.Add64(x33, x13, uint64(0x0))
	var x40 uint64
	var x41 uint64
	x40, x41 = bits.Add64(x35, x8, uint64(uint1(x39)))
	var x42 uint64
	var x43 uint64
	x42, x43 = bits.Add64(x37, uint64(0x0), uint64(uint1(x41)))
	x44 := (uint64(uint1(x43)) + x10)
	var x45 uint64
	var x46 uint64
	x45, x46 = bits.Add64(x30, x15, uint64(0x0))
	var x47 uint64
	var x48 uint64
	x47, x48 = bits.Add64(x38, x16, uint64(uint1(x46)))
	var x49 uint64
	var x50 uint64
	x49, x50 = bits.Add64(x40, x11, uint64(uint1(x48)))
	var x51 uint64
	var x52 uint64
	x51, x52 = bits.Add64(x42, x3, uint64(uint1(x50)))
	var x53 uint64
	var x54 uint64
	x53, x54 = bits.Add64(x44, uint64(0x0), uint64(uint1(x52)))
	x55 := (uint64(uint1(x54)) + x2)
	var x56 uint64
	var x57 uint64
	x56, x57 = bits.Add64(x45, x21, uint64(0x0))
	var x58 uint64
	var x59 uint64
	x58, x59 = bits.Add64(x47, x19, uint64(uint1(x57)))
	var x60 uint64
	var x61 uint64
	x60, x61 = bits.Add64(x49, x14, uint64(uint1(x59)))
	var x62 uint64
	var x63 uint64
	x62, x63 = bits.Add64(x51, x6, uint64(uint1(x61)))
	var x64 uint64
	var x65 uint64
	x64, x65 = bits.Add64(x53, uint64(0x0), uint64(uint1(x63)))
	var x66 uint64
	x66, _ = bits.Add64(x55, uint64(0x0), uint64(uint1(x65)))
	var x68 uint64
	var x69 uint64
	x68, x69 = bits.Add64(x32, x23, uint64(0x0))
	var x70 uint64
	var x71 uint64
	x70, x71 = bits.Add64(x56, x24, uint64(uint1(x69)))
	var x72 uint64
	var x73 uint64
	x72, x73 = bits.Add64(x58, x22, uint64(uint1(x71)))
	var x74 uint64
	var x75 uint64
	x74, x75 = bits.Add64(x60, x17, uint64(uint1(x73)))
	var x76 uint64
	var x77 uint64
	x76, x77 = bits.Add64(x62, x9, uint64(uint1(x75)))
	var x78 uint64
	var x79 uint64
	x78, x79 = bits.Add64(x64, x1, uint64(uint1(x77)))
	var x80 uint64
	x80, _ = bits.Add64(x66, uint64(0x0), uint64(uint1(x79)))
	var x82 uint64
	var x83 uint64
	x82, x83 = bits.Add64(x68, x29, uint64(0x0))
	var x84 uint64
	var x85 uint64
	x84, x85 = bits.Add64(x70, x27, uint64(uint1(x83)))
	var x86 uint64
	var x87 uint64
	x86, x87 = bits.Add64(x72, x25, uint64(uint1(x85)))
	var x88 uint64
	var x89 uint64
	x88, x89 = bits.Add64(x74, x20, uint64(uint1(x87)))
	var x90 uint64
	var x91 uint64
	x90, x91 = bits.Add64(x76, x12, uint64(uint1(x89)))
	var x92 uint64
	var x93 uint64
	x92, x93 = bits.Add64(x78, x4, uint64(uint1(x91)))
	var x94 uint64
	x94, _ = bits.Add64(x80, uint64(0x0), uint64(uint1(x93)))
	var x96 uint64
	var x97 uint64
	x97, x96 = bits.Mul64(0x26, x94)
	var x98 uint64
	var x99 uint64
	x99, x98 = bits.Mul64(0x26, x92)
	var x100 uint64
	var x101 uint64
	x101, x100 = bits.Mul64(0x26, x90)
	var x102 uint64
	var x103 uint64
	x103, x102 = bits.Mul64(0x26, x88)
	var x104 uint64
	var x105 uint64
	x104, x105 = bits.Add64(x82, x100, uint64(0x0))
	var x106 uint64
	var x107 uint64
	x106, x107 = bits.Add64(x84, x98, uint64(uint1(x105)))
	var x108 uint64
	var x109 uint64
	x108, x109 = bits.Add64(x86, x96, uint64(uint1(x107)))
	x110 := (uint64(uint1(x109)) + x97)
	var x111 uint64
	var x112 uint64
	x111, x112 = bits.Add64(x31, x102, uint64(0x0))
	var x113 uint64
	var x114 uint64
	x113, x114 = bits.Add64(x104, x103, uint64(uint1(x112)))
	var x115 uint64
	var x116 uint64
	x115, x116 = bits.Add64(x106, x101, uint64(uint1(x114)))
	var x117 uint64
	var x118 uint64
	x117, x118 = bits.Add64(x108, x99, uint64(uint1(x116)))
	x119 := (uint64(uint1(x118)) + x110)
	var x120 uint64
	_, x120 = bits.Mul64(0x26, x119)
	var x122 uint64
	var x123 uint64
	x122, x123 = bits.Add64(x111, x120, uint64(0x0))
	var x124 uint64
	var x125 uint64
	x124, x125 = bits.Add64(x113, uint64(0x0), uint64(uint1(x123)))
	var x126 uint64
	var x127 uint64
	x126, x127 = bits.Add64(x115, uint64(0x0), uint64(uint1(x125)))
	var x128 uint64
	var x129 uint64
	x128, x129 = bits.Add64(x117, uint64(0x0), uint64(uint1(x127)))
	var x130 uint64
	cmovznzU64(&x130, uint1(x129), uint64(0x0), 0x26)
	x131 := (uint128(x130) + uint128(x122))
	x132 := (uint64(x131) & 0xffffffffffffffff)
	out1[0] = x132
	out1[1] = x124
	out1[2] = x126
	out1[3] = x128
}

// Mul2 multiplies two field elements.
//
// Postconditions:
//   eval out1 mod 57896044618658097711785492504343953926634992332820282019728792003956564819949 = (eval arg1 * eval arg2) mod 57896044618658097711785492504343953926634992332820282019728792003956564819949
//   eval out2 mod 57896044618658097711785492504343953926634992332820282019728792003956564819949 = (eval arg3 * eval arg4) mod 57896044618658097711785492504343953926634992332820282019728792003956564819949
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
//   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
//   arg3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
//   arg4: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
//   out2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
func Mul2(out1 *[4]uint64, out2 *[4]uint64, arg1 *[4]uint64, arg2 *[4]uint64, arg3 *[4]uint64, arg4 *[4]uint64) {
	var x1 uint64
	var x2 uint64
	x2, x1 = bits.Mul64(arg1[3], arg2[3])
	var x3 uint64
	var x4 uint64
	x4, x3 = bits.Mul64(arg1[3], arg2[2])
	var x5 uint64
	var x6 uint64
	x6, x5 = bits.Mul64(arg1[3], arg2[1])
	var x7 uint64
	var x8 uint64
	x8, x7 = bits.Mul64(arg1[3], arg2[0])
	var x9 uint64
	var x10 uint64
	x10, x9 = bits.Mul64(arg1[2], arg2[3])
	var x11 uint64
	var x12 uint64
	x12, x11 = bits.Mul64(arg1[2], arg2[2])
	var x13 uint64
	var x14 uint64
	x14, x13 = bits.Mul64(arg1[2], arg2[1])
	var x15 uint64
	var x16 uint64
	x16, x15 = bits.Mul64(arg1[2], arg2[0])
	var x17 uint64
	var x18 uint64
	x18, x17 = bits.Mul64(arg1[1], arg2[3])
	var x19 uint64
	var x20 uint64
	x20, x19 = bits.Mul64(arg1[1], arg2[2])
	var x21 uint64
	var x22 uint64
	x22, x21 = bits.Mul64(arg1[1], arg2[1])
	var x23 uint64
	var x24 uint64
	x24, x23 = bits.Mul64(arg1[1], arg2[0])
	var x25 uint64
	var x26 uint64
	x26, x25 = bits.Mul64(arg1[0], arg2[3])
	var x27 uint64
	var x28 uint64
	x28, x27 = bits.Mul64(arg1[0], arg2[2])
	var x29 uint64
	var x30 uint64
	x30, x29 = bits.Mul64(arg1[0], arg2[1])
	var x31 uint64
	var x32 uint64
	x32, x31 = bits.Mul64(arg1[0], arg2[0])
	var x33 uint64
	var x34 uint64
	x33, x34 = bits.Add64(x28, x7, uint64(0x0))
	var x35 uint64
	var x36 uint64
	x35, x36 = bits.Add64(x26, x5, uint64(uint1(x34)))
	x37 := (uint64(uint1(x36)) + x18)
	var x38 uint64
	var x39 uint64
	x38, x39 = bits.Add64(x33, x13, uint64(0x0))
	var x40 uint64
	var x41 uint64
	x40, x41 = bits.Add64(x35, x8, uint64(uint1(x39)))
	var x42 uint64
	var x43 uint64
	x42, x43 = bits.Add64(x37, uint64(0x0), uint64(uint1(x41)))
	x44 := (uint64(uint1(x43)) + x10)
	var x45 uint64
	var x46 uint64
	x45, x46 = bits.Add64(x30, x15, uint64(0x0))
	var x47 uint64
	var x48 uint64
	x47, x48 = bits.Add64(x38, x16, uint64(uint1(x46)))
	var x49 uint64
	var x50 uint64
	x49, x50 = bits.Add64(x40, x11, uint64(uint1(x48)))
	var x51 uint64
	var x52 uint64
	x51, x52 = bits.Add64(x42, x3, uint64(uint1(x50)))
	var x53 uint64
	var x54 uint64
	x53, x54 = bits.Add64(x44, uint64(0x0), uint64(uint1(x52)))
	x55 := (uint64(uint1(x54)) + x2)
	var x56 uint64
	var x57 uint64
	x56, x57 = bits.Add64(x45, x21, uint64(0x0))
	var x58 uint64
	var x59 uint64
	x58, x59 = bits.Add64(x47, x19, uint64(uint1(x57)))
	var x60 uint64
	var x61 uint64
	x60, x61 = bits.Add64(x49, x14, uint64(uint1(x59)))
	var x62 uint64
	var x63 uint64
	x62, x63 = bits.Add64(x51, x6, uint64(uint1(x61)))
	var x64 uint64
	var x65 uint64
	x64, x65 = bits.Add64(x53, uint64(0x0), uint64(uint1(x63)))
	var x66 uint64
	x66, _ = bits.Add64(x55, uint64(0x0), uint64(uint1(x65)))
	var x68 uint64
	var x69 uint64
	x68, x69 = bits.Add64(x32, x23, uint64(0x0))
	var x70 uint64
	var x71 uint64
	x70, x71 = bits.Add64(x56, x24, uint64(uint1(x69)))
	var x72 uint64
	var x73 uint64
	x72, x73 = bits.Add64(x58, x22, uint64(uint1(x71)))
	var x74 uint64
	var x75 uint64
	x74, x75 = bits.Add64(x60, x17, uint64(uint1(x73)))
	var x76 uint64
	var x77 uint64
	x76, x77 = bits.Add64(x62, x9, uint64(uint1(x75)))
	var x78 uint64
	var x79 uint64
	x78, x79 = bits.Add64(x64, x1, uint64(uint1(x77)))
	var x80 uint64
	x80, _ = bits.Add64(x66, uint64(0x0), uint64(uint1(x79)))
	var x82 uint64
	var x83 uint64
	x82, x83 = bits.Add64(x68, x29, uint64(0x0))
	var x84 uint64
	var x85 uint64
	x84, x85 = bits.Add64(x70, x27, uint64(uint1(x83)))
	var x86 uint64
	var x87 uint64
	x86, x87 = bits.Add64(x72, x25, uint64(uint1(x85)))
	var x88 uint64
	var x89 uint64
	x88, x89 = bits.Add64(x74, x20, uint64(uint1(x87)))
	var x90 uint64
	var x91 uint64
	x90, x91 = bits.Add64(x76, x12, uint64(uint1(x89)))
	var x92 uint64
	var x93 uint64
	x92, x93 = bits.Add64(x78, x4, uint64(uint1(x91)))
	var x94 uint64
	x94, _ = bits.Add64(x80, uint64(0x0), uint64(uint1(x93)))
	var x96 uint64
	var x97 uint64
	x97, x96 = bits.Mul64(arg3[3], arg4[3])
	var x98 uint64
	var x99 uint64
	x99, x98 = bits.Mul64(arg3[3], arg4[2])
	var x100 uint64
	var x101 uint64
	x101, x100 = bits.Mul64(arg3[3], arg4[1])
	var x102 uint64
	var x103 uint64
	x103, x102 = bits.Mul64(arg3[3], arg4[0])
	var x104 uint64
	var x105 uint64
	x105, x104 = bits.Mul64(arg3[2], arg4[3])
	var x106 uint64
	var x107 uint64
	x107, x106 = bits.Mul64(arg3[2], arg4[2])
	var x108 uint64
	var x109 uint64
	x109, x108 = bits.Mul64(arg3[2], arg4[1])
	var x110 uint64
	var x111 uint64
	x111, x110 = bits.Mul64(arg3[2], arg4[0])
	var x112 uint64
	var x113 uint64
	x113, x112 = bits.Mul64(arg3[1], arg4[3])
	var x114 uint64
	var x115 uint64
	x115, x114 = bits.Mul64(arg3[1], arg4[2])
	var x116 uint64
	var x117 uint64
	x117, x116 = bits.Mul64(arg3[1], arg4[1])
	var x118 uint64
	var x119 uint64
	x119, x118 = bits.Mul64(arg3[1], arg4[0])
	var x120 uint64
	var x121 uint64
	x121, x120 = bits.Mul64(arg3[0], arg4[3])
	var x122 uint64
	var x123 uint64
	x123, x122 = bits.Mul64(arg3[0], arg4[2])
	var x124 uint64
	var x125 uint64
	x125, x124 = bits.Mul64(arg3[0], arg4[1])
	var x126 uint64
	var x127 uint64
	x127, x126 = bits.Mul64(arg3[0], arg4[0])
	var x128 uint64
	var x129 uint64
	x128, x129 = bits.Add64(x123, x102, uint64(0x0))
	var x130 uint64
	var x131 uint64
	x130, x131 = bits.Add64(x121, x100, uint64(uint1(x129)))
	x132 := (uint64(uint1(x131)) + x113)
	var x133 uint64
	var x134 uint64
	x133, x134 = bits.Add64(x128, x108, uint64(0x0))
	var x135 uint64
	var x136 uint64
	x135, x136 = bits.Add64(x130, x103, uint64(uint1(x134)))
	var x137 uint64
	var x138 uint64
	x137, x138 = bits.Add64(x132, uint64(0x0), uint64(uint1(x136)))
	x139 := (uint64(uint1(x138)) + x105)
	var x140 uint64
	var x141 uint64
	x140, x141 = bits.Add64(x125, x110, uint64(0x0))
	var x142 uint64
	var x143 uint64
	x142, x143 = bits.Add64(x133, x111, uint64(uint1(x141)))
	var x144 uint64
	var x145 uint64
	x144, x145 = bits.Add64(x135, x106, uint64(uint1(x143)))
	var x146 uint64
	var x147 uint64
	x146, x147 = bits.Add64(x137, x98, uint64(uint1(x145)))
	var x148 uint64
	var x149 uint64
	x148, x149 = bits.Add64(x139, uint64(0x0), uint64(uint1(x147)))
	x150 := (uint64(uint1(x149)) + x97)
	var x151 uint64
	var x152 uint64
	x151, x152 = bits.Add64(x140, x116, uint64(0x0))
	var x153 uint64
	var x154 uint64
	x153, x154 = bits.Add64(x142, x114, uint64(uint1(x152)))
	var x155 uint64
	var x156 uint64
	x155, x156 = bits.Add64(x144, x109, uint64(uint1(x154)))
	var x157 uint64
	var x158 uint64
	x157, x158 = bits.Add64(x146, x101, uint64(uint1(x156)))
	var x159 uint64
	var x160 uint64
	x159, x160 = bits.Add64(x148, uint64(0x0), uint64(uint1(x158)))
	var x161 uint64
	x161, _ = bits.Add64(x150, uint64(0x0), uint64(uint1(x160)))
	var x163 uint64
	var x164 uint64
	x163, x164 = bits.Add64(x127, x118, uint64(0x0))
	var x165 uint64
	var x166 uint64
	x165, x166 = bits.Add64(x151, x119, uint64(uint1(x164)))
	var x167 uint64
	var x168 uint64
	x167, x168 = bits.Add64(x153, x117, uint64(uint1(x166)))
	var x169 uint64
	var x170 uint64
	x169, x170 = bits.Add64(x155, x112, uint64(uint1(x168)))
	var x171 uint64
	var x172 uint64
	x171, x172 = bits.Add64(x157, x104, uint64(uint1(x170)))
	var x173 uint64
	var x174 uint64
	x173, x174 = bits.Add64(x159, x96, uint64(uint1(x172)))
	var x175 uint64
	x175, _ = bits.Add64(x161, uint64(0x0), uint64(uint1(x174)))
	var x177 uint64
	var x178 uint64
	x177, x178 = bits.Add64(x163, x124, uint64(0x0))
	var x179 uint64
	var x180 uint64
	x179, x180 = bits.Add64(x165, x122, uint64(uint1(x178)))
	var x181 uint64
	var x182 uint64
	x181, x182 = bits.Add64(x167, x120, uint64(uint1(x180)))
	var x183 uint64
	var x184 uint64
	x183, x184 = bits.Add64(x169, x115, uint64(uint1(x182)))
	var x185 uint64
	var x186 uint64
	x185, x186 = bits.Add64(x171, x107, uint64(uint1(x184)))
	var x187 uint64
	var x188 uint64
	x187, x188 = bits.Add64(x173, x99, uint64(uint1(x186)))
	var x189 uint64
	x189, _ = bits.Add64(x175, uint64(0x0), uint64(uint1(x188)))
	var x191 uint64
	var x192 uint64
	x192, x191 = bits.Mul64(0x26, x92)
	var x193 uint64
	var x194 uint64
	x194, x193 = bits.Mul64(0x26, x90)
	var x195 uint64
	var x196 uint64
	x196, x195 = bits.Mul64(0x26, x88)
	var x197 uint64
	var x198 uint64
	x197, x198 = bits.Add64(x82, x193, uint64(0x0))
	var x199 uint64
	var x200 uint64
	x199, x200 = bits.Add64(x84, x191, uint64(uint1(x198)))
	var x201 uint64
	_, x201 = bits.Mul64(0x26, x94)
	var x203 uint64
	var x204 uint64
	x203, x204 = bits.Add64(x86, x201, uint64(uint1(x200)))
	var x206 uint64
	x206, _ = bits.Mul64(0x26, x94)
	x207 := (uint64(uint1(x204)) + x206)
	var x208 uint64
	var x209 uint64
	x208, x209 = bits.Add64(x31, x195, uint64(0x0))
	var x210 uint64
	var x211 uint64
	x210, x211 = bits.Add64(x197, x196, uint64(uint1(x209)))
	var x212 uint64
	var x213 uint64
	x212, x213 = bits.Add64(x199, x194, uint64(uint1(x211)))
	var x214 uint64
	var x215 uint64
	x214, x215 = bits.Add64(x203, x192, uint64(uint1(x213)))
	x216 := (uint64(uint1(x215)) + x207)
	var x217 uint64
	_, x217 = bits.Mul64(0x26, x216)
	var x219 uint64
	var x220 uint64
	x219, x220 = bits.Add64(x208, x217, uint64(0x0))
	var x221 uint64
	var x222 uint64
	x221, x222 = bits.Add64(x210, uint64(0x0), uint64(uint1(x220)))
	var x223 uint64
	var x224 uint64
	x223, x224 = bits.Add64(x212, uint64(0x0), uint64(uint1(x222)))
	var x225 uint64
	var x226 uint64
	x225, x226 = bits.Add64(x214, uint64(0x0), uint64(uint1(x224)))
	var x227 uint64
	cmovznzU64(&x227, uint1(x226), uint64(0x0), 0x26)
	x228 := (uint128(x227) + uint128(x219))
	x229 := (uint64(x228) & 0xffffffffffffffff)
	var x230 uint64
	var x231 uint64
	x231, x230 = bits.Mul64(0x26, x189)
	var x232 uint64
	var x233 uint64
	x233, x232 = bits.Mul64(0x26, x187)
	var x234 uint64
	var x235 uint64
	x235, x234 = bits.Mul64(0x26, x185)
	var x236 uint64
	var x237 uint64
	x237, x236 = bits.Mul64(0x26, x183)
	var x238 uint64
	var x239 uint64
	x238, x239 = bits.Add64(x177, x234, uint64(0x0))
	var x240 uint64
	var x241 uint64
	x240, x241 = bits.Add64(x179, x232, uint64(uint1(x239)))
	var x242 uint64
	var x243 uint64
	x242, x243 = bits.Add64(x181, x230, uint64(uint1(x241)))
	x244 := (uint64(uint1(x243)) + x231)
	var x245 uint64
	var x246 uint64
	x245, x246 = bits.Add64(x126, x236, uint64(0x0))
	var x247 uint64
	var x248 uint64
	x247, x248 = bits.Add64(x238, x237, uint64(uint1(x246)))
	var x249 uint64
	var x250 uint64
	x249, x250 = bits.Add64(x240, x235, uint64(uint1(x248)))
	var x251 uint64
	var x252 uint64
	x251, x252 = bits.Add64(x242, x233, uint64(uint1(x250)))
	x253 := (uint64(uint1(x252)) + x244)
	var x254 uint64
	_, x254 = bits.Mul64(0x26, x253)
	var x256 uint64
	var x257 uint64
	x256, x257 = bits.Add64(x245, x254, uint64(0x0))
	var x258 uint64
	var x259 uint64
	x258, x259 = bits.Add64(x247, uint64(0x0), uint64(uint1(x257)))
	var x260 uint64
	var x261 uint64
	x260, x261 = bits.Add64(x249, uint64(0x0), uint64(uint1(x259)))
	var x262 uint64
	var x263 uint64
	x262, x263 = bits.Add64(x251, uint64(0x0), uint64(uint1(x261)))
	var x264 uint64
	cmovznzU64(&x264, uint1(x263), uint64(0x0), 0x26)
	x265 := (uint128(x264) + uint128(x256))
	x266 := (uint64(x265) & 0xffffffffffffffff)
	out1[0] = x229
	out1[1] = x221
	out1[2] = x223
	out1[3] = x225
	out2[0] = x266
	out2[1] = x258
	out2[2] = x260
	out2[3] = x262
}

// Square squares a field element.
//
// Postconditions:
//   eval out1 mod 57896044618658097711785492504343953926634992332820282019728792003956564819949 = (eval arg1 * eval arg1) mod 57896044618658097711785492504343953926634992332820282019728792003956564819949
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
func Square(out1 *[4]uint64, arg1 *[4]uint64) {
	var x1 uint64
	var x2 uint64
	x2, x1 = bits.Mul64(arg1[0], arg1[3])
	var x3 uint64
	var x4 uint64
	x4, x3 = bits.Mul64(arg1[0], arg1[2])
	var x5 uint64
	var x6 uint64
	x6, x5 = bits.Mul64(arg1[0], arg1[1])
	var x7 uint64
	var x8 uint64
	x8, x7 = bits.Mul64(arg1[3], arg1[2])
	var x9 uint64
	var x10 uint64
	x10, x9 = bits.Mul64(arg1[3], arg1[1])
	var x11 uint64
	var x12 uint64
	x11, x12 = bits.Add64(x6, x3, uint64(0x0))
	var x13 uint64
	var x14 uint64
	x13, x14 = bits.Add64(x4, x1, uint64(uint1(x12)))
	var x15 uint64
	var x16 uint64
	x15, x16 = bits.Add64(x2, x9, uint64(uint1(x14)))
	var x17 uint64
	var x18 uint64
	x17, x18 = bits.Add64(x10, x7, uint64(uint1(x16)))
	x19 := (uint64(uint1(x18)) + x8)
	var x20 uint64
	var x21 uint64
	x21, x20 = bits.Mul64(arg1[1], arg1[2])
	var x22 uint64
	var x23 uint64
	x22, x23 = bits.Add64(x13, x20, uint64(0x0))
	var x24 uint64
	var x25 uint64
	x24, x25 = bits.Add64(x15, x21, uint64(uint1(x23)))
	var x26 uint64
	var x27 uint64
	x26, x27 = bits.Add64(x17, uint64(0x0), uint64(uint1(x25)))
	var x28 uint64
	var x29 uint64
	x28, x29 = bits.Add64(x19, uint64(0x0), uint64(uint1(x27)))
	var x30 uint64
	var x31 uint64
	x30, x31 = bits.Add64(x5, x5, uint64(0x0))
	var x32 uint64
	var x33 uint64
	x32, x33 = bits.Add64(x11, x11, uint64(uint1(x31)))
	var x34 uint64
	var x35 uint64
	x34, x35 = bits.Add64(x22, x22, uint64(uint1(x33)))
	var x36 uint64
	var x37 uint64
	x36, x37 = bits.Add64(x24, x24, uint64(uint1(x35)))
	var x38 uint64
	var x39 uint64
	x38, x39 = bits.Add64(x26, x26, uint64(uint1(x37)))
	var x40 uint64
	var x41 uint64
	x40, x41 = bits.Add64(x28, x28, uint64(uint1(x39)))
	x42 := ((uint64(uint1(x41)) + uint64(uint1(x29))) + uint64(uint1(x29)))
	var x43 uint64
	var x44 uint64
	x44, x43 = bits.Mul64(arg1[3], arg1[3])
	var x45 uint64
	var x46 uint64
	x46, x45 = bits.Mul64(arg1[2], arg1[2])
	var x47 uint64
	var x48 uint64
	x48, x47 = bits.Mul64(arg1[1], arg1[1])
	var x49 uint64
	var x50 uint64
	x50, x49 = bits.Mul64(arg1[0], arg1[0])
	var x51 uint64
	var x52 uint64
	x51, x52 = bits.Add64(x30, x50, uint64(0x0))
	var x53 uint64
	var x54 uint64
	x53, x54 = bits.Add64(x32, x47, uint64(uint1(x52)))
	var x55 uint64
	var x56 uint64
	x55, x56 = bits.Add64(x34, x48, uint64(uint1(x54)))
	var x57 uint64
	var x58 uint64
	x57, x58 = bits.Add64(x36, x45, uint64(uint1(x56)))
	var x59 uint64
	var x60 uint64
	x59, x60 = bits.Add64(x38, x46, uint64(uint1(x58)))
	var x61 uint64
	var x62 uint64
	x61, x62 = bits.Add64(x40, x43, uint64(uint1(x60)))
	var x63 uint64
	x63, _ = bits.Add64(x42, x44, uint64(uint1(x62)))
	var x65 uint64
	var x66 uint64
	x66, x65 = bits.Mul64(0x26, x63)
	var x67 uint64
	var x68 uint64
	x68, x67 = bits.Mul64(0x26, x61)
	var x69 uint64
	var x70 uint64
	x70, x69 = bits.Mul64(0x26, x59)
	var x71 uint64
	var x72 uint64
	x72, x71 = bits.Mul64(0x26, x57)
	var x73 uint64
	var x74 uint64
	x73, x74 = bits.Add64(x51, x69, uint64(0x0))
	var x75 uint64
	var x76 uint64
	x75, x76 = bits.Add64(x53, x67, uint64(uint1(x74)))
	var x77 uint64
	var x78 uint64
	x77, x78 = bits.Add64(x55, x65, uint64(uint1(x76)))
	x79 := (uint64(uint1(x78)) + x66)
	var x80 uint64
	var x81 uint64
	x80, x81 = bits.Add64(x49, x71, uint64(0x0))
	var x82 uint64
	var x83 uint64
	x82, x83 = bits.Add64(x73, x72, uint64(uint1(x81)))
	var x84 uint64
	var x85 uint64
	x84, x85 = bits.Add64(x75, x70, uint64(uint1(x83)))
	var x86 uint64
	var x87 uint64
	x86, x87 = bits.Add64(x77, x68, uint64(uint1(x85)))
	x88 := (uint64(uint1(x87)) + x79)
	var x89 uint64
	_, x89 = bits.Mul64(0x26, x88)
	var x91 uint64
	var x92 uint64
	x91, x92 = bits.Add64(x80, x89, uint64(0x0))
	var x93 uint64
	var x94 uint64
	x93, x94 = bits.Add64(x82, uint64(0x0), uint64(uint1(x92)))
	var x95 uint64
	var x96 uint64
	x95, x96 = bits.Add64(x84, uint64(0x0), uint64(uint1(x94)))
	var x97 uint64
	var x98 uint64
	x97, x98 = bits.Add64(x86, uint64(0x0), uint64(uint1(x96)))
	var x99 uint64
	cmovznzU64(&x99, uint1(x98), uint64(0x0), 0x26)
	x100 := (uint128(x99) + uint128(x91))
	x101 := (uint64(x100) & 0xffffffffffffffff)
	out1[0] = x101
	out1[1] = x93
	out1[2] = x95
	out1[3] = x97
}
