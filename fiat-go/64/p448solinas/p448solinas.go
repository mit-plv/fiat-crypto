// Code generated by Fiat Cryptography. DO NOT EDIT.
//
// Autogenerated: 'src/ExtractionOCaml/unsaturated_solinas' --lang Go --no-wide-int --relax-primitive-carry-to-bitwidth 32,64 --cmovznz-by-mul --internal-static --package-case flatcase --public-function-case UpperCamelCase --private-function-case camelCase --public-type-case UpperCamelCase --private-type-case camelCase --no-prefix-fiat --doc-newline-in-typedef-bounds --doc-prepend-header 'Code generated by Fiat Cryptography. DO NOT EDIT.' --doc-text-before-function-name '' --doc-text-before-type-name '' --package-name p448solinas '' 64 8 '2^448 - 2^224 - 1' carry_mul carry_square carry add sub opp selectznz to_bytes from_bytes relax carry_add carry_sub carry_opp
//
// curve description (via package name): p448solinas
//
// machine_wordsize = 64 (from "64")
//
// requested operations: carry_mul, carry_square, carry, add, sub, opp, selectznz, to_bytes, from_bytes, relax, carry_add, carry_sub, carry_opp
//
// n = 8 (from "8")
//
// s-c = 2^448 - [(2^224, 1), (1, 1)] (from "2^448 - 2^224 - 1")
//
// tight_bounds_multiplier = 1 (from "")
//
//
//
// Computed values:
//
//   carry_chain = [3, 7, 4, 0, 5, 1, 6, 2, 7, 3, 4, 0]
//
//   eval z = z[0] + (z[1] << 56) + (z[2] << 112) + (z[3] << 168) + (z[4] << 224) + (z[5] << 0x118) + (z[6] << 0x150) + (z[7] << 0x188)
//
//   bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17] << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168) + (z[22] << 176) + (z[23] << 184) + (z[24] << 192) + (z[25] << 200) + (z[26] << 208) + (z[27] << 216) + (z[28] << 224) + (z[29] << 232) + (z[30] << 240) + (z[31] << 248) + (z[32] << 256) + (z[33] << 0x108) + (z[34] << 0x110) + (z[35] << 0x118) + (z[36] << 0x120) + (z[37] << 0x128) + (z[38] << 0x130) + (z[39] << 0x138) + (z[40] << 0x140) + (z[41] << 0x148) + (z[42] << 0x150) + (z[43] << 0x158) + (z[44] << 0x160) + (z[45] << 0x168) + (z[46] << 0x170) + (z[47] << 0x178) + (z[48] << 0x180) + (z[49] << 0x188) + (z[50] << 0x190) + (z[51] << 0x198) + (z[52] << 0x1a0) + (z[53] << 0x1a8) + (z[54] << 0x1b0) + (z[55] << 0x1b8)
//
//   balance = [0x1fffffffffffffe, 0x1fffffffffffffe, 0x1fffffffffffffe, 0x1fffffffffffffe, 0x1fffffffffffffc, 0x1fffffffffffffe, 0x1fffffffffffffe, 0x1fffffffffffffe]
package p448solinas

import "math/bits"

type uint1 uint64 // We use uint64 instead of a more narrow type for performance reasons; see https://github.com/mit-plv/fiat-crypto/pull/1006#issuecomment-892625927
type int1 int64 // We use uint64 instead of a more narrow type for performance reasons; see https://github.com/mit-plv/fiat-crypto/pull/1006#issuecomment-892625927

// LooseFieldElement is a field element with loose bounds.
//
// Bounds:
//
//   [[0x0 ~> 0x300000000000000], [0x0 ~> 0x300000000000000], [0x0 ~> 0x300000000000000], [0x0 ~> 0x300000000000000], [0x0 ~> 0x300000000000000], [0x0 ~> 0x300000000000000], [0x0 ~> 0x300000000000000], [0x0 ~> 0x300000000000000]]
type LooseFieldElement [8]uint64

// TightFieldElement is a field element with tight bounds.
//
// Bounds:
//
//   [[0x0 ~> 0x100000000000000], [0x0 ~> 0x100000000000000], [0x0 ~> 0x100000000000000], [0x0 ~> 0x100000000000000], [0x0 ~> 0x100000000000000], [0x0 ~> 0x100000000000000], [0x0 ~> 0x100000000000000], [0x0 ~> 0x100000000000000]]
type TightFieldElement [8]uint64

// addcarryxU56 is an addition with carry.
//
// Postconditions:
//   out1 = (arg1 + arg2 + arg3) mod 2^56
//   out2 = ⌊(arg1 + arg2 + arg3) / 2^56⌋
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [0x0 ~> 0xffffffffffffff]
//   arg3: [0x0 ~> 0xffffffffffffff]
// Output Bounds:
//   out1: [0x0 ~> 0xffffffffffffff]
//   out2: [0x0 ~> 0x1]
func addcarryxU56(out1 *uint64, out2 *uint1, arg1 uint1, arg2 uint64, arg3 uint64) {
	x1 := ((uint64(arg1) + arg2) + arg3)
	x2 := (x1 & 0xffffffffffffff)
	x3 := uint1((x1 >> 56))
	*out1 = x2
	*out2 = x3
}

// subborrowxU56 is a subtraction with borrow.
//
// Postconditions:
//   out1 = (-arg1 + arg2 + -arg3) mod 2^56
//   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^56⌋
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [0x0 ~> 0xffffffffffffff]
//   arg3: [0x0 ~> 0xffffffffffffff]
// Output Bounds:
//   out1: [0x0 ~> 0xffffffffffffff]
//   out2: [0x0 ~> 0x1]
func subborrowxU56(out1 *uint64, out2 *uint1, arg1 uint1, arg2 uint64, arg3 uint64) {
	x1 := ((int64(arg2) - int64(arg1)) - int64(arg3))
	x2 := int1((x1 >> 56))
	x3 := (uint64(x1) & 0xffffffffffffff)
	*out1 = x3
	*out2 = (0x0 - uint1(x2))
}

// cmovznzU64 is a single-word conditional move.
//
// Postconditions:
//   out1 = (if arg1 = 0 then arg2 else arg3)
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [0x0 ~> 0xffffffffffffffff]
//   arg3: [0x0 ~> 0xffffffffffffffff]
// Output Bounds:
//   out1: [0x0 ~> 0xffffffffffffffff]
func cmovznzU64(out1 *uint64, arg1 uint1, arg2 uint64, arg3 uint64) {
	x1 := (uint64(arg1) * 0xffffffffffffffff)
	x2 := ((x1 & arg3) | ((^x1) & arg2))
	*out1 = x2
}

// CarryMul multiplies two field elements and reduces the result.
//
// Postconditions:
//   eval out1 mod m = (eval arg1 * eval arg2) mod m
//
func CarryMul(out1 *TightFieldElement, arg1 *LooseFieldElement, arg2 *LooseFieldElement) {
	var x1 uint64
	var x2 uint64
	x2, x1 = bits.Mul64(arg1[7], arg2[7])
	var x3 uint64
	var x4 uint64
	x4, x3 = bits.Mul64(arg1[7], arg2[6])
	var x5 uint64
	var x6 uint64
	x6, x5 = bits.Mul64(arg1[7], arg2[5])
	var x7 uint64
	var x8 uint64
	x8, x7 = bits.Mul64(arg1[6], arg2[7])
	var x9 uint64
	var x10 uint64
	x10, x9 = bits.Mul64(arg1[6], arg2[6])
	var x11 uint64
	var x12 uint64
	x12, x11 = bits.Mul64(arg1[5], arg2[7])
	var x13 uint64
	var x14 uint64
	x14, x13 = bits.Mul64(arg1[7], arg2[7])
	var x15 uint64
	var x16 uint64
	x16, x15 = bits.Mul64(arg1[7], arg2[6])
	var x17 uint64
	var x18 uint64
	x18, x17 = bits.Mul64(arg1[7], arg2[5])
	var x19 uint64
	var x20 uint64
	x20, x19 = bits.Mul64(arg1[6], arg2[7])
	var x21 uint64
	var x22 uint64
	x22, x21 = bits.Mul64(arg1[6], arg2[6])
	var x23 uint64
	var x24 uint64
	x24, x23 = bits.Mul64(arg1[5], arg2[7])
	var x25 uint64
	var x26 uint64
	x26, x25 = bits.Mul64(arg1[7], arg2[7])
	var x27 uint64
	var x28 uint64
	x28, x27 = bits.Mul64(arg1[7], arg2[6])
	var x29 uint64
	var x30 uint64
	x30, x29 = bits.Mul64(arg1[7], arg2[5])
	var x31 uint64
	var x32 uint64
	x32, x31 = bits.Mul64(arg1[7], arg2[4])
	var x33 uint64
	var x34 uint64
	x34, x33 = bits.Mul64(arg1[7], arg2[3])
	var x35 uint64
	var x36 uint64
	x36, x35 = bits.Mul64(arg1[7], arg2[2])
	var x37 uint64
	var x38 uint64
	x38, x37 = bits.Mul64(arg1[7], arg2[1])
	var x39 uint64
	var x40 uint64
	x40, x39 = bits.Mul64(arg1[6], arg2[7])
	var x41 uint64
	var x42 uint64
	x42, x41 = bits.Mul64(arg1[6], arg2[6])
	var x43 uint64
	var x44 uint64
	x44, x43 = bits.Mul64(arg1[6], arg2[5])
	var x45 uint64
	var x46 uint64
	x46, x45 = bits.Mul64(arg1[6], arg2[4])
	var x47 uint64
	var x48 uint64
	x48, x47 = bits.Mul64(arg1[6], arg2[3])
	var x49 uint64
	var x50 uint64
	x50, x49 = bits.Mul64(arg1[6], arg2[2])
	var x51 uint64
	var x52 uint64
	x52, x51 = bits.Mul64(arg1[5], arg2[7])
	var x53 uint64
	var x54 uint64
	x54, x53 = bits.Mul64(arg1[5], arg2[6])
	var x55 uint64
	var x56 uint64
	x56, x55 = bits.Mul64(arg1[5], arg2[5])
	var x57 uint64
	var x58 uint64
	x58, x57 = bits.Mul64(arg1[5], arg2[4])
	var x59 uint64
	var x60 uint64
	x60, x59 = bits.Mul64(arg1[5], arg2[3])
	var x61 uint64
	var x62 uint64
	x62, x61 = bits.Mul64(arg1[4], arg2[7])
	var x63 uint64
	var x64 uint64
	x64, x63 = bits.Mul64(arg1[4], arg2[6])
	var x65 uint64
	var x66 uint64
	x66, x65 = bits.Mul64(arg1[4], arg2[5])
	var x67 uint64
	var x68 uint64
	x68, x67 = bits.Mul64(arg1[4], arg2[4])
	var x69 uint64
	var x70 uint64
	x70, x69 = bits.Mul64(arg1[3], arg2[7])
	var x71 uint64
	var x72 uint64
	x72, x71 = bits.Mul64(arg1[3], arg2[6])
	var x73 uint64
	var x74 uint64
	x74, x73 = bits.Mul64(arg1[3], arg2[5])
	var x75 uint64
	var x76 uint64
	x76, x75 = bits.Mul64(arg1[2], arg2[7])
	var x77 uint64
	var x78 uint64
	x78, x77 = bits.Mul64(arg1[2], arg2[6])
	var x79 uint64
	var x80 uint64
	x80, x79 = bits.Mul64(arg1[1], arg2[7])
	var x81 uint64
	var x82 uint64
	x82, x81 = bits.Mul64(arg1[7], arg2[4])
	var x83 uint64
	var x84 uint64
	x84, x83 = bits.Mul64(arg1[7], arg2[3])
	var x85 uint64
	var x86 uint64
	x86, x85 = bits.Mul64(arg1[7], arg2[2])
	var x87 uint64
	var x88 uint64
	x88, x87 = bits.Mul64(arg1[7], arg2[1])
	var x89 uint64
	var x90 uint64
	x90, x89 = bits.Mul64(arg1[6], arg2[5])
	var x91 uint64
	var x92 uint64
	x92, x91 = bits.Mul64(arg1[6], arg2[4])
	var x93 uint64
	var x94 uint64
	x94, x93 = bits.Mul64(arg1[6], arg2[3])
	var x95 uint64
	var x96 uint64
	x96, x95 = bits.Mul64(arg1[6], arg2[2])
	var x97 uint64
	var x98 uint64
	x98, x97 = bits.Mul64(arg1[5], arg2[6])
	var x99 uint64
	var x100 uint64
	x100, x99 = bits.Mul64(arg1[5], arg2[5])
	var x101 uint64
	var x102 uint64
	x102, x101 = bits.Mul64(arg1[5], arg2[4])
	var x103 uint64
	var x104 uint64
	x104, x103 = bits.Mul64(arg1[5], arg2[3])
	var x105 uint64
	var x106 uint64
	x106, x105 = bits.Mul64(arg1[4], arg2[7])
	var x107 uint64
	var x108 uint64
	x108, x107 = bits.Mul64(arg1[4], arg2[6])
	var x109 uint64
	var x110 uint64
	x110, x109 = bits.Mul64(arg1[4], arg2[5])
	var x111 uint64
	var x112 uint64
	x112, x111 = bits.Mul64(arg1[4], arg2[4])
	var x113 uint64
	var x114 uint64
	x114, x113 = bits.Mul64(arg1[3], arg2[7])
	var x115 uint64
	var x116 uint64
	x116, x115 = bits.Mul64(arg1[3], arg2[6])
	var x117 uint64
	var x118 uint64
	x118, x117 = bits.Mul64(arg1[3], arg2[5])
	var x119 uint64
	var x120 uint64
	x120, x119 = bits.Mul64(arg1[2], arg2[7])
	var x121 uint64
	var x122 uint64
	x122, x121 = bits.Mul64(arg1[2], arg2[6])
	var x123 uint64
	var x124 uint64
	x124, x123 = bits.Mul64(arg1[1], arg2[7])
	var x125 uint64
	var x126 uint64
	x126, x125 = bits.Mul64(arg1[7], arg2[0])
	var x127 uint64
	var x128 uint64
	x128, x127 = bits.Mul64(arg1[6], arg2[1])
	var x129 uint64
	var x130 uint64
	x130, x129 = bits.Mul64(arg1[6], arg2[0])
	var x131 uint64
	var x132 uint64
	x132, x131 = bits.Mul64(arg1[5], arg2[2])
	var x133 uint64
	var x134 uint64
	x134, x133 = bits.Mul64(arg1[5], arg2[1])
	var x135 uint64
	var x136 uint64
	x136, x135 = bits.Mul64(arg1[5], arg2[0])
	var x137 uint64
	var x138 uint64
	x138, x137 = bits.Mul64(arg1[4], arg2[3])
	var x139 uint64
	var x140 uint64
	x140, x139 = bits.Mul64(arg1[4], arg2[2])
	var x141 uint64
	var x142 uint64
	x142, x141 = bits.Mul64(arg1[4], arg2[1])
	var x143 uint64
	var x144 uint64
	x144, x143 = bits.Mul64(arg1[4], arg2[0])
	var x145 uint64
	var x146 uint64
	x146, x145 = bits.Mul64(arg1[3], arg2[4])
	var x147 uint64
	var x148 uint64
	x148, x147 = bits.Mul64(arg1[3], arg2[3])
	var x149 uint64
	var x150 uint64
	x150, x149 = bits.Mul64(arg1[3], arg2[2])
	var x151 uint64
	var x152 uint64
	x152, x151 = bits.Mul64(arg1[3], arg2[1])
	var x153 uint64
	var x154 uint64
	x154, x153 = bits.Mul64(arg1[3], arg2[0])
	var x155 uint64
	var x156 uint64
	x156, x155 = bits.Mul64(arg1[2], arg2[5])
	var x157 uint64
	var x158 uint64
	x158, x157 = bits.Mul64(arg1[2], arg2[4])
	var x159 uint64
	var x160 uint64
	x160, x159 = bits.Mul64(arg1[2], arg2[3])
	var x161 uint64
	var x162 uint64
	x162, x161 = bits.Mul64(arg1[2], arg2[2])
	var x163 uint64
	var x164 uint64
	x164, x163 = bits.Mul64(arg1[2], arg2[1])
	var x165 uint64
	var x166 uint64
	x166, x165 = bits.Mul64(arg1[2], arg2[0])
	var x167 uint64
	var x168 uint64
	x168, x167 = bits.Mul64(arg1[1], arg2[6])
	var x169 uint64
	var x170 uint64
	x170, x169 = bits.Mul64(arg1[1], arg2[5])
	var x171 uint64
	var x172 uint64
	x172, x171 = bits.Mul64(arg1[1], arg2[4])
	var x173 uint64
	var x174 uint64
	x174, x173 = bits.Mul64(arg1[1], arg2[3])
	var x175 uint64
	var x176 uint64
	x176, x175 = bits.Mul64(arg1[1], arg2[2])
	var x177 uint64
	var x178 uint64
	x178, x177 = bits.Mul64(arg1[1], arg2[1])
	var x179 uint64
	var x180 uint64
	x180, x179 = bits.Mul64(arg1[1], arg2[0])
	var x181 uint64
	var x182 uint64
	x182, x181 = bits.Mul64(arg1[0], arg2[7])
	var x183 uint64
	var x184 uint64
	x184, x183 = bits.Mul64(arg1[0], arg2[6])
	var x185 uint64
	var x186 uint64
	x186, x185 = bits.Mul64(arg1[0], arg2[5])
	var x187 uint64
	var x188 uint64
	x188, x187 = bits.Mul64(arg1[0], arg2[4])
	var x189 uint64
	var x190 uint64
	x190, x189 = bits.Mul64(arg1[0], arg2[3])
	var x191 uint64
	var x192 uint64
	x192, x191 = bits.Mul64(arg1[0], arg2[2])
	var x193 uint64
	var x194 uint64
	x194, x193 = bits.Mul64(arg1[0], arg2[1])
	var x195 uint64
	var x196 uint64
	x196, x195 = bits.Mul64(arg1[0], arg2[0])
	var x197 uint64
	var x198 uint64
	x197, x198 = bits.Add64(x43, x31, uint64(0x0))
	var x199 uint64
	x199, _ = bits.Add64(x44, x32, uint64(uint1(x198)))
	var x201 uint64
	var x202 uint64
	x201, x202 = bits.Add64(x53, x197, uint64(0x0))
	var x203 uint64
	x203, _ = bits.Add64(x54, x199, uint64(uint1(x202)))
	var x205 uint64
	var x206 uint64
	x205, x206 = bits.Add64(x61, x201, uint64(0x0))
	var x207 uint64
	x207, _ = bits.Add64(x62, x203, uint64(uint1(x206)))
	var x209 uint64
	var x210 uint64
	x209, x210 = bits.Add64(x153, x205, uint64(0x0))
	var x211 uint64
	x211, _ = bits.Add64(x154, x207, uint64(uint1(x210)))
	var x213 uint64
	var x214 uint64
	x213, x214 = bits.Add64(x163, x209, uint64(0x0))
	var x215 uint64
	x215, _ = bits.Add64(x164, x211, uint64(uint1(x214)))
	var x217 uint64
	var x218 uint64
	x217, x218 = bits.Add64(x175, x213, uint64(0x0))
	var x219 uint64
	x219, _ = bits.Add64(x176, x215, uint64(uint1(x218)))
	var x221 uint64
	var x222 uint64
	x221, x222 = bits.Add64(x189, x217, uint64(0x0))
	var x223 uint64
	x223, _ = bits.Add64(x190, x219, uint64(uint1(x222)))
	x225 := ((x221 >> 56) | ((x223 << 8) & 0xffffffffffffffff))
	x226 := (x221 & 0xffffffffffffff)
	var x227 uint64
	var x228 uint64
	x227, x228 = bits.Add64(x89, x81, uint64(0x0))
	var x229 uint64
	x229, _ = bits.Add64(x90, x82, uint64(uint1(x228)))
	var x231 uint64
	var x232 uint64
	x231, x232 = bits.Add64(x97, x227, uint64(0x0))
	var x233 uint64
	x233, _ = bits.Add64(x98, x229, uint64(uint1(x232)))
	var x235 uint64
	var x236 uint64
	x235, x236 = bits.Add64(x105, x231, uint64(0x0))
	var x237 uint64
	x237, _ = bits.Add64(x106, x233, uint64(uint1(x236)))
	var x239 uint64
	var x240 uint64
	x239, x240 = bits.Add64(x125, x235, uint64(0x0))
	var x241 uint64
	x241, _ = bits.Add64(x126, x237, uint64(uint1(x240)))
	var x243 uint64
	var x244 uint64
	x243, x244 = bits.Add64(x127, x239, uint64(0x0))
	var x245 uint64
	x245, _ = bits.Add64(x128, x241, uint64(uint1(x244)))
	var x247 uint64
	var x248 uint64
	x247, x248 = bits.Add64(x131, x243, uint64(0x0))
	var x249 uint64
	x249, _ = bits.Add64(x132, x245, uint64(uint1(x248)))
	var x251 uint64
	var x252 uint64
	x251, x252 = bits.Add64(x137, x247, uint64(0x0))
	var x253 uint64
	x253, _ = bits.Add64(x138, x249, uint64(uint1(x252)))
	var x255 uint64
	var x256 uint64
	x255, x256 = bits.Add64(x145, x251, uint64(0x0))
	var x257 uint64
	x257, _ = bits.Add64(x146, x253, uint64(uint1(x256)))
	var x259 uint64
	var x260 uint64
	x259, x260 = bits.Add64(x155, x255, uint64(0x0))
	var x261 uint64
	x261, _ = bits.Add64(x156, x257, uint64(uint1(x260)))
	var x263 uint64
	var x264 uint64
	x263, x264 = bits.Add64(x167, x259, uint64(0x0))
	var x265 uint64
	x265, _ = bits.Add64(x168, x261, uint64(uint1(x264)))
	var x267 uint64
	var x268 uint64
	x267, x268 = bits.Add64(x181, x263, uint64(0x0))
	var x269 uint64
	x269, _ = bits.Add64(x182, x265, uint64(uint1(x268)))
	var x271 uint64
	var x272 uint64
	x271, x272 = bits.Add64(x25, x13, uint64(0x0))
	var x273 uint64
	x273, _ = bits.Add64(x26, x14, uint64(uint1(x272)))
	var x275 uint64
	var x276 uint64
	x275, x276 = bits.Add64(x83, x271, uint64(0x0))
	var x277 uint64
	x277, _ = bits.Add64(x84, x273, uint64(uint1(x276)))
	var x279 uint64
	var x280 uint64
	x279, x280 = bits.Add64(x91, x275, uint64(0x0))
	var x281 uint64
	x281, _ = bits.Add64(x92, x277, uint64(uint1(x280)))
	var x283 uint64
	var x284 uint64
	x283, x284 = bits.Add64(x99, x279, uint64(0x0))
	var x285 uint64
	x285, _ = bits.Add64(x100, x281, uint64(uint1(x284)))
	var x287 uint64
	var x288 uint64
	x287, x288 = bits.Add64(x107, x283, uint64(0x0))
	var x289 uint64
	x289, _ = bits.Add64(x108, x285, uint64(uint1(x288)))
	var x291 uint64
	var x292 uint64
	x291, x292 = bits.Add64(x113, x287, uint64(0x0))
	var x293 uint64
	x293, _ = bits.Add64(x114, x289, uint64(uint1(x292)))
	var x295 uint64
	var x296 uint64
	x295, x296 = bits.Add64(x129, x291, uint64(0x0))
	var x297 uint64
	x297, _ = bits.Add64(x130, x293, uint64(uint1(x296)))
	var x299 uint64
	var x300 uint64
	x299, x300 = bits.Add64(x133, x295, uint64(0x0))
	var x301 uint64
	x301, _ = bits.Add64(x134, x297, uint64(uint1(x300)))
	var x303 uint64
	var x304 uint64
	x303, x304 = bits.Add64(x139, x299, uint64(0x0))
	var x305 uint64
	x305, _ = bits.Add64(x140, x301, uint64(uint1(x304)))
	var x307 uint64
	var x308 uint64
	x307, x308 = bits.Add64(x147, x303, uint64(0x0))
	var x309 uint64
	x309, _ = bits.Add64(x148, x305, uint64(uint1(x308)))
	var x311 uint64
	var x312 uint64
	x311, x312 = bits.Add64(x157, x307, uint64(0x0))
	var x313 uint64
	x313, _ = bits.Add64(x158, x309, uint64(uint1(x312)))
	var x315 uint64
	var x316 uint64
	x315, x316 = bits.Add64(x169, x311, uint64(0x0))
	var x317 uint64
	x317, _ = bits.Add64(x170, x313, uint64(uint1(x316)))
	var x319 uint64
	var x320 uint64
	x319, x320 = bits.Add64(x183, x315, uint64(0x0))
	var x321 uint64
	x321, _ = bits.Add64(x184, x317, uint64(uint1(x320)))
	var x323 uint64
	var x324 uint64
	x323, x324 = bits.Add64(x19, x15, uint64(0x0))
	var x325 uint64
	x325, _ = bits.Add64(x20, x16, uint64(uint1(x324)))
	var x327 uint64
	var x328 uint64
	x327, x328 = bits.Add64(x27, x323, uint64(0x0))
	var x329 uint64
	x329, _ = bits.Add64(x28, x325, uint64(uint1(x328)))
	var x331 uint64
	var x332 uint64
	x331, x332 = bits.Add64(x39, x327, uint64(0x0))
	var x333 uint64
	x333, _ = bits.Add64(x40, x329, uint64(uint1(x332)))
	var x335 uint64
	var x336 uint64
	x335, x336 = bits.Add64(x85, x331, uint64(0x0))
	var x337 uint64
	x337, _ = bits.Add64(x86, x333, uint64(uint1(x336)))
	var x339 uint64
	var x340 uint64
	x339, x340 = bits.Add64(x93, x335, uint64(0x0))
	var x341 uint64
	x341, _ = bits.Add64(x94, x337, uint64(uint1(x340)))
	var x343 uint64
	var x344 uint64
	x343, x344 = bits.Add64(x101, x339, uint64(0x0))
	var x345 uint64
	x345, _ = bits.Add64(x102, x341, uint64(uint1(x344)))
	var x347 uint64
	var x348 uint64
	x347, x348 = bits.Add64(x109, x343, uint64(0x0))
	var x349 uint64
	x349, _ = bits.Add64(x110, x345, uint64(uint1(x348)))
	var x351 uint64
	var x352 uint64
	x351, x352 = bits.Add64(x115, x347, uint64(0x0))
	var x353 uint64
	x353, _ = bits.Add64(x116, x349, uint64(uint1(x352)))
	var x355 uint64
	var x356 uint64
	x355, x356 = bits.Add64(x119, x351, uint64(0x0))
	var x357 uint64
	x357, _ = bits.Add64(x120, x353, uint64(uint1(x356)))
	var x359 uint64
	var x360 uint64
	x359, x360 = bits.Add64(x135, x355, uint64(0x0))
	var x361 uint64
	x361, _ = bits.Add64(x136, x357, uint64(uint1(x360)))
	var x363 uint64
	var x364 uint64
	x363, x364 = bits.Add64(x141, x359, uint64(0x0))
	var x365 uint64
	x365, _ = bits.Add64(x142, x361, uint64(uint1(x364)))
	var x367 uint64
	var x368 uint64
	x367, x368 = bits.Add64(x149, x363, uint64(0x0))
	var x369 uint64
	x369, _ = bits.Add64(x150, x365, uint64(uint1(x368)))
	var x371 uint64
	var x372 uint64
	x371, x372 = bits.Add64(x159, x367, uint64(0x0))
	var x373 uint64
	x373, _ = bits.Add64(x160, x369, uint64(uint1(x372)))
	var x375 uint64
	var x376 uint64
	x375, x376 = bits.Add64(x171, x371, uint64(0x0))
	var x377 uint64
	x377, _ = bits.Add64(x172, x373, uint64(uint1(x376)))
	var x379 uint64
	var x380 uint64
	x379, x380 = bits.Add64(x185, x375, uint64(0x0))
	var x381 uint64
	x381, _ = bits.Add64(x186, x377, uint64(uint1(x380)))
	var x383 uint64
	var x384 uint64
	x383, x384 = bits.Add64(x21, x17, uint64(0x0))
	var x385 uint64
	x385, _ = bits.Add64(x22, x18, uint64(uint1(x384)))
	var x387 uint64
	var x388 uint64
	x387, x388 = bits.Add64(x23, x383, uint64(0x0))
	var x389 uint64
	x389, _ = bits.Add64(x24, x385, uint64(uint1(x388)))
	var x391 uint64
	var x392 uint64
	x391, x392 = bits.Add64(x29, x387, uint64(0x0))
	var x393 uint64
	x393, _ = bits.Add64(x30, x389, uint64(uint1(x392)))
	var x395 uint64
	var x396 uint64
	x395, x396 = bits.Add64(x41, x391, uint64(0x0))
	var x397 uint64
	x397, _ = bits.Add64(x42, x393, uint64(uint1(x396)))
	var x399 uint64
	var x400 uint64
	x399, x400 = bits.Add64(x51, x395, uint64(0x0))
	var x401 uint64
	x401, _ = bits.Add64(x52, x397, uint64(uint1(x400)))
	var x403 uint64
	var x404 uint64
	x403, x404 = bits.Add64(x87, x399, uint64(0x0))
	var x405 uint64
	x405, _ = bits.Add64(x88, x401, uint64(uint1(x404)))
	var x407 uint64
	var x408 uint64
	x407, x408 = bits.Add64(x95, x403, uint64(0x0))
	var x409 uint64
	x409, _ = bits.Add64(x96, x405, uint64(uint1(x408)))
	var x411 uint64
	var x412 uint64
	x411, x412 = bits.Add64(x103, x407, uint64(0x0))
	var x413 uint64
	x413, _ = bits.Add64(x104, x409, uint64(uint1(x412)))
	var x415 uint64
	var x416 uint64
	x415, x416 = bits.Add64(x111, x411, uint64(0x0))
	var x417 uint64
	x417, _ = bits.Add64(x112, x413, uint64(uint1(x416)))
	var x419 uint64
	var x420 uint64
	x419, x420 = bits.Add64(x117, x415, uint64(0x0))
	var x421 uint64
	x421, _ = bits.Add64(x118, x417, uint64(uint1(x420)))
	var x423 uint64
	var x424 uint64
	x423, x424 = bits.Add64(x121, x419, uint64(0x0))
	var x425 uint64
	x425, _ = bits.Add64(x122, x421, uint64(uint1(x424)))
	var x427 uint64
	var x428 uint64
	x427, x428 = bits.Add64(x123, x423, uint64(0x0))
	var x429 uint64
	x429, _ = bits.Add64(x124, x425, uint64(uint1(x428)))
	var x431 uint64
	var x432 uint64
	x431, x432 = bits.Add64(x143, x427, uint64(0x0))
	var x433 uint64
	x433, _ = bits.Add64(x144, x429, uint64(uint1(x432)))
	var x435 uint64
	var x436 uint64
	x435, x436 = bits.Add64(x151, x431, uint64(0x0))
	var x437 uint64
	x437, _ = bits.Add64(x152, x433, uint64(uint1(x436)))
	var x439 uint64
	var x440 uint64
	x439, x440 = bits.Add64(x161, x435, uint64(0x0))
	var x441 uint64
	x441, _ = bits.Add64(x162, x437, uint64(uint1(x440)))
	var x443 uint64
	var x444 uint64
	x443, x444 = bits.Add64(x173, x439, uint64(0x0))
	var x445 uint64
	x445, _ = bits.Add64(x174, x441, uint64(uint1(x444)))
	var x447 uint64
	var x448 uint64
	x447, x448 = bits.Add64(x187, x443, uint64(0x0))
	var x449 uint64
	x449, _ = bits.Add64(x188, x445, uint64(uint1(x448)))
	var x451 uint64
	var x452 uint64
	x451, x452 = bits.Add64(x33, x1, uint64(0x0))
	var x453 uint64
	x453, _ = bits.Add64(x34, x2, uint64(uint1(x452)))
	var x455 uint64
	var x456 uint64
	x455, x456 = bits.Add64(x45, x451, uint64(0x0))
	var x457 uint64
	x457, _ = bits.Add64(x46, x453, uint64(uint1(x456)))
	var x459 uint64
	var x460 uint64
	x459, x460 = bits.Add64(x55, x455, uint64(0x0))
	var x461 uint64
	x461, _ = bits.Add64(x56, x457, uint64(uint1(x460)))
	var x463 uint64
	var x464 uint64
	x463, x464 = bits.Add64(x63, x459, uint64(0x0))
	var x465 uint64
	x465, _ = bits.Add64(x64, x461, uint64(uint1(x464)))
	var x467 uint64
	var x468 uint64
	x467, x468 = bits.Add64(x69, x463, uint64(0x0))
	var x469 uint64
	x469, _ = bits.Add64(x70, x465, uint64(uint1(x468)))
	var x471 uint64
	var x472 uint64
	x471, x472 = bits.Add64(x165, x467, uint64(0x0))
	var x473 uint64
	x473, _ = bits.Add64(x166, x469, uint64(uint1(x472)))
	var x475 uint64
	var x476 uint64
	x475, x476 = bits.Add64(x177, x471, uint64(0x0))
	var x477 uint64
	x477, _ = bits.Add64(x178, x473, uint64(uint1(x476)))
	var x479 uint64
	var x480 uint64
	x479, x480 = bits.Add64(x191, x475, uint64(0x0))
	var x481 uint64
	x481, _ = bits.Add64(x192, x477, uint64(uint1(x480)))
	var x483 uint64
	var x484 uint64
	x483, x484 = bits.Add64(x7, x3, uint64(0x0))
	var x485 uint64
	x485, _ = bits.Add64(x8, x4, uint64(uint1(x484)))
	var x487 uint64
	var x488 uint64
	x487, x488 = bits.Add64(x35, x483, uint64(0x0))
	var x489 uint64
	x489, _ = bits.Add64(x36, x485, uint64(uint1(x488)))
	var x491 uint64
	var x492 uint64
	x491, x492 = bits.Add64(x47, x487, uint64(0x0))
	var x493 uint64
	x493, _ = bits.Add64(x48, x489, uint64(uint1(x492)))
	var x495 uint64
	var x496 uint64
	x495, x496 = bits.Add64(x57, x491, uint64(0x0))
	var x497 uint64
	x497, _ = bits.Add64(x58, x493, uint64(uint1(x496)))
	var x499 uint64
	var x500 uint64
	x499, x500 = bits.Add64(x65, x495, uint64(0x0))
	var x501 uint64
	x501, _ = bits.Add64(x66, x497, uint64(uint1(x500)))
	var x503 uint64
	var x504 uint64
	x503, x504 = bits.Add64(x71, x499, uint64(0x0))
	var x505 uint64
	x505, _ = bits.Add64(x72, x501, uint64(uint1(x504)))
	var x507 uint64
	var x508 uint64
	x507, x508 = bits.Add64(x75, x503, uint64(0x0))
	var x509 uint64
	x509, _ = bits.Add64(x76, x505, uint64(uint1(x508)))
	var x511 uint64
	var x512 uint64
	x511, x512 = bits.Add64(x179, x507, uint64(0x0))
	var x513 uint64
	x513, _ = bits.Add64(x180, x509, uint64(uint1(x512)))
	var x515 uint64
	var x516 uint64
	x515, x516 = bits.Add64(x193, x511, uint64(0x0))
	var x517 uint64
	x517, _ = bits.Add64(x194, x513, uint64(uint1(x516)))
	var x519 uint64
	var x520 uint64
	x519, x520 = bits.Add64(x9, x5, uint64(0x0))
	var x521 uint64
	x521, _ = bits.Add64(x10, x6, uint64(uint1(x520)))
	var x523 uint64
	var x524 uint64
	x523, x524 = bits.Add64(x11, x519, uint64(0x0))
	var x525 uint64
	x525, _ = bits.Add64(x12, x521, uint64(uint1(x524)))
	var x527 uint64
	var x528 uint64
	x527, x528 = bits.Add64(x37, x523, uint64(0x0))
	var x529 uint64
	x529, _ = bits.Add64(x38, x525, uint64(uint1(x528)))
	var x531 uint64
	var x532 uint64
	x531, x532 = bits.Add64(x49, x527, uint64(0x0))
	var x533 uint64
	x533, _ = bits.Add64(x50, x529, uint64(uint1(x532)))
	var x535 uint64
	var x536 uint64
	x535, x536 = bits.Add64(x59, x531, uint64(0x0))
	var x537 uint64
	x537, _ = bits.Add64(x60, x533, uint64(uint1(x536)))
	var x539 uint64
	var x540 uint64
	x539, x540 = bits.Add64(x67, x535, uint64(0x0))
	var x541 uint64
	x541, _ = bits.Add64(x68, x537, uint64(uint1(x540)))
	var x543 uint64
	var x544 uint64
	x543, x544 = bits.Add64(x73, x539, uint64(0x0))
	var x545 uint64
	x545, _ = bits.Add64(x74, x541, uint64(uint1(x544)))
	var x547 uint64
	var x548 uint64
	x547, x548 = bits.Add64(x77, x543, uint64(0x0))
	var x549 uint64
	x549, _ = bits.Add64(x78, x545, uint64(uint1(x548)))
	var x551 uint64
	var x552 uint64
	x551, x552 = bits.Add64(x79, x547, uint64(0x0))
	var x553 uint64
	x553, _ = bits.Add64(x80, x549, uint64(uint1(x552)))
	var x555 uint64
	var x556 uint64
	x555, x556 = bits.Add64(x195, x551, uint64(0x0))
	var x557 uint64
	x557, _ = bits.Add64(x196, x553, uint64(uint1(x556)))
	var x559 uint64
	var x560 uint64
	x559, x560 = bits.Add64(x225, x447, uint64(0x0))
	x561 := (uint64(uint1(x560)) + x449)
	x562 := ((x267 >> 56) | ((x269 << 8) & 0xffffffffffffffff))
	x563 := (x267 & 0xffffffffffffff)
	var x564 uint64
	var x565 uint64
	x564, x565 = bits.Add64(x559, x562, uint64(0x0))
	x566 := (uint64(uint1(x565)) + x561)
	x567 := ((x564 >> 56) | ((x566 << 8) & 0xffffffffffffffff))
	x568 := (x564 & 0xffffffffffffff)
	var x569 uint64
	var x570 uint64
	x569, x570 = bits.Add64(x555, x562, uint64(0x0))
	x571 := (uint64(uint1(x570)) + x557)
	var x572 uint64
	var x573 uint64
	x572, x573 = bits.Add64(x567, x379, uint64(0x0))
	x574 := (uint64(uint1(x573)) + x381)
	x575 := ((x569 >> 56) | ((x571 << 8) & 0xffffffffffffffff))
	x576 := (x569 & 0xffffffffffffff)
	var x577 uint64
	var x578 uint64
	x577, x578 = bits.Add64(x575, x515, uint64(0x0))
	x579 := (uint64(uint1(x578)) + x517)
	x580 := ((x572 >> 56) | ((x574 << 8) & 0xffffffffffffffff))
	x581 := (x572 & 0xffffffffffffff)
	var x582 uint64
	var x583 uint64
	x582, x583 = bits.Add64(x580, x319, uint64(0x0))
	x584 := (uint64(uint1(x583)) + x321)
	x585 := ((x577 >> 56) | ((x579 << 8) & 0xffffffffffffffff))
	x586 := (x577 & 0xffffffffffffff)
	var x587 uint64
	var x588 uint64
	x587, x588 = bits.Add64(x585, x479, uint64(0x0))
	x589 := (uint64(uint1(x588)) + x481)
	x590 := ((x582 >> 56) | ((x584 << 8) & 0xffffffffffffffff))
	x591 := (x582 & 0xffffffffffffff)
	x592 := (x590 + x563)
	x593 := ((x587 >> 56) | ((x589 << 8) & 0xffffffffffffffff))
	x594 := (x587 & 0xffffffffffffff)
	x595 := (x593 + x226)
	x596 := (x592 >> 56)
	x597 := (x592 & 0xffffffffffffff)
	x598 := (x595 >> 56)
	x599 := (x595 & 0xffffffffffffff)
	x600 := (x568 + x596)
	x601 := (x576 + x596)
	x602 := (x598 + x600)
	x603 := uint1((x602 >> 56))
	x604 := (x602 & 0xffffffffffffff)
	x605 := (uint64(x603) + x581)
	x606 := uint1((x601 >> 56))
	x607 := (x601 & 0xffffffffffffff)
	x608 := (uint64(x606) + x586)
	out1[0] = x607
	out1[1] = x608
	out1[2] = x594
	out1[3] = x599
	out1[4] = x604
	out1[5] = x605
	out1[6] = x591
	out1[7] = x597
}

// CarrySquare squares a field element and reduces the result.
//
// Postconditions:
//   eval out1 mod m = (eval arg1 * eval arg1) mod m
//
func CarrySquare(out1 *TightFieldElement, arg1 *LooseFieldElement) {
	x1 := arg1[7]
	x2 := arg1[7]
	x3 := (x1 * 0x2)
	x4 := (x2 * 0x2)
	x5 := (arg1[7] * 0x2)
	x6 := arg1[6]
	x7 := arg1[6]
	x8 := (x6 * 0x2)
	x9 := (x7 * 0x2)
	x10 := (arg1[6] * 0x2)
	x11 := arg1[5]
	x12 := arg1[5]
	x13 := (x11 * 0x2)
	x14 := (x12 * 0x2)
	x15 := (arg1[5] * 0x2)
	x16 := arg1[4]
	x17 := arg1[4]
	x18 := (arg1[4] * 0x2)
	x19 := (arg1[3] * 0x2)
	x20 := (arg1[2] * 0x2)
	x21 := (arg1[1] * 0x2)
	var x22 uint64
	var x23 uint64
	x23, x22 = bits.Mul64(arg1[7], x1)
	var x24 uint64
	var x25 uint64
	x25, x24 = bits.Mul64(arg1[6], x3)
	var x26 uint64
	var x27 uint64
	x27, x26 = bits.Mul64(arg1[6], x6)
	var x28 uint64
	var x29 uint64
	x29, x28 = bits.Mul64(arg1[5], x3)
	var x30 uint64
	var x31 uint64
	x31, x30 = bits.Mul64(arg1[7], x1)
	var x32 uint64
	var x33 uint64
	x33, x32 = bits.Mul64(arg1[6], x3)
	var x34 uint64
	var x35 uint64
	x35, x34 = bits.Mul64(arg1[6], x6)
	var x36 uint64
	var x37 uint64
	x37, x36 = bits.Mul64(arg1[5], x3)
	var x38 uint64
	var x39 uint64
	x39, x38 = bits.Mul64(arg1[7], x2)
	var x40 uint64
	var x41 uint64
	x41, x40 = bits.Mul64(arg1[6], x4)
	var x42 uint64
	var x43 uint64
	x43, x42 = bits.Mul64(arg1[6], x7)
	var x44 uint64
	var x45 uint64
	x45, x44 = bits.Mul64(arg1[5], x4)
	var x46 uint64
	var x47 uint64
	x47, x46 = bits.Mul64(arg1[5], x9)
	var x48 uint64
	var x49 uint64
	x49, x48 = bits.Mul64(arg1[5], x8)
	var x50 uint64
	var x51 uint64
	x51, x50 = bits.Mul64(arg1[5], x12)
	var x52 uint64
	var x53 uint64
	x53, x52 = bits.Mul64(arg1[5], x11)
	var x54 uint64
	var x55 uint64
	x55, x54 = bits.Mul64(arg1[4], x4)
	var x56 uint64
	var x57 uint64
	x57, x56 = bits.Mul64(arg1[4], x3)
	var x58 uint64
	var x59 uint64
	x59, x58 = bits.Mul64(arg1[4], x9)
	var x60 uint64
	var x61 uint64
	x61, x60 = bits.Mul64(arg1[4], x8)
	var x62 uint64
	var x63 uint64
	x63, x62 = bits.Mul64(arg1[4], x14)
	var x64 uint64
	var x65 uint64
	x65, x64 = bits.Mul64(arg1[4], x13)
	var x66 uint64
	var x67 uint64
	x67, x66 = bits.Mul64(arg1[4], x17)
	var x68 uint64
	var x69 uint64
	x69, x68 = bits.Mul64(arg1[4], x16)
	var x70 uint64
	var x71 uint64
	x71, x70 = bits.Mul64(arg1[3], x4)
	var x72 uint64
	var x73 uint64
	x73, x72 = bits.Mul64(arg1[3], x3)
	var x74 uint64
	var x75 uint64
	x75, x74 = bits.Mul64(arg1[3], x9)
	var x76 uint64
	var x77 uint64
	x77, x76 = bits.Mul64(arg1[3], x8)
	var x78 uint64
	var x79 uint64
	x79, x78 = bits.Mul64(arg1[3], x14)
	var x80 uint64
	var x81 uint64
	x81, x80 = bits.Mul64(arg1[3], x13)
	var x82 uint64
	var x83 uint64
	x83, x82 = bits.Mul64(arg1[3], x18)
	var x84 uint64
	var x85 uint64
	x85, x84 = bits.Mul64(arg1[3], arg1[3])
	var x86 uint64
	var x87 uint64
	x87, x86 = bits.Mul64(arg1[2], x4)
	var x88 uint64
	var x89 uint64
	x89, x88 = bits.Mul64(arg1[2], x3)
	var x90 uint64
	var x91 uint64
	x91, x90 = bits.Mul64(arg1[2], x9)
	var x92 uint64
	var x93 uint64
	x93, x92 = bits.Mul64(arg1[2], x8)
	var x94 uint64
	var x95 uint64
	x95, x94 = bits.Mul64(arg1[2], x15)
	var x96 uint64
	var x97 uint64
	x97, x96 = bits.Mul64(arg1[2], x18)
	var x98 uint64
	var x99 uint64
	x99, x98 = bits.Mul64(arg1[2], x19)
	var x100 uint64
	var x101 uint64
	x101, x100 = bits.Mul64(arg1[2], arg1[2])
	var x102 uint64
	var x103 uint64
	x103, x102 = bits.Mul64(arg1[1], x4)
	var x104 uint64
	var x105 uint64
	x105, x104 = bits.Mul64(arg1[1], x3)
	var x106 uint64
	var x107 uint64
	x107, x106 = bits.Mul64(arg1[1], x10)
	var x108 uint64
	var x109 uint64
	x109, x108 = bits.Mul64(arg1[1], x15)
	var x110 uint64
	var x111 uint64
	x111, x110 = bits.Mul64(arg1[1], x18)
	var x112 uint64
	var x113 uint64
	x113, x112 = bits.Mul64(arg1[1], x19)
	var x114 uint64
	var x115 uint64
	x115, x114 = bits.Mul64(arg1[1], x20)
	var x116 uint64
	var x117 uint64
	x117, x116 = bits.Mul64(arg1[1], arg1[1])
	var x118 uint64
	var x119 uint64
	x119, x118 = bits.Mul64(arg1[0], x5)
	var x120 uint64
	var x121 uint64
	x121, x120 = bits.Mul64(arg1[0], x10)
	var x122 uint64
	var x123 uint64
	x123, x122 = bits.Mul64(arg1[0], x15)
	var x124 uint64
	var x125 uint64
	x125, x124 = bits.Mul64(arg1[0], x18)
	var x126 uint64
	var x127 uint64
	x127, x126 = bits.Mul64(arg1[0], x19)
	var x128 uint64
	var x129 uint64
	x129, x128 = bits.Mul64(arg1[0], x20)
	var x130 uint64
	var x131 uint64
	x131, x130 = bits.Mul64(arg1[0], x21)
	var x132 uint64
	var x133 uint64
	x133, x132 = bits.Mul64(arg1[0], arg1[0])
	var x134 uint64
	var x135 uint64
	x134, x135 = bits.Add64(x54, x46, uint64(0x0))
	var x136 uint64
	x136, _ = bits.Add64(x55, x47, uint64(uint1(x135)))
	var x138 uint64
	var x139 uint64
	x138, x139 = bits.Add64(x114, x134, uint64(0x0))
	var x140 uint64
	x140, _ = bits.Add64(x115, x136, uint64(uint1(x139)))
	var x142 uint64
	var x143 uint64
	x142, x143 = bits.Add64(x126, x138, uint64(0x0))
	var x144 uint64
	x144, _ = bits.Add64(x127, x140, uint64(uint1(x143)))
	x146 := ((x142 >> 56) | ((x144 << 8) & 0xffffffffffffffff))
	x147 := (x142 & 0xffffffffffffff)
	var x148 uint64
	var x149 uint64
	x148, x149 = bits.Add64(x56, x48, uint64(0x0))
	var x150 uint64
	x150, _ = bits.Add64(x57, x49, uint64(uint1(x149)))
	var x152 uint64
	var x153 uint64
	x152, x153 = bits.Add64(x82, x148, uint64(0x0))
	var x154 uint64
	x154, _ = bits.Add64(x83, x150, uint64(uint1(x153)))
	var x156 uint64
	var x157 uint64
	x156, x157 = bits.Add64(x94, x152, uint64(0x0))
	var x158 uint64
	x158, _ = bits.Add64(x95, x154, uint64(uint1(x157)))
	var x160 uint64
	var x161 uint64
	x160, x161 = bits.Add64(x106, x156, uint64(0x0))
	var x162 uint64
	x162, _ = bits.Add64(x107, x158, uint64(uint1(x161)))
	var x164 uint64
	var x165 uint64
	x164, x165 = bits.Add64(x118, x160, uint64(0x0))
	var x166 uint64
	x166, _ = bits.Add64(x119, x162, uint64(uint1(x165)))
	var x168 uint64
	var x169 uint64
	x168, x169 = bits.Add64(x38, x30, uint64(0x0))
	var x170 uint64
	x170, _ = bits.Add64(x39, x31, uint64(uint1(x169)))
	var x172 uint64
	var x173 uint64
	x172, x173 = bits.Add64(x52, x168, uint64(0x0))
	var x174 uint64
	x174, _ = bits.Add64(x53, x170, uint64(uint1(x173)))
	var x176 uint64
	var x177 uint64
	x176, x177 = bits.Add64(x60, x172, uint64(0x0))
	var x178 uint64
	x178, _ = bits.Add64(x61, x174, uint64(uint1(x177)))
	var x180 uint64
	var x181 uint64
	x180, x181 = bits.Add64(x72, x176, uint64(0x0))
	var x182 uint64
	x182, _ = bits.Add64(x73, x178, uint64(uint1(x181)))
	var x184 uint64
	var x185 uint64
	x184, x185 = bits.Add64(x84, x180, uint64(0x0))
	var x186 uint64
	x186, _ = bits.Add64(x85, x182, uint64(uint1(x185)))
	var x188 uint64
	var x189 uint64
	x188, x189 = bits.Add64(x96, x184, uint64(0x0))
	var x190 uint64
	x190, _ = bits.Add64(x97, x186, uint64(uint1(x189)))
	var x192 uint64
	var x193 uint64
	x192, x193 = bits.Add64(x108, x188, uint64(0x0))
	var x194 uint64
	x194, _ = bits.Add64(x109, x190, uint64(uint1(x193)))
	var x196 uint64
	var x197 uint64
	x196, x197 = bits.Add64(x120, x192, uint64(0x0))
	var x198 uint64
	x198, _ = bits.Add64(x121, x194, uint64(uint1(x197)))
	var x200 uint64
	var x201 uint64
	x200, x201 = bits.Add64(x40, x32, uint64(0x0))
	var x202 uint64
	x202, _ = bits.Add64(x41, x33, uint64(uint1(x201)))
	var x204 uint64
	var x205 uint64
	x204, x205 = bits.Add64(x64, x200, uint64(0x0))
	var x206 uint64
	x206, _ = bits.Add64(x65, x202, uint64(uint1(x205)))
	var x208 uint64
	var x209 uint64
	x208, x209 = bits.Add64(x76, x204, uint64(0x0))
	var x210 uint64
	x210, _ = bits.Add64(x77, x206, uint64(uint1(x209)))
	var x212 uint64
	var x213 uint64
	x212, x213 = bits.Add64(x88, x208, uint64(0x0))
	var x214 uint64
	x214, _ = bits.Add64(x89, x210, uint64(uint1(x213)))
	var x216 uint64
	var x217 uint64
	x216, x217 = bits.Add64(x98, x212, uint64(0x0))
	var x218 uint64
	x218, _ = bits.Add64(x99, x214, uint64(uint1(x217)))
	var x220 uint64
	var x221 uint64
	x220, x221 = bits.Add64(x110, x216, uint64(0x0))
	var x222 uint64
	x222, _ = bits.Add64(x111, x218, uint64(uint1(x221)))
	var x224 uint64
	var x225 uint64
	x224, x225 = bits.Add64(x122, x220, uint64(0x0))
	var x226 uint64
	x226, _ = bits.Add64(x123, x222, uint64(uint1(x225)))
	var x228 uint64
	var x229 uint64
	x228, x229 = bits.Add64(x36, x34, uint64(0x0))
	var x230 uint64
	x230, _ = bits.Add64(x37, x35, uint64(uint1(x229)))
	var x232 uint64
	var x233 uint64
	x232, x233 = bits.Add64(x42, x228, uint64(0x0))
	var x234 uint64
	x234, _ = bits.Add64(x43, x230, uint64(uint1(x233)))
	var x236 uint64
	var x237 uint64
	x236, x237 = bits.Add64(x44, x232, uint64(0x0))
	var x238 uint64
	x238, _ = bits.Add64(x45, x234, uint64(uint1(x237)))
	var x240 uint64
	var x241 uint64
	x240, x241 = bits.Add64(x68, x236, uint64(0x0))
	var x242 uint64
	x242, _ = bits.Add64(x69, x238, uint64(uint1(x241)))
	var x244 uint64
	var x245 uint64
	x244, x245 = bits.Add64(x80, x240, uint64(0x0))
	var x246 uint64
	x246, _ = bits.Add64(x81, x242, uint64(uint1(x245)))
	var x248 uint64
	var x249 uint64
	x248, x249 = bits.Add64(x92, x244, uint64(0x0))
	var x250 uint64
	x250, _ = bits.Add64(x93, x246, uint64(uint1(x249)))
	var x252 uint64
	var x253 uint64
	x252, x253 = bits.Add64(x100, x248, uint64(0x0))
	var x254 uint64
	x254, _ = bits.Add64(x101, x250, uint64(uint1(x253)))
	var x256 uint64
	var x257 uint64
	x256, x257 = bits.Add64(x104, x252, uint64(0x0))
	var x258 uint64
	x258, _ = bits.Add64(x105, x254, uint64(uint1(x257)))
	var x260 uint64
	var x261 uint64
	x260, x261 = bits.Add64(x112, x256, uint64(0x0))
	var x262 uint64
	x262, _ = bits.Add64(x113, x258, uint64(uint1(x261)))
	var x264 uint64
	var x265 uint64
	x264, x265 = bits.Add64(x124, x260, uint64(0x0))
	var x266 uint64
	x266, _ = bits.Add64(x125, x262, uint64(uint1(x265)))
	var x268 uint64
	var x269 uint64
	x268, x269 = bits.Add64(x50, x22, uint64(0x0))
	var x270 uint64
	x270, _ = bits.Add64(x51, x23, uint64(uint1(x269)))
	var x272 uint64
	var x273 uint64
	x272, x273 = bits.Add64(x58, x268, uint64(0x0))
	var x274 uint64
	x274, _ = bits.Add64(x59, x270, uint64(uint1(x273)))
	var x276 uint64
	var x277 uint64
	x276, x277 = bits.Add64(x70, x272, uint64(0x0))
	var x278 uint64
	x278, _ = bits.Add64(x71, x274, uint64(uint1(x277)))
	var x280 uint64
	var x281 uint64
	x280, x281 = bits.Add64(x116, x276, uint64(0x0))
	var x282 uint64
	x282, _ = bits.Add64(x117, x278, uint64(uint1(x281)))
	var x284 uint64
	var x285 uint64
	x284, x285 = bits.Add64(x128, x280, uint64(0x0))
	var x286 uint64
	x286, _ = bits.Add64(x129, x282, uint64(uint1(x285)))
	var x288 uint64
	var x289 uint64
	x288, x289 = bits.Add64(x62, x24, uint64(0x0))
	var x290 uint64
	x290, _ = bits.Add64(x63, x25, uint64(uint1(x289)))
	var x292 uint64
	var x293 uint64
	x292, x293 = bits.Add64(x74, x288, uint64(0x0))
	var x294 uint64
	x294, _ = bits.Add64(x75, x290, uint64(uint1(x293)))
	var x296 uint64
	var x297 uint64
	x296, x297 = bits.Add64(x86, x292, uint64(0x0))
	var x298 uint64
	x298, _ = bits.Add64(x87, x294, uint64(uint1(x297)))
	var x300 uint64
	var x301 uint64
	x300, x301 = bits.Add64(x130, x296, uint64(0x0))
	var x302 uint64
	x302, _ = bits.Add64(x131, x298, uint64(uint1(x301)))
	var x304 uint64
	var x305 uint64
	x304, x305 = bits.Add64(x28, x26, uint64(0x0))
	var x306 uint64
	x306, _ = bits.Add64(x29, x27, uint64(uint1(x305)))
	var x308 uint64
	var x309 uint64
	x308, x309 = bits.Add64(x66, x304, uint64(0x0))
	var x310 uint64
	x310, _ = bits.Add64(x67, x306, uint64(uint1(x309)))
	var x312 uint64
	var x313 uint64
	x312, x313 = bits.Add64(x78, x308, uint64(0x0))
	var x314 uint64
	x314, _ = bits.Add64(x79, x310, uint64(uint1(x313)))
	var x316 uint64
	var x317 uint64
	x316, x317 = bits.Add64(x90, x312, uint64(0x0))
	var x318 uint64
	x318, _ = bits.Add64(x91, x314, uint64(uint1(x317)))
	var x320 uint64
	var x321 uint64
	x320, x321 = bits.Add64(x102, x316, uint64(0x0))
	var x322 uint64
	x322, _ = bits.Add64(x103, x318, uint64(uint1(x321)))
	var x324 uint64
	var x325 uint64
	x324, x325 = bits.Add64(x132, x320, uint64(0x0))
	var x326 uint64
	x326, _ = bits.Add64(x133, x322, uint64(uint1(x325)))
	var x328 uint64
	var x329 uint64
	x328, x329 = bits.Add64(x146, x264, uint64(0x0))
	x330 := (uint64(uint1(x329)) + x266)
	x331 := ((x164 >> 56) | ((x166 << 8) & 0xffffffffffffffff))
	x332 := (x164 & 0xffffffffffffff)
	var x333 uint64
	var x334 uint64
	x333, x334 = bits.Add64(x328, x331, uint64(0x0))
	x335 := (uint64(uint1(x334)) + x330)
	x336 := ((x333 >> 56) | ((x335 << 8) & 0xffffffffffffffff))
	x337 := (x333 & 0xffffffffffffff)
	var x338 uint64
	var x339 uint64
	x338, x339 = bits.Add64(x324, x331, uint64(0x0))
	x340 := (uint64(uint1(x339)) + x326)
	var x341 uint64
	var x342 uint64
	x341, x342 = bits.Add64(x336, x224, uint64(0x0))
	x343 := (uint64(uint1(x342)) + x226)
	x344 := ((x338 >> 56) | ((x340 << 8) & 0xffffffffffffffff))
	x345 := (x338 & 0xffffffffffffff)
	var x346 uint64
	var x347 uint64
	x346, x347 = bits.Add64(x344, x300, uint64(0x0))
	x348 := (uint64(uint1(x347)) + x302)
	x349 := ((x341 >> 56) | ((x343 << 8) & 0xffffffffffffffff))
	x350 := (x341 & 0xffffffffffffff)
	var x351 uint64
	var x352 uint64
	x351, x352 = bits.Add64(x349, x196, uint64(0x0))
	x353 := (uint64(uint1(x352)) + x198)
	x354 := ((x346 >> 56) | ((x348 << 8) & 0xffffffffffffffff))
	x355 := (x346 & 0xffffffffffffff)
	var x356 uint64
	var x357 uint64
	x356, x357 = bits.Add64(x354, x284, uint64(0x0))
	x358 := (uint64(uint1(x357)) + x286)
	x359 := ((x351 >> 56) | ((x353 << 8) & 0xffffffffffffffff))
	x360 := (x351 & 0xffffffffffffff)
	x361 := (x359 + x332)
	x362 := ((x356 >> 56) | ((x358 << 8) & 0xffffffffffffffff))
	x363 := (x356 & 0xffffffffffffff)
	x364 := (x362 + x147)
	x365 := (x361 >> 56)
	x366 := (x361 & 0xffffffffffffff)
	x367 := (x364 >> 56)
	x368 := (x364 & 0xffffffffffffff)
	x369 := (x337 + x365)
	x370 := (x345 + x365)
	x371 := (x367 + x369)
	x372 := uint1((x371 >> 56))
	x373 := (x371 & 0xffffffffffffff)
	x374 := (uint64(x372) + x350)
	x375 := uint1((x370 >> 56))
	x376 := (x370 & 0xffffffffffffff)
	x377 := (uint64(x375) + x355)
	out1[0] = x376
	out1[1] = x377
	out1[2] = x363
	out1[3] = x368
	out1[4] = x373
	out1[5] = x374
	out1[6] = x360
	out1[7] = x366
}

// Carry reduces a field element.
//
// Postconditions:
//   eval out1 mod m = eval arg1 mod m
//
func Carry(out1 *TightFieldElement, arg1 *LooseFieldElement) {
	x1 := arg1[3]
	x2 := arg1[7]
	x3 := (x2 >> 56)
	x4 := (((x1 >> 56) + arg1[4]) + x3)
	x5 := (arg1[0] + x3)
	x6 := ((x4 >> 56) + arg1[5])
	x7 := ((x5 >> 56) + arg1[1])
	x8 := ((x6 >> 56) + arg1[6])
	x9 := ((x7 >> 56) + arg1[2])
	x10 := ((x8 >> 56) + (x2 & 0xffffffffffffff))
	x11 := ((x9 >> 56) + (x1 & 0xffffffffffffff))
	x12 := uint1((x10 >> 56))
	x13 := ((x5 & 0xffffffffffffff) + uint64(x12))
	x14 := (uint64(uint1((x11 >> 56))) + ((x4 & 0xffffffffffffff) + uint64(x12)))
	x15 := (x13 & 0xffffffffffffff)
	x16 := (uint64(uint1((x13 >> 56))) + (x7 & 0xffffffffffffff))
	x17 := (x9 & 0xffffffffffffff)
	x18 := (x11 & 0xffffffffffffff)
	x19 := (x14 & 0xffffffffffffff)
	x20 := (uint64(uint1((x14 >> 56))) + (x6 & 0xffffffffffffff))
	x21 := (x8 & 0xffffffffffffff)
	x22 := (x10 & 0xffffffffffffff)
	out1[0] = x15
	out1[1] = x16
	out1[2] = x17
	out1[3] = x18
	out1[4] = x19
	out1[5] = x20
	out1[6] = x21
	out1[7] = x22
}

// Add adds two field elements.
//
// Postconditions:
//   eval out1 mod m = (eval arg1 + eval arg2) mod m
//
func Add(out1 *LooseFieldElement, arg1 *TightFieldElement, arg2 *TightFieldElement) {
	x1 := (arg1[0] + arg2[0])
	x2 := (arg1[1] + arg2[1])
	x3 := (arg1[2] + arg2[2])
	x4 := (arg1[3] + arg2[3])
	x5 := (arg1[4] + arg2[4])
	x6 := (arg1[5] + arg2[5])
	x7 := (arg1[6] + arg2[6])
	x8 := (arg1[7] + arg2[7])
	out1[0] = x1
	out1[1] = x2
	out1[2] = x3
	out1[3] = x4
	out1[4] = x5
	out1[5] = x6
	out1[6] = x7
	out1[7] = x8
}

// Sub subtracts two field elements.
//
// Postconditions:
//   eval out1 mod m = (eval arg1 - eval arg2) mod m
//
func Sub(out1 *LooseFieldElement, arg1 *TightFieldElement, arg2 *TightFieldElement) {
	x1 := ((0x1fffffffffffffe + arg1[0]) - arg2[0])
	x2 := ((0x1fffffffffffffe + arg1[1]) - arg2[1])
	x3 := ((0x1fffffffffffffe + arg1[2]) - arg2[2])
	x4 := ((0x1fffffffffffffe + arg1[3]) - arg2[3])
	x5 := ((0x1fffffffffffffc + arg1[4]) - arg2[4])
	x6 := ((0x1fffffffffffffe + arg1[5]) - arg2[5])
	x7 := ((0x1fffffffffffffe + arg1[6]) - arg2[6])
	x8 := ((0x1fffffffffffffe + arg1[7]) - arg2[7])
	out1[0] = x1
	out1[1] = x2
	out1[2] = x3
	out1[3] = x4
	out1[4] = x5
	out1[5] = x6
	out1[6] = x7
	out1[7] = x8
}

// Opp negates a field element.
//
// Postconditions:
//   eval out1 mod m = -eval arg1 mod m
//
func Opp(out1 *LooseFieldElement, arg1 *TightFieldElement) {
	x1 := (0x1fffffffffffffe - arg1[0])
	x2 := (0x1fffffffffffffe - arg1[1])
	x3 := (0x1fffffffffffffe - arg1[2])
	x4 := (0x1fffffffffffffe - arg1[3])
	x5 := (0x1fffffffffffffc - arg1[4])
	x6 := (0x1fffffffffffffe - arg1[5])
	x7 := (0x1fffffffffffffe - arg1[6])
	x8 := (0x1fffffffffffffe - arg1[7])
	out1[0] = x1
	out1[1] = x2
	out1[2] = x3
	out1[3] = x4
	out1[4] = x5
	out1[5] = x6
	out1[6] = x7
	out1[7] = x8
}

// Selectznz is a multi-limb conditional select.
//
// Postconditions:
//   out1 = (if arg1 = 0 then arg2 else arg3)
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
//   arg3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
func Selectznz(out1 *[8]uint64, arg1 uint1, arg2 *[8]uint64, arg3 *[8]uint64) {
	var x1 uint64
	cmovznzU64(&x1, arg1, arg2[0], arg3[0])
	var x2 uint64
	cmovznzU64(&x2, arg1, arg2[1], arg3[1])
	var x3 uint64
	cmovznzU64(&x3, arg1, arg2[2], arg3[2])
	var x4 uint64
	cmovznzU64(&x4, arg1, arg2[3], arg3[3])
	var x5 uint64
	cmovznzU64(&x5, arg1, arg2[4], arg3[4])
	var x6 uint64
	cmovznzU64(&x6, arg1, arg2[5], arg3[5])
	var x7 uint64
	cmovznzU64(&x7, arg1, arg2[6], arg3[6])
	var x8 uint64
	cmovznzU64(&x8, arg1, arg2[7], arg3[7])
	out1[0] = x1
	out1[1] = x2
	out1[2] = x3
	out1[3] = x4
	out1[4] = x5
	out1[5] = x6
	out1[6] = x7
	out1[7] = x8
}

// ToBytes serializes a field element to bytes in little-endian order.
//
// Postconditions:
//   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..55]
//
// Output Bounds:
//   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
func ToBytes(out1 *[56]uint8, arg1 *TightFieldElement) {
	var x1 uint64
	var x2 uint1
	subborrowxU56(&x1, &x2, 0x0, arg1[0], 0xffffffffffffff)
	var x3 uint64
	var x4 uint1
	subborrowxU56(&x3, &x4, x2, arg1[1], 0xffffffffffffff)
	var x5 uint64
	var x6 uint1
	subborrowxU56(&x5, &x6, x4, arg1[2], 0xffffffffffffff)
	var x7 uint64
	var x8 uint1
	subborrowxU56(&x7, &x8, x6, arg1[3], 0xffffffffffffff)
	var x9 uint64
	var x10 uint1
	subborrowxU56(&x9, &x10, x8, arg1[4], 0xfffffffffffffe)
	var x11 uint64
	var x12 uint1
	subborrowxU56(&x11, &x12, x10, arg1[5], 0xffffffffffffff)
	var x13 uint64
	var x14 uint1
	subborrowxU56(&x13, &x14, x12, arg1[6], 0xffffffffffffff)
	var x15 uint64
	var x16 uint1
	subborrowxU56(&x15, &x16, x14, arg1[7], 0xffffffffffffff)
	var x17 uint64
	cmovznzU64(&x17, x16, uint64(0x0), 0xffffffffffffffff)
	var x18 uint64
	var x19 uint1
	addcarryxU56(&x18, &x19, 0x0, x1, (x17 & 0xffffffffffffff))
	var x20 uint64
	var x21 uint1
	addcarryxU56(&x20, &x21, x19, x3, (x17 & 0xffffffffffffff))
	var x22 uint64
	var x23 uint1
	addcarryxU56(&x22, &x23, x21, x5, (x17 & 0xffffffffffffff))
	var x24 uint64
	var x25 uint1
	addcarryxU56(&x24, &x25, x23, x7, (x17 & 0xffffffffffffff))
	var x26 uint64
	var x27 uint1
	addcarryxU56(&x26, &x27, x25, x9, (x17 & 0xfffffffffffffe))
	var x28 uint64
	var x29 uint1
	addcarryxU56(&x28, &x29, x27, x11, (x17 & 0xffffffffffffff))
	var x30 uint64
	var x31 uint1
	addcarryxU56(&x30, &x31, x29, x13, (x17 & 0xffffffffffffff))
	var x32 uint64
	var x33 uint1
	addcarryxU56(&x32, &x33, x31, x15, (x17 & 0xffffffffffffff))
	x34 := (uint8(x18) & 0xff)
	x35 := (x18 >> 8)
	x36 := (uint8(x35) & 0xff)
	x37 := (x35 >> 8)
	x38 := (uint8(x37) & 0xff)
	x39 := (x37 >> 8)
	x40 := (uint8(x39) & 0xff)
	x41 := (x39 >> 8)
	x42 := (uint8(x41) & 0xff)
	x43 := (x41 >> 8)
	x44 := (uint8(x43) & 0xff)
	x45 := uint8((x43 >> 8))
	x46 := (uint8(x20) & 0xff)
	x47 := (x20 >> 8)
	x48 := (uint8(x47) & 0xff)
	x49 := (x47 >> 8)
	x50 := (uint8(x49) & 0xff)
	x51 := (x49 >> 8)
	x52 := (uint8(x51) & 0xff)
	x53 := (x51 >> 8)
	x54 := (uint8(x53) & 0xff)
	x55 := (x53 >> 8)
	x56 := (uint8(x55) & 0xff)
	x57 := uint8((x55 >> 8))
	x58 := (uint8(x22) & 0xff)
	x59 := (x22 >> 8)
	x60 := (uint8(x59) & 0xff)
	x61 := (x59 >> 8)
	x62 := (uint8(x61) & 0xff)
	x63 := (x61 >> 8)
	x64 := (uint8(x63) & 0xff)
	x65 := (x63 >> 8)
	x66 := (uint8(x65) & 0xff)
	x67 := (x65 >> 8)
	x68 := (uint8(x67) & 0xff)
	x69 := uint8((x67 >> 8))
	x70 := (uint8(x24) & 0xff)
	x71 := (x24 >> 8)
	x72 := (uint8(x71) & 0xff)
	x73 := (x71 >> 8)
	x74 := (uint8(x73) & 0xff)
	x75 := (x73 >> 8)
	x76 := (uint8(x75) & 0xff)
	x77 := (x75 >> 8)
	x78 := (uint8(x77) & 0xff)
	x79 := (x77 >> 8)
	x80 := (uint8(x79) & 0xff)
	x81 := uint8((x79 >> 8))
	x82 := (uint8(x26) & 0xff)
	x83 := (x26 >> 8)
	x84 := (uint8(x83) & 0xff)
	x85 := (x83 >> 8)
	x86 := (uint8(x85) & 0xff)
	x87 := (x85 >> 8)
	x88 := (uint8(x87) & 0xff)
	x89 := (x87 >> 8)
	x90 := (uint8(x89) & 0xff)
	x91 := (x89 >> 8)
	x92 := (uint8(x91) & 0xff)
	x93 := uint8((x91 >> 8))
	x94 := (uint8(x28) & 0xff)
	x95 := (x28 >> 8)
	x96 := (uint8(x95) & 0xff)
	x97 := (x95 >> 8)
	x98 := (uint8(x97) & 0xff)
	x99 := (x97 >> 8)
	x100 := (uint8(x99) & 0xff)
	x101 := (x99 >> 8)
	x102 := (uint8(x101) & 0xff)
	x103 := (x101 >> 8)
	x104 := (uint8(x103) & 0xff)
	x105 := uint8((x103 >> 8))
	x106 := (uint8(x30) & 0xff)
	x107 := (x30 >> 8)
	x108 := (uint8(x107) & 0xff)
	x109 := (x107 >> 8)
	x110 := (uint8(x109) & 0xff)
	x111 := (x109 >> 8)
	x112 := (uint8(x111) & 0xff)
	x113 := (x111 >> 8)
	x114 := (uint8(x113) & 0xff)
	x115 := (x113 >> 8)
	x116 := (uint8(x115) & 0xff)
	x117 := uint8((x115 >> 8))
	x118 := (uint8(x32) & 0xff)
	x119 := (x32 >> 8)
	x120 := (uint8(x119) & 0xff)
	x121 := (x119 >> 8)
	x122 := (uint8(x121) & 0xff)
	x123 := (x121 >> 8)
	x124 := (uint8(x123) & 0xff)
	x125 := (x123 >> 8)
	x126 := (uint8(x125) & 0xff)
	x127 := (x125 >> 8)
	x128 := (uint8(x127) & 0xff)
	x129 := uint8((x127 >> 8))
	out1[0] = x34
	out1[1] = x36
	out1[2] = x38
	out1[3] = x40
	out1[4] = x42
	out1[5] = x44
	out1[6] = x45
	out1[7] = x46
	out1[8] = x48
	out1[9] = x50
	out1[10] = x52
	out1[11] = x54
	out1[12] = x56
	out1[13] = x57
	out1[14] = x58
	out1[15] = x60
	out1[16] = x62
	out1[17] = x64
	out1[18] = x66
	out1[19] = x68
	out1[20] = x69
	out1[21] = x70
	out1[22] = x72
	out1[23] = x74
	out1[24] = x76
	out1[25] = x78
	out1[26] = x80
	out1[27] = x81
	out1[28] = x82
	out1[29] = x84
	out1[30] = x86
	out1[31] = x88
	out1[32] = x90
	out1[33] = x92
	out1[34] = x93
	out1[35] = x94
	out1[36] = x96
	out1[37] = x98
	out1[38] = x100
	out1[39] = x102
	out1[40] = x104
	out1[41] = x105
	out1[42] = x106
	out1[43] = x108
	out1[44] = x110
	out1[45] = x112
	out1[46] = x114
	out1[47] = x116
	out1[48] = x117
	out1[49] = x118
	out1[50] = x120
	out1[51] = x122
	out1[52] = x124
	out1[53] = x126
	out1[54] = x128
	out1[55] = x129
}

// FromBytes deserializes a field element from bytes in little-endian order.
//
// Postconditions:
//   eval out1 mod m = bytes_eval arg1 mod m
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
func FromBytes(out1 *TightFieldElement, arg1 *[56]uint8) {
	x1 := (uint64(arg1[55]) << 48)
	x2 := (uint64(arg1[54]) << 40)
	x3 := (uint64(arg1[53]) << 32)
	x4 := (uint64(arg1[52]) << 24)
	x5 := (uint64(arg1[51]) << 16)
	x6 := (uint64(arg1[50]) << 8)
	x7 := arg1[49]
	x8 := (uint64(arg1[48]) << 48)
	x9 := (uint64(arg1[47]) << 40)
	x10 := (uint64(arg1[46]) << 32)
	x11 := (uint64(arg1[45]) << 24)
	x12 := (uint64(arg1[44]) << 16)
	x13 := (uint64(arg1[43]) << 8)
	x14 := arg1[42]
	x15 := (uint64(arg1[41]) << 48)
	x16 := (uint64(arg1[40]) << 40)
	x17 := (uint64(arg1[39]) << 32)
	x18 := (uint64(arg1[38]) << 24)
	x19 := (uint64(arg1[37]) << 16)
	x20 := (uint64(arg1[36]) << 8)
	x21 := arg1[35]
	x22 := (uint64(arg1[34]) << 48)
	x23 := (uint64(arg1[33]) << 40)
	x24 := (uint64(arg1[32]) << 32)
	x25 := (uint64(arg1[31]) << 24)
	x26 := (uint64(arg1[30]) << 16)
	x27 := (uint64(arg1[29]) << 8)
	x28 := arg1[28]
	x29 := (uint64(arg1[27]) << 48)
	x30 := (uint64(arg1[26]) << 40)
	x31 := (uint64(arg1[25]) << 32)
	x32 := (uint64(arg1[24]) << 24)
	x33 := (uint64(arg1[23]) << 16)
	x34 := (uint64(arg1[22]) << 8)
	x35 := arg1[21]
	x36 := (uint64(arg1[20]) << 48)
	x37 := (uint64(arg1[19]) << 40)
	x38 := (uint64(arg1[18]) << 32)
	x39 := (uint64(arg1[17]) << 24)
	x40 := (uint64(arg1[16]) << 16)
	x41 := (uint64(arg1[15]) << 8)
	x42 := arg1[14]
	x43 := (uint64(arg1[13]) << 48)
	x44 := (uint64(arg1[12]) << 40)
	x45 := (uint64(arg1[11]) << 32)
	x46 := (uint64(arg1[10]) << 24)
	x47 := (uint64(arg1[9]) << 16)
	x48 := (uint64(arg1[8]) << 8)
	x49 := arg1[7]
	x50 := (uint64(arg1[6]) << 48)
	x51 := (uint64(arg1[5]) << 40)
	x52 := (uint64(arg1[4]) << 32)
	x53 := (uint64(arg1[3]) << 24)
	x54 := (uint64(arg1[2]) << 16)
	x55 := (uint64(arg1[1]) << 8)
	x56 := arg1[0]
	x57 := (x55 + uint64(x56))
	x58 := (x54 + x57)
	x59 := (x53 + x58)
	x60 := (x52 + x59)
	x61 := (x51 + x60)
	x62 := (x50 + x61)
	x63 := (x48 + uint64(x49))
	x64 := (x47 + x63)
	x65 := (x46 + x64)
	x66 := (x45 + x65)
	x67 := (x44 + x66)
	x68 := (x43 + x67)
	x69 := (x41 + uint64(x42))
	x70 := (x40 + x69)
	x71 := (x39 + x70)
	x72 := (x38 + x71)
	x73 := (x37 + x72)
	x74 := (x36 + x73)
	x75 := (x34 + uint64(x35))
	x76 := (x33 + x75)
	x77 := (x32 + x76)
	x78 := (x31 + x77)
	x79 := (x30 + x78)
	x80 := (x29 + x79)
	x81 := (x27 + uint64(x28))
	x82 := (x26 + x81)
	x83 := (x25 + x82)
	x84 := (x24 + x83)
	x85 := (x23 + x84)
	x86 := (x22 + x85)
	x87 := (x20 + uint64(x21))
	x88 := (x19 + x87)
	x89 := (x18 + x88)
	x90 := (x17 + x89)
	x91 := (x16 + x90)
	x92 := (x15 + x91)
	x93 := (x13 + uint64(x14))
	x94 := (x12 + x93)
	x95 := (x11 + x94)
	x96 := (x10 + x95)
	x97 := (x9 + x96)
	x98 := (x8 + x97)
	x99 := (x6 + uint64(x7))
	x100 := (x5 + x99)
	x101 := (x4 + x100)
	x102 := (x3 + x101)
	x103 := (x2 + x102)
	x104 := (x1 + x103)
	out1[0] = x62
	out1[1] = x68
	out1[2] = x74
	out1[3] = x80
	out1[4] = x86
	out1[5] = x92
	out1[6] = x98
	out1[7] = x104
}

// Relax is the identity function converting from tight field elements to loose field elements.
//
// Postconditions:
//   out1 = arg1
//
func Relax(out1 *LooseFieldElement, arg1 *TightFieldElement) {
	x1 := arg1[0]
	x2 := arg1[1]
	x3 := arg1[2]
	x4 := arg1[3]
	x5 := arg1[4]
	x6 := arg1[5]
	x7 := arg1[6]
	x8 := arg1[7]
	out1[0] = x1
	out1[1] = x2
	out1[2] = x3
	out1[3] = x4
	out1[4] = x5
	out1[5] = x6
	out1[6] = x7
	out1[7] = x8
}

// CarryAdd adds two field elements.
//
// Postconditions:
//   eval out1 mod m = (eval arg1 + eval arg2) mod m
//
func CarryAdd(out1 *TightFieldElement, arg1 *TightFieldElement, arg2 *TightFieldElement) {
	x1 := (arg1[3] + arg2[3])
	x2 := (arg1[7] + arg2[7])
	x3 := (x2 >> 56)
	x4 := (((x1 >> 56) + (arg1[4] + arg2[4])) + x3)
	x5 := ((arg1[0] + arg2[0]) + x3)
	x6 := ((x4 >> 56) + (arg1[5] + arg2[5]))
	x7 := ((x5 >> 56) + (arg1[1] + arg2[1]))
	x8 := ((x6 >> 56) + (arg1[6] + arg2[6]))
	x9 := ((x7 >> 56) + (arg1[2] + arg2[2]))
	x10 := ((x8 >> 56) + (x2 & 0xffffffffffffff))
	x11 := ((x9 >> 56) + (x1 & 0xffffffffffffff))
	x12 := uint1((x10 >> 56))
	x13 := ((x5 & 0xffffffffffffff) + uint64(x12))
	x14 := (uint64(uint1((x11 >> 56))) + ((x4 & 0xffffffffffffff) + uint64(x12)))
	x15 := (x13 & 0xffffffffffffff)
	x16 := (uint64(uint1((x13 >> 56))) + (x7 & 0xffffffffffffff))
	x17 := (x9 & 0xffffffffffffff)
	x18 := (x11 & 0xffffffffffffff)
	x19 := (x14 & 0xffffffffffffff)
	x20 := (uint64(uint1((x14 >> 56))) + (x6 & 0xffffffffffffff))
	x21 := (x8 & 0xffffffffffffff)
	x22 := (x10 & 0xffffffffffffff)
	out1[0] = x15
	out1[1] = x16
	out1[2] = x17
	out1[3] = x18
	out1[4] = x19
	out1[5] = x20
	out1[6] = x21
	out1[7] = x22
}

// CarrySub subtracts two field elements.
//
// Postconditions:
//   eval out1 mod m = (eval arg1 - eval arg2) mod m
//
func CarrySub(out1 *TightFieldElement, arg1 *TightFieldElement, arg2 *TightFieldElement) {
	x1 := ((0x1fffffffffffffe + arg1[3]) - arg2[3])
	x2 := ((0x1fffffffffffffe + arg1[7]) - arg2[7])
	x3 := (x2 >> 56)
	x4 := (((x1 >> 56) + ((0x1fffffffffffffc + arg1[4]) - arg2[4])) + x3)
	x5 := (((0x1fffffffffffffe + arg1[0]) - arg2[0]) + x3)
	x6 := ((x4 >> 56) + ((0x1fffffffffffffe + arg1[5]) - arg2[5]))
	x7 := ((x5 >> 56) + ((0x1fffffffffffffe + arg1[1]) - arg2[1]))
	x8 := ((x6 >> 56) + ((0x1fffffffffffffe + arg1[6]) - arg2[6]))
	x9 := ((x7 >> 56) + ((0x1fffffffffffffe + arg1[2]) - arg2[2]))
	x10 := ((x8 >> 56) + (x2 & 0xffffffffffffff))
	x11 := ((x9 >> 56) + (x1 & 0xffffffffffffff))
	x12 := uint1((x10 >> 56))
	x13 := ((x5 & 0xffffffffffffff) + uint64(x12))
	x14 := (uint64(uint1((x11 >> 56))) + ((x4 & 0xffffffffffffff) + uint64(x12)))
	x15 := (x13 & 0xffffffffffffff)
	x16 := (uint64(uint1((x13 >> 56))) + (x7 & 0xffffffffffffff))
	x17 := (x9 & 0xffffffffffffff)
	x18 := (x11 & 0xffffffffffffff)
	x19 := (x14 & 0xffffffffffffff)
	x20 := (uint64(uint1((x14 >> 56))) + (x6 & 0xffffffffffffff))
	x21 := (x8 & 0xffffffffffffff)
	x22 := (x10 & 0xffffffffffffff)
	out1[0] = x15
	out1[1] = x16
	out1[2] = x17
	out1[3] = x18
	out1[4] = x19
	out1[5] = x20
	out1[6] = x21
	out1[7] = x22
}

// CarryOpp negates a field element.
//
// Postconditions:
//   eval out1 mod m = -eval arg1 mod m
//
func CarryOpp(out1 *TightFieldElement, arg1 *TightFieldElement) {
	x1 := (0x1fffffffffffffe - arg1[3])
	x2 := (0x1fffffffffffffe - arg1[7])
	x3 := uint1((x2 >> 56))
	x4 := ((uint64(uint1((x1 >> 56))) + (0x1fffffffffffffc - arg1[4])) + uint64(x3))
	x5 := ((0x1fffffffffffffe - arg1[0]) + uint64(x3))
	x6 := (uint64(uint1((x4 >> 56))) + (0x1fffffffffffffe - arg1[5]))
	x7 := (uint64(uint1((x5 >> 56))) + (0x1fffffffffffffe - arg1[1]))
	x8 := (uint64(uint1((x6 >> 56))) + (0x1fffffffffffffe - arg1[6]))
	x9 := (uint64(uint1((x7 >> 56))) + (0x1fffffffffffffe - arg1[2]))
	x10 := (uint64(uint1((x8 >> 56))) + (x2 & 0xffffffffffffff))
	x11 := (uint64(uint1((x9 >> 56))) + (x1 & 0xffffffffffffff))
	x12 := uint1((x10 >> 56))
	x13 := ((x5 & 0xffffffffffffff) + uint64(x12))
	x14 := (uint64(uint1((x11 >> 56))) + ((x4 & 0xffffffffffffff) + uint64(x12)))
	x15 := (x13 & 0xffffffffffffff)
	x16 := (uint64(uint1((x13 >> 56))) + (x7 & 0xffffffffffffff))
	x17 := (x9 & 0xffffffffffffff)
	x18 := (x11 & 0xffffffffffffff)
	x19 := (x14 & 0xffffffffffffff)
	x20 := (uint64(uint1((x14 >> 56))) + (x6 & 0xffffffffffffff))
	x21 := (x8 & 0xffffffffffffff)
	x22 := (x10 & 0xffffffffffffff)
	out1[0] = x15
	out1[1] = x16
	out1[2] = x17
	out1[3] = x18
	out1[4] = x19
	out1[5] = x20
	out1[6] = x21
	out1[7] = x22
}
