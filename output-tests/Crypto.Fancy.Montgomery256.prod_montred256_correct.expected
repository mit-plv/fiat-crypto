Montgomery256.prod_montred256_correct
     : forall (cc_start_state : CC.state) (start_context : register -> Z) (lo hi y t1 t2 scratch RegPInv extra_reg : register),
       NoDup [lo; hi; y; t1; t2; scratch; RegPInv; extra_reg; RegMod; RegZero] ->
       start_context RegPInv = Montgomery256.N' ->
       start_context RegMod = Montgomery256.N ->
       start_context RegZero = 0 ->
       0 <= start_context lo < Montgomery256.R ->
       0 <= start_context hi < Montgomery256.R ->
       let x := start_context lo + Montgomery256.R * start_context hi in
       0 <= x < Montgomery256.R * Montgomery256.N ->
       interp reg_eqb wordmax cc_spec (MontRed256 lo hi y t1 t2 scratch RegPInv) cc_start_state start_context =
       (x * Montgomery256.R') mod Montgomery256.N
