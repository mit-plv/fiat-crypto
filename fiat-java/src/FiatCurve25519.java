/* Autogenerated: src/ExtractionOCaml/unsaturated_solinas --lang Java --cmovznz-by-mul --widen-carry --widen-bytes --internal-static --only-signed Curve25519 32 10 '2^255 - 19' carry_mul carry_square carry add sub opp selectznz to_bytes from_bytes carry_scmul121666 */
/* curve description: Curve25519 */
/* machine_wordsize = 32 (from "32") */
/* requested operations: carry_mul, carry_square, carry, add, sub, opp, selectznz, to_bytes, from_bytes, carry_scmul121666 */
/* n = 10 (from "10") */
/* s-c = 2^255 - [(1, 19)] (from "2^255 - 19") */
/* tight_bounds_multiplier = 1.1 (from "") */
/*  */
/* Computed values: */
/* carry_chain = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1] */
/* eval z = z[0] + (z[1] << 26) + (z[2] << 51) + (z[3] << 77) + (z[4] << 102) + (z[5] << 128) + (z[6] << 153) + (z[7] << 179) + (z[8] << 204) + (z[9] << 230) */
/* bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17] << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168) + (z[22] << 176) + (z[23] << 184) + (z[24] << 192) + (z[25] << 200) + (z[26] << 208) + (z[27] << 216) + (z[28] << 224) + (z[29] << 232) + (z[30] << 240) + (z[31] << 248) */

package fiat_crypto;

public final class FiatCurve25519 {

static class Box<T> {
  private T value;
  public Box(T value) { this.value = value; }
  public void set(T value) { this.value = value; }
  public T get() { return this.value; }
}



/**
 * The function fiat_Curve25519_addcarryx_u26 is an addition with carry. <p>
 * Postconditions: <p>
 *   out1 = (arg1 + arg2 + arg3) mod 2^26 <p>
 *   out2 = ⌊(arg1 + arg2 + arg3) / 2^26⌋ <p>
 * <p>
 * Input Bounds: <p>
 *   arg1: [0x0 ~&gt; 0x1] <p>
 *   arg2: [0x0 ~&gt; 0x3ffffff] <p>
 *   arg3: [0x0 ~&gt; 0x3ffffff] <p>
 * Output Bounds: <p>
 *   out1: [0x0 ~&gt; 0x3ffffff] <p>
 *   out2: [0x0 ~&gt; 0x1] <p>
 */
static void fiat_Curve25519_addcarryx_u26(Box<Integer> out1, Box<Integer> out2, int arg1, int arg2, int arg3) {
  int x1 = ((arg1 + arg2) + arg3);
  int x2 = (x1 & 0x3ffffff);
  int x3 = (x1 >>> 26);
  out1.set(x2);
  out2.set(x3);
}

/**
 * The function fiat_Curve25519_subborrowx_u26 is a subtraction with borrow. <p>
 * Postconditions: <p>
 *   out1 = (-arg1 + arg2 + -arg3) mod 2^26 <p>
 *   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^26⌋ <p>
 * <p>
 * Input Bounds: <p>
 *   arg1: [0x0 ~&gt; 0x1] <p>
 *   arg2: [0x0 ~&gt; 0x3ffffff] <p>
 *   arg3: [0x0 ~&gt; 0x3ffffff] <p>
 * Output Bounds: <p>
 *   out1: [0x0 ~&gt; 0x3ffffff] <p>
 *   out2: [0x0 ~&gt; 0x1] <p>
 */
static void fiat_Curve25519_subborrowx_u26(Box<Integer> out1, Box<Integer> out2, int arg1, int arg2, int arg3) {
  int x1 = ((arg2 - arg1) - arg3);
  int x2 = (x1 >>> 26);
  int x3 = (x1 & 0x3ffffff);
  out1.set(x3);
  out2.set((0x0 - x2));
}

/**
 * The function fiat_Curve25519_addcarryx_u25 is an addition with carry. <p>
 * Postconditions: <p>
 *   out1 = (arg1 + arg2 + arg3) mod 2^25 <p>
 *   out2 = ⌊(arg1 + arg2 + arg3) / 2^25⌋ <p>
 * <p>
 * Input Bounds: <p>
 *   arg1: [0x0 ~&gt; 0x1] <p>
 *   arg2: [0x0 ~&gt; 0x1ffffff] <p>
 *   arg3: [0x0 ~&gt; 0x1ffffff] <p>
 * Output Bounds: <p>
 *   out1: [0x0 ~&gt; 0x1ffffff] <p>
 *   out2: [0x0 ~&gt; 0x1] <p>
 */
static void fiat_Curve25519_addcarryx_u25(Box<Integer> out1, Box<Integer> out2, int arg1, int arg2, int arg3) {
  int x1 = ((arg1 + arg2) + arg3);
  int x2 = (x1 & 0x1ffffff);
  int x3 = (x1 >>> 25);
  out1.set(x2);
  out2.set(x3);
}

/**
 * The function fiat_Curve25519_subborrowx_u25 is a subtraction with borrow. <p>
 * Postconditions: <p>
 *   out1 = (-arg1 + arg2 + -arg3) mod 2^25 <p>
 *   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^25⌋ <p>
 * <p>
 * Input Bounds: <p>
 *   arg1: [0x0 ~&gt; 0x1] <p>
 *   arg2: [0x0 ~&gt; 0x1ffffff] <p>
 *   arg3: [0x0 ~&gt; 0x1ffffff] <p>
 * Output Bounds: <p>
 *   out1: [0x0 ~&gt; 0x1ffffff] <p>
 *   out2: [0x0 ~&gt; 0x1] <p>
 */
static void fiat_Curve25519_subborrowx_u25(Box<Integer> out1, Box<Integer> out2, int arg1, int arg2, int arg3) {
  int x1 = ((arg2 - arg1) - arg3);
  int x2 = (x1 >>> 25);
  int x3 = (x1 & 0x1ffffff);
  out1.set(x3);
  out2.set((0x0 - x2));
}

/**
 * The function fiat_Curve25519_cmovznz_u64 is a single-word conditional move. <p>
 * Postconditions: <p>
 *   out1 = (if arg1 = 0 then arg2 else arg3) <p>
 * <p>
 * Input Bounds: <p>
 *   arg1: [0x0 ~&gt; 0x1] <p>
 *   arg2: [0x0 ~&gt; 0xffffffffffffffff] <p>
 *   arg3: [0x0 ~&gt; 0xffffffffffffffff] <p>
 * Output Bounds: <p>
 *   out1: [0x0 ~&gt; 0xffffffffffffffff] <p>
 */
static void fiat_Curve25519_cmovznz_u64(Box<Long> out1, int arg1, long arg2, long arg3) {
  long x1 = (Long.valueOf(arg1).longValue() * 0xffffffffffffffffL);
  long x2 = ((x1 & arg3) | ((~x1) & arg2));
  out1.set(x2);
}

/**
 * The function fiat_Curve25519_carry_mul multiplies two field elements and reduces the result. <p>
 * Postconditions: <p>
 *   eval out1 mod m = (eval arg1 * eval arg2) mod m <p>
 * <p>
 * Input Bounds: <p>
 *   arg1: [[0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999]] <p>
 *   arg2: [[0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999]] <p>
 * Output Bounds: <p>
 *   out1: [[0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333]] <p>
 */
public static void fiat_Curve25519_carry_mul(int[] out1, final int[] arg1, final int[] arg2) {
  long x1 = (Long.valueOf((arg1[9])).longValue() * (Long.valueOf((arg2[9])).longValue() * Long.valueOf(0x26).longValue()));
  long x2 = (Long.valueOf((arg1[9])).longValue() * (Long.valueOf((arg2[8])).longValue() * Long.valueOf(0x13).longValue()));
  long x3 = (Long.valueOf((arg1[9])).longValue() * (Long.valueOf((arg2[7])).longValue() * Long.valueOf(0x26).longValue()));
  long x4 = (Long.valueOf((arg1[9])).longValue() * (Long.valueOf((arg2[6])).longValue() * Long.valueOf(0x13).longValue()));
  long x5 = (Long.valueOf((arg1[9])).longValue() * (Long.valueOf((arg2[5])).longValue() * Long.valueOf(0x26).longValue()));
  long x6 = (Long.valueOf((arg1[9])).longValue() * (Long.valueOf((arg2[4])).longValue() * Long.valueOf(0x13).longValue()));
  long x7 = (Long.valueOf((arg1[9])).longValue() * (Long.valueOf((arg2[3])).longValue() * Long.valueOf(0x26).longValue()));
  long x8 = (Long.valueOf((arg1[9])).longValue() * (Long.valueOf((arg2[2])).longValue() * Long.valueOf(0x13).longValue()));
  long x9 = (Long.valueOf((arg1[9])).longValue() * (Long.valueOf((arg2[1])).longValue() * Long.valueOf(0x26).longValue()));
  long x10 = (Long.valueOf((arg1[8])).longValue() * Long.valueOf(((arg2[9]) * 0x13)).longValue());
  long x11 = (Long.valueOf((arg1[8])).longValue() * (Long.valueOf((arg2[8])).longValue() * Long.valueOf(0x13).longValue()));
  long x12 = (Long.valueOf((arg1[8])).longValue() * Long.valueOf(((arg2[7]) * 0x13)).longValue());
  long x13 = (Long.valueOf((arg1[8])).longValue() * (Long.valueOf((arg2[6])).longValue() * Long.valueOf(0x13).longValue()));
  long x14 = (Long.valueOf((arg1[8])).longValue() * Long.valueOf(((arg2[5]) * 0x13)).longValue());
  long x15 = (Long.valueOf((arg1[8])).longValue() * (Long.valueOf((arg2[4])).longValue() * Long.valueOf(0x13).longValue()));
  long x16 = (Long.valueOf((arg1[8])).longValue() * Long.valueOf(((arg2[3]) * 0x13)).longValue());
  long x17 = (Long.valueOf((arg1[8])).longValue() * (Long.valueOf((arg2[2])).longValue() * Long.valueOf(0x13).longValue()));
  long x18 = (Long.valueOf((arg1[7])).longValue() * (Long.valueOf((arg2[9])).longValue() * Long.valueOf(0x26).longValue()));
  long x19 = (Long.valueOf((arg1[7])).longValue() * (Long.valueOf((arg2[8])).longValue() * Long.valueOf(0x13).longValue()));
  long x20 = (Long.valueOf((arg1[7])).longValue() * (Long.valueOf((arg2[7])).longValue() * Long.valueOf(0x26).longValue()));
  long x21 = (Long.valueOf((arg1[7])).longValue() * (Long.valueOf((arg2[6])).longValue() * Long.valueOf(0x13).longValue()));
  long x22 = (Long.valueOf((arg1[7])).longValue() * (Long.valueOf((arg2[5])).longValue() * Long.valueOf(0x26).longValue()));
  long x23 = (Long.valueOf((arg1[7])).longValue() * (Long.valueOf((arg2[4])).longValue() * Long.valueOf(0x13).longValue()));
  long x24 = (Long.valueOf((arg1[7])).longValue() * (Long.valueOf((arg2[3])).longValue() * Long.valueOf(0x26).longValue()));
  long x25 = (Long.valueOf((arg1[6])).longValue() * Long.valueOf(((arg2[9]) * 0x13)).longValue());
  long x26 = (Long.valueOf((arg1[6])).longValue() * (Long.valueOf((arg2[8])).longValue() * Long.valueOf(0x13).longValue()));
  long x27 = (Long.valueOf((arg1[6])).longValue() * Long.valueOf(((arg2[7]) * 0x13)).longValue());
  long x28 = (Long.valueOf((arg1[6])).longValue() * (Long.valueOf((arg2[6])).longValue() * Long.valueOf(0x13).longValue()));
  long x29 = (Long.valueOf((arg1[6])).longValue() * Long.valueOf(((arg2[5]) * 0x13)).longValue());
  long x30 = (Long.valueOf((arg1[6])).longValue() * (Long.valueOf((arg2[4])).longValue() * Long.valueOf(0x13).longValue()));
  long x31 = (Long.valueOf((arg1[5])).longValue() * (Long.valueOf((arg2[9])).longValue() * Long.valueOf(0x26).longValue()));
  long x32 = (Long.valueOf((arg1[5])).longValue() * (Long.valueOf((arg2[8])).longValue() * Long.valueOf(0x13).longValue()));
  long x33 = (Long.valueOf((arg1[5])).longValue() * (Long.valueOf((arg2[7])).longValue() * Long.valueOf(0x26).longValue()));
  long x34 = (Long.valueOf((arg1[5])).longValue() * (Long.valueOf((arg2[6])).longValue() * Long.valueOf(0x13).longValue()));
  long x35 = (Long.valueOf((arg1[5])).longValue() * (Long.valueOf((arg2[5])).longValue() * Long.valueOf(0x26).longValue()));
  long x36 = (Long.valueOf((arg1[4])).longValue() * Long.valueOf(((arg2[9]) * 0x13)).longValue());
  long x37 = (Long.valueOf((arg1[4])).longValue() * (Long.valueOf((arg2[8])).longValue() * Long.valueOf(0x13).longValue()));
  long x38 = (Long.valueOf((arg1[4])).longValue() * Long.valueOf(((arg2[7]) * 0x13)).longValue());
  long x39 = (Long.valueOf((arg1[4])).longValue() * (Long.valueOf((arg2[6])).longValue() * Long.valueOf(0x13).longValue()));
  long x40 = (Long.valueOf((arg1[3])).longValue() * (Long.valueOf((arg2[9])).longValue() * Long.valueOf(0x26).longValue()));
  long x41 = (Long.valueOf((arg1[3])).longValue() * (Long.valueOf((arg2[8])).longValue() * Long.valueOf(0x13).longValue()));
  long x42 = (Long.valueOf((arg1[3])).longValue() * (Long.valueOf((arg2[7])).longValue() * Long.valueOf(0x26).longValue()));
  long x43 = (Long.valueOf((arg1[2])).longValue() * Long.valueOf(((arg2[9]) * 0x13)).longValue());
  long x44 = (Long.valueOf((arg1[2])).longValue() * (Long.valueOf((arg2[8])).longValue() * Long.valueOf(0x13).longValue()));
  long x45 = (Long.valueOf((arg1[1])).longValue() * (Long.valueOf((arg2[9])).longValue() * Long.valueOf(0x26).longValue()));
  long x46 = (Long.valueOf((arg1[9])).longValue() * Long.valueOf((arg2[0])).longValue());
  long x47 = (Long.valueOf((arg1[8])).longValue() * Long.valueOf((arg2[1])).longValue());
  long x48 = (Long.valueOf((arg1[8])).longValue() * Long.valueOf((arg2[0])).longValue());
  long x49 = (Long.valueOf((arg1[7])).longValue() * Long.valueOf((arg2[2])).longValue());
  long x50 = (Long.valueOf((arg1[7])).longValue() * Long.valueOf(((arg2[1]) * 0x2)).longValue());
  long x51 = (Long.valueOf((arg1[7])).longValue() * Long.valueOf((arg2[0])).longValue());
  long x52 = (Long.valueOf((arg1[6])).longValue() * Long.valueOf((arg2[3])).longValue());
  long x53 = (Long.valueOf((arg1[6])).longValue() * Long.valueOf((arg2[2])).longValue());
  long x54 = (Long.valueOf((arg1[6])).longValue() * Long.valueOf((arg2[1])).longValue());
  long x55 = (Long.valueOf((arg1[6])).longValue() * Long.valueOf((arg2[0])).longValue());
  long x56 = (Long.valueOf((arg1[5])).longValue() * Long.valueOf((arg2[4])).longValue());
  long x57 = (Long.valueOf((arg1[5])).longValue() * Long.valueOf(((arg2[3]) * 0x2)).longValue());
  long x58 = (Long.valueOf((arg1[5])).longValue() * Long.valueOf((arg2[2])).longValue());
  long x59 = (Long.valueOf((arg1[5])).longValue() * Long.valueOf(((arg2[1]) * 0x2)).longValue());
  long x60 = (Long.valueOf((arg1[5])).longValue() * Long.valueOf((arg2[0])).longValue());
  long x61 = (Long.valueOf((arg1[4])).longValue() * Long.valueOf((arg2[5])).longValue());
  long x62 = (Long.valueOf((arg1[4])).longValue() * Long.valueOf((arg2[4])).longValue());
  long x63 = (Long.valueOf((arg1[4])).longValue() * Long.valueOf((arg2[3])).longValue());
  long x64 = (Long.valueOf((arg1[4])).longValue() * Long.valueOf((arg2[2])).longValue());
  long x65 = (Long.valueOf((arg1[4])).longValue() * Long.valueOf((arg2[1])).longValue());
  long x66 = (Long.valueOf((arg1[4])).longValue() * Long.valueOf((arg2[0])).longValue());
  long x67 = (Long.valueOf((arg1[3])).longValue() * Long.valueOf((arg2[6])).longValue());
  long x68 = (Long.valueOf((arg1[3])).longValue() * Long.valueOf(((arg2[5]) * 0x2)).longValue());
  long x69 = (Long.valueOf((arg1[3])).longValue() * Long.valueOf((arg2[4])).longValue());
  long x70 = (Long.valueOf((arg1[3])).longValue() * Long.valueOf(((arg2[3]) * 0x2)).longValue());
  long x71 = (Long.valueOf((arg1[3])).longValue() * Long.valueOf((arg2[2])).longValue());
  long x72 = (Long.valueOf((arg1[3])).longValue() * Long.valueOf(((arg2[1]) * 0x2)).longValue());
  long x73 = (Long.valueOf((arg1[3])).longValue() * Long.valueOf((arg2[0])).longValue());
  long x74 = (Long.valueOf((arg1[2])).longValue() * Long.valueOf((arg2[7])).longValue());
  long x75 = (Long.valueOf((arg1[2])).longValue() * Long.valueOf((arg2[6])).longValue());
  long x76 = (Long.valueOf((arg1[2])).longValue() * Long.valueOf((arg2[5])).longValue());
  long x77 = (Long.valueOf((arg1[2])).longValue() * Long.valueOf((arg2[4])).longValue());
  long x78 = (Long.valueOf((arg1[2])).longValue() * Long.valueOf((arg2[3])).longValue());
  long x79 = (Long.valueOf((arg1[2])).longValue() * Long.valueOf((arg2[2])).longValue());
  long x80 = (Long.valueOf((arg1[2])).longValue() * Long.valueOf((arg2[1])).longValue());
  long x81 = (Long.valueOf((arg1[2])).longValue() * Long.valueOf((arg2[0])).longValue());
  long x82 = (Long.valueOf((arg1[1])).longValue() * Long.valueOf((arg2[8])).longValue());
  long x83 = (Long.valueOf((arg1[1])).longValue() * Long.valueOf(((arg2[7]) * 0x2)).longValue());
  long x84 = (Long.valueOf((arg1[1])).longValue() * Long.valueOf((arg2[6])).longValue());
  long x85 = (Long.valueOf((arg1[1])).longValue() * Long.valueOf(((arg2[5]) * 0x2)).longValue());
  long x86 = (Long.valueOf((arg1[1])).longValue() * Long.valueOf((arg2[4])).longValue());
  long x87 = (Long.valueOf((arg1[1])).longValue() * Long.valueOf(((arg2[3]) * 0x2)).longValue());
  long x88 = (Long.valueOf((arg1[1])).longValue() * Long.valueOf((arg2[2])).longValue());
  long x89 = (Long.valueOf((arg1[1])).longValue() * Long.valueOf(((arg2[1]) * 0x2)).longValue());
  long x90 = (Long.valueOf((arg1[1])).longValue() * Long.valueOf((arg2[0])).longValue());
  long x91 = (Long.valueOf((arg1[0])).longValue() * Long.valueOf((arg2[9])).longValue());
  long x92 = (Long.valueOf((arg1[0])).longValue() * Long.valueOf((arg2[8])).longValue());
  long x93 = (Long.valueOf((arg1[0])).longValue() * Long.valueOf((arg2[7])).longValue());
  long x94 = (Long.valueOf((arg1[0])).longValue() * Long.valueOf((arg2[6])).longValue());
  long x95 = (Long.valueOf((arg1[0])).longValue() * Long.valueOf((arg2[5])).longValue());
  long x96 = (Long.valueOf((arg1[0])).longValue() * Long.valueOf((arg2[4])).longValue());
  long x97 = (Long.valueOf((arg1[0])).longValue() * Long.valueOf((arg2[3])).longValue());
  long x98 = (Long.valueOf((arg1[0])).longValue() * Long.valueOf((arg2[2])).longValue());
  long x99 = (Long.valueOf((arg1[0])).longValue() * Long.valueOf((arg2[1])).longValue());
  long x100 = (Long.valueOf((arg1[0])).longValue() * Long.valueOf((arg2[0])).longValue());
  long x101 = (x100 + (x45 + (x44 + (x42 + (x39 + (x35 + (x30 + (x24 + (x17 + x9)))))))));
  long x102 = (x101 >>> 26);
  int x103 = (Long.valueOf(x101).intValue() & 0x3ffffff);
  long x104 = (x91 + (x82 + (x74 + (x67 + (x61 + (x56 + (x52 + (x49 + (x47 + x46)))))))));
  long x105 = (x92 + (x83 + (x75 + (x68 + (x62 + (x57 + (x53 + (x50 + (x48 + x1)))))))));
  long x106 = (x93 + (x84 + (x76 + (x69 + (x63 + (x58 + (x54 + (x51 + (x10 + x2)))))))));
  long x107 = (x94 + (x85 + (x77 + (x70 + (x64 + (x59 + (x55 + (x18 + (x11 + x3)))))))));
  long x108 = (x95 + (x86 + (x78 + (x71 + (x65 + (x60 + (x25 + (x19 + (x12 + x4)))))))));
  long x109 = (x96 + (x87 + (x79 + (x72 + (x66 + (x31 + (x26 + (x20 + (x13 + x5)))))))));
  long x110 = (x97 + (x88 + (x80 + (x73 + (x36 + (x32 + (x27 + (x21 + (x14 + x6)))))))));
  long x111 = (x98 + (x89 + (x81 + (x40 + (x37 + (x33 + (x28 + (x22 + (x15 + x7)))))))));
  long x112 = (x99 + (x90 + (x43 + (x41 + (x38 + (x34 + (x29 + (x23 + (x16 + x8)))))))));
  long x113 = (x102 + x112);
  long x114 = (x113 >>> 25);
  int x115 = (Long.valueOf(x113).intValue() & 0x1ffffff);
  long x116 = (x114 + x111);
  long x117 = (x116 >>> 26);
  int x118 = (Long.valueOf(x116).intValue() & 0x3ffffff);
  long x119 = (x117 + x110);
  long x120 = (x119 >>> 25);
  int x121 = (Long.valueOf(x119).intValue() & 0x1ffffff);
  long x122 = (x120 + x109);
  long x123 = (x122 >>> 26);
  int x124 = (Long.valueOf(x122).intValue() & 0x3ffffff);
  long x125 = (x123 + x108);
  long x126 = (x125 >>> 25);
  int x127 = (Long.valueOf(x125).intValue() & 0x1ffffff);
  long x128 = (x126 + x107);
  long x129 = (x128 >>> 26);
  int x130 = (Long.valueOf(x128).intValue() & 0x3ffffff);
  long x131 = (x129 + x106);
  long x132 = (x131 >>> 25);
  int x133 = (Long.valueOf(x131).intValue() & 0x1ffffff);
  long x134 = (x132 + x105);
  long x135 = (x134 >>> 26);
  int x136 = (Long.valueOf(x134).intValue() & 0x3ffffff);
  long x137 = (x135 + x104);
  long x138 = (x137 >>> 25);
  int x139 = (Long.valueOf(x137).intValue() & 0x1ffffff);
  long x140 = (x138 * Long.valueOf(0x13).longValue());
  long x141 = (Long.valueOf(x103).longValue() + x140);
  int x142 = Long.valueOf((x141 >>> 26)).intValue();
  int x143 = (Long.valueOf(x141).intValue() & 0x3ffffff);
  int x144 = (x142 + x115);
  int x145 = (x144 >>> 25);
  int x146 = (x144 & 0x1ffffff);
  int x147 = (x145 + x118);
  out1[0] = x143;
  out1[1] = x146;
  out1[2] = x147;
  out1[3] = x121;
  out1[4] = x124;
  out1[5] = x127;
  out1[6] = x130;
  out1[7] = x133;
  out1[8] = x136;
  out1[9] = x139;
}

/**
 * The function fiat_Curve25519_carry_square squares a field element and reduces the result. <p>
 * Postconditions: <p>
 *   eval out1 mod m = (eval arg1 * eval arg1) mod m <p>
 * <p>
 * Input Bounds: <p>
 *   arg1: [[0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999]] <p>
 * Output Bounds: <p>
 *   out1: [[0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333]] <p>
 */
public static void fiat_Curve25519_carry_square(int[] out1, final int[] arg1) {
  int x1 = ((arg1[9]) * 0x13);
  long x2 = (Long.valueOf(x1).longValue() * Long.valueOf(0x2).longValue());
  int x3 = ((arg1[9]) * 0x2);
  long x4 = (Long.valueOf((arg1[8])).longValue() * Long.valueOf(0x13).longValue());
  long x5 = (x4 * Long.valueOf(0x2).longValue());
  int x6 = ((arg1[8]) * 0x2);
  int x7 = ((arg1[7]) * 0x13);
  long x8 = (Long.valueOf(x7).longValue() * Long.valueOf(0x2).longValue());
  int x9 = ((arg1[7]) * 0x2);
  long x10 = (Long.valueOf((arg1[6])).longValue() * Long.valueOf(0x13).longValue());
  long x11 = (x10 * Long.valueOf(0x2).longValue());
  int x12 = ((arg1[6]) * 0x2);
  int x13 = ((arg1[5]) * 0x13);
  int x14 = ((arg1[5]) * 0x2);
  int x15 = ((arg1[4]) * 0x2);
  int x16 = ((arg1[3]) * 0x2);
  int x17 = ((arg1[2]) * 0x2);
  int x18 = ((arg1[1]) * 0x2);
  long x19 = (Long.valueOf((arg1[9])).longValue() * (Long.valueOf(x1).longValue() * Long.valueOf(0x2).longValue()));
  long x20 = (Long.valueOf((arg1[8])).longValue() * x2);
  long x21 = (Long.valueOf((arg1[8])).longValue() * x4);
  long x22 = (Long.valueOf((arg1[7])).longValue() * (x2 * Long.valueOf(0x2).longValue()));
  long x23 = (Long.valueOf((arg1[7])).longValue() * x5);
  long x24 = (Long.valueOf((arg1[7])).longValue() * (Long.valueOf(x7).longValue() * Long.valueOf(0x2).longValue()));
  long x25 = (Long.valueOf((arg1[6])).longValue() * x2);
  long x26 = (Long.valueOf((arg1[6])).longValue() * x5);
  long x27 = (Long.valueOf((arg1[6])).longValue() * x8);
  long x28 = (Long.valueOf((arg1[6])).longValue() * x10);
  long x29 = (Long.valueOf((arg1[5])).longValue() * (x2 * Long.valueOf(0x2).longValue()));
  long x30 = (Long.valueOf((arg1[5])).longValue() * x5);
  long x31 = (Long.valueOf((arg1[5])).longValue() * (x8 * Long.valueOf(0x2).longValue()));
  long x32 = (Long.valueOf((arg1[5])).longValue() * x11);
  long x33 = (Long.valueOf((arg1[5])).longValue() * (Long.valueOf(x13).longValue() * Long.valueOf(0x2).longValue()));
  long x34 = (Long.valueOf((arg1[4])).longValue() * x2);
  long x35 = (Long.valueOf((arg1[4])).longValue() * x5);
  long x36 = (Long.valueOf((arg1[4])).longValue() * x8);
  long x37 = (Long.valueOf((arg1[4])).longValue() * x11);
  long x38 = (Long.valueOf((arg1[4])).longValue() * Long.valueOf(x14).longValue());
  long x39 = (Long.valueOf((arg1[4])).longValue() * Long.valueOf((arg1[4])).longValue());
  long x40 = (Long.valueOf((arg1[3])).longValue() * (x2 * Long.valueOf(0x2).longValue()));
  long x41 = (Long.valueOf((arg1[3])).longValue() * x5);
  long x42 = (Long.valueOf((arg1[3])).longValue() * (x8 * Long.valueOf(0x2).longValue()));
  long x43 = (Long.valueOf((arg1[3])).longValue() * Long.valueOf(x12).longValue());
  long x44 = (Long.valueOf((arg1[3])).longValue() * Long.valueOf((x14 * 0x2)).longValue());
  long x45 = (Long.valueOf((arg1[3])).longValue() * Long.valueOf(x15).longValue());
  long x46 = (Long.valueOf((arg1[3])).longValue() * Long.valueOf(((arg1[3]) * 0x2)).longValue());
  long x47 = (Long.valueOf((arg1[2])).longValue() * x2);
  long x48 = (Long.valueOf((arg1[2])).longValue() * x5);
  long x49 = (Long.valueOf((arg1[2])).longValue() * Long.valueOf(x9).longValue());
  long x50 = (Long.valueOf((arg1[2])).longValue() * Long.valueOf(x12).longValue());
  long x51 = (Long.valueOf((arg1[2])).longValue() * Long.valueOf(x14).longValue());
  long x52 = (Long.valueOf((arg1[2])).longValue() * Long.valueOf(x15).longValue());
  long x53 = (Long.valueOf((arg1[2])).longValue() * Long.valueOf(x16).longValue());
  long x54 = (Long.valueOf((arg1[2])).longValue() * Long.valueOf((arg1[2])).longValue());
  long x55 = (Long.valueOf((arg1[1])).longValue() * (x2 * Long.valueOf(0x2).longValue()));
  long x56 = (Long.valueOf((arg1[1])).longValue() * Long.valueOf(x6).longValue());
  long x57 = (Long.valueOf((arg1[1])).longValue() * Long.valueOf((x9 * 0x2)).longValue());
  long x58 = (Long.valueOf((arg1[1])).longValue() * Long.valueOf(x12).longValue());
  long x59 = (Long.valueOf((arg1[1])).longValue() * Long.valueOf((x14 * 0x2)).longValue());
  long x60 = (Long.valueOf((arg1[1])).longValue() * Long.valueOf(x15).longValue());
  long x61 = (Long.valueOf((arg1[1])).longValue() * Long.valueOf((x16 * 0x2)).longValue());
  long x62 = (Long.valueOf((arg1[1])).longValue() * Long.valueOf(x17).longValue());
  long x63 = (Long.valueOf((arg1[1])).longValue() * Long.valueOf(((arg1[1]) * 0x2)).longValue());
  long x64 = (Long.valueOf((arg1[0])).longValue() * Long.valueOf(x3).longValue());
  long x65 = (Long.valueOf((arg1[0])).longValue() * Long.valueOf(x6).longValue());
  long x66 = (Long.valueOf((arg1[0])).longValue() * Long.valueOf(x9).longValue());
  long x67 = (Long.valueOf((arg1[0])).longValue() * Long.valueOf(x12).longValue());
  long x68 = (Long.valueOf((arg1[0])).longValue() * Long.valueOf(x14).longValue());
  long x69 = (Long.valueOf((arg1[0])).longValue() * Long.valueOf(x15).longValue());
  long x70 = (Long.valueOf((arg1[0])).longValue() * Long.valueOf(x16).longValue());
  long x71 = (Long.valueOf((arg1[0])).longValue() * Long.valueOf(x17).longValue());
  long x72 = (Long.valueOf((arg1[0])).longValue() * Long.valueOf(x18).longValue());
  long x73 = (Long.valueOf((arg1[0])).longValue() * Long.valueOf((arg1[0])).longValue());
  long x74 = (x73 + (x55 + (x48 + (x42 + (x37 + x33)))));
  long x75 = (x74 >>> 26);
  int x76 = (Long.valueOf(x74).intValue() & 0x3ffffff);
  long x77 = (x64 + (x56 + (x49 + (x43 + x38))));
  long x78 = (x65 + (x57 + (x50 + (x44 + (x39 + x19)))));
  long x79 = (x66 + (x58 + (x51 + (x45 + x20))));
  long x80 = (x67 + (x59 + (x52 + (x46 + (x22 + x21)))));
  long x81 = (x68 + (x60 + (x53 + (x25 + x23))));
  long x82 = (x69 + (x61 + (x54 + (x29 + (x26 + x24)))));
  long x83 = (x70 + (x62 + (x34 + (x30 + x27))));
  long x84 = (x71 + (x63 + (x40 + (x35 + (x31 + x28)))));
  long x85 = (x72 + (x47 + (x41 + (x36 + x32))));
  long x86 = (x75 + x85);
  long x87 = (x86 >>> 25);
  int x88 = (Long.valueOf(x86).intValue() & 0x1ffffff);
  long x89 = (x87 + x84);
  long x90 = (x89 >>> 26);
  int x91 = (Long.valueOf(x89).intValue() & 0x3ffffff);
  long x92 = (x90 + x83);
  long x93 = (x92 >>> 25);
  int x94 = (Long.valueOf(x92).intValue() & 0x1ffffff);
  long x95 = (x93 + x82);
  long x96 = (x95 >>> 26);
  int x97 = (Long.valueOf(x95).intValue() & 0x3ffffff);
  long x98 = (x96 + x81);
  long x99 = (x98 >>> 25);
  int x100 = (Long.valueOf(x98).intValue() & 0x1ffffff);
  long x101 = (x99 + x80);
  long x102 = (x101 >>> 26);
  int x103 = (Long.valueOf(x101).intValue() & 0x3ffffff);
  long x104 = (x102 + x79);
  long x105 = (x104 >>> 25);
  int x106 = (Long.valueOf(x104).intValue() & 0x1ffffff);
  long x107 = (x105 + x78);
  long x108 = (x107 >>> 26);
  int x109 = (Long.valueOf(x107).intValue() & 0x3ffffff);
  long x110 = (x108 + x77);
  long x111 = (x110 >>> 25);
  int x112 = (Long.valueOf(x110).intValue() & 0x1ffffff);
  long x113 = (x111 * Long.valueOf(0x13).longValue());
  long x114 = (Long.valueOf(x76).longValue() + x113);
  int x115 = Long.valueOf((x114 >>> 26)).intValue();
  int x116 = (Long.valueOf(x114).intValue() & 0x3ffffff);
  int x117 = (x115 + x88);
  int x118 = (x117 >>> 25);
  int x119 = (x117 & 0x1ffffff);
  int x120 = (x118 + x91);
  out1[0] = x116;
  out1[1] = x119;
  out1[2] = x120;
  out1[3] = x94;
  out1[4] = x97;
  out1[5] = x100;
  out1[6] = x103;
  out1[7] = x106;
  out1[8] = x109;
  out1[9] = x112;
}

/**
 * The function fiat_Curve25519_carry reduces a field element. <p>
 * Postconditions: <p>
 *   eval out1 mod m = eval arg1 mod m <p>
 * <p>
 * Input Bounds: <p>
 *   arg1: [[0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999]] <p>
 * Output Bounds: <p>
 *   out1: [[0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333]] <p>
 */
public static void fiat_Curve25519_carry(int[] out1, final int[] arg1) {
  int x1 = (arg1[0]);
  int x2 = ((x1 >>> 26) + (arg1[1]));
  int x3 = ((x2 >>> 25) + (arg1[2]));
  int x4 = ((x3 >>> 26) + (arg1[3]));
  int x5 = ((x4 >>> 25) + (arg1[4]));
  int x6 = ((x5 >>> 26) + (arg1[5]));
  int x7 = ((x6 >>> 25) + (arg1[6]));
  int x8 = ((x7 >>> 26) + (arg1[7]));
  int x9 = ((x8 >>> 25) + (arg1[8]));
  int x10 = ((x9 >>> 26) + (arg1[9]));
  int x11 = ((x1 & 0x3ffffff) + ((x10 >>> 25) * 0x13));
  int x12 = ((x11 >>> 26) + (x2 & 0x1ffffff));
  int x13 = (x11 & 0x3ffffff);
  int x14 = (x12 & 0x1ffffff);
  int x15 = ((x12 >>> 25) + (x3 & 0x3ffffff));
  int x16 = (x4 & 0x1ffffff);
  int x17 = (x5 & 0x3ffffff);
  int x18 = (x6 & 0x1ffffff);
  int x19 = (x7 & 0x3ffffff);
  int x20 = (x8 & 0x1ffffff);
  int x21 = (x9 & 0x3ffffff);
  int x22 = (x10 & 0x1ffffff);
  out1[0] = x13;
  out1[1] = x14;
  out1[2] = x15;
  out1[3] = x16;
  out1[4] = x17;
  out1[5] = x18;
  out1[6] = x19;
  out1[7] = x20;
  out1[8] = x21;
  out1[9] = x22;
}

/**
 * The function fiat_Curve25519_add adds two field elements. <p>
 * Postconditions: <p>
 *   eval out1 mod m = (eval arg1 + eval arg2) mod m <p>
 * <p>
 * Input Bounds: <p>
 *   arg1: [[0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333]] <p>
 *   arg2: [[0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333]] <p>
 * Output Bounds: <p>
 *   out1: [[0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999]] <p>
 */
public static void fiat_Curve25519_add(int[] out1, final int[] arg1, final int[] arg2) {
  int x1 = ((arg1[0]) + (arg2[0]));
  int x2 = ((arg1[1]) + (arg2[1]));
  int x3 = ((arg1[2]) + (arg2[2]));
  int x4 = ((arg1[3]) + (arg2[3]));
  int x5 = ((arg1[4]) + (arg2[4]));
  int x6 = ((arg1[5]) + (arg2[5]));
  int x7 = ((arg1[6]) + (arg2[6]));
  int x8 = ((arg1[7]) + (arg2[7]));
  int x9 = ((arg1[8]) + (arg2[8]));
  int x10 = ((arg1[9]) + (arg2[9]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
  out1[4] = x5;
  out1[5] = x6;
  out1[6] = x7;
  out1[7] = x8;
  out1[8] = x9;
  out1[9] = x10;
}

/**
 * The function fiat_Curve25519_sub subtracts two field elements. <p>
 * Postconditions: <p>
 *   eval out1 mod m = (eval arg1 - eval arg2) mod m <p>
 * <p>
 * Input Bounds: <p>
 *   arg1: [[0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333]] <p>
 *   arg2: [[0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333]] <p>
 * Output Bounds: <p>
 *   out1: [[0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999]] <p>
 */
public static void fiat_Curve25519_sub(int[] out1, final int[] arg1, final int[] arg2) {
  int x1 = ((0x7ffffda + (arg1[0])) - (arg2[0]));
  int x2 = ((0x3fffffe + (arg1[1])) - (arg2[1]));
  int x3 = ((0x7fffffe + (arg1[2])) - (arg2[2]));
  int x4 = ((0x3fffffe + (arg1[3])) - (arg2[3]));
  int x5 = ((0x7fffffe + (arg1[4])) - (arg2[4]));
  int x6 = ((0x3fffffe + (arg1[5])) - (arg2[5]));
  int x7 = ((0x7fffffe + (arg1[6])) - (arg2[6]));
  int x8 = ((0x3fffffe + (arg1[7])) - (arg2[7]));
  int x9 = ((0x7fffffe + (arg1[8])) - (arg2[8]));
  int x10 = ((0x3fffffe + (arg1[9])) - (arg2[9]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
  out1[4] = x5;
  out1[5] = x6;
  out1[6] = x7;
  out1[7] = x8;
  out1[8] = x9;
  out1[9] = x10;
}

/**
 * The function fiat_Curve25519_opp negates a field element. <p>
 * Postconditions: <p>
 *   eval out1 mod m = -eval arg1 mod m <p>
 * <p>
 * Input Bounds: <p>
 *   arg1: [[0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333]] <p>
 * Output Bounds: <p>
 *   out1: [[0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999]] <p>
 */
public static void fiat_Curve25519_opp(int[] out1, final int[] arg1) {
  int x1 = (0x7ffffda - (arg1[0]));
  int x2 = (0x3fffffe - (arg1[1]));
  int x3 = (0x7fffffe - (arg1[2]));
  int x4 = (0x3fffffe - (arg1[3]));
  int x5 = (0x7fffffe - (arg1[4]));
  int x6 = (0x3fffffe - (arg1[5]));
  int x7 = (0x7fffffe - (arg1[6]));
  int x8 = (0x3fffffe - (arg1[7]));
  int x9 = (0x7fffffe - (arg1[8]));
  int x10 = (0x3fffffe - (arg1[9]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
  out1[4] = x5;
  out1[5] = x6;
  out1[6] = x7;
  out1[7] = x8;
  out1[8] = x9;
  out1[9] = x10;
}

/**
 * The function fiat_Curve25519_selectznz is a multi-limb conditional select. <p>
 * Postconditions: <p>
 *   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3) <p>
 * <p>
 * Input Bounds: <p>
 *   arg1: [0x0 ~&gt; 0x1] <p>
 *   arg2: [[0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff]] <p>
 *   arg3: [[0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff]] <p>
 * Output Bounds: <p>
 *   out1: [[0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff], [0x0 ~&gt; 0xffffffff]] <p>
 */
public static void fiat_Curve25519_selectznz(long[] out1, int arg1, final long[] arg2, final long[] arg3) {
  Box<Long> x1 = new Box<Long>((long)0);
  fiat_Curve25519_cmovznz_u64(x1, arg1, (arg2[0]), (arg3[0]));
  Box<Long> x2 = new Box<Long>((long)0);
  fiat_Curve25519_cmovznz_u64(x2, arg1, (arg2[1]), (arg3[1]));
  Box<Long> x3 = new Box<Long>((long)0);
  fiat_Curve25519_cmovznz_u64(x3, arg1, (arg2[2]), (arg3[2]));
  Box<Long> x4 = new Box<Long>((long)0);
  fiat_Curve25519_cmovznz_u64(x4, arg1, (arg2[3]), (arg3[3]));
  Box<Long> x5 = new Box<Long>((long)0);
  fiat_Curve25519_cmovznz_u64(x5, arg1, (arg2[4]), (arg3[4]));
  Box<Long> x6 = new Box<Long>((long)0);
  fiat_Curve25519_cmovznz_u64(x6, arg1, (arg2[5]), (arg3[5]));
  Box<Long> x7 = new Box<Long>((long)0);
  fiat_Curve25519_cmovznz_u64(x7, arg1, (arg2[6]), (arg3[6]));
  Box<Long> x8 = new Box<Long>((long)0);
  fiat_Curve25519_cmovznz_u64(x8, arg1, (arg2[7]), (arg3[7]));
  Box<Long> x9 = new Box<Long>((long)0);
  fiat_Curve25519_cmovznz_u64(x9, arg1, (arg2[8]), (arg3[8]));
  Box<Long> x10 = new Box<Long>((long)0);
  fiat_Curve25519_cmovznz_u64(x10, arg1, (arg2[9]), (arg3[9]));
  out1[0] = (x1).get();
  out1[1] = (x2).get();
  out1[2] = (x3).get();
  out1[3] = (x4).get();
  out1[4] = (x5).get();
  out1[5] = (x6).get();
  out1[6] = (x7).get();
  out1[7] = (x8).get();
  out1[8] = (x9).get();
  out1[9] = (x10).get();
}

/**
 * The function fiat_Curve25519_to_bytes serializes a field element to bytes in little-endian order. <p>
 * Postconditions: <p>
 *   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..31] <p>
 * <p>
 * Input Bounds: <p>
 *   arg1: [[0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333]] <p>
 * Output Bounds: <p>
 *   out1: [[0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0x7f]] <p>
 */
public static void fiat_Curve25519_to_bytes(int[] out1, final int[] arg1) {
  Box<Integer> x1 = new Box<Integer>((int)0);
  Box<Integer> x2 = new Box<Integer>((int)0);
  fiat_Curve25519_subborrowx_u26(x1, x2, 0x0, (arg1[0]), 0x3ffffed);
  Box<Integer> x3 = new Box<Integer>((int)0);
  Box<Integer> x4 = new Box<Integer>((int)0);
  fiat_Curve25519_subborrowx_u25(x3, x4, (x2).get(), (arg1[1]), 0x1ffffff);
  Box<Integer> x5 = new Box<Integer>((int)0);
  Box<Integer> x6 = new Box<Integer>((int)0);
  fiat_Curve25519_subborrowx_u26(x5, x6, (x4).get(), (arg1[2]), 0x3ffffff);
  Box<Integer> x7 = new Box<Integer>((int)0);
  Box<Integer> x8 = new Box<Integer>((int)0);
  fiat_Curve25519_subborrowx_u25(x7, x8, (x6).get(), (arg1[3]), 0x1ffffff);
  Box<Integer> x9 = new Box<Integer>((int)0);
  Box<Integer> x10 = new Box<Integer>((int)0);
  fiat_Curve25519_subborrowx_u26(x9, x10, (x8).get(), (arg1[4]), 0x3ffffff);
  Box<Integer> x11 = new Box<Integer>((int)0);
  Box<Integer> x12 = new Box<Integer>((int)0);
  fiat_Curve25519_subborrowx_u25(x11, x12, (x10).get(), (arg1[5]), 0x1ffffff);
  Box<Integer> x13 = new Box<Integer>((int)0);
  Box<Integer> x14 = new Box<Integer>((int)0);
  fiat_Curve25519_subborrowx_u26(x13, x14, (x12).get(), (arg1[6]), 0x3ffffff);
  Box<Integer> x15 = new Box<Integer>((int)0);
  Box<Integer> x16 = new Box<Integer>((int)0);
  fiat_Curve25519_subborrowx_u25(x15, x16, (x14).get(), (arg1[7]), 0x1ffffff);
  Box<Integer> x17 = new Box<Integer>((int)0);
  Box<Integer> x18 = new Box<Integer>((int)0);
  fiat_Curve25519_subborrowx_u26(x17, x18, (x16).get(), (arg1[8]), 0x3ffffff);
  Box<Integer> x19 = new Box<Integer>((int)0);
  Box<Integer> x20 = new Box<Integer>((int)0);
  fiat_Curve25519_subborrowx_u25(x19, x20, (x18).get(), (arg1[9]), 0x1ffffff);
  Box<Long> x21 = new Box<Long>((long)0);
  fiat_Curve25519_cmovznz_u64(x21, (x20).get(), Long.valueOf(0x0).longValue(), 0xffffffff);
  Box<Integer> x22 = new Box<Integer>((int)0);
  Box<Integer> x23 = new Box<Integer>((int)0);
  fiat_Curve25519_addcarryx_u26(x22, x23, 0x0, Long.valueOf((x1).get()).intValue(), Long.valueOf((Long.valueOf((x21).get()).intValue() & 0x3ffffed)).intValue());
  Box<Integer> x24 = new Box<Integer>((int)0);
  Box<Integer> x25 = new Box<Integer>((int)0);
  fiat_Curve25519_addcarryx_u25(x24, x25, (x23).get(), (x3).get(), (Long.valueOf((x21).get()).intValue() & 0x1ffffff));
  Box<Integer> x26 = new Box<Integer>((int)0);
  Box<Integer> x27 = new Box<Integer>((int)0);
  fiat_Curve25519_addcarryx_u26(x26, x27, (x25).get(), (x5).get(), (Long.valueOf((x21).get()).intValue() & 0x3ffffff));
  Box<Integer> x28 = new Box<Integer>((int)0);
  Box<Integer> x29 = new Box<Integer>((int)0);
  fiat_Curve25519_addcarryx_u25(x28, x29, (x27).get(), (x7).get(), (Long.valueOf((x21).get()).intValue() & 0x1ffffff));
  Box<Integer> x30 = new Box<Integer>((int)0);
  Box<Integer> x31 = new Box<Integer>((int)0);
  fiat_Curve25519_addcarryx_u26(x30, x31, (x29).get(), (x9).get(), (Long.valueOf((x21).get()).intValue() & 0x3ffffff));
  Box<Integer> x32 = new Box<Integer>((int)0);
  Box<Integer> x33 = new Box<Integer>((int)0);
  fiat_Curve25519_addcarryx_u25(x32, x33, (x31).get(), (x11).get(), (Long.valueOf((x21).get()).intValue() & 0x1ffffff));
  Box<Integer> x34 = new Box<Integer>((int)0);
  Box<Integer> x35 = new Box<Integer>((int)0);
  fiat_Curve25519_addcarryx_u26(x34, x35, (x33).get(), (x13).get(), (Long.valueOf((x21).get()).intValue() & 0x3ffffff));
  Box<Integer> x36 = new Box<Integer>((int)0);
  Box<Integer> x37 = new Box<Integer>((int)0);
  fiat_Curve25519_addcarryx_u25(x36, x37, (x35).get(), (x15).get(), (Long.valueOf((x21).get()).intValue() & 0x1ffffff));
  Box<Integer> x38 = new Box<Integer>((int)0);
  Box<Integer> x39 = new Box<Integer>((int)0);
  fiat_Curve25519_addcarryx_u26(x38, x39, (x37).get(), (x17).get(), (Long.valueOf((x21).get()).intValue() & 0x3ffffff));
  Box<Integer> x40 = new Box<Integer>((int)0);
  Box<Integer> x41 = new Box<Integer>((int)0);
  fiat_Curve25519_addcarryx_u25(x40, x41, (x39).get(), (x19).get(), (Long.valueOf((x21).get()).intValue() & 0x1ffffff));
  int x42 = Long.valueOf((Long.valueOf((x40).get()).intValue() << 6)).intValue();
  int x43 = Long.valueOf((Long.valueOf((x38).get()).intValue() << 4)).intValue();
  int x44 = Long.valueOf((Long.valueOf((x36).get()).intValue() << 3)).intValue();
  int x45 = ((x34).get() * 0x2);
  long x46 = Long.valueOf((Long.valueOf((x30).get()).longValue() << 6)).longValue();
  int x47 = Long.valueOf((Long.valueOf((x28).get()).intValue() << 5)).intValue();
  int x48 = Long.valueOf((Long.valueOf((x26).get()).intValue() << 3)).intValue();
  int x49 = Long.valueOf((Long.valueOf((x24).get()).intValue() << 2)).intValue();
  int x50 = ((x22).get() >>> 8);
  int x51 = ((x22).get() & 0xff);
  int x52 = (x50 >>> 8);
  int x53 = (x50 & 0xff);
  int x54 = (x52 >>> 8);
  int x55 = (x52 & 0xff);
  int x56 = (x54 + x49);
  int x57 = (x56 >>> 8);
  int x58 = (x56 & 0xff);
  int x59 = (x57 >>> 8);
  int x60 = (x57 & 0xff);
  int x61 = (x59 >>> 8);
  int x62 = (x59 & 0xff);
  int x63 = (x61 + x48);
  int x64 = (x63 >>> 8);
  int x65 = (x63 & 0xff);
  int x66 = (x64 >>> 8);
  int x67 = (x64 & 0xff);
  int x68 = (x66 >>> 8);
  int x69 = (x66 & 0xff);
  int x70 = (x68 + x47);
  int x71 = (x70 >>> 8);
  int x72 = (x70 & 0xff);
  int x73 = (x71 >>> 8);
  int x74 = (x71 & 0xff);
  int x75 = (x73 >>> 8);
  int x76 = (x73 & 0xff);
  long x77 = (Long.valueOf(x75).longValue() + x46);
  int x78 = Long.valueOf((x77 >>> 8)).intValue();
  int x79 = (Long.valueOf(x77).intValue() & 0xff);
  int x80 = (x78 >>> 8);
  int x81 = (x78 & 0xff);
  int x82 = (x80 >>> 8);
  int x83 = (x80 & 0xff);
  int x84 = (x82 & 0xff);
  int x85 = ((x32).get() >>> 8);
  int x86 = ((x32).get() & 0xff);
  int x87 = (x85 >>> 8);
  int x88 = (x85 & 0xff);
  int x89 = (x87 >>> 8);
  int x90 = (x87 & 0xff);
  int x91 = (x89 + x45);
  int x92 = (x91 >>> 8);
  int x93 = (x91 & 0xff);
  int x94 = (x92 >>> 8);
  int x95 = (x92 & 0xff);
  int x96 = (x94 >>> 8);
  int x97 = (x94 & 0xff);
  int x98 = (x96 + x44);
  int x99 = (x98 >>> 8);
  int x100 = (x98 & 0xff);
  int x101 = (x99 >>> 8);
  int x102 = (x99 & 0xff);
  int x103 = (x101 >>> 8);
  int x104 = (x101 & 0xff);
  int x105 = (x103 + x43);
  int x106 = (x105 >>> 8);
  int x107 = (x105 & 0xff);
  int x108 = (x106 >>> 8);
  int x109 = (x106 & 0xff);
  int x110 = (x108 >>> 8);
  int x111 = (x108 & 0xff);
  int x112 = (x110 + x42);
  int x113 = (x112 >>> 8);
  int x114 = (x112 & 0xff);
  int x115 = (x113 >>> 8);
  int x116 = (x113 & 0xff);
  int x117 = (x115 >>> 8);
  int x118 = (x115 & 0xff);
  out1[0] = x51;
  out1[1] = x53;
  out1[2] = x55;
  out1[3] = x58;
  out1[4] = x60;
  out1[5] = x62;
  out1[6] = x65;
  out1[7] = x67;
  out1[8] = x69;
  out1[9] = x72;
  out1[10] = x74;
  out1[11] = x76;
  out1[12] = x79;
  out1[13] = x81;
  out1[14] = x83;
  out1[15] = x84;
  out1[16] = x86;
  out1[17] = x88;
  out1[18] = x90;
  out1[19] = x93;
  out1[20] = x95;
  out1[21] = x97;
  out1[22] = x100;
  out1[23] = x102;
  out1[24] = x104;
  out1[25] = x107;
  out1[26] = x109;
  out1[27] = x111;
  out1[28] = x114;
  out1[29] = x116;
  out1[30] = x118;
  out1[31] = x117;
}

/**
 * The function fiat_Curve25519_from_bytes deserializes a field element from bytes in little-endian order. <p>
 * Postconditions: <p>
 *   eval out1 mod m = bytes_eval arg1 mod m <p>
 * <p>
 * Input Bounds: <p>
 *   arg1: [[0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0x7f]] <p>
 * Output Bounds: <p>
 *   out1: [[0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333]] <p>
 */
public static void fiat_Curve25519_from_bytes(int[] out1, final int[] arg1) {
  int x1 = Long.valueOf((Long.valueOf((arg1[31])).intValue() << 18)).intValue();
  int x2 = Long.valueOf((Long.valueOf((arg1[30])).intValue() << 10)).intValue();
  int x3 = Long.valueOf((Long.valueOf((arg1[29])).intValue() << 2)).intValue();
  int x4 = Long.valueOf((Long.valueOf((arg1[28])).intValue() << 20)).intValue();
  int x5 = Long.valueOf((Long.valueOf((arg1[27])).intValue() << 12)).intValue();
  int x6 = Long.valueOf((Long.valueOf((arg1[26])).intValue() << 4)).intValue();
  int x7 = Long.valueOf((Long.valueOf((arg1[25])).intValue() << 21)).intValue();
  int x8 = Long.valueOf((Long.valueOf((arg1[24])).intValue() << 13)).intValue();
  int x9 = Long.valueOf((Long.valueOf((arg1[23])).intValue() << 5)).intValue();
  int x10 = Long.valueOf((Long.valueOf((arg1[22])).intValue() << 23)).intValue();
  int x11 = Long.valueOf((Long.valueOf((arg1[21])).intValue() << 15)).intValue();
  int x12 = Long.valueOf((Long.valueOf((arg1[20])).intValue() << 7)).intValue();
  long x13 = Long.valueOf((Long.valueOf((arg1[19])).longValue() << 24)).longValue();
  int x14 = Long.valueOf((Long.valueOf((arg1[18])).intValue() << 16)).intValue();
  int x15 = Long.valueOf((Long.valueOf((arg1[17])).intValue() << 8)).intValue();
  int x16 = (arg1[16]);
  int x17 = Long.valueOf((Long.valueOf((arg1[15])).intValue() << 18)).intValue();
  int x18 = Long.valueOf((Long.valueOf((arg1[14])).intValue() << 10)).intValue();
  int x19 = Long.valueOf((Long.valueOf((arg1[13])).intValue() << 2)).intValue();
  int x20 = Long.valueOf((Long.valueOf((arg1[12])).intValue() << 19)).intValue();
  int x21 = Long.valueOf((Long.valueOf((arg1[11])).intValue() << 11)).intValue();
  int x22 = Long.valueOf((Long.valueOf((arg1[10])).intValue() << 3)).intValue();
  int x23 = Long.valueOf((Long.valueOf((arg1[9])).intValue() << 21)).intValue();
  int x24 = Long.valueOf((Long.valueOf((arg1[8])).intValue() << 13)).intValue();
  int x25 = Long.valueOf((Long.valueOf((arg1[7])).intValue() << 5)).intValue();
  int x26 = Long.valueOf((Long.valueOf((arg1[6])).intValue() << 22)).intValue();
  int x27 = Long.valueOf((Long.valueOf((arg1[5])).intValue() << 14)).intValue();
  int x28 = Long.valueOf((Long.valueOf((arg1[4])).intValue() << 6)).intValue();
  long x29 = Long.valueOf((Long.valueOf((arg1[3])).longValue() << 24)).longValue();
  int x30 = Long.valueOf((Long.valueOf((arg1[2])).intValue() << 16)).intValue();
  int x31 = Long.valueOf((Long.valueOf((arg1[1])).intValue() << 8)).intValue();
  int x32 = (arg1[0]);
  long x33 = (Long.valueOf(x32).longValue() + (Long.valueOf(x31).longValue() + (Long.valueOf(x30).longValue() + x29)));
  int x34 = Long.valueOf((x33 >>> 26)).intValue();
  int x35 = (Long.valueOf(x33).intValue() & 0x3ffffff);
  int x36 = (x3 + (x2 + x1));
  int x37 = (x6 + (x5 + x4));
  int x38 = (x9 + (x8 + x7));
  int x39 = (x12 + (x11 + x10));
  long x40 = (Long.valueOf(x16).longValue() + (Long.valueOf(x15).longValue() + (Long.valueOf(x14).longValue() + x13)));
  int x41 = (x19 + (x18 + x17));
  int x42 = (x22 + (x21 + x20));
  int x43 = (x25 + (x24 + x23));
  int x44 = (x28 + (x27 + x26));
  int x45 = (x34 + x44);
  int x46 = (x45 >>> 25);
  int x47 = (x45 & 0x1ffffff);
  int x48 = (x46 + x43);
  int x49 = (x48 >>> 26);
  int x50 = (x48 & 0x3ffffff);
  int x51 = (x49 + x42);
  int x52 = (x51 >>> 25);
  int x53 = (x51 & 0x1ffffff);
  int x54 = (x52 + x41);
  int x55 = (x54 & 0x3ffffff);
  int x56 = Long.valueOf((x40 >>> 25)).intValue();
  int x57 = (Long.valueOf(x40).intValue() & 0x1ffffff);
  int x58 = (x56 + x39);
  int x59 = (x58 >>> 26);
  int x60 = (x58 & 0x3ffffff);
  int x61 = (x59 + x38);
  int x62 = (x61 >>> 25);
  int x63 = (x61 & 0x1ffffff);
  int x64 = (x62 + x37);
  int x65 = (x64 >>> 26);
  int x66 = (x64 & 0x3ffffff);
  int x67 = (x65 + x36);
  out1[0] = x35;
  out1[1] = x47;
  out1[2] = x50;
  out1[3] = x53;
  out1[4] = x55;
  out1[5] = x57;
  out1[6] = x60;
  out1[7] = x63;
  out1[8] = x66;
  out1[9] = x67;
}

/**
 * The function fiat_Curve25519_carry_scmul_121666 multiplies a field element by 121666 and reduces the result. <p>
 * Postconditions: <p>
 *   eval out1 mod m = (121666 * eval arg1) mod m <p>
 * <p>
 * Input Bounds: <p>
 *   arg1: [[0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999], [0x0 ~&gt; 0xd333332], [0x0 ~&gt; 0x6999999]] <p>
 * Output Bounds: <p>
 *   out1: [[0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333], [0x0 ~&gt; 0x4666666], [0x0 ~&gt; 0x2333333]] <p>
 */
public static void fiat_Curve25519_carry_scmul_121666(int[] out1, final int[] arg1) {
  long x1 = (Long.valueOf(0x1db42).longValue() * Long.valueOf((arg1[9])).longValue());
  long x2 = (Long.valueOf(0x1db42).longValue() * Long.valueOf((arg1[8])).longValue());
  long x3 = (Long.valueOf(0x1db42).longValue() * Long.valueOf((arg1[7])).longValue());
  long x4 = (Long.valueOf(0x1db42).longValue() * Long.valueOf((arg1[6])).longValue());
  long x5 = (Long.valueOf(0x1db42).longValue() * Long.valueOf((arg1[5])).longValue());
  long x6 = (Long.valueOf(0x1db42).longValue() * Long.valueOf((arg1[4])).longValue());
  long x7 = (Long.valueOf(0x1db42).longValue() * Long.valueOf((arg1[3])).longValue());
  long x8 = (Long.valueOf(0x1db42).longValue() * Long.valueOf((arg1[2])).longValue());
  long x9 = (Long.valueOf(0x1db42).longValue() * Long.valueOf((arg1[1])).longValue());
  long x10 = (Long.valueOf(0x1db42).longValue() * Long.valueOf((arg1[0])).longValue());
  int x11 = Long.valueOf((x10 >>> 26)).intValue();
  int x12 = (Long.valueOf(x10).intValue() & 0x3ffffff);
  long x13 = (Long.valueOf(x11).longValue() + x9);
  int x14 = Long.valueOf((x13 >>> 25)).intValue();
  int x15 = (Long.valueOf(x13).intValue() & 0x1ffffff);
  long x16 = (Long.valueOf(x14).longValue() + x8);
  int x17 = Long.valueOf((x16 >>> 26)).intValue();
  int x18 = (Long.valueOf(x16).intValue() & 0x3ffffff);
  long x19 = (Long.valueOf(x17).longValue() + x7);
  int x20 = Long.valueOf((x19 >>> 25)).intValue();
  int x21 = (Long.valueOf(x19).intValue() & 0x1ffffff);
  long x22 = (Long.valueOf(x20).longValue() + x6);
  int x23 = Long.valueOf((x22 >>> 26)).intValue();
  int x24 = (Long.valueOf(x22).intValue() & 0x3ffffff);
  long x25 = (Long.valueOf(x23).longValue() + x5);
  int x26 = Long.valueOf((x25 >>> 25)).intValue();
  int x27 = (Long.valueOf(x25).intValue() & 0x1ffffff);
  long x28 = (Long.valueOf(x26).longValue() + x4);
  int x29 = Long.valueOf((x28 >>> 26)).intValue();
  int x30 = (Long.valueOf(x28).intValue() & 0x3ffffff);
  long x31 = (Long.valueOf(x29).longValue() + x3);
  int x32 = Long.valueOf((x31 >>> 25)).intValue();
  int x33 = (Long.valueOf(x31).intValue() & 0x1ffffff);
  long x34 = (Long.valueOf(x32).longValue() + x2);
  int x35 = Long.valueOf((x34 >>> 26)).intValue();
  int x36 = (Long.valueOf(x34).intValue() & 0x3ffffff);
  long x37 = (Long.valueOf(x35).longValue() + x1);
  int x38 = Long.valueOf((x37 >>> 25)).intValue();
  int x39 = (Long.valueOf(x37).intValue() & 0x1ffffff);
  int x40 = (x38 * 0x13);
  int x41 = (x12 + x40);
  int x42 = (x41 >>> 26);
  int x43 = (x41 & 0x3ffffff);
  int x44 = (x42 + x15);
  int x45 = (x44 >>> 25);
  int x46 = (x44 & 0x1ffffff);
  int x47 = (x45 + x18);
  out1[0] = x43;
  out1[1] = x46;
  out1[2] = x47;
  out1[3] = x21;
  out1[4] = x24;
  out1[5] = x27;
  out1[6] = x30;
  out1[7] = x33;
  out1[8] = x36;
  out1[9] = x39;
}

}

